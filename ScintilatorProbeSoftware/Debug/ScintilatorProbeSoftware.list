
ScintilatorProbeSoftware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000f370  08000110  08000110  00001110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005b8  0800f480  0800f480  00010480  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800fa38  0800fa38  00011358  2**0
                  CONTENTS
  4 .ARM          00000008  0800fa38  0800fa38  00010a38  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800fa40  0800fa40  00011358  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800fa40  0800fa40  00010a40  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800fa44  0800fa44  00010a44  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000358  20000000  0800fa48  00011000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000013b0  20000358  0800fda0  00011358  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001708  0800fda0  00011708  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00011358  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001361b  00000000  00000000  00011381  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000037a4  00000000  00000000  0002499c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001240  00000000  00000000  00028140  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000dd1  00000000  00000000  00029380  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001bb9c  00000000  00000000  0002a151  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000156a2  00000000  00000000  00045ced  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000945c0  00000000  00000000  0005b38f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000ef94f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000062fc  00000000  00000000  000ef994  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000071  00000000  00000000  000f5c90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000358 	.word	0x20000358
 800012c:	00000000 	.word	0x00000000
 8000130:	0800f468 	.word	0x0800f468

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	2000035c 	.word	0x2000035c
 800014c:	0800f468 	.word	0x0800f468

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_fmul>:
 8000160:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000164:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000168:	bf1e      	ittt	ne
 800016a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 800016e:	ea92 0f0c 	teqne	r2, ip
 8000172:	ea93 0f0c 	teqne	r3, ip
 8000176:	d06f      	beq.n	8000258 <__aeabi_fmul+0xf8>
 8000178:	441a      	add	r2, r3
 800017a:	ea80 0c01 	eor.w	ip, r0, r1
 800017e:	0240      	lsls	r0, r0, #9
 8000180:	bf18      	it	ne
 8000182:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000186:	d01e      	beq.n	80001c6 <__aeabi_fmul+0x66>
 8000188:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800018c:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000190:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000194:	fba0 3101 	umull	r3, r1, r0, r1
 8000198:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 800019c:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 80001a0:	bf3e      	ittt	cc
 80001a2:	0049      	lslcc	r1, r1, #1
 80001a4:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80001a8:	005b      	lslcc	r3, r3, #1
 80001aa:	ea40 0001 	orr.w	r0, r0, r1
 80001ae:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 80001b2:	2afd      	cmp	r2, #253	@ 0xfd
 80001b4:	d81d      	bhi.n	80001f2 <__aeabi_fmul+0x92>
 80001b6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80001ba:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80001be:	bf08      	it	eq
 80001c0:	f020 0001 	biceq.w	r0, r0, #1
 80001c4:	4770      	bx	lr
 80001c6:	f090 0f00 	teq	r0, #0
 80001ca:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 80001ce:	bf08      	it	eq
 80001d0:	0249      	lsleq	r1, r1, #9
 80001d2:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80001d6:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80001da:	3a7f      	subs	r2, #127	@ 0x7f
 80001dc:	bfc2      	ittt	gt
 80001de:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 80001e2:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80001e6:	4770      	bxgt	lr
 80001e8:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80001ec:	f04f 0300 	mov.w	r3, #0
 80001f0:	3a01      	subs	r2, #1
 80001f2:	dc5d      	bgt.n	80002b0 <__aeabi_fmul+0x150>
 80001f4:	f112 0f19 	cmn.w	r2, #25
 80001f8:	bfdc      	itt	le
 80001fa:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 80001fe:	4770      	bxle	lr
 8000200:	f1c2 0200 	rsb	r2, r2, #0
 8000204:	0041      	lsls	r1, r0, #1
 8000206:	fa21 f102 	lsr.w	r1, r1, r2
 800020a:	f1c2 0220 	rsb	r2, r2, #32
 800020e:	fa00 fc02 	lsl.w	ip, r0, r2
 8000212:	ea5f 0031 	movs.w	r0, r1, rrx
 8000216:	f140 0000 	adc.w	r0, r0, #0
 800021a:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 800021e:	bf08      	it	eq
 8000220:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000224:	4770      	bx	lr
 8000226:	f092 0f00 	teq	r2, #0
 800022a:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 800022e:	bf02      	ittt	eq
 8000230:	0040      	lsleq	r0, r0, #1
 8000232:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000236:	3a01      	subeq	r2, #1
 8000238:	d0f9      	beq.n	800022e <__aeabi_fmul+0xce>
 800023a:	ea40 000c 	orr.w	r0, r0, ip
 800023e:	f093 0f00 	teq	r3, #0
 8000242:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000246:	bf02      	ittt	eq
 8000248:	0049      	lsleq	r1, r1, #1
 800024a:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 800024e:	3b01      	subeq	r3, #1
 8000250:	d0f9      	beq.n	8000246 <__aeabi_fmul+0xe6>
 8000252:	ea41 010c 	orr.w	r1, r1, ip
 8000256:	e78f      	b.n	8000178 <__aeabi_fmul+0x18>
 8000258:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 800025c:	ea92 0f0c 	teq	r2, ip
 8000260:	bf18      	it	ne
 8000262:	ea93 0f0c 	teqne	r3, ip
 8000266:	d00a      	beq.n	800027e <__aeabi_fmul+0x11e>
 8000268:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 800026c:	bf18      	it	ne
 800026e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000272:	d1d8      	bne.n	8000226 <__aeabi_fmul+0xc6>
 8000274:	ea80 0001 	eor.w	r0, r0, r1
 8000278:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 800027c:	4770      	bx	lr
 800027e:	f090 0f00 	teq	r0, #0
 8000282:	bf17      	itett	ne
 8000284:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000288:	4608      	moveq	r0, r1
 800028a:	f091 0f00 	teqne	r1, #0
 800028e:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 8000292:	d014      	beq.n	80002be <__aeabi_fmul+0x15e>
 8000294:	ea92 0f0c 	teq	r2, ip
 8000298:	d101      	bne.n	800029e <__aeabi_fmul+0x13e>
 800029a:	0242      	lsls	r2, r0, #9
 800029c:	d10f      	bne.n	80002be <__aeabi_fmul+0x15e>
 800029e:	ea93 0f0c 	teq	r3, ip
 80002a2:	d103      	bne.n	80002ac <__aeabi_fmul+0x14c>
 80002a4:	024b      	lsls	r3, r1, #9
 80002a6:	bf18      	it	ne
 80002a8:	4608      	movne	r0, r1
 80002aa:	d108      	bne.n	80002be <__aeabi_fmul+0x15e>
 80002ac:	ea80 0001 	eor.w	r0, r0, r1
 80002b0:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 80002b4:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 80002b8:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80002bc:	4770      	bx	lr
 80002be:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 80002c2:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 80002c6:	4770      	bx	lr

080002c8 <__aeabi_drsub>:
 80002c8:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002cc:	e002      	b.n	80002d4 <__adddf3>
 80002ce:	bf00      	nop

080002d0 <__aeabi_dsub>:
 80002d0:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002d4 <__adddf3>:
 80002d4:	b530      	push	{r4, r5, lr}
 80002d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002de:	ea94 0f05 	teq	r4, r5
 80002e2:	bf08      	it	eq
 80002e4:	ea90 0f02 	teqeq	r0, r2
 80002e8:	bf1f      	itttt	ne
 80002ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002fa:	f000 80e2 	beq.w	80004c2 <__adddf3+0x1ee>
 80002fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000302:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000306:	bfb8      	it	lt
 8000308:	426d      	neglt	r5, r5
 800030a:	dd0c      	ble.n	8000326 <__adddf3+0x52>
 800030c:	442c      	add	r4, r5
 800030e:	ea80 0202 	eor.w	r2, r0, r2
 8000312:	ea81 0303 	eor.w	r3, r1, r3
 8000316:	ea82 0000 	eor.w	r0, r2, r0
 800031a:	ea83 0101 	eor.w	r1, r3, r1
 800031e:	ea80 0202 	eor.w	r2, r0, r2
 8000322:	ea81 0303 	eor.w	r3, r1, r3
 8000326:	2d36      	cmp	r5, #54	@ 0x36
 8000328:	bf88      	it	hi
 800032a:	bd30      	pophi	{r4, r5, pc}
 800032c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000330:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000334:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000338:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800033c:	d002      	beq.n	8000344 <__adddf3+0x70>
 800033e:	4240      	negs	r0, r0
 8000340:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000344:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000348:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800034c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000350:	d002      	beq.n	8000358 <__adddf3+0x84>
 8000352:	4252      	negs	r2, r2
 8000354:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000358:	ea94 0f05 	teq	r4, r5
 800035c:	f000 80a7 	beq.w	80004ae <__adddf3+0x1da>
 8000360:	f1a4 0401 	sub.w	r4, r4, #1
 8000364:	f1d5 0e20 	rsbs	lr, r5, #32
 8000368:	db0d      	blt.n	8000386 <__adddf3+0xb2>
 800036a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800036e:	fa22 f205 	lsr.w	r2, r2, r5
 8000372:	1880      	adds	r0, r0, r2
 8000374:	f141 0100 	adc.w	r1, r1, #0
 8000378:	fa03 f20e 	lsl.w	r2, r3, lr
 800037c:	1880      	adds	r0, r0, r2
 800037e:	fa43 f305 	asr.w	r3, r3, r5
 8000382:	4159      	adcs	r1, r3
 8000384:	e00e      	b.n	80003a4 <__adddf3+0xd0>
 8000386:	f1a5 0520 	sub.w	r5, r5, #32
 800038a:	f10e 0e20 	add.w	lr, lr, #32
 800038e:	2a01      	cmp	r2, #1
 8000390:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000394:	bf28      	it	cs
 8000396:	f04c 0c02 	orrcs.w	ip, ip, #2
 800039a:	fa43 f305 	asr.w	r3, r3, r5
 800039e:	18c0      	adds	r0, r0, r3
 80003a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003a4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003a8:	d507      	bpl.n	80003ba <__adddf3+0xe6>
 80003aa:	f04f 0e00 	mov.w	lr, #0
 80003ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80003b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80003ba:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003be:	d31b      	bcc.n	80003f8 <__adddf3+0x124>
 80003c0:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003c4:	d30c      	bcc.n	80003e0 <__adddf3+0x10c>
 80003c6:	0849      	lsrs	r1, r1, #1
 80003c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80003cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d0:	f104 0401 	add.w	r4, r4, #1
 80003d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d8:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003dc:	f080 809a 	bcs.w	8000514 <__adddf3+0x240>
 80003e0:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003e4:	bf08      	it	eq
 80003e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003ea:	f150 0000 	adcs.w	r0, r0, #0
 80003ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003f2:	ea41 0105 	orr.w	r1, r1, r5
 80003f6:	bd30      	pop	{r4, r5, pc}
 80003f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003fc:	4140      	adcs	r0, r0
 80003fe:	eb41 0101 	adc.w	r1, r1, r1
 8000402:	3c01      	subs	r4, #1
 8000404:	bf28      	it	cs
 8000406:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800040a:	d2e9      	bcs.n	80003e0 <__adddf3+0x10c>
 800040c:	f091 0f00 	teq	r1, #0
 8000410:	bf04      	itt	eq
 8000412:	4601      	moveq	r1, r0
 8000414:	2000      	moveq	r0, #0
 8000416:	fab1 f381 	clz	r3, r1
 800041a:	bf08      	it	eq
 800041c:	3320      	addeq	r3, #32
 800041e:	f1a3 030b 	sub.w	r3, r3, #11
 8000422:	f1b3 0220 	subs.w	r2, r3, #32
 8000426:	da0c      	bge.n	8000442 <__adddf3+0x16e>
 8000428:	320c      	adds	r2, #12
 800042a:	dd08      	ble.n	800043e <__adddf3+0x16a>
 800042c:	f102 0c14 	add.w	ip, r2, #20
 8000430:	f1c2 020c 	rsb	r2, r2, #12
 8000434:	fa01 f00c 	lsl.w	r0, r1, ip
 8000438:	fa21 f102 	lsr.w	r1, r1, r2
 800043c:	e00c      	b.n	8000458 <__adddf3+0x184>
 800043e:	f102 0214 	add.w	r2, r2, #20
 8000442:	bfd8      	it	le
 8000444:	f1c2 0c20 	rsble	ip, r2, #32
 8000448:	fa01 f102 	lsl.w	r1, r1, r2
 800044c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000450:	bfdc      	itt	le
 8000452:	ea41 010c 	orrle.w	r1, r1, ip
 8000456:	4090      	lslle	r0, r2
 8000458:	1ae4      	subs	r4, r4, r3
 800045a:	bfa2      	ittt	ge
 800045c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000460:	4329      	orrge	r1, r5
 8000462:	bd30      	popge	{r4, r5, pc}
 8000464:	ea6f 0404 	mvn.w	r4, r4
 8000468:	3c1f      	subs	r4, #31
 800046a:	da1c      	bge.n	80004a6 <__adddf3+0x1d2>
 800046c:	340c      	adds	r4, #12
 800046e:	dc0e      	bgt.n	800048e <__adddf3+0x1ba>
 8000470:	f104 0414 	add.w	r4, r4, #20
 8000474:	f1c4 0220 	rsb	r2, r4, #32
 8000478:	fa20 f004 	lsr.w	r0, r0, r4
 800047c:	fa01 f302 	lsl.w	r3, r1, r2
 8000480:	ea40 0003 	orr.w	r0, r0, r3
 8000484:	fa21 f304 	lsr.w	r3, r1, r4
 8000488:	ea45 0103 	orr.w	r1, r5, r3
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	f1c4 040c 	rsb	r4, r4, #12
 8000492:	f1c4 0220 	rsb	r2, r4, #32
 8000496:	fa20 f002 	lsr.w	r0, r0, r2
 800049a:	fa01 f304 	lsl.w	r3, r1, r4
 800049e:	ea40 0003 	orr.w	r0, r0, r3
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	fa21 f004 	lsr.w	r0, r1, r4
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	f094 0f00 	teq	r4, #0
 80004b2:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004b6:	bf06      	itte	eq
 80004b8:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004bc:	3401      	addeq	r4, #1
 80004be:	3d01      	subne	r5, #1
 80004c0:	e74e      	b.n	8000360 <__adddf3+0x8c>
 80004c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004c6:	bf18      	it	ne
 80004c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004cc:	d029      	beq.n	8000522 <__adddf3+0x24e>
 80004ce:	ea94 0f05 	teq	r4, r5
 80004d2:	bf08      	it	eq
 80004d4:	ea90 0f02 	teqeq	r0, r2
 80004d8:	d005      	beq.n	80004e6 <__adddf3+0x212>
 80004da:	ea54 0c00 	orrs.w	ip, r4, r0
 80004de:	bf04      	itt	eq
 80004e0:	4619      	moveq	r1, r3
 80004e2:	4610      	moveq	r0, r2
 80004e4:	bd30      	pop	{r4, r5, pc}
 80004e6:	ea91 0f03 	teq	r1, r3
 80004ea:	bf1e      	ittt	ne
 80004ec:	2100      	movne	r1, #0
 80004ee:	2000      	movne	r0, #0
 80004f0:	bd30      	popne	{r4, r5, pc}
 80004f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004f6:	d105      	bne.n	8000504 <__adddf3+0x230>
 80004f8:	0040      	lsls	r0, r0, #1
 80004fa:	4149      	adcs	r1, r1
 80004fc:	bf28      	it	cs
 80004fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000502:	bd30      	pop	{r4, r5, pc}
 8000504:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000508:	bf3c      	itt	cc
 800050a:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800050e:	bd30      	popcc	{r4, r5, pc}
 8000510:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000514:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000518:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800051c:	f04f 0000 	mov.w	r0, #0
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000526:	bf1a      	itte	ne
 8000528:	4619      	movne	r1, r3
 800052a:	4610      	movne	r0, r2
 800052c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000530:	bf1c      	itt	ne
 8000532:	460b      	movne	r3, r1
 8000534:	4602      	movne	r2, r0
 8000536:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800053a:	bf06      	itte	eq
 800053c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000540:	ea91 0f03 	teqeq	r1, r3
 8000544:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000548:	bd30      	pop	{r4, r5, pc}
 800054a:	bf00      	nop

0800054c <__aeabi_ui2d>:
 800054c:	f090 0f00 	teq	r0, #0
 8000550:	bf04      	itt	eq
 8000552:	2100      	moveq	r1, #0
 8000554:	4770      	bxeq	lr
 8000556:	b530      	push	{r4, r5, lr}
 8000558:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800055c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000560:	f04f 0500 	mov.w	r5, #0
 8000564:	f04f 0100 	mov.w	r1, #0
 8000568:	e750      	b.n	800040c <__adddf3+0x138>
 800056a:	bf00      	nop

0800056c <__aeabi_i2d>:
 800056c:	f090 0f00 	teq	r0, #0
 8000570:	bf04      	itt	eq
 8000572:	2100      	moveq	r1, #0
 8000574:	4770      	bxeq	lr
 8000576:	b530      	push	{r4, r5, lr}
 8000578:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800057c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000580:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000584:	bf48      	it	mi
 8000586:	4240      	negmi	r0, r0
 8000588:	f04f 0100 	mov.w	r1, #0
 800058c:	e73e      	b.n	800040c <__adddf3+0x138>
 800058e:	bf00      	nop

08000590 <__aeabi_f2d>:
 8000590:	0042      	lsls	r2, r0, #1
 8000592:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000596:	ea4f 0131 	mov.w	r1, r1, rrx
 800059a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800059e:	bf1f      	itttt	ne
 80005a0:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80005a4:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005a8:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005ac:	4770      	bxne	lr
 80005ae:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005b2:	bf08      	it	eq
 80005b4:	4770      	bxeq	lr
 80005b6:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005ba:	bf04      	itt	eq
 80005bc:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005c0:	4770      	bxeq	lr
 80005c2:	b530      	push	{r4, r5, lr}
 80005c4:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005cc:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005d0:	e71c      	b.n	800040c <__adddf3+0x138>
 80005d2:	bf00      	nop

080005d4 <__aeabi_ul2d>:
 80005d4:	ea50 0201 	orrs.w	r2, r0, r1
 80005d8:	bf08      	it	eq
 80005da:	4770      	bxeq	lr
 80005dc:	b530      	push	{r4, r5, lr}
 80005de:	f04f 0500 	mov.w	r5, #0
 80005e2:	e00a      	b.n	80005fa <__aeabi_l2d+0x16>

080005e4 <__aeabi_l2d>:
 80005e4:	ea50 0201 	orrs.w	r2, r0, r1
 80005e8:	bf08      	it	eq
 80005ea:	4770      	bxeq	lr
 80005ec:	b530      	push	{r4, r5, lr}
 80005ee:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005f2:	d502      	bpl.n	80005fa <__aeabi_l2d+0x16>
 80005f4:	4240      	negs	r0, r0
 80005f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005fa:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005fe:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000602:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000606:	f43f aed8 	beq.w	80003ba <__adddf3+0xe6>
 800060a:	f04f 0203 	mov.w	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000622:	f1c2 0320 	rsb	r3, r2, #32
 8000626:	fa00 fc03 	lsl.w	ip, r0, r3
 800062a:	fa20 f002 	lsr.w	r0, r0, r2
 800062e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000632:	ea40 000e 	orr.w	r0, r0, lr
 8000636:	fa21 f102 	lsr.w	r1, r1, r2
 800063a:	4414      	add	r4, r2
 800063c:	e6bd      	b.n	80003ba <__adddf3+0xe6>
 800063e:	bf00      	nop

08000640 <__aeabi_dmul>:
 8000640:	b570      	push	{r4, r5, r6, lr}
 8000642:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000646:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800064a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800064e:	bf1d      	ittte	ne
 8000650:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000654:	ea94 0f0c 	teqne	r4, ip
 8000658:	ea95 0f0c 	teqne	r5, ip
 800065c:	f000 f8de 	bleq	800081c <__aeabi_dmul+0x1dc>
 8000660:	442c      	add	r4, r5
 8000662:	ea81 0603 	eor.w	r6, r1, r3
 8000666:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800066a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800066e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000672:	bf18      	it	ne
 8000674:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000678:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800067c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000680:	d038      	beq.n	80006f4 <__aeabi_dmul+0xb4>
 8000682:	fba0 ce02 	umull	ip, lr, r0, r2
 8000686:	f04f 0500 	mov.w	r5, #0
 800068a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800068e:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 8000692:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000696:	f04f 0600 	mov.w	r6, #0
 800069a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800069e:	f09c 0f00 	teq	ip, #0
 80006a2:	bf18      	it	ne
 80006a4:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006ac:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006b0:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006b4:	d204      	bcs.n	80006c0 <__aeabi_dmul+0x80>
 80006b6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006ba:	416d      	adcs	r5, r5
 80006bc:	eb46 0606 	adc.w	r6, r6, r6
 80006c0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006c4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006cc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006d4:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006d8:	bf88      	it	hi
 80006da:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006de:	d81e      	bhi.n	800071e <__aeabi_dmul+0xde>
 80006e0:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006e4:	bf08      	it	eq
 80006e6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006ea:	f150 0000 	adcs.w	r0, r0, #0
 80006ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006f2:	bd70      	pop	{r4, r5, r6, pc}
 80006f4:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006f8:	ea46 0101 	orr.w	r1, r6, r1
 80006fc:	ea40 0002 	orr.w	r0, r0, r2
 8000700:	ea81 0103 	eor.w	r1, r1, r3
 8000704:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000708:	bfc2      	ittt	gt
 800070a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800070e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000712:	bd70      	popgt	{r4, r5, r6, pc}
 8000714:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000718:	f04f 0e00 	mov.w	lr, #0
 800071c:	3c01      	subs	r4, #1
 800071e:	f300 80ab 	bgt.w	8000878 <__aeabi_dmul+0x238>
 8000722:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000726:	bfde      	ittt	le
 8000728:	2000      	movle	r0, #0
 800072a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800072e:	bd70      	pople	{r4, r5, r6, pc}
 8000730:	f1c4 0400 	rsb	r4, r4, #0
 8000734:	3c20      	subs	r4, #32
 8000736:	da35      	bge.n	80007a4 <__aeabi_dmul+0x164>
 8000738:	340c      	adds	r4, #12
 800073a:	dc1b      	bgt.n	8000774 <__aeabi_dmul+0x134>
 800073c:	f104 0414 	add.w	r4, r4, #20
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f305 	lsl.w	r3, r0, r5
 8000748:	fa20 f004 	lsr.w	r0, r0, r4
 800074c:	fa01 f205 	lsl.w	r2, r1, r5
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000758:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800075c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000760:	fa21 f604 	lsr.w	r6, r1, r4
 8000764:	eb42 0106 	adc.w	r1, r2, r6
 8000768:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800076c:	bf08      	it	eq
 800076e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000772:	bd70      	pop	{r4, r5, r6, pc}
 8000774:	f1c4 040c 	rsb	r4, r4, #12
 8000778:	f1c4 0520 	rsb	r5, r4, #32
 800077c:	fa00 f304 	lsl.w	r3, r0, r4
 8000780:	fa20 f005 	lsr.w	r0, r0, r5
 8000784:	fa01 f204 	lsl.w	r2, r1, r4
 8000788:	ea40 0002 	orr.w	r0, r0, r2
 800078c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000790:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000794:	f141 0100 	adc.w	r1, r1, #0
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f1c4 0520 	rsb	r5, r4, #32
 80007a8:	fa00 f205 	lsl.w	r2, r0, r5
 80007ac:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b0:	fa20 f304 	lsr.w	r3, r0, r4
 80007b4:	fa01 f205 	lsl.w	r2, r1, r5
 80007b8:	ea43 0302 	orr.w	r3, r3, r2
 80007bc:	fa21 f004 	lsr.w	r0, r1, r4
 80007c0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007c4:	fa21 f204 	lsr.w	r2, r1, r4
 80007c8:	ea20 0002 	bic.w	r0, r0, r2
 80007cc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007d4:	bf08      	it	eq
 80007d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007da:	bd70      	pop	{r4, r5, r6, pc}
 80007dc:	f094 0f00 	teq	r4, #0
 80007e0:	d10f      	bne.n	8000802 <__aeabi_dmul+0x1c2>
 80007e2:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007e6:	0040      	lsls	r0, r0, #1
 80007e8:	eb41 0101 	adc.w	r1, r1, r1
 80007ec:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007f0:	bf08      	it	eq
 80007f2:	3c01      	subeq	r4, #1
 80007f4:	d0f7      	beq.n	80007e6 <__aeabi_dmul+0x1a6>
 80007f6:	ea41 0106 	orr.w	r1, r1, r6
 80007fa:	f095 0f00 	teq	r5, #0
 80007fe:	bf18      	it	ne
 8000800:	4770      	bxne	lr
 8000802:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000806:	0052      	lsls	r2, r2, #1
 8000808:	eb43 0303 	adc.w	r3, r3, r3
 800080c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000810:	bf08      	it	eq
 8000812:	3d01      	subeq	r5, #1
 8000814:	d0f7      	beq.n	8000806 <__aeabi_dmul+0x1c6>
 8000816:	ea43 0306 	orr.w	r3, r3, r6
 800081a:	4770      	bx	lr
 800081c:	ea94 0f0c 	teq	r4, ip
 8000820:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000824:	bf18      	it	ne
 8000826:	ea95 0f0c 	teqne	r5, ip
 800082a:	d00c      	beq.n	8000846 <__aeabi_dmul+0x206>
 800082c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000830:	bf18      	it	ne
 8000832:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000836:	d1d1      	bne.n	80007dc <__aeabi_dmul+0x19c>
 8000838:	ea81 0103 	eor.w	r1, r1, r3
 800083c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000840:	f04f 0000 	mov.w	r0, #0
 8000844:	bd70      	pop	{r4, r5, r6, pc}
 8000846:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800084a:	bf06      	itte	eq
 800084c:	4610      	moveq	r0, r2
 800084e:	4619      	moveq	r1, r3
 8000850:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000854:	d019      	beq.n	800088a <__aeabi_dmul+0x24a>
 8000856:	ea94 0f0c 	teq	r4, ip
 800085a:	d102      	bne.n	8000862 <__aeabi_dmul+0x222>
 800085c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000860:	d113      	bne.n	800088a <__aeabi_dmul+0x24a>
 8000862:	ea95 0f0c 	teq	r5, ip
 8000866:	d105      	bne.n	8000874 <__aeabi_dmul+0x234>
 8000868:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800086c:	bf1c      	itt	ne
 800086e:	4610      	movne	r0, r2
 8000870:	4619      	movne	r1, r3
 8000872:	d10a      	bne.n	800088a <__aeabi_dmul+0x24a>
 8000874:	ea81 0103 	eor.w	r1, r1, r3
 8000878:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800087c:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000880:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000884:	f04f 0000 	mov.w	r0, #0
 8000888:	bd70      	pop	{r4, r5, r6, pc}
 800088a:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 800088e:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 8000892:	bd70      	pop	{r4, r5, r6, pc}

08000894 <__aeabi_ddiv>:
 8000894:	b570      	push	{r4, r5, r6, lr}
 8000896:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800089a:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800089e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008a2:	bf1d      	ittte	ne
 80008a4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a8:	ea94 0f0c 	teqne	r4, ip
 80008ac:	ea95 0f0c 	teqne	r5, ip
 80008b0:	f000 f8a7 	bleq	8000a02 <__aeabi_ddiv+0x16e>
 80008b4:	eba4 0405 	sub.w	r4, r4, r5
 80008b8:	ea81 0e03 	eor.w	lr, r1, r3
 80008bc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008c4:	f000 8088 	beq.w	80009d8 <__aeabi_ddiv+0x144>
 80008c8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008cc:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008d0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008d4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008dc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008e4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e8:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008ec:	429d      	cmp	r5, r3
 80008ee:	bf08      	it	eq
 80008f0:	4296      	cmpeq	r6, r2
 80008f2:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008f6:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008fa:	d202      	bcs.n	8000902 <__aeabi_ddiv+0x6e>
 80008fc:	085b      	lsrs	r3, r3, #1
 80008fe:	ea4f 0232 	mov.w	r2, r2, rrx
 8000902:	1ab6      	subs	r6, r6, r2
 8000904:	eb65 0503 	sbc.w	r5, r5, r3
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000912:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 000c 	orrcs.w	r0, r0, ip
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000958:	085b      	lsrs	r3, r3, #1
 800095a:	ea4f 0232 	mov.w	r2, r2, rrx
 800095e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000962:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000966:	bf22      	ittt	cs
 8000968:	1ab6      	subcs	r6, r6, r2
 800096a:	4675      	movcs	r5, lr
 800096c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000970:	ea55 0e06 	orrs.w	lr, r5, r6
 8000974:	d018      	beq.n	80009a8 <__aeabi_ddiv+0x114>
 8000976:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800097a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800097e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000982:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000986:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800098a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800098e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000992:	d1c0      	bne.n	8000916 <__aeabi_ddiv+0x82>
 8000994:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000998:	d10b      	bne.n	80009b2 <__aeabi_ddiv+0x11e>
 800099a:	ea41 0100 	orr.w	r1, r1, r0
 800099e:	f04f 0000 	mov.w	r0, #0
 80009a2:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80009a6:	e7b6      	b.n	8000916 <__aeabi_ddiv+0x82>
 80009a8:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009ac:	bf04      	itt	eq
 80009ae:	4301      	orreq	r1, r0
 80009b0:	2000      	moveq	r0, #0
 80009b2:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009b6:	bf88      	it	hi
 80009b8:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009bc:	f63f aeaf 	bhi.w	800071e <__aeabi_dmul+0xde>
 80009c0:	ebb5 0c03 	subs.w	ip, r5, r3
 80009c4:	bf04      	itt	eq
 80009c6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009ca:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009ce:	f150 0000 	adcs.w	r0, r0, #0
 80009d2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	pop	{r4, r5, r6, pc}
 80009d8:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009dc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009e4:	bfc2      	ittt	gt
 80009e6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009ee:	bd70      	popgt	{r4, r5, r6, pc}
 80009f0:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009f4:	f04f 0e00 	mov.w	lr, #0
 80009f8:	3c01      	subs	r4, #1
 80009fa:	e690      	b.n	800071e <__aeabi_dmul+0xde>
 80009fc:	ea45 0e06 	orr.w	lr, r5, r6
 8000a00:	e68d      	b.n	800071e <__aeabi_dmul+0xde>
 8000a02:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a06:	ea94 0f0c 	teq	r4, ip
 8000a0a:	bf08      	it	eq
 8000a0c:	ea95 0f0c 	teqeq	r5, ip
 8000a10:	f43f af3b 	beq.w	800088a <__aeabi_dmul+0x24a>
 8000a14:	ea94 0f0c 	teq	r4, ip
 8000a18:	d10a      	bne.n	8000a30 <__aeabi_ddiv+0x19c>
 8000a1a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a1e:	f47f af34 	bne.w	800088a <__aeabi_dmul+0x24a>
 8000a22:	ea95 0f0c 	teq	r5, ip
 8000a26:	f47f af25 	bne.w	8000874 <__aeabi_dmul+0x234>
 8000a2a:	4610      	mov	r0, r2
 8000a2c:	4619      	mov	r1, r3
 8000a2e:	e72c      	b.n	800088a <__aeabi_dmul+0x24a>
 8000a30:	ea95 0f0c 	teq	r5, ip
 8000a34:	d106      	bne.n	8000a44 <__aeabi_ddiv+0x1b0>
 8000a36:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a3a:	f43f aefd 	beq.w	8000838 <__aeabi_dmul+0x1f8>
 8000a3e:	4610      	mov	r0, r2
 8000a40:	4619      	mov	r1, r3
 8000a42:	e722      	b.n	800088a <__aeabi_dmul+0x24a>
 8000a44:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a48:	bf18      	it	ne
 8000a4a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a4e:	f47f aec5 	bne.w	80007dc <__aeabi_dmul+0x19c>
 8000a52:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a56:	f47f af0d 	bne.w	8000874 <__aeabi_dmul+0x234>
 8000a5a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a5e:	f47f aeeb 	bne.w	8000838 <__aeabi_dmul+0x1f8>
 8000a62:	e712      	b.n	800088a <__aeabi_dmul+0x24a>

08000a64 <__gedf2>:
 8000a64:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8000a68:	e006      	b.n	8000a78 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__ledf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	e002      	b.n	8000a78 <__cmpdf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__cmpdf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a84:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a88:	bf18      	it	ne
 8000a8a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a8e:	d01b      	beq.n	8000ac8 <__cmpdf2+0x54>
 8000a90:	b001      	add	sp, #4
 8000a92:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a96:	bf0c      	ite	eq
 8000a98:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a9c:	ea91 0f03 	teqne	r1, r3
 8000aa0:	bf02      	ittt	eq
 8000aa2:	ea90 0f02 	teqeq	r0, r2
 8000aa6:	2000      	moveq	r0, #0
 8000aa8:	4770      	bxeq	lr
 8000aaa:	f110 0f00 	cmn.w	r0, #0
 8000aae:	ea91 0f03 	teq	r1, r3
 8000ab2:	bf58      	it	pl
 8000ab4:	4299      	cmppl	r1, r3
 8000ab6:	bf08      	it	eq
 8000ab8:	4290      	cmpeq	r0, r2
 8000aba:	bf2c      	ite	cs
 8000abc:	17d8      	asrcs	r0, r3, #31
 8000abe:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000ac2:	f040 0001 	orr.w	r0, r0, #1
 8000ac6:	4770      	bx	lr
 8000ac8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000acc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad0:	d102      	bne.n	8000ad8 <__cmpdf2+0x64>
 8000ad2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ad6:	d107      	bne.n	8000ae8 <__cmpdf2+0x74>
 8000ad8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000adc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae0:	d1d6      	bne.n	8000a90 <__cmpdf2+0x1c>
 8000ae2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ae6:	d0d3      	beq.n	8000a90 <__cmpdf2+0x1c>
 8000ae8:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aec:	4770      	bx	lr
 8000aee:	bf00      	nop

08000af0 <__aeabi_cdrcmple>:
 8000af0:	4684      	mov	ip, r0
 8000af2:	4610      	mov	r0, r2
 8000af4:	4662      	mov	r2, ip
 8000af6:	468c      	mov	ip, r1
 8000af8:	4619      	mov	r1, r3
 8000afa:	4663      	mov	r3, ip
 8000afc:	e000      	b.n	8000b00 <__aeabi_cdcmpeq>
 8000afe:	bf00      	nop

08000b00 <__aeabi_cdcmpeq>:
 8000b00:	b501      	push	{r0, lr}
 8000b02:	f7ff ffb7 	bl	8000a74 <__cmpdf2>
 8000b06:	2800      	cmp	r0, #0
 8000b08:	bf48      	it	mi
 8000b0a:	f110 0f00 	cmnmi.w	r0, #0
 8000b0e:	bd01      	pop	{r0, pc}

08000b10 <__aeabi_dcmpeq>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff fff4 	bl	8000b00 <__aeabi_cdcmpeq>
 8000b18:	bf0c      	ite	eq
 8000b1a:	2001      	moveq	r0, #1
 8000b1c:	2000      	movne	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmplt>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffea 	bl	8000b00 <__aeabi_cdcmpeq>
 8000b2c:	bf34      	ite	cc
 8000b2e:	2001      	movcc	r0, #1
 8000b30:	2000      	movcs	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmple>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffe0 	bl	8000b00 <__aeabi_cdcmpeq>
 8000b40:	bf94      	ite	ls
 8000b42:	2001      	movls	r0, #1
 8000b44:	2000      	movhi	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpge>:
 8000b4c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b50:	f7ff ffce 	bl	8000af0 <__aeabi_cdrcmple>
 8000b54:	bf94      	ite	ls
 8000b56:	2001      	movls	r0, #1
 8000b58:	2000      	movhi	r0, #0
 8000b5a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5e:	bf00      	nop

08000b60 <__aeabi_dcmpgt>:
 8000b60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b64:	f7ff ffc4 	bl	8000af0 <__aeabi_cdrcmple>
 8000b68:	bf34      	ite	cc
 8000b6a:	2001      	movcc	r0, #1
 8000b6c:	2000      	movcs	r0, #0
 8000b6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b72:	bf00      	nop

08000b74 <__aeabi_dcmpun>:
 8000b74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b7c:	d102      	bne.n	8000b84 <__aeabi_dcmpun+0x10>
 8000b7e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b82:	d10a      	bne.n	8000b9a <__aeabi_dcmpun+0x26>
 8000b84:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b8c:	d102      	bne.n	8000b94 <__aeabi_dcmpun+0x20>
 8000b8e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b92:	d102      	bne.n	8000b9a <__aeabi_dcmpun+0x26>
 8000b94:	f04f 0000 	mov.w	r0, #0
 8000b98:	4770      	bx	lr
 8000b9a:	f04f 0001 	mov.w	r0, #1
 8000b9e:	4770      	bx	lr

08000ba0 <__aeabi_d2iz>:
 8000ba0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ba4:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000ba8:	d215      	bcs.n	8000bd6 <__aeabi_d2iz+0x36>
 8000baa:	d511      	bpl.n	8000bd0 <__aeabi_d2iz+0x30>
 8000bac:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bb0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bb4:	d912      	bls.n	8000bdc <__aeabi_d2iz+0x3c>
 8000bb6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bba:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bbe:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bc2:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bc6:	fa23 f002 	lsr.w	r0, r3, r2
 8000bca:	bf18      	it	ne
 8000bcc:	4240      	negne	r0, r0
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d105      	bne.n	8000be8 <__aeabi_d2iz+0x48>
 8000bdc:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000be0:	bf08      	it	eq
 8000be2:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000be6:	4770      	bx	lr
 8000be8:	f04f 0000 	mov.w	r0, #0
 8000bec:	4770      	bx	lr
 8000bee:	bf00      	nop

08000bf0 <__aeabi_d2uiz>:
 8000bf0:	004a      	lsls	r2, r1, #1
 8000bf2:	d211      	bcs.n	8000c18 <__aeabi_d2uiz+0x28>
 8000bf4:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bf8:	d211      	bcs.n	8000c1e <__aeabi_d2uiz+0x2e>
 8000bfa:	d50d      	bpl.n	8000c18 <__aeabi_d2uiz+0x28>
 8000bfc:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000c00:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c04:	d40e      	bmi.n	8000c24 <__aeabi_d2uiz+0x34>
 8000c06:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c0a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000c0e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c12:	fa23 f002 	lsr.w	r0, r3, r2
 8000c16:	4770      	bx	lr
 8000c18:	f04f 0000 	mov.w	r0, #0
 8000c1c:	4770      	bx	lr
 8000c1e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c22:	d102      	bne.n	8000c2a <__aeabi_d2uiz+0x3a>
 8000c24:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000c28:	4770      	bx	lr
 8000c2a:	f04f 0000 	mov.w	r0, #0
 8000c2e:	4770      	bx	lr

08000c30 <__aeabi_d2f>:
 8000c30:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c34:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c38:	bf24      	itt	cs
 8000c3a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c3e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c42:	d90d      	bls.n	8000c60 <__aeabi_d2f+0x30>
 8000c44:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c48:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c4c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c50:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c54:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c58:	bf08      	it	eq
 8000c5a:	f020 0001 	biceq.w	r0, r0, #1
 8000c5e:	4770      	bx	lr
 8000c60:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c64:	d121      	bne.n	8000caa <__aeabi_d2f+0x7a>
 8000c66:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c6a:	bfbc      	itt	lt
 8000c6c:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c70:	4770      	bxlt	lr
 8000c72:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c76:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c7a:	f1c2 0218 	rsb	r2, r2, #24
 8000c7e:	f1c2 0c20 	rsb	ip, r2, #32
 8000c82:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c86:	fa20 f002 	lsr.w	r0, r0, r2
 8000c8a:	bf18      	it	ne
 8000c8c:	f040 0001 	orrne.w	r0, r0, #1
 8000c90:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c94:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c98:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c9c:	ea40 000c 	orr.w	r0, r0, ip
 8000ca0:	fa23 f302 	lsr.w	r3, r3, r2
 8000ca4:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ca8:	e7cc      	b.n	8000c44 <__aeabi_d2f+0x14>
 8000caa:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000cae:	d107      	bne.n	8000cc0 <__aeabi_d2f+0x90>
 8000cb0:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cb4:	bf1e      	ittt	ne
 8000cb6:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000cba:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000cbe:	4770      	bxne	lr
 8000cc0:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000cc4:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000cc8:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ccc:	4770      	bx	lr
 8000cce:	bf00      	nop

08000cd0 <__aeabi_frsub>:
 8000cd0:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000cd4:	e002      	b.n	8000cdc <__addsf3>
 8000cd6:	bf00      	nop

08000cd8 <__aeabi_fsub>:
 8000cd8:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000cdc <__addsf3>:
 8000cdc:	0042      	lsls	r2, r0, #1
 8000cde:	bf1f      	itttt	ne
 8000ce0:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000ce4:	ea92 0f03 	teqne	r2, r3
 8000ce8:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000cec:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000cf0:	d06a      	beq.n	8000dc8 <__addsf3+0xec>
 8000cf2:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000cf6:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000cfa:	bfc1      	itttt	gt
 8000cfc:	18d2      	addgt	r2, r2, r3
 8000cfe:	4041      	eorgt	r1, r0
 8000d00:	4048      	eorgt	r0, r1
 8000d02:	4041      	eorgt	r1, r0
 8000d04:	bfb8      	it	lt
 8000d06:	425b      	neglt	r3, r3
 8000d08:	2b19      	cmp	r3, #25
 8000d0a:	bf88      	it	hi
 8000d0c:	4770      	bxhi	lr
 8000d0e:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000d12:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000d16:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000d1a:	bf18      	it	ne
 8000d1c:	4240      	negne	r0, r0
 8000d1e:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000d22:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000d26:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000d2a:	bf18      	it	ne
 8000d2c:	4249      	negne	r1, r1
 8000d2e:	ea92 0f03 	teq	r2, r3
 8000d32:	d03f      	beq.n	8000db4 <__addsf3+0xd8>
 8000d34:	f1a2 0201 	sub.w	r2, r2, #1
 8000d38:	fa41 fc03 	asr.w	ip, r1, r3
 8000d3c:	eb10 000c 	adds.w	r0, r0, ip
 8000d40:	f1c3 0320 	rsb	r3, r3, #32
 8000d44:	fa01 f103 	lsl.w	r1, r1, r3
 8000d48:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000d4c:	d502      	bpl.n	8000d54 <__addsf3+0x78>
 8000d4e:	4249      	negs	r1, r1
 8000d50:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000d54:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000d58:	d313      	bcc.n	8000d82 <__addsf3+0xa6>
 8000d5a:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000d5e:	d306      	bcc.n	8000d6e <__addsf3+0x92>
 8000d60:	0840      	lsrs	r0, r0, #1
 8000d62:	ea4f 0131 	mov.w	r1, r1, rrx
 8000d66:	f102 0201 	add.w	r2, r2, #1
 8000d6a:	2afe      	cmp	r2, #254	@ 0xfe
 8000d6c:	d251      	bcs.n	8000e12 <__addsf3+0x136>
 8000d6e:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000d72:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d76:	bf08      	it	eq
 8000d78:	f020 0001 	biceq.w	r0, r0, #1
 8000d7c:	ea40 0003 	orr.w	r0, r0, r3
 8000d80:	4770      	bx	lr
 8000d82:	0049      	lsls	r1, r1, #1
 8000d84:	eb40 0000 	adc.w	r0, r0, r0
 8000d88:	3a01      	subs	r2, #1
 8000d8a:	bf28      	it	cs
 8000d8c:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000d90:	d2ed      	bcs.n	8000d6e <__addsf3+0x92>
 8000d92:	fab0 fc80 	clz	ip, r0
 8000d96:	f1ac 0c08 	sub.w	ip, ip, #8
 8000d9a:	ebb2 020c 	subs.w	r2, r2, ip
 8000d9e:	fa00 f00c 	lsl.w	r0, r0, ip
 8000da2:	bfaa      	itet	ge
 8000da4:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000da8:	4252      	neglt	r2, r2
 8000daa:	4318      	orrge	r0, r3
 8000dac:	bfbc      	itt	lt
 8000dae:	40d0      	lsrlt	r0, r2
 8000db0:	4318      	orrlt	r0, r3
 8000db2:	4770      	bx	lr
 8000db4:	f092 0f00 	teq	r2, #0
 8000db8:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000dbc:	bf06      	itte	eq
 8000dbe:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000dc2:	3201      	addeq	r2, #1
 8000dc4:	3b01      	subne	r3, #1
 8000dc6:	e7b5      	b.n	8000d34 <__addsf3+0x58>
 8000dc8:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000dcc:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000dd0:	bf18      	it	ne
 8000dd2:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000dd6:	d021      	beq.n	8000e1c <__addsf3+0x140>
 8000dd8:	ea92 0f03 	teq	r2, r3
 8000ddc:	d004      	beq.n	8000de8 <__addsf3+0x10c>
 8000dde:	f092 0f00 	teq	r2, #0
 8000de2:	bf08      	it	eq
 8000de4:	4608      	moveq	r0, r1
 8000de6:	4770      	bx	lr
 8000de8:	ea90 0f01 	teq	r0, r1
 8000dec:	bf1c      	itt	ne
 8000dee:	2000      	movne	r0, #0
 8000df0:	4770      	bxne	lr
 8000df2:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000df6:	d104      	bne.n	8000e02 <__addsf3+0x126>
 8000df8:	0040      	lsls	r0, r0, #1
 8000dfa:	bf28      	it	cs
 8000dfc:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000e00:	4770      	bx	lr
 8000e02:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000e06:	bf3c      	itt	cc
 8000e08:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000e0c:	4770      	bxcc	lr
 8000e0e:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000e12:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000e16:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000e1a:	4770      	bx	lr
 8000e1c:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000e20:	bf16      	itet	ne
 8000e22:	4608      	movne	r0, r1
 8000e24:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000e28:	4601      	movne	r1, r0
 8000e2a:	0242      	lsls	r2, r0, #9
 8000e2c:	bf06      	itte	eq
 8000e2e:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000e32:	ea90 0f01 	teqeq	r0, r1
 8000e36:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000e3a:	4770      	bx	lr

08000e3c <__aeabi_ui2f>:
 8000e3c:	f04f 0300 	mov.w	r3, #0
 8000e40:	e004      	b.n	8000e4c <__aeabi_i2f+0x8>
 8000e42:	bf00      	nop

08000e44 <__aeabi_i2f>:
 8000e44:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000e48:	bf48      	it	mi
 8000e4a:	4240      	negmi	r0, r0
 8000e4c:	ea5f 0c00 	movs.w	ip, r0
 8000e50:	bf08      	it	eq
 8000e52:	4770      	bxeq	lr
 8000e54:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000e58:	4601      	mov	r1, r0
 8000e5a:	f04f 0000 	mov.w	r0, #0
 8000e5e:	e01c      	b.n	8000e9a <__aeabi_l2f+0x2a>

08000e60 <__aeabi_ul2f>:
 8000e60:	ea50 0201 	orrs.w	r2, r0, r1
 8000e64:	bf08      	it	eq
 8000e66:	4770      	bxeq	lr
 8000e68:	f04f 0300 	mov.w	r3, #0
 8000e6c:	e00a      	b.n	8000e84 <__aeabi_l2f+0x14>
 8000e6e:	bf00      	nop

08000e70 <__aeabi_l2f>:
 8000e70:	ea50 0201 	orrs.w	r2, r0, r1
 8000e74:	bf08      	it	eq
 8000e76:	4770      	bxeq	lr
 8000e78:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000e7c:	d502      	bpl.n	8000e84 <__aeabi_l2f+0x14>
 8000e7e:	4240      	negs	r0, r0
 8000e80:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000e84:	ea5f 0c01 	movs.w	ip, r1
 8000e88:	bf02      	ittt	eq
 8000e8a:	4684      	moveq	ip, r0
 8000e8c:	4601      	moveq	r1, r0
 8000e8e:	2000      	moveq	r0, #0
 8000e90:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000e94:	bf08      	it	eq
 8000e96:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000e9a:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000e9e:	fabc f28c 	clz	r2, ip
 8000ea2:	3a08      	subs	r2, #8
 8000ea4:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000ea8:	db10      	blt.n	8000ecc <__aeabi_l2f+0x5c>
 8000eaa:	fa01 fc02 	lsl.w	ip, r1, r2
 8000eae:	4463      	add	r3, ip
 8000eb0:	fa00 fc02 	lsl.w	ip, r0, r2
 8000eb4:	f1c2 0220 	rsb	r2, r2, #32
 8000eb8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000ebc:	fa20 f202 	lsr.w	r2, r0, r2
 8000ec0:	eb43 0002 	adc.w	r0, r3, r2
 8000ec4:	bf08      	it	eq
 8000ec6:	f020 0001 	biceq.w	r0, r0, #1
 8000eca:	4770      	bx	lr
 8000ecc:	f102 0220 	add.w	r2, r2, #32
 8000ed0:	fa01 fc02 	lsl.w	ip, r1, r2
 8000ed4:	f1c2 0220 	rsb	r2, r2, #32
 8000ed8:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000edc:	fa21 f202 	lsr.w	r2, r1, r2
 8000ee0:	eb43 0002 	adc.w	r0, r3, r2
 8000ee4:	bf08      	it	eq
 8000ee6:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000eea:	4770      	bx	lr

08000eec <__aeabi_f2iz>:
 8000eec:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000ef0:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 8000ef4:	d30f      	bcc.n	8000f16 <__aeabi_f2iz+0x2a>
 8000ef6:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 8000efa:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000efe:	d90d      	bls.n	8000f1c <__aeabi_f2iz+0x30>
 8000f00:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000f04:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000f08:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000f0c:	fa23 f002 	lsr.w	r0, r3, r2
 8000f10:	bf18      	it	ne
 8000f12:	4240      	negne	r0, r0
 8000f14:	4770      	bx	lr
 8000f16:	f04f 0000 	mov.w	r0, #0
 8000f1a:	4770      	bx	lr
 8000f1c:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 8000f20:	d101      	bne.n	8000f26 <__aeabi_f2iz+0x3a>
 8000f22:	0242      	lsls	r2, r0, #9
 8000f24:	d105      	bne.n	8000f32 <__aeabi_f2iz+0x46>
 8000f26:	f010 4000 	ands.w	r0, r0, #2147483648	@ 0x80000000
 8000f2a:	bf08      	it	eq
 8000f2c:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000f30:	4770      	bx	lr
 8000f32:	f04f 0000 	mov.w	r0, #0
 8000f36:	4770      	bx	lr

08000f38 <__aeabi_uldivmod>:
 8000f38:	b953      	cbnz	r3, 8000f50 <__aeabi_uldivmod+0x18>
 8000f3a:	b94a      	cbnz	r2, 8000f50 <__aeabi_uldivmod+0x18>
 8000f3c:	2900      	cmp	r1, #0
 8000f3e:	bf08      	it	eq
 8000f40:	2800      	cmpeq	r0, #0
 8000f42:	bf1c      	itt	ne
 8000f44:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000f48:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000f4c:	f000 b99e 	b.w	800128c <__aeabi_idiv0>
 8000f50:	f1ad 0c08 	sub.w	ip, sp, #8
 8000f54:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000f58:	f000 f83c 	bl	8000fd4 <__udivmoddi4>
 8000f5c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000f60:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000f64:	b004      	add	sp, #16
 8000f66:	4770      	bx	lr

08000f68 <__aeabi_d2lz>:
 8000f68:	b538      	push	{r3, r4, r5, lr}
 8000f6a:	2200      	movs	r2, #0
 8000f6c:	2300      	movs	r3, #0
 8000f6e:	4604      	mov	r4, r0
 8000f70:	460d      	mov	r5, r1
 8000f72:	f7ff fdd7 	bl	8000b24 <__aeabi_dcmplt>
 8000f76:	b928      	cbnz	r0, 8000f84 <__aeabi_d2lz+0x1c>
 8000f78:	4620      	mov	r0, r4
 8000f7a:	4629      	mov	r1, r5
 8000f7c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000f80:	f000 b80a 	b.w	8000f98 <__aeabi_d2ulz>
 8000f84:	4620      	mov	r0, r4
 8000f86:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000f8a:	f000 f805 	bl	8000f98 <__aeabi_d2ulz>
 8000f8e:	4240      	negs	r0, r0
 8000f90:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000f94:	bd38      	pop	{r3, r4, r5, pc}
 8000f96:	bf00      	nop

08000f98 <__aeabi_d2ulz>:
 8000f98:	b5d0      	push	{r4, r6, r7, lr}
 8000f9a:	2200      	movs	r2, #0
 8000f9c:	4b0b      	ldr	r3, [pc, #44]	@ (8000fcc <__aeabi_d2ulz+0x34>)
 8000f9e:	4606      	mov	r6, r0
 8000fa0:	460f      	mov	r7, r1
 8000fa2:	f7ff fb4d 	bl	8000640 <__aeabi_dmul>
 8000fa6:	f7ff fe23 	bl	8000bf0 <__aeabi_d2uiz>
 8000faa:	4604      	mov	r4, r0
 8000fac:	f7ff face 	bl	800054c <__aeabi_ui2d>
 8000fb0:	2200      	movs	r2, #0
 8000fb2:	4b07      	ldr	r3, [pc, #28]	@ (8000fd0 <__aeabi_d2ulz+0x38>)
 8000fb4:	f7ff fb44 	bl	8000640 <__aeabi_dmul>
 8000fb8:	4602      	mov	r2, r0
 8000fba:	460b      	mov	r3, r1
 8000fbc:	4630      	mov	r0, r6
 8000fbe:	4639      	mov	r1, r7
 8000fc0:	f7ff f986 	bl	80002d0 <__aeabi_dsub>
 8000fc4:	f7ff fe14 	bl	8000bf0 <__aeabi_d2uiz>
 8000fc8:	4621      	mov	r1, r4
 8000fca:	bdd0      	pop	{r4, r6, r7, pc}
 8000fcc:	3df00000 	.word	0x3df00000
 8000fd0:	41f00000 	.word	0x41f00000

08000fd4 <__udivmoddi4>:
 8000fd4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000fd8:	9d08      	ldr	r5, [sp, #32]
 8000fda:	460c      	mov	r4, r1
 8000fdc:	2b00      	cmp	r3, #0
 8000fde:	d14e      	bne.n	800107e <__udivmoddi4+0xaa>
 8000fe0:	4694      	mov	ip, r2
 8000fe2:	458c      	cmp	ip, r1
 8000fe4:	4686      	mov	lr, r0
 8000fe6:	fab2 f282 	clz	r2, r2
 8000fea:	d962      	bls.n	80010b2 <__udivmoddi4+0xde>
 8000fec:	b14a      	cbz	r2, 8001002 <__udivmoddi4+0x2e>
 8000fee:	f1c2 0320 	rsb	r3, r2, #32
 8000ff2:	4091      	lsls	r1, r2
 8000ff4:	fa20 f303 	lsr.w	r3, r0, r3
 8000ff8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ffc:	4319      	orrs	r1, r3
 8000ffe:	fa00 fe02 	lsl.w	lr, r0, r2
 8001002:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8001006:	fbb1 f4f7 	udiv	r4, r1, r7
 800100a:	fb07 1114 	mls	r1, r7, r4, r1
 800100e:	fa1f f68c 	uxth.w	r6, ip
 8001012:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8001016:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800101a:	fb04 f106 	mul.w	r1, r4, r6
 800101e:	4299      	cmp	r1, r3
 8001020:	d90a      	bls.n	8001038 <__udivmoddi4+0x64>
 8001022:	eb1c 0303 	adds.w	r3, ip, r3
 8001026:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 800102a:	f080 8110 	bcs.w	800124e <__udivmoddi4+0x27a>
 800102e:	4299      	cmp	r1, r3
 8001030:	f240 810d 	bls.w	800124e <__udivmoddi4+0x27a>
 8001034:	3c02      	subs	r4, #2
 8001036:	4463      	add	r3, ip
 8001038:	1a59      	subs	r1, r3, r1
 800103a:	fbb1 f0f7 	udiv	r0, r1, r7
 800103e:	fb07 1110 	mls	r1, r7, r0, r1
 8001042:	fb00 f606 	mul.w	r6, r0, r6
 8001046:	fa1f f38e 	uxth.w	r3, lr
 800104a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800104e:	429e      	cmp	r6, r3
 8001050:	d90a      	bls.n	8001068 <__udivmoddi4+0x94>
 8001052:	eb1c 0303 	adds.w	r3, ip, r3
 8001056:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 800105a:	f080 80fa 	bcs.w	8001252 <__udivmoddi4+0x27e>
 800105e:	429e      	cmp	r6, r3
 8001060:	f240 80f7 	bls.w	8001252 <__udivmoddi4+0x27e>
 8001064:	4463      	add	r3, ip
 8001066:	3802      	subs	r0, #2
 8001068:	2100      	movs	r1, #0
 800106a:	1b9b      	subs	r3, r3, r6
 800106c:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8001070:	b11d      	cbz	r5, 800107a <__udivmoddi4+0xa6>
 8001072:	40d3      	lsrs	r3, r2
 8001074:	2200      	movs	r2, #0
 8001076:	e9c5 3200 	strd	r3, r2, [r5]
 800107a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800107e:	428b      	cmp	r3, r1
 8001080:	d905      	bls.n	800108e <__udivmoddi4+0xba>
 8001082:	b10d      	cbz	r5, 8001088 <__udivmoddi4+0xb4>
 8001084:	e9c5 0100 	strd	r0, r1, [r5]
 8001088:	2100      	movs	r1, #0
 800108a:	4608      	mov	r0, r1
 800108c:	e7f5      	b.n	800107a <__udivmoddi4+0xa6>
 800108e:	fab3 f183 	clz	r1, r3
 8001092:	2900      	cmp	r1, #0
 8001094:	d146      	bne.n	8001124 <__udivmoddi4+0x150>
 8001096:	42a3      	cmp	r3, r4
 8001098:	d302      	bcc.n	80010a0 <__udivmoddi4+0xcc>
 800109a:	4290      	cmp	r0, r2
 800109c:	f0c0 80ee 	bcc.w	800127c <__udivmoddi4+0x2a8>
 80010a0:	1a86      	subs	r6, r0, r2
 80010a2:	eb64 0303 	sbc.w	r3, r4, r3
 80010a6:	2001      	movs	r0, #1
 80010a8:	2d00      	cmp	r5, #0
 80010aa:	d0e6      	beq.n	800107a <__udivmoddi4+0xa6>
 80010ac:	e9c5 6300 	strd	r6, r3, [r5]
 80010b0:	e7e3      	b.n	800107a <__udivmoddi4+0xa6>
 80010b2:	2a00      	cmp	r2, #0
 80010b4:	f040 808f 	bne.w	80011d6 <__udivmoddi4+0x202>
 80010b8:	eba1 040c 	sub.w	r4, r1, ip
 80010bc:	2101      	movs	r1, #1
 80010be:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80010c2:	fa1f f78c 	uxth.w	r7, ip
 80010c6:	fbb4 f6f8 	udiv	r6, r4, r8
 80010ca:	fb08 4416 	mls	r4, r8, r6, r4
 80010ce:	fb07 f006 	mul.w	r0, r7, r6
 80010d2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80010d6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80010da:	4298      	cmp	r0, r3
 80010dc:	d908      	bls.n	80010f0 <__udivmoddi4+0x11c>
 80010de:	eb1c 0303 	adds.w	r3, ip, r3
 80010e2:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 80010e6:	d202      	bcs.n	80010ee <__udivmoddi4+0x11a>
 80010e8:	4298      	cmp	r0, r3
 80010ea:	f200 80cb 	bhi.w	8001284 <__udivmoddi4+0x2b0>
 80010ee:	4626      	mov	r6, r4
 80010f0:	1a1c      	subs	r4, r3, r0
 80010f2:	fbb4 f0f8 	udiv	r0, r4, r8
 80010f6:	fb08 4410 	mls	r4, r8, r0, r4
 80010fa:	fb00 f707 	mul.w	r7, r0, r7
 80010fe:	fa1f f38e 	uxth.w	r3, lr
 8001102:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8001106:	429f      	cmp	r7, r3
 8001108:	d908      	bls.n	800111c <__udivmoddi4+0x148>
 800110a:	eb1c 0303 	adds.w	r3, ip, r3
 800110e:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 8001112:	d202      	bcs.n	800111a <__udivmoddi4+0x146>
 8001114:	429f      	cmp	r7, r3
 8001116:	f200 80ae 	bhi.w	8001276 <__udivmoddi4+0x2a2>
 800111a:	4620      	mov	r0, r4
 800111c:	1bdb      	subs	r3, r3, r7
 800111e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8001122:	e7a5      	b.n	8001070 <__udivmoddi4+0x9c>
 8001124:	f1c1 0720 	rsb	r7, r1, #32
 8001128:	408b      	lsls	r3, r1
 800112a:	fa22 fc07 	lsr.w	ip, r2, r7
 800112e:	ea4c 0c03 	orr.w	ip, ip, r3
 8001132:	fa24 f607 	lsr.w	r6, r4, r7
 8001136:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800113a:	fbb6 f8f9 	udiv	r8, r6, r9
 800113e:	fa1f fe8c 	uxth.w	lr, ip
 8001142:	fb09 6618 	mls	r6, r9, r8, r6
 8001146:	fa20 f307 	lsr.w	r3, r0, r7
 800114a:	408c      	lsls	r4, r1
 800114c:	fa00 fa01 	lsl.w	sl, r0, r1
 8001150:	fb08 f00e 	mul.w	r0, r8, lr
 8001154:	431c      	orrs	r4, r3
 8001156:	0c23      	lsrs	r3, r4, #16
 8001158:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800115c:	4298      	cmp	r0, r3
 800115e:	fa02 f201 	lsl.w	r2, r2, r1
 8001162:	d90a      	bls.n	800117a <__udivmoddi4+0x1a6>
 8001164:	eb1c 0303 	adds.w	r3, ip, r3
 8001168:	f108 36ff 	add.w	r6, r8, #4294967295	@ 0xffffffff
 800116c:	f080 8081 	bcs.w	8001272 <__udivmoddi4+0x29e>
 8001170:	4298      	cmp	r0, r3
 8001172:	d97e      	bls.n	8001272 <__udivmoddi4+0x29e>
 8001174:	f1a8 0802 	sub.w	r8, r8, #2
 8001178:	4463      	add	r3, ip
 800117a:	1a1e      	subs	r6, r3, r0
 800117c:	fbb6 f3f9 	udiv	r3, r6, r9
 8001180:	fb09 6613 	mls	r6, r9, r3, r6
 8001184:	fb03 fe0e 	mul.w	lr, r3, lr
 8001188:	b2a4      	uxth	r4, r4
 800118a:	ea44 4406 	orr.w	r4, r4, r6, lsl #16
 800118e:	45a6      	cmp	lr, r4
 8001190:	d908      	bls.n	80011a4 <__udivmoddi4+0x1d0>
 8001192:	eb1c 0404 	adds.w	r4, ip, r4
 8001196:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 800119a:	d266      	bcs.n	800126a <__udivmoddi4+0x296>
 800119c:	45a6      	cmp	lr, r4
 800119e:	d964      	bls.n	800126a <__udivmoddi4+0x296>
 80011a0:	3b02      	subs	r3, #2
 80011a2:	4464      	add	r4, ip
 80011a4:	ea43 4008 	orr.w	r0, r3, r8, lsl #16
 80011a8:	fba0 8302 	umull	r8, r3, r0, r2
 80011ac:	eba4 040e 	sub.w	r4, r4, lr
 80011b0:	429c      	cmp	r4, r3
 80011b2:	46c6      	mov	lr, r8
 80011b4:	461e      	mov	r6, r3
 80011b6:	d350      	bcc.n	800125a <__udivmoddi4+0x286>
 80011b8:	d04d      	beq.n	8001256 <__udivmoddi4+0x282>
 80011ba:	b155      	cbz	r5, 80011d2 <__udivmoddi4+0x1fe>
 80011bc:	ebba 030e 	subs.w	r3, sl, lr
 80011c0:	eb64 0406 	sbc.w	r4, r4, r6
 80011c4:	fa04 f707 	lsl.w	r7, r4, r7
 80011c8:	40cb      	lsrs	r3, r1
 80011ca:	431f      	orrs	r7, r3
 80011cc:	40cc      	lsrs	r4, r1
 80011ce:	e9c5 7400 	strd	r7, r4, [r5]
 80011d2:	2100      	movs	r1, #0
 80011d4:	e751      	b.n	800107a <__udivmoddi4+0xa6>
 80011d6:	fa0c fc02 	lsl.w	ip, ip, r2
 80011da:	f1c2 0320 	rsb	r3, r2, #32
 80011de:	40d9      	lsrs	r1, r3
 80011e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80011e4:	fa20 f303 	lsr.w	r3, r0, r3
 80011e8:	fa00 fe02 	lsl.w	lr, r0, r2
 80011ec:	fbb1 f0f8 	udiv	r0, r1, r8
 80011f0:	fb08 1110 	mls	r1, r8, r0, r1
 80011f4:	4094      	lsls	r4, r2
 80011f6:	431c      	orrs	r4, r3
 80011f8:	fa1f f78c 	uxth.w	r7, ip
 80011fc:	0c23      	lsrs	r3, r4, #16
 80011fe:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8001202:	fb00 f107 	mul.w	r1, r0, r7
 8001206:	4299      	cmp	r1, r3
 8001208:	d908      	bls.n	800121c <__udivmoddi4+0x248>
 800120a:	eb1c 0303 	adds.w	r3, ip, r3
 800120e:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8001212:	d22c      	bcs.n	800126e <__udivmoddi4+0x29a>
 8001214:	4299      	cmp	r1, r3
 8001216:	d92a      	bls.n	800126e <__udivmoddi4+0x29a>
 8001218:	3802      	subs	r0, #2
 800121a:	4463      	add	r3, ip
 800121c:	1a5b      	subs	r3, r3, r1
 800121e:	fbb3 f1f8 	udiv	r1, r3, r8
 8001222:	fb08 3311 	mls	r3, r8, r1, r3
 8001226:	b2a4      	uxth	r4, r4
 8001228:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800122c:	fb01 f307 	mul.w	r3, r1, r7
 8001230:	42a3      	cmp	r3, r4
 8001232:	d908      	bls.n	8001246 <__udivmoddi4+0x272>
 8001234:	eb1c 0404 	adds.w	r4, ip, r4
 8001238:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 800123c:	d213      	bcs.n	8001266 <__udivmoddi4+0x292>
 800123e:	42a3      	cmp	r3, r4
 8001240:	d911      	bls.n	8001266 <__udivmoddi4+0x292>
 8001242:	3902      	subs	r1, #2
 8001244:	4464      	add	r4, ip
 8001246:	1ae4      	subs	r4, r4, r3
 8001248:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800124c:	e73b      	b.n	80010c6 <__udivmoddi4+0xf2>
 800124e:	4604      	mov	r4, r0
 8001250:	e6f2      	b.n	8001038 <__udivmoddi4+0x64>
 8001252:	4608      	mov	r0, r1
 8001254:	e708      	b.n	8001068 <__udivmoddi4+0x94>
 8001256:	45c2      	cmp	sl, r8
 8001258:	d2af      	bcs.n	80011ba <__udivmoddi4+0x1e6>
 800125a:	ebb8 0e02 	subs.w	lr, r8, r2
 800125e:	eb63 060c 	sbc.w	r6, r3, ip
 8001262:	3801      	subs	r0, #1
 8001264:	e7a9      	b.n	80011ba <__udivmoddi4+0x1e6>
 8001266:	4631      	mov	r1, r6
 8001268:	e7ed      	b.n	8001246 <__udivmoddi4+0x272>
 800126a:	4603      	mov	r3, r0
 800126c:	e79a      	b.n	80011a4 <__udivmoddi4+0x1d0>
 800126e:	4630      	mov	r0, r6
 8001270:	e7d4      	b.n	800121c <__udivmoddi4+0x248>
 8001272:	46b0      	mov	r8, r6
 8001274:	e781      	b.n	800117a <__udivmoddi4+0x1a6>
 8001276:	4463      	add	r3, ip
 8001278:	3802      	subs	r0, #2
 800127a:	e74f      	b.n	800111c <__udivmoddi4+0x148>
 800127c:	4606      	mov	r6, r0
 800127e:	4623      	mov	r3, r4
 8001280:	4608      	mov	r0, r1
 8001282:	e711      	b.n	80010a8 <__udivmoddi4+0xd4>
 8001284:	3e02      	subs	r6, #2
 8001286:	4463      	add	r3, ip
 8001288:	e732      	b.n	80010f0 <__udivmoddi4+0x11c>
 800128a:	bf00      	nop

0800128c <__aeabi_idiv0>:
 800128c:	4770      	bx	lr
 800128e:	bf00      	nop

08001290 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001290:	b580      	push	{r7, lr}
 8001292:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001294:	f000 ff5a 	bl	800214c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001298:	f000 f81e 	bl	80012d8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800129c:	f000 f93c 	bl	8001518 <MX_GPIO_Init>
  MX_USB_DEVICE_Init();
 80012a0:	f008 fbb8 	bl	8009a14 <MX_USB_DEVICE_Init>
  MX_TIM1_Init();
 80012a4:	f000 f8b4 	bl	8001410 <MX_TIM1_Init>
  MX_ADC1_Init();
 80012a8:	f000 f874 	bl	8001394 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
  TIM1->CCR1 = pwm_value;
 80012ac:	4b06      	ldr	r3, [pc, #24]	@ (80012c8 <main+0x38>)
 80012ae:	681a      	ldr	r2, [r3, #0]
 80012b0:	4b06      	ldr	r3, [pc, #24]	@ (80012cc <main+0x3c>)
 80012b2:	635a      	str	r2, [r3, #52]	@ 0x34
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 80012b4:	2100      	movs	r1, #0
 80012b6:	4806      	ldr	r0, [pc, #24]	@ (80012d0 <main+0x40>)
 80012b8:	f004 f87e 	bl	80053b8 <HAL_TIM_PWM_Start>
  HAL_ADC_Start_IT(&hadc1);
 80012bc:	4805      	ldr	r0, [pc, #20]	@ (80012d4 <main+0x44>)
 80012be:	f001 f87f 	bl	80023c0 <HAL_ADC_Start_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80012c2:	bf00      	nop
 80012c4:	e7fd      	b.n	80012c2 <main+0x32>
 80012c6:	bf00      	nop
 80012c8:	200003ec 	.word	0x200003ec
 80012cc:	40012c00 	.word	0x40012c00
 80012d0:	200003a4 	.word	0x200003a4
 80012d4:	20000374 	.word	0x20000374

080012d8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80012d8:	b580      	push	{r7, lr}
 80012da:	b094      	sub	sp, #80	@ 0x50
 80012dc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80012de:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80012e2:	2228      	movs	r2, #40	@ 0x28
 80012e4:	2100      	movs	r1, #0
 80012e6:	4618      	mov	r0, r3
 80012e8:	f00b fadb 	bl	800c8a2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80012ec:	f107 0314 	add.w	r3, r7, #20
 80012f0:	2200      	movs	r2, #0
 80012f2:	601a      	str	r2, [r3, #0]
 80012f4:	605a      	str	r2, [r3, #4]
 80012f6:	609a      	str	r2, [r3, #8]
 80012f8:	60da      	str	r2, [r3, #12]
 80012fa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80012fc:	1d3b      	adds	r3, r7, #4
 80012fe:	2200      	movs	r2, #0
 8001300:	601a      	str	r2, [r3, #0]
 8001302:	605a      	str	r2, [r3, #4]
 8001304:	609a      	str	r2, [r3, #8]
 8001306:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001308:	2301      	movs	r3, #1
 800130a:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800130c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001310:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001312:	2300      	movs	r3, #0
 8001314:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001316:	2301      	movs	r3, #1
 8001318:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800131a:	2302      	movs	r3, #2
 800131c:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800131e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001322:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001324:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8001328:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800132a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800132e:	4618      	mov	r0, r3
 8001330:	f003 fb5e 	bl	80049f0 <HAL_RCC_OscConfig>
 8001334:	4603      	mov	r3, r0
 8001336:	2b00      	cmp	r3, #0
 8001338:	d001      	beq.n	800133e <SystemClock_Config+0x66>
  {
    Error_Handler();
 800133a:	f000 fd0b 	bl	8001d54 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800133e:	230f      	movs	r3, #15
 8001340:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001342:	2302      	movs	r3, #2
 8001344:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001346:	2300      	movs	r3, #0
 8001348:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800134a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800134e:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001350:	2300      	movs	r3, #0
 8001352:	627b      	str	r3, [r7, #36]	@ 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001354:	f107 0314 	add.w	r3, r7, #20
 8001358:	2102      	movs	r1, #2
 800135a:	4618      	mov	r0, r3
 800135c:	f003 fdca 	bl	8004ef4 <HAL_RCC_ClockConfig>
 8001360:	4603      	mov	r3, r0
 8001362:	2b00      	cmp	r3, #0
 8001364:	d001      	beq.n	800136a <SystemClock_Config+0x92>
  {
    Error_Handler();
 8001366:	f000 fcf5 	bl	8001d54 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC|RCC_PERIPHCLK_USB;
 800136a:	2312      	movs	r3, #18
 800136c:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 800136e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001372:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 8001374:	2300      	movs	r3, #0
 8001376:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001378:	1d3b      	adds	r3, r7, #4
 800137a:	4618      	mov	r0, r3
 800137c:	f003 ff16 	bl	80051ac <HAL_RCCEx_PeriphCLKConfig>
 8001380:	4603      	mov	r3, r0
 8001382:	2b00      	cmp	r3, #0
 8001384:	d001      	beq.n	800138a <SystemClock_Config+0xb2>
  {
    Error_Handler();
 8001386:	f000 fce5 	bl	8001d54 <Error_Handler>
  }
}
 800138a:	bf00      	nop
 800138c:	3750      	adds	r7, #80	@ 0x50
 800138e:	46bd      	mov	sp, r7
 8001390:	bd80      	pop	{r7, pc}
	...

08001394 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001394:	b580      	push	{r7, lr}
 8001396:	b084      	sub	sp, #16
 8001398:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800139a:	1d3b      	adds	r3, r7, #4
 800139c:	2200      	movs	r2, #0
 800139e:	601a      	str	r2, [r3, #0]
 80013a0:	605a      	str	r2, [r3, #4]
 80013a2:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80013a4:	4b18      	ldr	r3, [pc, #96]	@ (8001408 <MX_ADC1_Init+0x74>)
 80013a6:	4a19      	ldr	r2, [pc, #100]	@ (800140c <MX_ADC1_Init+0x78>)
 80013a8:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80013aa:	4b17      	ldr	r3, [pc, #92]	@ (8001408 <MX_ADC1_Init+0x74>)
 80013ac:	2200      	movs	r2, #0
 80013ae:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80013b0:	4b15      	ldr	r3, [pc, #84]	@ (8001408 <MX_ADC1_Init+0x74>)
 80013b2:	2201      	movs	r2, #1
 80013b4:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80013b6:	4b14      	ldr	r3, [pc, #80]	@ (8001408 <MX_ADC1_Init+0x74>)
 80013b8:	2200      	movs	r2, #0
 80013ba:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80013bc:	4b12      	ldr	r3, [pc, #72]	@ (8001408 <MX_ADC1_Init+0x74>)
 80013be:	f44f 2260 	mov.w	r2, #917504	@ 0xe0000
 80013c2:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80013c4:	4b10      	ldr	r3, [pc, #64]	@ (8001408 <MX_ADC1_Init+0x74>)
 80013c6:	2200      	movs	r2, #0
 80013c8:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 80013ca:	4b0f      	ldr	r3, [pc, #60]	@ (8001408 <MX_ADC1_Init+0x74>)
 80013cc:	2201      	movs	r2, #1
 80013ce:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80013d0:	480d      	ldr	r0, [pc, #52]	@ (8001408 <MX_ADC1_Init+0x74>)
 80013d2:	f000 ff1d 	bl	8002210 <HAL_ADC_Init>
 80013d6:	4603      	mov	r3, r0
 80013d8:	2b00      	cmp	r3, #0
 80013da:	d001      	beq.n	80013e0 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 80013dc:	f000 fcba 	bl	8001d54 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80013e0:	2300      	movs	r3, #0
 80013e2:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80013e4:	2301      	movs	r3, #1
 80013e6:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 80013e8:	2307      	movs	r3, #7
 80013ea:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80013ec:	1d3b      	adds	r3, r7, #4
 80013ee:	4619      	mov	r1, r3
 80013f0:	4805      	ldr	r0, [pc, #20]	@ (8001408 <MX_ADC1_Init+0x74>)
 80013f2:	f001 f96f 	bl	80026d4 <HAL_ADC_ConfigChannel>
 80013f6:	4603      	mov	r3, r0
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	d001      	beq.n	8001400 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 80013fc:	f000 fcaa 	bl	8001d54 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001400:	bf00      	nop
 8001402:	3710      	adds	r7, #16
 8001404:	46bd      	mov	sp, r7
 8001406:	bd80      	pop	{r7, pc}
 8001408:	20000374 	.word	0x20000374
 800140c:	40012400 	.word	0x40012400

08001410 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001410:	b580      	push	{r7, lr}
 8001412:	b092      	sub	sp, #72	@ 0x48
 8001414:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001416:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800141a:	2200      	movs	r2, #0
 800141c:	601a      	str	r2, [r3, #0]
 800141e:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001420:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001424:	2200      	movs	r2, #0
 8001426:	601a      	str	r2, [r3, #0]
 8001428:	605a      	str	r2, [r3, #4]
 800142a:	609a      	str	r2, [r3, #8]
 800142c:	60da      	str	r2, [r3, #12]
 800142e:	611a      	str	r2, [r3, #16]
 8001430:	615a      	str	r2, [r3, #20]
 8001432:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001434:	1d3b      	adds	r3, r7, #4
 8001436:	2220      	movs	r2, #32
 8001438:	2100      	movs	r1, #0
 800143a:	4618      	mov	r0, r3
 800143c:	f00b fa31 	bl	800c8a2 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001440:	4b33      	ldr	r3, [pc, #204]	@ (8001510 <MX_TIM1_Init+0x100>)
 8001442:	4a34      	ldr	r2, [pc, #208]	@ (8001514 <MX_TIM1_Init+0x104>)
 8001444:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001446:	4b32      	ldr	r3, [pc, #200]	@ (8001510 <MX_TIM1_Init+0x100>)
 8001448:	2200      	movs	r2, #0
 800144a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800144c:	4b30      	ldr	r3, [pc, #192]	@ (8001510 <MX_TIM1_Init+0x100>)
 800144e:	2200      	movs	r2, #0
 8001450:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 3600;
 8001452:	4b2f      	ldr	r3, [pc, #188]	@ (8001510 <MX_TIM1_Init+0x100>)
 8001454:	f44f 6261 	mov.w	r2, #3600	@ 0xe10
 8001458:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800145a:	4b2d      	ldr	r3, [pc, #180]	@ (8001510 <MX_TIM1_Init+0x100>)
 800145c:	2200      	movs	r2, #0
 800145e:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001460:	4b2b      	ldr	r3, [pc, #172]	@ (8001510 <MX_TIM1_Init+0x100>)
 8001462:	2200      	movs	r2, #0
 8001464:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001466:	4b2a      	ldr	r3, [pc, #168]	@ (8001510 <MX_TIM1_Init+0x100>)
 8001468:	2280      	movs	r2, #128	@ 0x80
 800146a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800146c:	4828      	ldr	r0, [pc, #160]	@ (8001510 <MX_TIM1_Init+0x100>)
 800146e:	f003 ff53 	bl	8005318 <HAL_TIM_PWM_Init>
 8001472:	4603      	mov	r3, r0
 8001474:	2b00      	cmp	r3, #0
 8001476:	d001      	beq.n	800147c <MX_TIM1_Init+0x6c>
  {
    Error_Handler();
 8001478:	f000 fc6c 	bl	8001d54 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800147c:	2300      	movs	r3, #0
 800147e:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001480:	2300      	movs	r3, #0
 8001482:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001484:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8001488:	4619      	mov	r1, r3
 800148a:	4821      	ldr	r0, [pc, #132]	@ (8001510 <MX_TIM1_Init+0x100>)
 800148c:	f004 fb12 	bl	8005ab4 <HAL_TIMEx_MasterConfigSynchronization>
 8001490:	4603      	mov	r3, r0
 8001492:	2b00      	cmp	r3, #0
 8001494:	d001      	beq.n	800149a <MX_TIM1_Init+0x8a>
  {
    Error_Handler();
 8001496:	f000 fc5d 	bl	8001d54 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800149a:	2360      	movs	r3, #96	@ 0x60
 800149c:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 800149e:	2300      	movs	r3, #0
 80014a0:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80014a2:	2300      	movs	r3, #0
 80014a4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80014a6:	2300      	movs	r3, #0
 80014a8:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80014aa:	2300      	movs	r3, #0
 80014ac:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80014ae:	2300      	movs	r3, #0
 80014b0:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80014b2:	2300      	movs	r3, #0
 80014b4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80014b6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80014ba:	2200      	movs	r2, #0
 80014bc:	4619      	mov	r1, r3
 80014be:	4814      	ldr	r0, [pc, #80]	@ (8001510 <MX_TIM1_Init+0x100>)
 80014c0:	f004 f81c 	bl	80054fc <HAL_TIM_PWM_ConfigChannel>
 80014c4:	4603      	mov	r3, r0
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d001      	beq.n	80014ce <MX_TIM1_Init+0xbe>
  {
    Error_Handler();
 80014ca:	f000 fc43 	bl	8001d54 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80014ce:	2300      	movs	r3, #0
 80014d0:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80014d2:	2300      	movs	r3, #0
 80014d4:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80014d6:	2300      	movs	r3, #0
 80014d8:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80014da:	2300      	movs	r3, #0
 80014dc:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80014de:	2300      	movs	r3, #0
 80014e0:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80014e2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80014e6:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80014e8:	2300      	movs	r3, #0
 80014ea:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80014ec:	1d3b      	adds	r3, r7, #4
 80014ee:	4619      	mov	r1, r3
 80014f0:	4807      	ldr	r0, [pc, #28]	@ (8001510 <MX_TIM1_Init+0x100>)
 80014f2:	f004 fb3d 	bl	8005b70 <HAL_TIMEx_ConfigBreakDeadTime>
 80014f6:	4603      	mov	r3, r0
 80014f8:	2b00      	cmp	r3, #0
 80014fa:	d001      	beq.n	8001500 <MX_TIM1_Init+0xf0>
  {
    Error_Handler();
 80014fc:	f000 fc2a 	bl	8001d54 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001500:	4803      	ldr	r0, [pc, #12]	@ (8001510 <MX_TIM1_Init+0x100>)
 8001502:	f000 fcc1 	bl	8001e88 <HAL_TIM_MspPostInit>

}
 8001506:	bf00      	nop
 8001508:	3748      	adds	r7, #72	@ 0x48
 800150a:	46bd      	mov	sp, r7
 800150c:	bd80      	pop	{r7, pc}
 800150e:	bf00      	nop
 8001510:	200003a4 	.word	0x200003a4
 8001514:	40012c00 	.word	0x40012c00

08001518 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001518:	b480      	push	{r7}
 800151a:	b085      	sub	sp, #20
 800151c:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800151e:	4b14      	ldr	r3, [pc, #80]	@ (8001570 <MX_GPIO_Init+0x58>)
 8001520:	699b      	ldr	r3, [r3, #24]
 8001522:	4a13      	ldr	r2, [pc, #76]	@ (8001570 <MX_GPIO_Init+0x58>)
 8001524:	f043 0310 	orr.w	r3, r3, #16
 8001528:	6193      	str	r3, [r2, #24]
 800152a:	4b11      	ldr	r3, [pc, #68]	@ (8001570 <MX_GPIO_Init+0x58>)
 800152c:	699b      	ldr	r3, [r3, #24]
 800152e:	f003 0310 	and.w	r3, r3, #16
 8001532:	60fb      	str	r3, [r7, #12]
 8001534:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001536:	4b0e      	ldr	r3, [pc, #56]	@ (8001570 <MX_GPIO_Init+0x58>)
 8001538:	699b      	ldr	r3, [r3, #24]
 800153a:	4a0d      	ldr	r2, [pc, #52]	@ (8001570 <MX_GPIO_Init+0x58>)
 800153c:	f043 0320 	orr.w	r3, r3, #32
 8001540:	6193      	str	r3, [r2, #24]
 8001542:	4b0b      	ldr	r3, [pc, #44]	@ (8001570 <MX_GPIO_Init+0x58>)
 8001544:	699b      	ldr	r3, [r3, #24]
 8001546:	f003 0320 	and.w	r3, r3, #32
 800154a:	60bb      	str	r3, [r7, #8]
 800154c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800154e:	4b08      	ldr	r3, [pc, #32]	@ (8001570 <MX_GPIO_Init+0x58>)
 8001550:	699b      	ldr	r3, [r3, #24]
 8001552:	4a07      	ldr	r2, [pc, #28]	@ (8001570 <MX_GPIO_Init+0x58>)
 8001554:	f043 0304 	orr.w	r3, r3, #4
 8001558:	6193      	str	r3, [r2, #24]
 800155a:	4b05      	ldr	r3, [pc, #20]	@ (8001570 <MX_GPIO_Init+0x58>)
 800155c:	699b      	ldr	r3, [r3, #24]
 800155e:	f003 0304 	and.w	r3, r3, #4
 8001562:	607b      	str	r3, [r7, #4]
 8001564:	687b      	ldr	r3, [r7, #4]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001566:	bf00      	nop
 8001568:	3714      	adds	r7, #20
 800156a:	46bd      	mov	sp, r7
 800156c:	bc80      	pop	{r7}
 800156e:	4770      	bx	lr
 8001570:	40021000 	.word	0x40021000
 8001574:	00000000 	.word	0x00000000

08001578 <parse_gcode>:

/* USER CODE BEGIN 4 */

Gcode parse_gcode(char* buff, int len){
 8001578:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800157c:	b0cc      	sub	sp, #304	@ 0x130
 800157e:	af00      	add	r7, sp, #0
 8001580:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8001584:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8001588:	6018      	str	r0, [r3, #0]
 800158a:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800158e:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8001592:	6019      	str	r1, [r3, #0]
 8001594:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8001598:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800159c:	601a      	str	r2, [r3, #0]
    Gcode gcode;
    gcode.valid = 1;
 800159e:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80015a2:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 80015a6:	2201      	movs	r2, #1
 80015a8:	601a      	str	r2, [r3, #0]
    gcode.arg_len = 0;
 80015aa:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80015ae:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 80015b2:	2200      	movs	r2, #0
 80015b4:	60da      	str	r2, [r3, #12]
    char* index = buff;
 80015b6:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80015ba:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c

    if(buff[0] >= 'A' && buff[0] <= 'Z'){
 80015c4:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80015c8:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	781b      	ldrb	r3, [r3, #0]
 80015d0:	2b40      	cmp	r3, #64	@ 0x40
 80015d2:	d913      	bls.n	80015fc <parse_gcode+0x84>
 80015d4:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80015d8:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	781b      	ldrb	r3, [r3, #0]
 80015e0:	2b5a      	cmp	r3, #90	@ 0x5a
 80015e2:	d80b      	bhi.n	80015fc <parse_gcode+0x84>
        gcode.letter = buff[0];
 80015e4:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80015e8:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	781a      	ldrb	r2, [r3, #0]
 80015f0:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80015f4:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 80015f8:	711a      	strb	r2, [r3, #4]
 80015fa:	e034      	b.n	8001666 <parse_gcode+0xee>
    }else if(buff[0] >= 'a' && buff[0] <= 'z'){
 80015fc:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8001600:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	781b      	ldrb	r3, [r3, #0]
 8001608:	2b60      	cmp	r3, #96	@ 0x60
 800160a:	d915      	bls.n	8001638 <parse_gcode+0xc0>
 800160c:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8001610:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	781b      	ldrb	r3, [r3, #0]
 8001618:	2b7a      	cmp	r3, #122	@ 0x7a
 800161a:	d80d      	bhi.n	8001638 <parse_gcode+0xc0>
        gcode.letter = buff[0] - ('a'-'A');
 800161c:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8001620:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	781b      	ldrb	r3, [r3, #0]
 8001628:	3b20      	subs	r3, #32
 800162a:	b2da      	uxtb	r2, r3
 800162c:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8001630:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8001634:	711a      	strb	r2, [r3, #4]
 8001636:	e016      	b.n	8001666 <parse_gcode+0xee>
    }else{
        gcode.valid = 0;
 8001638:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800163c:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8001640:	2200      	movs	r2, #0
 8001642:	601a      	str	r2, [r3, #0]
        return gcode;
 8001644:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8001648:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 800164c:	681a      	ldr	r2, [r3, #0]
 800164e:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8001652:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8001656:	4610      	mov	r0, r2
 8001658:	4619      	mov	r1, r3
 800165a:	f44f 7388 	mov.w	r3, #272	@ 0x110
 800165e:	461a      	mov	r2, r3
 8001660:	f00b f9bf 	bl	800c9e2 <memcpy>
 8001664:	e20a      	b.n	8001a7c <parse_gcode+0x504>
    }
    index++;
 8001666:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800166a:	3301      	adds	r3, #1
 800166c:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c

    gcode.number = 0;
 8001670:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8001674:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8001678:	2200      	movs	r2, #0
 800167a:	609a      	str	r2, [r3, #8]
    while(index < buff+len){
 800167c:	e04a      	b.n	8001714 <parse_gcode+0x19c>
        if(*index >= '0' && *index <= '9'){
 800167e:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8001682:	781b      	ldrb	r3, [r3, #0]
 8001684:	2b2f      	cmp	r3, #47	@ 0x2f
 8001686:	d91e      	bls.n	80016c6 <parse_gcode+0x14e>
 8001688:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800168c:	781b      	ldrb	r3, [r3, #0]
 800168e:	2b39      	cmp	r3, #57	@ 0x39
 8001690:	d819      	bhi.n	80016c6 <parse_gcode+0x14e>
            gcode.number = gcode.number*10 + (*index - '0');
 8001692:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8001696:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 800169a:	689a      	ldr	r2, [r3, #8]
 800169c:	4613      	mov	r3, r2
 800169e:	009b      	lsls	r3, r3, #2
 80016a0:	4413      	add	r3, r2
 80016a2:	005b      	lsls	r3, r3, #1
 80016a4:	461a      	mov	r2, r3
 80016a6:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80016aa:	781b      	ldrb	r3, [r3, #0]
 80016ac:	3b30      	subs	r3, #48	@ 0x30
 80016ae:	441a      	add	r2, r3
 80016b0:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80016b4:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 80016b8:	609a      	str	r2, [r3, #8]
            break;
        }else{
            gcode.valid = 0;
            return gcode;
        }
        index++;
 80016ba:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80016be:	3301      	adds	r3, #1
 80016c0:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
 80016c4:	e026      	b.n	8001714 <parse_gcode+0x19c>
        }else if (*index == ' ' || *index == '\n'){
 80016c6:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80016ca:	781b      	ldrb	r3, [r3, #0]
 80016cc:	2b20      	cmp	r3, #32
 80016ce:	d004      	beq.n	80016da <parse_gcode+0x162>
 80016d0:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80016d4:	781b      	ldrb	r3, [r3, #0]
 80016d6:	2b0a      	cmp	r3, #10
 80016d8:	d105      	bne.n	80016e6 <parse_gcode+0x16e>
            index++;
 80016da:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80016de:	3301      	adds	r3, #1
 80016e0:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
            break;
 80016e4:	e025      	b.n	8001732 <parse_gcode+0x1ba>
            gcode.valid = 0;
 80016e6:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80016ea:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 80016ee:	2200      	movs	r2, #0
 80016f0:	601a      	str	r2, [r3, #0]
            return gcode;
 80016f2:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80016f6:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 80016fa:	681a      	ldr	r2, [r3, #0]
 80016fc:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8001700:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8001704:	4610      	mov	r0, r2
 8001706:	4619      	mov	r1, r3
 8001708:	f44f 7388 	mov.w	r3, #272	@ 0x110
 800170c:	461a      	mov	r2, r3
 800170e:	f00b f968 	bl	800c9e2 <memcpy>
 8001712:	e1b3      	b.n	8001a7c <parse_gcode+0x504>
    while(index < buff+len){
 8001714:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8001718:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8001722:	f5a2 7294 	sub.w	r2, r2, #296	@ 0x128
 8001726:	6812      	ldr	r2, [r2, #0]
 8001728:	4413      	add	r3, r2
 800172a:	f8d7 212c 	ldr.w	r2, [r7, #300]	@ 0x12c
 800172e:	429a      	cmp	r2, r3
 8001730:	d3a5      	bcc.n	800167e <parse_gcode+0x106>
    }

    int arg_index = -1;
 8001732:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001736:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    int inside_arg = 0;
 800173a:	2300      	movs	r3, #0
 800173c:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
    int decimals = 0;
 8001740:	2300      	movs	r3, #0
 8001742:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
    while(index < buff+len){
 8001746:	e179      	b.n	8001a3c <parse_gcode+0x4c4>
        if(inside_arg){
 8001748:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 800174c:	2b00      	cmp	r3, #0
 800174e:	f000 80de 	beq.w	800190e <parse_gcode+0x396>
            if(*index >= '0' && *index <= '9'){
 8001752:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8001756:	781b      	ldrb	r3, [r3, #0]
 8001758:	2b2f      	cmp	r3, #47	@ 0x2f
 800175a:	d97b      	bls.n	8001854 <parse_gcode+0x2dc>
 800175c:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8001760:	781b      	ldrb	r3, [r3, #0]
 8001762:	2b39      	cmp	r3, #57	@ 0x39
 8001764:	d876      	bhi.n	8001854 <parse_gcode+0x2dc>
                if(decimals == 0){
 8001766:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 800176a:	2b00      	cmp	r3, #0
 800176c:	d128      	bne.n	80017c0 <parse_gcode+0x248>
                    gcode.arguments[arg_index].value = gcode.arguments[arg_index].value*10 + (*index - '0');
 800176e:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8001772:	f5a3 7290 	sub.w	r2, r3, #288	@ 0x120
 8001776:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800177a:	3302      	adds	r3, #2
 800177c:	00db      	lsls	r3, r3, #3
 800177e:	4413      	add	r3, r2
 8001780:	685b      	ldr	r3, [r3, #4]
 8001782:	49c5      	ldr	r1, [pc, #788]	@ (8001a98 <parse_gcode+0x520>)
 8001784:	4618      	mov	r0, r3
 8001786:	f7fe fceb 	bl	8000160 <__aeabi_fmul>
 800178a:	4603      	mov	r3, r0
 800178c:	461c      	mov	r4, r3
 800178e:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8001792:	781b      	ldrb	r3, [r3, #0]
 8001794:	3b30      	subs	r3, #48	@ 0x30
 8001796:	4618      	mov	r0, r3
 8001798:	f7ff fb54 	bl	8000e44 <__aeabi_i2f>
 800179c:	4603      	mov	r3, r0
 800179e:	4619      	mov	r1, r3
 80017a0:	4620      	mov	r0, r4
 80017a2:	f7ff fa9b 	bl	8000cdc <__addsf3>
 80017a6:	4603      	mov	r3, r0
 80017a8:	4619      	mov	r1, r3
 80017aa:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80017ae:	f5a3 7290 	sub.w	r2, r3, #288	@ 0x120
 80017b2:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80017b6:	3302      	adds	r3, #2
 80017b8:	00db      	lsls	r3, r3, #3
 80017ba:	4413      	add	r3, r2
 80017bc:	6059      	str	r1, [r3, #4]
                if(decimals == 0){
 80017be:	e138      	b.n	8001a32 <parse_gcode+0x4ba>
                }else{
                    gcode.arguments[arg_index].value = gcode.arguments[arg_index].value + ((float)(*index - '0') * pow(0.1,decimals));
 80017c0:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80017c4:	f5a3 7290 	sub.w	r2, r3, #288	@ 0x120
 80017c8:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80017cc:	3302      	adds	r3, #2
 80017ce:	00db      	lsls	r3, r3, #3
 80017d0:	4413      	add	r3, r2
 80017d2:	685b      	ldr	r3, [r3, #4]
 80017d4:	4618      	mov	r0, r3
 80017d6:	f7fe fedb 	bl	8000590 <__aeabi_f2d>
 80017da:	4604      	mov	r4, r0
 80017dc:	460d      	mov	r5, r1
 80017de:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80017e2:	781b      	ldrb	r3, [r3, #0]
 80017e4:	3b30      	subs	r3, #48	@ 0x30
 80017e6:	4618      	mov	r0, r3
 80017e8:	f7ff fb2c 	bl	8000e44 <__aeabi_i2f>
 80017ec:	4603      	mov	r3, r0
 80017ee:	4618      	mov	r0, r3
 80017f0:	f7fe fece 	bl	8000590 <__aeabi_f2d>
 80017f4:	4680      	mov	r8, r0
 80017f6:	4689      	mov	r9, r1
 80017f8:	f8d7 0120 	ldr.w	r0, [r7, #288]	@ 0x120
 80017fc:	f7fe feb6 	bl	800056c <__aeabi_i2d>
 8001800:	4602      	mov	r2, r0
 8001802:	460b      	mov	r3, r1
 8001804:	a1a2      	add	r1, pc, #648	@ (adr r1, 8001a90 <parse_gcode+0x518>)
 8001806:	e9d1 0100 	ldrd	r0, r1, [r1]
 800180a:	f008 fdad 	bl	800a368 <pow>
 800180e:	4602      	mov	r2, r0
 8001810:	460b      	mov	r3, r1
 8001812:	4640      	mov	r0, r8
 8001814:	4649      	mov	r1, r9
 8001816:	f7fe ff13 	bl	8000640 <__aeabi_dmul>
 800181a:	4602      	mov	r2, r0
 800181c:	460b      	mov	r3, r1
 800181e:	4620      	mov	r0, r4
 8001820:	4629      	mov	r1, r5
 8001822:	f7fe fd57 	bl	80002d4 <__adddf3>
 8001826:	4602      	mov	r2, r0
 8001828:	460b      	mov	r3, r1
 800182a:	4610      	mov	r0, r2
 800182c:	4619      	mov	r1, r3
 800182e:	f7ff f9ff 	bl	8000c30 <__aeabi_d2f>
 8001832:	4601      	mov	r1, r0
 8001834:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8001838:	f5a3 7290 	sub.w	r2, r3, #288	@ 0x120
 800183c:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8001840:	3302      	adds	r3, #2
 8001842:	00db      	lsls	r3, r3, #3
 8001844:	4413      	add	r3, r2
 8001846:	6059      	str	r1, [r3, #4]
                    decimals++;
 8001848:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 800184c:	3301      	adds	r3, #1
 800184e:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
                if(decimals == 0){
 8001852:	e0ee      	b.n	8001a32 <parse_gcode+0x4ba>
                }
            }else if(*index == '.'){
 8001854:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8001858:	781b      	ldrb	r3, [r3, #0]
 800185a:	2b2e      	cmp	r3, #46	@ 0x2e
 800185c:	d11e      	bne.n	800189c <parse_gcode+0x324>
                if(decimals > 0){
 800185e:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8001862:	2b00      	cmp	r3, #0
 8001864:	dd16      	ble.n	8001894 <parse_gcode+0x31c>
                    gcode.valid = 0;
 8001866:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800186a:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 800186e:	2200      	movs	r2, #0
 8001870:	601a      	str	r2, [r3, #0]
                    return gcode;
 8001872:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8001876:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 800187a:	681a      	ldr	r2, [r3, #0]
 800187c:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8001880:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8001884:	4610      	mov	r0, r2
 8001886:	4619      	mov	r1, r3
 8001888:	f44f 7388 	mov.w	r3, #272	@ 0x110
 800188c:	461a      	mov	r2, r3
 800188e:	f00b f8a8 	bl	800c9e2 <memcpy>
 8001892:	e0f3      	b.n	8001a7c <parse_gcode+0x504>
                }
                decimals = 1;
 8001894:	2301      	movs	r3, #1
 8001896:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 800189a:	e0ca      	b.n	8001a32 <parse_gcode+0x4ba>
            }else if (*index == ' '){
 800189c:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80018a0:	781b      	ldrb	r3, [r3, #0]
 80018a2:	2b20      	cmp	r3, #32
 80018a4:	d106      	bne.n	80018b4 <parse_gcode+0x33c>
                decimals = 0;
 80018a6:	2300      	movs	r3, #0
 80018a8:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
                inside_arg = 0;
 80018ac:	2300      	movs	r3, #0
 80018ae:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 80018b2:	e0be      	b.n	8001a32 <parse_gcode+0x4ba>
            }else if(*index == '\n'){
 80018b4:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80018b8:	781b      	ldrb	r3, [r3, #0]
 80018ba:	2b0a      	cmp	r3, #10
 80018bc:	d110      	bne.n	80018e0 <parse_gcode+0x368>
                return gcode;
 80018be:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80018c2:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 80018c6:	681a      	ldr	r2, [r3, #0]
 80018c8:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80018cc:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 80018d0:	4610      	mov	r0, r2
 80018d2:	4619      	mov	r1, r3
 80018d4:	f44f 7388 	mov.w	r3, #272	@ 0x110
 80018d8:	461a      	mov	r2, r3
 80018da:	f00b f882 	bl	800c9e2 <memcpy>
 80018de:	e0cd      	b.n	8001a7c <parse_gcode+0x504>
            }else{
                gcode.valid = 0;
 80018e0:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80018e4:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 80018e8:	2200      	movs	r2, #0
 80018ea:	601a      	str	r2, [r3, #0]
                return gcode;
 80018ec:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80018f0:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 80018f4:	681a      	ldr	r2, [r3, #0]
 80018f6:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80018fa:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 80018fe:	4610      	mov	r0, r2
 8001900:	4619      	mov	r1, r3
 8001902:	f44f 7388 	mov.w	r3, #272	@ 0x110
 8001906:	461a      	mov	r2, r3
 8001908:	f00b f86b 	bl	800c9e2 <memcpy>
 800190c:	e0b6      	b.n	8001a7c <parse_gcode+0x504>
            }
        }else{
            if(*index >= 'A' && *index <= 'Z'){
 800190e:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8001912:	781b      	ldrb	r3, [r3, #0]
 8001914:	2b40      	cmp	r3, #64	@ 0x40
 8001916:	d92d      	bls.n	8001974 <parse_gcode+0x3fc>
 8001918:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800191c:	781b      	ldrb	r3, [r3, #0]
 800191e:	2b5a      	cmp	r3, #90	@ 0x5a
 8001920:	d828      	bhi.n	8001974 <parse_gcode+0x3fc>
                arg_index++;
 8001922:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8001926:	3301      	adds	r3, #1
 8001928:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
                gcode.arguments[arg_index].name = *index;
 800192c:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8001930:	7819      	ldrb	r1, [r3, #0]
 8001932:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8001936:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 800193a:	f8d7 2128 	ldr.w	r2, [r7, #296]	@ 0x128
 800193e:	3202      	adds	r2, #2
 8001940:	f803 1032 	strb.w	r1, [r3, r2, lsl #3]
                gcode.arguments[arg_index].value = 0;
 8001944:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8001948:	f5a3 7290 	sub.w	r2, r3, #288	@ 0x120
 800194c:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8001950:	3302      	adds	r3, #2
 8001952:	00db      	lsls	r3, r3, #3
 8001954:	4413      	add	r3, r2
 8001956:	f04f 0200 	mov.w	r2, #0
 800195a:	605a      	str	r2, [r3, #4]
                gcode.arg_len = arg_index+1;
 800195c:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8001960:	1c5a      	adds	r2, r3, #1
 8001962:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8001966:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 800196a:	60da      	str	r2, [r3, #12]
                inside_arg = 1;
 800196c:	2301      	movs	r3, #1
 800196e:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 8001972:	e05e      	b.n	8001a32 <parse_gcode+0x4ba>
            }else if(*index >= 'a' && *index <= 'z'){
 8001974:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8001978:	781b      	ldrb	r3, [r3, #0]
 800197a:	2b60      	cmp	r3, #96	@ 0x60
 800197c:	d927      	bls.n	80019ce <parse_gcode+0x456>
 800197e:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8001982:	781b      	ldrb	r3, [r3, #0]
 8001984:	2b7a      	cmp	r3, #122	@ 0x7a
 8001986:	d822      	bhi.n	80019ce <parse_gcode+0x456>
                arg_index++;
 8001988:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800198c:	3301      	adds	r3, #1
 800198e:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
                gcode.arguments[arg_index].name = *index - ('a' - 'A');
 8001992:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8001996:	781b      	ldrb	r3, [r3, #0]
 8001998:	3b20      	subs	r3, #32
 800199a:	b2d9      	uxtb	r1, r3
 800199c:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80019a0:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 80019a4:	f8d7 2128 	ldr.w	r2, [r7, #296]	@ 0x128
 80019a8:	3202      	adds	r2, #2
 80019aa:	f803 1032 	strb.w	r1, [r3, r2, lsl #3]
                gcode.arguments[arg_index].value = 0;
 80019ae:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80019b2:	f5a3 7290 	sub.w	r2, r3, #288	@ 0x120
 80019b6:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80019ba:	3302      	adds	r3, #2
 80019bc:	00db      	lsls	r3, r3, #3
 80019be:	4413      	add	r3, r2
 80019c0:	f04f 0200 	mov.w	r2, #0
 80019c4:	605a      	str	r2, [r3, #4]
                inside_arg = 1;
 80019c6:	2301      	movs	r3, #1
 80019c8:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 80019cc:	e031      	b.n	8001a32 <parse_gcode+0x4ba>
            }else if (*index == ' '){
 80019ce:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80019d2:	781b      	ldrb	r3, [r3, #0]
 80019d4:	2b20      	cmp	r3, #32
 80019d6:	d02c      	beq.n	8001a32 <parse_gcode+0x4ba>

            }else if (*index == '\n'){
 80019d8:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80019dc:	781b      	ldrb	r3, [r3, #0]
 80019de:	2b0a      	cmp	r3, #10
 80019e0:	d110      	bne.n	8001a04 <parse_gcode+0x48c>
                return gcode;
 80019e2:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80019e6:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 80019ea:	681a      	ldr	r2, [r3, #0]
 80019ec:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80019f0:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 80019f4:	4610      	mov	r0, r2
 80019f6:	4619      	mov	r1, r3
 80019f8:	f44f 7388 	mov.w	r3, #272	@ 0x110
 80019fc:	461a      	mov	r2, r3
 80019fe:	f00a fff0 	bl	800c9e2 <memcpy>
 8001a02:	e03b      	b.n	8001a7c <parse_gcode+0x504>
            }else{
                gcode.valid = 0;
 8001a04:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8001a08:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8001a0c:	2200      	movs	r2, #0
 8001a0e:	601a      	str	r2, [r3, #0]
                return gcode;
 8001a10:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8001a14:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8001a18:	681a      	ldr	r2, [r3, #0]
 8001a1a:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8001a1e:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8001a22:	4610      	mov	r0, r2
 8001a24:	4619      	mov	r1, r3
 8001a26:	f44f 7388 	mov.w	r3, #272	@ 0x110
 8001a2a:	461a      	mov	r2, r3
 8001a2c:	f00a ffd9 	bl	800c9e2 <memcpy>
 8001a30:	e024      	b.n	8001a7c <parse_gcode+0x504>
            }

        }
        index++;
 8001a32:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8001a36:	3301      	adds	r3, #1
 8001a38:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
    while(index < buff+len){
 8001a3c:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8001a40:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8001a4a:	f5a2 7294 	sub.w	r2, r2, #296	@ 0x128
 8001a4e:	6812      	ldr	r2, [r2, #0]
 8001a50:	4413      	add	r3, r2
 8001a52:	f8d7 212c 	ldr.w	r2, [r7, #300]	@ 0x12c
 8001a56:	429a      	cmp	r2, r3
 8001a58:	f4ff ae76 	bcc.w	8001748 <parse_gcode+0x1d0>
    }

    return gcode;
 8001a5c:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8001a60:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8001a64:	681a      	ldr	r2, [r3, #0]
 8001a66:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8001a6a:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8001a6e:	4610      	mov	r0, r2
 8001a70:	4619      	mov	r1, r3
 8001a72:	f44f 7388 	mov.w	r3, #272	@ 0x110
 8001a76:	461a      	mov	r2, r3
 8001a78:	f00a ffb3 	bl	800c9e2 <memcpy>
}
 8001a7c:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8001a80:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8001a84:	6818      	ldr	r0, [r3, #0]
 8001a86:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 8001a8a:	46bd      	mov	sp, r7
 8001a8c:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001a90:	9999999a 	.word	0x9999999a
 8001a94:	3fb99999 	.word	0x3fb99999
 8001a98:	41200000 	.word	0x41200000

08001a9c <get_gcode_arg>:

int get_gcode_arg(Gcode* gcode, char arg_name, float* out){
 8001a9c:	b480      	push	{r7}
 8001a9e:	b087      	sub	sp, #28
 8001aa0:	af00      	add	r7, sp, #0
 8001aa2:	60f8      	str	r0, [r7, #12]
 8001aa4:	460b      	mov	r3, r1
 8001aa6:	607a      	str	r2, [r7, #4]
 8001aa8:	72fb      	strb	r3, [r7, #11]
	int i = 0;
 8001aaa:	2300      	movs	r3, #0
 8001aac:	617b      	str	r3, [r7, #20]
	while(i<gcode->arg_len){
 8001aae:	e014      	b.n	8001ada <get_gcode_arg+0x3e>
		if(gcode->arguments[i].name == arg_name){
 8001ab0:	68fb      	ldr	r3, [r7, #12]
 8001ab2:	697a      	ldr	r2, [r7, #20]
 8001ab4:	3202      	adds	r2, #2
 8001ab6:	f813 3032 	ldrb.w	r3, [r3, r2, lsl #3]
 8001aba:	7afa      	ldrb	r2, [r7, #11]
 8001abc:	429a      	cmp	r2, r3
 8001abe:	d109      	bne.n	8001ad4 <get_gcode_arg+0x38>
			*out = gcode->arguments[i].value;
 8001ac0:	68fa      	ldr	r2, [r7, #12]
 8001ac2:	697b      	ldr	r3, [r7, #20]
 8001ac4:	3302      	adds	r3, #2
 8001ac6:	00db      	lsls	r3, r3, #3
 8001ac8:	4413      	add	r3, r2
 8001aca:	685a      	ldr	r2, [r3, #4]
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	601a      	str	r2, [r3, #0]
			return 1;
 8001ad0:	2301      	movs	r3, #1
 8001ad2:	e008      	b.n	8001ae6 <get_gcode_arg+0x4a>
		}
		i++;
 8001ad4:	697b      	ldr	r3, [r7, #20]
 8001ad6:	3301      	adds	r3, #1
 8001ad8:	617b      	str	r3, [r7, #20]
	while(i<gcode->arg_len){
 8001ada:	68fb      	ldr	r3, [r7, #12]
 8001adc:	68db      	ldr	r3, [r3, #12]
 8001ade:	697a      	ldr	r2, [r7, #20]
 8001ae0:	429a      	cmp	r2, r3
 8001ae2:	dbe5      	blt.n	8001ab0 <get_gcode_arg+0x14>
	}
	return 0;
 8001ae4:	2300      	movs	r3, #0
}
 8001ae6:	4618      	mov	r0, r3
 8001ae8:	371c      	adds	r7, #28
 8001aea:	46bd      	mov	sp, r7
 8001aec:	bc80      	pop	{r7}
 8001aee:	4770      	bx	lr

08001af0 <USB_CDC_RxHandler>:

void USB_CDC_RxHandler(uint8_t* Buf, uint32_t Len)
{
 8001af0:	b580      	push	{r7, lr}
 8001af2:	f5ad 6da5 	sub.w	sp, sp, #1320	@ 0x528
 8001af6:	af00      	add	r7, sp, #0
 8001af8:	f507 63a5 	add.w	r3, r7, #1320	@ 0x528
 8001afc:	f2a3 5324 	subw	r3, r3, #1316	@ 0x524
 8001b00:	6018      	str	r0, [r3, #0]
 8001b02:	f507 63a5 	add.w	r3, r7, #1320	@ 0x528
 8001b06:	f5a3 63a5 	sub.w	r3, r3, #1320	@ 0x528
 8001b0a:	6019      	str	r1, [r3, #0]
	Gcode gcode = parse_gcode((char*)Buf, Len);
 8001b0c:	f507 63a5 	add.w	r3, r7, #1320	@ 0x528
 8001b10:	f5a3 63a5 	sub.w	r3, r3, #1320	@ 0x528
 8001b14:	681a      	ldr	r2, [r3, #0]
 8001b16:	f507 63a5 	add.w	r3, r7, #1320	@ 0x528
 8001b1a:	f5a3 708e 	sub.w	r0, r3, #284	@ 0x11c
 8001b1e:	f507 63a5 	add.w	r3, r7, #1320	@ 0x528
 8001b22:	f2a3 5324 	subw	r3, r3, #1316	@ 0x524
 8001b26:	6819      	ldr	r1, [r3, #0]
 8001b28:	f7ff fd26 	bl	8001578 <parse_gcode>

	char TxBuffer[1024];
	if(Buf[0] == 'A'){
 8001b2c:	f507 63a5 	add.w	r3, r7, #1320	@ 0x528
 8001b30:	f2a3 5324 	subw	r3, r3, #1316	@ 0x524
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	781b      	ldrb	r3, [r3, #0]
 8001b38:	2b41      	cmp	r3, #65	@ 0x41
 8001b3a:	d11d      	bne.n	8001b78 <USB_CDC_RxHandler+0x88>
		float value = atof((char*)(Buf+1));
 8001b3c:	f507 63a5 	add.w	r3, r7, #1320	@ 0x528
 8001b40:	f2a3 5324 	subw	r3, r3, #1316	@ 0x524
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	3301      	adds	r3, #1
 8001b48:	4618      	mov	r0, r3
 8001b4a:	f009 fb1d 	bl	800b188 <atof>
 8001b4e:	4602      	mov	r2, r0
 8001b50:	460b      	mov	r3, r1
 8001b52:	4610      	mov	r0, r2
 8001b54:	4619      	mov	r1, r3
 8001b56:	f7ff f86b 	bl	8000c30 <__aeabi_d2f>
 8001b5a:	4603      	mov	r3, r0
 8001b5c:	f8c7 3520 	str.w	r3, [r7, #1312]	@ 0x520
		sprintf(TxBuffer, "Received data starting with A and value %f\n", value);
 8001b60:	f8d7 0520 	ldr.w	r0, [r7, #1312]	@ 0x520
 8001b64:	f7fe fd14 	bl	8000590 <__aeabi_f2d>
 8001b68:	4602      	mov	r2, r0
 8001b6a:	460b      	mov	r3, r1
 8001b6c:	f107 000c 	add.w	r0, r7, #12
 8001b70:	4946      	ldr	r1, [pc, #280]	@ (8001c8c <USB_CDC_RxHandler+0x19c>)
 8001b72:	f00a fe33 	bl	800c7dc <siprintf>
 8001b76:	e02d      	b.n	8001bd4 <USB_CDC_RxHandler+0xe4>
	}else if (Buf[0] == 'B'){
 8001b78:	f507 63a5 	add.w	r3, r7, #1320	@ 0x528
 8001b7c:	f2a3 5324 	subw	r3, r3, #1316	@ 0x524
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	781b      	ldrb	r3, [r3, #0]
 8001b84:	2b42      	cmp	r3, #66	@ 0x42
 8001b86:	d116      	bne.n	8001bb6 <USB_CDC_RxHandler+0xc6>
		int value = atoll((char*)(Buf+1));
 8001b88:	f507 63a5 	add.w	r3, r7, #1320	@ 0x528
 8001b8c:	f2a3 5324 	subw	r3, r3, #1316	@ 0x524
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	3301      	adds	r3, #1
 8001b94:	4618      	mov	r0, r3
 8001b96:	f00a f8ff 	bl	800bd98 <atoll>
 8001b9a:	4602      	mov	r2, r0
 8001b9c:	460b      	mov	r3, r1
 8001b9e:	4613      	mov	r3, r2
 8001ba0:	f8c7 3524 	str.w	r3, [r7, #1316]	@ 0x524
		sprintf(TxBuffer, "Received data starting with B and value %i\n", value);
 8001ba4:	f107 030c 	add.w	r3, r7, #12
 8001ba8:	f8d7 2524 	ldr.w	r2, [r7, #1316]	@ 0x524
 8001bac:	4938      	ldr	r1, [pc, #224]	@ (8001c90 <USB_CDC_RxHandler+0x1a0>)
 8001bae:	4618      	mov	r0, r3
 8001bb0:	f00a fe14 	bl	800c7dc <siprintf>
 8001bb4:	e00e      	b.n	8001bd4 <USB_CDC_RxHandler+0xe4>
	}else{
		sprintf(TxBuffer, "Received data not starting with A or B '%s' with len %i\n", Buf, (int)Len);
 8001bb6:	f507 63a5 	add.w	r3, r7, #1320	@ 0x528
 8001bba:	f5a3 63a5 	sub.w	r3, r3, #1320	@ 0x528
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	f507 62a5 	add.w	r2, r7, #1320	@ 0x528
 8001bc4:	f2a2 5224 	subw	r2, r2, #1316	@ 0x524
 8001bc8:	f107 000c 	add.w	r0, r7, #12
 8001bcc:	6812      	ldr	r2, [r2, #0]
 8001bce:	4931      	ldr	r1, [pc, #196]	@ (8001c94 <USB_CDC_RxHandler+0x1a4>)
 8001bd0:	f00a fe04 	bl	800c7dc <siprintf>
	}

	if(gcode.letter == 'P'){
 8001bd4:	f507 63a5 	add.w	r3, r7, #1320	@ 0x528
 8001bd8:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8001bdc:	791b      	ldrb	r3, [r3, #4]
 8001bde:	2b50      	cmp	r3, #80	@ 0x50
 8001be0:	d13f      	bne.n	8001c62 <USB_CDC_RxHandler+0x172>
		switch(gcode.number){
 8001be2:	f507 63a5 	add.w	r3, r7, #1320	@ 0x528
 8001be6:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8001bea:	689b      	ldr	r3, [r3, #8]
 8001bec:	2b01      	cmp	r3, #1
 8001bee:	d002      	beq.n	8001bf6 <USB_CDC_RxHandler+0x106>
 8001bf0:	2b02      	cmp	r3, #2
 8001bf2:	d02f      	beq.n	8001c54 <USB_CDC_RxHandler+0x164>
 8001bf4:	e035      	b.n	8001c62 <USB_CDC_RxHandler+0x172>
			case 1:
				float val = 0;
 8001bf6:	f507 63a5 	add.w	r3, r7, #1320	@ 0x528
 8001bfa:	f5a3 63a4 	sub.w	r3, r3, #1312	@ 0x520
 8001bfe:	f04f 0200 	mov.w	r2, #0
 8001c02:	601a      	str	r2, [r3, #0]
				if(get_gcode_arg(&gcode,'A', &val)){
 8001c04:	f107 0208 	add.w	r2, r7, #8
 8001c08:	f207 430c 	addw	r3, r7, #1036	@ 0x40c
 8001c0c:	2141      	movs	r1, #65	@ 0x41
 8001c0e:	4618      	mov	r0, r3
 8001c10:	f7ff ff44 	bl	8001a9c <get_gcode_arg>
 8001c14:	4603      	mov	r3, r0
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d013      	beq.n	8001c42 <USB_CDC_RxHandler+0x152>
					TIM1->CCR1 = (int)val;
 8001c1a:	f507 63a5 	add.w	r3, r7, #1320	@ 0x528
 8001c1e:	f5a3 63a4 	sub.w	r3, r3, #1312	@ 0x520
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	4618      	mov	r0, r3
 8001c26:	f7ff f961 	bl	8000eec <__aeabi_f2iz>
 8001c2a:	4602      	mov	r2, r0
 8001c2c:	4b1a      	ldr	r3, [pc, #104]	@ (8001c98 <USB_CDC_RxHandler+0x1a8>)
 8001c2e:	635a      	str	r2, [r3, #52]	@ 0x34
					sprintf(TxBuffer, "Called P1 - set pwm to %ld\n", TIM1->CCR1);
 8001c30:	4b19      	ldr	r3, [pc, #100]	@ (8001c98 <USB_CDC_RxHandler+0x1a8>)
 8001c32:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001c34:	f107 030c 	add.w	r3, r7, #12
 8001c38:	4918      	ldr	r1, [pc, #96]	@ (8001c9c <USB_CDC_RxHandler+0x1ac>)
 8001c3a:	4618      	mov	r0, r3
 8001c3c:	f00a fdce 	bl	800c7dc <siprintf>
				}else{
					sprintf(TxBuffer, "Called P1 - actual pwm: %ld\n",TIM1->CCR1);
				}
				break;
 8001c40:	e00f      	b.n	8001c62 <USB_CDC_RxHandler+0x172>
					sprintf(TxBuffer, "Called P1 - actual pwm: %ld\n",TIM1->CCR1);
 8001c42:	4b15      	ldr	r3, [pc, #84]	@ (8001c98 <USB_CDC_RxHandler+0x1a8>)
 8001c44:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001c46:	f107 030c 	add.w	r3, r7, #12
 8001c4a:	4915      	ldr	r1, [pc, #84]	@ (8001ca0 <USB_CDC_RxHandler+0x1b0>)
 8001c4c:	4618      	mov	r0, r3
 8001c4e:	f00a fdc5 	bl	800c7dc <siprintf>
				break;
 8001c52:	e006      	b.n	8001c62 <USB_CDC_RxHandler+0x172>
			case 2:
				sprintf(TxBuffer, "Called P2\n");
 8001c54:	f107 030c 	add.w	r3, r7, #12
 8001c58:	4912      	ldr	r1, [pc, #72]	@ (8001ca4 <USB_CDC_RxHandler+0x1b4>)
 8001c5a:	4618      	mov	r0, r3
 8001c5c:	f00a fdbe 	bl	800c7dc <siprintf>
				break;
 8001c60:	bf00      	nop
		}
	}

	uint32_t l = strlen(TxBuffer);
 8001c62:	f107 030c 	add.w	r3, r7, #12
 8001c66:	4618      	mov	r0, r3
 8001c68:	f7fe fa72 	bl	8000150 <strlen>
 8001c6c:	f8c7 051c 	str.w	r0, [r7, #1308]	@ 0x51c
    CDC_Transmit_FS((uint8_t*)TxBuffer, l);
 8001c70:	f8d7 351c 	ldr.w	r3, [r7, #1308]	@ 0x51c
 8001c74:	b29a      	uxth	r2, r3
 8001c76:	f107 030c 	add.w	r3, r7, #12
 8001c7a:	4611      	mov	r1, r2
 8001c7c:	4618      	mov	r0, r3
 8001c7e:	f007 ff95 	bl	8009bac <CDC_Transmit_FS>
}
 8001c82:	bf00      	nop
 8001c84:	f507 67a5 	add.w	r7, r7, #1320	@ 0x528
 8001c88:	46bd      	mov	sp, r7
 8001c8a:	bd80      	pop	{r7, pc}
 8001c8c:	0800f480 	.word	0x0800f480
 8001c90:	0800f4ac 	.word	0x0800f4ac
 8001c94:	0800f4d8 	.word	0x0800f4d8
 8001c98:	40012c00 	.word	0x40012c00
 8001c9c:	0800f514 	.word	0x0800f514
 8001ca0:	0800f530 	.word	0x0800f530
 8001ca4:	0800f550 	.word	0x0800f550

08001ca8 <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001ca8:	b580      	push	{r7, lr}
 8001caa:	f5ad 6d82 	sub.w	sp, sp, #1040	@ 0x410
 8001cae:	af00      	add	r7, sp, #0
 8001cb0:	f507 6382 	add.w	r3, r7, #1040	@ 0x410
 8001cb4:	f2a3 430c 	subw	r3, r3, #1036	@ 0x40c
 8001cb8:	6018      	str	r0, [r3, #0]
    // Read & Update The ADC Result
	float voltage = HAL_ADC_GetValue(&hadc1)*ADC_TO_VOLTAGE;
 8001cba:	4823      	ldr	r0, [pc, #140]	@ (8001d48 <HAL_ADC_ConvCpltCallback+0xa0>)
 8001cbc:	f000 fc36 	bl	800252c <HAL_ADC_GetValue>
 8001cc0:	4603      	mov	r3, r0
 8001cc2:	4618      	mov	r0, r3
 8001cc4:	f7fe fc42 	bl	800054c <__aeabi_ui2d>
 8001cc8:	a31d      	add	r3, pc, #116	@ (adr r3, 8001d40 <HAL_ADC_ConvCpltCallback+0x98>)
 8001cca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001cce:	f7fe fcb7 	bl	8000640 <__aeabi_dmul>
 8001cd2:	4602      	mov	r2, r0
 8001cd4:	460b      	mov	r3, r1
 8001cd6:	4610      	mov	r0, r2
 8001cd8:	4619      	mov	r1, r3
 8001cda:	f7fe ffa9 	bl	8000c30 <__aeabi_d2f>
 8001cde:	4603      	mov	r3, r0
 8001ce0:	f8c7 340c 	str.w	r3, [r7, #1036]	@ 0x40c

	if(report_decimator_counter > 15000){
 8001ce4:	4b19      	ldr	r3, [pc, #100]	@ (8001d4c <HAL_ADC_ConvCpltCallback+0xa4>)
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	f643 2298 	movw	r2, #15000	@ 0x3a98
 8001cec:	4293      	cmp	r3, r2
 8001cee:	dd1d      	ble.n	8001d2c <HAL_ADC_ConvCpltCallback+0x84>
		report_decimator_counter = 0;
 8001cf0:	4b16      	ldr	r3, [pc, #88]	@ (8001d4c <HAL_ADC_ConvCpltCallback+0xa4>)
 8001cf2:	2200      	movs	r2, #0
 8001cf4:	601a      	str	r2, [r3, #0]
		char TxBuffer[1024];
		sprintf(TxBuffer, "Voltage: %5.2fV\n", voltage);
 8001cf6:	f8d7 040c 	ldr.w	r0, [r7, #1036]	@ 0x40c
 8001cfa:	f7fe fc49 	bl	8000590 <__aeabi_f2d>
 8001cfe:	4602      	mov	r2, r0
 8001d00:	460b      	mov	r3, r1
 8001d02:	f107 0008 	add.w	r0, r7, #8
 8001d06:	4912      	ldr	r1, [pc, #72]	@ (8001d50 <HAL_ADC_ConvCpltCallback+0xa8>)
 8001d08:	f00a fd68 	bl	800c7dc <siprintf>
		uint32_t l = strlen(TxBuffer);
 8001d0c:	f107 0308 	add.w	r3, r7, #8
 8001d10:	4618      	mov	r0, r3
 8001d12:	f7fe fa1d 	bl	8000150 <strlen>
 8001d16:	f8c7 0408 	str.w	r0, [r7, #1032]	@ 0x408
		CDC_Transmit_FS((uint8_t*)TxBuffer, l);
 8001d1a:	f8d7 3408 	ldr.w	r3, [r7, #1032]	@ 0x408
 8001d1e:	b29a      	uxth	r2, r3
 8001d20:	f107 0308 	add.w	r3, r7, #8
 8001d24:	4611      	mov	r1, r2
 8001d26:	4618      	mov	r0, r3
 8001d28:	f007 ff40 	bl	8009bac <CDC_Transmit_FS>
	}
	report_decimator_counter++;
 8001d2c:	4b07      	ldr	r3, [pc, #28]	@ (8001d4c <HAL_ADC_ConvCpltCallback+0xa4>)
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	3301      	adds	r3, #1
 8001d32:	4a06      	ldr	r2, [pc, #24]	@ (8001d4c <HAL_ADC_ConvCpltCallback+0xa4>)
 8001d34:	6013      	str	r3, [r2, #0]
}
 8001d36:	bf00      	nop
 8001d38:	f507 6782 	add.w	r7, r7, #1040	@ 0x410
 8001d3c:	46bd      	mov	sp, r7
 8001d3e:	bd80      	pop	{r7, pc}
 8001d40:	a2eb39e6 	.word	0xa2eb39e6
 8001d44:	3feeae8b 	.word	0x3feeae8b
 8001d48:	20000374 	.word	0x20000374
 8001d4c:	200003f0 	.word	0x200003f0
 8001d50:	0800f55c 	.word	0x0800f55c

08001d54 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001d54:	b480      	push	{r7}
 8001d56:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001d58:	b672      	cpsid	i
}
 8001d5a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001d5c:	bf00      	nop
 8001d5e:	e7fd      	b.n	8001d5c <Error_Handler+0x8>

08001d60 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001d60:	b480      	push	{r7}
 8001d62:	b085      	sub	sp, #20
 8001d64:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001d66:	4b15      	ldr	r3, [pc, #84]	@ (8001dbc <HAL_MspInit+0x5c>)
 8001d68:	699b      	ldr	r3, [r3, #24]
 8001d6a:	4a14      	ldr	r2, [pc, #80]	@ (8001dbc <HAL_MspInit+0x5c>)
 8001d6c:	f043 0301 	orr.w	r3, r3, #1
 8001d70:	6193      	str	r3, [r2, #24]
 8001d72:	4b12      	ldr	r3, [pc, #72]	@ (8001dbc <HAL_MspInit+0x5c>)
 8001d74:	699b      	ldr	r3, [r3, #24]
 8001d76:	f003 0301 	and.w	r3, r3, #1
 8001d7a:	60bb      	str	r3, [r7, #8]
 8001d7c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001d7e:	4b0f      	ldr	r3, [pc, #60]	@ (8001dbc <HAL_MspInit+0x5c>)
 8001d80:	69db      	ldr	r3, [r3, #28]
 8001d82:	4a0e      	ldr	r2, [pc, #56]	@ (8001dbc <HAL_MspInit+0x5c>)
 8001d84:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001d88:	61d3      	str	r3, [r2, #28]
 8001d8a:	4b0c      	ldr	r3, [pc, #48]	@ (8001dbc <HAL_MspInit+0x5c>)
 8001d8c:	69db      	ldr	r3, [r3, #28]
 8001d8e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001d92:	607b      	str	r3, [r7, #4]
 8001d94:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001d96:	4b0a      	ldr	r3, [pc, #40]	@ (8001dc0 <HAL_MspInit+0x60>)
 8001d98:	685b      	ldr	r3, [r3, #4]
 8001d9a:	60fb      	str	r3, [r7, #12]
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8001da2:	60fb      	str	r3, [r7, #12]
 8001da4:	68fb      	ldr	r3, [r7, #12]
 8001da6:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001daa:	60fb      	str	r3, [r7, #12]
 8001dac:	4a04      	ldr	r2, [pc, #16]	@ (8001dc0 <HAL_MspInit+0x60>)
 8001dae:	68fb      	ldr	r3, [r7, #12]
 8001db0:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001db2:	bf00      	nop
 8001db4:	3714      	adds	r7, #20
 8001db6:	46bd      	mov	sp, r7
 8001db8:	bc80      	pop	{r7}
 8001dba:	4770      	bx	lr
 8001dbc:	40021000 	.word	0x40021000
 8001dc0:	40010000 	.word	0x40010000

08001dc4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001dc4:	b580      	push	{r7, lr}
 8001dc6:	b088      	sub	sp, #32
 8001dc8:	af00      	add	r7, sp, #0
 8001dca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001dcc:	f107 0310 	add.w	r3, r7, #16
 8001dd0:	2200      	movs	r2, #0
 8001dd2:	601a      	str	r2, [r3, #0]
 8001dd4:	605a      	str	r2, [r3, #4]
 8001dd6:	609a      	str	r2, [r3, #8]
 8001dd8:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	4a18      	ldr	r2, [pc, #96]	@ (8001e40 <HAL_ADC_MspInit+0x7c>)
 8001de0:	4293      	cmp	r3, r2
 8001de2:	d129      	bne.n	8001e38 <HAL_ADC_MspInit+0x74>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001de4:	4b17      	ldr	r3, [pc, #92]	@ (8001e44 <HAL_ADC_MspInit+0x80>)
 8001de6:	699b      	ldr	r3, [r3, #24]
 8001de8:	4a16      	ldr	r2, [pc, #88]	@ (8001e44 <HAL_ADC_MspInit+0x80>)
 8001dea:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001dee:	6193      	str	r3, [r2, #24]
 8001df0:	4b14      	ldr	r3, [pc, #80]	@ (8001e44 <HAL_ADC_MspInit+0x80>)
 8001df2:	699b      	ldr	r3, [r3, #24]
 8001df4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001df8:	60fb      	str	r3, [r7, #12]
 8001dfa:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001dfc:	4b11      	ldr	r3, [pc, #68]	@ (8001e44 <HAL_ADC_MspInit+0x80>)
 8001dfe:	699b      	ldr	r3, [r3, #24]
 8001e00:	4a10      	ldr	r2, [pc, #64]	@ (8001e44 <HAL_ADC_MspInit+0x80>)
 8001e02:	f043 0304 	orr.w	r3, r3, #4
 8001e06:	6193      	str	r3, [r2, #24]
 8001e08:	4b0e      	ldr	r3, [pc, #56]	@ (8001e44 <HAL_ADC_MspInit+0x80>)
 8001e0a:	699b      	ldr	r3, [r3, #24]
 8001e0c:	f003 0304 	and.w	r3, r3, #4
 8001e10:	60bb      	str	r3, [r7, #8]
 8001e12:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001e14:	2301      	movs	r3, #1
 8001e16:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001e18:	2303      	movs	r3, #3
 8001e1a:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e1c:	f107 0310 	add.w	r3, r7, #16
 8001e20:	4619      	mov	r1, r3
 8001e22:	4809      	ldr	r0, [pc, #36]	@ (8001e48 <HAL_ADC_MspInit+0x84>)
 8001e24:	f000 ff00 	bl	8002c28 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 8001e28:	2200      	movs	r2, #0
 8001e2a:	2100      	movs	r1, #0
 8001e2c:	2012      	movs	r0, #18
 8001e2e:	f000 fec4 	bl	8002bba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8001e32:	2012      	movs	r0, #18
 8001e34:	f000 fedd 	bl	8002bf2 <HAL_NVIC_EnableIRQ>

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 8001e38:	bf00      	nop
 8001e3a:	3720      	adds	r7, #32
 8001e3c:	46bd      	mov	sp, r7
 8001e3e:	bd80      	pop	{r7, pc}
 8001e40:	40012400 	.word	0x40012400
 8001e44:	40021000 	.word	0x40021000
 8001e48:	40010800 	.word	0x40010800

08001e4c <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001e4c:	b480      	push	{r7}
 8001e4e:	b085      	sub	sp, #20
 8001e50:	af00      	add	r7, sp, #0
 8001e52:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	4a09      	ldr	r2, [pc, #36]	@ (8001e80 <HAL_TIM_PWM_MspInit+0x34>)
 8001e5a:	4293      	cmp	r3, r2
 8001e5c:	d10b      	bne.n	8001e76 <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001e5e:	4b09      	ldr	r3, [pc, #36]	@ (8001e84 <HAL_TIM_PWM_MspInit+0x38>)
 8001e60:	699b      	ldr	r3, [r3, #24]
 8001e62:	4a08      	ldr	r2, [pc, #32]	@ (8001e84 <HAL_TIM_PWM_MspInit+0x38>)
 8001e64:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001e68:	6193      	str	r3, [r2, #24]
 8001e6a:	4b06      	ldr	r3, [pc, #24]	@ (8001e84 <HAL_TIM_PWM_MspInit+0x38>)
 8001e6c:	699b      	ldr	r3, [r3, #24]
 8001e6e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001e72:	60fb      	str	r3, [r7, #12]
 8001e74:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM1_MspInit 1 */

  }

}
 8001e76:	bf00      	nop
 8001e78:	3714      	adds	r7, #20
 8001e7a:	46bd      	mov	sp, r7
 8001e7c:	bc80      	pop	{r7}
 8001e7e:	4770      	bx	lr
 8001e80:	40012c00 	.word	0x40012c00
 8001e84:	40021000 	.word	0x40021000

08001e88 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001e88:	b580      	push	{r7, lr}
 8001e8a:	b088      	sub	sp, #32
 8001e8c:	af00      	add	r7, sp, #0
 8001e8e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e90:	f107 0310 	add.w	r3, r7, #16
 8001e94:	2200      	movs	r2, #0
 8001e96:	601a      	str	r2, [r3, #0]
 8001e98:	605a      	str	r2, [r3, #4]
 8001e9a:	609a      	str	r2, [r3, #8]
 8001e9c:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM1)
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	4a10      	ldr	r2, [pc, #64]	@ (8001ee4 <HAL_TIM_MspPostInit+0x5c>)
 8001ea4:	4293      	cmp	r3, r2
 8001ea6:	d118      	bne.n	8001eda <HAL_TIM_MspPostInit+0x52>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ea8:	4b0f      	ldr	r3, [pc, #60]	@ (8001ee8 <HAL_TIM_MspPostInit+0x60>)
 8001eaa:	699b      	ldr	r3, [r3, #24]
 8001eac:	4a0e      	ldr	r2, [pc, #56]	@ (8001ee8 <HAL_TIM_MspPostInit+0x60>)
 8001eae:	f043 0304 	orr.w	r3, r3, #4
 8001eb2:	6193      	str	r3, [r2, #24]
 8001eb4:	4b0c      	ldr	r3, [pc, #48]	@ (8001ee8 <HAL_TIM_MspPostInit+0x60>)
 8001eb6:	699b      	ldr	r3, [r3, #24]
 8001eb8:	f003 0304 	and.w	r3, r3, #4
 8001ebc:	60fb      	str	r3, [r7, #12]
 8001ebe:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001ec0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001ec4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ec6:	2302      	movs	r3, #2
 8001ec8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001eca:	2302      	movs	r3, #2
 8001ecc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ece:	f107 0310 	add.w	r3, r7, #16
 8001ed2:	4619      	mov	r1, r3
 8001ed4:	4805      	ldr	r0, [pc, #20]	@ (8001eec <HAL_TIM_MspPostInit+0x64>)
 8001ed6:	f000 fea7 	bl	8002c28 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8001eda:	bf00      	nop
 8001edc:	3720      	adds	r7, #32
 8001ede:	46bd      	mov	sp, r7
 8001ee0:	bd80      	pop	{r7, pc}
 8001ee2:	bf00      	nop
 8001ee4:	40012c00 	.word	0x40012c00
 8001ee8:	40021000 	.word	0x40021000
 8001eec:	40010800 	.word	0x40010800

08001ef0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001ef0:	b480      	push	{r7}
 8001ef2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001ef4:	bf00      	nop
 8001ef6:	e7fd      	b.n	8001ef4 <NMI_Handler+0x4>

08001ef8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001ef8:	b480      	push	{r7}
 8001efa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001efc:	bf00      	nop
 8001efe:	e7fd      	b.n	8001efc <HardFault_Handler+0x4>

08001f00 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001f00:	b480      	push	{r7}
 8001f02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001f04:	bf00      	nop
 8001f06:	e7fd      	b.n	8001f04 <MemManage_Handler+0x4>

08001f08 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001f08:	b480      	push	{r7}
 8001f0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001f0c:	bf00      	nop
 8001f0e:	e7fd      	b.n	8001f0c <BusFault_Handler+0x4>

08001f10 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001f10:	b480      	push	{r7}
 8001f12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001f14:	bf00      	nop
 8001f16:	e7fd      	b.n	8001f14 <UsageFault_Handler+0x4>

08001f18 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001f18:	b480      	push	{r7}
 8001f1a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001f1c:	bf00      	nop
 8001f1e:	46bd      	mov	sp, r7
 8001f20:	bc80      	pop	{r7}
 8001f22:	4770      	bx	lr

08001f24 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001f24:	b480      	push	{r7}
 8001f26:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001f28:	bf00      	nop
 8001f2a:	46bd      	mov	sp, r7
 8001f2c:	bc80      	pop	{r7}
 8001f2e:	4770      	bx	lr

08001f30 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001f30:	b480      	push	{r7}
 8001f32:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001f34:	bf00      	nop
 8001f36:	46bd      	mov	sp, r7
 8001f38:	bc80      	pop	{r7}
 8001f3a:	4770      	bx	lr

08001f3c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001f3c:	b580      	push	{r7, lr}
 8001f3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001f40:	f000 f94a 	bl	80021d8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001f44:	bf00      	nop
 8001f46:	bd80      	pop	{r7, pc}

08001f48 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 8001f48:	b580      	push	{r7, lr}
 8001f4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8001f4c:	4802      	ldr	r0, [pc, #8]	@ (8001f58 <ADC1_2_IRQHandler+0x10>)
 8001f4e:	f000 faf9 	bl	8002544 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 8001f52:	bf00      	nop
 8001f54:	bd80      	pop	{r7, pc}
 8001f56:	bf00      	nop
 8001f58:	20000374 	.word	0x20000374

08001f5c <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8001f5c:	b580      	push	{r7, lr}
 8001f5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8001f60:	4802      	ldr	r0, [pc, #8]	@ (8001f6c <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 8001f62:	f001 f901 	bl	8003168 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 8001f66:	bf00      	nop
 8001f68:	bd80      	pop	{r7, pc}
 8001f6a:	bf00      	nop
 8001f6c:	200010c4 	.word	0x200010c4

08001f70 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001f70:	b480      	push	{r7}
 8001f72:	af00      	add	r7, sp, #0
  return 1;
 8001f74:	2301      	movs	r3, #1
}
 8001f76:	4618      	mov	r0, r3
 8001f78:	46bd      	mov	sp, r7
 8001f7a:	bc80      	pop	{r7}
 8001f7c:	4770      	bx	lr

08001f7e <_kill>:

int _kill(int pid, int sig)
{
 8001f7e:	b580      	push	{r7, lr}
 8001f80:	b082      	sub	sp, #8
 8001f82:	af00      	add	r7, sp, #0
 8001f84:	6078      	str	r0, [r7, #4]
 8001f86:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001f88:	f00a fcf0 	bl	800c96c <__errno>
 8001f8c:	4603      	mov	r3, r0
 8001f8e:	2216      	movs	r2, #22
 8001f90:	601a      	str	r2, [r3, #0]
  return -1;
 8001f92:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8001f96:	4618      	mov	r0, r3
 8001f98:	3708      	adds	r7, #8
 8001f9a:	46bd      	mov	sp, r7
 8001f9c:	bd80      	pop	{r7, pc}

08001f9e <_exit>:

void _exit (int status)
{
 8001f9e:	b580      	push	{r7, lr}
 8001fa0:	b082      	sub	sp, #8
 8001fa2:	af00      	add	r7, sp, #0
 8001fa4:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001fa6:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001faa:	6878      	ldr	r0, [r7, #4]
 8001fac:	f7ff ffe7 	bl	8001f7e <_kill>
  while (1) {}    /* Make sure we hang here */
 8001fb0:	bf00      	nop
 8001fb2:	e7fd      	b.n	8001fb0 <_exit+0x12>

08001fb4 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001fb4:	b580      	push	{r7, lr}
 8001fb6:	b086      	sub	sp, #24
 8001fb8:	af00      	add	r7, sp, #0
 8001fba:	60f8      	str	r0, [r7, #12]
 8001fbc:	60b9      	str	r1, [r7, #8]
 8001fbe:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001fc0:	2300      	movs	r3, #0
 8001fc2:	617b      	str	r3, [r7, #20]
 8001fc4:	e00a      	b.n	8001fdc <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001fc6:	f3af 8000 	nop.w
 8001fca:	4601      	mov	r1, r0
 8001fcc:	68bb      	ldr	r3, [r7, #8]
 8001fce:	1c5a      	adds	r2, r3, #1
 8001fd0:	60ba      	str	r2, [r7, #8]
 8001fd2:	b2ca      	uxtb	r2, r1
 8001fd4:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001fd6:	697b      	ldr	r3, [r7, #20]
 8001fd8:	3301      	adds	r3, #1
 8001fda:	617b      	str	r3, [r7, #20]
 8001fdc:	697a      	ldr	r2, [r7, #20]
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	429a      	cmp	r2, r3
 8001fe2:	dbf0      	blt.n	8001fc6 <_read+0x12>
  }

  return len;
 8001fe4:	687b      	ldr	r3, [r7, #4]
}
 8001fe6:	4618      	mov	r0, r3
 8001fe8:	3718      	adds	r7, #24
 8001fea:	46bd      	mov	sp, r7
 8001fec:	bd80      	pop	{r7, pc}

08001fee <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001fee:	b580      	push	{r7, lr}
 8001ff0:	b086      	sub	sp, #24
 8001ff2:	af00      	add	r7, sp, #0
 8001ff4:	60f8      	str	r0, [r7, #12]
 8001ff6:	60b9      	str	r1, [r7, #8]
 8001ff8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ffa:	2300      	movs	r3, #0
 8001ffc:	617b      	str	r3, [r7, #20]
 8001ffe:	e009      	b.n	8002014 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002000:	68bb      	ldr	r3, [r7, #8]
 8002002:	1c5a      	adds	r2, r3, #1
 8002004:	60ba      	str	r2, [r7, #8]
 8002006:	781b      	ldrb	r3, [r3, #0]
 8002008:	4618      	mov	r0, r3
 800200a:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800200e:	697b      	ldr	r3, [r7, #20]
 8002010:	3301      	adds	r3, #1
 8002012:	617b      	str	r3, [r7, #20]
 8002014:	697a      	ldr	r2, [r7, #20]
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	429a      	cmp	r2, r3
 800201a:	dbf1      	blt.n	8002000 <_write+0x12>
  }
  return len;
 800201c:	687b      	ldr	r3, [r7, #4]
}
 800201e:	4618      	mov	r0, r3
 8002020:	3718      	adds	r7, #24
 8002022:	46bd      	mov	sp, r7
 8002024:	bd80      	pop	{r7, pc}

08002026 <_close>:

int _close(int file)
{
 8002026:	b480      	push	{r7}
 8002028:	b083      	sub	sp, #12
 800202a:	af00      	add	r7, sp, #0
 800202c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800202e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8002032:	4618      	mov	r0, r3
 8002034:	370c      	adds	r7, #12
 8002036:	46bd      	mov	sp, r7
 8002038:	bc80      	pop	{r7}
 800203a:	4770      	bx	lr

0800203c <_fstat>:


int _fstat(int file, struct stat *st)
{
 800203c:	b480      	push	{r7}
 800203e:	b083      	sub	sp, #12
 8002040:	af00      	add	r7, sp, #0
 8002042:	6078      	str	r0, [r7, #4]
 8002044:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002046:	683b      	ldr	r3, [r7, #0]
 8002048:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800204c:	605a      	str	r2, [r3, #4]
  return 0;
 800204e:	2300      	movs	r3, #0
}
 8002050:	4618      	mov	r0, r3
 8002052:	370c      	adds	r7, #12
 8002054:	46bd      	mov	sp, r7
 8002056:	bc80      	pop	{r7}
 8002058:	4770      	bx	lr

0800205a <_isatty>:

int _isatty(int file)
{
 800205a:	b480      	push	{r7}
 800205c:	b083      	sub	sp, #12
 800205e:	af00      	add	r7, sp, #0
 8002060:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002062:	2301      	movs	r3, #1
}
 8002064:	4618      	mov	r0, r3
 8002066:	370c      	adds	r7, #12
 8002068:	46bd      	mov	sp, r7
 800206a:	bc80      	pop	{r7}
 800206c:	4770      	bx	lr

0800206e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800206e:	b480      	push	{r7}
 8002070:	b085      	sub	sp, #20
 8002072:	af00      	add	r7, sp, #0
 8002074:	60f8      	str	r0, [r7, #12]
 8002076:	60b9      	str	r1, [r7, #8]
 8002078:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800207a:	2300      	movs	r3, #0
}
 800207c:	4618      	mov	r0, r3
 800207e:	3714      	adds	r7, #20
 8002080:	46bd      	mov	sp, r7
 8002082:	bc80      	pop	{r7}
 8002084:	4770      	bx	lr
	...

08002088 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002088:	b580      	push	{r7, lr}
 800208a:	b086      	sub	sp, #24
 800208c:	af00      	add	r7, sp, #0
 800208e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002090:	4a14      	ldr	r2, [pc, #80]	@ (80020e4 <_sbrk+0x5c>)
 8002092:	4b15      	ldr	r3, [pc, #84]	@ (80020e8 <_sbrk+0x60>)
 8002094:	1ad3      	subs	r3, r2, r3
 8002096:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002098:	697b      	ldr	r3, [r7, #20]
 800209a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800209c:	4b13      	ldr	r3, [pc, #76]	@ (80020ec <_sbrk+0x64>)
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	d102      	bne.n	80020aa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80020a4:	4b11      	ldr	r3, [pc, #68]	@ (80020ec <_sbrk+0x64>)
 80020a6:	4a12      	ldr	r2, [pc, #72]	@ (80020f0 <_sbrk+0x68>)
 80020a8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80020aa:	4b10      	ldr	r3, [pc, #64]	@ (80020ec <_sbrk+0x64>)
 80020ac:	681a      	ldr	r2, [r3, #0]
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	4413      	add	r3, r2
 80020b2:	693a      	ldr	r2, [r7, #16]
 80020b4:	429a      	cmp	r2, r3
 80020b6:	d207      	bcs.n	80020c8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80020b8:	f00a fc58 	bl	800c96c <__errno>
 80020bc:	4603      	mov	r3, r0
 80020be:	220c      	movs	r2, #12
 80020c0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80020c2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80020c6:	e009      	b.n	80020dc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80020c8:	4b08      	ldr	r3, [pc, #32]	@ (80020ec <_sbrk+0x64>)
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80020ce:	4b07      	ldr	r3, [pc, #28]	@ (80020ec <_sbrk+0x64>)
 80020d0:	681a      	ldr	r2, [r3, #0]
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	4413      	add	r3, r2
 80020d6:	4a05      	ldr	r2, [pc, #20]	@ (80020ec <_sbrk+0x64>)
 80020d8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80020da:	68fb      	ldr	r3, [r7, #12]
}
 80020dc:	4618      	mov	r0, r3
 80020de:	3718      	adds	r7, #24
 80020e0:	46bd      	mov	sp, r7
 80020e2:	bd80      	pop	{r7, pc}
 80020e4:	20005000 	.word	0x20005000
 80020e8:	00000400 	.word	0x00000400
 80020ec:	200003f4 	.word	0x200003f4
 80020f0:	20001708 	.word	0x20001708

080020f4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80020f4:	b480      	push	{r7}
 80020f6:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80020f8:	bf00      	nop
 80020fa:	46bd      	mov	sp, r7
 80020fc:	bc80      	pop	{r7}
 80020fe:	4770      	bx	lr

08002100 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002100:	f7ff fff8 	bl	80020f4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002104:	480b      	ldr	r0, [pc, #44]	@ (8002134 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8002106:	490c      	ldr	r1, [pc, #48]	@ (8002138 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8002108:	4a0c      	ldr	r2, [pc, #48]	@ (800213c <LoopFillZerobss+0x16>)
  movs r3, #0
 800210a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800210c:	e002      	b.n	8002114 <LoopCopyDataInit>

0800210e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800210e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002110:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002112:	3304      	adds	r3, #4

08002114 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002114:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002116:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002118:	d3f9      	bcc.n	800210e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800211a:	4a09      	ldr	r2, [pc, #36]	@ (8002140 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 800211c:	4c09      	ldr	r4, [pc, #36]	@ (8002144 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800211e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002120:	e001      	b.n	8002126 <LoopFillZerobss>

08002122 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002122:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002124:	3204      	adds	r2, #4

08002126 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002126:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002128:	d3fb      	bcc.n	8002122 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800212a:	f00a fc25 	bl	800c978 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800212e:	f7ff f8af 	bl	8001290 <main>
  bx lr
 8002132:	4770      	bx	lr
  ldr r0, =_sdata
 8002134:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002138:	20000358 	.word	0x20000358
  ldr r2, =_sidata
 800213c:	0800fa48 	.word	0x0800fa48
  ldr r2, =_sbss
 8002140:	20000358 	.word	0x20000358
  ldr r4, =_ebss
 8002144:	20001708 	.word	0x20001708

08002148 <CAN1_RX1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002148:	e7fe      	b.n	8002148 <CAN1_RX1_IRQHandler>
	...

0800214c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800214c:	b580      	push	{r7, lr}
 800214e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002150:	4b08      	ldr	r3, [pc, #32]	@ (8002174 <HAL_Init+0x28>)
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	4a07      	ldr	r2, [pc, #28]	@ (8002174 <HAL_Init+0x28>)
 8002156:	f043 0310 	orr.w	r3, r3, #16
 800215a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800215c:	2003      	movs	r0, #3
 800215e:	f000 fd21 	bl	8002ba4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002162:	200f      	movs	r0, #15
 8002164:	f000 f808 	bl	8002178 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002168:	f7ff fdfa 	bl	8001d60 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800216c:	2300      	movs	r3, #0
}
 800216e:	4618      	mov	r0, r3
 8002170:	bd80      	pop	{r7, pc}
 8002172:	bf00      	nop
 8002174:	40022000 	.word	0x40022000

08002178 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002178:	b580      	push	{r7, lr}
 800217a:	b082      	sub	sp, #8
 800217c:	af00      	add	r7, sp, #0
 800217e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002180:	4b12      	ldr	r3, [pc, #72]	@ (80021cc <HAL_InitTick+0x54>)
 8002182:	681a      	ldr	r2, [r3, #0]
 8002184:	4b12      	ldr	r3, [pc, #72]	@ (80021d0 <HAL_InitTick+0x58>)
 8002186:	781b      	ldrb	r3, [r3, #0]
 8002188:	4619      	mov	r1, r3
 800218a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800218e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002192:	fbb2 f3f3 	udiv	r3, r2, r3
 8002196:	4618      	mov	r0, r3
 8002198:	f000 fd39 	bl	8002c0e <HAL_SYSTICK_Config>
 800219c:	4603      	mov	r3, r0
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d001      	beq.n	80021a6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80021a2:	2301      	movs	r3, #1
 80021a4:	e00e      	b.n	80021c4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	2b0f      	cmp	r3, #15
 80021aa:	d80a      	bhi.n	80021c2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80021ac:	2200      	movs	r2, #0
 80021ae:	6879      	ldr	r1, [r7, #4]
 80021b0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80021b4:	f000 fd01 	bl	8002bba <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80021b8:	4a06      	ldr	r2, [pc, #24]	@ (80021d4 <HAL_InitTick+0x5c>)
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80021be:	2300      	movs	r3, #0
 80021c0:	e000      	b.n	80021c4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80021c2:	2301      	movs	r3, #1
}
 80021c4:	4618      	mov	r0, r3
 80021c6:	3708      	adds	r7, #8
 80021c8:	46bd      	mov	sp, r7
 80021ca:	bd80      	pop	{r7, pc}
 80021cc:	20000000 	.word	0x20000000
 80021d0:	20000008 	.word	0x20000008
 80021d4:	20000004 	.word	0x20000004

080021d8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80021d8:	b480      	push	{r7}
 80021da:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80021dc:	4b05      	ldr	r3, [pc, #20]	@ (80021f4 <HAL_IncTick+0x1c>)
 80021de:	781b      	ldrb	r3, [r3, #0]
 80021e0:	461a      	mov	r2, r3
 80021e2:	4b05      	ldr	r3, [pc, #20]	@ (80021f8 <HAL_IncTick+0x20>)
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	4413      	add	r3, r2
 80021e8:	4a03      	ldr	r2, [pc, #12]	@ (80021f8 <HAL_IncTick+0x20>)
 80021ea:	6013      	str	r3, [r2, #0]
}
 80021ec:	bf00      	nop
 80021ee:	46bd      	mov	sp, r7
 80021f0:	bc80      	pop	{r7}
 80021f2:	4770      	bx	lr
 80021f4:	20000008 	.word	0x20000008
 80021f8:	200003f8 	.word	0x200003f8

080021fc <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80021fc:	b480      	push	{r7}
 80021fe:	af00      	add	r7, sp, #0
  return uwTick;
 8002200:	4b02      	ldr	r3, [pc, #8]	@ (800220c <HAL_GetTick+0x10>)
 8002202:	681b      	ldr	r3, [r3, #0]
}
 8002204:	4618      	mov	r0, r3
 8002206:	46bd      	mov	sp, r7
 8002208:	bc80      	pop	{r7}
 800220a:	4770      	bx	lr
 800220c:	200003f8 	.word	0x200003f8

08002210 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002210:	b580      	push	{r7, lr}
 8002212:	b086      	sub	sp, #24
 8002214:	af00      	add	r7, sp, #0
 8002216:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002218:	2300      	movs	r3, #0
 800221a:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 800221c:	2300      	movs	r3, #0
 800221e:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8002220:	2300      	movs	r3, #0
 8002222:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8002224:	2300      	movs	r3, #0
 8002226:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	2b00      	cmp	r3, #0
 800222c:	d101      	bne.n	8002232 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 800222e:	2301      	movs	r3, #1
 8002230:	e0be      	b.n	80023b0 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	689b      	ldr	r3, [r3, #8]
 8002236:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800223c:	2b00      	cmp	r3, #0
 800223e:	d109      	bne.n	8002254 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	2200      	movs	r2, #0
 8002244:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	2200      	movs	r2, #0
 800224a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800224e:	6878      	ldr	r0, [r7, #4]
 8002250:	f7ff fdb8 	bl	8001dc4 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8002254:	6878      	ldr	r0, [r7, #4]
 8002256:	f000 fb8f 	bl	8002978 <ADC_ConversionStop_Disable>
 800225a:	4603      	mov	r3, r0
 800225c:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002262:	f003 0310 	and.w	r3, r3, #16
 8002266:	2b00      	cmp	r3, #0
 8002268:	f040 8099 	bne.w	800239e <HAL_ADC_Init+0x18e>
 800226c:	7dfb      	ldrb	r3, [r7, #23]
 800226e:	2b00      	cmp	r3, #0
 8002270:	f040 8095 	bne.w	800239e <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002278:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 800227c:	f023 0302 	bic.w	r3, r3, #2
 8002280:	f043 0202 	orr.w	r2, r3, #2
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	629a      	str	r2, [r3, #40]	@ 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002290:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	7b1b      	ldrb	r3, [r3, #12]
 8002296:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8002298:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800229a:	68ba      	ldr	r2, [r7, #8]
 800229c:	4313      	orrs	r3, r2
 800229e:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	689b      	ldr	r3, [r3, #8]
 80022a4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80022a8:	d003      	beq.n	80022b2 <HAL_ADC_Init+0xa2>
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	689b      	ldr	r3, [r3, #8]
 80022ae:	2b01      	cmp	r3, #1
 80022b0:	d102      	bne.n	80022b8 <HAL_ADC_Init+0xa8>
 80022b2:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80022b6:	e000      	b.n	80022ba <HAL_ADC_Init+0xaa>
 80022b8:	2300      	movs	r3, #0
 80022ba:	693a      	ldr	r2, [r7, #16]
 80022bc:	4313      	orrs	r3, r2
 80022be:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	7d1b      	ldrb	r3, [r3, #20]
 80022c4:	2b01      	cmp	r3, #1
 80022c6:	d119      	bne.n	80022fc <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	7b1b      	ldrb	r3, [r3, #12]
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d109      	bne.n	80022e4 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	699b      	ldr	r3, [r3, #24]
 80022d4:	3b01      	subs	r3, #1
 80022d6:	035a      	lsls	r2, r3, #13
 80022d8:	693b      	ldr	r3, [r7, #16]
 80022da:	4313      	orrs	r3, r2
 80022dc:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80022e0:	613b      	str	r3, [r7, #16]
 80022e2:	e00b      	b.n	80022fc <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80022e8:	f043 0220 	orr.w	r2, r3, #32
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	629a      	str	r2, [r3, #40]	@ 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80022f4:	f043 0201 	orr.w	r2, r3, #1
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	62da      	str	r2, [r3, #44]	@ 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	685b      	ldr	r3, [r3, #4]
 8002302:	f423 4169 	bic.w	r1, r3, #59648	@ 0xe900
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	693a      	ldr	r2, [r7, #16]
 800230c:	430a      	orrs	r2, r1
 800230e:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	689a      	ldr	r2, [r3, #8]
 8002316:	4b28      	ldr	r3, [pc, #160]	@ (80023b8 <HAL_ADC_Init+0x1a8>)
 8002318:	4013      	ands	r3, r2
 800231a:	687a      	ldr	r2, [r7, #4]
 800231c:	6812      	ldr	r2, [r2, #0]
 800231e:	68b9      	ldr	r1, [r7, #8]
 8002320:	430b      	orrs	r3, r1
 8002322:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	689b      	ldr	r3, [r3, #8]
 8002328:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800232c:	d003      	beq.n	8002336 <HAL_ADC_Init+0x126>
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	689b      	ldr	r3, [r3, #8]
 8002332:	2b01      	cmp	r3, #1
 8002334:	d104      	bne.n	8002340 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	691b      	ldr	r3, [r3, #16]
 800233a:	3b01      	subs	r3, #1
 800233c:	051b      	lsls	r3, r3, #20
 800233e:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002346:	f423 0170 	bic.w	r1, r3, #15728640	@ 0xf00000
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	68fa      	ldr	r2, [r7, #12]
 8002350:	430a      	orrs	r2, r1
 8002352:	62da      	str	r2, [r3, #44]	@ 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	689a      	ldr	r2, [r3, #8]
 800235a:	4b18      	ldr	r3, [pc, #96]	@ (80023bc <HAL_ADC_Init+0x1ac>)
 800235c:	4013      	ands	r3, r2
 800235e:	68ba      	ldr	r2, [r7, #8]
 8002360:	429a      	cmp	r2, r3
 8002362:	d10b      	bne.n	800237c <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	2200      	movs	r2, #0
 8002368:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800236e:	f023 0303 	bic.w	r3, r3, #3
 8002372:	f043 0201 	orr.w	r2, r3, #1
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	629a      	str	r2, [r3, #40]	@ 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800237a:	e018      	b.n	80023ae <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002380:	f023 0312 	bic.w	r3, r3, #18
 8002384:	f043 0210 	orr.w	r2, r3, #16
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	629a      	str	r2, [r3, #40]	@ 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002390:	f043 0201 	orr.w	r2, r3, #1
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8002398:	2301      	movs	r3, #1
 800239a:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800239c:	e007      	b.n	80023ae <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80023a2:	f043 0210 	orr.w	r2, r3, #16
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	629a      	str	r2, [r3, #40]	@ 0x28
        
    tmp_hal_status = HAL_ERROR;
 80023aa:	2301      	movs	r3, #1
 80023ac:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80023ae:	7dfb      	ldrb	r3, [r7, #23]
}
 80023b0:	4618      	mov	r0, r3
 80023b2:	3718      	adds	r7, #24
 80023b4:	46bd      	mov	sp, r7
 80023b6:	bd80      	pop	{r7, pc}
 80023b8:	ffe1f7fd 	.word	0xffe1f7fd
 80023bc:	ff1f0efe 	.word	0xff1f0efe

080023c0 <HAL_ADC_Start_IT>:
  *         Each of these interruptions has its dedicated callback function.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef* hadc)
{
 80023c0:	b580      	push	{r7, lr}
 80023c2:	b084      	sub	sp, #16
 80023c4:	af00      	add	r7, sp, #0
 80023c6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80023c8:	2300      	movs	r3, #0
 80023ca:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80023d2:	2b01      	cmp	r3, #1
 80023d4:	d101      	bne.n	80023da <HAL_ADC_Start_IT+0x1a>
 80023d6:	2302      	movs	r3, #2
 80023d8:	e0a0      	b.n	800251c <HAL_ADC_Start_IT+0x15c>
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	2201      	movs	r2, #1
 80023de:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 80023e2:	6878      	ldr	r0, [r7, #4]
 80023e4:	f000 fa6e 	bl	80028c4 <ADC_Enable>
 80023e8:	4603      	mov	r3, r0
 80023ea:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 80023ec:	7bfb      	ldrb	r3, [r7, #15]
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	f040 808f 	bne.w	8002512 <HAL_ADC_Start_IT+0x152>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80023f8:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80023fc:	f023 0301 	bic.w	r3, r3, #1
 8002400:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	629a      	str	r2, [r3, #40]	@ 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	4a45      	ldr	r2, [pc, #276]	@ (8002524 <HAL_ADC_Start_IT+0x164>)
 800240e:	4293      	cmp	r3, r2
 8002410:	d105      	bne.n	800241e <HAL_ADC_Start_IT+0x5e>
 8002412:	4b45      	ldr	r3, [pc, #276]	@ (8002528 <HAL_ADC_Start_IT+0x168>)
 8002414:	685b      	ldr	r3, [r3, #4]
 8002416:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
 800241a:	2b00      	cmp	r3, #0
 800241c:	d115      	bne.n	800244a <HAL_ADC_Start_IT+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002422:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	685b      	ldr	r3, [r3, #4]
 8002430:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002434:	2b00      	cmp	r3, #0
 8002436:	d026      	beq.n	8002486 <HAL_ADC_Start_IT+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800243c:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8002440:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	629a      	str	r2, [r3, #40]	@ 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002448:	e01d      	b.n	8002486 <HAL_ADC_Start_IT+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800244e:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	4a33      	ldr	r2, [pc, #204]	@ (8002528 <HAL_ADC_Start_IT+0x168>)
 800245c:	4293      	cmp	r3, r2
 800245e:	d004      	beq.n	800246a <HAL_ADC_Start_IT+0xaa>
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	4a2f      	ldr	r2, [pc, #188]	@ (8002524 <HAL_ADC_Start_IT+0x164>)
 8002466:	4293      	cmp	r3, r2
 8002468:	d10d      	bne.n	8002486 <HAL_ADC_Start_IT+0xc6>
 800246a:	4b2f      	ldr	r3, [pc, #188]	@ (8002528 <HAL_ADC_Start_IT+0x168>)
 800246c:	685b      	ldr	r3, [r3, #4]
 800246e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002472:	2b00      	cmp	r3, #0
 8002474:	d007      	beq.n	8002486 <HAL_ADC_Start_IT+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800247a:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 800247e:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	629a      	str	r2, [r3, #40]	@ 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800248a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800248e:	2b00      	cmp	r3, #0
 8002490:	d006      	beq.n	80024a0 <HAL_ADC_Start_IT+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002496:	f023 0206 	bic.w	r2, r3, #6
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	62da      	str	r2, [r3, #44]	@ 0x2c
 800249e:	e002      	b.n	80024a6 <HAL_ADC_Start_IT+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	2200      	movs	r2, #0
 80024a4:	62da      	str	r2, [r3, #44]	@ 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	2200      	movs	r2, #0
 80024aa:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	f06f 0202 	mvn.w	r2, #2
 80024b6:	601a      	str	r2, [r3, #0]
    
    /* Enable end of conversion interrupt for regular group */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOC);
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	685a      	ldr	r2, [r3, #4]
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	f042 0220 	orr.w	r2, r2, #32
 80024c6:	605a      	str	r2, [r3, #4]
    /* If external trigger has been selected, conversion will start at next   */
    /* trigger event.                                                         */
    /* Case of multimode enabled:                                             */ 
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	689b      	ldr	r3, [r3, #8]
 80024ce:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 80024d2:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 80024d6:	d113      	bne.n	8002500 <HAL_ADC_Start_IT+0x140>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 80024dc:	4a11      	ldr	r2, [pc, #68]	@ (8002524 <HAL_ADC_Start_IT+0x164>)
 80024de:	4293      	cmp	r3, r2
 80024e0:	d105      	bne.n	80024ee <HAL_ADC_Start_IT+0x12e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 80024e2:	4b11      	ldr	r3, [pc, #68]	@ (8002528 <HAL_ADC_Start_IT+0x168>)
 80024e4:	685b      	ldr	r3, [r3, #4]
 80024e6:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d108      	bne.n	8002500 <HAL_ADC_Start_IT+0x140>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	689a      	ldr	r2, [r3, #8]
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	f442 02a0 	orr.w	r2, r2, #5242880	@ 0x500000
 80024fc:	609a      	str	r2, [r3, #8]
 80024fe:	e00c      	b.n	800251a <HAL_ADC_Start_IT+0x15a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	689a      	ldr	r2, [r3, #8]
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 800250e:	609a      	str	r2, [r3, #8]
 8002510:	e003      	b.n	800251a <HAL_ADC_Start_IT+0x15a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	2200      	movs	r2, #0
 8002516:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  }
  
  /* Return function status */
  return tmp_hal_status;
 800251a:	7bfb      	ldrb	r3, [r7, #15]
}
 800251c:	4618      	mov	r0, r3
 800251e:	3710      	adds	r7, #16
 8002520:	46bd      	mov	sp, r7
 8002522:	bd80      	pop	{r7, pc}
 8002524:	40012800 	.word	0x40012800
 8002528:	40012400 	.word	0x40012400

0800252c <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 800252c:	b480      	push	{r7}
 800252e:	b083      	sub	sp, #12
 8002530:	af00      	add	r7, sp, #0
 8002532:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 800253a:	4618      	mov	r0, r3
 800253c:	370c      	adds	r7, #12
 800253e:	46bd      	mov	sp, r7
 8002540:	bc80      	pop	{r7}
 8002542:	4770      	bx	lr

08002544 <HAL_ADC_IRQHandler>:
  * @brief  Handles ADC interrupt request  
  * @param  hadc: ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8002544:	b580      	push	{r7, lr}
 8002546:	b084      	sub	sp, #16
 8002548:	af00      	add	r7, sp, #0
 800254a:	6078      	str	r0, [r7, #4]
  uint32_t tmp_sr = hadc->Instance->SR;
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	685b      	ldr	r3, [r3, #4]
 800255a:	60bb      	str	r3, [r7, #8]
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));
  
  
  /* ========== Check End of Conversion flag for regular group ========== */
  if((tmp_cr1 & ADC_IT_EOC) == ADC_IT_EOC)
 800255c:	68bb      	ldr	r3, [r7, #8]
 800255e:	f003 0320 	and.w	r3, r3, #32
 8002562:	2b00      	cmp	r3, #0
 8002564:	d03e      	beq.n	80025e4 <HAL_ADC_IRQHandler+0xa0>
  {
    if((tmp_sr & ADC_FLAG_EOC) == ADC_FLAG_EOC)
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	f003 0302 	and.w	r3, r3, #2
 800256c:	2b00      	cmp	r3, #0
 800256e:	d039      	beq.n	80025e4 <HAL_ADC_IRQHandler+0xa0>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002574:	f003 0310 	and.w	r3, r3, #16
 8002578:	2b00      	cmp	r3, #0
 800257a:	d105      	bne.n	8002588 <HAL_ADC_IRQHandler+0x44>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002580:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	629a      	str	r2, [r3, #40]	@ 0x28
      /* Determine whether any further conversion upcoming on group regular   */
      /* by external trigger, continuous mode or scan sequence on going.      */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	689b      	ldr	r3, [r3, #8]
 800258e:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 8002592:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 8002596:	d11d      	bne.n	80025d4 <HAL_ADC_IRQHandler+0x90>
         (hadc->Init.ContinuousConvMode == DISABLE)   )
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	7b1b      	ldrb	r3, [r3, #12]
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800259c:	2b00      	cmp	r3, #0
 800259e:	d119      	bne.n	80025d4 <HAL_ADC_IRQHandler+0x90>
      {
        /* Disable ADC end of conversion interrupt on group regular */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	685a      	ldr	r2, [r3, #4]
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	f022 0220 	bic.w	r2, r2, #32
 80025ae:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80025b4:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	629a      	str	r2, [r3, #40]	@ 0x28
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80025c0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d105      	bne.n	80025d4 <HAL_ADC_IRQHandler+0x90>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80025cc:	f043 0201 	orr.w	r2, r3, #1
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 80025d4:	6878      	ldr	r0, [r7, #4]
 80025d6:	f7ff fb67 	bl	8001ca8 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear regular group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	f06f 0212 	mvn.w	r2, #18
 80025e2:	601a      	str	r2, [r3, #0]
    }
  }
  
  /* ========== Check End of Conversion flag for injected group ========== */
  if((tmp_cr1 & ADC_IT_JEOC) == ADC_IT_JEOC)
 80025e4:	68bb      	ldr	r3, [r7, #8]
 80025e6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d04d      	beq.n	800268a <HAL_ADC_IRQHandler+0x146>
  {
    if((tmp_sr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC)
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	f003 0304 	and.w	r3, r3, #4
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d048      	beq.n	800268a <HAL_ADC_IRQHandler+0x146>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80025fc:	f003 0310 	and.w	r3, r3, #16
 8002600:	2b00      	cmp	r3, #0
 8002602:	d105      	bne.n	8002610 <HAL_ADC_IRQHandler+0xcc>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002608:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	629a      	str	r2, [r3, #40]	@ 0x28
      /* conversion from group regular (same conditions as group regular      */
      /* interruption disabling above).                                       */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	689b      	ldr	r3, [r3, #8]
 8002616:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 800261a:	f5b3 4fe0 	cmp.w	r3, #28672	@ 0x7000
 800261e:	d012      	beq.n	8002646 <HAL_ADC_IRQHandler+0x102>
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	685b      	ldr	r3, [r3, #4]
 8002626:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 800262a:	2b00      	cmp	r3, #0
 800262c:	d125      	bne.n	800267a <HAL_ADC_IRQHandler+0x136>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	689b      	ldr	r3, [r3, #8]
 8002634:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 8002638:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 800263c:	d11d      	bne.n	800267a <HAL_ADC_IRQHandler+0x136>
          (hadc->Init.ContinuousConvMode == DISABLE)   )        )   )
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	7b1b      	ldrb	r3, [r3, #12]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8002642:	2b00      	cmp	r3, #0
 8002644:	d119      	bne.n	800267a <HAL_ADC_IRQHandler+0x136>
      {
        /* Disable ADC end of conversion interrupt on group injected */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	685a      	ldr	r2, [r3, #4]
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002654:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800265a:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	629a      	str	r2, [r3, #40]	@ 0x28

        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002666:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800266a:	2b00      	cmp	r3, #0
 800266c:	d105      	bne.n	800267a <HAL_ADC_IRQHandler+0x136>
        { 
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002672:	f043 0201 	orr.w	r2, r3, #1
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 800267a:	6878      	ldr	r0, [r7, #4]
 800267c:	f000 f9bd 	bl	80029fa <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear injected group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	f06f 020c 	mvn.w	r2, #12
 8002688:	601a      	str	r2, [r3, #0]
    }
  }
   
  /* ========== Check Analog watchdog flags ========== */
  if((tmp_cr1 & ADC_IT_AWD) == ADC_IT_AWD)
 800268a:	68bb      	ldr	r3, [r7, #8]
 800268c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002690:	2b00      	cmp	r3, #0
 8002692:	d012      	beq.n	80026ba <HAL_ADC_IRQHandler+0x176>
  {
    if((tmp_sr & ADC_FLAG_AWD) == ADC_FLAG_AWD)
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	f003 0301 	and.w	r3, r3, #1
 800269a:	2b00      	cmp	r3, #0
 800269c:	d00d      	beq.n	80026ba <HAL_ADC_IRQHandler+0x176>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80026a2:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* Level out of window callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 80026aa:	6878      	ldr	r0, [r7, #4]
 80026ac:	f000 f809 	bl	80026c2 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	f06f 0201 	mvn.w	r2, #1
 80026b8:	601a      	str	r2, [r3, #0]
    }
  }
  
}
 80026ba:	bf00      	nop
 80026bc:	3710      	adds	r7, #16
 80026be:	46bd      	mov	sp, r7
 80026c0:	bd80      	pop	{r7, pc}

080026c2 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog callback in non blocking mode. 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 80026c2:	b480      	push	{r7}
 80026c4:	b083      	sub	sp, #12
 80026c6:	af00      	add	r7, sp, #0
 80026c8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 80026ca:	bf00      	nop
 80026cc:	370c      	adds	r7, #12
 80026ce:	46bd      	mov	sp, r7
 80026d0:	bc80      	pop	{r7}
 80026d2:	4770      	bx	lr

080026d4 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 80026d4:	b480      	push	{r7}
 80026d6:	b085      	sub	sp, #20
 80026d8:	af00      	add	r7, sp, #0
 80026da:	6078      	str	r0, [r7, #4]
 80026dc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80026de:	2300      	movs	r3, #0
 80026e0:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 80026e2:	2300      	movs	r3, #0
 80026e4:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80026ec:	2b01      	cmp	r3, #1
 80026ee:	d101      	bne.n	80026f4 <HAL_ADC_ConfigChannel+0x20>
 80026f0:	2302      	movs	r3, #2
 80026f2:	e0dc      	b.n	80028ae <HAL_ADC_ConfigChannel+0x1da>
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	2201      	movs	r2, #1
 80026f8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80026fc:	683b      	ldr	r3, [r7, #0]
 80026fe:	685b      	ldr	r3, [r3, #4]
 8002700:	2b06      	cmp	r3, #6
 8002702:	d81c      	bhi.n	800273e <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800270a:	683b      	ldr	r3, [r7, #0]
 800270c:	685a      	ldr	r2, [r3, #4]
 800270e:	4613      	mov	r3, r2
 8002710:	009b      	lsls	r3, r3, #2
 8002712:	4413      	add	r3, r2
 8002714:	3b05      	subs	r3, #5
 8002716:	221f      	movs	r2, #31
 8002718:	fa02 f303 	lsl.w	r3, r2, r3
 800271c:	43db      	mvns	r3, r3
 800271e:	4019      	ands	r1, r3
 8002720:	683b      	ldr	r3, [r7, #0]
 8002722:	6818      	ldr	r0, [r3, #0]
 8002724:	683b      	ldr	r3, [r7, #0]
 8002726:	685a      	ldr	r2, [r3, #4]
 8002728:	4613      	mov	r3, r2
 800272a:	009b      	lsls	r3, r3, #2
 800272c:	4413      	add	r3, r2
 800272e:	3b05      	subs	r3, #5
 8002730:	fa00 f203 	lsl.w	r2, r0, r3
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	430a      	orrs	r2, r1
 800273a:	635a      	str	r2, [r3, #52]	@ 0x34
 800273c:	e03c      	b.n	80027b8 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800273e:	683b      	ldr	r3, [r7, #0]
 8002740:	685b      	ldr	r3, [r3, #4]
 8002742:	2b0c      	cmp	r3, #12
 8002744:	d81c      	bhi.n	8002780 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800274c:	683b      	ldr	r3, [r7, #0]
 800274e:	685a      	ldr	r2, [r3, #4]
 8002750:	4613      	mov	r3, r2
 8002752:	009b      	lsls	r3, r3, #2
 8002754:	4413      	add	r3, r2
 8002756:	3b23      	subs	r3, #35	@ 0x23
 8002758:	221f      	movs	r2, #31
 800275a:	fa02 f303 	lsl.w	r3, r2, r3
 800275e:	43db      	mvns	r3, r3
 8002760:	4019      	ands	r1, r3
 8002762:	683b      	ldr	r3, [r7, #0]
 8002764:	6818      	ldr	r0, [r3, #0]
 8002766:	683b      	ldr	r3, [r7, #0]
 8002768:	685a      	ldr	r2, [r3, #4]
 800276a:	4613      	mov	r3, r2
 800276c:	009b      	lsls	r3, r3, #2
 800276e:	4413      	add	r3, r2
 8002770:	3b23      	subs	r3, #35	@ 0x23
 8002772:	fa00 f203 	lsl.w	r2, r0, r3
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	430a      	orrs	r2, r1
 800277c:	631a      	str	r2, [r3, #48]	@ 0x30
 800277e:	e01b      	b.n	80027b8 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002786:	683b      	ldr	r3, [r7, #0]
 8002788:	685a      	ldr	r2, [r3, #4]
 800278a:	4613      	mov	r3, r2
 800278c:	009b      	lsls	r3, r3, #2
 800278e:	4413      	add	r3, r2
 8002790:	3b41      	subs	r3, #65	@ 0x41
 8002792:	221f      	movs	r2, #31
 8002794:	fa02 f303 	lsl.w	r3, r2, r3
 8002798:	43db      	mvns	r3, r3
 800279a:	4019      	ands	r1, r3
 800279c:	683b      	ldr	r3, [r7, #0]
 800279e:	6818      	ldr	r0, [r3, #0]
 80027a0:	683b      	ldr	r3, [r7, #0]
 80027a2:	685a      	ldr	r2, [r3, #4]
 80027a4:	4613      	mov	r3, r2
 80027a6:	009b      	lsls	r3, r3, #2
 80027a8:	4413      	add	r3, r2
 80027aa:	3b41      	subs	r3, #65	@ 0x41
 80027ac:	fa00 f203 	lsl.w	r2, r0, r3
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	430a      	orrs	r2, r1
 80027b6:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 80027b8:	683b      	ldr	r3, [r7, #0]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	2b09      	cmp	r3, #9
 80027be:	d91c      	bls.n	80027fa <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	68d9      	ldr	r1, [r3, #12]
 80027c6:	683b      	ldr	r3, [r7, #0]
 80027c8:	681a      	ldr	r2, [r3, #0]
 80027ca:	4613      	mov	r3, r2
 80027cc:	005b      	lsls	r3, r3, #1
 80027ce:	4413      	add	r3, r2
 80027d0:	3b1e      	subs	r3, #30
 80027d2:	2207      	movs	r2, #7
 80027d4:	fa02 f303 	lsl.w	r3, r2, r3
 80027d8:	43db      	mvns	r3, r3
 80027da:	4019      	ands	r1, r3
 80027dc:	683b      	ldr	r3, [r7, #0]
 80027de:	6898      	ldr	r0, [r3, #8]
 80027e0:	683b      	ldr	r3, [r7, #0]
 80027e2:	681a      	ldr	r2, [r3, #0]
 80027e4:	4613      	mov	r3, r2
 80027e6:	005b      	lsls	r3, r3, #1
 80027e8:	4413      	add	r3, r2
 80027ea:	3b1e      	subs	r3, #30
 80027ec:	fa00 f203 	lsl.w	r2, r0, r3
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	430a      	orrs	r2, r1
 80027f6:	60da      	str	r2, [r3, #12]
 80027f8:	e019      	b.n	800282e <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	6919      	ldr	r1, [r3, #16]
 8002800:	683b      	ldr	r3, [r7, #0]
 8002802:	681a      	ldr	r2, [r3, #0]
 8002804:	4613      	mov	r3, r2
 8002806:	005b      	lsls	r3, r3, #1
 8002808:	4413      	add	r3, r2
 800280a:	2207      	movs	r2, #7
 800280c:	fa02 f303 	lsl.w	r3, r2, r3
 8002810:	43db      	mvns	r3, r3
 8002812:	4019      	ands	r1, r3
 8002814:	683b      	ldr	r3, [r7, #0]
 8002816:	6898      	ldr	r0, [r3, #8]
 8002818:	683b      	ldr	r3, [r7, #0]
 800281a:	681a      	ldr	r2, [r3, #0]
 800281c:	4613      	mov	r3, r2
 800281e:	005b      	lsls	r3, r3, #1
 8002820:	4413      	add	r3, r2
 8002822:	fa00 f203 	lsl.w	r2, r0, r3
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	430a      	orrs	r2, r1
 800282c:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800282e:	683b      	ldr	r3, [r7, #0]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	2b10      	cmp	r3, #16
 8002834:	d003      	beq.n	800283e <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8002836:	683b      	ldr	r3, [r7, #0]
 8002838:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800283a:	2b11      	cmp	r3, #17
 800283c:	d132      	bne.n	80028a4 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	4a1d      	ldr	r2, [pc, #116]	@ (80028b8 <HAL_ADC_ConfigChannel+0x1e4>)
 8002844:	4293      	cmp	r3, r2
 8002846:	d125      	bne.n	8002894 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	689b      	ldr	r3, [r3, #8]
 800284e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002852:	2b00      	cmp	r3, #0
 8002854:	d126      	bne.n	80028a4 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	689a      	ldr	r2, [r3, #8]
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 8002864:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002866:	683b      	ldr	r3, [r7, #0]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	2b10      	cmp	r3, #16
 800286c:	d11a      	bne.n	80028a4 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800286e:	4b13      	ldr	r3, [pc, #76]	@ (80028bc <HAL_ADC_ConfigChannel+0x1e8>)
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	4a13      	ldr	r2, [pc, #76]	@ (80028c0 <HAL_ADC_ConfigChannel+0x1ec>)
 8002874:	fba2 2303 	umull	r2, r3, r2, r3
 8002878:	0c9a      	lsrs	r2, r3, #18
 800287a:	4613      	mov	r3, r2
 800287c:	009b      	lsls	r3, r3, #2
 800287e:	4413      	add	r3, r2
 8002880:	005b      	lsls	r3, r3, #1
 8002882:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002884:	e002      	b.n	800288c <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8002886:	68bb      	ldr	r3, [r7, #8]
 8002888:	3b01      	subs	r3, #1
 800288a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800288c:	68bb      	ldr	r3, [r7, #8]
 800288e:	2b00      	cmp	r3, #0
 8002890:	d1f9      	bne.n	8002886 <HAL_ADC_ConfigChannel+0x1b2>
 8002892:	e007      	b.n	80028a4 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002898:	f043 0220 	orr.w	r2, r3, #32
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	629a      	str	r2, [r3, #40]	@ 0x28
      
      tmp_hal_status = HAL_ERROR;
 80028a0:	2301      	movs	r3, #1
 80028a2:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	2200      	movs	r2, #0
 80028a8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 80028ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80028ae:	4618      	mov	r0, r3
 80028b0:	3714      	adds	r7, #20
 80028b2:	46bd      	mov	sp, r7
 80028b4:	bc80      	pop	{r7}
 80028b6:	4770      	bx	lr
 80028b8:	40012400 	.word	0x40012400
 80028bc:	20000000 	.word	0x20000000
 80028c0:	431bde83 	.word	0x431bde83

080028c4 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 80028c4:	b580      	push	{r7, lr}
 80028c6:	b084      	sub	sp, #16
 80028c8:	af00      	add	r7, sp, #0
 80028ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80028cc:	2300      	movs	r3, #0
 80028ce:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 80028d0:	2300      	movs	r3, #0
 80028d2:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	689b      	ldr	r3, [r3, #8]
 80028da:	f003 0301 	and.w	r3, r3, #1
 80028de:	2b01      	cmp	r3, #1
 80028e0:	d040      	beq.n	8002964 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	689a      	ldr	r2, [r3, #8]
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	f042 0201 	orr.w	r2, r2, #1
 80028f0:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80028f2:	4b1f      	ldr	r3, [pc, #124]	@ (8002970 <ADC_Enable+0xac>)
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	4a1f      	ldr	r2, [pc, #124]	@ (8002974 <ADC_Enable+0xb0>)
 80028f8:	fba2 2303 	umull	r2, r3, r2, r3
 80028fc:	0c9b      	lsrs	r3, r3, #18
 80028fe:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8002900:	e002      	b.n	8002908 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8002902:	68bb      	ldr	r3, [r7, #8]
 8002904:	3b01      	subs	r3, #1
 8002906:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8002908:	68bb      	ldr	r3, [r7, #8]
 800290a:	2b00      	cmp	r3, #0
 800290c:	d1f9      	bne.n	8002902 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 800290e:	f7ff fc75 	bl	80021fc <HAL_GetTick>
 8002912:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8002914:	e01f      	b.n	8002956 <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002916:	f7ff fc71 	bl	80021fc <HAL_GetTick>
 800291a:	4602      	mov	r2, r0
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	1ad3      	subs	r3, r2, r3
 8002920:	2b02      	cmp	r3, #2
 8002922:	d918      	bls.n	8002956 <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	689b      	ldr	r3, [r3, #8]
 800292a:	f003 0301 	and.w	r3, r3, #1
 800292e:	2b01      	cmp	r3, #1
 8002930:	d011      	beq.n	8002956 <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002936:	f043 0210 	orr.w	r2, r3, #16
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002942:	f043 0201 	orr.w	r2, r3, #1
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	62da      	str	r2, [r3, #44]	@ 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	2200      	movs	r2, #0
 800294e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

          return HAL_ERROR;
 8002952:	2301      	movs	r3, #1
 8002954:	e007      	b.n	8002966 <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	689b      	ldr	r3, [r3, #8]
 800295c:	f003 0301 	and.w	r3, r3, #1
 8002960:	2b01      	cmp	r3, #1
 8002962:	d1d8      	bne.n	8002916 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8002964:	2300      	movs	r3, #0
}
 8002966:	4618      	mov	r0, r3
 8002968:	3710      	adds	r7, #16
 800296a:	46bd      	mov	sp, r7
 800296c:	bd80      	pop	{r7, pc}
 800296e:	bf00      	nop
 8002970:	20000000 	.word	0x20000000
 8002974:	431bde83 	.word	0x431bde83

08002978 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8002978:	b580      	push	{r7, lr}
 800297a:	b084      	sub	sp, #16
 800297c:	af00      	add	r7, sp, #0
 800297e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002980:	2300      	movs	r3, #0
 8002982:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	689b      	ldr	r3, [r3, #8]
 800298a:	f003 0301 	and.w	r3, r3, #1
 800298e:	2b01      	cmp	r3, #1
 8002990:	d12e      	bne.n	80029f0 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	689a      	ldr	r2, [r3, #8]
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	f022 0201 	bic.w	r2, r2, #1
 80029a0:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 80029a2:	f7ff fc2b 	bl	80021fc <HAL_GetTick>
 80029a6:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 80029a8:	e01b      	b.n	80029e2 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80029aa:	f7ff fc27 	bl	80021fc <HAL_GetTick>
 80029ae:	4602      	mov	r2, r0
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	1ad3      	subs	r3, r2, r3
 80029b4:	2b02      	cmp	r3, #2
 80029b6:	d914      	bls.n	80029e2 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	689b      	ldr	r3, [r3, #8]
 80029be:	f003 0301 	and.w	r3, r3, #1
 80029c2:	2b01      	cmp	r3, #1
 80029c4:	d10d      	bne.n	80029e2 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80029ca:	f043 0210 	orr.w	r2, r3, #16
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80029d6:	f043 0201 	orr.w	r2, r3, #1
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	62da      	str	r2, [r3, #44]	@ 0x2c

          return HAL_ERROR;
 80029de:	2301      	movs	r3, #1
 80029e0:	e007      	b.n	80029f2 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	689b      	ldr	r3, [r3, #8]
 80029e8:	f003 0301 	and.w	r3, r3, #1
 80029ec:	2b01      	cmp	r3, #1
 80029ee:	d0dc      	beq.n	80029aa <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80029f0:	2300      	movs	r3, #0
}
 80029f2:	4618      	mov	r0, r3
 80029f4:	3710      	adds	r7, #16
 80029f6:	46bd      	mov	sp, r7
 80029f8:	bd80      	pop	{r7, pc}

080029fa <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80029fa:	b480      	push	{r7}
 80029fc:	b083      	sub	sp, #12
 80029fe:	af00      	add	r7, sp, #0
 8002a00:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADCEx_InjectedConvCpltCallback could be implemented in the user file
  */
}
 8002a02:	bf00      	nop
 8002a04:	370c      	adds	r7, #12
 8002a06:	46bd      	mov	sp, r7
 8002a08:	bc80      	pop	{r7}
 8002a0a:	4770      	bx	lr

08002a0c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002a0c:	b480      	push	{r7}
 8002a0e:	b085      	sub	sp, #20
 8002a10:	af00      	add	r7, sp, #0
 8002a12:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	f003 0307 	and.w	r3, r3, #7
 8002a1a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002a1c:	4b0c      	ldr	r3, [pc, #48]	@ (8002a50 <__NVIC_SetPriorityGrouping+0x44>)
 8002a1e:	68db      	ldr	r3, [r3, #12]
 8002a20:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002a22:	68ba      	ldr	r2, [r7, #8]
 8002a24:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002a28:	4013      	ands	r3, r2
 8002a2a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002a30:	68bb      	ldr	r3, [r7, #8]
 8002a32:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002a34:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002a38:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002a3c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002a3e:	4a04      	ldr	r2, [pc, #16]	@ (8002a50 <__NVIC_SetPriorityGrouping+0x44>)
 8002a40:	68bb      	ldr	r3, [r7, #8]
 8002a42:	60d3      	str	r3, [r2, #12]
}
 8002a44:	bf00      	nop
 8002a46:	3714      	adds	r7, #20
 8002a48:	46bd      	mov	sp, r7
 8002a4a:	bc80      	pop	{r7}
 8002a4c:	4770      	bx	lr
 8002a4e:	bf00      	nop
 8002a50:	e000ed00 	.word	0xe000ed00

08002a54 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002a54:	b480      	push	{r7}
 8002a56:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002a58:	4b04      	ldr	r3, [pc, #16]	@ (8002a6c <__NVIC_GetPriorityGrouping+0x18>)
 8002a5a:	68db      	ldr	r3, [r3, #12]
 8002a5c:	0a1b      	lsrs	r3, r3, #8
 8002a5e:	f003 0307 	and.w	r3, r3, #7
}
 8002a62:	4618      	mov	r0, r3
 8002a64:	46bd      	mov	sp, r7
 8002a66:	bc80      	pop	{r7}
 8002a68:	4770      	bx	lr
 8002a6a:	bf00      	nop
 8002a6c:	e000ed00 	.word	0xe000ed00

08002a70 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002a70:	b480      	push	{r7}
 8002a72:	b083      	sub	sp, #12
 8002a74:	af00      	add	r7, sp, #0
 8002a76:	4603      	mov	r3, r0
 8002a78:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002a7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	db0b      	blt.n	8002a9a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002a82:	79fb      	ldrb	r3, [r7, #7]
 8002a84:	f003 021f 	and.w	r2, r3, #31
 8002a88:	4906      	ldr	r1, [pc, #24]	@ (8002aa4 <__NVIC_EnableIRQ+0x34>)
 8002a8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a8e:	095b      	lsrs	r3, r3, #5
 8002a90:	2001      	movs	r0, #1
 8002a92:	fa00 f202 	lsl.w	r2, r0, r2
 8002a96:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002a9a:	bf00      	nop
 8002a9c:	370c      	adds	r7, #12
 8002a9e:	46bd      	mov	sp, r7
 8002aa0:	bc80      	pop	{r7}
 8002aa2:	4770      	bx	lr
 8002aa4:	e000e100 	.word	0xe000e100

08002aa8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002aa8:	b480      	push	{r7}
 8002aaa:	b083      	sub	sp, #12
 8002aac:	af00      	add	r7, sp, #0
 8002aae:	4603      	mov	r3, r0
 8002ab0:	6039      	str	r1, [r7, #0]
 8002ab2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002ab4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	db0a      	blt.n	8002ad2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002abc:	683b      	ldr	r3, [r7, #0]
 8002abe:	b2da      	uxtb	r2, r3
 8002ac0:	490c      	ldr	r1, [pc, #48]	@ (8002af4 <__NVIC_SetPriority+0x4c>)
 8002ac2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ac6:	0112      	lsls	r2, r2, #4
 8002ac8:	b2d2      	uxtb	r2, r2
 8002aca:	440b      	add	r3, r1
 8002acc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002ad0:	e00a      	b.n	8002ae8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002ad2:	683b      	ldr	r3, [r7, #0]
 8002ad4:	b2da      	uxtb	r2, r3
 8002ad6:	4908      	ldr	r1, [pc, #32]	@ (8002af8 <__NVIC_SetPriority+0x50>)
 8002ad8:	79fb      	ldrb	r3, [r7, #7]
 8002ada:	f003 030f 	and.w	r3, r3, #15
 8002ade:	3b04      	subs	r3, #4
 8002ae0:	0112      	lsls	r2, r2, #4
 8002ae2:	b2d2      	uxtb	r2, r2
 8002ae4:	440b      	add	r3, r1
 8002ae6:	761a      	strb	r2, [r3, #24]
}
 8002ae8:	bf00      	nop
 8002aea:	370c      	adds	r7, #12
 8002aec:	46bd      	mov	sp, r7
 8002aee:	bc80      	pop	{r7}
 8002af0:	4770      	bx	lr
 8002af2:	bf00      	nop
 8002af4:	e000e100 	.word	0xe000e100
 8002af8:	e000ed00 	.word	0xe000ed00

08002afc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002afc:	b480      	push	{r7}
 8002afe:	b089      	sub	sp, #36	@ 0x24
 8002b00:	af00      	add	r7, sp, #0
 8002b02:	60f8      	str	r0, [r7, #12]
 8002b04:	60b9      	str	r1, [r7, #8]
 8002b06:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	f003 0307 	and.w	r3, r3, #7
 8002b0e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002b10:	69fb      	ldr	r3, [r7, #28]
 8002b12:	f1c3 0307 	rsb	r3, r3, #7
 8002b16:	2b04      	cmp	r3, #4
 8002b18:	bf28      	it	cs
 8002b1a:	2304      	movcs	r3, #4
 8002b1c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002b1e:	69fb      	ldr	r3, [r7, #28]
 8002b20:	3304      	adds	r3, #4
 8002b22:	2b06      	cmp	r3, #6
 8002b24:	d902      	bls.n	8002b2c <NVIC_EncodePriority+0x30>
 8002b26:	69fb      	ldr	r3, [r7, #28]
 8002b28:	3b03      	subs	r3, #3
 8002b2a:	e000      	b.n	8002b2e <NVIC_EncodePriority+0x32>
 8002b2c:	2300      	movs	r3, #0
 8002b2e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002b30:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8002b34:	69bb      	ldr	r3, [r7, #24]
 8002b36:	fa02 f303 	lsl.w	r3, r2, r3
 8002b3a:	43da      	mvns	r2, r3
 8002b3c:	68bb      	ldr	r3, [r7, #8]
 8002b3e:	401a      	ands	r2, r3
 8002b40:	697b      	ldr	r3, [r7, #20]
 8002b42:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002b44:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8002b48:	697b      	ldr	r3, [r7, #20]
 8002b4a:	fa01 f303 	lsl.w	r3, r1, r3
 8002b4e:	43d9      	mvns	r1, r3
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002b54:	4313      	orrs	r3, r2
         );
}
 8002b56:	4618      	mov	r0, r3
 8002b58:	3724      	adds	r7, #36	@ 0x24
 8002b5a:	46bd      	mov	sp, r7
 8002b5c:	bc80      	pop	{r7}
 8002b5e:	4770      	bx	lr

08002b60 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002b60:	b580      	push	{r7, lr}
 8002b62:	b082      	sub	sp, #8
 8002b64:	af00      	add	r7, sp, #0
 8002b66:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	3b01      	subs	r3, #1
 8002b6c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002b70:	d301      	bcc.n	8002b76 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002b72:	2301      	movs	r3, #1
 8002b74:	e00f      	b.n	8002b96 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002b76:	4a0a      	ldr	r2, [pc, #40]	@ (8002ba0 <SysTick_Config+0x40>)
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	3b01      	subs	r3, #1
 8002b7c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002b7e:	210f      	movs	r1, #15
 8002b80:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8002b84:	f7ff ff90 	bl	8002aa8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002b88:	4b05      	ldr	r3, [pc, #20]	@ (8002ba0 <SysTick_Config+0x40>)
 8002b8a:	2200      	movs	r2, #0
 8002b8c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002b8e:	4b04      	ldr	r3, [pc, #16]	@ (8002ba0 <SysTick_Config+0x40>)
 8002b90:	2207      	movs	r2, #7
 8002b92:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002b94:	2300      	movs	r3, #0
}
 8002b96:	4618      	mov	r0, r3
 8002b98:	3708      	adds	r7, #8
 8002b9a:	46bd      	mov	sp, r7
 8002b9c:	bd80      	pop	{r7, pc}
 8002b9e:	bf00      	nop
 8002ba0:	e000e010 	.word	0xe000e010

08002ba4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002ba4:	b580      	push	{r7, lr}
 8002ba6:	b082      	sub	sp, #8
 8002ba8:	af00      	add	r7, sp, #0
 8002baa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002bac:	6878      	ldr	r0, [r7, #4]
 8002bae:	f7ff ff2d 	bl	8002a0c <__NVIC_SetPriorityGrouping>
}
 8002bb2:	bf00      	nop
 8002bb4:	3708      	adds	r7, #8
 8002bb6:	46bd      	mov	sp, r7
 8002bb8:	bd80      	pop	{r7, pc}

08002bba <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002bba:	b580      	push	{r7, lr}
 8002bbc:	b086      	sub	sp, #24
 8002bbe:	af00      	add	r7, sp, #0
 8002bc0:	4603      	mov	r3, r0
 8002bc2:	60b9      	str	r1, [r7, #8]
 8002bc4:	607a      	str	r2, [r7, #4]
 8002bc6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002bc8:	2300      	movs	r3, #0
 8002bca:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002bcc:	f7ff ff42 	bl	8002a54 <__NVIC_GetPriorityGrouping>
 8002bd0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002bd2:	687a      	ldr	r2, [r7, #4]
 8002bd4:	68b9      	ldr	r1, [r7, #8]
 8002bd6:	6978      	ldr	r0, [r7, #20]
 8002bd8:	f7ff ff90 	bl	8002afc <NVIC_EncodePriority>
 8002bdc:	4602      	mov	r2, r0
 8002bde:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002be2:	4611      	mov	r1, r2
 8002be4:	4618      	mov	r0, r3
 8002be6:	f7ff ff5f 	bl	8002aa8 <__NVIC_SetPriority>
}
 8002bea:	bf00      	nop
 8002bec:	3718      	adds	r7, #24
 8002bee:	46bd      	mov	sp, r7
 8002bf0:	bd80      	pop	{r7, pc}

08002bf2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002bf2:	b580      	push	{r7, lr}
 8002bf4:	b082      	sub	sp, #8
 8002bf6:	af00      	add	r7, sp, #0
 8002bf8:	4603      	mov	r3, r0
 8002bfa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002bfc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c00:	4618      	mov	r0, r3
 8002c02:	f7ff ff35 	bl	8002a70 <__NVIC_EnableIRQ>
}
 8002c06:	bf00      	nop
 8002c08:	3708      	adds	r7, #8
 8002c0a:	46bd      	mov	sp, r7
 8002c0c:	bd80      	pop	{r7, pc}

08002c0e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002c0e:	b580      	push	{r7, lr}
 8002c10:	b082      	sub	sp, #8
 8002c12:	af00      	add	r7, sp, #0
 8002c14:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002c16:	6878      	ldr	r0, [r7, #4]
 8002c18:	f7ff ffa2 	bl	8002b60 <SysTick_Config>
 8002c1c:	4603      	mov	r3, r0
}
 8002c1e:	4618      	mov	r0, r3
 8002c20:	3708      	adds	r7, #8
 8002c22:	46bd      	mov	sp, r7
 8002c24:	bd80      	pop	{r7, pc}
	...

08002c28 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002c28:	b480      	push	{r7}
 8002c2a:	b08b      	sub	sp, #44	@ 0x2c
 8002c2c:	af00      	add	r7, sp, #0
 8002c2e:	6078      	str	r0, [r7, #4]
 8002c30:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002c32:	2300      	movs	r3, #0
 8002c34:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002c36:	2300      	movs	r3, #0
 8002c38:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002c3a:	e169      	b.n	8002f10 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002c3c:	2201      	movs	r2, #1
 8002c3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c40:	fa02 f303 	lsl.w	r3, r2, r3
 8002c44:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002c46:	683b      	ldr	r3, [r7, #0]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	69fa      	ldr	r2, [r7, #28]
 8002c4c:	4013      	ands	r3, r2
 8002c4e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002c50:	69ba      	ldr	r2, [r7, #24]
 8002c52:	69fb      	ldr	r3, [r7, #28]
 8002c54:	429a      	cmp	r2, r3
 8002c56:	f040 8158 	bne.w	8002f0a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002c5a:	683b      	ldr	r3, [r7, #0]
 8002c5c:	685b      	ldr	r3, [r3, #4]
 8002c5e:	4a9a      	ldr	r2, [pc, #616]	@ (8002ec8 <HAL_GPIO_Init+0x2a0>)
 8002c60:	4293      	cmp	r3, r2
 8002c62:	d05e      	beq.n	8002d22 <HAL_GPIO_Init+0xfa>
 8002c64:	4a98      	ldr	r2, [pc, #608]	@ (8002ec8 <HAL_GPIO_Init+0x2a0>)
 8002c66:	4293      	cmp	r3, r2
 8002c68:	d875      	bhi.n	8002d56 <HAL_GPIO_Init+0x12e>
 8002c6a:	4a98      	ldr	r2, [pc, #608]	@ (8002ecc <HAL_GPIO_Init+0x2a4>)
 8002c6c:	4293      	cmp	r3, r2
 8002c6e:	d058      	beq.n	8002d22 <HAL_GPIO_Init+0xfa>
 8002c70:	4a96      	ldr	r2, [pc, #600]	@ (8002ecc <HAL_GPIO_Init+0x2a4>)
 8002c72:	4293      	cmp	r3, r2
 8002c74:	d86f      	bhi.n	8002d56 <HAL_GPIO_Init+0x12e>
 8002c76:	4a96      	ldr	r2, [pc, #600]	@ (8002ed0 <HAL_GPIO_Init+0x2a8>)
 8002c78:	4293      	cmp	r3, r2
 8002c7a:	d052      	beq.n	8002d22 <HAL_GPIO_Init+0xfa>
 8002c7c:	4a94      	ldr	r2, [pc, #592]	@ (8002ed0 <HAL_GPIO_Init+0x2a8>)
 8002c7e:	4293      	cmp	r3, r2
 8002c80:	d869      	bhi.n	8002d56 <HAL_GPIO_Init+0x12e>
 8002c82:	4a94      	ldr	r2, [pc, #592]	@ (8002ed4 <HAL_GPIO_Init+0x2ac>)
 8002c84:	4293      	cmp	r3, r2
 8002c86:	d04c      	beq.n	8002d22 <HAL_GPIO_Init+0xfa>
 8002c88:	4a92      	ldr	r2, [pc, #584]	@ (8002ed4 <HAL_GPIO_Init+0x2ac>)
 8002c8a:	4293      	cmp	r3, r2
 8002c8c:	d863      	bhi.n	8002d56 <HAL_GPIO_Init+0x12e>
 8002c8e:	4a92      	ldr	r2, [pc, #584]	@ (8002ed8 <HAL_GPIO_Init+0x2b0>)
 8002c90:	4293      	cmp	r3, r2
 8002c92:	d046      	beq.n	8002d22 <HAL_GPIO_Init+0xfa>
 8002c94:	4a90      	ldr	r2, [pc, #576]	@ (8002ed8 <HAL_GPIO_Init+0x2b0>)
 8002c96:	4293      	cmp	r3, r2
 8002c98:	d85d      	bhi.n	8002d56 <HAL_GPIO_Init+0x12e>
 8002c9a:	2b12      	cmp	r3, #18
 8002c9c:	d82a      	bhi.n	8002cf4 <HAL_GPIO_Init+0xcc>
 8002c9e:	2b12      	cmp	r3, #18
 8002ca0:	d859      	bhi.n	8002d56 <HAL_GPIO_Init+0x12e>
 8002ca2:	a201      	add	r2, pc, #4	@ (adr r2, 8002ca8 <HAL_GPIO_Init+0x80>)
 8002ca4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ca8:	08002d23 	.word	0x08002d23
 8002cac:	08002cfd 	.word	0x08002cfd
 8002cb0:	08002d0f 	.word	0x08002d0f
 8002cb4:	08002d51 	.word	0x08002d51
 8002cb8:	08002d57 	.word	0x08002d57
 8002cbc:	08002d57 	.word	0x08002d57
 8002cc0:	08002d57 	.word	0x08002d57
 8002cc4:	08002d57 	.word	0x08002d57
 8002cc8:	08002d57 	.word	0x08002d57
 8002ccc:	08002d57 	.word	0x08002d57
 8002cd0:	08002d57 	.word	0x08002d57
 8002cd4:	08002d57 	.word	0x08002d57
 8002cd8:	08002d57 	.word	0x08002d57
 8002cdc:	08002d57 	.word	0x08002d57
 8002ce0:	08002d57 	.word	0x08002d57
 8002ce4:	08002d57 	.word	0x08002d57
 8002ce8:	08002d57 	.word	0x08002d57
 8002cec:	08002d05 	.word	0x08002d05
 8002cf0:	08002d19 	.word	0x08002d19
 8002cf4:	4a79      	ldr	r2, [pc, #484]	@ (8002edc <HAL_GPIO_Init+0x2b4>)
 8002cf6:	4293      	cmp	r3, r2
 8002cf8:	d013      	beq.n	8002d22 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002cfa:	e02c      	b.n	8002d56 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002cfc:	683b      	ldr	r3, [r7, #0]
 8002cfe:	68db      	ldr	r3, [r3, #12]
 8002d00:	623b      	str	r3, [r7, #32]
          break;
 8002d02:	e029      	b.n	8002d58 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002d04:	683b      	ldr	r3, [r7, #0]
 8002d06:	68db      	ldr	r3, [r3, #12]
 8002d08:	3304      	adds	r3, #4
 8002d0a:	623b      	str	r3, [r7, #32]
          break;
 8002d0c:	e024      	b.n	8002d58 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002d0e:	683b      	ldr	r3, [r7, #0]
 8002d10:	68db      	ldr	r3, [r3, #12]
 8002d12:	3308      	adds	r3, #8
 8002d14:	623b      	str	r3, [r7, #32]
          break;
 8002d16:	e01f      	b.n	8002d58 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002d18:	683b      	ldr	r3, [r7, #0]
 8002d1a:	68db      	ldr	r3, [r3, #12]
 8002d1c:	330c      	adds	r3, #12
 8002d1e:	623b      	str	r3, [r7, #32]
          break;
 8002d20:	e01a      	b.n	8002d58 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002d22:	683b      	ldr	r3, [r7, #0]
 8002d24:	689b      	ldr	r3, [r3, #8]
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d102      	bne.n	8002d30 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002d2a:	2304      	movs	r3, #4
 8002d2c:	623b      	str	r3, [r7, #32]
          break;
 8002d2e:	e013      	b.n	8002d58 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002d30:	683b      	ldr	r3, [r7, #0]
 8002d32:	689b      	ldr	r3, [r3, #8]
 8002d34:	2b01      	cmp	r3, #1
 8002d36:	d105      	bne.n	8002d44 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002d38:	2308      	movs	r3, #8
 8002d3a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	69fa      	ldr	r2, [r7, #28]
 8002d40:	611a      	str	r2, [r3, #16]
          break;
 8002d42:	e009      	b.n	8002d58 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002d44:	2308      	movs	r3, #8
 8002d46:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	69fa      	ldr	r2, [r7, #28]
 8002d4c:	615a      	str	r2, [r3, #20]
          break;
 8002d4e:	e003      	b.n	8002d58 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002d50:	2300      	movs	r3, #0
 8002d52:	623b      	str	r3, [r7, #32]
          break;
 8002d54:	e000      	b.n	8002d58 <HAL_GPIO_Init+0x130>
          break;
 8002d56:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002d58:	69bb      	ldr	r3, [r7, #24]
 8002d5a:	2bff      	cmp	r3, #255	@ 0xff
 8002d5c:	d801      	bhi.n	8002d62 <HAL_GPIO_Init+0x13a>
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	e001      	b.n	8002d66 <HAL_GPIO_Init+0x13e>
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	3304      	adds	r3, #4
 8002d66:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002d68:	69bb      	ldr	r3, [r7, #24]
 8002d6a:	2bff      	cmp	r3, #255	@ 0xff
 8002d6c:	d802      	bhi.n	8002d74 <HAL_GPIO_Init+0x14c>
 8002d6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d70:	009b      	lsls	r3, r3, #2
 8002d72:	e002      	b.n	8002d7a <HAL_GPIO_Init+0x152>
 8002d74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d76:	3b08      	subs	r3, #8
 8002d78:	009b      	lsls	r3, r3, #2
 8002d7a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002d7c:	697b      	ldr	r3, [r7, #20]
 8002d7e:	681a      	ldr	r2, [r3, #0]
 8002d80:	210f      	movs	r1, #15
 8002d82:	693b      	ldr	r3, [r7, #16]
 8002d84:	fa01 f303 	lsl.w	r3, r1, r3
 8002d88:	43db      	mvns	r3, r3
 8002d8a:	401a      	ands	r2, r3
 8002d8c:	6a39      	ldr	r1, [r7, #32]
 8002d8e:	693b      	ldr	r3, [r7, #16]
 8002d90:	fa01 f303 	lsl.w	r3, r1, r3
 8002d94:	431a      	orrs	r2, r3
 8002d96:	697b      	ldr	r3, [r7, #20]
 8002d98:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002d9a:	683b      	ldr	r3, [r7, #0]
 8002d9c:	685b      	ldr	r3, [r3, #4]
 8002d9e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	f000 80b1 	beq.w	8002f0a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002da8:	4b4d      	ldr	r3, [pc, #308]	@ (8002ee0 <HAL_GPIO_Init+0x2b8>)
 8002daa:	699b      	ldr	r3, [r3, #24]
 8002dac:	4a4c      	ldr	r2, [pc, #304]	@ (8002ee0 <HAL_GPIO_Init+0x2b8>)
 8002dae:	f043 0301 	orr.w	r3, r3, #1
 8002db2:	6193      	str	r3, [r2, #24]
 8002db4:	4b4a      	ldr	r3, [pc, #296]	@ (8002ee0 <HAL_GPIO_Init+0x2b8>)
 8002db6:	699b      	ldr	r3, [r3, #24]
 8002db8:	f003 0301 	and.w	r3, r3, #1
 8002dbc:	60bb      	str	r3, [r7, #8]
 8002dbe:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002dc0:	4a48      	ldr	r2, [pc, #288]	@ (8002ee4 <HAL_GPIO_Init+0x2bc>)
 8002dc2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002dc4:	089b      	lsrs	r3, r3, #2
 8002dc6:	3302      	adds	r3, #2
 8002dc8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002dcc:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002dce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002dd0:	f003 0303 	and.w	r3, r3, #3
 8002dd4:	009b      	lsls	r3, r3, #2
 8002dd6:	220f      	movs	r2, #15
 8002dd8:	fa02 f303 	lsl.w	r3, r2, r3
 8002ddc:	43db      	mvns	r3, r3
 8002dde:	68fa      	ldr	r2, [r7, #12]
 8002de0:	4013      	ands	r3, r2
 8002de2:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	4a40      	ldr	r2, [pc, #256]	@ (8002ee8 <HAL_GPIO_Init+0x2c0>)
 8002de8:	4293      	cmp	r3, r2
 8002dea:	d013      	beq.n	8002e14 <HAL_GPIO_Init+0x1ec>
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	4a3f      	ldr	r2, [pc, #252]	@ (8002eec <HAL_GPIO_Init+0x2c4>)
 8002df0:	4293      	cmp	r3, r2
 8002df2:	d00d      	beq.n	8002e10 <HAL_GPIO_Init+0x1e8>
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	4a3e      	ldr	r2, [pc, #248]	@ (8002ef0 <HAL_GPIO_Init+0x2c8>)
 8002df8:	4293      	cmp	r3, r2
 8002dfa:	d007      	beq.n	8002e0c <HAL_GPIO_Init+0x1e4>
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	4a3d      	ldr	r2, [pc, #244]	@ (8002ef4 <HAL_GPIO_Init+0x2cc>)
 8002e00:	4293      	cmp	r3, r2
 8002e02:	d101      	bne.n	8002e08 <HAL_GPIO_Init+0x1e0>
 8002e04:	2303      	movs	r3, #3
 8002e06:	e006      	b.n	8002e16 <HAL_GPIO_Init+0x1ee>
 8002e08:	2304      	movs	r3, #4
 8002e0a:	e004      	b.n	8002e16 <HAL_GPIO_Init+0x1ee>
 8002e0c:	2302      	movs	r3, #2
 8002e0e:	e002      	b.n	8002e16 <HAL_GPIO_Init+0x1ee>
 8002e10:	2301      	movs	r3, #1
 8002e12:	e000      	b.n	8002e16 <HAL_GPIO_Init+0x1ee>
 8002e14:	2300      	movs	r3, #0
 8002e16:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002e18:	f002 0203 	and.w	r2, r2, #3
 8002e1c:	0092      	lsls	r2, r2, #2
 8002e1e:	4093      	lsls	r3, r2
 8002e20:	68fa      	ldr	r2, [r7, #12]
 8002e22:	4313      	orrs	r3, r2
 8002e24:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002e26:	492f      	ldr	r1, [pc, #188]	@ (8002ee4 <HAL_GPIO_Init+0x2bc>)
 8002e28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e2a:	089b      	lsrs	r3, r3, #2
 8002e2c:	3302      	adds	r3, #2
 8002e2e:	68fa      	ldr	r2, [r7, #12]
 8002e30:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002e34:	683b      	ldr	r3, [r7, #0]
 8002e36:	685b      	ldr	r3, [r3, #4]
 8002e38:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d006      	beq.n	8002e4e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002e40:	4b2d      	ldr	r3, [pc, #180]	@ (8002ef8 <HAL_GPIO_Init+0x2d0>)
 8002e42:	689a      	ldr	r2, [r3, #8]
 8002e44:	492c      	ldr	r1, [pc, #176]	@ (8002ef8 <HAL_GPIO_Init+0x2d0>)
 8002e46:	69bb      	ldr	r3, [r7, #24]
 8002e48:	4313      	orrs	r3, r2
 8002e4a:	608b      	str	r3, [r1, #8]
 8002e4c:	e006      	b.n	8002e5c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002e4e:	4b2a      	ldr	r3, [pc, #168]	@ (8002ef8 <HAL_GPIO_Init+0x2d0>)
 8002e50:	689a      	ldr	r2, [r3, #8]
 8002e52:	69bb      	ldr	r3, [r7, #24]
 8002e54:	43db      	mvns	r3, r3
 8002e56:	4928      	ldr	r1, [pc, #160]	@ (8002ef8 <HAL_GPIO_Init+0x2d0>)
 8002e58:	4013      	ands	r3, r2
 8002e5a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002e5c:	683b      	ldr	r3, [r7, #0]
 8002e5e:	685b      	ldr	r3, [r3, #4]
 8002e60:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d006      	beq.n	8002e76 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002e68:	4b23      	ldr	r3, [pc, #140]	@ (8002ef8 <HAL_GPIO_Init+0x2d0>)
 8002e6a:	68da      	ldr	r2, [r3, #12]
 8002e6c:	4922      	ldr	r1, [pc, #136]	@ (8002ef8 <HAL_GPIO_Init+0x2d0>)
 8002e6e:	69bb      	ldr	r3, [r7, #24]
 8002e70:	4313      	orrs	r3, r2
 8002e72:	60cb      	str	r3, [r1, #12]
 8002e74:	e006      	b.n	8002e84 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002e76:	4b20      	ldr	r3, [pc, #128]	@ (8002ef8 <HAL_GPIO_Init+0x2d0>)
 8002e78:	68da      	ldr	r2, [r3, #12]
 8002e7a:	69bb      	ldr	r3, [r7, #24]
 8002e7c:	43db      	mvns	r3, r3
 8002e7e:	491e      	ldr	r1, [pc, #120]	@ (8002ef8 <HAL_GPIO_Init+0x2d0>)
 8002e80:	4013      	ands	r3, r2
 8002e82:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002e84:	683b      	ldr	r3, [r7, #0]
 8002e86:	685b      	ldr	r3, [r3, #4]
 8002e88:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d006      	beq.n	8002e9e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002e90:	4b19      	ldr	r3, [pc, #100]	@ (8002ef8 <HAL_GPIO_Init+0x2d0>)
 8002e92:	685a      	ldr	r2, [r3, #4]
 8002e94:	4918      	ldr	r1, [pc, #96]	@ (8002ef8 <HAL_GPIO_Init+0x2d0>)
 8002e96:	69bb      	ldr	r3, [r7, #24]
 8002e98:	4313      	orrs	r3, r2
 8002e9a:	604b      	str	r3, [r1, #4]
 8002e9c:	e006      	b.n	8002eac <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002e9e:	4b16      	ldr	r3, [pc, #88]	@ (8002ef8 <HAL_GPIO_Init+0x2d0>)
 8002ea0:	685a      	ldr	r2, [r3, #4]
 8002ea2:	69bb      	ldr	r3, [r7, #24]
 8002ea4:	43db      	mvns	r3, r3
 8002ea6:	4914      	ldr	r1, [pc, #80]	@ (8002ef8 <HAL_GPIO_Init+0x2d0>)
 8002ea8:	4013      	ands	r3, r2
 8002eaa:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002eac:	683b      	ldr	r3, [r7, #0]
 8002eae:	685b      	ldr	r3, [r3, #4]
 8002eb0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d021      	beq.n	8002efc <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002eb8:	4b0f      	ldr	r3, [pc, #60]	@ (8002ef8 <HAL_GPIO_Init+0x2d0>)
 8002eba:	681a      	ldr	r2, [r3, #0]
 8002ebc:	490e      	ldr	r1, [pc, #56]	@ (8002ef8 <HAL_GPIO_Init+0x2d0>)
 8002ebe:	69bb      	ldr	r3, [r7, #24]
 8002ec0:	4313      	orrs	r3, r2
 8002ec2:	600b      	str	r3, [r1, #0]
 8002ec4:	e021      	b.n	8002f0a <HAL_GPIO_Init+0x2e2>
 8002ec6:	bf00      	nop
 8002ec8:	10320000 	.word	0x10320000
 8002ecc:	10310000 	.word	0x10310000
 8002ed0:	10220000 	.word	0x10220000
 8002ed4:	10210000 	.word	0x10210000
 8002ed8:	10120000 	.word	0x10120000
 8002edc:	10110000 	.word	0x10110000
 8002ee0:	40021000 	.word	0x40021000
 8002ee4:	40010000 	.word	0x40010000
 8002ee8:	40010800 	.word	0x40010800
 8002eec:	40010c00 	.word	0x40010c00
 8002ef0:	40011000 	.word	0x40011000
 8002ef4:	40011400 	.word	0x40011400
 8002ef8:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002efc:	4b0b      	ldr	r3, [pc, #44]	@ (8002f2c <HAL_GPIO_Init+0x304>)
 8002efe:	681a      	ldr	r2, [r3, #0]
 8002f00:	69bb      	ldr	r3, [r7, #24]
 8002f02:	43db      	mvns	r3, r3
 8002f04:	4909      	ldr	r1, [pc, #36]	@ (8002f2c <HAL_GPIO_Init+0x304>)
 8002f06:	4013      	ands	r3, r2
 8002f08:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8002f0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f0c:	3301      	adds	r3, #1
 8002f0e:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002f10:	683b      	ldr	r3, [r7, #0]
 8002f12:	681a      	ldr	r2, [r3, #0]
 8002f14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f16:	fa22 f303 	lsr.w	r3, r2, r3
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	f47f ae8e 	bne.w	8002c3c <HAL_GPIO_Init+0x14>
  }
}
 8002f20:	bf00      	nop
 8002f22:	bf00      	nop
 8002f24:	372c      	adds	r7, #44	@ 0x2c
 8002f26:	46bd      	mov	sp, r7
 8002f28:	bc80      	pop	{r7}
 8002f2a:	4770      	bx	lr
 8002f2c:	40010400 	.word	0x40010400

08002f30 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002f30:	b580      	push	{r7, lr}
 8002f32:	b084      	sub	sp, #16
 8002f34:	af00      	add	r7, sp, #0
 8002f36:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d101      	bne.n	8002f42 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002f3e:	2301      	movs	r3, #1
 8002f40:	e0e8      	b.n	8003114 <HAL_PCD_Init+0x1e4>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	f893 3291 	ldrb.w	r3, [r3, #657]	@ 0x291
 8002f48:	b2db      	uxtb	r3, r3
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d106      	bne.n	8002f5c <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	2200      	movs	r2, #0
 8002f52:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002f56:	6878      	ldr	r0, [r7, #4]
 8002f58:	f006 ff5c 	bl	8009e14 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	2203      	movs	r2, #3
 8002f60:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Disable DMA mode for FS instance */
  hpcd->Init.dma_enable = 0U;
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	2200      	movs	r2, #0
 8002f68:	715a      	strb	r2, [r3, #5]

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	4618      	mov	r0, r3
 8002f70:	f002 fe72 	bl	8005c58 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	6818      	ldr	r0, [r3, #0]
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	3304      	adds	r3, #4
 8002f7c:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002f7e:	f002 fe48 	bl	8005c12 <USB_CoreInit>
 8002f82:	4603      	mov	r3, r0
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d005      	beq.n	8002f94 <HAL_PCD_Init+0x64>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	2202      	movs	r2, #2
 8002f8c:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291
    return HAL_ERROR;
 8002f90:	2301      	movs	r3, #1
 8002f92:	e0bf      	b.n	8003114 <HAL_PCD_Init+0x1e4>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	2100      	movs	r1, #0
 8002f9a:	4618      	mov	r0, r3
 8002f9c:	f002 fe76 	bl	8005c8c <USB_SetCurrentMode>
 8002fa0:	4603      	mov	r3, r0
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d005      	beq.n	8002fb2 <HAL_PCD_Init+0x82>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	2202      	movs	r2, #2
 8002faa:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291
    return HAL_ERROR;
 8002fae:	2301      	movs	r3, #1
 8002fb0:	e0b0      	b.n	8003114 <HAL_PCD_Init+0x1e4>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002fb2:	2300      	movs	r3, #0
 8002fb4:	73fb      	strb	r3, [r7, #15]
 8002fb6:	e03e      	b.n	8003036 <HAL_PCD_Init+0x106>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002fb8:	7bfa      	ldrb	r2, [r7, #15]
 8002fba:	6879      	ldr	r1, [r7, #4]
 8002fbc:	4613      	mov	r3, r2
 8002fbe:	009b      	lsls	r3, r3, #2
 8002fc0:	4413      	add	r3, r2
 8002fc2:	00db      	lsls	r3, r3, #3
 8002fc4:	440b      	add	r3, r1
 8002fc6:	3311      	adds	r3, #17
 8002fc8:	2201      	movs	r2, #1
 8002fca:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002fcc:	7bfa      	ldrb	r2, [r7, #15]
 8002fce:	6879      	ldr	r1, [r7, #4]
 8002fd0:	4613      	mov	r3, r2
 8002fd2:	009b      	lsls	r3, r3, #2
 8002fd4:	4413      	add	r3, r2
 8002fd6:	00db      	lsls	r3, r3, #3
 8002fd8:	440b      	add	r3, r1
 8002fda:	3310      	adds	r3, #16
 8002fdc:	7bfa      	ldrb	r2, [r7, #15]
 8002fde:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS)
    hpcd->IN_ep[i].tx_fifo_num = i;
#endif /* defined (USB_OTG_FS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002fe0:	7bfa      	ldrb	r2, [r7, #15]
 8002fe2:	6879      	ldr	r1, [r7, #4]
 8002fe4:	4613      	mov	r3, r2
 8002fe6:	009b      	lsls	r3, r3, #2
 8002fe8:	4413      	add	r3, r2
 8002fea:	00db      	lsls	r3, r3, #3
 8002fec:	440b      	add	r3, r1
 8002fee:	3313      	adds	r3, #19
 8002ff0:	2200      	movs	r2, #0
 8002ff2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002ff4:	7bfa      	ldrb	r2, [r7, #15]
 8002ff6:	6879      	ldr	r1, [r7, #4]
 8002ff8:	4613      	mov	r3, r2
 8002ffa:	009b      	lsls	r3, r3, #2
 8002ffc:	4413      	add	r3, r2
 8002ffe:	00db      	lsls	r3, r3, #3
 8003000:	440b      	add	r3, r1
 8003002:	3320      	adds	r3, #32
 8003004:	2200      	movs	r2, #0
 8003006:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003008:	7bfa      	ldrb	r2, [r7, #15]
 800300a:	6879      	ldr	r1, [r7, #4]
 800300c:	4613      	mov	r3, r2
 800300e:	009b      	lsls	r3, r3, #2
 8003010:	4413      	add	r3, r2
 8003012:	00db      	lsls	r3, r3, #3
 8003014:	440b      	add	r3, r1
 8003016:	3324      	adds	r3, #36	@ 0x24
 8003018:	2200      	movs	r2, #0
 800301a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800301c:	7bfb      	ldrb	r3, [r7, #15]
 800301e:	6879      	ldr	r1, [r7, #4]
 8003020:	1c5a      	adds	r2, r3, #1
 8003022:	4613      	mov	r3, r2
 8003024:	009b      	lsls	r3, r3, #2
 8003026:	4413      	add	r3, r2
 8003028:	00db      	lsls	r3, r3, #3
 800302a:	440b      	add	r3, r1
 800302c:	2200      	movs	r2, #0
 800302e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003030:	7bfb      	ldrb	r3, [r7, #15]
 8003032:	3301      	adds	r3, #1
 8003034:	73fb      	strb	r3, [r7, #15]
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	791b      	ldrb	r3, [r3, #4]
 800303a:	7bfa      	ldrb	r2, [r7, #15]
 800303c:	429a      	cmp	r2, r3
 800303e:	d3bb      	bcc.n	8002fb8 <HAL_PCD_Init+0x88>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003040:	2300      	movs	r3, #0
 8003042:	73fb      	strb	r3, [r7, #15]
 8003044:	e044      	b.n	80030d0 <HAL_PCD_Init+0x1a0>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003046:	7bfa      	ldrb	r2, [r7, #15]
 8003048:	6879      	ldr	r1, [r7, #4]
 800304a:	4613      	mov	r3, r2
 800304c:	009b      	lsls	r3, r3, #2
 800304e:	4413      	add	r3, r2
 8003050:	00db      	lsls	r3, r3, #3
 8003052:	440b      	add	r3, r1
 8003054:	f203 1351 	addw	r3, r3, #337	@ 0x151
 8003058:	2200      	movs	r2, #0
 800305a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800305c:	7bfa      	ldrb	r2, [r7, #15]
 800305e:	6879      	ldr	r1, [r7, #4]
 8003060:	4613      	mov	r3, r2
 8003062:	009b      	lsls	r3, r3, #2
 8003064:	4413      	add	r3, r2
 8003066:	00db      	lsls	r3, r3, #3
 8003068:	440b      	add	r3, r1
 800306a:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800306e:	7bfa      	ldrb	r2, [r7, #15]
 8003070:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003072:	7bfa      	ldrb	r2, [r7, #15]
 8003074:	6879      	ldr	r1, [r7, #4]
 8003076:	4613      	mov	r3, r2
 8003078:	009b      	lsls	r3, r3, #2
 800307a:	4413      	add	r3, r2
 800307c:	00db      	lsls	r3, r3, #3
 800307e:	440b      	add	r3, r1
 8003080:	f203 1353 	addw	r3, r3, #339	@ 0x153
 8003084:	2200      	movs	r2, #0
 8003086:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003088:	7bfa      	ldrb	r2, [r7, #15]
 800308a:	6879      	ldr	r1, [r7, #4]
 800308c:	4613      	mov	r3, r2
 800308e:	009b      	lsls	r3, r3, #2
 8003090:	4413      	add	r3, r2
 8003092:	00db      	lsls	r3, r3, #3
 8003094:	440b      	add	r3, r1
 8003096:	f503 73b0 	add.w	r3, r3, #352	@ 0x160
 800309a:	2200      	movs	r2, #0
 800309c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800309e:	7bfa      	ldrb	r2, [r7, #15]
 80030a0:	6879      	ldr	r1, [r7, #4]
 80030a2:	4613      	mov	r3, r2
 80030a4:	009b      	lsls	r3, r3, #2
 80030a6:	4413      	add	r3, r2
 80030a8:	00db      	lsls	r3, r3, #3
 80030aa:	440b      	add	r3, r1
 80030ac:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 80030b0:	2200      	movs	r2, #0
 80030b2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80030b4:	7bfa      	ldrb	r2, [r7, #15]
 80030b6:	6879      	ldr	r1, [r7, #4]
 80030b8:	4613      	mov	r3, r2
 80030ba:	009b      	lsls	r3, r3, #2
 80030bc:	4413      	add	r3, r2
 80030be:	00db      	lsls	r3, r3, #3
 80030c0:	440b      	add	r3, r1
 80030c2:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 80030c6:	2200      	movs	r2, #0
 80030c8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80030ca:	7bfb      	ldrb	r3, [r7, #15]
 80030cc:	3301      	adds	r3, #1
 80030ce:	73fb      	strb	r3, [r7, #15]
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	791b      	ldrb	r3, [r3, #4]
 80030d4:	7bfa      	ldrb	r2, [r7, #15]
 80030d6:	429a      	cmp	r2, r3
 80030d8:	d3b5      	bcc.n	8003046 <HAL_PCD_Init+0x116>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	6818      	ldr	r0, [r3, #0]
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	3304      	adds	r3, #4
 80030e2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80030e4:	f002 fdde 	bl	8005ca4 <USB_DevInit>
 80030e8:	4603      	mov	r3, r0
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d005      	beq.n	80030fa <HAL_PCD_Init+0x1ca>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	2202      	movs	r2, #2
 80030f2:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291
    return HAL_ERROR;
 80030f6:	2301      	movs	r3, #1
 80030f8:	e00c      	b.n	8003114 <HAL_PCD_Init+0x1e4>
  }

  hpcd->USB_Address = 0U;
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	2200      	movs	r2, #0
 80030fe:	735a      	strb	r2, [r3, #13]
  hpcd->State = HAL_PCD_STATE_READY;
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	2201      	movs	r2, #1
 8003104:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291
  (void)USB_DevDisconnect(hpcd->Instance);
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	4618      	mov	r0, r3
 800310e:	f005 f85e 	bl	80081ce <USB_DevDisconnect>

  return HAL_OK;
 8003112:	2300      	movs	r3, #0
}
 8003114:	4618      	mov	r0, r3
 8003116:	3710      	adds	r7, #16
 8003118:	46bd      	mov	sp, r7
 800311a:	bd80      	pop	{r7, pc}

0800311c <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800311c:	b580      	push	{r7, lr}
 800311e:	b082      	sub	sp, #8
 8003120:	af00      	add	r7, sp, #0
 8003122:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 800312a:	2b01      	cmp	r3, #1
 800312c:	d101      	bne.n	8003132 <HAL_PCD_Start+0x16>
 800312e:	2302      	movs	r3, #2
 8003130:	e016      	b.n	8003160 <HAL_PCD_Start+0x44>
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	2201      	movs	r2, #1
 8003136:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  __HAL_PCD_ENABLE(hpcd);
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	4618      	mov	r0, r3
 8003140:	f002 fd74 	bl	8005c2c <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 8003144:	2101      	movs	r1, #1
 8003146:	6878      	ldr	r0, [r7, #4]
 8003148:	f007 f8d7 	bl	800a2fa <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	4618      	mov	r0, r3
 8003152:	f005 f832 	bl	80081ba <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	2200      	movs	r2, #0
 800315a:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 800315e:	2300      	movs	r3, #0
}
 8003160:	4618      	mov	r0, r3
 8003162:	3708      	adds	r7, #8
 8003164:	46bd      	mov	sp, r7
 8003166:	bd80      	pop	{r7, pc}

08003168 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8003168:	b580      	push	{r7, lr}
 800316a:	b088      	sub	sp, #32
 800316c:	af00      	add	r7, sp, #0
 800316e:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	4618      	mov	r0, r3
 8003176:	f005 f834 	bl	80081e2 <USB_ReadInterrupts>
 800317a:	61b8      	str	r0, [r7, #24]
  uint16_t store_ep[8];
  uint8_t i;

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 800317c:	69bb      	ldr	r3, [r7, #24]
 800317e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003182:	2b00      	cmp	r3, #0
 8003184:	d003      	beq.n	800318e <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8003186:	6878      	ldr	r0, [r7, #4]
 8003188:	f000 fb1a 	bl	80037c0 <PCD_EP_ISR_Handler>

    return;
 800318c:	e119      	b.n	80033c2 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 800318e:	69bb      	ldr	r3, [r7, #24]
 8003190:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003194:	2b00      	cmp	r3, #0
 8003196:	d013      	beq.n	80031c0 <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80031a0:	b29a      	uxth	r2, r3
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80031aa:	b292      	uxth	r2, r2
 80031ac:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 80031b0:	6878      	ldr	r0, [r7, #4]
 80031b2:	f006 feaa 	bl	8009f0a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 80031b6:	2100      	movs	r1, #0
 80031b8:	6878      	ldr	r0, [r7, #4]
 80031ba:	f000 f905 	bl	80033c8 <HAL_PCD_SetAddress>

    return;
 80031be:	e100      	b.n	80033c2 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 80031c0:	69bb      	ldr	r3, [r7, #24]
 80031c2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d00c      	beq.n	80031e4 <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80031d2:	b29a      	uxth	r2, r3
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80031dc:	b292      	uxth	r2, r2
 80031de:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 80031e2:	e0ee      	b.n	80033c2 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 80031e4:	69bb      	ldr	r3, [r7, #24]
 80031e6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d00c      	beq.n	8003208 <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80031f6:	b29a      	uxth	r2, r3
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003200:	b292      	uxth	r2, r2
 8003202:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8003206:	e0dc      	b.n	80033c2 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 8003208:	69bb      	ldr	r3, [r7, #24]
 800320a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800320e:	2b00      	cmp	r3, #0
 8003210:	d027      	beq.n	8003262 <HAL_PCD_IRQHandler+0xfa>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800321a:	b29a      	uxth	r2, r3
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	f022 0204 	bic.w	r2, r2, #4
 8003224:	b292      	uxth	r2, r2
 8003226:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8003232:	b29a      	uxth	r2, r3
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	f022 0208 	bic.w	r2, r2, #8
 800323c:	b292      	uxth	r2, r2
 800323e:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8003242:	6878      	ldr	r0, [r7, #4]
 8003244:	f006 fe9a 	bl	8009f7c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8003250:	b29a      	uxth	r2, r3
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800325a:	b292      	uxth	r2, r2
 800325c:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8003260:	e0af      	b.n	80033c2 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 8003262:	69bb      	ldr	r3, [r7, #24]
 8003264:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003268:	2b00      	cmp	r3, #0
 800326a:	f000 8083 	beq.w	8003374 <HAL_PCD_IRQHandler+0x20c>
  {
    /* WA: To Clear Wakeup flag if raised with suspend signal */

    /* Store Endpoint registers */
    for (i = 0U; i < 8U; i++)
 800326e:	2300      	movs	r3, #0
 8003270:	77fb      	strb	r3, [r7, #31]
 8003272:	e010      	b.n	8003296 <HAL_PCD_IRQHandler+0x12e>
    {
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	461a      	mov	r2, r3
 800327a:	7ffb      	ldrb	r3, [r7, #31]
 800327c:	009b      	lsls	r3, r3, #2
 800327e:	441a      	add	r2, r3
 8003280:	7ffb      	ldrb	r3, [r7, #31]
 8003282:	8812      	ldrh	r2, [r2, #0]
 8003284:	b292      	uxth	r2, r2
 8003286:	005b      	lsls	r3, r3, #1
 8003288:	3320      	adds	r3, #32
 800328a:	443b      	add	r3, r7
 800328c:	f823 2c18 	strh.w	r2, [r3, #-24]
    for (i = 0U; i < 8U; i++)
 8003290:	7ffb      	ldrb	r3, [r7, #31]
 8003292:	3301      	adds	r3, #1
 8003294:	77fb      	strb	r3, [r7, #31]
 8003296:	7ffb      	ldrb	r3, [r7, #31]
 8003298:	2b07      	cmp	r3, #7
 800329a:	d9eb      	bls.n	8003274 <HAL_PCD_IRQHandler+0x10c>
    }

    /* FORCE RESET */
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80032a4:	b29a      	uxth	r2, r3
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	f042 0201 	orr.w	r2, r2, #1
 80032ae:	b292      	uxth	r2, r2
 80032b0:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* CLEAR RESET */
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80032bc:	b29a      	uxth	r2, r3
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	f022 0201 	bic.w	r2, r2, #1
 80032c6:	b292      	uxth	r2, r2
 80032c8:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* wait for reset flag in ISTR */
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 80032cc:	bf00      	nop
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80032d6:	b29b      	uxth	r3, r3
 80032d8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d0f6      	beq.n	80032ce <HAL_PCD_IRQHandler+0x166>
    {
    }

    /* Clear Reset Flag */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80032e8:	b29a      	uxth	r2, r3
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80032f2:	b292      	uxth	r2, r2
 80032f4:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    /* Restore Registre */
    for (i = 0U; i < 8U; i++)
 80032f8:	2300      	movs	r3, #0
 80032fa:	77fb      	strb	r3, [r7, #31]
 80032fc:	e00f      	b.n	800331e <HAL_PCD_IRQHandler+0x1b6>
    {
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 80032fe:	7ffb      	ldrb	r3, [r7, #31]
 8003300:	687a      	ldr	r2, [r7, #4]
 8003302:	6812      	ldr	r2, [r2, #0]
 8003304:	4611      	mov	r1, r2
 8003306:	7ffa      	ldrb	r2, [r7, #31]
 8003308:	0092      	lsls	r2, r2, #2
 800330a:	440a      	add	r2, r1
 800330c:	005b      	lsls	r3, r3, #1
 800330e:	3320      	adds	r3, #32
 8003310:	443b      	add	r3, r7
 8003312:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 8003316:	8013      	strh	r3, [r2, #0]
    for (i = 0U; i < 8U; i++)
 8003318:	7ffb      	ldrb	r3, [r7, #31]
 800331a:	3301      	adds	r3, #1
 800331c:	77fb      	strb	r3, [r7, #31]
 800331e:	7ffb      	ldrb	r3, [r7, #31]
 8003320:	2b07      	cmp	r3, #7
 8003322:	d9ec      	bls.n	80032fe <HAL_PCD_IRQHandler+0x196>
    }

    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800332c:	b29a      	uxth	r2, r3
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	f042 0208 	orr.w	r2, r2, #8
 8003336:	b292      	uxth	r2, r2
 8003338:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8003344:	b29a      	uxth	r2, r3
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800334e:	b292      	uxth	r2, r2
 8003350:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800335c:	b29a      	uxth	r2, r3
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	f042 0204 	orr.w	r2, r2, #4
 8003366:	b292      	uxth	r2, r2
 8003368:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 800336c:	6878      	ldr	r0, [r7, #4]
 800336e:	f006 fdeb 	bl	8009f48 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8003372:	e026      	b.n	80033c2 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 8003374:	69bb      	ldr	r3, [r7, #24]
 8003376:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800337a:	2b00      	cmp	r3, #0
 800337c:	d00f      	beq.n	800339e <HAL_PCD_IRQHandler+0x236>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8003386:	b29a      	uxth	r2, r3
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8003390:	b292      	uxth	r2, r2
 8003392:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8003396:	6878      	ldr	r0, [r7, #4]
 8003398:	f006 fda9 	bl	8009eee <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 800339c:	e011      	b.n	80033c2 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 800339e:	69bb      	ldr	r3, [r7, #24]
 80033a0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d00c      	beq.n	80033c2 <HAL_PCD_IRQHandler+0x25a>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80033b0:	b29a      	uxth	r2, r3
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80033ba:	b292      	uxth	r2, r2
 80033bc:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 80033c0:	bf00      	nop
  }
}
 80033c2:	3720      	adds	r7, #32
 80033c4:	46bd      	mov	sp, r7
 80033c6:	bd80      	pop	{r7, pc}

080033c8 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80033c8:	b580      	push	{r7, lr}
 80033ca:	b082      	sub	sp, #8
 80033cc:	af00      	add	r7, sp, #0
 80033ce:	6078      	str	r0, [r7, #4]
 80033d0:	460b      	mov	r3, r1
 80033d2:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 80033da:	2b01      	cmp	r3, #1
 80033dc:	d101      	bne.n	80033e2 <HAL_PCD_SetAddress+0x1a>
 80033de:	2302      	movs	r3, #2
 80033e0:	e012      	b.n	8003408 <HAL_PCD_SetAddress+0x40>
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	2201      	movs	r2, #1
 80033e6:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  hpcd->USB_Address = address;
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	78fa      	ldrb	r2, [r7, #3]
 80033ee:	735a      	strb	r2, [r3, #13]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	78fa      	ldrb	r2, [r7, #3]
 80033f6:	4611      	mov	r1, r2
 80033f8:	4618      	mov	r0, r3
 80033fa:	f004 fecb 	bl	8008194 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	2200      	movs	r2, #0
 8003402:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8003406:	2300      	movs	r3, #0
}
 8003408:	4618      	mov	r0, r3
 800340a:	3708      	adds	r7, #8
 800340c:	46bd      	mov	sp, r7
 800340e:	bd80      	pop	{r7, pc}

08003410 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8003410:	b580      	push	{r7, lr}
 8003412:	b084      	sub	sp, #16
 8003414:	af00      	add	r7, sp, #0
 8003416:	6078      	str	r0, [r7, #4]
 8003418:	4608      	mov	r0, r1
 800341a:	4611      	mov	r1, r2
 800341c:	461a      	mov	r2, r3
 800341e:	4603      	mov	r3, r0
 8003420:	70fb      	strb	r3, [r7, #3]
 8003422:	460b      	mov	r3, r1
 8003424:	803b      	strh	r3, [r7, #0]
 8003426:	4613      	mov	r3, r2
 8003428:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 800342a:	2300      	movs	r3, #0
 800342c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800342e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003432:	2b00      	cmp	r3, #0
 8003434:	da0e      	bge.n	8003454 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003436:	78fb      	ldrb	r3, [r7, #3]
 8003438:	f003 0207 	and.w	r2, r3, #7
 800343c:	4613      	mov	r3, r2
 800343e:	009b      	lsls	r3, r3, #2
 8003440:	4413      	add	r3, r2
 8003442:	00db      	lsls	r3, r3, #3
 8003444:	3310      	adds	r3, #16
 8003446:	687a      	ldr	r2, [r7, #4]
 8003448:	4413      	add	r3, r2
 800344a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	2201      	movs	r2, #1
 8003450:	705a      	strb	r2, [r3, #1]
 8003452:	e00e      	b.n	8003472 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003454:	78fb      	ldrb	r3, [r7, #3]
 8003456:	f003 0207 	and.w	r2, r3, #7
 800345a:	4613      	mov	r3, r2
 800345c:	009b      	lsls	r3, r3, #2
 800345e:	4413      	add	r3, r2
 8003460:	00db      	lsls	r3, r3, #3
 8003462:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8003466:	687a      	ldr	r2, [r7, #4]
 8003468:	4413      	add	r3, r2
 800346a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	2200      	movs	r2, #0
 8003470:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8003472:	78fb      	ldrb	r3, [r7, #3]
 8003474:	f003 0307 	and.w	r3, r3, #7
 8003478:	b2da      	uxtb	r2, r3
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800347e:	883a      	ldrh	r2, [r7, #0]
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	78ba      	ldrb	r2, [r7, #2]
 8003488:	70da      	strb	r2, [r3, #3]
    ep->tx_fifo_num = ep->num;
  }
#endif /* defined (USB_OTG_FS) */

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800348a:	78bb      	ldrb	r3, [r7, #2]
 800348c:	2b02      	cmp	r3, #2
 800348e:	d102      	bne.n	8003496 <HAL_PCD_EP_Open+0x86>
  {
    ep->data_pid_start = 0U;
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	2200      	movs	r2, #0
 8003494:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 800349c:	2b01      	cmp	r3, #1
 800349e:	d101      	bne.n	80034a4 <HAL_PCD_EP_Open+0x94>
 80034a0:	2302      	movs	r3, #2
 80034a2:	e00e      	b.n	80034c2 <HAL_PCD_EP_Open+0xb2>
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	2201      	movs	r2, #1
 80034a8:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	68f9      	ldr	r1, [r7, #12]
 80034b2:	4618      	mov	r0, r3
 80034b4:	f002 fc14 	bl	8005ce0 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	2200      	movs	r2, #0
 80034bc:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return ret;
 80034c0:	7afb      	ldrb	r3, [r7, #11]
}
 80034c2:	4618      	mov	r0, r3
 80034c4:	3710      	adds	r7, #16
 80034c6:	46bd      	mov	sp, r7
 80034c8:	bd80      	pop	{r7, pc}

080034ca <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80034ca:	b580      	push	{r7, lr}
 80034cc:	b084      	sub	sp, #16
 80034ce:	af00      	add	r7, sp, #0
 80034d0:	6078      	str	r0, [r7, #4]
 80034d2:	460b      	mov	r3, r1
 80034d4:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80034d6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80034da:	2b00      	cmp	r3, #0
 80034dc:	da0e      	bge.n	80034fc <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80034de:	78fb      	ldrb	r3, [r7, #3]
 80034e0:	f003 0207 	and.w	r2, r3, #7
 80034e4:	4613      	mov	r3, r2
 80034e6:	009b      	lsls	r3, r3, #2
 80034e8:	4413      	add	r3, r2
 80034ea:	00db      	lsls	r3, r3, #3
 80034ec:	3310      	adds	r3, #16
 80034ee:	687a      	ldr	r2, [r7, #4]
 80034f0:	4413      	add	r3, r2
 80034f2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	2201      	movs	r2, #1
 80034f8:	705a      	strb	r2, [r3, #1]
 80034fa:	e00e      	b.n	800351a <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80034fc:	78fb      	ldrb	r3, [r7, #3]
 80034fe:	f003 0207 	and.w	r2, r3, #7
 8003502:	4613      	mov	r3, r2
 8003504:	009b      	lsls	r3, r3, #2
 8003506:	4413      	add	r3, r2
 8003508:	00db      	lsls	r3, r3, #3
 800350a:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800350e:	687a      	ldr	r2, [r7, #4]
 8003510:	4413      	add	r3, r2
 8003512:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	2200      	movs	r2, #0
 8003518:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 800351a:	78fb      	ldrb	r3, [r7, #3]
 800351c:	f003 0307 	and.w	r3, r3, #7
 8003520:	b2da      	uxtb	r2, r3
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 800352c:	2b01      	cmp	r3, #1
 800352e:	d101      	bne.n	8003534 <HAL_PCD_EP_Close+0x6a>
 8003530:	2302      	movs	r3, #2
 8003532:	e00e      	b.n	8003552 <HAL_PCD_EP_Close+0x88>
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	2201      	movs	r2, #1
 8003538:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	68f9      	ldr	r1, [r7, #12]
 8003542:	4618      	mov	r0, r3
 8003544:	f002 ff8c 	bl	8006460 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	2200      	movs	r2, #0
 800354c:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  return HAL_OK;
 8003550:	2300      	movs	r3, #0
}
 8003552:	4618      	mov	r0, r3
 8003554:	3710      	adds	r7, #16
 8003556:	46bd      	mov	sp, r7
 8003558:	bd80      	pop	{r7, pc}

0800355a <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800355a:	b580      	push	{r7, lr}
 800355c:	b086      	sub	sp, #24
 800355e:	af00      	add	r7, sp, #0
 8003560:	60f8      	str	r0, [r7, #12]
 8003562:	607a      	str	r2, [r7, #4]
 8003564:	603b      	str	r3, [r7, #0]
 8003566:	460b      	mov	r3, r1
 8003568:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800356a:	7afb      	ldrb	r3, [r7, #11]
 800356c:	f003 0207 	and.w	r2, r3, #7
 8003570:	4613      	mov	r3, r2
 8003572:	009b      	lsls	r3, r3, #2
 8003574:	4413      	add	r3, r2
 8003576:	00db      	lsls	r3, r3, #3
 8003578:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800357c:	68fa      	ldr	r2, [r7, #12]
 800357e:	4413      	add	r3, r2
 8003580:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003582:	697b      	ldr	r3, [r7, #20]
 8003584:	687a      	ldr	r2, [r7, #4]
 8003586:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8003588:	697b      	ldr	r3, [r7, #20]
 800358a:	683a      	ldr	r2, [r7, #0]
 800358c:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 800358e:	697b      	ldr	r3, [r7, #20]
 8003590:	2200      	movs	r2, #0
 8003592:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8003594:	697b      	ldr	r3, [r7, #20]
 8003596:	2200      	movs	r2, #0
 8003598:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800359a:	7afb      	ldrb	r3, [r7, #11]
 800359c:	f003 0307 	and.w	r3, r3, #7
 80035a0:	b2da      	uxtb	r2, r3
 80035a2:	697b      	ldr	r3, [r7, #20]
 80035a4:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	6979      	ldr	r1, [r7, #20]
 80035ac:	4618      	mov	r0, r3
 80035ae:	f003 f943 	bl	8006838 <USB_EPStartXfer>

  return HAL_OK;
 80035b2:	2300      	movs	r3, #0
}
 80035b4:	4618      	mov	r0, r3
 80035b6:	3718      	adds	r7, #24
 80035b8:	46bd      	mov	sp, r7
 80035ba:	bd80      	pop	{r7, pc}

080035bc <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 80035bc:	b480      	push	{r7}
 80035be:	b083      	sub	sp, #12
 80035c0:	af00      	add	r7, sp, #0
 80035c2:	6078      	str	r0, [r7, #4]
 80035c4:	460b      	mov	r3, r1
 80035c6:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80035c8:	78fb      	ldrb	r3, [r7, #3]
 80035ca:	f003 0207 	and.w	r2, r3, #7
 80035ce:	6879      	ldr	r1, [r7, #4]
 80035d0:	4613      	mov	r3, r2
 80035d2:	009b      	lsls	r3, r3, #2
 80035d4:	4413      	add	r3, r2
 80035d6:	00db      	lsls	r3, r3, #3
 80035d8:	440b      	add	r3, r1
 80035da:	f503 73b6 	add.w	r3, r3, #364	@ 0x16c
 80035de:	681b      	ldr	r3, [r3, #0]
}
 80035e0:	4618      	mov	r0, r3
 80035e2:	370c      	adds	r7, #12
 80035e4:	46bd      	mov	sp, r7
 80035e6:	bc80      	pop	{r7}
 80035e8:	4770      	bx	lr

080035ea <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80035ea:	b580      	push	{r7, lr}
 80035ec:	b086      	sub	sp, #24
 80035ee:	af00      	add	r7, sp, #0
 80035f0:	60f8      	str	r0, [r7, #12]
 80035f2:	607a      	str	r2, [r7, #4]
 80035f4:	603b      	str	r3, [r7, #0]
 80035f6:	460b      	mov	r3, r1
 80035f8:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80035fa:	7afb      	ldrb	r3, [r7, #11]
 80035fc:	f003 0207 	and.w	r2, r3, #7
 8003600:	4613      	mov	r3, r2
 8003602:	009b      	lsls	r3, r3, #2
 8003604:	4413      	add	r3, r2
 8003606:	00db      	lsls	r3, r3, #3
 8003608:	3310      	adds	r3, #16
 800360a:	68fa      	ldr	r2, [r7, #12]
 800360c:	4413      	add	r3, r2
 800360e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003610:	697b      	ldr	r3, [r7, #20]
 8003612:	687a      	ldr	r2, [r7, #4]
 8003614:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8003616:	697b      	ldr	r3, [r7, #20]
 8003618:	683a      	ldr	r2, [r7, #0]
 800361a:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 800361c:	697b      	ldr	r3, [r7, #20]
 800361e:	2201      	movs	r2, #1
 8003620:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  ep->xfer_len_db = len;
 8003624:	697b      	ldr	r3, [r7, #20]
 8003626:	683a      	ldr	r2, [r7, #0]
 8003628:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 800362a:	697b      	ldr	r3, [r7, #20]
 800362c:	2200      	movs	r2, #0
 800362e:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8003630:	697b      	ldr	r3, [r7, #20]
 8003632:	2201      	movs	r2, #1
 8003634:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003636:	7afb      	ldrb	r3, [r7, #11]
 8003638:	f003 0307 	and.w	r3, r3, #7
 800363c:	b2da      	uxtb	r2, r3
 800363e:	697b      	ldr	r3, [r7, #20]
 8003640:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	6979      	ldr	r1, [r7, #20]
 8003648:	4618      	mov	r0, r3
 800364a:	f003 f8f5 	bl	8006838 <USB_EPStartXfer>

  return HAL_OK;
 800364e:	2300      	movs	r3, #0
}
 8003650:	4618      	mov	r0, r3
 8003652:	3718      	adds	r7, #24
 8003654:	46bd      	mov	sp, r7
 8003656:	bd80      	pop	{r7, pc}

08003658 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003658:	b580      	push	{r7, lr}
 800365a:	b084      	sub	sp, #16
 800365c:	af00      	add	r7, sp, #0
 800365e:	6078      	str	r0, [r7, #4]
 8003660:	460b      	mov	r3, r1
 8003662:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8003664:	78fb      	ldrb	r3, [r7, #3]
 8003666:	f003 0307 	and.w	r3, r3, #7
 800366a:	687a      	ldr	r2, [r7, #4]
 800366c:	7912      	ldrb	r2, [r2, #4]
 800366e:	4293      	cmp	r3, r2
 8003670:	d901      	bls.n	8003676 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8003672:	2301      	movs	r3, #1
 8003674:	e04c      	b.n	8003710 <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003676:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800367a:	2b00      	cmp	r3, #0
 800367c:	da0e      	bge.n	800369c <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800367e:	78fb      	ldrb	r3, [r7, #3]
 8003680:	f003 0207 	and.w	r2, r3, #7
 8003684:	4613      	mov	r3, r2
 8003686:	009b      	lsls	r3, r3, #2
 8003688:	4413      	add	r3, r2
 800368a:	00db      	lsls	r3, r3, #3
 800368c:	3310      	adds	r3, #16
 800368e:	687a      	ldr	r2, [r7, #4]
 8003690:	4413      	add	r3, r2
 8003692:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	2201      	movs	r2, #1
 8003698:	705a      	strb	r2, [r3, #1]
 800369a:	e00c      	b.n	80036b6 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800369c:	78fa      	ldrb	r2, [r7, #3]
 800369e:	4613      	mov	r3, r2
 80036a0:	009b      	lsls	r3, r3, #2
 80036a2:	4413      	add	r3, r2
 80036a4:	00db      	lsls	r3, r3, #3
 80036a6:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80036aa:	687a      	ldr	r2, [r7, #4]
 80036ac:	4413      	add	r3, r2
 80036ae:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	2200      	movs	r2, #0
 80036b4:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	2201      	movs	r2, #1
 80036ba:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80036bc:	78fb      	ldrb	r3, [r7, #3]
 80036be:	f003 0307 	and.w	r3, r3, #7
 80036c2:	b2da      	uxtb	r2, r3
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 80036ce:	2b01      	cmp	r3, #1
 80036d0:	d101      	bne.n	80036d6 <HAL_PCD_EP_SetStall+0x7e>
 80036d2:	2302      	movs	r3, #2
 80036d4:	e01c      	b.n	8003710 <HAL_PCD_EP_SetStall+0xb8>
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	2201      	movs	r2, #1
 80036da:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	68f9      	ldr	r1, [r7, #12]
 80036e4:	4618      	mov	r0, r3
 80036e6:	f004 fc58 	bl	8007f9a <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80036ea:	78fb      	ldrb	r3, [r7, #3]
 80036ec:	f003 0307 	and.w	r3, r3, #7
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d108      	bne.n	8003706 <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681a      	ldr	r2, [r3, #0]
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	f503 7326 	add.w	r3, r3, #664	@ 0x298
 80036fe:	4619      	mov	r1, r3
 8003700:	4610      	mov	r0, r2
 8003702:	f004 fd7d 	bl	8008200 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	2200      	movs	r2, #0
 800370a:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 800370e:	2300      	movs	r3, #0
}
 8003710:	4618      	mov	r0, r3
 8003712:	3710      	adds	r7, #16
 8003714:	46bd      	mov	sp, r7
 8003716:	bd80      	pop	{r7, pc}

08003718 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003718:	b580      	push	{r7, lr}
 800371a:	b084      	sub	sp, #16
 800371c:	af00      	add	r7, sp, #0
 800371e:	6078      	str	r0, [r7, #4]
 8003720:	460b      	mov	r3, r1
 8003722:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8003724:	78fb      	ldrb	r3, [r7, #3]
 8003726:	f003 030f 	and.w	r3, r3, #15
 800372a:	687a      	ldr	r2, [r7, #4]
 800372c:	7912      	ldrb	r2, [r2, #4]
 800372e:	4293      	cmp	r3, r2
 8003730:	d901      	bls.n	8003736 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8003732:	2301      	movs	r3, #1
 8003734:	e040      	b.n	80037b8 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003736:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800373a:	2b00      	cmp	r3, #0
 800373c:	da0e      	bge.n	800375c <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800373e:	78fb      	ldrb	r3, [r7, #3]
 8003740:	f003 0207 	and.w	r2, r3, #7
 8003744:	4613      	mov	r3, r2
 8003746:	009b      	lsls	r3, r3, #2
 8003748:	4413      	add	r3, r2
 800374a:	00db      	lsls	r3, r3, #3
 800374c:	3310      	adds	r3, #16
 800374e:	687a      	ldr	r2, [r7, #4]
 8003750:	4413      	add	r3, r2
 8003752:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	2201      	movs	r2, #1
 8003758:	705a      	strb	r2, [r3, #1]
 800375a:	e00e      	b.n	800377a <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800375c:	78fb      	ldrb	r3, [r7, #3]
 800375e:	f003 0207 	and.w	r2, r3, #7
 8003762:	4613      	mov	r3, r2
 8003764:	009b      	lsls	r3, r3, #2
 8003766:	4413      	add	r3, r2
 8003768:	00db      	lsls	r3, r3, #3
 800376a:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800376e:	687a      	ldr	r2, [r7, #4]
 8003770:	4413      	add	r3, r2
 8003772:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	2200      	movs	r2, #0
 8003778:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	2200      	movs	r2, #0
 800377e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003780:	78fb      	ldrb	r3, [r7, #3]
 8003782:	f003 0307 	and.w	r3, r3, #7
 8003786:	b2da      	uxtb	r2, r3
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8003792:	2b01      	cmp	r3, #1
 8003794:	d101      	bne.n	800379a <HAL_PCD_EP_ClrStall+0x82>
 8003796:	2302      	movs	r3, #2
 8003798:	e00e      	b.n	80037b8 <HAL_PCD_EP_ClrStall+0xa0>
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	2201      	movs	r2, #1
 800379e:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	68f9      	ldr	r1, [r7, #12]
 80037a8:	4618      	mov	r0, r3
 80037aa:	f004 fc46 	bl	800803a <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	2200      	movs	r2, #0
 80037b2:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 80037b6:	2300      	movs	r3, #0
}
 80037b8:	4618      	mov	r0, r3
 80037ba:	3710      	adds	r7, #16
 80037bc:	46bd      	mov	sp, r7
 80037be:	bd80      	pop	{r7, pc}

080037c0 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 80037c0:	b580      	push	{r7, lr}
 80037c2:	b096      	sub	sp, #88	@ 0x58
 80037c4:	af00      	add	r7, sp, #0
 80037c6:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80037c8:	e3bb      	b.n	8003f42 <PCD_EP_ISR_Handler+0x782>
  {
    wIstr = hpcd->Instance->ISTR;
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80037d2:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 80037d6:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 80037da:	b2db      	uxtb	r3, r3
 80037dc:	f003 030f 	and.w	r3, r3, #15
 80037e0:	f887 304d 	strb.w	r3, [r7, #77]	@ 0x4d

    if (epindex == 0U)
 80037e4:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	f040 8175 	bne.w	8003ad8 <PCD_EP_ISR_Handler+0x318>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 80037ee:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 80037f2:	f003 0310 	and.w	r3, r3, #16
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d14e      	bne.n	8003898 <PCD_EP_ISR_Handler+0xd8>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	881b      	ldrh	r3, [r3, #0]
 8003800:	b29b      	uxth	r3, r3
 8003802:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 8003806:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800380a:	81fb      	strh	r3, [r7, #14]
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681a      	ldr	r2, [r3, #0]
 8003810:	89fb      	ldrh	r3, [r7, #14]
 8003812:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003816:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800381a:	b29b      	uxth	r3, r3
 800381c:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	3310      	adds	r3, #16
 8003822:	657b      	str	r3, [r7, #84]	@ 0x54

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800382c:	b29b      	uxth	r3, r3
 800382e:	461a      	mov	r2, r3
 8003830:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003832:	781b      	ldrb	r3, [r3, #0]
 8003834:	00db      	lsls	r3, r3, #3
 8003836:	4413      	add	r3, r2
 8003838:	3302      	adds	r3, #2
 800383a:	005b      	lsls	r3, r3, #1
 800383c:	687a      	ldr	r2, [r7, #4]
 800383e:	6812      	ldr	r2, [r2, #0]
 8003840:	4413      	add	r3, r2
 8003842:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8003846:	881b      	ldrh	r3, [r3, #0]
 8003848:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800384c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800384e:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8003850:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003852:	695a      	ldr	r2, [r3, #20]
 8003854:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003856:	69db      	ldr	r3, [r3, #28]
 8003858:	441a      	add	r2, r3
 800385a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800385c:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 800385e:	2100      	movs	r1, #0
 8003860:	6878      	ldr	r0, [r7, #4]
 8003862:	f006 fb2a 	bl	8009eba <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	7b5b      	ldrb	r3, [r3, #13]
 800386a:	b2db      	uxtb	r3, r3
 800386c:	2b00      	cmp	r3, #0
 800386e:	f000 8368 	beq.w	8003f42 <PCD_EP_ISR_Handler+0x782>
 8003872:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003874:	699b      	ldr	r3, [r3, #24]
 8003876:	2b00      	cmp	r3, #0
 8003878:	f040 8363 	bne.w	8003f42 <PCD_EP_ISR_Handler+0x782>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	7b5b      	ldrb	r3, [r3, #13]
 8003880:	b2db      	uxtb	r3, r3
 8003882:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8003886:	b2da      	uxtb	r2, r3
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
          hpcd->USB_Address = 0U;
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	2200      	movs	r2, #0
 8003894:	735a      	strb	r2, [r3, #13]
 8003896:	e354      	b.n	8003f42 <PCD_EP_ISR_Handler+0x782>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800389e:	657b      	str	r3, [r7, #84]	@ 0x54
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	881b      	ldrh	r3, [r3, #0]
 80038a6:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 80038aa:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 80038ae:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d034      	beq.n	8003920 <PCD_EP_ISR_Handler+0x160>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80038be:	b29b      	uxth	r3, r3
 80038c0:	461a      	mov	r2, r3
 80038c2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80038c4:	781b      	ldrb	r3, [r3, #0]
 80038c6:	00db      	lsls	r3, r3, #3
 80038c8:	4413      	add	r3, r2
 80038ca:	3306      	adds	r3, #6
 80038cc:	005b      	lsls	r3, r3, #1
 80038ce:	687a      	ldr	r2, [r7, #4]
 80038d0:	6812      	ldr	r2, [r2, #0]
 80038d2:	4413      	add	r3, r2
 80038d4:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80038d8:	881b      	ldrh	r3, [r3, #0]
 80038da:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80038de:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80038e0:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	6818      	ldr	r0, [r3, #0]
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	f503 7126 	add.w	r1, r3, #664	@ 0x298
 80038ec:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80038ee:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 80038f0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80038f2:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80038f4:	b29b      	uxth	r3, r3
 80038f6:	f004 fcd3 	bl	80082a0 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	881b      	ldrh	r3, [r3, #0]
 8003900:	b29a      	uxth	r2, r3
 8003902:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8003906:	4013      	ands	r3, r2
 8003908:	823b      	strh	r3, [r7, #16]
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	8a3a      	ldrh	r2, [r7, #16]
 8003910:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8003914:	b292      	uxth	r2, r2
 8003916:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8003918:	6878      	ldr	r0, [r7, #4]
 800391a:	f006 faa1 	bl	8009e60 <HAL_PCD_SetupStageCallback>
 800391e:	e310      	b.n	8003f42 <PCD_EP_ISR_Handler+0x782>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8003920:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	@ 0x4a
 8003924:	2b00      	cmp	r3, #0
 8003926:	f280 830c 	bge.w	8003f42 <PCD_EP_ISR_Handler+0x782>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	881b      	ldrh	r3, [r3, #0]
 8003930:	b29a      	uxth	r2, r3
 8003932:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8003936:	4013      	ands	r3, r2
 8003938:	83fb      	strh	r3, [r7, #30]
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	8bfa      	ldrh	r2, [r7, #30]
 8003940:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8003944:	b292      	uxth	r2, r2
 8003946:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003950:	b29b      	uxth	r3, r3
 8003952:	461a      	mov	r2, r3
 8003954:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003956:	781b      	ldrb	r3, [r3, #0]
 8003958:	00db      	lsls	r3, r3, #3
 800395a:	4413      	add	r3, r2
 800395c:	3306      	adds	r3, #6
 800395e:	005b      	lsls	r3, r3, #1
 8003960:	687a      	ldr	r2, [r7, #4]
 8003962:	6812      	ldr	r2, [r2, #0]
 8003964:	4413      	add	r3, r2
 8003966:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800396a:	881b      	ldrh	r3, [r3, #0]
 800396c:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8003970:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003972:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8003974:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003976:	69db      	ldr	r3, [r3, #28]
 8003978:	2b00      	cmp	r3, #0
 800397a:	d019      	beq.n	80039b0 <PCD_EP_ISR_Handler+0x1f0>
 800397c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800397e:	695b      	ldr	r3, [r3, #20]
 8003980:	2b00      	cmp	r3, #0
 8003982:	d015      	beq.n	80039b0 <PCD_EP_ISR_Handler+0x1f0>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	6818      	ldr	r0, [r3, #0]
 8003988:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800398a:	6959      	ldr	r1, [r3, #20]
 800398c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800398e:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8003990:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003992:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8003994:	b29b      	uxth	r3, r3
 8003996:	f004 fc83 	bl	80082a0 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 800399a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800399c:	695a      	ldr	r2, [r3, #20]
 800399e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80039a0:	69db      	ldr	r3, [r3, #28]
 80039a2:	441a      	add	r2, r3
 80039a4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80039a6:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 80039a8:	2100      	movs	r1, #0
 80039aa:	6878      	ldr	r0, [r7, #4]
 80039ac:	f006 fa6a 	bl	8009e84 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	881b      	ldrh	r3, [r3, #0]
 80039b6:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 80039ba:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 80039be:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	f040 82bd 	bne.w	8003f42 <PCD_EP_ISR_Handler+0x782>
 80039c8:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 80039cc:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 80039d0:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80039d4:	f000 82b5 	beq.w	8003f42 <PCD_EP_ISR_Handler+0x782>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	61bb      	str	r3, [r7, #24]
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80039e6:	b29b      	uxth	r3, r3
 80039e8:	461a      	mov	r2, r3
 80039ea:	69bb      	ldr	r3, [r7, #24]
 80039ec:	4413      	add	r3, r2
 80039ee:	61bb      	str	r3, [r7, #24]
 80039f0:	69bb      	ldr	r3, [r7, #24]
 80039f2:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80039f6:	617b      	str	r3, [r7, #20]
 80039f8:	697b      	ldr	r3, [r7, #20]
 80039fa:	881b      	ldrh	r3, [r3, #0]
 80039fc:	b29b      	uxth	r3, r3
 80039fe:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003a02:	b29a      	uxth	r2, r3
 8003a04:	697b      	ldr	r3, [r7, #20]
 8003a06:	801a      	strh	r2, [r3, #0]
 8003a08:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003a0a:	691b      	ldr	r3, [r3, #16]
 8003a0c:	2b3e      	cmp	r3, #62	@ 0x3e
 8003a0e:	d91d      	bls.n	8003a4c <PCD_EP_ISR_Handler+0x28c>
 8003a10:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003a12:	691b      	ldr	r3, [r3, #16]
 8003a14:	095b      	lsrs	r3, r3, #5
 8003a16:	647b      	str	r3, [r7, #68]	@ 0x44
 8003a18:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003a1a:	691b      	ldr	r3, [r3, #16]
 8003a1c:	f003 031f 	and.w	r3, r3, #31
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d102      	bne.n	8003a2a <PCD_EP_ISR_Handler+0x26a>
 8003a24:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003a26:	3b01      	subs	r3, #1
 8003a28:	647b      	str	r3, [r7, #68]	@ 0x44
 8003a2a:	697b      	ldr	r3, [r7, #20]
 8003a2c:	881b      	ldrh	r3, [r3, #0]
 8003a2e:	b29a      	uxth	r2, r3
 8003a30:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003a32:	b29b      	uxth	r3, r3
 8003a34:	029b      	lsls	r3, r3, #10
 8003a36:	b29b      	uxth	r3, r3
 8003a38:	4313      	orrs	r3, r2
 8003a3a:	b29b      	uxth	r3, r3
 8003a3c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003a40:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003a44:	b29a      	uxth	r2, r3
 8003a46:	697b      	ldr	r3, [r7, #20]
 8003a48:	801a      	strh	r2, [r3, #0]
 8003a4a:	e026      	b.n	8003a9a <PCD_EP_ISR_Handler+0x2da>
 8003a4c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003a4e:	691b      	ldr	r3, [r3, #16]
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d10a      	bne.n	8003a6a <PCD_EP_ISR_Handler+0x2aa>
 8003a54:	697b      	ldr	r3, [r7, #20]
 8003a56:	881b      	ldrh	r3, [r3, #0]
 8003a58:	b29b      	uxth	r3, r3
 8003a5a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003a5e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003a62:	b29a      	uxth	r2, r3
 8003a64:	697b      	ldr	r3, [r7, #20]
 8003a66:	801a      	strh	r2, [r3, #0]
 8003a68:	e017      	b.n	8003a9a <PCD_EP_ISR_Handler+0x2da>
 8003a6a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003a6c:	691b      	ldr	r3, [r3, #16]
 8003a6e:	085b      	lsrs	r3, r3, #1
 8003a70:	647b      	str	r3, [r7, #68]	@ 0x44
 8003a72:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003a74:	691b      	ldr	r3, [r3, #16]
 8003a76:	f003 0301 	and.w	r3, r3, #1
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d002      	beq.n	8003a84 <PCD_EP_ISR_Handler+0x2c4>
 8003a7e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003a80:	3301      	adds	r3, #1
 8003a82:	647b      	str	r3, [r7, #68]	@ 0x44
 8003a84:	697b      	ldr	r3, [r7, #20]
 8003a86:	881b      	ldrh	r3, [r3, #0]
 8003a88:	b29a      	uxth	r2, r3
 8003a8a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003a8c:	b29b      	uxth	r3, r3
 8003a8e:	029b      	lsls	r3, r3, #10
 8003a90:	b29b      	uxth	r3, r3
 8003a92:	4313      	orrs	r3, r2
 8003a94:	b29a      	uxth	r2, r3
 8003a96:	697b      	ldr	r3, [r7, #20]
 8003a98:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	881b      	ldrh	r3, [r3, #0]
 8003aa0:	b29b      	uxth	r3, r3
 8003aa2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003aa6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003aaa:	827b      	strh	r3, [r7, #18]
 8003aac:	8a7b      	ldrh	r3, [r7, #18]
 8003aae:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8003ab2:	827b      	strh	r3, [r7, #18]
 8003ab4:	8a7b      	ldrh	r3, [r7, #18]
 8003ab6:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8003aba:	827b      	strh	r3, [r7, #18]
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681a      	ldr	r2, [r3, #0]
 8003ac0:	8a7b      	ldrh	r3, [r7, #18]
 8003ac2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003ac6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003aca:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003ace:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003ad2:	b29b      	uxth	r3, r3
 8003ad4:	8013      	strh	r3, [r2, #0]
 8003ad6:	e234      	b.n	8003f42 <PCD_EP_ISR_Handler+0x782>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	461a      	mov	r2, r3
 8003ade:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8003ae2:	009b      	lsls	r3, r3, #2
 8003ae4:	4413      	add	r3, r2
 8003ae6:	881b      	ldrh	r3, [r3, #0]
 8003ae8:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8003aec:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	@ 0x4a
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	f280 80fc 	bge.w	8003cee <PCD_EP_ISR_Handler+0x52e>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	461a      	mov	r2, r3
 8003afc:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8003b00:	009b      	lsls	r3, r3, #2
 8003b02:	4413      	add	r3, r2
 8003b04:	881b      	ldrh	r3, [r3, #0]
 8003b06:	b29a      	uxth	r2, r3
 8003b08:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8003b0c:	4013      	ands	r3, r2
 8003b0e:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	461a      	mov	r2, r3
 8003b18:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8003b1c:	009b      	lsls	r3, r3, #2
 8003b1e:	4413      	add	r3, r2
 8003b20:	f8b7 2048 	ldrh.w	r2, [r7, #72]	@ 0x48
 8003b24:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8003b28:	b292      	uxth	r2, r2
 8003b2a:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8003b2c:	f897 204d 	ldrb.w	r2, [r7, #77]	@ 0x4d
 8003b30:	4613      	mov	r3, r2
 8003b32:	009b      	lsls	r3, r3, #2
 8003b34:	4413      	add	r3, r2
 8003b36:	00db      	lsls	r3, r3, #3
 8003b38:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8003b3c:	687a      	ldr	r2, [r7, #4]
 8003b3e:	4413      	add	r3, r2
 8003b40:	657b      	str	r3, [r7, #84]	@ 0x54

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8003b42:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003b44:	7b1b      	ldrb	r3, [r3, #12]
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d125      	bne.n	8003b96 <PCD_EP_ISR_Handler+0x3d6>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003b52:	b29b      	uxth	r3, r3
 8003b54:	461a      	mov	r2, r3
 8003b56:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003b58:	781b      	ldrb	r3, [r3, #0]
 8003b5a:	00db      	lsls	r3, r3, #3
 8003b5c:	4413      	add	r3, r2
 8003b5e:	3306      	adds	r3, #6
 8003b60:	005b      	lsls	r3, r3, #1
 8003b62:	687a      	ldr	r2, [r7, #4]
 8003b64:	6812      	ldr	r2, [r2, #0]
 8003b66:	4413      	add	r3, r2
 8003b68:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8003b6c:	881b      	ldrh	r3, [r3, #0]
 8003b6e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003b72:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

          if (count != 0U)
 8003b76:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	f000 8092 	beq.w	8003ca4 <PCD_EP_ISR_Handler+0x4e4>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	6818      	ldr	r0, [r3, #0]
 8003b84:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003b86:	6959      	ldr	r1, [r3, #20]
 8003b88:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003b8a:	88da      	ldrh	r2, [r3, #6]
 8003b8c:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8003b90:	f004 fb86 	bl	80082a0 <USB_ReadPMA>
 8003b94:	e086      	b.n	8003ca4 <PCD_EP_ISR_Handler+0x4e4>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8003b96:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003b98:	78db      	ldrb	r3, [r3, #3]
 8003b9a:	2b02      	cmp	r3, #2
 8003b9c:	d10a      	bne.n	8003bb4 <PCD_EP_ISR_Handler+0x3f4>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8003b9e:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8003ba2:	461a      	mov	r2, r3
 8003ba4:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8003ba6:	6878      	ldr	r0, [r7, #4]
 8003ba8:	f000 f9d9 	bl	8003f5e <HAL_PCD_EP_DB_Receive>
 8003bac:	4603      	mov	r3, r0
 8003bae:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50
 8003bb2:	e077      	b.n	8003ca4 <PCD_EP_ISR_Handler+0x4e4>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	461a      	mov	r2, r3
 8003bba:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003bbc:	781b      	ldrb	r3, [r3, #0]
 8003bbe:	009b      	lsls	r3, r3, #2
 8003bc0:	4413      	add	r3, r2
 8003bc2:	881b      	ldrh	r3, [r3, #0]
 8003bc4:	b29b      	uxth	r3, r3
 8003bc6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003bca:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003bce:	f8a7 3052 	strh.w	r3, [r7, #82]	@ 0x52
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	461a      	mov	r2, r3
 8003bd8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003bda:	781b      	ldrb	r3, [r3, #0]
 8003bdc:	009b      	lsls	r3, r3, #2
 8003bde:	441a      	add	r2, r3
 8003be0:	f8b7 3052 	ldrh.w	r3, [r7, #82]	@ 0x52
 8003be4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003be8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003bec:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003bf0:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8003bf4:	b29b      	uxth	r3, r3
 8003bf6:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	461a      	mov	r2, r3
 8003bfe:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003c00:	781b      	ldrb	r3, [r3, #0]
 8003c02:	009b      	lsls	r3, r3, #2
 8003c04:	4413      	add	r3, r2
 8003c06:	881b      	ldrh	r3, [r3, #0]
 8003c08:	b29b      	uxth	r3, r3
 8003c0a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d024      	beq.n	8003c5c <PCD_EP_ISR_Handler+0x49c>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003c1a:	b29b      	uxth	r3, r3
 8003c1c:	461a      	mov	r2, r3
 8003c1e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003c20:	781b      	ldrb	r3, [r3, #0]
 8003c22:	00db      	lsls	r3, r3, #3
 8003c24:	4413      	add	r3, r2
 8003c26:	3302      	adds	r3, #2
 8003c28:	005b      	lsls	r3, r3, #1
 8003c2a:	687a      	ldr	r2, [r7, #4]
 8003c2c:	6812      	ldr	r2, [r2, #0]
 8003c2e:	4413      	add	r3, r2
 8003c30:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8003c34:	881b      	ldrh	r3, [r3, #0]
 8003c36:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003c3a:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

              if (count != 0U)
 8003c3e:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d02e      	beq.n	8003ca4 <PCD_EP_ISR_Handler+0x4e4>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	6818      	ldr	r0, [r3, #0]
 8003c4a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003c4c:	6959      	ldr	r1, [r3, #20]
 8003c4e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003c50:	891a      	ldrh	r2, [r3, #8]
 8003c52:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8003c56:	f004 fb23 	bl	80082a0 <USB_ReadPMA>
 8003c5a:	e023      	b.n	8003ca4 <PCD_EP_ISR_Handler+0x4e4>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003c64:	b29b      	uxth	r3, r3
 8003c66:	461a      	mov	r2, r3
 8003c68:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003c6a:	781b      	ldrb	r3, [r3, #0]
 8003c6c:	00db      	lsls	r3, r3, #3
 8003c6e:	4413      	add	r3, r2
 8003c70:	3306      	adds	r3, #6
 8003c72:	005b      	lsls	r3, r3, #1
 8003c74:	687a      	ldr	r2, [r7, #4]
 8003c76:	6812      	ldr	r2, [r2, #0]
 8003c78:	4413      	add	r3, r2
 8003c7a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8003c7e:	881b      	ldrh	r3, [r3, #0]
 8003c80:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003c84:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

              if (count != 0U)
 8003c88:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d009      	beq.n	8003ca4 <PCD_EP_ISR_Handler+0x4e4>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	6818      	ldr	r0, [r3, #0]
 8003c94:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003c96:	6959      	ldr	r1, [r3, #20]
 8003c98:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003c9a:	895a      	ldrh	r2, [r3, #10]
 8003c9c:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8003ca0:	f004 fafe 	bl	80082a0 <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8003ca4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003ca6:	69da      	ldr	r2, [r3, #28]
 8003ca8:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8003cac:	441a      	add	r2, r3
 8003cae:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003cb0:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8003cb2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003cb4:	695a      	ldr	r2, [r3, #20]
 8003cb6:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8003cba:	441a      	add	r2, r3
 8003cbc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003cbe:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8003cc0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003cc2:	699b      	ldr	r3, [r3, #24]
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	d005      	beq.n	8003cd4 <PCD_EP_ISR_Handler+0x514>
 8003cc8:	f8b7 2050 	ldrh.w	r2, [r7, #80]	@ 0x50
 8003ccc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003cce:	691b      	ldr	r3, [r3, #16]
 8003cd0:	429a      	cmp	r2, r3
 8003cd2:	d206      	bcs.n	8003ce2 <PCD_EP_ISR_Handler+0x522>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8003cd4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003cd6:	781b      	ldrb	r3, [r3, #0]
 8003cd8:	4619      	mov	r1, r3
 8003cda:	6878      	ldr	r0, [r7, #4]
 8003cdc:	f006 f8d2 	bl	8009e84 <HAL_PCD_DataOutStageCallback>
 8003ce0:	e005      	b.n	8003cee <PCD_EP_ISR_Handler+0x52e>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8003ce8:	4618      	mov	r0, r3
 8003cea:	f002 fda5 	bl	8006838 <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8003cee:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8003cf2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	f000 8123 	beq.w	8003f42 <PCD_EP_ISR_Handler+0x782>
      {
        ep = &hpcd->IN_ep[epindex];
 8003cfc:	f897 204d 	ldrb.w	r2, [r7, #77]	@ 0x4d
 8003d00:	4613      	mov	r3, r2
 8003d02:	009b      	lsls	r3, r3, #2
 8003d04:	4413      	add	r3, r2
 8003d06:	00db      	lsls	r3, r3, #3
 8003d08:	3310      	adds	r3, #16
 8003d0a:	687a      	ldr	r2, [r7, #4]
 8003d0c:	4413      	add	r3, r2
 8003d0e:	657b      	str	r3, [r7, #84]	@ 0x54

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	461a      	mov	r2, r3
 8003d16:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8003d1a:	009b      	lsls	r3, r3, #2
 8003d1c:	4413      	add	r3, r2
 8003d1e:	881b      	ldrh	r3, [r3, #0]
 8003d20:	b29b      	uxth	r3, r3
 8003d22:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 8003d26:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003d2a:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	461a      	mov	r2, r3
 8003d34:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8003d38:	009b      	lsls	r3, r3, #2
 8003d3a:	441a      	add	r2, r3
 8003d3c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8003d40:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003d44:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003d48:	b29b      	uxth	r3, r3
 8003d4a:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 8003d4c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003d4e:	78db      	ldrb	r3, [r3, #3]
 8003d50:	2b01      	cmp	r3, #1
 8003d52:	f040 80a2 	bne.w	8003e9a <PCD_EP_ISR_Handler+0x6da>
        {
          ep->xfer_len = 0U;
 8003d56:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003d58:	2200      	movs	r2, #0
 8003d5a:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 8003d5c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003d5e:	7b1b      	ldrb	r3, [r3, #12]
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	f000 8093 	beq.w	8003e8c <PCD_EP_ISR_Handler+0x6cc>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8003d66:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8003d6a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d046      	beq.n	8003e00 <PCD_EP_ISR_Handler+0x640>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003d72:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003d74:	785b      	ldrb	r3, [r3, #1]
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d126      	bne.n	8003dc8 <PCD_EP_ISR_Handler+0x608>
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	627b      	str	r3, [r7, #36]	@ 0x24
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003d88:	b29b      	uxth	r3, r3
 8003d8a:	461a      	mov	r2, r3
 8003d8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d8e:	4413      	add	r3, r2
 8003d90:	627b      	str	r3, [r7, #36]	@ 0x24
 8003d92:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003d94:	781b      	ldrb	r3, [r3, #0]
 8003d96:	011a      	lsls	r2, r3, #4
 8003d98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d9a:	4413      	add	r3, r2
 8003d9c:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8003da0:	623b      	str	r3, [r7, #32]
 8003da2:	6a3b      	ldr	r3, [r7, #32]
 8003da4:	881b      	ldrh	r3, [r3, #0]
 8003da6:	b29b      	uxth	r3, r3
 8003da8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003dac:	b29a      	uxth	r2, r3
 8003dae:	6a3b      	ldr	r3, [r7, #32]
 8003db0:	801a      	strh	r2, [r3, #0]
 8003db2:	6a3b      	ldr	r3, [r7, #32]
 8003db4:	881b      	ldrh	r3, [r3, #0]
 8003db6:	b29b      	uxth	r3, r3
 8003db8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003dbc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003dc0:	b29a      	uxth	r2, r3
 8003dc2:	6a3b      	ldr	r3, [r7, #32]
 8003dc4:	801a      	strh	r2, [r3, #0]
 8003dc6:	e061      	b.n	8003e8c <PCD_EP_ISR_Handler+0x6cc>
 8003dc8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003dca:	785b      	ldrb	r3, [r3, #1]
 8003dcc:	2b01      	cmp	r3, #1
 8003dce:	d15d      	bne.n	8003e8c <PCD_EP_ISR_Handler+0x6cc>
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003dde:	b29b      	uxth	r3, r3
 8003de0:	461a      	mov	r2, r3
 8003de2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003de4:	4413      	add	r3, r2
 8003de6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003de8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003dea:	781b      	ldrb	r3, [r3, #0]
 8003dec:	011a      	lsls	r2, r3, #4
 8003dee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003df0:	4413      	add	r3, r2
 8003df2:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8003df6:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003df8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003dfa:	2200      	movs	r2, #0
 8003dfc:	801a      	strh	r2, [r3, #0]
 8003dfe:	e045      	b.n	8003e8c <PCD_EP_ISR_Handler+0x6cc>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003e06:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003e08:	785b      	ldrb	r3, [r3, #1]
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d126      	bne.n	8003e5c <PCD_EP_ISR_Handler+0x69c>
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	637b      	str	r3, [r7, #52]	@ 0x34
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003e1c:	b29b      	uxth	r3, r3
 8003e1e:	461a      	mov	r2, r3
 8003e20:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003e22:	4413      	add	r3, r2
 8003e24:	637b      	str	r3, [r7, #52]	@ 0x34
 8003e26:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003e28:	781b      	ldrb	r3, [r3, #0]
 8003e2a:	011a      	lsls	r2, r3, #4
 8003e2c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003e2e:	4413      	add	r3, r2
 8003e30:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8003e34:	633b      	str	r3, [r7, #48]	@ 0x30
 8003e36:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003e38:	881b      	ldrh	r3, [r3, #0]
 8003e3a:	b29b      	uxth	r3, r3
 8003e3c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003e40:	b29a      	uxth	r2, r3
 8003e42:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003e44:	801a      	strh	r2, [r3, #0]
 8003e46:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003e48:	881b      	ldrh	r3, [r3, #0]
 8003e4a:	b29b      	uxth	r3, r3
 8003e4c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003e50:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003e54:	b29a      	uxth	r2, r3
 8003e56:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003e58:	801a      	strh	r2, [r3, #0]
 8003e5a:	e017      	b.n	8003e8c <PCD_EP_ISR_Handler+0x6cc>
 8003e5c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003e5e:	785b      	ldrb	r3, [r3, #1]
 8003e60:	2b01      	cmp	r3, #1
 8003e62:	d113      	bne.n	8003e8c <PCD_EP_ISR_Handler+0x6cc>
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003e6c:	b29b      	uxth	r3, r3
 8003e6e:	461a      	mov	r2, r3
 8003e70:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003e72:	4413      	add	r3, r2
 8003e74:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003e76:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003e78:	781b      	ldrb	r3, [r3, #0]
 8003e7a:	011a      	lsls	r2, r3, #4
 8003e7c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003e7e:	4413      	add	r3, r2
 8003e80:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8003e84:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003e86:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003e88:	2200      	movs	r2, #0
 8003e8a:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003e8c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003e8e:	781b      	ldrb	r3, [r3, #0]
 8003e90:	4619      	mov	r1, r3
 8003e92:	6878      	ldr	r0, [r7, #4]
 8003e94:	f006 f811 	bl	8009eba <HAL_PCD_DataInStageCallback>
 8003e98:	e053      	b.n	8003f42 <PCD_EP_ISR_Handler+0x782>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 8003e9a:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8003e9e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d146      	bne.n	8003f34 <PCD_EP_ISR_Handler+0x774>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003eae:	b29b      	uxth	r3, r3
 8003eb0:	461a      	mov	r2, r3
 8003eb2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003eb4:	781b      	ldrb	r3, [r3, #0]
 8003eb6:	00db      	lsls	r3, r3, #3
 8003eb8:	4413      	add	r3, r2
 8003eba:	3302      	adds	r3, #2
 8003ebc:	005b      	lsls	r3, r3, #1
 8003ebe:	687a      	ldr	r2, [r7, #4]
 8003ec0:	6812      	ldr	r2, [r2, #0]
 8003ec2:	4413      	add	r3, r2
 8003ec4:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8003ec8:	881b      	ldrh	r3, [r3, #0]
 8003eca:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003ece:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40

            if (ep->xfer_len > TxPctSize)
 8003ed2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003ed4:	699a      	ldr	r2, [r3, #24]
 8003ed6:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8003eda:	429a      	cmp	r2, r3
 8003edc:	d907      	bls.n	8003eee <PCD_EP_ISR_Handler+0x72e>
            {
              ep->xfer_len -= TxPctSize;
 8003ede:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003ee0:	699a      	ldr	r2, [r3, #24]
 8003ee2:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8003ee6:	1ad2      	subs	r2, r2, r3
 8003ee8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003eea:	619a      	str	r2, [r3, #24]
 8003eec:	e002      	b.n	8003ef4 <PCD_EP_ISR_Handler+0x734>
            }
            else
            {
              ep->xfer_len = 0U;
 8003eee:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003ef0:	2200      	movs	r2, #0
 8003ef2:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 8003ef4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003ef6:	699b      	ldr	r3, [r3, #24]
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d106      	bne.n	8003f0a <PCD_EP_ISR_Handler+0x74a>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003efc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003efe:	781b      	ldrb	r3, [r3, #0]
 8003f00:	4619      	mov	r1, r3
 8003f02:	6878      	ldr	r0, [r7, #4]
 8003f04:	f005 ffd9 	bl	8009eba <HAL_PCD_DataInStageCallback>
 8003f08:	e01b      	b.n	8003f42 <PCD_EP_ISR_Handler+0x782>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 8003f0a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003f0c:	695a      	ldr	r2, [r3, #20]
 8003f0e:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8003f12:	441a      	add	r2, r3
 8003f14:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003f16:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 8003f18:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003f1a:	69da      	ldr	r2, [r3, #28]
 8003f1c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8003f20:	441a      	add	r2, r3
 8003f22:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003f24:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8003f2c:	4618      	mov	r0, r3
 8003f2e:	f002 fc83 	bl	8006838 <USB_EPStartXfer>
 8003f32:	e006      	b.n	8003f42 <PCD_EP_ISR_Handler+0x782>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8003f34:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8003f38:	461a      	mov	r2, r3
 8003f3a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8003f3c:	6878      	ldr	r0, [r7, #4]
 8003f3e:	f000 f91b 	bl	8004178 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8003f4a:	b29b      	uxth	r3, r3
 8003f4c:	b21b      	sxth	r3, r3
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	f6ff ac3b 	blt.w	80037ca <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8003f54:	2300      	movs	r3, #0
}
 8003f56:	4618      	mov	r0, r3
 8003f58:	3758      	adds	r7, #88	@ 0x58
 8003f5a:	46bd      	mov	sp, r7
 8003f5c:	bd80      	pop	{r7, pc}

08003f5e <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8003f5e:	b580      	push	{r7, lr}
 8003f60:	b088      	sub	sp, #32
 8003f62:	af00      	add	r7, sp, #0
 8003f64:	60f8      	str	r0, [r7, #12]
 8003f66:	60b9      	str	r1, [r7, #8]
 8003f68:	4613      	mov	r3, r2
 8003f6a:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8003f6c:	88fb      	ldrh	r3, [r7, #6]
 8003f6e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d07e      	beq.n	8004074 <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003f7e:	b29b      	uxth	r3, r3
 8003f80:	461a      	mov	r2, r3
 8003f82:	68bb      	ldr	r3, [r7, #8]
 8003f84:	781b      	ldrb	r3, [r3, #0]
 8003f86:	00db      	lsls	r3, r3, #3
 8003f88:	4413      	add	r3, r2
 8003f8a:	3302      	adds	r3, #2
 8003f8c:	005b      	lsls	r3, r3, #1
 8003f8e:	68fa      	ldr	r2, [r7, #12]
 8003f90:	6812      	ldr	r2, [r2, #0]
 8003f92:	4413      	add	r3, r2
 8003f94:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8003f98:	881b      	ldrh	r3, [r3, #0]
 8003f9a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003f9e:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8003fa0:	68bb      	ldr	r3, [r7, #8]
 8003fa2:	699a      	ldr	r2, [r3, #24]
 8003fa4:	8b7b      	ldrh	r3, [r7, #26]
 8003fa6:	429a      	cmp	r2, r3
 8003fa8:	d306      	bcc.n	8003fb8 <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 8003faa:	68bb      	ldr	r3, [r7, #8]
 8003fac:	699a      	ldr	r2, [r3, #24]
 8003fae:	8b7b      	ldrh	r3, [r7, #26]
 8003fb0:	1ad2      	subs	r2, r2, r3
 8003fb2:	68bb      	ldr	r3, [r7, #8]
 8003fb4:	619a      	str	r2, [r3, #24]
 8003fb6:	e002      	b.n	8003fbe <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 8003fb8:	68bb      	ldr	r3, [r7, #8]
 8003fba:	2200      	movs	r2, #0
 8003fbc:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8003fbe:	68bb      	ldr	r3, [r7, #8]
 8003fc0:	699b      	ldr	r3, [r3, #24]
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d123      	bne.n	800400e <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	461a      	mov	r2, r3
 8003fcc:	68bb      	ldr	r3, [r7, #8]
 8003fce:	781b      	ldrb	r3, [r3, #0]
 8003fd0:	009b      	lsls	r3, r3, #2
 8003fd2:	4413      	add	r3, r2
 8003fd4:	881b      	ldrh	r3, [r3, #0]
 8003fd6:	b29b      	uxth	r3, r3
 8003fd8:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003fdc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003fe0:	833b      	strh	r3, [r7, #24]
 8003fe2:	8b3b      	ldrh	r3, [r7, #24]
 8003fe4:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8003fe8:	833b      	strh	r3, [r7, #24]
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	461a      	mov	r2, r3
 8003ff0:	68bb      	ldr	r3, [r7, #8]
 8003ff2:	781b      	ldrb	r3, [r3, #0]
 8003ff4:	009b      	lsls	r3, r3, #2
 8003ff6:	441a      	add	r2, r3
 8003ff8:	8b3b      	ldrh	r3, [r7, #24]
 8003ffa:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003ffe:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004002:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004006:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800400a:	b29b      	uxth	r3, r3
 800400c:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800400e:	88fb      	ldrh	r3, [r7, #6]
 8004010:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004014:	2b00      	cmp	r3, #0
 8004016:	d01f      	beq.n	8004058 <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	461a      	mov	r2, r3
 800401e:	68bb      	ldr	r3, [r7, #8]
 8004020:	781b      	ldrb	r3, [r3, #0]
 8004022:	009b      	lsls	r3, r3, #2
 8004024:	4413      	add	r3, r2
 8004026:	881b      	ldrh	r3, [r3, #0]
 8004028:	b29b      	uxth	r3, r3
 800402a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800402e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004032:	82fb      	strh	r3, [r7, #22]
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	461a      	mov	r2, r3
 800403a:	68bb      	ldr	r3, [r7, #8]
 800403c:	781b      	ldrb	r3, [r3, #0]
 800403e:	009b      	lsls	r3, r3, #2
 8004040:	441a      	add	r2, r3
 8004042:	8afb      	ldrh	r3, [r7, #22]
 8004044:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004048:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800404c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004050:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8004054:	b29b      	uxth	r3, r3
 8004056:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8004058:	8b7b      	ldrh	r3, [r7, #26]
 800405a:	2b00      	cmp	r3, #0
 800405c:	f000 8087 	beq.w	800416e <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	6818      	ldr	r0, [r3, #0]
 8004064:	68bb      	ldr	r3, [r7, #8]
 8004066:	6959      	ldr	r1, [r3, #20]
 8004068:	68bb      	ldr	r3, [r7, #8]
 800406a:	891a      	ldrh	r2, [r3, #8]
 800406c:	8b7b      	ldrh	r3, [r7, #26]
 800406e:	f004 f917 	bl	80082a0 <USB_ReadPMA>
 8004072:	e07c      	b.n	800416e <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800407c:	b29b      	uxth	r3, r3
 800407e:	461a      	mov	r2, r3
 8004080:	68bb      	ldr	r3, [r7, #8]
 8004082:	781b      	ldrb	r3, [r3, #0]
 8004084:	00db      	lsls	r3, r3, #3
 8004086:	4413      	add	r3, r2
 8004088:	3306      	adds	r3, #6
 800408a:	005b      	lsls	r3, r3, #1
 800408c:	68fa      	ldr	r2, [r7, #12]
 800408e:	6812      	ldr	r2, [r2, #0]
 8004090:	4413      	add	r3, r2
 8004092:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8004096:	881b      	ldrh	r3, [r3, #0]
 8004098:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800409c:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 800409e:	68bb      	ldr	r3, [r7, #8]
 80040a0:	699a      	ldr	r2, [r3, #24]
 80040a2:	8b7b      	ldrh	r3, [r7, #26]
 80040a4:	429a      	cmp	r2, r3
 80040a6:	d306      	bcc.n	80040b6 <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 80040a8:	68bb      	ldr	r3, [r7, #8]
 80040aa:	699a      	ldr	r2, [r3, #24]
 80040ac:	8b7b      	ldrh	r3, [r7, #26]
 80040ae:	1ad2      	subs	r2, r2, r3
 80040b0:	68bb      	ldr	r3, [r7, #8]
 80040b2:	619a      	str	r2, [r3, #24]
 80040b4:	e002      	b.n	80040bc <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 80040b6:	68bb      	ldr	r3, [r7, #8]
 80040b8:	2200      	movs	r2, #0
 80040ba:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 80040bc:	68bb      	ldr	r3, [r7, #8]
 80040be:	699b      	ldr	r3, [r3, #24]
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	d123      	bne.n	800410c <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	461a      	mov	r2, r3
 80040ca:	68bb      	ldr	r3, [r7, #8]
 80040cc:	781b      	ldrb	r3, [r3, #0]
 80040ce:	009b      	lsls	r3, r3, #2
 80040d0:	4413      	add	r3, r2
 80040d2:	881b      	ldrh	r3, [r3, #0]
 80040d4:	b29b      	uxth	r3, r3
 80040d6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80040da:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80040de:	83fb      	strh	r3, [r7, #30]
 80040e0:	8bfb      	ldrh	r3, [r7, #30]
 80040e2:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 80040e6:	83fb      	strh	r3, [r7, #30]
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	461a      	mov	r2, r3
 80040ee:	68bb      	ldr	r3, [r7, #8]
 80040f0:	781b      	ldrb	r3, [r3, #0]
 80040f2:	009b      	lsls	r3, r3, #2
 80040f4:	441a      	add	r2, r3
 80040f6:	8bfb      	ldrh	r3, [r7, #30]
 80040f8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80040fc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004100:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004104:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004108:	b29b      	uxth	r3, r3
 800410a:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 800410c:	88fb      	ldrh	r3, [r7, #6]
 800410e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004112:	2b00      	cmp	r3, #0
 8004114:	d11f      	bne.n	8004156 <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	461a      	mov	r2, r3
 800411c:	68bb      	ldr	r3, [r7, #8]
 800411e:	781b      	ldrb	r3, [r3, #0]
 8004120:	009b      	lsls	r3, r3, #2
 8004122:	4413      	add	r3, r2
 8004124:	881b      	ldrh	r3, [r3, #0]
 8004126:	b29b      	uxth	r3, r3
 8004128:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800412c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004130:	83bb      	strh	r3, [r7, #28]
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	461a      	mov	r2, r3
 8004138:	68bb      	ldr	r3, [r7, #8]
 800413a:	781b      	ldrb	r3, [r3, #0]
 800413c:	009b      	lsls	r3, r3, #2
 800413e:	441a      	add	r2, r3
 8004140:	8bbb      	ldrh	r3, [r7, #28]
 8004142:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004146:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800414a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800414e:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8004152:	b29b      	uxth	r3, r3
 8004154:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8004156:	8b7b      	ldrh	r3, [r7, #26]
 8004158:	2b00      	cmp	r3, #0
 800415a:	d008      	beq.n	800416e <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	6818      	ldr	r0, [r3, #0]
 8004160:	68bb      	ldr	r3, [r7, #8]
 8004162:	6959      	ldr	r1, [r3, #20]
 8004164:	68bb      	ldr	r3, [r7, #8]
 8004166:	895a      	ldrh	r2, [r3, #10]
 8004168:	8b7b      	ldrh	r3, [r7, #26]
 800416a:	f004 f899 	bl	80082a0 <USB_ReadPMA>
    }
  }

  return count;
 800416e:	8b7b      	ldrh	r3, [r7, #26]
}
 8004170:	4618      	mov	r0, r3
 8004172:	3720      	adds	r7, #32
 8004174:	46bd      	mov	sp, r7
 8004176:	bd80      	pop	{r7, pc}

08004178 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8004178:	b580      	push	{r7, lr}
 800417a:	b0a4      	sub	sp, #144	@ 0x90
 800417c:	af00      	add	r7, sp, #0
 800417e:	60f8      	str	r0, [r7, #12]
 8004180:	60b9      	str	r1, [r7, #8]
 8004182:	4613      	mov	r3, r2
 8004184:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8004186:	88fb      	ldrh	r3, [r7, #6]
 8004188:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800418c:	2b00      	cmp	r3, #0
 800418e:	f000 81dd 	beq.w	800454c <HAL_PCD_EP_DB_Transmit+0x3d4>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800419a:	b29b      	uxth	r3, r3
 800419c:	461a      	mov	r2, r3
 800419e:	68bb      	ldr	r3, [r7, #8]
 80041a0:	781b      	ldrb	r3, [r3, #0]
 80041a2:	00db      	lsls	r3, r3, #3
 80041a4:	4413      	add	r3, r2
 80041a6:	3302      	adds	r3, #2
 80041a8:	005b      	lsls	r3, r3, #1
 80041aa:	68fa      	ldr	r2, [r7, #12]
 80041ac:	6812      	ldr	r2, [r2, #0]
 80041ae:	4413      	add	r3, r2
 80041b0:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80041b4:	881b      	ldrh	r3, [r3, #0]
 80041b6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80041ba:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86

    if (ep->xfer_len > TxPctSize)
 80041be:	68bb      	ldr	r3, [r7, #8]
 80041c0:	699a      	ldr	r2, [r3, #24]
 80041c2:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 80041c6:	429a      	cmp	r2, r3
 80041c8:	d907      	bls.n	80041da <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxPctSize;
 80041ca:	68bb      	ldr	r3, [r7, #8]
 80041cc:	699a      	ldr	r2, [r3, #24]
 80041ce:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 80041d2:	1ad2      	subs	r2, r2, r3
 80041d4:	68bb      	ldr	r3, [r7, #8]
 80041d6:	619a      	str	r2, [r3, #24]
 80041d8:	e002      	b.n	80041e0 <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 80041da:	68bb      	ldr	r3, [r7, #8]
 80041dc:	2200      	movs	r2, #0
 80041de:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 80041e0:	68bb      	ldr	r3, [r7, #8]
 80041e2:	699b      	ldr	r3, [r3, #24]
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	f040 80b9 	bne.w	800435c <HAL_PCD_EP_DB_Transmit+0x1e4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80041ea:	68bb      	ldr	r3, [r7, #8]
 80041ec:	785b      	ldrb	r3, [r3, #1]
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d126      	bne.n	8004240 <HAL_PCD_EP_DB_Transmit+0xc8>
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004200:	b29b      	uxth	r3, r3
 8004202:	461a      	mov	r2, r3
 8004204:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004206:	4413      	add	r3, r2
 8004208:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800420a:	68bb      	ldr	r3, [r7, #8]
 800420c:	781b      	ldrb	r3, [r3, #0]
 800420e:	011a      	lsls	r2, r3, #4
 8004210:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004212:	4413      	add	r3, r2
 8004214:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8004218:	62bb      	str	r3, [r7, #40]	@ 0x28
 800421a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800421c:	881b      	ldrh	r3, [r3, #0]
 800421e:	b29b      	uxth	r3, r3
 8004220:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004224:	b29a      	uxth	r2, r3
 8004226:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004228:	801a      	strh	r2, [r3, #0]
 800422a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800422c:	881b      	ldrh	r3, [r3, #0]
 800422e:	b29b      	uxth	r3, r3
 8004230:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004234:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004238:	b29a      	uxth	r2, r3
 800423a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800423c:	801a      	strh	r2, [r3, #0]
 800423e:	e01a      	b.n	8004276 <HAL_PCD_EP_DB_Transmit+0xfe>
 8004240:	68bb      	ldr	r3, [r7, #8]
 8004242:	785b      	ldrb	r3, [r3, #1]
 8004244:	2b01      	cmp	r3, #1
 8004246:	d116      	bne.n	8004276 <HAL_PCD_EP_DB_Transmit+0xfe>
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	637b      	str	r3, [r7, #52]	@ 0x34
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004256:	b29b      	uxth	r3, r3
 8004258:	461a      	mov	r2, r3
 800425a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800425c:	4413      	add	r3, r2
 800425e:	637b      	str	r3, [r7, #52]	@ 0x34
 8004260:	68bb      	ldr	r3, [r7, #8]
 8004262:	781b      	ldrb	r3, [r3, #0]
 8004264:	011a      	lsls	r2, r3, #4
 8004266:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004268:	4413      	add	r3, r2
 800426a:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800426e:	633b      	str	r3, [r7, #48]	@ 0x30
 8004270:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004272:	2200      	movs	r2, #0
 8004274:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	627b      	str	r3, [r7, #36]	@ 0x24
 800427c:	68bb      	ldr	r3, [r7, #8]
 800427e:	785b      	ldrb	r3, [r3, #1]
 8004280:	2b00      	cmp	r3, #0
 8004282:	d126      	bne.n	80042d2 <HAL_PCD_EP_DB_Transmit+0x15a>
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	61fb      	str	r3, [r7, #28]
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004292:	b29b      	uxth	r3, r3
 8004294:	461a      	mov	r2, r3
 8004296:	69fb      	ldr	r3, [r7, #28]
 8004298:	4413      	add	r3, r2
 800429a:	61fb      	str	r3, [r7, #28]
 800429c:	68bb      	ldr	r3, [r7, #8]
 800429e:	781b      	ldrb	r3, [r3, #0]
 80042a0:	011a      	lsls	r2, r3, #4
 80042a2:	69fb      	ldr	r3, [r7, #28]
 80042a4:	4413      	add	r3, r2
 80042a6:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80042aa:	61bb      	str	r3, [r7, #24]
 80042ac:	69bb      	ldr	r3, [r7, #24]
 80042ae:	881b      	ldrh	r3, [r3, #0]
 80042b0:	b29b      	uxth	r3, r3
 80042b2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80042b6:	b29a      	uxth	r2, r3
 80042b8:	69bb      	ldr	r3, [r7, #24]
 80042ba:	801a      	strh	r2, [r3, #0]
 80042bc:	69bb      	ldr	r3, [r7, #24]
 80042be:	881b      	ldrh	r3, [r3, #0]
 80042c0:	b29b      	uxth	r3, r3
 80042c2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80042c6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80042ca:	b29a      	uxth	r2, r3
 80042cc:	69bb      	ldr	r3, [r7, #24]
 80042ce:	801a      	strh	r2, [r3, #0]
 80042d0:	e017      	b.n	8004302 <HAL_PCD_EP_DB_Transmit+0x18a>
 80042d2:	68bb      	ldr	r3, [r7, #8]
 80042d4:	785b      	ldrb	r3, [r3, #1]
 80042d6:	2b01      	cmp	r3, #1
 80042d8:	d113      	bne.n	8004302 <HAL_PCD_EP_DB_Transmit+0x18a>
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80042e2:	b29b      	uxth	r3, r3
 80042e4:	461a      	mov	r2, r3
 80042e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042e8:	4413      	add	r3, r2
 80042ea:	627b      	str	r3, [r7, #36]	@ 0x24
 80042ec:	68bb      	ldr	r3, [r7, #8]
 80042ee:	781b      	ldrb	r3, [r3, #0]
 80042f0:	011a      	lsls	r2, r3, #4
 80042f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042f4:	4413      	add	r3, r2
 80042f6:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80042fa:	623b      	str	r3, [r7, #32]
 80042fc:	6a3b      	ldr	r3, [r7, #32]
 80042fe:	2200      	movs	r2, #0
 8004300:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8004302:	68bb      	ldr	r3, [r7, #8]
 8004304:	781b      	ldrb	r3, [r3, #0]
 8004306:	4619      	mov	r1, r3
 8004308:	68f8      	ldr	r0, [r7, #12]
 800430a:	f005 fdd6 	bl	8009eba <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800430e:	88fb      	ldrh	r3, [r7, #6]
 8004310:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004314:	2b00      	cmp	r3, #0
 8004316:	f000 82fc 	beq.w	8004912 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	461a      	mov	r2, r3
 8004320:	68bb      	ldr	r3, [r7, #8]
 8004322:	781b      	ldrb	r3, [r3, #0]
 8004324:	009b      	lsls	r3, r3, #2
 8004326:	4413      	add	r3, r2
 8004328:	881b      	ldrh	r3, [r3, #0]
 800432a:	b29b      	uxth	r3, r3
 800432c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004330:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004334:	82fb      	strh	r3, [r7, #22]
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	461a      	mov	r2, r3
 800433c:	68bb      	ldr	r3, [r7, #8]
 800433e:	781b      	ldrb	r3, [r3, #0]
 8004340:	009b      	lsls	r3, r3, #2
 8004342:	441a      	add	r2, r3
 8004344:	8afb      	ldrh	r3, [r7, #22]
 8004346:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800434a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800434e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004352:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004356:	b29b      	uxth	r3, r3
 8004358:	8013      	strh	r3, [r2, #0]
 800435a:	e2da      	b.n	8004912 <HAL_PCD_EP_DB_Transmit+0x79a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800435c:	88fb      	ldrh	r3, [r7, #6]
 800435e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004362:	2b00      	cmp	r3, #0
 8004364:	d021      	beq.n	80043aa <HAL_PCD_EP_DB_Transmit+0x232>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	461a      	mov	r2, r3
 800436c:	68bb      	ldr	r3, [r7, #8]
 800436e:	781b      	ldrb	r3, [r3, #0]
 8004370:	009b      	lsls	r3, r3, #2
 8004372:	4413      	add	r3, r2
 8004374:	881b      	ldrh	r3, [r3, #0]
 8004376:	b29b      	uxth	r3, r3
 8004378:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800437c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004380:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	461a      	mov	r2, r3
 800438a:	68bb      	ldr	r3, [r7, #8]
 800438c:	781b      	ldrb	r3, [r3, #0]
 800438e:	009b      	lsls	r3, r3, #2
 8004390:	441a      	add	r2, r3
 8004392:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8004396:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800439a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800439e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80043a2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80043a6:	b29b      	uxth	r3, r3
 80043a8:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 80043aa:	68bb      	ldr	r3, [r7, #8]
 80043ac:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80043b0:	2b01      	cmp	r3, #1
 80043b2:	f040 82ae 	bne.w	8004912 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        ep->xfer_buff += TxPctSize;
 80043b6:	68bb      	ldr	r3, [r7, #8]
 80043b8:	695a      	ldr	r2, [r3, #20]
 80043ba:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 80043be:	441a      	add	r2, r3
 80043c0:	68bb      	ldr	r3, [r7, #8]
 80043c2:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 80043c4:	68bb      	ldr	r3, [r7, #8]
 80043c6:	69da      	ldr	r2, [r3, #28]
 80043c8:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 80043cc:	441a      	add	r2, r3
 80043ce:	68bb      	ldr	r3, [r7, #8]
 80043d0:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 80043d2:	68bb      	ldr	r3, [r7, #8]
 80043d4:	6a1a      	ldr	r2, [r3, #32]
 80043d6:	68bb      	ldr	r3, [r7, #8]
 80043d8:	691b      	ldr	r3, [r3, #16]
 80043da:	429a      	cmp	r2, r3
 80043dc:	d30b      	bcc.n	80043f6 <HAL_PCD_EP_DB_Transmit+0x27e>
        {
          len = ep->maxpacket;
 80043de:	68bb      	ldr	r3, [r7, #8]
 80043e0:	691b      	ldr	r3, [r3, #16]
 80043e2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db -= len;
 80043e6:	68bb      	ldr	r3, [r7, #8]
 80043e8:	6a1a      	ldr	r2, [r3, #32]
 80043ea:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80043ee:	1ad2      	subs	r2, r2, r3
 80043f0:	68bb      	ldr	r3, [r7, #8]
 80043f2:	621a      	str	r2, [r3, #32]
 80043f4:	e017      	b.n	8004426 <HAL_PCD_EP_DB_Transmit+0x2ae>
        }
        else if (ep->xfer_len_db == 0U)
 80043f6:	68bb      	ldr	r3, [r7, #8]
 80043f8:	6a1b      	ldr	r3, [r3, #32]
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d108      	bne.n	8004410 <HAL_PCD_EP_DB_Transmit+0x298>
        {
          len = TxPctSize;
 80043fe:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8004402:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_fill_db = 0U;
 8004406:	68bb      	ldr	r3, [r7, #8]
 8004408:	2200      	movs	r2, #0
 800440a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 800440e:	e00a      	b.n	8004426 <HAL_PCD_EP_DB_Transmit+0x2ae>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8004410:	68bb      	ldr	r3, [r7, #8]
 8004412:	2200      	movs	r2, #0
 8004414:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
          len = ep->xfer_len_db;
 8004418:	68bb      	ldr	r3, [r7, #8]
 800441a:	6a1b      	ldr	r3, [r3, #32]
 800441c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db = 0U;
 8004420:	68bb      	ldr	r3, [r7, #8]
 8004422:	2200      	movs	r2, #0
 8004424:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8004426:	68bb      	ldr	r3, [r7, #8]
 8004428:	785b      	ldrb	r3, [r3, #1]
 800442a:	2b00      	cmp	r3, #0
 800442c:	d165      	bne.n	80044fa <HAL_PCD_EP_DB_Transmit+0x382>
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800443c:	b29b      	uxth	r3, r3
 800443e:	461a      	mov	r2, r3
 8004440:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004442:	4413      	add	r3, r2
 8004444:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004446:	68bb      	ldr	r3, [r7, #8]
 8004448:	781b      	ldrb	r3, [r3, #0]
 800444a:	011a      	lsls	r2, r3, #4
 800444c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800444e:	4413      	add	r3, r2
 8004450:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8004454:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004456:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004458:	881b      	ldrh	r3, [r3, #0]
 800445a:	b29b      	uxth	r3, r3
 800445c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004460:	b29a      	uxth	r2, r3
 8004462:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004464:	801a      	strh	r2, [r3, #0]
 8004466:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800446a:	2b3e      	cmp	r3, #62	@ 0x3e
 800446c:	d91d      	bls.n	80044aa <HAL_PCD_EP_DB_Transmit+0x332>
 800446e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004472:	095b      	lsrs	r3, r3, #5
 8004474:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004476:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800447a:	f003 031f 	and.w	r3, r3, #31
 800447e:	2b00      	cmp	r3, #0
 8004480:	d102      	bne.n	8004488 <HAL_PCD_EP_DB_Transmit+0x310>
 8004482:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004484:	3b01      	subs	r3, #1
 8004486:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004488:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800448a:	881b      	ldrh	r3, [r3, #0]
 800448c:	b29a      	uxth	r2, r3
 800448e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004490:	b29b      	uxth	r3, r3
 8004492:	029b      	lsls	r3, r3, #10
 8004494:	b29b      	uxth	r3, r3
 8004496:	4313      	orrs	r3, r2
 8004498:	b29b      	uxth	r3, r3
 800449a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800449e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80044a2:	b29a      	uxth	r2, r3
 80044a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80044a6:	801a      	strh	r2, [r3, #0]
 80044a8:	e044      	b.n	8004534 <HAL_PCD_EP_DB_Transmit+0x3bc>
 80044aa:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d10a      	bne.n	80044c8 <HAL_PCD_EP_DB_Transmit+0x350>
 80044b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80044b4:	881b      	ldrh	r3, [r3, #0]
 80044b6:	b29b      	uxth	r3, r3
 80044b8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80044bc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80044c0:	b29a      	uxth	r2, r3
 80044c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80044c4:	801a      	strh	r2, [r3, #0]
 80044c6:	e035      	b.n	8004534 <HAL_PCD_EP_DB_Transmit+0x3bc>
 80044c8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80044cc:	085b      	lsrs	r3, r3, #1
 80044ce:	64bb      	str	r3, [r7, #72]	@ 0x48
 80044d0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80044d4:	f003 0301 	and.w	r3, r3, #1
 80044d8:	2b00      	cmp	r3, #0
 80044da:	d002      	beq.n	80044e2 <HAL_PCD_EP_DB_Transmit+0x36a>
 80044dc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80044de:	3301      	adds	r3, #1
 80044e0:	64bb      	str	r3, [r7, #72]	@ 0x48
 80044e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80044e4:	881b      	ldrh	r3, [r3, #0]
 80044e6:	b29a      	uxth	r2, r3
 80044e8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80044ea:	b29b      	uxth	r3, r3
 80044ec:	029b      	lsls	r3, r3, #10
 80044ee:	b29b      	uxth	r3, r3
 80044f0:	4313      	orrs	r3, r2
 80044f2:	b29a      	uxth	r2, r3
 80044f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80044f6:	801a      	strh	r2, [r3, #0]
 80044f8:	e01c      	b.n	8004534 <HAL_PCD_EP_DB_Transmit+0x3bc>
 80044fa:	68bb      	ldr	r3, [r7, #8]
 80044fc:	785b      	ldrb	r3, [r3, #1]
 80044fe:	2b01      	cmp	r3, #1
 8004500:	d118      	bne.n	8004534 <HAL_PCD_EP_DB_Transmit+0x3bc>
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	647b      	str	r3, [r7, #68]	@ 0x44
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004510:	b29b      	uxth	r3, r3
 8004512:	461a      	mov	r2, r3
 8004514:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004516:	4413      	add	r3, r2
 8004518:	647b      	str	r3, [r7, #68]	@ 0x44
 800451a:	68bb      	ldr	r3, [r7, #8]
 800451c:	781b      	ldrb	r3, [r3, #0]
 800451e:	011a      	lsls	r2, r3, #4
 8004520:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004522:	4413      	add	r3, r2
 8004524:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8004528:	643b      	str	r3, [r7, #64]	@ 0x40
 800452a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800452e:	b29a      	uxth	r2, r3
 8004530:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004532:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	6818      	ldr	r0, [r3, #0]
 8004538:	68bb      	ldr	r3, [r7, #8]
 800453a:	6959      	ldr	r1, [r3, #20]
 800453c:	68bb      	ldr	r3, [r7, #8]
 800453e:	891a      	ldrh	r2, [r3, #8]
 8004540:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004544:	b29b      	uxth	r3, r3
 8004546:	f003 fe66 	bl	8008216 <USB_WritePMA>
 800454a:	e1e2      	b.n	8004912 <HAL_PCD_EP_DB_Transmit+0x79a>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004554:	b29b      	uxth	r3, r3
 8004556:	461a      	mov	r2, r3
 8004558:	68bb      	ldr	r3, [r7, #8]
 800455a:	781b      	ldrb	r3, [r3, #0]
 800455c:	00db      	lsls	r3, r3, #3
 800455e:	4413      	add	r3, r2
 8004560:	3306      	adds	r3, #6
 8004562:	005b      	lsls	r3, r3, #1
 8004564:	68fa      	ldr	r2, [r7, #12]
 8004566:	6812      	ldr	r2, [r2, #0]
 8004568:	4413      	add	r3, r2
 800456a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800456e:	881b      	ldrh	r3, [r3, #0]
 8004570:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004574:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86

    if (ep->xfer_len >= TxPctSize)
 8004578:	68bb      	ldr	r3, [r7, #8]
 800457a:	699a      	ldr	r2, [r3, #24]
 800457c:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8004580:	429a      	cmp	r2, r3
 8004582:	d307      	bcc.n	8004594 <HAL_PCD_EP_DB_Transmit+0x41c>
    {
      ep->xfer_len -= TxPctSize;
 8004584:	68bb      	ldr	r3, [r7, #8]
 8004586:	699a      	ldr	r2, [r3, #24]
 8004588:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 800458c:	1ad2      	subs	r2, r2, r3
 800458e:	68bb      	ldr	r3, [r7, #8]
 8004590:	619a      	str	r2, [r3, #24]
 8004592:	e002      	b.n	800459a <HAL_PCD_EP_DB_Transmit+0x422>
    }
    else
    {
      ep->xfer_len = 0U;
 8004594:	68bb      	ldr	r3, [r7, #8]
 8004596:	2200      	movs	r2, #0
 8004598:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 800459a:	68bb      	ldr	r3, [r7, #8]
 800459c:	699b      	ldr	r3, [r3, #24]
 800459e:	2b00      	cmp	r3, #0
 80045a0:	f040 80c0 	bne.w	8004724 <HAL_PCD_EP_DB_Transmit+0x5ac>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80045a4:	68bb      	ldr	r3, [r7, #8]
 80045a6:	785b      	ldrb	r3, [r3, #1]
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	d126      	bne.n	80045fa <HAL_PCD_EP_DB_Transmit+0x482>
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80045ba:	b29b      	uxth	r3, r3
 80045bc:	461a      	mov	r2, r3
 80045be:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80045c0:	4413      	add	r3, r2
 80045c2:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80045c4:	68bb      	ldr	r3, [r7, #8]
 80045c6:	781b      	ldrb	r3, [r3, #0]
 80045c8:	011a      	lsls	r2, r3, #4
 80045ca:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80045cc:	4413      	add	r3, r2
 80045ce:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80045d2:	67bb      	str	r3, [r7, #120]	@ 0x78
 80045d4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80045d6:	881b      	ldrh	r3, [r3, #0]
 80045d8:	b29b      	uxth	r3, r3
 80045da:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80045de:	b29a      	uxth	r2, r3
 80045e0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80045e2:	801a      	strh	r2, [r3, #0]
 80045e4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80045e6:	881b      	ldrh	r3, [r3, #0]
 80045e8:	b29b      	uxth	r3, r3
 80045ea:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80045ee:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80045f2:	b29a      	uxth	r2, r3
 80045f4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80045f6:	801a      	strh	r2, [r3, #0]
 80045f8:	e01a      	b.n	8004630 <HAL_PCD_EP_DB_Transmit+0x4b8>
 80045fa:	68bb      	ldr	r3, [r7, #8]
 80045fc:	785b      	ldrb	r3, [r3, #1]
 80045fe:	2b01      	cmp	r3, #1
 8004600:	d116      	bne.n	8004630 <HAL_PCD_EP_DB_Transmit+0x4b8>
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	667b      	str	r3, [r7, #100]	@ 0x64
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004610:	b29b      	uxth	r3, r3
 8004612:	461a      	mov	r2, r3
 8004614:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004616:	4413      	add	r3, r2
 8004618:	667b      	str	r3, [r7, #100]	@ 0x64
 800461a:	68bb      	ldr	r3, [r7, #8]
 800461c:	781b      	ldrb	r3, [r3, #0]
 800461e:	011a      	lsls	r2, r3, #4
 8004620:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004622:	4413      	add	r3, r2
 8004624:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8004628:	663b      	str	r3, [r7, #96]	@ 0x60
 800462a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800462c:	2200      	movs	r2, #0
 800462e:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	677b      	str	r3, [r7, #116]	@ 0x74
 8004636:	68bb      	ldr	r3, [r7, #8]
 8004638:	785b      	ldrb	r3, [r3, #1]
 800463a:	2b00      	cmp	r3, #0
 800463c:	d12b      	bne.n	8004696 <HAL_PCD_EP_DB_Transmit+0x51e>
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800464c:	b29b      	uxth	r3, r3
 800464e:	461a      	mov	r2, r3
 8004650:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004652:	4413      	add	r3, r2
 8004654:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004656:	68bb      	ldr	r3, [r7, #8]
 8004658:	781b      	ldrb	r3, [r3, #0]
 800465a:	011a      	lsls	r2, r3, #4
 800465c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800465e:	4413      	add	r3, r2
 8004660:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8004664:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004668:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800466c:	881b      	ldrh	r3, [r3, #0]
 800466e:	b29b      	uxth	r3, r3
 8004670:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004674:	b29a      	uxth	r2, r3
 8004676:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800467a:	801a      	strh	r2, [r3, #0]
 800467c:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8004680:	881b      	ldrh	r3, [r3, #0]
 8004682:	b29b      	uxth	r3, r3
 8004684:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004688:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800468c:	b29a      	uxth	r2, r3
 800468e:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8004692:	801a      	strh	r2, [r3, #0]
 8004694:	e017      	b.n	80046c6 <HAL_PCD_EP_DB_Transmit+0x54e>
 8004696:	68bb      	ldr	r3, [r7, #8]
 8004698:	785b      	ldrb	r3, [r3, #1]
 800469a:	2b01      	cmp	r3, #1
 800469c:	d113      	bne.n	80046c6 <HAL_PCD_EP_DB_Transmit+0x54e>
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80046a6:	b29b      	uxth	r3, r3
 80046a8:	461a      	mov	r2, r3
 80046aa:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80046ac:	4413      	add	r3, r2
 80046ae:	677b      	str	r3, [r7, #116]	@ 0x74
 80046b0:	68bb      	ldr	r3, [r7, #8]
 80046b2:	781b      	ldrb	r3, [r3, #0]
 80046b4:	011a      	lsls	r2, r3, #4
 80046b6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80046b8:	4413      	add	r3, r2
 80046ba:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80046be:	673b      	str	r3, [r7, #112]	@ 0x70
 80046c0:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80046c2:	2200      	movs	r2, #0
 80046c4:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80046c6:	68bb      	ldr	r3, [r7, #8]
 80046c8:	781b      	ldrb	r3, [r3, #0]
 80046ca:	4619      	mov	r1, r3
 80046cc:	68f8      	ldr	r0, [r7, #12]
 80046ce:	f005 fbf4 	bl	8009eba <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80046d2:	88fb      	ldrh	r3, [r7, #6]
 80046d4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80046d8:	2b00      	cmp	r3, #0
 80046da:	f040 811a 	bne.w	8004912 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	461a      	mov	r2, r3
 80046e4:	68bb      	ldr	r3, [r7, #8]
 80046e6:	781b      	ldrb	r3, [r3, #0]
 80046e8:	009b      	lsls	r3, r3, #2
 80046ea:	4413      	add	r3, r2
 80046ec:	881b      	ldrh	r3, [r3, #0]
 80046ee:	b29b      	uxth	r3, r3
 80046f0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80046f4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80046f8:	f8a7 3088 	strh.w	r3, [r7, #136]	@ 0x88
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	461a      	mov	r2, r3
 8004702:	68bb      	ldr	r3, [r7, #8]
 8004704:	781b      	ldrb	r3, [r3, #0]
 8004706:	009b      	lsls	r3, r3, #2
 8004708:	441a      	add	r2, r3
 800470a:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 800470e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004712:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004716:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800471a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800471e:	b29b      	uxth	r3, r3
 8004720:	8013      	strh	r3, [r2, #0]
 8004722:	e0f6      	b.n	8004912 <HAL_PCD_EP_DB_Transmit+0x79a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8004724:	88fb      	ldrh	r3, [r7, #6]
 8004726:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800472a:	2b00      	cmp	r3, #0
 800472c:	d121      	bne.n	8004772 <HAL_PCD_EP_DB_Transmit+0x5fa>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	461a      	mov	r2, r3
 8004734:	68bb      	ldr	r3, [r7, #8]
 8004736:	781b      	ldrb	r3, [r3, #0]
 8004738:	009b      	lsls	r3, r3, #2
 800473a:	4413      	add	r3, r2
 800473c:	881b      	ldrh	r3, [r3, #0]
 800473e:	b29b      	uxth	r3, r3
 8004740:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004744:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004748:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	461a      	mov	r2, r3
 8004752:	68bb      	ldr	r3, [r7, #8]
 8004754:	781b      	ldrb	r3, [r3, #0]
 8004756:	009b      	lsls	r3, r3, #2
 8004758:	441a      	add	r2, r3
 800475a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 800475e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004762:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004766:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800476a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800476e:	b29b      	uxth	r3, r3
 8004770:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8004772:	68bb      	ldr	r3, [r7, #8]
 8004774:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8004778:	2b01      	cmp	r3, #1
 800477a:	f040 80ca 	bne.w	8004912 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        ep->xfer_buff += TxPctSize;
 800477e:	68bb      	ldr	r3, [r7, #8]
 8004780:	695a      	ldr	r2, [r3, #20]
 8004782:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8004786:	441a      	add	r2, r3
 8004788:	68bb      	ldr	r3, [r7, #8]
 800478a:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 800478c:	68bb      	ldr	r3, [r7, #8]
 800478e:	69da      	ldr	r2, [r3, #28]
 8004790:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8004794:	441a      	add	r2, r3
 8004796:	68bb      	ldr	r3, [r7, #8]
 8004798:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 800479a:	68bb      	ldr	r3, [r7, #8]
 800479c:	6a1a      	ldr	r2, [r3, #32]
 800479e:	68bb      	ldr	r3, [r7, #8]
 80047a0:	691b      	ldr	r3, [r3, #16]
 80047a2:	429a      	cmp	r2, r3
 80047a4:	d30b      	bcc.n	80047be <HAL_PCD_EP_DB_Transmit+0x646>
        {
          len = ep->maxpacket;
 80047a6:	68bb      	ldr	r3, [r7, #8]
 80047a8:	691b      	ldr	r3, [r3, #16]
 80047aa:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db -= len;
 80047ae:	68bb      	ldr	r3, [r7, #8]
 80047b0:	6a1a      	ldr	r2, [r3, #32]
 80047b2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80047b6:	1ad2      	subs	r2, r2, r3
 80047b8:	68bb      	ldr	r3, [r7, #8]
 80047ba:	621a      	str	r2, [r3, #32]
 80047bc:	e017      	b.n	80047ee <HAL_PCD_EP_DB_Transmit+0x676>
        }
        else if (ep->xfer_len_db == 0U)
 80047be:	68bb      	ldr	r3, [r7, #8]
 80047c0:	6a1b      	ldr	r3, [r3, #32]
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d108      	bne.n	80047d8 <HAL_PCD_EP_DB_Transmit+0x660>
        {
          len = TxPctSize;
 80047c6:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 80047ca:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_fill_db = 0U;
 80047ce:	68bb      	ldr	r3, [r7, #8]
 80047d0:	2200      	movs	r2, #0
 80047d2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 80047d6:	e00a      	b.n	80047ee <HAL_PCD_EP_DB_Transmit+0x676>
        }
        else
        {
          len = ep->xfer_len_db;
 80047d8:	68bb      	ldr	r3, [r7, #8]
 80047da:	6a1b      	ldr	r3, [r3, #32]
 80047dc:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db = 0U;
 80047e0:	68bb      	ldr	r3, [r7, #8]
 80047e2:	2200      	movs	r2, #0
 80047e4:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 80047e6:	68bb      	ldr	r3, [r7, #8]
 80047e8:	2200      	movs	r2, #0
 80047ea:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	657b      	str	r3, [r7, #84]	@ 0x54
 80047f4:	68bb      	ldr	r3, [r7, #8]
 80047f6:	785b      	ldrb	r3, [r3, #1]
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	d165      	bne.n	80048c8 <HAL_PCD_EP_DB_Transmit+0x750>
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800480a:	b29b      	uxth	r3, r3
 800480c:	461a      	mov	r2, r3
 800480e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004810:	4413      	add	r3, r2
 8004812:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004814:	68bb      	ldr	r3, [r7, #8]
 8004816:	781b      	ldrb	r3, [r3, #0]
 8004818:	011a      	lsls	r2, r3, #4
 800481a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800481c:	4413      	add	r3, r2
 800481e:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8004822:	65bb      	str	r3, [r7, #88]	@ 0x58
 8004824:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004826:	881b      	ldrh	r3, [r3, #0]
 8004828:	b29b      	uxth	r3, r3
 800482a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800482e:	b29a      	uxth	r2, r3
 8004830:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004832:	801a      	strh	r2, [r3, #0]
 8004834:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004838:	2b3e      	cmp	r3, #62	@ 0x3e
 800483a:	d91d      	bls.n	8004878 <HAL_PCD_EP_DB_Transmit+0x700>
 800483c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004840:	095b      	lsrs	r3, r3, #5
 8004842:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004844:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004848:	f003 031f 	and.w	r3, r3, #31
 800484c:	2b00      	cmp	r3, #0
 800484e:	d102      	bne.n	8004856 <HAL_PCD_EP_DB_Transmit+0x6de>
 8004850:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004852:	3b01      	subs	r3, #1
 8004854:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004856:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004858:	881b      	ldrh	r3, [r3, #0]
 800485a:	b29a      	uxth	r2, r3
 800485c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800485e:	b29b      	uxth	r3, r3
 8004860:	029b      	lsls	r3, r3, #10
 8004862:	b29b      	uxth	r3, r3
 8004864:	4313      	orrs	r3, r2
 8004866:	b29b      	uxth	r3, r3
 8004868:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800486c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004870:	b29a      	uxth	r2, r3
 8004872:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004874:	801a      	strh	r2, [r3, #0]
 8004876:	e041      	b.n	80048fc <HAL_PCD_EP_DB_Transmit+0x784>
 8004878:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800487c:	2b00      	cmp	r3, #0
 800487e:	d10a      	bne.n	8004896 <HAL_PCD_EP_DB_Transmit+0x71e>
 8004880:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004882:	881b      	ldrh	r3, [r3, #0]
 8004884:	b29b      	uxth	r3, r3
 8004886:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800488a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800488e:	b29a      	uxth	r2, r3
 8004890:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004892:	801a      	strh	r2, [r3, #0]
 8004894:	e032      	b.n	80048fc <HAL_PCD_EP_DB_Transmit+0x784>
 8004896:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800489a:	085b      	lsrs	r3, r3, #1
 800489c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800489e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80048a2:	f003 0301 	and.w	r3, r3, #1
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	d002      	beq.n	80048b0 <HAL_PCD_EP_DB_Transmit+0x738>
 80048aa:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80048ac:	3301      	adds	r3, #1
 80048ae:	66bb      	str	r3, [r7, #104]	@ 0x68
 80048b0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80048b2:	881b      	ldrh	r3, [r3, #0]
 80048b4:	b29a      	uxth	r2, r3
 80048b6:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80048b8:	b29b      	uxth	r3, r3
 80048ba:	029b      	lsls	r3, r3, #10
 80048bc:	b29b      	uxth	r3, r3
 80048be:	4313      	orrs	r3, r2
 80048c0:	b29a      	uxth	r2, r3
 80048c2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80048c4:	801a      	strh	r2, [r3, #0]
 80048c6:	e019      	b.n	80048fc <HAL_PCD_EP_DB_Transmit+0x784>
 80048c8:	68bb      	ldr	r3, [r7, #8]
 80048ca:	785b      	ldrb	r3, [r3, #1]
 80048cc:	2b01      	cmp	r3, #1
 80048ce:	d115      	bne.n	80048fc <HAL_PCD_EP_DB_Transmit+0x784>
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80048d8:	b29b      	uxth	r3, r3
 80048da:	461a      	mov	r2, r3
 80048dc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80048de:	4413      	add	r3, r2
 80048e0:	657b      	str	r3, [r7, #84]	@ 0x54
 80048e2:	68bb      	ldr	r3, [r7, #8]
 80048e4:	781b      	ldrb	r3, [r3, #0]
 80048e6:	011a      	lsls	r2, r3, #4
 80048e8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80048ea:	4413      	add	r3, r2
 80048ec:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80048f0:	653b      	str	r3, [r7, #80]	@ 0x50
 80048f2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80048f6:	b29a      	uxth	r2, r3
 80048f8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80048fa:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	6818      	ldr	r0, [r3, #0]
 8004900:	68bb      	ldr	r3, [r7, #8]
 8004902:	6959      	ldr	r1, [r3, #20]
 8004904:	68bb      	ldr	r3, [r7, #8]
 8004906:	895a      	ldrh	r2, [r3, #10]
 8004908:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800490c:	b29b      	uxth	r3, r3
 800490e:	f003 fc82 	bl	8008216 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	461a      	mov	r2, r3
 8004918:	68bb      	ldr	r3, [r7, #8]
 800491a:	781b      	ldrb	r3, [r3, #0]
 800491c:	009b      	lsls	r3, r3, #2
 800491e:	4413      	add	r3, r2
 8004920:	881b      	ldrh	r3, [r3, #0]
 8004922:	b29b      	uxth	r3, r3
 8004924:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004928:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800492c:	82bb      	strh	r3, [r7, #20]
 800492e:	8abb      	ldrh	r3, [r7, #20]
 8004930:	f083 0310 	eor.w	r3, r3, #16
 8004934:	82bb      	strh	r3, [r7, #20]
 8004936:	8abb      	ldrh	r3, [r7, #20]
 8004938:	f083 0320 	eor.w	r3, r3, #32
 800493c:	82bb      	strh	r3, [r7, #20]
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	461a      	mov	r2, r3
 8004944:	68bb      	ldr	r3, [r7, #8]
 8004946:	781b      	ldrb	r3, [r3, #0]
 8004948:	009b      	lsls	r3, r3, #2
 800494a:	441a      	add	r2, r3
 800494c:	8abb      	ldrh	r3, [r7, #20]
 800494e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004952:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004956:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800495a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800495e:	b29b      	uxth	r3, r3
 8004960:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8004962:	2300      	movs	r3, #0
}
 8004964:	4618      	mov	r0, r3
 8004966:	3790      	adds	r7, #144	@ 0x90
 8004968:	46bd      	mov	sp, r7
 800496a:	bd80      	pop	{r7, pc}

0800496c <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 800496c:	b480      	push	{r7}
 800496e:	b087      	sub	sp, #28
 8004970:	af00      	add	r7, sp, #0
 8004972:	60f8      	str	r0, [r7, #12]
 8004974:	607b      	str	r3, [r7, #4]
 8004976:	460b      	mov	r3, r1
 8004978:	817b      	strh	r3, [r7, #10]
 800497a:	4613      	mov	r3, r2
 800497c:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 800497e:	897b      	ldrh	r3, [r7, #10]
 8004980:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004984:	b29b      	uxth	r3, r3
 8004986:	2b00      	cmp	r3, #0
 8004988:	d00b      	beq.n	80049a2 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800498a:	897b      	ldrh	r3, [r7, #10]
 800498c:	f003 0207 	and.w	r2, r3, #7
 8004990:	4613      	mov	r3, r2
 8004992:	009b      	lsls	r3, r3, #2
 8004994:	4413      	add	r3, r2
 8004996:	00db      	lsls	r3, r3, #3
 8004998:	3310      	adds	r3, #16
 800499a:	68fa      	ldr	r2, [r7, #12]
 800499c:	4413      	add	r3, r2
 800499e:	617b      	str	r3, [r7, #20]
 80049a0:	e009      	b.n	80049b6 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80049a2:	897a      	ldrh	r2, [r7, #10]
 80049a4:	4613      	mov	r3, r2
 80049a6:	009b      	lsls	r3, r3, #2
 80049a8:	4413      	add	r3, r2
 80049aa:	00db      	lsls	r3, r3, #3
 80049ac:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80049b0:	68fa      	ldr	r2, [r7, #12]
 80049b2:	4413      	add	r3, r2
 80049b4:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 80049b6:	893b      	ldrh	r3, [r7, #8]
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	d107      	bne.n	80049cc <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 80049bc:	697b      	ldr	r3, [r7, #20]
 80049be:	2200      	movs	r2, #0
 80049c0:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	b29a      	uxth	r2, r3
 80049c6:	697b      	ldr	r3, [r7, #20]
 80049c8:	80da      	strh	r2, [r3, #6]
 80049ca:	e00b      	b.n	80049e4 <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 80049cc:	697b      	ldr	r3, [r7, #20]
 80049ce:	2201      	movs	r2, #1
 80049d0:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	b29a      	uxth	r2, r3
 80049d6:	697b      	ldr	r3, [r7, #20]
 80049d8:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	0c1b      	lsrs	r3, r3, #16
 80049de:	b29a      	uxth	r2, r3
 80049e0:	697b      	ldr	r3, [r7, #20]
 80049e2:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 80049e4:	2300      	movs	r3, #0
}
 80049e6:	4618      	mov	r0, r3
 80049e8:	371c      	adds	r7, #28
 80049ea:	46bd      	mov	sp, r7
 80049ec:	bc80      	pop	{r7}
 80049ee:	4770      	bx	lr

080049f0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80049f0:	b580      	push	{r7, lr}
 80049f2:	b086      	sub	sp, #24
 80049f4:	af00      	add	r7, sp, #0
 80049f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	d101      	bne.n	8004a02 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80049fe:	2301      	movs	r3, #1
 8004a00:	e272      	b.n	8004ee8 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	f003 0301 	and.w	r3, r3, #1
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	f000 8087 	beq.w	8004b1e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004a10:	4b92      	ldr	r3, [pc, #584]	@ (8004c5c <HAL_RCC_OscConfig+0x26c>)
 8004a12:	685b      	ldr	r3, [r3, #4]
 8004a14:	f003 030c 	and.w	r3, r3, #12
 8004a18:	2b04      	cmp	r3, #4
 8004a1a:	d00c      	beq.n	8004a36 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8004a1c:	4b8f      	ldr	r3, [pc, #572]	@ (8004c5c <HAL_RCC_OscConfig+0x26c>)
 8004a1e:	685b      	ldr	r3, [r3, #4]
 8004a20:	f003 030c 	and.w	r3, r3, #12
 8004a24:	2b08      	cmp	r3, #8
 8004a26:	d112      	bne.n	8004a4e <HAL_RCC_OscConfig+0x5e>
 8004a28:	4b8c      	ldr	r3, [pc, #560]	@ (8004c5c <HAL_RCC_OscConfig+0x26c>)
 8004a2a:	685b      	ldr	r3, [r3, #4]
 8004a2c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004a30:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004a34:	d10b      	bne.n	8004a4e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004a36:	4b89      	ldr	r3, [pc, #548]	@ (8004c5c <HAL_RCC_OscConfig+0x26c>)
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d06c      	beq.n	8004b1c <HAL_RCC_OscConfig+0x12c>
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	685b      	ldr	r3, [r3, #4]
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d168      	bne.n	8004b1c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8004a4a:	2301      	movs	r3, #1
 8004a4c:	e24c      	b.n	8004ee8 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	685b      	ldr	r3, [r3, #4]
 8004a52:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004a56:	d106      	bne.n	8004a66 <HAL_RCC_OscConfig+0x76>
 8004a58:	4b80      	ldr	r3, [pc, #512]	@ (8004c5c <HAL_RCC_OscConfig+0x26c>)
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	4a7f      	ldr	r2, [pc, #508]	@ (8004c5c <HAL_RCC_OscConfig+0x26c>)
 8004a5e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004a62:	6013      	str	r3, [r2, #0]
 8004a64:	e02e      	b.n	8004ac4 <HAL_RCC_OscConfig+0xd4>
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	685b      	ldr	r3, [r3, #4]
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d10c      	bne.n	8004a88 <HAL_RCC_OscConfig+0x98>
 8004a6e:	4b7b      	ldr	r3, [pc, #492]	@ (8004c5c <HAL_RCC_OscConfig+0x26c>)
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	4a7a      	ldr	r2, [pc, #488]	@ (8004c5c <HAL_RCC_OscConfig+0x26c>)
 8004a74:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004a78:	6013      	str	r3, [r2, #0]
 8004a7a:	4b78      	ldr	r3, [pc, #480]	@ (8004c5c <HAL_RCC_OscConfig+0x26c>)
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	4a77      	ldr	r2, [pc, #476]	@ (8004c5c <HAL_RCC_OscConfig+0x26c>)
 8004a80:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004a84:	6013      	str	r3, [r2, #0]
 8004a86:	e01d      	b.n	8004ac4 <HAL_RCC_OscConfig+0xd4>
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	685b      	ldr	r3, [r3, #4]
 8004a8c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004a90:	d10c      	bne.n	8004aac <HAL_RCC_OscConfig+0xbc>
 8004a92:	4b72      	ldr	r3, [pc, #456]	@ (8004c5c <HAL_RCC_OscConfig+0x26c>)
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	4a71      	ldr	r2, [pc, #452]	@ (8004c5c <HAL_RCC_OscConfig+0x26c>)
 8004a98:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004a9c:	6013      	str	r3, [r2, #0]
 8004a9e:	4b6f      	ldr	r3, [pc, #444]	@ (8004c5c <HAL_RCC_OscConfig+0x26c>)
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	4a6e      	ldr	r2, [pc, #440]	@ (8004c5c <HAL_RCC_OscConfig+0x26c>)
 8004aa4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004aa8:	6013      	str	r3, [r2, #0]
 8004aaa:	e00b      	b.n	8004ac4 <HAL_RCC_OscConfig+0xd4>
 8004aac:	4b6b      	ldr	r3, [pc, #428]	@ (8004c5c <HAL_RCC_OscConfig+0x26c>)
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	4a6a      	ldr	r2, [pc, #424]	@ (8004c5c <HAL_RCC_OscConfig+0x26c>)
 8004ab2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004ab6:	6013      	str	r3, [r2, #0]
 8004ab8:	4b68      	ldr	r3, [pc, #416]	@ (8004c5c <HAL_RCC_OscConfig+0x26c>)
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	4a67      	ldr	r2, [pc, #412]	@ (8004c5c <HAL_RCC_OscConfig+0x26c>)
 8004abe:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004ac2:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	685b      	ldr	r3, [r3, #4]
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	d013      	beq.n	8004af4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004acc:	f7fd fb96 	bl	80021fc <HAL_GetTick>
 8004ad0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004ad2:	e008      	b.n	8004ae6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004ad4:	f7fd fb92 	bl	80021fc <HAL_GetTick>
 8004ad8:	4602      	mov	r2, r0
 8004ada:	693b      	ldr	r3, [r7, #16]
 8004adc:	1ad3      	subs	r3, r2, r3
 8004ade:	2b64      	cmp	r3, #100	@ 0x64
 8004ae0:	d901      	bls.n	8004ae6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8004ae2:	2303      	movs	r3, #3
 8004ae4:	e200      	b.n	8004ee8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004ae6:	4b5d      	ldr	r3, [pc, #372]	@ (8004c5c <HAL_RCC_OscConfig+0x26c>)
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	d0f0      	beq.n	8004ad4 <HAL_RCC_OscConfig+0xe4>
 8004af2:	e014      	b.n	8004b1e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004af4:	f7fd fb82 	bl	80021fc <HAL_GetTick>
 8004af8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004afa:	e008      	b.n	8004b0e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004afc:	f7fd fb7e 	bl	80021fc <HAL_GetTick>
 8004b00:	4602      	mov	r2, r0
 8004b02:	693b      	ldr	r3, [r7, #16]
 8004b04:	1ad3      	subs	r3, r2, r3
 8004b06:	2b64      	cmp	r3, #100	@ 0x64
 8004b08:	d901      	bls.n	8004b0e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8004b0a:	2303      	movs	r3, #3
 8004b0c:	e1ec      	b.n	8004ee8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004b0e:	4b53      	ldr	r3, [pc, #332]	@ (8004c5c <HAL_RCC_OscConfig+0x26c>)
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d1f0      	bne.n	8004afc <HAL_RCC_OscConfig+0x10c>
 8004b1a:	e000      	b.n	8004b1e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004b1c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	f003 0302 	and.w	r3, r3, #2
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d063      	beq.n	8004bf2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004b2a:	4b4c      	ldr	r3, [pc, #304]	@ (8004c5c <HAL_RCC_OscConfig+0x26c>)
 8004b2c:	685b      	ldr	r3, [r3, #4]
 8004b2e:	f003 030c 	and.w	r3, r3, #12
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d00b      	beq.n	8004b4e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8004b36:	4b49      	ldr	r3, [pc, #292]	@ (8004c5c <HAL_RCC_OscConfig+0x26c>)
 8004b38:	685b      	ldr	r3, [r3, #4]
 8004b3a:	f003 030c 	and.w	r3, r3, #12
 8004b3e:	2b08      	cmp	r3, #8
 8004b40:	d11c      	bne.n	8004b7c <HAL_RCC_OscConfig+0x18c>
 8004b42:	4b46      	ldr	r3, [pc, #280]	@ (8004c5c <HAL_RCC_OscConfig+0x26c>)
 8004b44:	685b      	ldr	r3, [r3, #4]
 8004b46:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	d116      	bne.n	8004b7c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004b4e:	4b43      	ldr	r3, [pc, #268]	@ (8004c5c <HAL_RCC_OscConfig+0x26c>)
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	f003 0302 	and.w	r3, r3, #2
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d005      	beq.n	8004b66 <HAL_RCC_OscConfig+0x176>
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	691b      	ldr	r3, [r3, #16]
 8004b5e:	2b01      	cmp	r3, #1
 8004b60:	d001      	beq.n	8004b66 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8004b62:	2301      	movs	r3, #1
 8004b64:	e1c0      	b.n	8004ee8 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004b66:	4b3d      	ldr	r3, [pc, #244]	@ (8004c5c <HAL_RCC_OscConfig+0x26c>)
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	695b      	ldr	r3, [r3, #20]
 8004b72:	00db      	lsls	r3, r3, #3
 8004b74:	4939      	ldr	r1, [pc, #228]	@ (8004c5c <HAL_RCC_OscConfig+0x26c>)
 8004b76:	4313      	orrs	r3, r2
 8004b78:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004b7a:	e03a      	b.n	8004bf2 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	691b      	ldr	r3, [r3, #16]
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	d020      	beq.n	8004bc6 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004b84:	4b36      	ldr	r3, [pc, #216]	@ (8004c60 <HAL_RCC_OscConfig+0x270>)
 8004b86:	2201      	movs	r2, #1
 8004b88:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b8a:	f7fd fb37 	bl	80021fc <HAL_GetTick>
 8004b8e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004b90:	e008      	b.n	8004ba4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004b92:	f7fd fb33 	bl	80021fc <HAL_GetTick>
 8004b96:	4602      	mov	r2, r0
 8004b98:	693b      	ldr	r3, [r7, #16]
 8004b9a:	1ad3      	subs	r3, r2, r3
 8004b9c:	2b02      	cmp	r3, #2
 8004b9e:	d901      	bls.n	8004ba4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8004ba0:	2303      	movs	r3, #3
 8004ba2:	e1a1      	b.n	8004ee8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004ba4:	4b2d      	ldr	r3, [pc, #180]	@ (8004c5c <HAL_RCC_OscConfig+0x26c>)
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	f003 0302 	and.w	r3, r3, #2
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	d0f0      	beq.n	8004b92 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004bb0:	4b2a      	ldr	r3, [pc, #168]	@ (8004c5c <HAL_RCC_OscConfig+0x26c>)
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	695b      	ldr	r3, [r3, #20]
 8004bbc:	00db      	lsls	r3, r3, #3
 8004bbe:	4927      	ldr	r1, [pc, #156]	@ (8004c5c <HAL_RCC_OscConfig+0x26c>)
 8004bc0:	4313      	orrs	r3, r2
 8004bc2:	600b      	str	r3, [r1, #0]
 8004bc4:	e015      	b.n	8004bf2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004bc6:	4b26      	ldr	r3, [pc, #152]	@ (8004c60 <HAL_RCC_OscConfig+0x270>)
 8004bc8:	2200      	movs	r2, #0
 8004bca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004bcc:	f7fd fb16 	bl	80021fc <HAL_GetTick>
 8004bd0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004bd2:	e008      	b.n	8004be6 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004bd4:	f7fd fb12 	bl	80021fc <HAL_GetTick>
 8004bd8:	4602      	mov	r2, r0
 8004bda:	693b      	ldr	r3, [r7, #16]
 8004bdc:	1ad3      	subs	r3, r2, r3
 8004bde:	2b02      	cmp	r3, #2
 8004be0:	d901      	bls.n	8004be6 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8004be2:	2303      	movs	r3, #3
 8004be4:	e180      	b.n	8004ee8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004be6:	4b1d      	ldr	r3, [pc, #116]	@ (8004c5c <HAL_RCC_OscConfig+0x26c>)
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	f003 0302 	and.w	r3, r3, #2
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d1f0      	bne.n	8004bd4 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	f003 0308 	and.w	r3, r3, #8
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d03a      	beq.n	8004c74 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	699b      	ldr	r3, [r3, #24]
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d019      	beq.n	8004c3a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004c06:	4b17      	ldr	r3, [pc, #92]	@ (8004c64 <HAL_RCC_OscConfig+0x274>)
 8004c08:	2201      	movs	r2, #1
 8004c0a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004c0c:	f7fd faf6 	bl	80021fc <HAL_GetTick>
 8004c10:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004c12:	e008      	b.n	8004c26 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004c14:	f7fd faf2 	bl	80021fc <HAL_GetTick>
 8004c18:	4602      	mov	r2, r0
 8004c1a:	693b      	ldr	r3, [r7, #16]
 8004c1c:	1ad3      	subs	r3, r2, r3
 8004c1e:	2b02      	cmp	r3, #2
 8004c20:	d901      	bls.n	8004c26 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8004c22:	2303      	movs	r3, #3
 8004c24:	e160      	b.n	8004ee8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004c26:	4b0d      	ldr	r3, [pc, #52]	@ (8004c5c <HAL_RCC_OscConfig+0x26c>)
 8004c28:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c2a:	f003 0302 	and.w	r3, r3, #2
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	d0f0      	beq.n	8004c14 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8004c32:	2001      	movs	r0, #1
 8004c34:	f000 fa9c 	bl	8005170 <RCC_Delay>
 8004c38:	e01c      	b.n	8004c74 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004c3a:	4b0a      	ldr	r3, [pc, #40]	@ (8004c64 <HAL_RCC_OscConfig+0x274>)
 8004c3c:	2200      	movs	r2, #0
 8004c3e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004c40:	f7fd fadc 	bl	80021fc <HAL_GetTick>
 8004c44:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004c46:	e00f      	b.n	8004c68 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004c48:	f7fd fad8 	bl	80021fc <HAL_GetTick>
 8004c4c:	4602      	mov	r2, r0
 8004c4e:	693b      	ldr	r3, [r7, #16]
 8004c50:	1ad3      	subs	r3, r2, r3
 8004c52:	2b02      	cmp	r3, #2
 8004c54:	d908      	bls.n	8004c68 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8004c56:	2303      	movs	r3, #3
 8004c58:	e146      	b.n	8004ee8 <HAL_RCC_OscConfig+0x4f8>
 8004c5a:	bf00      	nop
 8004c5c:	40021000 	.word	0x40021000
 8004c60:	42420000 	.word	0x42420000
 8004c64:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004c68:	4b92      	ldr	r3, [pc, #584]	@ (8004eb4 <HAL_RCC_OscConfig+0x4c4>)
 8004c6a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c6c:	f003 0302 	and.w	r3, r3, #2
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	d1e9      	bne.n	8004c48 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	f003 0304 	and.w	r3, r3, #4
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	f000 80a6 	beq.w	8004dce <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004c82:	2300      	movs	r3, #0
 8004c84:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004c86:	4b8b      	ldr	r3, [pc, #556]	@ (8004eb4 <HAL_RCC_OscConfig+0x4c4>)
 8004c88:	69db      	ldr	r3, [r3, #28]
 8004c8a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	d10d      	bne.n	8004cae <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004c92:	4b88      	ldr	r3, [pc, #544]	@ (8004eb4 <HAL_RCC_OscConfig+0x4c4>)
 8004c94:	69db      	ldr	r3, [r3, #28]
 8004c96:	4a87      	ldr	r2, [pc, #540]	@ (8004eb4 <HAL_RCC_OscConfig+0x4c4>)
 8004c98:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004c9c:	61d3      	str	r3, [r2, #28]
 8004c9e:	4b85      	ldr	r3, [pc, #532]	@ (8004eb4 <HAL_RCC_OscConfig+0x4c4>)
 8004ca0:	69db      	ldr	r3, [r3, #28]
 8004ca2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004ca6:	60bb      	str	r3, [r7, #8]
 8004ca8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004caa:	2301      	movs	r3, #1
 8004cac:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004cae:	4b82      	ldr	r3, [pc, #520]	@ (8004eb8 <HAL_RCC_OscConfig+0x4c8>)
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	d118      	bne.n	8004cec <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004cba:	4b7f      	ldr	r3, [pc, #508]	@ (8004eb8 <HAL_RCC_OscConfig+0x4c8>)
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	4a7e      	ldr	r2, [pc, #504]	@ (8004eb8 <HAL_RCC_OscConfig+0x4c8>)
 8004cc0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004cc4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004cc6:	f7fd fa99 	bl	80021fc <HAL_GetTick>
 8004cca:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004ccc:	e008      	b.n	8004ce0 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004cce:	f7fd fa95 	bl	80021fc <HAL_GetTick>
 8004cd2:	4602      	mov	r2, r0
 8004cd4:	693b      	ldr	r3, [r7, #16]
 8004cd6:	1ad3      	subs	r3, r2, r3
 8004cd8:	2b64      	cmp	r3, #100	@ 0x64
 8004cda:	d901      	bls.n	8004ce0 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8004cdc:	2303      	movs	r3, #3
 8004cde:	e103      	b.n	8004ee8 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004ce0:	4b75      	ldr	r3, [pc, #468]	@ (8004eb8 <HAL_RCC_OscConfig+0x4c8>)
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	d0f0      	beq.n	8004cce <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	68db      	ldr	r3, [r3, #12]
 8004cf0:	2b01      	cmp	r3, #1
 8004cf2:	d106      	bne.n	8004d02 <HAL_RCC_OscConfig+0x312>
 8004cf4:	4b6f      	ldr	r3, [pc, #444]	@ (8004eb4 <HAL_RCC_OscConfig+0x4c4>)
 8004cf6:	6a1b      	ldr	r3, [r3, #32]
 8004cf8:	4a6e      	ldr	r2, [pc, #440]	@ (8004eb4 <HAL_RCC_OscConfig+0x4c4>)
 8004cfa:	f043 0301 	orr.w	r3, r3, #1
 8004cfe:	6213      	str	r3, [r2, #32]
 8004d00:	e02d      	b.n	8004d5e <HAL_RCC_OscConfig+0x36e>
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	68db      	ldr	r3, [r3, #12]
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	d10c      	bne.n	8004d24 <HAL_RCC_OscConfig+0x334>
 8004d0a:	4b6a      	ldr	r3, [pc, #424]	@ (8004eb4 <HAL_RCC_OscConfig+0x4c4>)
 8004d0c:	6a1b      	ldr	r3, [r3, #32]
 8004d0e:	4a69      	ldr	r2, [pc, #420]	@ (8004eb4 <HAL_RCC_OscConfig+0x4c4>)
 8004d10:	f023 0301 	bic.w	r3, r3, #1
 8004d14:	6213      	str	r3, [r2, #32]
 8004d16:	4b67      	ldr	r3, [pc, #412]	@ (8004eb4 <HAL_RCC_OscConfig+0x4c4>)
 8004d18:	6a1b      	ldr	r3, [r3, #32]
 8004d1a:	4a66      	ldr	r2, [pc, #408]	@ (8004eb4 <HAL_RCC_OscConfig+0x4c4>)
 8004d1c:	f023 0304 	bic.w	r3, r3, #4
 8004d20:	6213      	str	r3, [r2, #32]
 8004d22:	e01c      	b.n	8004d5e <HAL_RCC_OscConfig+0x36e>
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	68db      	ldr	r3, [r3, #12]
 8004d28:	2b05      	cmp	r3, #5
 8004d2a:	d10c      	bne.n	8004d46 <HAL_RCC_OscConfig+0x356>
 8004d2c:	4b61      	ldr	r3, [pc, #388]	@ (8004eb4 <HAL_RCC_OscConfig+0x4c4>)
 8004d2e:	6a1b      	ldr	r3, [r3, #32]
 8004d30:	4a60      	ldr	r2, [pc, #384]	@ (8004eb4 <HAL_RCC_OscConfig+0x4c4>)
 8004d32:	f043 0304 	orr.w	r3, r3, #4
 8004d36:	6213      	str	r3, [r2, #32]
 8004d38:	4b5e      	ldr	r3, [pc, #376]	@ (8004eb4 <HAL_RCC_OscConfig+0x4c4>)
 8004d3a:	6a1b      	ldr	r3, [r3, #32]
 8004d3c:	4a5d      	ldr	r2, [pc, #372]	@ (8004eb4 <HAL_RCC_OscConfig+0x4c4>)
 8004d3e:	f043 0301 	orr.w	r3, r3, #1
 8004d42:	6213      	str	r3, [r2, #32]
 8004d44:	e00b      	b.n	8004d5e <HAL_RCC_OscConfig+0x36e>
 8004d46:	4b5b      	ldr	r3, [pc, #364]	@ (8004eb4 <HAL_RCC_OscConfig+0x4c4>)
 8004d48:	6a1b      	ldr	r3, [r3, #32]
 8004d4a:	4a5a      	ldr	r2, [pc, #360]	@ (8004eb4 <HAL_RCC_OscConfig+0x4c4>)
 8004d4c:	f023 0301 	bic.w	r3, r3, #1
 8004d50:	6213      	str	r3, [r2, #32]
 8004d52:	4b58      	ldr	r3, [pc, #352]	@ (8004eb4 <HAL_RCC_OscConfig+0x4c4>)
 8004d54:	6a1b      	ldr	r3, [r3, #32]
 8004d56:	4a57      	ldr	r2, [pc, #348]	@ (8004eb4 <HAL_RCC_OscConfig+0x4c4>)
 8004d58:	f023 0304 	bic.w	r3, r3, #4
 8004d5c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	68db      	ldr	r3, [r3, #12]
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	d015      	beq.n	8004d92 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004d66:	f7fd fa49 	bl	80021fc <HAL_GetTick>
 8004d6a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004d6c:	e00a      	b.n	8004d84 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004d6e:	f7fd fa45 	bl	80021fc <HAL_GetTick>
 8004d72:	4602      	mov	r2, r0
 8004d74:	693b      	ldr	r3, [r7, #16]
 8004d76:	1ad3      	subs	r3, r2, r3
 8004d78:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004d7c:	4293      	cmp	r3, r2
 8004d7e:	d901      	bls.n	8004d84 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8004d80:	2303      	movs	r3, #3
 8004d82:	e0b1      	b.n	8004ee8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004d84:	4b4b      	ldr	r3, [pc, #300]	@ (8004eb4 <HAL_RCC_OscConfig+0x4c4>)
 8004d86:	6a1b      	ldr	r3, [r3, #32]
 8004d88:	f003 0302 	and.w	r3, r3, #2
 8004d8c:	2b00      	cmp	r3, #0
 8004d8e:	d0ee      	beq.n	8004d6e <HAL_RCC_OscConfig+0x37e>
 8004d90:	e014      	b.n	8004dbc <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004d92:	f7fd fa33 	bl	80021fc <HAL_GetTick>
 8004d96:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004d98:	e00a      	b.n	8004db0 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004d9a:	f7fd fa2f 	bl	80021fc <HAL_GetTick>
 8004d9e:	4602      	mov	r2, r0
 8004da0:	693b      	ldr	r3, [r7, #16]
 8004da2:	1ad3      	subs	r3, r2, r3
 8004da4:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004da8:	4293      	cmp	r3, r2
 8004daa:	d901      	bls.n	8004db0 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8004dac:	2303      	movs	r3, #3
 8004dae:	e09b      	b.n	8004ee8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004db0:	4b40      	ldr	r3, [pc, #256]	@ (8004eb4 <HAL_RCC_OscConfig+0x4c4>)
 8004db2:	6a1b      	ldr	r3, [r3, #32]
 8004db4:	f003 0302 	and.w	r3, r3, #2
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	d1ee      	bne.n	8004d9a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004dbc:	7dfb      	ldrb	r3, [r7, #23]
 8004dbe:	2b01      	cmp	r3, #1
 8004dc0:	d105      	bne.n	8004dce <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004dc2:	4b3c      	ldr	r3, [pc, #240]	@ (8004eb4 <HAL_RCC_OscConfig+0x4c4>)
 8004dc4:	69db      	ldr	r3, [r3, #28]
 8004dc6:	4a3b      	ldr	r2, [pc, #236]	@ (8004eb4 <HAL_RCC_OscConfig+0x4c4>)
 8004dc8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004dcc:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	69db      	ldr	r3, [r3, #28]
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	f000 8087 	beq.w	8004ee6 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004dd8:	4b36      	ldr	r3, [pc, #216]	@ (8004eb4 <HAL_RCC_OscConfig+0x4c4>)
 8004dda:	685b      	ldr	r3, [r3, #4]
 8004ddc:	f003 030c 	and.w	r3, r3, #12
 8004de0:	2b08      	cmp	r3, #8
 8004de2:	d061      	beq.n	8004ea8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	69db      	ldr	r3, [r3, #28]
 8004de8:	2b02      	cmp	r3, #2
 8004dea:	d146      	bne.n	8004e7a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004dec:	4b33      	ldr	r3, [pc, #204]	@ (8004ebc <HAL_RCC_OscConfig+0x4cc>)
 8004dee:	2200      	movs	r2, #0
 8004df0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004df2:	f7fd fa03 	bl	80021fc <HAL_GetTick>
 8004df6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004df8:	e008      	b.n	8004e0c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004dfa:	f7fd f9ff 	bl	80021fc <HAL_GetTick>
 8004dfe:	4602      	mov	r2, r0
 8004e00:	693b      	ldr	r3, [r7, #16]
 8004e02:	1ad3      	subs	r3, r2, r3
 8004e04:	2b02      	cmp	r3, #2
 8004e06:	d901      	bls.n	8004e0c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8004e08:	2303      	movs	r3, #3
 8004e0a:	e06d      	b.n	8004ee8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004e0c:	4b29      	ldr	r3, [pc, #164]	@ (8004eb4 <HAL_RCC_OscConfig+0x4c4>)
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	d1f0      	bne.n	8004dfa <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	6a1b      	ldr	r3, [r3, #32]
 8004e1c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004e20:	d108      	bne.n	8004e34 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8004e22:	4b24      	ldr	r3, [pc, #144]	@ (8004eb4 <HAL_RCC_OscConfig+0x4c4>)
 8004e24:	685b      	ldr	r3, [r3, #4]
 8004e26:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	689b      	ldr	r3, [r3, #8]
 8004e2e:	4921      	ldr	r1, [pc, #132]	@ (8004eb4 <HAL_RCC_OscConfig+0x4c4>)
 8004e30:	4313      	orrs	r3, r2
 8004e32:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004e34:	4b1f      	ldr	r3, [pc, #124]	@ (8004eb4 <HAL_RCC_OscConfig+0x4c4>)
 8004e36:	685b      	ldr	r3, [r3, #4]
 8004e38:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	6a19      	ldr	r1, [r3, #32]
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e44:	430b      	orrs	r3, r1
 8004e46:	491b      	ldr	r1, [pc, #108]	@ (8004eb4 <HAL_RCC_OscConfig+0x4c4>)
 8004e48:	4313      	orrs	r3, r2
 8004e4a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004e4c:	4b1b      	ldr	r3, [pc, #108]	@ (8004ebc <HAL_RCC_OscConfig+0x4cc>)
 8004e4e:	2201      	movs	r2, #1
 8004e50:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004e52:	f7fd f9d3 	bl	80021fc <HAL_GetTick>
 8004e56:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004e58:	e008      	b.n	8004e6c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004e5a:	f7fd f9cf 	bl	80021fc <HAL_GetTick>
 8004e5e:	4602      	mov	r2, r0
 8004e60:	693b      	ldr	r3, [r7, #16]
 8004e62:	1ad3      	subs	r3, r2, r3
 8004e64:	2b02      	cmp	r3, #2
 8004e66:	d901      	bls.n	8004e6c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8004e68:	2303      	movs	r3, #3
 8004e6a:	e03d      	b.n	8004ee8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004e6c:	4b11      	ldr	r3, [pc, #68]	@ (8004eb4 <HAL_RCC_OscConfig+0x4c4>)
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004e74:	2b00      	cmp	r3, #0
 8004e76:	d0f0      	beq.n	8004e5a <HAL_RCC_OscConfig+0x46a>
 8004e78:	e035      	b.n	8004ee6 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004e7a:	4b10      	ldr	r3, [pc, #64]	@ (8004ebc <HAL_RCC_OscConfig+0x4cc>)
 8004e7c:	2200      	movs	r2, #0
 8004e7e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004e80:	f7fd f9bc 	bl	80021fc <HAL_GetTick>
 8004e84:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004e86:	e008      	b.n	8004e9a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004e88:	f7fd f9b8 	bl	80021fc <HAL_GetTick>
 8004e8c:	4602      	mov	r2, r0
 8004e8e:	693b      	ldr	r3, [r7, #16]
 8004e90:	1ad3      	subs	r3, r2, r3
 8004e92:	2b02      	cmp	r3, #2
 8004e94:	d901      	bls.n	8004e9a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8004e96:	2303      	movs	r3, #3
 8004e98:	e026      	b.n	8004ee8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004e9a:	4b06      	ldr	r3, [pc, #24]	@ (8004eb4 <HAL_RCC_OscConfig+0x4c4>)
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	d1f0      	bne.n	8004e88 <HAL_RCC_OscConfig+0x498>
 8004ea6:	e01e      	b.n	8004ee6 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	69db      	ldr	r3, [r3, #28]
 8004eac:	2b01      	cmp	r3, #1
 8004eae:	d107      	bne.n	8004ec0 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8004eb0:	2301      	movs	r3, #1
 8004eb2:	e019      	b.n	8004ee8 <HAL_RCC_OscConfig+0x4f8>
 8004eb4:	40021000 	.word	0x40021000
 8004eb8:	40007000 	.word	0x40007000
 8004ebc:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004ec0:	4b0b      	ldr	r3, [pc, #44]	@ (8004ef0 <HAL_RCC_OscConfig+0x500>)
 8004ec2:	685b      	ldr	r3, [r3, #4]
 8004ec4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	6a1b      	ldr	r3, [r3, #32]
 8004ed0:	429a      	cmp	r2, r3
 8004ed2:	d106      	bne.n	8004ee2 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004ede:	429a      	cmp	r2, r3
 8004ee0:	d001      	beq.n	8004ee6 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8004ee2:	2301      	movs	r3, #1
 8004ee4:	e000      	b.n	8004ee8 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8004ee6:	2300      	movs	r3, #0
}
 8004ee8:	4618      	mov	r0, r3
 8004eea:	3718      	adds	r7, #24
 8004eec:	46bd      	mov	sp, r7
 8004eee:	bd80      	pop	{r7, pc}
 8004ef0:	40021000 	.word	0x40021000

08004ef4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004ef4:	b580      	push	{r7, lr}
 8004ef6:	b084      	sub	sp, #16
 8004ef8:	af00      	add	r7, sp, #0
 8004efa:	6078      	str	r0, [r7, #4]
 8004efc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	2b00      	cmp	r3, #0
 8004f02:	d101      	bne.n	8004f08 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004f04:	2301      	movs	r3, #1
 8004f06:	e0d0      	b.n	80050aa <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004f08:	4b6a      	ldr	r3, [pc, #424]	@ (80050b4 <HAL_RCC_ClockConfig+0x1c0>)
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	f003 0307 	and.w	r3, r3, #7
 8004f10:	683a      	ldr	r2, [r7, #0]
 8004f12:	429a      	cmp	r2, r3
 8004f14:	d910      	bls.n	8004f38 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004f16:	4b67      	ldr	r3, [pc, #412]	@ (80050b4 <HAL_RCC_ClockConfig+0x1c0>)
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	f023 0207 	bic.w	r2, r3, #7
 8004f1e:	4965      	ldr	r1, [pc, #404]	@ (80050b4 <HAL_RCC_ClockConfig+0x1c0>)
 8004f20:	683b      	ldr	r3, [r7, #0]
 8004f22:	4313      	orrs	r3, r2
 8004f24:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004f26:	4b63      	ldr	r3, [pc, #396]	@ (80050b4 <HAL_RCC_ClockConfig+0x1c0>)
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	f003 0307 	and.w	r3, r3, #7
 8004f2e:	683a      	ldr	r2, [r7, #0]
 8004f30:	429a      	cmp	r2, r3
 8004f32:	d001      	beq.n	8004f38 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8004f34:	2301      	movs	r3, #1
 8004f36:	e0b8      	b.n	80050aa <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	f003 0302 	and.w	r3, r3, #2
 8004f40:	2b00      	cmp	r3, #0
 8004f42:	d020      	beq.n	8004f86 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	f003 0304 	and.w	r3, r3, #4
 8004f4c:	2b00      	cmp	r3, #0
 8004f4e:	d005      	beq.n	8004f5c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004f50:	4b59      	ldr	r3, [pc, #356]	@ (80050b8 <HAL_RCC_ClockConfig+0x1c4>)
 8004f52:	685b      	ldr	r3, [r3, #4]
 8004f54:	4a58      	ldr	r2, [pc, #352]	@ (80050b8 <HAL_RCC_ClockConfig+0x1c4>)
 8004f56:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8004f5a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	f003 0308 	and.w	r3, r3, #8
 8004f64:	2b00      	cmp	r3, #0
 8004f66:	d005      	beq.n	8004f74 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004f68:	4b53      	ldr	r3, [pc, #332]	@ (80050b8 <HAL_RCC_ClockConfig+0x1c4>)
 8004f6a:	685b      	ldr	r3, [r3, #4]
 8004f6c:	4a52      	ldr	r2, [pc, #328]	@ (80050b8 <HAL_RCC_ClockConfig+0x1c4>)
 8004f6e:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8004f72:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004f74:	4b50      	ldr	r3, [pc, #320]	@ (80050b8 <HAL_RCC_ClockConfig+0x1c4>)
 8004f76:	685b      	ldr	r3, [r3, #4]
 8004f78:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	689b      	ldr	r3, [r3, #8]
 8004f80:	494d      	ldr	r1, [pc, #308]	@ (80050b8 <HAL_RCC_ClockConfig+0x1c4>)
 8004f82:	4313      	orrs	r3, r2
 8004f84:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	f003 0301 	and.w	r3, r3, #1
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	d040      	beq.n	8005014 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	685b      	ldr	r3, [r3, #4]
 8004f96:	2b01      	cmp	r3, #1
 8004f98:	d107      	bne.n	8004faa <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004f9a:	4b47      	ldr	r3, [pc, #284]	@ (80050b8 <HAL_RCC_ClockConfig+0x1c4>)
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	d115      	bne.n	8004fd2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004fa6:	2301      	movs	r3, #1
 8004fa8:	e07f      	b.n	80050aa <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	685b      	ldr	r3, [r3, #4]
 8004fae:	2b02      	cmp	r3, #2
 8004fb0:	d107      	bne.n	8004fc2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004fb2:	4b41      	ldr	r3, [pc, #260]	@ (80050b8 <HAL_RCC_ClockConfig+0x1c4>)
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	d109      	bne.n	8004fd2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004fbe:	2301      	movs	r3, #1
 8004fc0:	e073      	b.n	80050aa <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004fc2:	4b3d      	ldr	r3, [pc, #244]	@ (80050b8 <HAL_RCC_ClockConfig+0x1c4>)
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	f003 0302 	and.w	r3, r3, #2
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	d101      	bne.n	8004fd2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004fce:	2301      	movs	r3, #1
 8004fd0:	e06b      	b.n	80050aa <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004fd2:	4b39      	ldr	r3, [pc, #228]	@ (80050b8 <HAL_RCC_ClockConfig+0x1c4>)
 8004fd4:	685b      	ldr	r3, [r3, #4]
 8004fd6:	f023 0203 	bic.w	r2, r3, #3
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	685b      	ldr	r3, [r3, #4]
 8004fde:	4936      	ldr	r1, [pc, #216]	@ (80050b8 <HAL_RCC_ClockConfig+0x1c4>)
 8004fe0:	4313      	orrs	r3, r2
 8004fe2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004fe4:	f7fd f90a 	bl	80021fc <HAL_GetTick>
 8004fe8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004fea:	e00a      	b.n	8005002 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004fec:	f7fd f906 	bl	80021fc <HAL_GetTick>
 8004ff0:	4602      	mov	r2, r0
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	1ad3      	subs	r3, r2, r3
 8004ff6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004ffa:	4293      	cmp	r3, r2
 8004ffc:	d901      	bls.n	8005002 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004ffe:	2303      	movs	r3, #3
 8005000:	e053      	b.n	80050aa <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005002:	4b2d      	ldr	r3, [pc, #180]	@ (80050b8 <HAL_RCC_ClockConfig+0x1c4>)
 8005004:	685b      	ldr	r3, [r3, #4]
 8005006:	f003 020c 	and.w	r2, r3, #12
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	685b      	ldr	r3, [r3, #4]
 800500e:	009b      	lsls	r3, r3, #2
 8005010:	429a      	cmp	r2, r3
 8005012:	d1eb      	bne.n	8004fec <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005014:	4b27      	ldr	r3, [pc, #156]	@ (80050b4 <HAL_RCC_ClockConfig+0x1c0>)
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	f003 0307 	and.w	r3, r3, #7
 800501c:	683a      	ldr	r2, [r7, #0]
 800501e:	429a      	cmp	r2, r3
 8005020:	d210      	bcs.n	8005044 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005022:	4b24      	ldr	r3, [pc, #144]	@ (80050b4 <HAL_RCC_ClockConfig+0x1c0>)
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	f023 0207 	bic.w	r2, r3, #7
 800502a:	4922      	ldr	r1, [pc, #136]	@ (80050b4 <HAL_RCC_ClockConfig+0x1c0>)
 800502c:	683b      	ldr	r3, [r7, #0]
 800502e:	4313      	orrs	r3, r2
 8005030:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005032:	4b20      	ldr	r3, [pc, #128]	@ (80050b4 <HAL_RCC_ClockConfig+0x1c0>)
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	f003 0307 	and.w	r3, r3, #7
 800503a:	683a      	ldr	r2, [r7, #0]
 800503c:	429a      	cmp	r2, r3
 800503e:	d001      	beq.n	8005044 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8005040:	2301      	movs	r3, #1
 8005042:	e032      	b.n	80050aa <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	f003 0304 	and.w	r3, r3, #4
 800504c:	2b00      	cmp	r3, #0
 800504e:	d008      	beq.n	8005062 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005050:	4b19      	ldr	r3, [pc, #100]	@ (80050b8 <HAL_RCC_ClockConfig+0x1c4>)
 8005052:	685b      	ldr	r3, [r3, #4]
 8005054:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	68db      	ldr	r3, [r3, #12]
 800505c:	4916      	ldr	r1, [pc, #88]	@ (80050b8 <HAL_RCC_ClockConfig+0x1c4>)
 800505e:	4313      	orrs	r3, r2
 8005060:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	f003 0308 	and.w	r3, r3, #8
 800506a:	2b00      	cmp	r3, #0
 800506c:	d009      	beq.n	8005082 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800506e:	4b12      	ldr	r3, [pc, #72]	@ (80050b8 <HAL_RCC_ClockConfig+0x1c4>)
 8005070:	685b      	ldr	r3, [r3, #4]
 8005072:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	691b      	ldr	r3, [r3, #16]
 800507a:	00db      	lsls	r3, r3, #3
 800507c:	490e      	ldr	r1, [pc, #56]	@ (80050b8 <HAL_RCC_ClockConfig+0x1c4>)
 800507e:	4313      	orrs	r3, r2
 8005080:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8005082:	f000 f821 	bl	80050c8 <HAL_RCC_GetSysClockFreq>
 8005086:	4602      	mov	r2, r0
 8005088:	4b0b      	ldr	r3, [pc, #44]	@ (80050b8 <HAL_RCC_ClockConfig+0x1c4>)
 800508a:	685b      	ldr	r3, [r3, #4]
 800508c:	091b      	lsrs	r3, r3, #4
 800508e:	f003 030f 	and.w	r3, r3, #15
 8005092:	490a      	ldr	r1, [pc, #40]	@ (80050bc <HAL_RCC_ClockConfig+0x1c8>)
 8005094:	5ccb      	ldrb	r3, [r1, r3]
 8005096:	fa22 f303 	lsr.w	r3, r2, r3
 800509a:	4a09      	ldr	r2, [pc, #36]	@ (80050c0 <HAL_RCC_ClockConfig+0x1cc>)
 800509c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800509e:	4b09      	ldr	r3, [pc, #36]	@ (80050c4 <HAL_RCC_ClockConfig+0x1d0>)
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	4618      	mov	r0, r3
 80050a4:	f7fd f868 	bl	8002178 <HAL_InitTick>

  return HAL_OK;
 80050a8:	2300      	movs	r3, #0
}
 80050aa:	4618      	mov	r0, r3
 80050ac:	3710      	adds	r7, #16
 80050ae:	46bd      	mov	sp, r7
 80050b0:	bd80      	pop	{r7, pc}
 80050b2:	bf00      	nop
 80050b4:	40022000 	.word	0x40022000
 80050b8:	40021000 	.word	0x40021000
 80050bc:	0800f5b8 	.word	0x0800f5b8
 80050c0:	20000000 	.word	0x20000000
 80050c4:	20000004 	.word	0x20000004

080050c8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80050c8:	b480      	push	{r7}
 80050ca:	b087      	sub	sp, #28
 80050cc:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80050ce:	2300      	movs	r3, #0
 80050d0:	60fb      	str	r3, [r7, #12]
 80050d2:	2300      	movs	r3, #0
 80050d4:	60bb      	str	r3, [r7, #8]
 80050d6:	2300      	movs	r3, #0
 80050d8:	617b      	str	r3, [r7, #20]
 80050da:	2300      	movs	r3, #0
 80050dc:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80050de:	2300      	movs	r3, #0
 80050e0:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80050e2:	4b1e      	ldr	r3, [pc, #120]	@ (800515c <HAL_RCC_GetSysClockFreq+0x94>)
 80050e4:	685b      	ldr	r3, [r3, #4]
 80050e6:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	f003 030c 	and.w	r3, r3, #12
 80050ee:	2b04      	cmp	r3, #4
 80050f0:	d002      	beq.n	80050f8 <HAL_RCC_GetSysClockFreq+0x30>
 80050f2:	2b08      	cmp	r3, #8
 80050f4:	d003      	beq.n	80050fe <HAL_RCC_GetSysClockFreq+0x36>
 80050f6:	e027      	b.n	8005148 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80050f8:	4b19      	ldr	r3, [pc, #100]	@ (8005160 <HAL_RCC_GetSysClockFreq+0x98>)
 80050fa:	613b      	str	r3, [r7, #16]
      break;
 80050fc:	e027      	b.n	800514e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	0c9b      	lsrs	r3, r3, #18
 8005102:	f003 030f 	and.w	r3, r3, #15
 8005106:	4a17      	ldr	r2, [pc, #92]	@ (8005164 <HAL_RCC_GetSysClockFreq+0x9c>)
 8005108:	5cd3      	ldrb	r3, [r2, r3]
 800510a:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005112:	2b00      	cmp	r3, #0
 8005114:	d010      	beq.n	8005138 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8005116:	4b11      	ldr	r3, [pc, #68]	@ (800515c <HAL_RCC_GetSysClockFreq+0x94>)
 8005118:	685b      	ldr	r3, [r3, #4]
 800511a:	0c5b      	lsrs	r3, r3, #17
 800511c:	f003 0301 	and.w	r3, r3, #1
 8005120:	4a11      	ldr	r2, [pc, #68]	@ (8005168 <HAL_RCC_GetSysClockFreq+0xa0>)
 8005122:	5cd3      	ldrb	r3, [r2, r3]
 8005124:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	4a0d      	ldr	r2, [pc, #52]	@ (8005160 <HAL_RCC_GetSysClockFreq+0x98>)
 800512a:	fb03 f202 	mul.w	r2, r3, r2
 800512e:	68bb      	ldr	r3, [r7, #8]
 8005130:	fbb2 f3f3 	udiv	r3, r2, r3
 8005134:	617b      	str	r3, [r7, #20]
 8005136:	e004      	b.n	8005142 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	4a0c      	ldr	r2, [pc, #48]	@ (800516c <HAL_RCC_GetSysClockFreq+0xa4>)
 800513c:	fb02 f303 	mul.w	r3, r2, r3
 8005140:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8005142:	697b      	ldr	r3, [r7, #20]
 8005144:	613b      	str	r3, [r7, #16]
      break;
 8005146:	e002      	b.n	800514e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8005148:	4b05      	ldr	r3, [pc, #20]	@ (8005160 <HAL_RCC_GetSysClockFreq+0x98>)
 800514a:	613b      	str	r3, [r7, #16]
      break;
 800514c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800514e:	693b      	ldr	r3, [r7, #16]
}
 8005150:	4618      	mov	r0, r3
 8005152:	371c      	adds	r7, #28
 8005154:	46bd      	mov	sp, r7
 8005156:	bc80      	pop	{r7}
 8005158:	4770      	bx	lr
 800515a:	bf00      	nop
 800515c:	40021000 	.word	0x40021000
 8005160:	007a1200 	.word	0x007a1200
 8005164:	0800f5c8 	.word	0x0800f5c8
 8005168:	0800f5d8 	.word	0x0800f5d8
 800516c:	003d0900 	.word	0x003d0900

08005170 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8005170:	b480      	push	{r7}
 8005172:	b085      	sub	sp, #20
 8005174:	af00      	add	r7, sp, #0
 8005176:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8005178:	4b0a      	ldr	r3, [pc, #40]	@ (80051a4 <RCC_Delay+0x34>)
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	4a0a      	ldr	r2, [pc, #40]	@ (80051a8 <RCC_Delay+0x38>)
 800517e:	fba2 2303 	umull	r2, r3, r2, r3
 8005182:	0a5b      	lsrs	r3, r3, #9
 8005184:	687a      	ldr	r2, [r7, #4]
 8005186:	fb02 f303 	mul.w	r3, r2, r3
 800518a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800518c:	bf00      	nop
  }
  while (Delay --);
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	1e5a      	subs	r2, r3, #1
 8005192:	60fa      	str	r2, [r7, #12]
 8005194:	2b00      	cmp	r3, #0
 8005196:	d1f9      	bne.n	800518c <RCC_Delay+0x1c>
}
 8005198:	bf00      	nop
 800519a:	bf00      	nop
 800519c:	3714      	adds	r7, #20
 800519e:	46bd      	mov	sp, r7
 80051a0:	bc80      	pop	{r7}
 80051a2:	4770      	bx	lr
 80051a4:	20000000 	.word	0x20000000
 80051a8:	10624dd3 	.word	0x10624dd3

080051ac <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80051ac:	b580      	push	{r7, lr}
 80051ae:	b086      	sub	sp, #24
 80051b0:	af00      	add	r7, sp, #0
 80051b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 80051b4:	2300      	movs	r3, #0
 80051b6:	613b      	str	r3, [r7, #16]
 80051b8:	2300      	movs	r3, #0
 80051ba:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	f003 0301 	and.w	r3, r3, #1
 80051c4:	2b00      	cmp	r3, #0
 80051c6:	d07d      	beq.n	80052c4 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 80051c8:	2300      	movs	r3, #0
 80051ca:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80051cc:	4b4f      	ldr	r3, [pc, #316]	@ (800530c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80051ce:	69db      	ldr	r3, [r3, #28]
 80051d0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80051d4:	2b00      	cmp	r3, #0
 80051d6:	d10d      	bne.n	80051f4 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80051d8:	4b4c      	ldr	r3, [pc, #304]	@ (800530c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80051da:	69db      	ldr	r3, [r3, #28]
 80051dc:	4a4b      	ldr	r2, [pc, #300]	@ (800530c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80051de:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80051e2:	61d3      	str	r3, [r2, #28]
 80051e4:	4b49      	ldr	r3, [pc, #292]	@ (800530c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80051e6:	69db      	ldr	r3, [r3, #28]
 80051e8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80051ec:	60bb      	str	r3, [r7, #8]
 80051ee:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80051f0:	2301      	movs	r3, #1
 80051f2:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80051f4:	4b46      	ldr	r3, [pc, #280]	@ (8005310 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80051fc:	2b00      	cmp	r3, #0
 80051fe:	d118      	bne.n	8005232 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005200:	4b43      	ldr	r3, [pc, #268]	@ (8005310 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	4a42      	ldr	r2, [pc, #264]	@ (8005310 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005206:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800520a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800520c:	f7fc fff6 	bl	80021fc <HAL_GetTick>
 8005210:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005212:	e008      	b.n	8005226 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005214:	f7fc fff2 	bl	80021fc <HAL_GetTick>
 8005218:	4602      	mov	r2, r0
 800521a:	693b      	ldr	r3, [r7, #16]
 800521c:	1ad3      	subs	r3, r2, r3
 800521e:	2b64      	cmp	r3, #100	@ 0x64
 8005220:	d901      	bls.n	8005226 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8005222:	2303      	movs	r3, #3
 8005224:	e06d      	b.n	8005302 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005226:	4b3a      	ldr	r3, [pc, #232]	@ (8005310 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800522e:	2b00      	cmp	r3, #0
 8005230:	d0f0      	beq.n	8005214 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005232:	4b36      	ldr	r3, [pc, #216]	@ (800530c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005234:	6a1b      	ldr	r3, [r3, #32]
 8005236:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800523a:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	2b00      	cmp	r3, #0
 8005240:	d02e      	beq.n	80052a0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	685b      	ldr	r3, [r3, #4]
 8005246:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800524a:	68fa      	ldr	r2, [r7, #12]
 800524c:	429a      	cmp	r2, r3
 800524e:	d027      	beq.n	80052a0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005250:	4b2e      	ldr	r3, [pc, #184]	@ (800530c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005252:	6a1b      	ldr	r3, [r3, #32]
 8005254:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005258:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800525a:	4b2e      	ldr	r3, [pc, #184]	@ (8005314 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800525c:	2201      	movs	r2, #1
 800525e:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005260:	4b2c      	ldr	r3, [pc, #176]	@ (8005314 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8005262:	2200      	movs	r2, #0
 8005264:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8005266:	4a29      	ldr	r2, [pc, #164]	@ (800530c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	f003 0301 	and.w	r3, r3, #1
 8005272:	2b00      	cmp	r3, #0
 8005274:	d014      	beq.n	80052a0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005276:	f7fc ffc1 	bl	80021fc <HAL_GetTick>
 800527a:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800527c:	e00a      	b.n	8005294 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800527e:	f7fc ffbd 	bl	80021fc <HAL_GetTick>
 8005282:	4602      	mov	r2, r0
 8005284:	693b      	ldr	r3, [r7, #16]
 8005286:	1ad3      	subs	r3, r2, r3
 8005288:	f241 3288 	movw	r2, #5000	@ 0x1388
 800528c:	4293      	cmp	r3, r2
 800528e:	d901      	bls.n	8005294 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8005290:	2303      	movs	r3, #3
 8005292:	e036      	b.n	8005302 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005294:	4b1d      	ldr	r3, [pc, #116]	@ (800530c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005296:	6a1b      	ldr	r3, [r3, #32]
 8005298:	f003 0302 	and.w	r3, r3, #2
 800529c:	2b00      	cmp	r3, #0
 800529e:	d0ee      	beq.n	800527e <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80052a0:	4b1a      	ldr	r3, [pc, #104]	@ (800530c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80052a2:	6a1b      	ldr	r3, [r3, #32]
 80052a4:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	685b      	ldr	r3, [r3, #4]
 80052ac:	4917      	ldr	r1, [pc, #92]	@ (800530c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80052ae:	4313      	orrs	r3, r2
 80052b0:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80052b2:	7dfb      	ldrb	r3, [r7, #23]
 80052b4:	2b01      	cmp	r3, #1
 80052b6:	d105      	bne.n	80052c4 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80052b8:	4b14      	ldr	r3, [pc, #80]	@ (800530c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80052ba:	69db      	ldr	r3, [r3, #28]
 80052bc:	4a13      	ldr	r2, [pc, #76]	@ (800530c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80052be:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80052c2:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	f003 0302 	and.w	r3, r3, #2
 80052cc:	2b00      	cmp	r3, #0
 80052ce:	d008      	beq.n	80052e2 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80052d0:	4b0e      	ldr	r3, [pc, #56]	@ (800530c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80052d2:	685b      	ldr	r3, [r3, #4]
 80052d4:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	689b      	ldr	r3, [r3, #8]
 80052dc:	490b      	ldr	r1, [pc, #44]	@ (800530c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80052de:	4313      	orrs	r3, r2
 80052e0:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	f003 0310 	and.w	r3, r3, #16
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	d008      	beq.n	8005300 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80052ee:	4b07      	ldr	r3, [pc, #28]	@ (800530c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80052f0:	685b      	ldr	r3, [r3, #4]
 80052f2:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	68db      	ldr	r3, [r3, #12]
 80052fa:	4904      	ldr	r1, [pc, #16]	@ (800530c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80052fc:	4313      	orrs	r3, r2
 80052fe:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8005300:	2300      	movs	r3, #0
}
 8005302:	4618      	mov	r0, r3
 8005304:	3718      	adds	r7, #24
 8005306:	46bd      	mov	sp, r7
 8005308:	bd80      	pop	{r7, pc}
 800530a:	bf00      	nop
 800530c:	40021000 	.word	0x40021000
 8005310:	40007000 	.word	0x40007000
 8005314:	42420440 	.word	0x42420440

08005318 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005318:	b580      	push	{r7, lr}
 800531a:	b082      	sub	sp, #8
 800531c:	af00      	add	r7, sp, #0
 800531e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	2b00      	cmp	r3, #0
 8005324:	d101      	bne.n	800532a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005326:	2301      	movs	r3, #1
 8005328:	e041      	b.n	80053ae <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005330:	b2db      	uxtb	r3, r3
 8005332:	2b00      	cmp	r3, #0
 8005334:	d106      	bne.n	8005344 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	2200      	movs	r2, #0
 800533a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800533e:	6878      	ldr	r0, [r7, #4]
 8005340:	f7fc fd84 	bl	8001e4c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	2202      	movs	r2, #2
 8005348:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	681a      	ldr	r2, [r3, #0]
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	3304      	adds	r3, #4
 8005354:	4619      	mov	r1, r3
 8005356:	4610      	mov	r0, r2
 8005358:	f000 f992 	bl	8005680 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	2201      	movs	r2, #1
 8005360:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	2201      	movs	r2, #1
 8005368:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	2201      	movs	r2, #1
 8005370:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	2201      	movs	r2, #1
 8005378:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	2201      	movs	r2, #1
 8005380:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	2201      	movs	r2, #1
 8005388:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	2201      	movs	r2, #1
 8005390:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	2201      	movs	r2, #1
 8005398:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	2201      	movs	r2, #1
 80053a0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	2201      	movs	r2, #1
 80053a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80053ac:	2300      	movs	r3, #0
}
 80053ae:	4618      	mov	r0, r3
 80053b0:	3708      	adds	r7, #8
 80053b2:	46bd      	mov	sp, r7
 80053b4:	bd80      	pop	{r7, pc}
	...

080053b8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80053b8:	b580      	push	{r7, lr}
 80053ba:	b084      	sub	sp, #16
 80053bc:	af00      	add	r7, sp, #0
 80053be:	6078      	str	r0, [r7, #4]
 80053c0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80053c2:	683b      	ldr	r3, [r7, #0]
 80053c4:	2b00      	cmp	r3, #0
 80053c6:	d109      	bne.n	80053dc <HAL_TIM_PWM_Start+0x24>
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80053ce:	b2db      	uxtb	r3, r3
 80053d0:	2b01      	cmp	r3, #1
 80053d2:	bf14      	ite	ne
 80053d4:	2301      	movne	r3, #1
 80053d6:	2300      	moveq	r3, #0
 80053d8:	b2db      	uxtb	r3, r3
 80053da:	e022      	b.n	8005422 <HAL_TIM_PWM_Start+0x6a>
 80053dc:	683b      	ldr	r3, [r7, #0]
 80053de:	2b04      	cmp	r3, #4
 80053e0:	d109      	bne.n	80053f6 <HAL_TIM_PWM_Start+0x3e>
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80053e8:	b2db      	uxtb	r3, r3
 80053ea:	2b01      	cmp	r3, #1
 80053ec:	bf14      	ite	ne
 80053ee:	2301      	movne	r3, #1
 80053f0:	2300      	moveq	r3, #0
 80053f2:	b2db      	uxtb	r3, r3
 80053f4:	e015      	b.n	8005422 <HAL_TIM_PWM_Start+0x6a>
 80053f6:	683b      	ldr	r3, [r7, #0]
 80053f8:	2b08      	cmp	r3, #8
 80053fa:	d109      	bne.n	8005410 <HAL_TIM_PWM_Start+0x58>
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005402:	b2db      	uxtb	r3, r3
 8005404:	2b01      	cmp	r3, #1
 8005406:	bf14      	ite	ne
 8005408:	2301      	movne	r3, #1
 800540a:	2300      	moveq	r3, #0
 800540c:	b2db      	uxtb	r3, r3
 800540e:	e008      	b.n	8005422 <HAL_TIM_PWM_Start+0x6a>
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005416:	b2db      	uxtb	r3, r3
 8005418:	2b01      	cmp	r3, #1
 800541a:	bf14      	ite	ne
 800541c:	2301      	movne	r3, #1
 800541e:	2300      	moveq	r3, #0
 8005420:	b2db      	uxtb	r3, r3
 8005422:	2b00      	cmp	r3, #0
 8005424:	d001      	beq.n	800542a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8005426:	2301      	movs	r3, #1
 8005428:	e05e      	b.n	80054e8 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800542a:	683b      	ldr	r3, [r7, #0]
 800542c:	2b00      	cmp	r3, #0
 800542e:	d104      	bne.n	800543a <HAL_TIM_PWM_Start+0x82>
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	2202      	movs	r2, #2
 8005434:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005438:	e013      	b.n	8005462 <HAL_TIM_PWM_Start+0xaa>
 800543a:	683b      	ldr	r3, [r7, #0]
 800543c:	2b04      	cmp	r3, #4
 800543e:	d104      	bne.n	800544a <HAL_TIM_PWM_Start+0x92>
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	2202      	movs	r2, #2
 8005444:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005448:	e00b      	b.n	8005462 <HAL_TIM_PWM_Start+0xaa>
 800544a:	683b      	ldr	r3, [r7, #0]
 800544c:	2b08      	cmp	r3, #8
 800544e:	d104      	bne.n	800545a <HAL_TIM_PWM_Start+0xa2>
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	2202      	movs	r2, #2
 8005454:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005458:	e003      	b.n	8005462 <HAL_TIM_PWM_Start+0xaa>
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	2202      	movs	r2, #2
 800545e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	2201      	movs	r2, #1
 8005468:	6839      	ldr	r1, [r7, #0]
 800546a:	4618      	mov	r0, r3
 800546c:	f000 fafe 	bl	8005a6c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	4a1e      	ldr	r2, [pc, #120]	@ (80054f0 <HAL_TIM_PWM_Start+0x138>)
 8005476:	4293      	cmp	r3, r2
 8005478:	d107      	bne.n	800548a <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005488:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	4a18      	ldr	r2, [pc, #96]	@ (80054f0 <HAL_TIM_PWM_Start+0x138>)
 8005490:	4293      	cmp	r3, r2
 8005492:	d00e      	beq.n	80054b2 <HAL_TIM_PWM_Start+0xfa>
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800549c:	d009      	beq.n	80054b2 <HAL_TIM_PWM_Start+0xfa>
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	4a14      	ldr	r2, [pc, #80]	@ (80054f4 <HAL_TIM_PWM_Start+0x13c>)
 80054a4:	4293      	cmp	r3, r2
 80054a6:	d004      	beq.n	80054b2 <HAL_TIM_PWM_Start+0xfa>
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	4a12      	ldr	r2, [pc, #72]	@ (80054f8 <HAL_TIM_PWM_Start+0x140>)
 80054ae:	4293      	cmp	r3, r2
 80054b0:	d111      	bne.n	80054d6 <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	689b      	ldr	r3, [r3, #8]
 80054b8:	f003 0307 	and.w	r3, r3, #7
 80054bc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	2b06      	cmp	r3, #6
 80054c2:	d010      	beq.n	80054e6 <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	681a      	ldr	r2, [r3, #0]
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	f042 0201 	orr.w	r2, r2, #1
 80054d2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80054d4:	e007      	b.n	80054e6 <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	681a      	ldr	r2, [r3, #0]
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	f042 0201 	orr.w	r2, r2, #1
 80054e4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80054e6:	2300      	movs	r3, #0
}
 80054e8:	4618      	mov	r0, r3
 80054ea:	3710      	adds	r7, #16
 80054ec:	46bd      	mov	sp, r7
 80054ee:	bd80      	pop	{r7, pc}
 80054f0:	40012c00 	.word	0x40012c00
 80054f4:	40000400 	.word	0x40000400
 80054f8:	40000800 	.word	0x40000800

080054fc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80054fc:	b580      	push	{r7, lr}
 80054fe:	b086      	sub	sp, #24
 8005500:	af00      	add	r7, sp, #0
 8005502:	60f8      	str	r0, [r7, #12]
 8005504:	60b9      	str	r1, [r7, #8]
 8005506:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005508:	2300      	movs	r3, #0
 800550a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005512:	2b01      	cmp	r3, #1
 8005514:	d101      	bne.n	800551a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005516:	2302      	movs	r3, #2
 8005518:	e0ae      	b.n	8005678 <HAL_TIM_PWM_ConfigChannel+0x17c>
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	2201      	movs	r2, #1
 800551e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	2b0c      	cmp	r3, #12
 8005526:	f200 809f 	bhi.w	8005668 <HAL_TIM_PWM_ConfigChannel+0x16c>
 800552a:	a201      	add	r2, pc, #4	@ (adr r2, 8005530 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800552c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005530:	08005565 	.word	0x08005565
 8005534:	08005669 	.word	0x08005669
 8005538:	08005669 	.word	0x08005669
 800553c:	08005669 	.word	0x08005669
 8005540:	080055a5 	.word	0x080055a5
 8005544:	08005669 	.word	0x08005669
 8005548:	08005669 	.word	0x08005669
 800554c:	08005669 	.word	0x08005669
 8005550:	080055e7 	.word	0x080055e7
 8005554:	08005669 	.word	0x08005669
 8005558:	08005669 	.word	0x08005669
 800555c:	08005669 	.word	0x08005669
 8005560:	08005627 	.word	0x08005627
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	68b9      	ldr	r1, [r7, #8]
 800556a:	4618      	mov	r0, r3
 800556c:	f000 f8f6 	bl	800575c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	699a      	ldr	r2, [r3, #24]
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	f042 0208 	orr.w	r2, r2, #8
 800557e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	699a      	ldr	r2, [r3, #24]
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	f022 0204 	bic.w	r2, r2, #4
 800558e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	6999      	ldr	r1, [r3, #24]
 8005596:	68bb      	ldr	r3, [r7, #8]
 8005598:	691a      	ldr	r2, [r3, #16]
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	430a      	orrs	r2, r1
 80055a0:	619a      	str	r2, [r3, #24]
      break;
 80055a2:	e064      	b.n	800566e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	68b9      	ldr	r1, [r7, #8]
 80055aa:	4618      	mov	r0, r3
 80055ac:	f000 f93c 	bl	8005828 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	699a      	ldr	r2, [r3, #24]
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80055be:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	699a      	ldr	r2, [r3, #24]
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80055ce:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	6999      	ldr	r1, [r3, #24]
 80055d6:	68bb      	ldr	r3, [r7, #8]
 80055d8:	691b      	ldr	r3, [r3, #16]
 80055da:	021a      	lsls	r2, r3, #8
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	430a      	orrs	r2, r1
 80055e2:	619a      	str	r2, [r3, #24]
      break;
 80055e4:	e043      	b.n	800566e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	68b9      	ldr	r1, [r7, #8]
 80055ec:	4618      	mov	r0, r3
 80055ee:	f000 f985 	bl	80058fc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	69da      	ldr	r2, [r3, #28]
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	f042 0208 	orr.w	r2, r2, #8
 8005600:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	69da      	ldr	r2, [r3, #28]
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	f022 0204 	bic.w	r2, r2, #4
 8005610:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	69d9      	ldr	r1, [r3, #28]
 8005618:	68bb      	ldr	r3, [r7, #8]
 800561a:	691a      	ldr	r2, [r3, #16]
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	430a      	orrs	r2, r1
 8005622:	61da      	str	r2, [r3, #28]
      break;
 8005624:	e023      	b.n	800566e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005626:	68fb      	ldr	r3, [r7, #12]
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	68b9      	ldr	r1, [r7, #8]
 800562c:	4618      	mov	r0, r3
 800562e:	f000 f9cf 	bl	80059d0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	69da      	ldr	r2, [r3, #28]
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005640:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005642:	68fb      	ldr	r3, [r7, #12]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	69da      	ldr	r2, [r3, #28]
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005650:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005652:	68fb      	ldr	r3, [r7, #12]
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	69d9      	ldr	r1, [r3, #28]
 8005658:	68bb      	ldr	r3, [r7, #8]
 800565a:	691b      	ldr	r3, [r3, #16]
 800565c:	021a      	lsls	r2, r3, #8
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	430a      	orrs	r2, r1
 8005664:	61da      	str	r2, [r3, #28]
      break;
 8005666:	e002      	b.n	800566e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8005668:	2301      	movs	r3, #1
 800566a:	75fb      	strb	r3, [r7, #23]
      break;
 800566c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	2200      	movs	r2, #0
 8005672:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005676:	7dfb      	ldrb	r3, [r7, #23]
}
 8005678:	4618      	mov	r0, r3
 800567a:	3718      	adds	r7, #24
 800567c:	46bd      	mov	sp, r7
 800567e:	bd80      	pop	{r7, pc}

08005680 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005680:	b480      	push	{r7}
 8005682:	b085      	sub	sp, #20
 8005684:	af00      	add	r7, sp, #0
 8005686:	6078      	str	r0, [r7, #4]
 8005688:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	4a2f      	ldr	r2, [pc, #188]	@ (8005750 <TIM_Base_SetConfig+0xd0>)
 8005694:	4293      	cmp	r3, r2
 8005696:	d00b      	beq.n	80056b0 <TIM_Base_SetConfig+0x30>
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800569e:	d007      	beq.n	80056b0 <TIM_Base_SetConfig+0x30>
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	4a2c      	ldr	r2, [pc, #176]	@ (8005754 <TIM_Base_SetConfig+0xd4>)
 80056a4:	4293      	cmp	r3, r2
 80056a6:	d003      	beq.n	80056b0 <TIM_Base_SetConfig+0x30>
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	4a2b      	ldr	r2, [pc, #172]	@ (8005758 <TIM_Base_SetConfig+0xd8>)
 80056ac:	4293      	cmp	r3, r2
 80056ae:	d108      	bne.n	80056c2 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80056b6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80056b8:	683b      	ldr	r3, [r7, #0]
 80056ba:	685b      	ldr	r3, [r3, #4]
 80056bc:	68fa      	ldr	r2, [r7, #12]
 80056be:	4313      	orrs	r3, r2
 80056c0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	4a22      	ldr	r2, [pc, #136]	@ (8005750 <TIM_Base_SetConfig+0xd0>)
 80056c6:	4293      	cmp	r3, r2
 80056c8:	d00b      	beq.n	80056e2 <TIM_Base_SetConfig+0x62>
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80056d0:	d007      	beq.n	80056e2 <TIM_Base_SetConfig+0x62>
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	4a1f      	ldr	r2, [pc, #124]	@ (8005754 <TIM_Base_SetConfig+0xd4>)
 80056d6:	4293      	cmp	r3, r2
 80056d8:	d003      	beq.n	80056e2 <TIM_Base_SetConfig+0x62>
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	4a1e      	ldr	r2, [pc, #120]	@ (8005758 <TIM_Base_SetConfig+0xd8>)
 80056de:	4293      	cmp	r3, r2
 80056e0:	d108      	bne.n	80056f4 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80056e8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80056ea:	683b      	ldr	r3, [r7, #0]
 80056ec:	68db      	ldr	r3, [r3, #12]
 80056ee:	68fa      	ldr	r2, [r7, #12]
 80056f0:	4313      	orrs	r3, r2
 80056f2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80056fa:	683b      	ldr	r3, [r7, #0]
 80056fc:	695b      	ldr	r3, [r3, #20]
 80056fe:	4313      	orrs	r3, r2
 8005700:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	68fa      	ldr	r2, [r7, #12]
 8005706:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005708:	683b      	ldr	r3, [r7, #0]
 800570a:	689a      	ldr	r2, [r3, #8]
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005710:	683b      	ldr	r3, [r7, #0]
 8005712:	681a      	ldr	r2, [r3, #0]
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	4a0d      	ldr	r2, [pc, #52]	@ (8005750 <TIM_Base_SetConfig+0xd0>)
 800571c:	4293      	cmp	r3, r2
 800571e:	d103      	bne.n	8005728 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005720:	683b      	ldr	r3, [r7, #0]
 8005722:	691a      	ldr	r2, [r3, #16]
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	2201      	movs	r2, #1
 800572c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	691b      	ldr	r3, [r3, #16]
 8005732:	f003 0301 	and.w	r3, r3, #1
 8005736:	2b00      	cmp	r3, #0
 8005738:	d005      	beq.n	8005746 <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	691b      	ldr	r3, [r3, #16]
 800573e:	f023 0201 	bic.w	r2, r3, #1
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	611a      	str	r2, [r3, #16]
  }
}
 8005746:	bf00      	nop
 8005748:	3714      	adds	r7, #20
 800574a:	46bd      	mov	sp, r7
 800574c:	bc80      	pop	{r7}
 800574e:	4770      	bx	lr
 8005750:	40012c00 	.word	0x40012c00
 8005754:	40000400 	.word	0x40000400
 8005758:	40000800 	.word	0x40000800

0800575c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800575c:	b480      	push	{r7}
 800575e:	b087      	sub	sp, #28
 8005760:	af00      	add	r7, sp, #0
 8005762:	6078      	str	r0, [r7, #4]
 8005764:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	6a1b      	ldr	r3, [r3, #32]
 800576a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	6a1b      	ldr	r3, [r3, #32]
 8005770:	f023 0201 	bic.w	r2, r3, #1
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	685b      	ldr	r3, [r3, #4]
 800577c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	699b      	ldr	r3, [r3, #24]
 8005782:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800578a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	f023 0303 	bic.w	r3, r3, #3
 8005792:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005794:	683b      	ldr	r3, [r7, #0]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	68fa      	ldr	r2, [r7, #12]
 800579a:	4313      	orrs	r3, r2
 800579c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800579e:	697b      	ldr	r3, [r7, #20]
 80057a0:	f023 0302 	bic.w	r3, r3, #2
 80057a4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80057a6:	683b      	ldr	r3, [r7, #0]
 80057a8:	689b      	ldr	r3, [r3, #8]
 80057aa:	697a      	ldr	r2, [r7, #20]
 80057ac:	4313      	orrs	r3, r2
 80057ae:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	4a1c      	ldr	r2, [pc, #112]	@ (8005824 <TIM_OC1_SetConfig+0xc8>)
 80057b4:	4293      	cmp	r3, r2
 80057b6:	d10c      	bne.n	80057d2 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80057b8:	697b      	ldr	r3, [r7, #20]
 80057ba:	f023 0308 	bic.w	r3, r3, #8
 80057be:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80057c0:	683b      	ldr	r3, [r7, #0]
 80057c2:	68db      	ldr	r3, [r3, #12]
 80057c4:	697a      	ldr	r2, [r7, #20]
 80057c6:	4313      	orrs	r3, r2
 80057c8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80057ca:	697b      	ldr	r3, [r7, #20]
 80057cc:	f023 0304 	bic.w	r3, r3, #4
 80057d0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	4a13      	ldr	r2, [pc, #76]	@ (8005824 <TIM_OC1_SetConfig+0xc8>)
 80057d6:	4293      	cmp	r3, r2
 80057d8:	d111      	bne.n	80057fe <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80057da:	693b      	ldr	r3, [r7, #16]
 80057dc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80057e0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80057e2:	693b      	ldr	r3, [r7, #16]
 80057e4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80057e8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80057ea:	683b      	ldr	r3, [r7, #0]
 80057ec:	695b      	ldr	r3, [r3, #20]
 80057ee:	693a      	ldr	r2, [r7, #16]
 80057f0:	4313      	orrs	r3, r2
 80057f2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80057f4:	683b      	ldr	r3, [r7, #0]
 80057f6:	699b      	ldr	r3, [r3, #24]
 80057f8:	693a      	ldr	r2, [r7, #16]
 80057fa:	4313      	orrs	r3, r2
 80057fc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	693a      	ldr	r2, [r7, #16]
 8005802:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	68fa      	ldr	r2, [r7, #12]
 8005808:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800580a:	683b      	ldr	r3, [r7, #0]
 800580c:	685a      	ldr	r2, [r3, #4]
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	697a      	ldr	r2, [r7, #20]
 8005816:	621a      	str	r2, [r3, #32]
}
 8005818:	bf00      	nop
 800581a:	371c      	adds	r7, #28
 800581c:	46bd      	mov	sp, r7
 800581e:	bc80      	pop	{r7}
 8005820:	4770      	bx	lr
 8005822:	bf00      	nop
 8005824:	40012c00 	.word	0x40012c00

08005828 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005828:	b480      	push	{r7}
 800582a:	b087      	sub	sp, #28
 800582c:	af00      	add	r7, sp, #0
 800582e:	6078      	str	r0, [r7, #4]
 8005830:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	6a1b      	ldr	r3, [r3, #32]
 8005836:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	6a1b      	ldr	r3, [r3, #32]
 800583c:	f023 0210 	bic.w	r2, r3, #16
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	685b      	ldr	r3, [r3, #4]
 8005848:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	699b      	ldr	r3, [r3, #24]
 800584e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005856:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800585e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005860:	683b      	ldr	r3, [r7, #0]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	021b      	lsls	r3, r3, #8
 8005866:	68fa      	ldr	r2, [r7, #12]
 8005868:	4313      	orrs	r3, r2
 800586a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800586c:	697b      	ldr	r3, [r7, #20]
 800586e:	f023 0320 	bic.w	r3, r3, #32
 8005872:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005874:	683b      	ldr	r3, [r7, #0]
 8005876:	689b      	ldr	r3, [r3, #8]
 8005878:	011b      	lsls	r3, r3, #4
 800587a:	697a      	ldr	r2, [r7, #20]
 800587c:	4313      	orrs	r3, r2
 800587e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	4a1d      	ldr	r2, [pc, #116]	@ (80058f8 <TIM_OC2_SetConfig+0xd0>)
 8005884:	4293      	cmp	r3, r2
 8005886:	d10d      	bne.n	80058a4 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005888:	697b      	ldr	r3, [r7, #20]
 800588a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800588e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005890:	683b      	ldr	r3, [r7, #0]
 8005892:	68db      	ldr	r3, [r3, #12]
 8005894:	011b      	lsls	r3, r3, #4
 8005896:	697a      	ldr	r2, [r7, #20]
 8005898:	4313      	orrs	r3, r2
 800589a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800589c:	697b      	ldr	r3, [r7, #20]
 800589e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80058a2:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	4a14      	ldr	r2, [pc, #80]	@ (80058f8 <TIM_OC2_SetConfig+0xd0>)
 80058a8:	4293      	cmp	r3, r2
 80058aa:	d113      	bne.n	80058d4 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80058ac:	693b      	ldr	r3, [r7, #16]
 80058ae:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80058b2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80058b4:	693b      	ldr	r3, [r7, #16]
 80058b6:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80058ba:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80058bc:	683b      	ldr	r3, [r7, #0]
 80058be:	695b      	ldr	r3, [r3, #20]
 80058c0:	009b      	lsls	r3, r3, #2
 80058c2:	693a      	ldr	r2, [r7, #16]
 80058c4:	4313      	orrs	r3, r2
 80058c6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80058c8:	683b      	ldr	r3, [r7, #0]
 80058ca:	699b      	ldr	r3, [r3, #24]
 80058cc:	009b      	lsls	r3, r3, #2
 80058ce:	693a      	ldr	r2, [r7, #16]
 80058d0:	4313      	orrs	r3, r2
 80058d2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	693a      	ldr	r2, [r7, #16]
 80058d8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	68fa      	ldr	r2, [r7, #12]
 80058de:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80058e0:	683b      	ldr	r3, [r7, #0]
 80058e2:	685a      	ldr	r2, [r3, #4]
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	697a      	ldr	r2, [r7, #20]
 80058ec:	621a      	str	r2, [r3, #32]
}
 80058ee:	bf00      	nop
 80058f0:	371c      	adds	r7, #28
 80058f2:	46bd      	mov	sp, r7
 80058f4:	bc80      	pop	{r7}
 80058f6:	4770      	bx	lr
 80058f8:	40012c00 	.word	0x40012c00

080058fc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80058fc:	b480      	push	{r7}
 80058fe:	b087      	sub	sp, #28
 8005900:	af00      	add	r7, sp, #0
 8005902:	6078      	str	r0, [r7, #4]
 8005904:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	6a1b      	ldr	r3, [r3, #32]
 800590a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	6a1b      	ldr	r3, [r3, #32]
 8005910:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	685b      	ldr	r3, [r3, #4]
 800591c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	69db      	ldr	r3, [r3, #28]
 8005922:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005924:	68fb      	ldr	r3, [r7, #12]
 8005926:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800592a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	f023 0303 	bic.w	r3, r3, #3
 8005932:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005934:	683b      	ldr	r3, [r7, #0]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	68fa      	ldr	r2, [r7, #12]
 800593a:	4313      	orrs	r3, r2
 800593c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800593e:	697b      	ldr	r3, [r7, #20]
 8005940:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005944:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005946:	683b      	ldr	r3, [r7, #0]
 8005948:	689b      	ldr	r3, [r3, #8]
 800594a:	021b      	lsls	r3, r3, #8
 800594c:	697a      	ldr	r2, [r7, #20]
 800594e:	4313      	orrs	r3, r2
 8005950:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	4a1d      	ldr	r2, [pc, #116]	@ (80059cc <TIM_OC3_SetConfig+0xd0>)
 8005956:	4293      	cmp	r3, r2
 8005958:	d10d      	bne.n	8005976 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800595a:	697b      	ldr	r3, [r7, #20]
 800595c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005960:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005962:	683b      	ldr	r3, [r7, #0]
 8005964:	68db      	ldr	r3, [r3, #12]
 8005966:	021b      	lsls	r3, r3, #8
 8005968:	697a      	ldr	r2, [r7, #20]
 800596a:	4313      	orrs	r3, r2
 800596c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800596e:	697b      	ldr	r3, [r7, #20]
 8005970:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005974:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	4a14      	ldr	r2, [pc, #80]	@ (80059cc <TIM_OC3_SetConfig+0xd0>)
 800597a:	4293      	cmp	r3, r2
 800597c:	d113      	bne.n	80059a6 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800597e:	693b      	ldr	r3, [r7, #16]
 8005980:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005984:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005986:	693b      	ldr	r3, [r7, #16]
 8005988:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800598c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800598e:	683b      	ldr	r3, [r7, #0]
 8005990:	695b      	ldr	r3, [r3, #20]
 8005992:	011b      	lsls	r3, r3, #4
 8005994:	693a      	ldr	r2, [r7, #16]
 8005996:	4313      	orrs	r3, r2
 8005998:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800599a:	683b      	ldr	r3, [r7, #0]
 800599c:	699b      	ldr	r3, [r3, #24]
 800599e:	011b      	lsls	r3, r3, #4
 80059a0:	693a      	ldr	r2, [r7, #16]
 80059a2:	4313      	orrs	r3, r2
 80059a4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	693a      	ldr	r2, [r7, #16]
 80059aa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	68fa      	ldr	r2, [r7, #12]
 80059b0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80059b2:	683b      	ldr	r3, [r7, #0]
 80059b4:	685a      	ldr	r2, [r3, #4]
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	697a      	ldr	r2, [r7, #20]
 80059be:	621a      	str	r2, [r3, #32]
}
 80059c0:	bf00      	nop
 80059c2:	371c      	adds	r7, #28
 80059c4:	46bd      	mov	sp, r7
 80059c6:	bc80      	pop	{r7}
 80059c8:	4770      	bx	lr
 80059ca:	bf00      	nop
 80059cc:	40012c00 	.word	0x40012c00

080059d0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80059d0:	b480      	push	{r7}
 80059d2:	b087      	sub	sp, #28
 80059d4:	af00      	add	r7, sp, #0
 80059d6:	6078      	str	r0, [r7, #4]
 80059d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	6a1b      	ldr	r3, [r3, #32]
 80059de:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	6a1b      	ldr	r3, [r3, #32]
 80059e4:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	685b      	ldr	r3, [r3, #4]
 80059f0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	69db      	ldr	r3, [r3, #28]
 80059f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80059fe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005a06:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005a08:	683b      	ldr	r3, [r7, #0]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	021b      	lsls	r3, r3, #8
 8005a0e:	68fa      	ldr	r2, [r7, #12]
 8005a10:	4313      	orrs	r3, r2
 8005a12:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005a14:	693b      	ldr	r3, [r7, #16]
 8005a16:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005a1a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005a1c:	683b      	ldr	r3, [r7, #0]
 8005a1e:	689b      	ldr	r3, [r3, #8]
 8005a20:	031b      	lsls	r3, r3, #12
 8005a22:	693a      	ldr	r2, [r7, #16]
 8005a24:	4313      	orrs	r3, r2
 8005a26:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	4a0f      	ldr	r2, [pc, #60]	@ (8005a68 <TIM_OC4_SetConfig+0x98>)
 8005a2c:	4293      	cmp	r3, r2
 8005a2e:	d109      	bne.n	8005a44 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005a30:	697b      	ldr	r3, [r7, #20]
 8005a32:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005a36:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005a38:	683b      	ldr	r3, [r7, #0]
 8005a3a:	695b      	ldr	r3, [r3, #20]
 8005a3c:	019b      	lsls	r3, r3, #6
 8005a3e:	697a      	ldr	r2, [r7, #20]
 8005a40:	4313      	orrs	r3, r2
 8005a42:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	697a      	ldr	r2, [r7, #20]
 8005a48:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	68fa      	ldr	r2, [r7, #12]
 8005a4e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005a50:	683b      	ldr	r3, [r7, #0]
 8005a52:	685a      	ldr	r2, [r3, #4]
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	693a      	ldr	r2, [r7, #16]
 8005a5c:	621a      	str	r2, [r3, #32]
}
 8005a5e:	bf00      	nop
 8005a60:	371c      	adds	r7, #28
 8005a62:	46bd      	mov	sp, r7
 8005a64:	bc80      	pop	{r7}
 8005a66:	4770      	bx	lr
 8005a68:	40012c00 	.word	0x40012c00

08005a6c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005a6c:	b480      	push	{r7}
 8005a6e:	b087      	sub	sp, #28
 8005a70:	af00      	add	r7, sp, #0
 8005a72:	60f8      	str	r0, [r7, #12]
 8005a74:	60b9      	str	r1, [r7, #8]
 8005a76:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005a78:	68bb      	ldr	r3, [r7, #8]
 8005a7a:	f003 031f 	and.w	r3, r3, #31
 8005a7e:	2201      	movs	r2, #1
 8005a80:	fa02 f303 	lsl.w	r3, r2, r3
 8005a84:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	6a1a      	ldr	r2, [r3, #32]
 8005a8a:	697b      	ldr	r3, [r7, #20]
 8005a8c:	43db      	mvns	r3, r3
 8005a8e:	401a      	ands	r2, r3
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005a94:	68fb      	ldr	r3, [r7, #12]
 8005a96:	6a1a      	ldr	r2, [r3, #32]
 8005a98:	68bb      	ldr	r3, [r7, #8]
 8005a9a:	f003 031f 	and.w	r3, r3, #31
 8005a9e:	6879      	ldr	r1, [r7, #4]
 8005aa0:	fa01 f303 	lsl.w	r3, r1, r3
 8005aa4:	431a      	orrs	r2, r3
 8005aa6:	68fb      	ldr	r3, [r7, #12]
 8005aa8:	621a      	str	r2, [r3, #32]
}
 8005aaa:	bf00      	nop
 8005aac:	371c      	adds	r7, #28
 8005aae:	46bd      	mov	sp, r7
 8005ab0:	bc80      	pop	{r7}
 8005ab2:	4770      	bx	lr

08005ab4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005ab4:	b480      	push	{r7}
 8005ab6:	b085      	sub	sp, #20
 8005ab8:	af00      	add	r7, sp, #0
 8005aba:	6078      	str	r0, [r7, #4]
 8005abc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005ac4:	2b01      	cmp	r3, #1
 8005ac6:	d101      	bne.n	8005acc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005ac8:	2302      	movs	r3, #2
 8005aca:	e046      	b.n	8005b5a <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	2201      	movs	r2, #1
 8005ad0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	2202      	movs	r2, #2
 8005ad8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	685b      	ldr	r3, [r3, #4]
 8005ae2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	689b      	ldr	r3, [r3, #8]
 8005aea:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005af2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005af4:	683b      	ldr	r3, [r7, #0]
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	68fa      	ldr	r2, [r7, #12]
 8005afa:	4313      	orrs	r3, r2
 8005afc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	68fa      	ldr	r2, [r7, #12]
 8005b04:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	4a16      	ldr	r2, [pc, #88]	@ (8005b64 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8005b0c:	4293      	cmp	r3, r2
 8005b0e:	d00e      	beq.n	8005b2e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005b18:	d009      	beq.n	8005b2e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	4a12      	ldr	r2, [pc, #72]	@ (8005b68 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8005b20:	4293      	cmp	r3, r2
 8005b22:	d004      	beq.n	8005b2e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	4a10      	ldr	r2, [pc, #64]	@ (8005b6c <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8005b2a:	4293      	cmp	r3, r2
 8005b2c:	d10c      	bne.n	8005b48 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005b2e:	68bb      	ldr	r3, [r7, #8]
 8005b30:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005b34:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005b36:	683b      	ldr	r3, [r7, #0]
 8005b38:	685b      	ldr	r3, [r3, #4]
 8005b3a:	68ba      	ldr	r2, [r7, #8]
 8005b3c:	4313      	orrs	r3, r2
 8005b3e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	68ba      	ldr	r2, [r7, #8]
 8005b46:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	2201      	movs	r2, #1
 8005b4c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	2200      	movs	r2, #0
 8005b54:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005b58:	2300      	movs	r3, #0
}
 8005b5a:	4618      	mov	r0, r3
 8005b5c:	3714      	adds	r7, #20
 8005b5e:	46bd      	mov	sp, r7
 8005b60:	bc80      	pop	{r7}
 8005b62:	4770      	bx	lr
 8005b64:	40012c00 	.word	0x40012c00
 8005b68:	40000400 	.word	0x40000400
 8005b6c:	40000800 	.word	0x40000800

08005b70 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8005b70:	b480      	push	{r7}
 8005b72:	b085      	sub	sp, #20
 8005b74:	af00      	add	r7, sp, #0
 8005b76:	6078      	str	r0, [r7, #4]
 8005b78:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8005b7a:	2300      	movs	r3, #0
 8005b7c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005b84:	2b01      	cmp	r3, #1
 8005b86:	d101      	bne.n	8005b8c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8005b88:	2302      	movs	r3, #2
 8005b8a:	e03d      	b.n	8005c08 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	2201      	movs	r2, #1
 8005b90:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8005b94:	68fb      	ldr	r3, [r7, #12]
 8005b96:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8005b9a:	683b      	ldr	r3, [r7, #0]
 8005b9c:	68db      	ldr	r3, [r3, #12]
 8005b9e:	4313      	orrs	r3, r2
 8005ba0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8005ba2:	68fb      	ldr	r3, [r7, #12]
 8005ba4:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005ba8:	683b      	ldr	r3, [r7, #0]
 8005baa:	689b      	ldr	r3, [r3, #8]
 8005bac:	4313      	orrs	r3, r2
 8005bae:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8005bb0:	68fb      	ldr	r3, [r7, #12]
 8005bb2:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8005bb6:	683b      	ldr	r3, [r7, #0]
 8005bb8:	685b      	ldr	r3, [r3, #4]
 8005bba:	4313      	orrs	r3, r2
 8005bbc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8005bbe:	68fb      	ldr	r3, [r7, #12]
 8005bc0:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8005bc4:	683b      	ldr	r3, [r7, #0]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	4313      	orrs	r3, r2
 8005bca:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8005bd2:	683b      	ldr	r3, [r7, #0]
 8005bd4:	691b      	ldr	r3, [r3, #16]
 8005bd6:	4313      	orrs	r3, r2
 8005bd8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8005bda:	68fb      	ldr	r3, [r7, #12]
 8005bdc:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8005be0:	683b      	ldr	r3, [r7, #0]
 8005be2:	695b      	ldr	r3, [r3, #20]
 8005be4:	4313      	orrs	r3, r2
 8005be6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8005bee:	683b      	ldr	r3, [r7, #0]
 8005bf0:	69db      	ldr	r3, [r3, #28]
 8005bf2:	4313      	orrs	r3, r2
 8005bf4:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	68fa      	ldr	r2, [r7, #12]
 8005bfc:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	2200      	movs	r2, #0
 8005c02:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005c06:	2300      	movs	r3, #0
}
 8005c08:	4618      	mov	r0, r3
 8005c0a:	3714      	adds	r7, #20
 8005c0c:	46bd      	mov	sp, r7
 8005c0e:	bc80      	pop	{r7}
 8005c10:	4770      	bx	lr

08005c12 <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8005c12:	b480      	push	{r7}
 8005c14:	b085      	sub	sp, #20
 8005c16:	af00      	add	r7, sp, #0
 8005c18:	60f8      	str	r0, [r7, #12]
 8005c1a:	4638      	mov	r0, r7
 8005c1c:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8005c20:	2300      	movs	r3, #0
}
 8005c22:	4618      	mov	r0, r3
 8005c24:	3714      	adds	r7, #20
 8005c26:	46bd      	mov	sp, r7
 8005c28:	bc80      	pop	{r7}
 8005c2a:	4770      	bx	lr

08005c2c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8005c2c:	b480      	push	{r7}
 8005c2e:	b085      	sub	sp, #20
 8005c30:	af00      	add	r7, sp, #0
 8005c32:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	2200      	movs	r2, #0
 8005c38:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8005c3c:	f44f 433f 	mov.w	r3, #48896	@ 0xbf00
 8005c40:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8005c42:	68fb      	ldr	r3, [r7, #12]
 8005c44:	b29a      	uxth	r2, r3
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8005c4c:	2300      	movs	r3, #0
}
 8005c4e:	4618      	mov	r0, r3
 8005c50:	3714      	adds	r7, #20
 8005c52:	46bd      	mov	sp, r7
 8005c54:	bc80      	pop	{r7}
 8005c56:	4770      	bx	lr

08005c58 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8005c58:	b480      	push	{r7}
 8005c5a:	b085      	sub	sp, #20
 8005c5c:	af00      	add	r7, sp, #0
 8005c5e:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8005c60:	f44f 433f 	mov.w	r3, #48896	@ 0xbf00
 8005c64:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8005c6c:	b29a      	uxth	r2, r3
 8005c6e:	68fb      	ldr	r3, [r7, #12]
 8005c70:	b29b      	uxth	r3, r3
 8005c72:	43db      	mvns	r3, r3
 8005c74:	b29b      	uxth	r3, r3
 8005c76:	4013      	ands	r3, r2
 8005c78:	b29a      	uxth	r2, r3
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8005c80:	2300      	movs	r3, #0
}
 8005c82:	4618      	mov	r0, r3
 8005c84:	3714      	adds	r7, #20
 8005c86:	46bd      	mov	sp, r7
 8005c88:	bc80      	pop	{r7}
 8005c8a:	4770      	bx	lr

08005c8c <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 8005c8c:	b480      	push	{r7}
 8005c8e:	b083      	sub	sp, #12
 8005c90:	af00      	add	r7, sp, #0
 8005c92:	6078      	str	r0, [r7, #4]
 8005c94:	460b      	mov	r3, r1
 8005c96:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8005c98:	2300      	movs	r3, #0
}
 8005c9a:	4618      	mov	r0, r3
 8005c9c:	370c      	adds	r7, #12
 8005c9e:	46bd      	mov	sp, r7
 8005ca0:	bc80      	pop	{r7}
 8005ca2:	4770      	bx	lr

08005ca4 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8005ca4:	b480      	push	{r7}
 8005ca6:	b085      	sub	sp, #20
 8005ca8:	af00      	add	r7, sp, #0
 8005caa:	60f8      	str	r0, [r7, #12]
 8005cac:	4638      	mov	r0, r7
 8005cae:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8005cb2:	68fb      	ldr	r3, [r7, #12]
 8005cb4:	2201      	movs	r2, #1
 8005cb6:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8005cba:	68fb      	ldr	r3, [r7, #12]
 8005cbc:	2200      	movs	r2, #0
 8005cbe:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8005cc2:	68fb      	ldr	r3, [r7, #12]
 8005cc4:	2200      	movs	r2, #0
 8005cc6:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8005cca:	68fb      	ldr	r3, [r7, #12]
 8005ccc:	2200      	movs	r2, #0
 8005cce:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 8005cd2:	2300      	movs	r3, #0
}
 8005cd4:	4618      	mov	r0, r3
 8005cd6:	3714      	adds	r7, #20
 8005cd8:	46bd      	mov	sp, r7
 8005cda:	bc80      	pop	{r7}
 8005cdc:	4770      	bx	lr
	...

08005ce0 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005ce0:	b480      	push	{r7}
 8005ce2:	b09d      	sub	sp, #116	@ 0x74
 8005ce4:	af00      	add	r7, sp, #0
 8005ce6:	6078      	str	r0, [r7, #4]
 8005ce8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8005cea:	2300      	movs	r3, #0
 8005cec:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8005cf0:	687a      	ldr	r2, [r7, #4]
 8005cf2:	683b      	ldr	r3, [r7, #0]
 8005cf4:	781b      	ldrb	r3, [r3, #0]
 8005cf6:	009b      	lsls	r3, r3, #2
 8005cf8:	4413      	add	r3, r2
 8005cfa:	881b      	ldrh	r3, [r3, #0]
 8005cfc:	b29b      	uxth	r3, r3
 8005cfe:	f423 43ec 	bic.w	r3, r3, #30208	@ 0x7600
 8005d02:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005d06:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 8005d0a:	683b      	ldr	r3, [r7, #0]
 8005d0c:	78db      	ldrb	r3, [r3, #3]
 8005d0e:	2b03      	cmp	r3, #3
 8005d10:	d81f      	bhi.n	8005d52 <USB_ActivateEndpoint+0x72>
 8005d12:	a201      	add	r2, pc, #4	@ (adr r2, 8005d18 <USB_ActivateEndpoint+0x38>)
 8005d14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d18:	08005d29 	.word	0x08005d29
 8005d1c:	08005d45 	.word	0x08005d45
 8005d20:	08005d5b 	.word	0x08005d5b
 8005d24:	08005d37 	.word	0x08005d37
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8005d28:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8005d2c:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8005d30:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 8005d34:	e012      	b.n	8005d5c <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8005d36:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8005d3a:	f443 63c0 	orr.w	r3, r3, #1536	@ 0x600
 8005d3e:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 8005d42:	e00b      	b.n	8005d5c <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8005d44:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8005d48:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8005d4c:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 8005d50:	e004      	b.n	8005d5c <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 8005d52:	2301      	movs	r3, #1
 8005d54:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
      break;
 8005d58:	e000      	b.n	8005d5c <USB_ActivateEndpoint+0x7c>
      break;
 8005d5a:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8005d5c:	687a      	ldr	r2, [r7, #4]
 8005d5e:	683b      	ldr	r3, [r7, #0]
 8005d60:	781b      	ldrb	r3, [r3, #0]
 8005d62:	009b      	lsls	r3, r3, #2
 8005d64:	441a      	add	r2, r3
 8005d66:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8005d6a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005d6e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005d72:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005d76:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005d7a:	b29b      	uxth	r3, r3
 8005d7c:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8005d7e:	687a      	ldr	r2, [r7, #4]
 8005d80:	683b      	ldr	r3, [r7, #0]
 8005d82:	781b      	ldrb	r3, [r3, #0]
 8005d84:	009b      	lsls	r3, r3, #2
 8005d86:	4413      	add	r3, r2
 8005d88:	881b      	ldrh	r3, [r3, #0]
 8005d8a:	b29b      	uxth	r3, r3
 8005d8c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005d90:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005d94:	b29b      	uxth	r3, r3
 8005d96:	683a      	ldr	r2, [r7, #0]
 8005d98:	7812      	ldrb	r2, [r2, #0]
 8005d9a:	4313      	orrs	r3, r2
 8005d9c:	f8a7 3066 	strh.w	r3, [r7, #102]	@ 0x66
 8005da0:	687a      	ldr	r2, [r7, #4]
 8005da2:	683b      	ldr	r3, [r7, #0]
 8005da4:	781b      	ldrb	r3, [r3, #0]
 8005da6:	009b      	lsls	r3, r3, #2
 8005da8:	441a      	add	r2, r3
 8005daa:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 8005dae:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005db2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005db6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005dba:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005dbe:	b29b      	uxth	r3, r3
 8005dc0:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8005dc2:	683b      	ldr	r3, [r7, #0]
 8005dc4:	7b1b      	ldrb	r3, [r3, #12]
 8005dc6:	2b00      	cmp	r3, #0
 8005dc8:	f040 8178 	bne.w	80060bc <USB_ActivateEndpoint+0x3dc>
  {
    if (ep->is_in != 0U)
 8005dcc:	683b      	ldr	r3, [r7, #0]
 8005dce:	785b      	ldrb	r3, [r3, #1]
 8005dd0:	2b00      	cmp	r3, #0
 8005dd2:	f000 8084 	beq.w	8005ede <USB_ActivateEndpoint+0x1fe>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	61bb      	str	r3, [r7, #24]
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005de0:	b29b      	uxth	r3, r3
 8005de2:	461a      	mov	r2, r3
 8005de4:	69bb      	ldr	r3, [r7, #24]
 8005de6:	4413      	add	r3, r2
 8005de8:	61bb      	str	r3, [r7, #24]
 8005dea:	683b      	ldr	r3, [r7, #0]
 8005dec:	781b      	ldrb	r3, [r3, #0]
 8005dee:	011a      	lsls	r2, r3, #4
 8005df0:	69bb      	ldr	r3, [r7, #24]
 8005df2:	4413      	add	r3, r2
 8005df4:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005df8:	617b      	str	r3, [r7, #20]
 8005dfa:	683b      	ldr	r3, [r7, #0]
 8005dfc:	88db      	ldrh	r3, [r3, #6]
 8005dfe:	085b      	lsrs	r3, r3, #1
 8005e00:	b29b      	uxth	r3, r3
 8005e02:	005b      	lsls	r3, r3, #1
 8005e04:	b29a      	uxth	r2, r3
 8005e06:	697b      	ldr	r3, [r7, #20]
 8005e08:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005e0a:	687a      	ldr	r2, [r7, #4]
 8005e0c:	683b      	ldr	r3, [r7, #0]
 8005e0e:	781b      	ldrb	r3, [r3, #0]
 8005e10:	009b      	lsls	r3, r3, #2
 8005e12:	4413      	add	r3, r2
 8005e14:	881b      	ldrh	r3, [r3, #0]
 8005e16:	827b      	strh	r3, [r7, #18]
 8005e18:	8a7b      	ldrh	r3, [r7, #18]
 8005e1a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005e1e:	2b00      	cmp	r3, #0
 8005e20:	d01b      	beq.n	8005e5a <USB_ActivateEndpoint+0x17a>
 8005e22:	687a      	ldr	r2, [r7, #4]
 8005e24:	683b      	ldr	r3, [r7, #0]
 8005e26:	781b      	ldrb	r3, [r3, #0]
 8005e28:	009b      	lsls	r3, r3, #2
 8005e2a:	4413      	add	r3, r2
 8005e2c:	881b      	ldrh	r3, [r3, #0]
 8005e2e:	b29b      	uxth	r3, r3
 8005e30:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005e34:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005e38:	823b      	strh	r3, [r7, #16]
 8005e3a:	687a      	ldr	r2, [r7, #4]
 8005e3c:	683b      	ldr	r3, [r7, #0]
 8005e3e:	781b      	ldrb	r3, [r3, #0]
 8005e40:	009b      	lsls	r3, r3, #2
 8005e42:	441a      	add	r2, r3
 8005e44:	8a3b      	ldrh	r3, [r7, #16]
 8005e46:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005e4a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005e4e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005e52:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8005e56:	b29b      	uxth	r3, r3
 8005e58:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005e5a:	683b      	ldr	r3, [r7, #0]
 8005e5c:	78db      	ldrb	r3, [r3, #3]
 8005e5e:	2b01      	cmp	r3, #1
 8005e60:	d020      	beq.n	8005ea4 <USB_ActivateEndpoint+0x1c4>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8005e62:	687a      	ldr	r2, [r7, #4]
 8005e64:	683b      	ldr	r3, [r7, #0]
 8005e66:	781b      	ldrb	r3, [r3, #0]
 8005e68:	009b      	lsls	r3, r3, #2
 8005e6a:	4413      	add	r3, r2
 8005e6c:	881b      	ldrh	r3, [r3, #0]
 8005e6e:	b29b      	uxth	r3, r3
 8005e70:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005e74:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005e78:	81bb      	strh	r3, [r7, #12]
 8005e7a:	89bb      	ldrh	r3, [r7, #12]
 8005e7c:	f083 0320 	eor.w	r3, r3, #32
 8005e80:	81bb      	strh	r3, [r7, #12]
 8005e82:	687a      	ldr	r2, [r7, #4]
 8005e84:	683b      	ldr	r3, [r7, #0]
 8005e86:	781b      	ldrb	r3, [r3, #0]
 8005e88:	009b      	lsls	r3, r3, #2
 8005e8a:	441a      	add	r2, r3
 8005e8c:	89bb      	ldrh	r3, [r7, #12]
 8005e8e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005e92:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005e96:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005e9a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005e9e:	b29b      	uxth	r3, r3
 8005ea0:	8013      	strh	r3, [r2, #0]
 8005ea2:	e2d5      	b.n	8006450 <USB_ActivateEndpoint+0x770>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005ea4:	687a      	ldr	r2, [r7, #4]
 8005ea6:	683b      	ldr	r3, [r7, #0]
 8005ea8:	781b      	ldrb	r3, [r3, #0]
 8005eaa:	009b      	lsls	r3, r3, #2
 8005eac:	4413      	add	r3, r2
 8005eae:	881b      	ldrh	r3, [r3, #0]
 8005eb0:	b29b      	uxth	r3, r3
 8005eb2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005eb6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005eba:	81fb      	strh	r3, [r7, #14]
 8005ebc:	687a      	ldr	r2, [r7, #4]
 8005ebe:	683b      	ldr	r3, [r7, #0]
 8005ec0:	781b      	ldrb	r3, [r3, #0]
 8005ec2:	009b      	lsls	r3, r3, #2
 8005ec4:	441a      	add	r2, r3
 8005ec6:	89fb      	ldrh	r3, [r7, #14]
 8005ec8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005ecc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005ed0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005ed4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005ed8:	b29b      	uxth	r3, r3
 8005eda:	8013      	strh	r3, [r2, #0]
 8005edc:	e2b8      	b.n	8006450 <USB_ActivateEndpoint+0x770>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	633b      	str	r3, [r7, #48]	@ 0x30
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005ee8:	b29b      	uxth	r3, r3
 8005eea:	461a      	mov	r2, r3
 8005eec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005eee:	4413      	add	r3, r2
 8005ef0:	633b      	str	r3, [r7, #48]	@ 0x30
 8005ef2:	683b      	ldr	r3, [r7, #0]
 8005ef4:	781b      	ldrb	r3, [r3, #0]
 8005ef6:	011a      	lsls	r2, r3, #4
 8005ef8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005efa:	4413      	add	r3, r2
 8005efc:	f503 6381 	add.w	r3, r3, #1032	@ 0x408
 8005f00:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005f02:	683b      	ldr	r3, [r7, #0]
 8005f04:	88db      	ldrh	r3, [r3, #6]
 8005f06:	085b      	lsrs	r3, r3, #1
 8005f08:	b29b      	uxth	r3, r3
 8005f0a:	005b      	lsls	r3, r3, #1
 8005f0c:	b29a      	uxth	r2, r3
 8005f0e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005f10:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005f1c:	b29b      	uxth	r3, r3
 8005f1e:	461a      	mov	r2, r3
 8005f20:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005f22:	4413      	add	r3, r2
 8005f24:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005f26:	683b      	ldr	r3, [r7, #0]
 8005f28:	781b      	ldrb	r3, [r3, #0]
 8005f2a:	011a      	lsls	r2, r3, #4
 8005f2c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005f2e:	4413      	add	r3, r2
 8005f30:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8005f34:	627b      	str	r3, [r7, #36]	@ 0x24
 8005f36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f38:	881b      	ldrh	r3, [r3, #0]
 8005f3a:	b29b      	uxth	r3, r3
 8005f3c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005f40:	b29a      	uxth	r2, r3
 8005f42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f44:	801a      	strh	r2, [r3, #0]
 8005f46:	683b      	ldr	r3, [r7, #0]
 8005f48:	691b      	ldr	r3, [r3, #16]
 8005f4a:	2b3e      	cmp	r3, #62	@ 0x3e
 8005f4c:	d91d      	bls.n	8005f8a <USB_ActivateEndpoint+0x2aa>
 8005f4e:	683b      	ldr	r3, [r7, #0]
 8005f50:	691b      	ldr	r3, [r3, #16]
 8005f52:	095b      	lsrs	r3, r3, #5
 8005f54:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005f56:	683b      	ldr	r3, [r7, #0]
 8005f58:	691b      	ldr	r3, [r3, #16]
 8005f5a:	f003 031f 	and.w	r3, r3, #31
 8005f5e:	2b00      	cmp	r3, #0
 8005f60:	d102      	bne.n	8005f68 <USB_ActivateEndpoint+0x288>
 8005f62:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005f64:	3b01      	subs	r3, #1
 8005f66:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005f68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f6a:	881b      	ldrh	r3, [r3, #0]
 8005f6c:	b29a      	uxth	r2, r3
 8005f6e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005f70:	b29b      	uxth	r3, r3
 8005f72:	029b      	lsls	r3, r3, #10
 8005f74:	b29b      	uxth	r3, r3
 8005f76:	4313      	orrs	r3, r2
 8005f78:	b29b      	uxth	r3, r3
 8005f7a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005f7e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005f82:	b29a      	uxth	r2, r3
 8005f84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f86:	801a      	strh	r2, [r3, #0]
 8005f88:	e026      	b.n	8005fd8 <USB_ActivateEndpoint+0x2f8>
 8005f8a:	683b      	ldr	r3, [r7, #0]
 8005f8c:	691b      	ldr	r3, [r3, #16]
 8005f8e:	2b00      	cmp	r3, #0
 8005f90:	d10a      	bne.n	8005fa8 <USB_ActivateEndpoint+0x2c8>
 8005f92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f94:	881b      	ldrh	r3, [r3, #0]
 8005f96:	b29b      	uxth	r3, r3
 8005f98:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005f9c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005fa0:	b29a      	uxth	r2, r3
 8005fa2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005fa4:	801a      	strh	r2, [r3, #0]
 8005fa6:	e017      	b.n	8005fd8 <USB_ActivateEndpoint+0x2f8>
 8005fa8:	683b      	ldr	r3, [r7, #0]
 8005faa:	691b      	ldr	r3, [r3, #16]
 8005fac:	085b      	lsrs	r3, r3, #1
 8005fae:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005fb0:	683b      	ldr	r3, [r7, #0]
 8005fb2:	691b      	ldr	r3, [r3, #16]
 8005fb4:	f003 0301 	and.w	r3, r3, #1
 8005fb8:	2b00      	cmp	r3, #0
 8005fba:	d002      	beq.n	8005fc2 <USB_ActivateEndpoint+0x2e2>
 8005fbc:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005fbe:	3301      	adds	r3, #1
 8005fc0:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005fc2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005fc4:	881b      	ldrh	r3, [r3, #0]
 8005fc6:	b29a      	uxth	r2, r3
 8005fc8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005fca:	b29b      	uxth	r3, r3
 8005fcc:	029b      	lsls	r3, r3, #10
 8005fce:	b29b      	uxth	r3, r3
 8005fd0:	4313      	orrs	r3, r2
 8005fd2:	b29a      	uxth	r2, r3
 8005fd4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005fd6:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005fd8:	687a      	ldr	r2, [r7, #4]
 8005fda:	683b      	ldr	r3, [r7, #0]
 8005fdc:	781b      	ldrb	r3, [r3, #0]
 8005fde:	009b      	lsls	r3, r3, #2
 8005fe0:	4413      	add	r3, r2
 8005fe2:	881b      	ldrh	r3, [r3, #0]
 8005fe4:	847b      	strh	r3, [r7, #34]	@ 0x22
 8005fe6:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8005fe8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005fec:	2b00      	cmp	r3, #0
 8005fee:	d01b      	beq.n	8006028 <USB_ActivateEndpoint+0x348>
 8005ff0:	687a      	ldr	r2, [r7, #4]
 8005ff2:	683b      	ldr	r3, [r7, #0]
 8005ff4:	781b      	ldrb	r3, [r3, #0]
 8005ff6:	009b      	lsls	r3, r3, #2
 8005ff8:	4413      	add	r3, r2
 8005ffa:	881b      	ldrh	r3, [r3, #0]
 8005ffc:	b29b      	uxth	r3, r3
 8005ffe:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006002:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006006:	843b      	strh	r3, [r7, #32]
 8006008:	687a      	ldr	r2, [r7, #4]
 800600a:	683b      	ldr	r3, [r7, #0]
 800600c:	781b      	ldrb	r3, [r3, #0]
 800600e:	009b      	lsls	r3, r3, #2
 8006010:	441a      	add	r2, r3
 8006012:	8c3b      	ldrh	r3, [r7, #32]
 8006014:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006018:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800601c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8006020:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006024:	b29b      	uxth	r3, r3
 8006026:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 8006028:	683b      	ldr	r3, [r7, #0]
 800602a:	781b      	ldrb	r3, [r3, #0]
 800602c:	2b00      	cmp	r3, #0
 800602e:	d124      	bne.n	800607a <USB_ActivateEndpoint+0x39a>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8006030:	687a      	ldr	r2, [r7, #4]
 8006032:	683b      	ldr	r3, [r7, #0]
 8006034:	781b      	ldrb	r3, [r3, #0]
 8006036:	009b      	lsls	r3, r3, #2
 8006038:	4413      	add	r3, r2
 800603a:	881b      	ldrh	r3, [r3, #0]
 800603c:	b29b      	uxth	r3, r3
 800603e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006042:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006046:	83bb      	strh	r3, [r7, #28]
 8006048:	8bbb      	ldrh	r3, [r7, #28]
 800604a:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800604e:	83bb      	strh	r3, [r7, #28]
 8006050:	8bbb      	ldrh	r3, [r7, #28]
 8006052:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8006056:	83bb      	strh	r3, [r7, #28]
 8006058:	687a      	ldr	r2, [r7, #4]
 800605a:	683b      	ldr	r3, [r7, #0]
 800605c:	781b      	ldrb	r3, [r3, #0]
 800605e:	009b      	lsls	r3, r3, #2
 8006060:	441a      	add	r2, r3
 8006062:	8bbb      	ldrh	r3, [r7, #28]
 8006064:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006068:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800606c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006070:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006074:	b29b      	uxth	r3, r3
 8006076:	8013      	strh	r3, [r2, #0]
 8006078:	e1ea      	b.n	8006450 <USB_ActivateEndpoint+0x770>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 800607a:	687a      	ldr	r2, [r7, #4]
 800607c:	683b      	ldr	r3, [r7, #0]
 800607e:	781b      	ldrb	r3, [r3, #0]
 8006080:	009b      	lsls	r3, r3, #2
 8006082:	4413      	add	r3, r2
 8006084:	881b      	ldrh	r3, [r3, #0]
 8006086:	b29b      	uxth	r3, r3
 8006088:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800608c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006090:	83fb      	strh	r3, [r7, #30]
 8006092:	8bfb      	ldrh	r3, [r7, #30]
 8006094:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8006098:	83fb      	strh	r3, [r7, #30]
 800609a:	687a      	ldr	r2, [r7, #4]
 800609c:	683b      	ldr	r3, [r7, #0]
 800609e:	781b      	ldrb	r3, [r3, #0]
 80060a0:	009b      	lsls	r3, r3, #2
 80060a2:	441a      	add	r2, r3
 80060a4:	8bfb      	ldrh	r3, [r7, #30]
 80060a6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80060aa:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80060ae:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80060b2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80060b6:	b29b      	uxth	r3, r3
 80060b8:	8013      	strh	r3, [r2, #0]
 80060ba:	e1c9      	b.n	8006450 <USB_ActivateEndpoint+0x770>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 80060bc:	683b      	ldr	r3, [r7, #0]
 80060be:	78db      	ldrb	r3, [r3, #3]
 80060c0:	2b02      	cmp	r3, #2
 80060c2:	d11e      	bne.n	8006102 <USB_ActivateEndpoint+0x422>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 80060c4:	687a      	ldr	r2, [r7, #4]
 80060c6:	683b      	ldr	r3, [r7, #0]
 80060c8:	781b      	ldrb	r3, [r3, #0]
 80060ca:	009b      	lsls	r3, r3, #2
 80060cc:	4413      	add	r3, r2
 80060ce:	881b      	ldrh	r3, [r3, #0]
 80060d0:	b29b      	uxth	r3, r3
 80060d2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80060d6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80060da:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 80060de:	687a      	ldr	r2, [r7, #4]
 80060e0:	683b      	ldr	r3, [r7, #0]
 80060e2:	781b      	ldrb	r3, [r3, #0]
 80060e4:	009b      	lsls	r3, r3, #2
 80060e6:	441a      	add	r2, r3
 80060e8:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 80060ec:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80060f0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80060f4:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 80060f8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80060fc:	b29b      	uxth	r3, r3
 80060fe:	8013      	strh	r3, [r2, #0]
 8006100:	e01d      	b.n	800613e <USB_ActivateEndpoint+0x45e>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 8006102:	687a      	ldr	r2, [r7, #4]
 8006104:	683b      	ldr	r3, [r7, #0]
 8006106:	781b      	ldrb	r3, [r3, #0]
 8006108:	009b      	lsls	r3, r3, #2
 800610a:	4413      	add	r3, r2
 800610c:	881b      	ldrh	r3, [r3, #0]
 800610e:	b29b      	uxth	r3, r3
 8006110:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 8006114:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006118:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64
 800611c:	687a      	ldr	r2, [r7, #4]
 800611e:	683b      	ldr	r3, [r7, #0]
 8006120:	781b      	ldrb	r3, [r3, #0]
 8006122:	009b      	lsls	r3, r3, #2
 8006124:	441a      	add	r2, r3
 8006126:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 800612a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800612e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006132:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006136:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800613a:	b29b      	uxth	r3, r3
 800613c:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006148:	b29b      	uxth	r3, r3
 800614a:	461a      	mov	r2, r3
 800614c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800614e:	4413      	add	r3, r2
 8006150:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006152:	683b      	ldr	r3, [r7, #0]
 8006154:	781b      	ldrb	r3, [r3, #0]
 8006156:	011a      	lsls	r2, r3, #4
 8006158:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800615a:	4413      	add	r3, r2
 800615c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006160:	65bb      	str	r3, [r7, #88]	@ 0x58
 8006162:	683b      	ldr	r3, [r7, #0]
 8006164:	891b      	ldrh	r3, [r3, #8]
 8006166:	085b      	lsrs	r3, r3, #1
 8006168:	b29b      	uxth	r3, r3
 800616a:	005b      	lsls	r3, r3, #1
 800616c:	b29a      	uxth	r2, r3
 800616e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8006170:	801a      	strh	r2, [r3, #0]
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	657b      	str	r3, [r7, #84]	@ 0x54
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800617c:	b29b      	uxth	r3, r3
 800617e:	461a      	mov	r2, r3
 8006180:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006182:	4413      	add	r3, r2
 8006184:	657b      	str	r3, [r7, #84]	@ 0x54
 8006186:	683b      	ldr	r3, [r7, #0]
 8006188:	781b      	ldrb	r3, [r3, #0]
 800618a:	011a      	lsls	r2, r3, #4
 800618c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800618e:	4413      	add	r3, r2
 8006190:	f503 6381 	add.w	r3, r3, #1032	@ 0x408
 8006194:	653b      	str	r3, [r7, #80]	@ 0x50
 8006196:	683b      	ldr	r3, [r7, #0]
 8006198:	895b      	ldrh	r3, [r3, #10]
 800619a:	085b      	lsrs	r3, r3, #1
 800619c:	b29b      	uxth	r3, r3
 800619e:	005b      	lsls	r3, r3, #1
 80061a0:	b29a      	uxth	r2, r3
 80061a2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80061a4:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 80061a6:	683b      	ldr	r3, [r7, #0]
 80061a8:	785b      	ldrb	r3, [r3, #1]
 80061aa:	2b00      	cmp	r3, #0
 80061ac:	f040 8093 	bne.w	80062d6 <USB_ActivateEndpoint+0x5f6>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80061b0:	687a      	ldr	r2, [r7, #4]
 80061b2:	683b      	ldr	r3, [r7, #0]
 80061b4:	781b      	ldrb	r3, [r3, #0]
 80061b6:	009b      	lsls	r3, r3, #2
 80061b8:	4413      	add	r3, r2
 80061ba:	881b      	ldrh	r3, [r3, #0]
 80061bc:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
 80061c0:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 80061c4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80061c8:	2b00      	cmp	r3, #0
 80061ca:	d01b      	beq.n	8006204 <USB_ActivateEndpoint+0x524>
 80061cc:	687a      	ldr	r2, [r7, #4]
 80061ce:	683b      	ldr	r3, [r7, #0]
 80061d0:	781b      	ldrb	r3, [r3, #0]
 80061d2:	009b      	lsls	r3, r3, #2
 80061d4:	4413      	add	r3, r2
 80061d6:	881b      	ldrh	r3, [r3, #0]
 80061d8:	b29b      	uxth	r3, r3
 80061da:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80061de:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80061e2:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 80061e4:	687a      	ldr	r2, [r7, #4]
 80061e6:	683b      	ldr	r3, [r7, #0]
 80061e8:	781b      	ldrb	r3, [r3, #0]
 80061ea:	009b      	lsls	r3, r3, #2
 80061ec:	441a      	add	r2, r3
 80061ee:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 80061f0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80061f4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80061f8:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80061fc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006200:	b29b      	uxth	r3, r3
 8006202:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006204:	687a      	ldr	r2, [r7, #4]
 8006206:	683b      	ldr	r3, [r7, #0]
 8006208:	781b      	ldrb	r3, [r3, #0]
 800620a:	009b      	lsls	r3, r3, #2
 800620c:	4413      	add	r3, r2
 800620e:	881b      	ldrh	r3, [r3, #0]
 8006210:	87bb      	strh	r3, [r7, #60]	@ 0x3c
 8006212:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8006214:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006218:	2b00      	cmp	r3, #0
 800621a:	d01b      	beq.n	8006254 <USB_ActivateEndpoint+0x574>
 800621c:	687a      	ldr	r2, [r7, #4]
 800621e:	683b      	ldr	r3, [r7, #0]
 8006220:	781b      	ldrb	r3, [r3, #0]
 8006222:	009b      	lsls	r3, r3, #2
 8006224:	4413      	add	r3, r2
 8006226:	881b      	ldrh	r3, [r3, #0]
 8006228:	b29b      	uxth	r3, r3
 800622a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800622e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006232:	877b      	strh	r3, [r7, #58]	@ 0x3a
 8006234:	687a      	ldr	r2, [r7, #4]
 8006236:	683b      	ldr	r3, [r7, #0]
 8006238:	781b      	ldrb	r3, [r3, #0]
 800623a:	009b      	lsls	r3, r3, #2
 800623c:	441a      	add	r2, r3
 800623e:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8006240:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006244:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006248:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800624c:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8006250:	b29b      	uxth	r3, r3
 8006252:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8006254:	687a      	ldr	r2, [r7, #4]
 8006256:	683b      	ldr	r3, [r7, #0]
 8006258:	781b      	ldrb	r3, [r3, #0]
 800625a:	009b      	lsls	r3, r3, #2
 800625c:	4413      	add	r3, r2
 800625e:	881b      	ldrh	r3, [r3, #0]
 8006260:	b29b      	uxth	r3, r3
 8006262:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006266:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800626a:	873b      	strh	r3, [r7, #56]	@ 0x38
 800626c:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 800626e:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8006272:	873b      	strh	r3, [r7, #56]	@ 0x38
 8006274:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8006276:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800627a:	873b      	strh	r3, [r7, #56]	@ 0x38
 800627c:	687a      	ldr	r2, [r7, #4]
 800627e:	683b      	ldr	r3, [r7, #0]
 8006280:	781b      	ldrb	r3, [r3, #0]
 8006282:	009b      	lsls	r3, r3, #2
 8006284:	441a      	add	r2, r3
 8006286:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8006288:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800628c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006290:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006294:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006298:	b29b      	uxth	r3, r3
 800629a:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800629c:	687a      	ldr	r2, [r7, #4]
 800629e:	683b      	ldr	r3, [r7, #0]
 80062a0:	781b      	ldrb	r3, [r3, #0]
 80062a2:	009b      	lsls	r3, r3, #2
 80062a4:	4413      	add	r3, r2
 80062a6:	881b      	ldrh	r3, [r3, #0]
 80062a8:	b29b      	uxth	r3, r3
 80062aa:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80062ae:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80062b2:	86fb      	strh	r3, [r7, #54]	@ 0x36
 80062b4:	687a      	ldr	r2, [r7, #4]
 80062b6:	683b      	ldr	r3, [r7, #0]
 80062b8:	781b      	ldrb	r3, [r3, #0]
 80062ba:	009b      	lsls	r3, r3, #2
 80062bc:	441a      	add	r2, r3
 80062be:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80062c0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80062c4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80062c8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80062cc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80062d0:	b29b      	uxth	r3, r3
 80062d2:	8013      	strh	r3, [r2, #0]
 80062d4:	e0bc      	b.n	8006450 <USB_ActivateEndpoint+0x770>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80062d6:	687a      	ldr	r2, [r7, #4]
 80062d8:	683b      	ldr	r3, [r7, #0]
 80062da:	781b      	ldrb	r3, [r3, #0]
 80062dc:	009b      	lsls	r3, r3, #2
 80062de:	4413      	add	r3, r2
 80062e0:	881b      	ldrh	r3, [r3, #0]
 80062e2:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 80062e6:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 80062ea:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80062ee:	2b00      	cmp	r3, #0
 80062f0:	d01d      	beq.n	800632e <USB_ActivateEndpoint+0x64e>
 80062f2:	687a      	ldr	r2, [r7, #4]
 80062f4:	683b      	ldr	r3, [r7, #0]
 80062f6:	781b      	ldrb	r3, [r3, #0]
 80062f8:	009b      	lsls	r3, r3, #2
 80062fa:	4413      	add	r3, r2
 80062fc:	881b      	ldrh	r3, [r3, #0]
 80062fe:	b29b      	uxth	r3, r3
 8006300:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006304:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006308:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c
 800630c:	687a      	ldr	r2, [r7, #4]
 800630e:	683b      	ldr	r3, [r7, #0]
 8006310:	781b      	ldrb	r3, [r3, #0]
 8006312:	009b      	lsls	r3, r3, #2
 8006314:	441a      	add	r2, r3
 8006316:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 800631a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800631e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006322:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8006326:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800632a:	b29b      	uxth	r3, r3
 800632c:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800632e:	687a      	ldr	r2, [r7, #4]
 8006330:	683b      	ldr	r3, [r7, #0]
 8006332:	781b      	ldrb	r3, [r3, #0]
 8006334:	009b      	lsls	r3, r3, #2
 8006336:	4413      	add	r3, r2
 8006338:	881b      	ldrh	r3, [r3, #0]
 800633a:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a
 800633e:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8006342:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006346:	2b00      	cmp	r3, #0
 8006348:	d01d      	beq.n	8006386 <USB_ActivateEndpoint+0x6a6>
 800634a:	687a      	ldr	r2, [r7, #4]
 800634c:	683b      	ldr	r3, [r7, #0]
 800634e:	781b      	ldrb	r3, [r3, #0]
 8006350:	009b      	lsls	r3, r3, #2
 8006352:	4413      	add	r3, r2
 8006354:	881b      	ldrh	r3, [r3, #0]
 8006356:	b29b      	uxth	r3, r3
 8006358:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800635c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006360:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
 8006364:	687a      	ldr	r2, [r7, #4]
 8006366:	683b      	ldr	r3, [r7, #0]
 8006368:	781b      	ldrb	r3, [r3, #0]
 800636a:	009b      	lsls	r3, r3, #2
 800636c:	441a      	add	r2, r3
 800636e:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 8006372:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006376:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800637a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800637e:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8006382:	b29b      	uxth	r3, r3
 8006384:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8006386:	683b      	ldr	r3, [r7, #0]
 8006388:	78db      	ldrb	r3, [r3, #3]
 800638a:	2b01      	cmp	r3, #1
 800638c:	d024      	beq.n	80063d8 <USB_ActivateEndpoint+0x6f8>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800638e:	687a      	ldr	r2, [r7, #4]
 8006390:	683b      	ldr	r3, [r7, #0]
 8006392:	781b      	ldrb	r3, [r3, #0]
 8006394:	009b      	lsls	r3, r3, #2
 8006396:	4413      	add	r3, r2
 8006398:	881b      	ldrh	r3, [r3, #0]
 800639a:	b29b      	uxth	r3, r3
 800639c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80063a0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80063a4:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
 80063a8:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 80063ac:	f083 0320 	eor.w	r3, r3, #32
 80063b0:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
 80063b4:	687a      	ldr	r2, [r7, #4]
 80063b6:	683b      	ldr	r3, [r7, #0]
 80063b8:	781b      	ldrb	r3, [r3, #0]
 80063ba:	009b      	lsls	r3, r3, #2
 80063bc:	441a      	add	r2, r3
 80063be:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 80063c2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80063c6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80063ca:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80063ce:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80063d2:	b29b      	uxth	r3, r3
 80063d4:	8013      	strh	r3, [r2, #0]
 80063d6:	e01d      	b.n	8006414 <USB_ActivateEndpoint+0x734>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80063d8:	687a      	ldr	r2, [r7, #4]
 80063da:	683b      	ldr	r3, [r7, #0]
 80063dc:	781b      	ldrb	r3, [r3, #0]
 80063de:	009b      	lsls	r3, r3, #2
 80063e0:	4413      	add	r3, r2
 80063e2:	881b      	ldrh	r3, [r3, #0]
 80063e4:	b29b      	uxth	r3, r3
 80063e6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80063ea:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80063ee:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
 80063f2:	687a      	ldr	r2, [r7, #4]
 80063f4:	683b      	ldr	r3, [r7, #0]
 80063f6:	781b      	ldrb	r3, [r3, #0]
 80063f8:	009b      	lsls	r3, r3, #2
 80063fa:	441a      	add	r2, r3
 80063fc:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8006400:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006404:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006408:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800640c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006410:	b29b      	uxth	r3, r3
 8006412:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006414:	687a      	ldr	r2, [r7, #4]
 8006416:	683b      	ldr	r3, [r7, #0]
 8006418:	781b      	ldrb	r3, [r3, #0]
 800641a:	009b      	lsls	r3, r3, #2
 800641c:	4413      	add	r3, r2
 800641e:	881b      	ldrh	r3, [r3, #0]
 8006420:	b29b      	uxth	r3, r3
 8006422:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006426:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800642a:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 800642e:	687a      	ldr	r2, [r7, #4]
 8006430:	683b      	ldr	r3, [r7, #0]
 8006432:	781b      	ldrb	r3, [r3, #0]
 8006434:	009b      	lsls	r3, r3, #2
 8006436:	441a      	add	r2, r3
 8006438:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800643c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006440:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006444:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006448:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800644c:	b29b      	uxth	r3, r3
 800644e:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 8006450:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
}
 8006454:	4618      	mov	r0, r3
 8006456:	3774      	adds	r7, #116	@ 0x74
 8006458:	46bd      	mov	sp, r7
 800645a:	bc80      	pop	{r7}
 800645c:	4770      	bx	lr
 800645e:	bf00      	nop

08006460 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006460:	b480      	push	{r7}
 8006462:	b08d      	sub	sp, #52	@ 0x34
 8006464:	af00      	add	r7, sp, #0
 8006466:	6078      	str	r0, [r7, #4]
 8006468:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800646a:	683b      	ldr	r3, [r7, #0]
 800646c:	7b1b      	ldrb	r3, [r3, #12]
 800646e:	2b00      	cmp	r3, #0
 8006470:	f040 808e 	bne.w	8006590 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8006474:	683b      	ldr	r3, [r7, #0]
 8006476:	785b      	ldrb	r3, [r3, #1]
 8006478:	2b00      	cmp	r3, #0
 800647a:	d044      	beq.n	8006506 <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800647c:	687a      	ldr	r2, [r7, #4]
 800647e:	683b      	ldr	r3, [r7, #0]
 8006480:	781b      	ldrb	r3, [r3, #0]
 8006482:	009b      	lsls	r3, r3, #2
 8006484:	4413      	add	r3, r2
 8006486:	881b      	ldrh	r3, [r3, #0]
 8006488:	81bb      	strh	r3, [r7, #12]
 800648a:	89bb      	ldrh	r3, [r7, #12]
 800648c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006490:	2b00      	cmp	r3, #0
 8006492:	d01b      	beq.n	80064cc <USB_DeactivateEndpoint+0x6c>
 8006494:	687a      	ldr	r2, [r7, #4]
 8006496:	683b      	ldr	r3, [r7, #0]
 8006498:	781b      	ldrb	r3, [r3, #0]
 800649a:	009b      	lsls	r3, r3, #2
 800649c:	4413      	add	r3, r2
 800649e:	881b      	ldrh	r3, [r3, #0]
 80064a0:	b29b      	uxth	r3, r3
 80064a2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80064a6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80064aa:	817b      	strh	r3, [r7, #10]
 80064ac:	687a      	ldr	r2, [r7, #4]
 80064ae:	683b      	ldr	r3, [r7, #0]
 80064b0:	781b      	ldrb	r3, [r3, #0]
 80064b2:	009b      	lsls	r3, r3, #2
 80064b4:	441a      	add	r2, r3
 80064b6:	897b      	ldrh	r3, [r7, #10]
 80064b8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80064bc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80064c0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80064c4:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80064c8:	b29b      	uxth	r3, r3
 80064ca:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80064cc:	687a      	ldr	r2, [r7, #4]
 80064ce:	683b      	ldr	r3, [r7, #0]
 80064d0:	781b      	ldrb	r3, [r3, #0]
 80064d2:	009b      	lsls	r3, r3, #2
 80064d4:	4413      	add	r3, r2
 80064d6:	881b      	ldrh	r3, [r3, #0]
 80064d8:	b29b      	uxth	r3, r3
 80064da:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80064de:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80064e2:	813b      	strh	r3, [r7, #8]
 80064e4:	687a      	ldr	r2, [r7, #4]
 80064e6:	683b      	ldr	r3, [r7, #0]
 80064e8:	781b      	ldrb	r3, [r3, #0]
 80064ea:	009b      	lsls	r3, r3, #2
 80064ec:	441a      	add	r2, r3
 80064ee:	893b      	ldrh	r3, [r7, #8]
 80064f0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80064f4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80064f8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80064fc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006500:	b29b      	uxth	r3, r3
 8006502:	8013      	strh	r3, [r2, #0]
 8006504:	e192      	b.n	800682c <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006506:	687a      	ldr	r2, [r7, #4]
 8006508:	683b      	ldr	r3, [r7, #0]
 800650a:	781b      	ldrb	r3, [r3, #0]
 800650c:	009b      	lsls	r3, r3, #2
 800650e:	4413      	add	r3, r2
 8006510:	881b      	ldrh	r3, [r3, #0]
 8006512:	827b      	strh	r3, [r7, #18]
 8006514:	8a7b      	ldrh	r3, [r7, #18]
 8006516:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800651a:	2b00      	cmp	r3, #0
 800651c:	d01b      	beq.n	8006556 <USB_DeactivateEndpoint+0xf6>
 800651e:	687a      	ldr	r2, [r7, #4]
 8006520:	683b      	ldr	r3, [r7, #0]
 8006522:	781b      	ldrb	r3, [r3, #0]
 8006524:	009b      	lsls	r3, r3, #2
 8006526:	4413      	add	r3, r2
 8006528:	881b      	ldrh	r3, [r3, #0]
 800652a:	b29b      	uxth	r3, r3
 800652c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006530:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006534:	823b      	strh	r3, [r7, #16]
 8006536:	687a      	ldr	r2, [r7, #4]
 8006538:	683b      	ldr	r3, [r7, #0]
 800653a:	781b      	ldrb	r3, [r3, #0]
 800653c:	009b      	lsls	r3, r3, #2
 800653e:	441a      	add	r2, r3
 8006540:	8a3b      	ldrh	r3, [r7, #16]
 8006542:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006546:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800654a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800654e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006552:	b29b      	uxth	r3, r3
 8006554:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006556:	687a      	ldr	r2, [r7, #4]
 8006558:	683b      	ldr	r3, [r7, #0]
 800655a:	781b      	ldrb	r3, [r3, #0]
 800655c:	009b      	lsls	r3, r3, #2
 800655e:	4413      	add	r3, r2
 8006560:	881b      	ldrh	r3, [r3, #0]
 8006562:	b29b      	uxth	r3, r3
 8006564:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006568:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800656c:	81fb      	strh	r3, [r7, #14]
 800656e:	687a      	ldr	r2, [r7, #4]
 8006570:	683b      	ldr	r3, [r7, #0]
 8006572:	781b      	ldrb	r3, [r3, #0]
 8006574:	009b      	lsls	r3, r3, #2
 8006576:	441a      	add	r2, r3
 8006578:	89fb      	ldrh	r3, [r7, #14]
 800657a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800657e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006582:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006586:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800658a:	b29b      	uxth	r3, r3
 800658c:	8013      	strh	r3, [r2, #0]
 800658e:	e14d      	b.n	800682c <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 8006590:	683b      	ldr	r3, [r7, #0]
 8006592:	785b      	ldrb	r3, [r3, #1]
 8006594:	2b00      	cmp	r3, #0
 8006596:	f040 80a5 	bne.w	80066e4 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800659a:	687a      	ldr	r2, [r7, #4]
 800659c:	683b      	ldr	r3, [r7, #0]
 800659e:	781b      	ldrb	r3, [r3, #0]
 80065a0:	009b      	lsls	r3, r3, #2
 80065a2:	4413      	add	r3, r2
 80065a4:	881b      	ldrh	r3, [r3, #0]
 80065a6:	843b      	strh	r3, [r7, #32]
 80065a8:	8c3b      	ldrh	r3, [r7, #32]
 80065aa:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80065ae:	2b00      	cmp	r3, #0
 80065b0:	d01b      	beq.n	80065ea <USB_DeactivateEndpoint+0x18a>
 80065b2:	687a      	ldr	r2, [r7, #4]
 80065b4:	683b      	ldr	r3, [r7, #0]
 80065b6:	781b      	ldrb	r3, [r3, #0]
 80065b8:	009b      	lsls	r3, r3, #2
 80065ba:	4413      	add	r3, r2
 80065bc:	881b      	ldrh	r3, [r3, #0]
 80065be:	b29b      	uxth	r3, r3
 80065c0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80065c4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80065c8:	83fb      	strh	r3, [r7, #30]
 80065ca:	687a      	ldr	r2, [r7, #4]
 80065cc:	683b      	ldr	r3, [r7, #0]
 80065ce:	781b      	ldrb	r3, [r3, #0]
 80065d0:	009b      	lsls	r3, r3, #2
 80065d2:	441a      	add	r2, r3
 80065d4:	8bfb      	ldrh	r3, [r7, #30]
 80065d6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80065da:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80065de:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80065e2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80065e6:	b29b      	uxth	r3, r3
 80065e8:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80065ea:	687a      	ldr	r2, [r7, #4]
 80065ec:	683b      	ldr	r3, [r7, #0]
 80065ee:	781b      	ldrb	r3, [r3, #0]
 80065f0:	009b      	lsls	r3, r3, #2
 80065f2:	4413      	add	r3, r2
 80065f4:	881b      	ldrh	r3, [r3, #0]
 80065f6:	83bb      	strh	r3, [r7, #28]
 80065f8:	8bbb      	ldrh	r3, [r7, #28]
 80065fa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80065fe:	2b00      	cmp	r3, #0
 8006600:	d01b      	beq.n	800663a <USB_DeactivateEndpoint+0x1da>
 8006602:	687a      	ldr	r2, [r7, #4]
 8006604:	683b      	ldr	r3, [r7, #0]
 8006606:	781b      	ldrb	r3, [r3, #0]
 8006608:	009b      	lsls	r3, r3, #2
 800660a:	4413      	add	r3, r2
 800660c:	881b      	ldrh	r3, [r3, #0]
 800660e:	b29b      	uxth	r3, r3
 8006610:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006614:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006618:	837b      	strh	r3, [r7, #26]
 800661a:	687a      	ldr	r2, [r7, #4]
 800661c:	683b      	ldr	r3, [r7, #0]
 800661e:	781b      	ldrb	r3, [r3, #0]
 8006620:	009b      	lsls	r3, r3, #2
 8006622:	441a      	add	r2, r3
 8006624:	8b7b      	ldrh	r3, [r7, #26]
 8006626:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800662a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800662e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006632:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8006636:	b29b      	uxth	r3, r3
 8006638:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 800663a:	687a      	ldr	r2, [r7, #4]
 800663c:	683b      	ldr	r3, [r7, #0]
 800663e:	781b      	ldrb	r3, [r3, #0]
 8006640:	009b      	lsls	r3, r3, #2
 8006642:	4413      	add	r3, r2
 8006644:	881b      	ldrh	r3, [r3, #0]
 8006646:	b29b      	uxth	r3, r3
 8006648:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800664c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006650:	833b      	strh	r3, [r7, #24]
 8006652:	687a      	ldr	r2, [r7, #4]
 8006654:	683b      	ldr	r3, [r7, #0]
 8006656:	781b      	ldrb	r3, [r3, #0]
 8006658:	009b      	lsls	r3, r3, #2
 800665a:	441a      	add	r2, r3
 800665c:	8b3b      	ldrh	r3, [r7, #24]
 800665e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006662:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006666:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800666a:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800666e:	b29b      	uxth	r3, r3
 8006670:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006672:	687a      	ldr	r2, [r7, #4]
 8006674:	683b      	ldr	r3, [r7, #0]
 8006676:	781b      	ldrb	r3, [r3, #0]
 8006678:	009b      	lsls	r3, r3, #2
 800667a:	4413      	add	r3, r2
 800667c:	881b      	ldrh	r3, [r3, #0]
 800667e:	b29b      	uxth	r3, r3
 8006680:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006684:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006688:	82fb      	strh	r3, [r7, #22]
 800668a:	687a      	ldr	r2, [r7, #4]
 800668c:	683b      	ldr	r3, [r7, #0]
 800668e:	781b      	ldrb	r3, [r3, #0]
 8006690:	009b      	lsls	r3, r3, #2
 8006692:	441a      	add	r2, r3
 8006694:	8afb      	ldrh	r3, [r7, #22]
 8006696:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800669a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800669e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80066a2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80066a6:	b29b      	uxth	r3, r3
 80066a8:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80066aa:	687a      	ldr	r2, [r7, #4]
 80066ac:	683b      	ldr	r3, [r7, #0]
 80066ae:	781b      	ldrb	r3, [r3, #0]
 80066b0:	009b      	lsls	r3, r3, #2
 80066b2:	4413      	add	r3, r2
 80066b4:	881b      	ldrh	r3, [r3, #0]
 80066b6:	b29b      	uxth	r3, r3
 80066b8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80066bc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80066c0:	82bb      	strh	r3, [r7, #20]
 80066c2:	687a      	ldr	r2, [r7, #4]
 80066c4:	683b      	ldr	r3, [r7, #0]
 80066c6:	781b      	ldrb	r3, [r3, #0]
 80066c8:	009b      	lsls	r3, r3, #2
 80066ca:	441a      	add	r2, r3
 80066cc:	8abb      	ldrh	r3, [r7, #20]
 80066ce:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80066d2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80066d6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80066da:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80066de:	b29b      	uxth	r3, r3
 80066e0:	8013      	strh	r3, [r2, #0]
 80066e2:	e0a3      	b.n	800682c <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80066e4:	687a      	ldr	r2, [r7, #4]
 80066e6:	683b      	ldr	r3, [r7, #0]
 80066e8:	781b      	ldrb	r3, [r3, #0]
 80066ea:	009b      	lsls	r3, r3, #2
 80066ec:	4413      	add	r3, r2
 80066ee:	881b      	ldrh	r3, [r3, #0]
 80066f0:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 80066f2:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 80066f4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80066f8:	2b00      	cmp	r3, #0
 80066fa:	d01b      	beq.n	8006734 <USB_DeactivateEndpoint+0x2d4>
 80066fc:	687a      	ldr	r2, [r7, #4]
 80066fe:	683b      	ldr	r3, [r7, #0]
 8006700:	781b      	ldrb	r3, [r3, #0]
 8006702:	009b      	lsls	r3, r3, #2
 8006704:	4413      	add	r3, r2
 8006706:	881b      	ldrh	r3, [r3, #0]
 8006708:	b29b      	uxth	r3, r3
 800670a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800670e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006712:	85bb      	strh	r3, [r7, #44]	@ 0x2c
 8006714:	687a      	ldr	r2, [r7, #4]
 8006716:	683b      	ldr	r3, [r7, #0]
 8006718:	781b      	ldrb	r3, [r3, #0]
 800671a:	009b      	lsls	r3, r3, #2
 800671c:	441a      	add	r2, r3
 800671e:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8006720:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006724:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006728:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800672c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006730:	b29b      	uxth	r3, r3
 8006732:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006734:	687a      	ldr	r2, [r7, #4]
 8006736:	683b      	ldr	r3, [r7, #0]
 8006738:	781b      	ldrb	r3, [r3, #0]
 800673a:	009b      	lsls	r3, r3, #2
 800673c:	4413      	add	r3, r2
 800673e:	881b      	ldrh	r3, [r3, #0]
 8006740:	857b      	strh	r3, [r7, #42]	@ 0x2a
 8006742:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8006744:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006748:	2b00      	cmp	r3, #0
 800674a:	d01b      	beq.n	8006784 <USB_DeactivateEndpoint+0x324>
 800674c:	687a      	ldr	r2, [r7, #4]
 800674e:	683b      	ldr	r3, [r7, #0]
 8006750:	781b      	ldrb	r3, [r3, #0]
 8006752:	009b      	lsls	r3, r3, #2
 8006754:	4413      	add	r3, r2
 8006756:	881b      	ldrh	r3, [r3, #0]
 8006758:	b29b      	uxth	r3, r3
 800675a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800675e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006762:	853b      	strh	r3, [r7, #40]	@ 0x28
 8006764:	687a      	ldr	r2, [r7, #4]
 8006766:	683b      	ldr	r3, [r7, #0]
 8006768:	781b      	ldrb	r3, [r3, #0]
 800676a:	009b      	lsls	r3, r3, #2
 800676c:	441a      	add	r2, r3
 800676e:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8006770:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006774:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006778:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800677c:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8006780:	b29b      	uxth	r3, r3
 8006782:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8006784:	687a      	ldr	r2, [r7, #4]
 8006786:	683b      	ldr	r3, [r7, #0]
 8006788:	781b      	ldrb	r3, [r3, #0]
 800678a:	009b      	lsls	r3, r3, #2
 800678c:	4413      	add	r3, r2
 800678e:	881b      	ldrh	r3, [r3, #0]
 8006790:	b29b      	uxth	r3, r3
 8006792:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006796:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800679a:	84fb      	strh	r3, [r7, #38]	@ 0x26
 800679c:	687a      	ldr	r2, [r7, #4]
 800679e:	683b      	ldr	r3, [r7, #0]
 80067a0:	781b      	ldrb	r3, [r3, #0]
 80067a2:	009b      	lsls	r3, r3, #2
 80067a4:	441a      	add	r2, r3
 80067a6:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80067a8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80067ac:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80067b0:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80067b4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80067b8:	b29b      	uxth	r3, r3
 80067ba:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80067bc:	687a      	ldr	r2, [r7, #4]
 80067be:	683b      	ldr	r3, [r7, #0]
 80067c0:	781b      	ldrb	r3, [r3, #0]
 80067c2:	009b      	lsls	r3, r3, #2
 80067c4:	4413      	add	r3, r2
 80067c6:	881b      	ldrh	r3, [r3, #0]
 80067c8:	b29b      	uxth	r3, r3
 80067ca:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80067ce:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80067d2:	84bb      	strh	r3, [r7, #36]	@ 0x24
 80067d4:	687a      	ldr	r2, [r7, #4]
 80067d6:	683b      	ldr	r3, [r7, #0]
 80067d8:	781b      	ldrb	r3, [r3, #0]
 80067da:	009b      	lsls	r3, r3, #2
 80067dc:	441a      	add	r2, r3
 80067de:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80067e0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80067e4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80067e8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80067ec:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80067f0:	b29b      	uxth	r3, r3
 80067f2:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80067f4:	687a      	ldr	r2, [r7, #4]
 80067f6:	683b      	ldr	r3, [r7, #0]
 80067f8:	781b      	ldrb	r3, [r3, #0]
 80067fa:	009b      	lsls	r3, r3, #2
 80067fc:	4413      	add	r3, r2
 80067fe:	881b      	ldrh	r3, [r3, #0]
 8006800:	b29b      	uxth	r3, r3
 8006802:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006806:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800680a:	847b      	strh	r3, [r7, #34]	@ 0x22
 800680c:	687a      	ldr	r2, [r7, #4]
 800680e:	683b      	ldr	r3, [r7, #0]
 8006810:	781b      	ldrb	r3, [r3, #0]
 8006812:	009b      	lsls	r3, r3, #2
 8006814:	441a      	add	r2, r3
 8006816:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8006818:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800681c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006820:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006824:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006828:	b29b      	uxth	r3, r3
 800682a:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 800682c:	2300      	movs	r3, #0
}
 800682e:	4618      	mov	r0, r3
 8006830:	3734      	adds	r7, #52	@ 0x34
 8006832:	46bd      	mov	sp, r7
 8006834:	bc80      	pop	{r7}
 8006836:	4770      	bx	lr

08006838 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006838:	b580      	push	{r7, lr}
 800683a:	b0c2      	sub	sp, #264	@ 0x108
 800683c:	af00      	add	r7, sp, #0
 800683e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006842:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006846:	6018      	str	r0, [r3, #0]
 8006848:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800684c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006850:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006852:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006856:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	785b      	ldrb	r3, [r3, #1]
 800685e:	2b01      	cmp	r3, #1
 8006860:	f040 86b7 	bne.w	80075d2 <USB_EPStartXfer+0xd9a>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8006864:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006868:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800686c:	681b      	ldr	r3, [r3, #0]
 800686e:	699a      	ldr	r2, [r3, #24]
 8006870:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006874:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	691b      	ldr	r3, [r3, #16]
 800687c:	429a      	cmp	r2, r3
 800687e:	d908      	bls.n	8006892 <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 8006880:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006884:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	691b      	ldr	r3, [r3, #16]
 800688c:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8006890:	e007      	b.n	80068a2 <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 8006892:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006896:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	699b      	ldr	r3, [r3, #24]
 800689e:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 80068a2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80068a6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	7b1b      	ldrb	r3, [r3, #12]
 80068ae:	2b00      	cmp	r3, #0
 80068b0:	d13a      	bne.n	8006928 <USB_EPStartXfer+0xf0>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 80068b2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80068b6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	6959      	ldr	r1, [r3, #20]
 80068be:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80068c2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	88da      	ldrh	r2, [r3, #6]
 80068ca:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80068ce:	b29b      	uxth	r3, r3
 80068d0:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 80068d4:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 80068d8:	6800      	ldr	r0, [r0, #0]
 80068da:	f001 fc9c 	bl	8008216 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80068de:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80068e2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	613b      	str	r3, [r7, #16]
 80068ea:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80068ee:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80068f8:	b29b      	uxth	r3, r3
 80068fa:	461a      	mov	r2, r3
 80068fc:	693b      	ldr	r3, [r7, #16]
 80068fe:	4413      	add	r3, r2
 8006900:	613b      	str	r3, [r7, #16]
 8006902:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006906:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	781b      	ldrb	r3, [r3, #0]
 800690e:	011a      	lsls	r2, r3, #4
 8006910:	693b      	ldr	r3, [r7, #16]
 8006912:	4413      	add	r3, r2
 8006914:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8006918:	60fb      	str	r3, [r7, #12]
 800691a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800691e:	b29a      	uxth	r2, r3
 8006920:	68fb      	ldr	r3, [r7, #12]
 8006922:	801a      	strh	r2, [r3, #0]
 8006924:	f000 be1f 	b.w	8007566 <USB_EPStartXfer+0xd2e>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8006928:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800692c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006930:	681b      	ldr	r3, [r3, #0]
 8006932:	78db      	ldrb	r3, [r3, #3]
 8006934:	2b02      	cmp	r3, #2
 8006936:	f040 8462 	bne.w	80071fe <USB_EPStartXfer+0x9c6>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 800693a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800693e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	6a1a      	ldr	r2, [r3, #32]
 8006946:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800694a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	691b      	ldr	r3, [r3, #16]
 8006952:	429a      	cmp	r2, r3
 8006954:	f240 83df 	bls.w	8007116 <USB_EPStartXfer+0x8de>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8006958:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800695c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006960:	681a      	ldr	r2, [r3, #0]
 8006962:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006966:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	781b      	ldrb	r3, [r3, #0]
 800696e:	009b      	lsls	r3, r3, #2
 8006970:	4413      	add	r3, r2
 8006972:	881b      	ldrh	r3, [r3, #0]
 8006974:	b29b      	uxth	r3, r3
 8006976:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800697a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800697e:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
 8006982:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006986:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800698a:	681a      	ldr	r2, [r3, #0]
 800698c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006990:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006994:	681b      	ldr	r3, [r3, #0]
 8006996:	781b      	ldrb	r3, [r3, #0]
 8006998:	009b      	lsls	r3, r3, #2
 800699a:	441a      	add	r2, r3
 800699c:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 80069a0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80069a4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80069a8:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 80069ac:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80069b0:	b29b      	uxth	r3, r3
 80069b2:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 80069b4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80069b8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	6a1a      	ldr	r2, [r3, #32]
 80069c0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80069c4:	1ad2      	subs	r2, r2, r3
 80069c6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80069ca:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80069d2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80069d6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80069da:	681a      	ldr	r2, [r3, #0]
 80069dc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80069e0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	781b      	ldrb	r3, [r3, #0]
 80069e8:	009b      	lsls	r3, r3, #2
 80069ea:	4413      	add	r3, r2
 80069ec:	881b      	ldrh	r3, [r3, #0]
 80069ee:	b29b      	uxth	r3, r3
 80069f0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80069f4:	2b00      	cmp	r3, #0
 80069f6:	f000 81c7 	beq.w	8006d88 <USB_EPStartXfer+0x550>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80069fa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80069fe:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	633b      	str	r3, [r7, #48]	@ 0x30
 8006a06:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006a0a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	785b      	ldrb	r3, [r3, #1]
 8006a12:	2b00      	cmp	r3, #0
 8006a14:	d177      	bne.n	8006b06 <USB_EPStartXfer+0x2ce>
 8006a16:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006a1a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006a22:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006a26:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006a30:	b29b      	uxth	r3, r3
 8006a32:	461a      	mov	r2, r3
 8006a34:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006a36:	4413      	add	r3, r2
 8006a38:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006a3a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006a3e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	781b      	ldrb	r3, [r3, #0]
 8006a46:	011a      	lsls	r2, r3, #4
 8006a48:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006a4a:	4413      	add	r3, r2
 8006a4c:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8006a50:	627b      	str	r3, [r7, #36]	@ 0x24
 8006a52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a54:	881b      	ldrh	r3, [r3, #0]
 8006a56:	b29b      	uxth	r3, r3
 8006a58:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006a5c:	b29a      	uxth	r2, r3
 8006a5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a60:	801a      	strh	r2, [r3, #0]
 8006a62:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006a66:	2b3e      	cmp	r3, #62	@ 0x3e
 8006a68:	d921      	bls.n	8006aae <USB_EPStartXfer+0x276>
 8006a6a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006a6e:	095b      	lsrs	r3, r3, #5
 8006a70:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8006a74:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006a78:	f003 031f 	and.w	r3, r3, #31
 8006a7c:	2b00      	cmp	r3, #0
 8006a7e:	d104      	bne.n	8006a8a <USB_EPStartXfer+0x252>
 8006a80:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8006a84:	3b01      	subs	r3, #1
 8006a86:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8006a8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a8c:	881b      	ldrh	r3, [r3, #0]
 8006a8e:	b29a      	uxth	r2, r3
 8006a90:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8006a94:	b29b      	uxth	r3, r3
 8006a96:	029b      	lsls	r3, r3, #10
 8006a98:	b29b      	uxth	r3, r3
 8006a9a:	4313      	orrs	r3, r2
 8006a9c:	b29b      	uxth	r3, r3
 8006a9e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006aa2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006aa6:	b29a      	uxth	r2, r3
 8006aa8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006aaa:	801a      	strh	r2, [r3, #0]
 8006aac:	e050      	b.n	8006b50 <USB_EPStartXfer+0x318>
 8006aae:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006ab2:	2b00      	cmp	r3, #0
 8006ab4:	d10a      	bne.n	8006acc <USB_EPStartXfer+0x294>
 8006ab6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ab8:	881b      	ldrh	r3, [r3, #0]
 8006aba:	b29b      	uxth	r3, r3
 8006abc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006ac0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006ac4:	b29a      	uxth	r2, r3
 8006ac6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ac8:	801a      	strh	r2, [r3, #0]
 8006aca:	e041      	b.n	8006b50 <USB_EPStartXfer+0x318>
 8006acc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006ad0:	085b      	lsrs	r3, r3, #1
 8006ad2:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8006ad6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006ada:	f003 0301 	and.w	r3, r3, #1
 8006ade:	2b00      	cmp	r3, #0
 8006ae0:	d004      	beq.n	8006aec <USB_EPStartXfer+0x2b4>
 8006ae2:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8006ae6:	3301      	adds	r3, #1
 8006ae8:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8006aec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006aee:	881b      	ldrh	r3, [r3, #0]
 8006af0:	b29a      	uxth	r2, r3
 8006af2:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8006af6:	b29b      	uxth	r3, r3
 8006af8:	029b      	lsls	r3, r3, #10
 8006afa:	b29b      	uxth	r3, r3
 8006afc:	4313      	orrs	r3, r2
 8006afe:	b29a      	uxth	r2, r3
 8006b00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b02:	801a      	strh	r2, [r3, #0]
 8006b04:	e024      	b.n	8006b50 <USB_EPStartXfer+0x318>
 8006b06:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006b0a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	785b      	ldrb	r3, [r3, #1]
 8006b12:	2b01      	cmp	r3, #1
 8006b14:	d11c      	bne.n	8006b50 <USB_EPStartXfer+0x318>
 8006b16:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006b1a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006b24:	b29b      	uxth	r3, r3
 8006b26:	461a      	mov	r2, r3
 8006b28:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b2a:	4413      	add	r3, r2
 8006b2c:	633b      	str	r3, [r7, #48]	@ 0x30
 8006b2e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006b32:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	781b      	ldrb	r3, [r3, #0]
 8006b3a:	011a      	lsls	r2, r3, #4
 8006b3c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b3e:	4413      	add	r3, r2
 8006b40:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8006b44:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006b46:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006b4a:	b29a      	uxth	r2, r3
 8006b4c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006b4e:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8006b50:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006b54:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	895b      	ldrh	r3, [r3, #10]
 8006b5c:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006b60:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006b64:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	6959      	ldr	r1, [r3, #20]
 8006b6c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006b70:	b29b      	uxth	r3, r3
 8006b72:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8006b76:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8006b7a:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8006b7e:	6800      	ldr	r0, [r0, #0]
 8006b80:	f001 fb49 	bl	8008216 <USB_WritePMA>
            ep->xfer_buff += len;
 8006b84:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006b88:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	695a      	ldr	r2, [r3, #20]
 8006b90:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006b94:	441a      	add	r2, r3
 8006b96:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006b9a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8006ba2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006ba6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	6a1a      	ldr	r2, [r3, #32]
 8006bae:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006bb2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	691b      	ldr	r3, [r3, #16]
 8006bba:	429a      	cmp	r2, r3
 8006bbc:	d90f      	bls.n	8006bde <USB_EPStartXfer+0x3a6>
            {
              ep->xfer_len_db -= len;
 8006bbe:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006bc2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	6a1a      	ldr	r2, [r3, #32]
 8006bca:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006bce:	1ad2      	subs	r2, r2, r3
 8006bd0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006bd4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	621a      	str	r2, [r3, #32]
 8006bdc:	e00e      	b.n	8006bfc <USB_EPStartXfer+0x3c4>
            }
            else
            {
              len = ep->xfer_len_db;
 8006bde:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006be2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	6a1b      	ldr	r3, [r3, #32]
 8006bea:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
              ep->xfer_len_db = 0U;
 8006bee:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006bf2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	2200      	movs	r2, #0
 8006bfa:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8006bfc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006c00:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006c04:	681b      	ldr	r3, [r3, #0]
 8006c06:	785b      	ldrb	r3, [r3, #1]
 8006c08:	2b00      	cmp	r3, #0
 8006c0a:	d177      	bne.n	8006cfc <USB_EPStartXfer+0x4c4>
 8006c0c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006c10:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006c14:	681b      	ldr	r3, [r3, #0]
 8006c16:	61bb      	str	r3, [r7, #24]
 8006c18:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006c1c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006c26:	b29b      	uxth	r3, r3
 8006c28:	461a      	mov	r2, r3
 8006c2a:	69bb      	ldr	r3, [r7, #24]
 8006c2c:	4413      	add	r3, r2
 8006c2e:	61bb      	str	r3, [r7, #24]
 8006c30:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006c34:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006c38:	681b      	ldr	r3, [r3, #0]
 8006c3a:	781b      	ldrb	r3, [r3, #0]
 8006c3c:	011a      	lsls	r2, r3, #4
 8006c3e:	69bb      	ldr	r3, [r7, #24]
 8006c40:	4413      	add	r3, r2
 8006c42:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8006c46:	617b      	str	r3, [r7, #20]
 8006c48:	697b      	ldr	r3, [r7, #20]
 8006c4a:	881b      	ldrh	r3, [r3, #0]
 8006c4c:	b29b      	uxth	r3, r3
 8006c4e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006c52:	b29a      	uxth	r2, r3
 8006c54:	697b      	ldr	r3, [r7, #20]
 8006c56:	801a      	strh	r2, [r3, #0]
 8006c58:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006c5c:	2b3e      	cmp	r3, #62	@ 0x3e
 8006c5e:	d921      	bls.n	8006ca4 <USB_EPStartXfer+0x46c>
 8006c60:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006c64:	095b      	lsrs	r3, r3, #5
 8006c66:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8006c6a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006c6e:	f003 031f 	and.w	r3, r3, #31
 8006c72:	2b00      	cmp	r3, #0
 8006c74:	d104      	bne.n	8006c80 <USB_EPStartXfer+0x448>
 8006c76:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006c7a:	3b01      	subs	r3, #1
 8006c7c:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8006c80:	697b      	ldr	r3, [r7, #20]
 8006c82:	881b      	ldrh	r3, [r3, #0]
 8006c84:	b29a      	uxth	r2, r3
 8006c86:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006c8a:	b29b      	uxth	r3, r3
 8006c8c:	029b      	lsls	r3, r3, #10
 8006c8e:	b29b      	uxth	r3, r3
 8006c90:	4313      	orrs	r3, r2
 8006c92:	b29b      	uxth	r3, r3
 8006c94:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006c98:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006c9c:	b29a      	uxth	r2, r3
 8006c9e:	697b      	ldr	r3, [r7, #20]
 8006ca0:	801a      	strh	r2, [r3, #0]
 8006ca2:	e056      	b.n	8006d52 <USB_EPStartXfer+0x51a>
 8006ca4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006ca8:	2b00      	cmp	r3, #0
 8006caa:	d10a      	bne.n	8006cc2 <USB_EPStartXfer+0x48a>
 8006cac:	697b      	ldr	r3, [r7, #20]
 8006cae:	881b      	ldrh	r3, [r3, #0]
 8006cb0:	b29b      	uxth	r3, r3
 8006cb2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006cb6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006cba:	b29a      	uxth	r2, r3
 8006cbc:	697b      	ldr	r3, [r7, #20]
 8006cbe:	801a      	strh	r2, [r3, #0]
 8006cc0:	e047      	b.n	8006d52 <USB_EPStartXfer+0x51a>
 8006cc2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006cc6:	085b      	lsrs	r3, r3, #1
 8006cc8:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8006ccc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006cd0:	f003 0301 	and.w	r3, r3, #1
 8006cd4:	2b00      	cmp	r3, #0
 8006cd6:	d004      	beq.n	8006ce2 <USB_EPStartXfer+0x4aa>
 8006cd8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006cdc:	3301      	adds	r3, #1
 8006cde:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8006ce2:	697b      	ldr	r3, [r7, #20]
 8006ce4:	881b      	ldrh	r3, [r3, #0]
 8006ce6:	b29a      	uxth	r2, r3
 8006ce8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006cec:	b29b      	uxth	r3, r3
 8006cee:	029b      	lsls	r3, r3, #10
 8006cf0:	b29b      	uxth	r3, r3
 8006cf2:	4313      	orrs	r3, r2
 8006cf4:	b29a      	uxth	r2, r3
 8006cf6:	697b      	ldr	r3, [r7, #20]
 8006cf8:	801a      	strh	r2, [r3, #0]
 8006cfa:	e02a      	b.n	8006d52 <USB_EPStartXfer+0x51a>
 8006cfc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006d00:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	785b      	ldrb	r3, [r3, #1]
 8006d08:	2b01      	cmp	r3, #1
 8006d0a:	d122      	bne.n	8006d52 <USB_EPStartXfer+0x51a>
 8006d0c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006d10:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006d14:	681b      	ldr	r3, [r3, #0]
 8006d16:	623b      	str	r3, [r7, #32]
 8006d18:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006d1c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006d20:	681b      	ldr	r3, [r3, #0]
 8006d22:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006d26:	b29b      	uxth	r3, r3
 8006d28:	461a      	mov	r2, r3
 8006d2a:	6a3b      	ldr	r3, [r7, #32]
 8006d2c:	4413      	add	r3, r2
 8006d2e:	623b      	str	r3, [r7, #32]
 8006d30:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006d34:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006d38:	681b      	ldr	r3, [r3, #0]
 8006d3a:	781b      	ldrb	r3, [r3, #0]
 8006d3c:	011a      	lsls	r2, r3, #4
 8006d3e:	6a3b      	ldr	r3, [r7, #32]
 8006d40:	4413      	add	r3, r2
 8006d42:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8006d46:	61fb      	str	r3, [r7, #28]
 8006d48:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006d4c:	b29a      	uxth	r2, r3
 8006d4e:	69fb      	ldr	r3, [r7, #28]
 8006d50:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8006d52:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006d56:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	891b      	ldrh	r3, [r3, #8]
 8006d5e:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006d62:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006d66:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006d6a:	681b      	ldr	r3, [r3, #0]
 8006d6c:	6959      	ldr	r1, [r3, #20]
 8006d6e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006d72:	b29b      	uxth	r3, r3
 8006d74:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8006d78:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8006d7c:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8006d80:	6800      	ldr	r0, [r0, #0]
 8006d82:	f001 fa48 	bl	8008216 <USB_WritePMA>
 8006d86:	e3ee      	b.n	8007566 <USB_EPStartXfer+0xd2e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8006d88:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006d8c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006d90:	681b      	ldr	r3, [r3, #0]
 8006d92:	785b      	ldrb	r3, [r3, #1]
 8006d94:	2b00      	cmp	r3, #0
 8006d96:	d177      	bne.n	8006e88 <USB_EPStartXfer+0x650>
 8006d98:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006d9c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006da0:	681b      	ldr	r3, [r3, #0]
 8006da2:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006da4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006da8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006dac:	681b      	ldr	r3, [r3, #0]
 8006dae:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006db2:	b29b      	uxth	r3, r3
 8006db4:	461a      	mov	r2, r3
 8006db6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006db8:	4413      	add	r3, r2
 8006dba:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006dbc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006dc0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006dc4:	681b      	ldr	r3, [r3, #0]
 8006dc6:	781b      	ldrb	r3, [r3, #0]
 8006dc8:	011a      	lsls	r2, r3, #4
 8006dca:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006dcc:	4413      	add	r3, r2
 8006dce:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8006dd2:	647b      	str	r3, [r7, #68]	@ 0x44
 8006dd4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006dd6:	881b      	ldrh	r3, [r3, #0]
 8006dd8:	b29b      	uxth	r3, r3
 8006dda:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006dde:	b29a      	uxth	r2, r3
 8006de0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006de2:	801a      	strh	r2, [r3, #0]
 8006de4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006de8:	2b3e      	cmp	r3, #62	@ 0x3e
 8006dea:	d921      	bls.n	8006e30 <USB_EPStartXfer+0x5f8>
 8006dec:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006df0:	095b      	lsrs	r3, r3, #5
 8006df2:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8006df6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006dfa:	f003 031f 	and.w	r3, r3, #31
 8006dfe:	2b00      	cmp	r3, #0
 8006e00:	d104      	bne.n	8006e0c <USB_EPStartXfer+0x5d4>
 8006e02:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8006e06:	3b01      	subs	r3, #1
 8006e08:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8006e0c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006e0e:	881b      	ldrh	r3, [r3, #0]
 8006e10:	b29a      	uxth	r2, r3
 8006e12:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8006e16:	b29b      	uxth	r3, r3
 8006e18:	029b      	lsls	r3, r3, #10
 8006e1a:	b29b      	uxth	r3, r3
 8006e1c:	4313      	orrs	r3, r2
 8006e1e:	b29b      	uxth	r3, r3
 8006e20:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006e24:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006e28:	b29a      	uxth	r2, r3
 8006e2a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006e2c:	801a      	strh	r2, [r3, #0]
 8006e2e:	e056      	b.n	8006ede <USB_EPStartXfer+0x6a6>
 8006e30:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006e34:	2b00      	cmp	r3, #0
 8006e36:	d10a      	bne.n	8006e4e <USB_EPStartXfer+0x616>
 8006e38:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006e3a:	881b      	ldrh	r3, [r3, #0]
 8006e3c:	b29b      	uxth	r3, r3
 8006e3e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006e42:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006e46:	b29a      	uxth	r2, r3
 8006e48:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006e4a:	801a      	strh	r2, [r3, #0]
 8006e4c:	e047      	b.n	8006ede <USB_EPStartXfer+0x6a6>
 8006e4e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006e52:	085b      	lsrs	r3, r3, #1
 8006e54:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8006e58:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006e5c:	f003 0301 	and.w	r3, r3, #1
 8006e60:	2b00      	cmp	r3, #0
 8006e62:	d004      	beq.n	8006e6e <USB_EPStartXfer+0x636>
 8006e64:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8006e68:	3301      	adds	r3, #1
 8006e6a:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8006e6e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006e70:	881b      	ldrh	r3, [r3, #0]
 8006e72:	b29a      	uxth	r2, r3
 8006e74:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8006e78:	b29b      	uxth	r3, r3
 8006e7a:	029b      	lsls	r3, r3, #10
 8006e7c:	b29b      	uxth	r3, r3
 8006e7e:	4313      	orrs	r3, r2
 8006e80:	b29a      	uxth	r2, r3
 8006e82:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006e84:	801a      	strh	r2, [r3, #0]
 8006e86:	e02a      	b.n	8006ede <USB_EPStartXfer+0x6a6>
 8006e88:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006e8c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006e90:	681b      	ldr	r3, [r3, #0]
 8006e92:	785b      	ldrb	r3, [r3, #1]
 8006e94:	2b01      	cmp	r3, #1
 8006e96:	d122      	bne.n	8006ede <USB_EPStartXfer+0x6a6>
 8006e98:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006e9c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006ea0:	681b      	ldr	r3, [r3, #0]
 8006ea2:	653b      	str	r3, [r7, #80]	@ 0x50
 8006ea4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006ea8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006eac:	681b      	ldr	r3, [r3, #0]
 8006eae:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006eb2:	b29b      	uxth	r3, r3
 8006eb4:	461a      	mov	r2, r3
 8006eb6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006eb8:	4413      	add	r3, r2
 8006eba:	653b      	str	r3, [r7, #80]	@ 0x50
 8006ebc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006ec0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006ec4:	681b      	ldr	r3, [r3, #0]
 8006ec6:	781b      	ldrb	r3, [r3, #0]
 8006ec8:	011a      	lsls	r2, r3, #4
 8006eca:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006ecc:	4413      	add	r3, r2
 8006ece:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8006ed2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006ed4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006ed8:	b29a      	uxth	r2, r3
 8006eda:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006edc:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8006ede:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006ee2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006ee6:	681b      	ldr	r3, [r3, #0]
 8006ee8:	891b      	ldrh	r3, [r3, #8]
 8006eea:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006eee:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006ef2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006ef6:	681b      	ldr	r3, [r3, #0]
 8006ef8:	6959      	ldr	r1, [r3, #20]
 8006efa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006efe:	b29b      	uxth	r3, r3
 8006f00:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8006f04:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8006f08:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8006f0c:	6800      	ldr	r0, [r0, #0]
 8006f0e:	f001 f982 	bl	8008216 <USB_WritePMA>
            ep->xfer_buff += len;
 8006f12:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006f16:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006f1a:	681b      	ldr	r3, [r3, #0]
 8006f1c:	695a      	ldr	r2, [r3, #20]
 8006f1e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006f22:	441a      	add	r2, r3
 8006f24:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006f28:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006f2c:	681b      	ldr	r3, [r3, #0]
 8006f2e:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8006f30:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006f34:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006f38:	681b      	ldr	r3, [r3, #0]
 8006f3a:	6a1a      	ldr	r2, [r3, #32]
 8006f3c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006f40:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006f44:	681b      	ldr	r3, [r3, #0]
 8006f46:	691b      	ldr	r3, [r3, #16]
 8006f48:	429a      	cmp	r2, r3
 8006f4a:	d90f      	bls.n	8006f6c <USB_EPStartXfer+0x734>
            {
              ep->xfer_len_db -= len;
 8006f4c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006f50:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006f54:	681b      	ldr	r3, [r3, #0]
 8006f56:	6a1a      	ldr	r2, [r3, #32]
 8006f58:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006f5c:	1ad2      	subs	r2, r2, r3
 8006f5e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006f62:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	621a      	str	r2, [r3, #32]
 8006f6a:	e00e      	b.n	8006f8a <USB_EPStartXfer+0x752>
            }
            else
            {
              len = ep->xfer_len_db;
 8006f6c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006f70:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006f74:	681b      	ldr	r3, [r3, #0]
 8006f76:	6a1b      	ldr	r3, [r3, #32]
 8006f78:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
              ep->xfer_len_db = 0U;
 8006f7c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006f80:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006f84:	681b      	ldr	r3, [r3, #0]
 8006f86:	2200      	movs	r2, #0
 8006f88:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8006f8a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006f8e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	643b      	str	r3, [r7, #64]	@ 0x40
 8006f96:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006f9a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006f9e:	681b      	ldr	r3, [r3, #0]
 8006fa0:	785b      	ldrb	r3, [r3, #1]
 8006fa2:	2b00      	cmp	r3, #0
 8006fa4:	d177      	bne.n	8007096 <USB_EPStartXfer+0x85e>
 8006fa6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006faa:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006fae:	681b      	ldr	r3, [r3, #0]
 8006fb0:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006fb2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006fb6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006fc0:	b29b      	uxth	r3, r3
 8006fc2:	461a      	mov	r2, r3
 8006fc4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006fc6:	4413      	add	r3, r2
 8006fc8:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006fca:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006fce:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006fd2:	681b      	ldr	r3, [r3, #0]
 8006fd4:	781b      	ldrb	r3, [r3, #0]
 8006fd6:	011a      	lsls	r2, r3, #4
 8006fd8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006fda:	4413      	add	r3, r2
 8006fdc:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8006fe0:	637b      	str	r3, [r7, #52]	@ 0x34
 8006fe2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006fe4:	881b      	ldrh	r3, [r3, #0]
 8006fe6:	b29b      	uxth	r3, r3
 8006fe8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006fec:	b29a      	uxth	r2, r3
 8006fee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006ff0:	801a      	strh	r2, [r3, #0]
 8006ff2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006ff6:	2b3e      	cmp	r3, #62	@ 0x3e
 8006ff8:	d921      	bls.n	800703e <USB_EPStartXfer+0x806>
 8006ffa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006ffe:	095b      	lsrs	r3, r3, #5
 8007000:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8007004:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007008:	f003 031f 	and.w	r3, r3, #31
 800700c:	2b00      	cmp	r3, #0
 800700e:	d104      	bne.n	800701a <USB_EPStartXfer+0x7e2>
 8007010:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007014:	3b01      	subs	r3, #1
 8007016:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800701a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800701c:	881b      	ldrh	r3, [r3, #0]
 800701e:	b29a      	uxth	r2, r3
 8007020:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007024:	b29b      	uxth	r3, r3
 8007026:	029b      	lsls	r3, r3, #10
 8007028:	b29b      	uxth	r3, r3
 800702a:	4313      	orrs	r3, r2
 800702c:	b29b      	uxth	r3, r3
 800702e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007032:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007036:	b29a      	uxth	r2, r3
 8007038:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800703a:	801a      	strh	r2, [r3, #0]
 800703c:	e050      	b.n	80070e0 <USB_EPStartXfer+0x8a8>
 800703e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007042:	2b00      	cmp	r3, #0
 8007044:	d10a      	bne.n	800705c <USB_EPStartXfer+0x824>
 8007046:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007048:	881b      	ldrh	r3, [r3, #0]
 800704a:	b29b      	uxth	r3, r3
 800704c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007050:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007054:	b29a      	uxth	r2, r3
 8007056:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007058:	801a      	strh	r2, [r3, #0]
 800705a:	e041      	b.n	80070e0 <USB_EPStartXfer+0x8a8>
 800705c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007060:	085b      	lsrs	r3, r3, #1
 8007062:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8007066:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800706a:	f003 0301 	and.w	r3, r3, #1
 800706e:	2b00      	cmp	r3, #0
 8007070:	d004      	beq.n	800707c <USB_EPStartXfer+0x844>
 8007072:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007076:	3301      	adds	r3, #1
 8007078:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800707c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800707e:	881b      	ldrh	r3, [r3, #0]
 8007080:	b29a      	uxth	r2, r3
 8007082:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007086:	b29b      	uxth	r3, r3
 8007088:	029b      	lsls	r3, r3, #10
 800708a:	b29b      	uxth	r3, r3
 800708c:	4313      	orrs	r3, r2
 800708e:	b29a      	uxth	r2, r3
 8007090:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007092:	801a      	strh	r2, [r3, #0]
 8007094:	e024      	b.n	80070e0 <USB_EPStartXfer+0x8a8>
 8007096:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800709a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	785b      	ldrb	r3, [r3, #1]
 80070a2:	2b01      	cmp	r3, #1
 80070a4:	d11c      	bne.n	80070e0 <USB_EPStartXfer+0x8a8>
 80070a6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80070aa:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80070ae:	681b      	ldr	r3, [r3, #0]
 80070b0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80070b4:	b29b      	uxth	r3, r3
 80070b6:	461a      	mov	r2, r3
 80070b8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80070ba:	4413      	add	r3, r2
 80070bc:	643b      	str	r3, [r7, #64]	@ 0x40
 80070be:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80070c2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80070c6:	681b      	ldr	r3, [r3, #0]
 80070c8:	781b      	ldrb	r3, [r3, #0]
 80070ca:	011a      	lsls	r2, r3, #4
 80070cc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80070ce:	4413      	add	r3, r2
 80070d0:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80070d4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80070d6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80070da:	b29a      	uxth	r2, r3
 80070dc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80070de:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 80070e0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80070e4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80070e8:	681b      	ldr	r3, [r3, #0]
 80070ea:	895b      	ldrh	r3, [r3, #10]
 80070ec:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80070f0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80070f4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80070f8:	681b      	ldr	r3, [r3, #0]
 80070fa:	6959      	ldr	r1, [r3, #20]
 80070fc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007100:	b29b      	uxth	r3, r3
 8007102:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8007106:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800710a:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800710e:	6800      	ldr	r0, [r0, #0]
 8007110:	f001 f881 	bl	8008216 <USB_WritePMA>
 8007114:	e227      	b.n	8007566 <USB_EPStartXfer+0xd2e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8007116:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800711a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800711e:	681b      	ldr	r3, [r3, #0]
 8007120:	6a1b      	ldr	r3, [r3, #32]
 8007122:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 8007126:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800712a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800712e:	681a      	ldr	r2, [r3, #0]
 8007130:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007134:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007138:	681b      	ldr	r3, [r3, #0]
 800713a:	781b      	ldrb	r3, [r3, #0]
 800713c:	009b      	lsls	r3, r3, #2
 800713e:	4413      	add	r3, r2
 8007140:	881b      	ldrh	r3, [r3, #0]
 8007142:	b29b      	uxth	r3, r3
 8007144:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 8007148:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800714c:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 8007150:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007154:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007158:	681a      	ldr	r2, [r3, #0]
 800715a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800715e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007162:	681b      	ldr	r3, [r3, #0]
 8007164:	781b      	ldrb	r3, [r3, #0]
 8007166:	009b      	lsls	r3, r3, #2
 8007168:	441a      	add	r2, r3
 800716a:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 800716e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007172:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007176:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800717a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800717e:	b29b      	uxth	r3, r3
 8007180:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8007182:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007186:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800718a:	681b      	ldr	r3, [r3, #0]
 800718c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800718e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007192:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007196:	681b      	ldr	r3, [r3, #0]
 8007198:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800719c:	b29b      	uxth	r3, r3
 800719e:	461a      	mov	r2, r3
 80071a0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80071a2:	4413      	add	r3, r2
 80071a4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80071a6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80071aa:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80071ae:	681b      	ldr	r3, [r3, #0]
 80071b0:	781b      	ldrb	r3, [r3, #0]
 80071b2:	011a      	lsls	r2, r3, #4
 80071b4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80071b6:	4413      	add	r3, r2
 80071b8:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80071bc:	65bb      	str	r3, [r7, #88]	@ 0x58
 80071be:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80071c2:	b29a      	uxth	r2, r3
 80071c4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80071c6:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 80071c8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80071cc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80071d0:	681b      	ldr	r3, [r3, #0]
 80071d2:	891b      	ldrh	r3, [r3, #8]
 80071d4:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80071d8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80071dc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80071e0:	681b      	ldr	r3, [r3, #0]
 80071e2:	6959      	ldr	r1, [r3, #20]
 80071e4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80071e8:	b29b      	uxth	r3, r3
 80071ea:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 80071ee:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 80071f2:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 80071f6:	6800      	ldr	r0, [r0, #0]
 80071f8:	f001 f80d 	bl	8008216 <USB_WritePMA>
 80071fc:	e1b3      	b.n	8007566 <USB_EPStartXfer+0xd2e>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 80071fe:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007202:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007206:	681b      	ldr	r3, [r3, #0]
 8007208:	6a1a      	ldr	r2, [r3, #32]
 800720a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800720e:	1ad2      	subs	r2, r2, r3
 8007210:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007214:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007218:	681b      	ldr	r3, [r3, #0]
 800721a:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800721c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007220:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007224:	681a      	ldr	r2, [r3, #0]
 8007226:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800722a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800722e:	681b      	ldr	r3, [r3, #0]
 8007230:	781b      	ldrb	r3, [r3, #0]
 8007232:	009b      	lsls	r3, r3, #2
 8007234:	4413      	add	r3, r2
 8007236:	881b      	ldrh	r3, [r3, #0]
 8007238:	b29b      	uxth	r3, r3
 800723a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800723e:	2b00      	cmp	r3, #0
 8007240:	f000 80c6 	beq.w	80073d0 <USB_EPStartXfer+0xb98>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8007244:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007248:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800724c:	681b      	ldr	r3, [r3, #0]
 800724e:	673b      	str	r3, [r7, #112]	@ 0x70
 8007250:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007254:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007258:	681b      	ldr	r3, [r3, #0]
 800725a:	785b      	ldrb	r3, [r3, #1]
 800725c:	2b00      	cmp	r3, #0
 800725e:	d177      	bne.n	8007350 <USB_EPStartXfer+0xb18>
 8007260:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007264:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007268:	681b      	ldr	r3, [r3, #0]
 800726a:	66bb      	str	r3, [r7, #104]	@ 0x68
 800726c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007270:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007274:	681b      	ldr	r3, [r3, #0]
 8007276:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800727a:	b29b      	uxth	r3, r3
 800727c:	461a      	mov	r2, r3
 800727e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8007280:	4413      	add	r3, r2
 8007282:	66bb      	str	r3, [r7, #104]	@ 0x68
 8007284:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007288:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800728c:	681b      	ldr	r3, [r3, #0]
 800728e:	781b      	ldrb	r3, [r3, #0]
 8007290:	011a      	lsls	r2, r3, #4
 8007292:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8007294:	4413      	add	r3, r2
 8007296:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800729a:	667b      	str	r3, [r7, #100]	@ 0x64
 800729c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800729e:	881b      	ldrh	r3, [r3, #0]
 80072a0:	b29b      	uxth	r3, r3
 80072a2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80072a6:	b29a      	uxth	r2, r3
 80072a8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80072aa:	801a      	strh	r2, [r3, #0]
 80072ac:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80072b0:	2b3e      	cmp	r3, #62	@ 0x3e
 80072b2:	d921      	bls.n	80072f8 <USB_EPStartXfer+0xac0>
 80072b4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80072b8:	095b      	lsrs	r3, r3, #5
 80072ba:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 80072be:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80072c2:	f003 031f 	and.w	r3, r3, #31
 80072c6:	2b00      	cmp	r3, #0
 80072c8:	d104      	bne.n	80072d4 <USB_EPStartXfer+0xa9c>
 80072ca:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 80072ce:	3b01      	subs	r3, #1
 80072d0:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 80072d4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80072d6:	881b      	ldrh	r3, [r3, #0]
 80072d8:	b29a      	uxth	r2, r3
 80072da:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 80072de:	b29b      	uxth	r3, r3
 80072e0:	029b      	lsls	r3, r3, #10
 80072e2:	b29b      	uxth	r3, r3
 80072e4:	4313      	orrs	r3, r2
 80072e6:	b29b      	uxth	r3, r3
 80072e8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80072ec:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80072f0:	b29a      	uxth	r2, r3
 80072f2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80072f4:	801a      	strh	r2, [r3, #0]
 80072f6:	e050      	b.n	800739a <USB_EPStartXfer+0xb62>
 80072f8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80072fc:	2b00      	cmp	r3, #0
 80072fe:	d10a      	bne.n	8007316 <USB_EPStartXfer+0xade>
 8007300:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007302:	881b      	ldrh	r3, [r3, #0]
 8007304:	b29b      	uxth	r3, r3
 8007306:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800730a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800730e:	b29a      	uxth	r2, r3
 8007310:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007312:	801a      	strh	r2, [r3, #0]
 8007314:	e041      	b.n	800739a <USB_EPStartXfer+0xb62>
 8007316:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800731a:	085b      	lsrs	r3, r3, #1
 800731c:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8007320:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007324:	f003 0301 	and.w	r3, r3, #1
 8007328:	2b00      	cmp	r3, #0
 800732a:	d004      	beq.n	8007336 <USB_EPStartXfer+0xafe>
 800732c:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8007330:	3301      	adds	r3, #1
 8007332:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8007336:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007338:	881b      	ldrh	r3, [r3, #0]
 800733a:	b29a      	uxth	r2, r3
 800733c:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8007340:	b29b      	uxth	r3, r3
 8007342:	029b      	lsls	r3, r3, #10
 8007344:	b29b      	uxth	r3, r3
 8007346:	4313      	orrs	r3, r2
 8007348:	b29a      	uxth	r2, r3
 800734a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800734c:	801a      	strh	r2, [r3, #0]
 800734e:	e024      	b.n	800739a <USB_EPStartXfer+0xb62>
 8007350:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007354:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007358:	681b      	ldr	r3, [r3, #0]
 800735a:	785b      	ldrb	r3, [r3, #1]
 800735c:	2b01      	cmp	r3, #1
 800735e:	d11c      	bne.n	800739a <USB_EPStartXfer+0xb62>
 8007360:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007364:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007368:	681b      	ldr	r3, [r3, #0]
 800736a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800736e:	b29b      	uxth	r3, r3
 8007370:	461a      	mov	r2, r3
 8007372:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8007374:	4413      	add	r3, r2
 8007376:	673b      	str	r3, [r7, #112]	@ 0x70
 8007378:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800737c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007380:	681b      	ldr	r3, [r3, #0]
 8007382:	781b      	ldrb	r3, [r3, #0]
 8007384:	011a      	lsls	r2, r3, #4
 8007386:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8007388:	4413      	add	r3, r2
 800738a:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800738e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8007390:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007394:	b29a      	uxth	r2, r3
 8007396:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007398:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 800739a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800739e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80073a2:	681b      	ldr	r3, [r3, #0]
 80073a4:	895b      	ldrh	r3, [r3, #10]
 80073a6:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80073aa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80073ae:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80073b2:	681b      	ldr	r3, [r3, #0]
 80073b4:	6959      	ldr	r1, [r3, #20]
 80073b6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80073ba:	b29b      	uxth	r3, r3
 80073bc:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 80073c0:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 80073c4:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 80073c8:	6800      	ldr	r0, [r0, #0]
 80073ca:	f000 ff24 	bl	8008216 <USB_WritePMA>
 80073ce:	e0ca      	b.n	8007566 <USB_EPStartXfer+0xd2e>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80073d0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80073d4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80073d8:	681b      	ldr	r3, [r3, #0]
 80073da:	785b      	ldrb	r3, [r3, #1]
 80073dc:	2b00      	cmp	r3, #0
 80073de:	d177      	bne.n	80074d0 <USB_EPStartXfer+0xc98>
 80073e0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80073e4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80073e8:	681b      	ldr	r3, [r3, #0]
 80073ea:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80073ec:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80073f0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80073f4:	681b      	ldr	r3, [r3, #0]
 80073f6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80073fa:	b29b      	uxth	r3, r3
 80073fc:	461a      	mov	r2, r3
 80073fe:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8007400:	4413      	add	r3, r2
 8007402:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8007404:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007408:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800740c:	681b      	ldr	r3, [r3, #0]
 800740e:	781b      	ldrb	r3, [r3, #0]
 8007410:	011a      	lsls	r2, r3, #4
 8007412:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8007414:	4413      	add	r3, r2
 8007416:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800741a:	67bb      	str	r3, [r7, #120]	@ 0x78
 800741c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800741e:	881b      	ldrh	r3, [r3, #0]
 8007420:	b29b      	uxth	r3, r3
 8007422:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007426:	b29a      	uxth	r2, r3
 8007428:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800742a:	801a      	strh	r2, [r3, #0]
 800742c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007430:	2b3e      	cmp	r3, #62	@ 0x3e
 8007432:	d921      	bls.n	8007478 <USB_EPStartXfer+0xc40>
 8007434:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007438:	095b      	lsrs	r3, r3, #5
 800743a:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800743e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007442:	f003 031f 	and.w	r3, r3, #31
 8007446:	2b00      	cmp	r3, #0
 8007448:	d104      	bne.n	8007454 <USB_EPStartXfer+0xc1c>
 800744a:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800744e:	3b01      	subs	r3, #1
 8007450:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8007454:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007456:	881b      	ldrh	r3, [r3, #0]
 8007458:	b29a      	uxth	r2, r3
 800745a:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800745e:	b29b      	uxth	r3, r3
 8007460:	029b      	lsls	r3, r3, #10
 8007462:	b29b      	uxth	r3, r3
 8007464:	4313      	orrs	r3, r2
 8007466:	b29b      	uxth	r3, r3
 8007468:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800746c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007470:	b29a      	uxth	r2, r3
 8007472:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007474:	801a      	strh	r2, [r3, #0]
 8007476:	e05c      	b.n	8007532 <USB_EPStartXfer+0xcfa>
 8007478:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800747c:	2b00      	cmp	r3, #0
 800747e:	d10a      	bne.n	8007496 <USB_EPStartXfer+0xc5e>
 8007480:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007482:	881b      	ldrh	r3, [r3, #0]
 8007484:	b29b      	uxth	r3, r3
 8007486:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800748a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800748e:	b29a      	uxth	r2, r3
 8007490:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007492:	801a      	strh	r2, [r3, #0]
 8007494:	e04d      	b.n	8007532 <USB_EPStartXfer+0xcfa>
 8007496:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800749a:	085b      	lsrs	r3, r3, #1
 800749c:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 80074a0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80074a4:	f003 0301 	and.w	r3, r3, #1
 80074a8:	2b00      	cmp	r3, #0
 80074aa:	d004      	beq.n	80074b6 <USB_EPStartXfer+0xc7e>
 80074ac:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 80074b0:	3301      	adds	r3, #1
 80074b2:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 80074b6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80074b8:	881b      	ldrh	r3, [r3, #0]
 80074ba:	b29a      	uxth	r2, r3
 80074bc:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 80074c0:	b29b      	uxth	r3, r3
 80074c2:	029b      	lsls	r3, r3, #10
 80074c4:	b29b      	uxth	r3, r3
 80074c6:	4313      	orrs	r3, r2
 80074c8:	b29a      	uxth	r2, r3
 80074ca:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80074cc:	801a      	strh	r2, [r3, #0]
 80074ce:	e030      	b.n	8007532 <USB_EPStartXfer+0xcfa>
 80074d0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80074d4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80074d8:	681b      	ldr	r3, [r3, #0]
 80074da:	785b      	ldrb	r3, [r3, #1]
 80074dc:	2b01      	cmp	r3, #1
 80074de:	d128      	bne.n	8007532 <USB_EPStartXfer+0xcfa>
 80074e0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80074e4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80074e8:	681b      	ldr	r3, [r3, #0]
 80074ea:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80074ee:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80074f2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80074f6:	681b      	ldr	r3, [r3, #0]
 80074f8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80074fc:	b29b      	uxth	r3, r3
 80074fe:	461a      	mov	r2, r3
 8007500:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8007504:	4413      	add	r3, r2
 8007506:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800750a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800750e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007512:	681b      	ldr	r3, [r3, #0]
 8007514:	781b      	ldrb	r3, [r3, #0]
 8007516:	011a      	lsls	r2, r3, #4
 8007518:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800751c:	4413      	add	r3, r2
 800751e:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8007522:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8007526:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800752a:	b29a      	uxth	r2, r3
 800752c:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8007530:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8007532:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007536:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800753a:	681b      	ldr	r3, [r3, #0]
 800753c:	891b      	ldrh	r3, [r3, #8]
 800753e:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007542:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007546:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800754a:	681b      	ldr	r3, [r3, #0]
 800754c:	6959      	ldr	r1, [r3, #20]
 800754e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007552:	b29b      	uxth	r3, r3
 8007554:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8007558:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800755c:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8007560:	6800      	ldr	r0, [r0, #0]
 8007562:	f000 fe58 	bl	8008216 <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8007566:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800756a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800756e:	681a      	ldr	r2, [r3, #0]
 8007570:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007574:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007578:	681b      	ldr	r3, [r3, #0]
 800757a:	781b      	ldrb	r3, [r3, #0]
 800757c:	009b      	lsls	r3, r3, #2
 800757e:	4413      	add	r3, r2
 8007580:	881b      	ldrh	r3, [r3, #0]
 8007582:	b29b      	uxth	r3, r3
 8007584:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007588:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800758c:	817b      	strh	r3, [r7, #10]
 800758e:	897b      	ldrh	r3, [r7, #10]
 8007590:	f083 0310 	eor.w	r3, r3, #16
 8007594:	817b      	strh	r3, [r7, #10]
 8007596:	897b      	ldrh	r3, [r7, #10]
 8007598:	f083 0320 	eor.w	r3, r3, #32
 800759c:	817b      	strh	r3, [r7, #10]
 800759e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80075a2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80075a6:	681a      	ldr	r2, [r3, #0]
 80075a8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80075ac:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80075b0:	681b      	ldr	r3, [r3, #0]
 80075b2:	781b      	ldrb	r3, [r3, #0]
 80075b4:	009b      	lsls	r3, r3, #2
 80075b6:	441a      	add	r2, r3
 80075b8:	897b      	ldrh	r3, [r7, #10]
 80075ba:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80075be:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80075c2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80075c6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80075ca:	b29b      	uxth	r3, r3
 80075cc:	8013      	strh	r3, [r2, #0]
 80075ce:	f000 bcde 	b.w	8007f8e <USB_EPStartXfer+0x1756>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 80075d2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80075d6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80075da:	681b      	ldr	r3, [r3, #0]
 80075dc:	7b1b      	ldrb	r3, [r3, #12]
 80075de:	2b00      	cmp	r3, #0
 80075e0:	f040 80bb 	bne.w	800775a <USB_EPStartXfer+0xf22>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 80075e4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80075e8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80075ec:	681b      	ldr	r3, [r3, #0]
 80075ee:	699a      	ldr	r2, [r3, #24]
 80075f0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80075f4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80075f8:	681b      	ldr	r3, [r3, #0]
 80075fa:	691b      	ldr	r3, [r3, #16]
 80075fc:	429a      	cmp	r2, r3
 80075fe:	d917      	bls.n	8007630 <USB_EPStartXfer+0xdf8>
      {
        len = ep->maxpacket;
 8007600:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007604:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007608:	681b      	ldr	r3, [r3, #0]
 800760a:	691b      	ldr	r3, [r3, #16]
 800760c:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
        ep->xfer_len -= len;
 8007610:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007614:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007618:	681b      	ldr	r3, [r3, #0]
 800761a:	699a      	ldr	r2, [r3, #24]
 800761c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007620:	1ad2      	subs	r2, r2, r3
 8007622:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007626:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800762a:	681b      	ldr	r3, [r3, #0]
 800762c:	619a      	str	r2, [r3, #24]
 800762e:	e00e      	b.n	800764e <USB_EPStartXfer+0xe16>
      }
      else
      {
        len = ep->xfer_len;
 8007630:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007634:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007638:	681b      	ldr	r3, [r3, #0]
 800763a:	699b      	ldr	r3, [r3, #24]
 800763c:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
        ep->xfer_len = 0U;
 8007640:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007644:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007648:	681b      	ldr	r3, [r3, #0]
 800764a:	2200      	movs	r2, #0
 800764c:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 800764e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007652:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007656:	681b      	ldr	r3, [r3, #0]
 8007658:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800765c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007660:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007664:	681b      	ldr	r3, [r3, #0]
 8007666:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800766a:	b29b      	uxth	r3, r3
 800766c:	461a      	mov	r2, r3
 800766e:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8007672:	4413      	add	r3, r2
 8007674:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8007678:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800767c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007680:	681b      	ldr	r3, [r3, #0]
 8007682:	781b      	ldrb	r3, [r3, #0]
 8007684:	011a      	lsls	r2, r3, #4
 8007686:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800768a:	4413      	add	r3, r2
 800768c:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8007690:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8007694:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007698:	881b      	ldrh	r3, [r3, #0]
 800769a:	b29b      	uxth	r3, r3
 800769c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80076a0:	b29a      	uxth	r2, r3
 80076a2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80076a6:	801a      	strh	r2, [r3, #0]
 80076a8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80076ac:	2b3e      	cmp	r3, #62	@ 0x3e
 80076ae:	d924      	bls.n	80076fa <USB_EPStartXfer+0xec2>
 80076b0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80076b4:	095b      	lsrs	r3, r3, #5
 80076b6:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80076ba:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80076be:	f003 031f 	and.w	r3, r3, #31
 80076c2:	2b00      	cmp	r3, #0
 80076c4:	d104      	bne.n	80076d0 <USB_EPStartXfer+0xe98>
 80076c6:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 80076ca:	3b01      	subs	r3, #1
 80076cc:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80076d0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80076d4:	881b      	ldrh	r3, [r3, #0]
 80076d6:	b29a      	uxth	r2, r3
 80076d8:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 80076dc:	b29b      	uxth	r3, r3
 80076de:	029b      	lsls	r3, r3, #10
 80076e0:	b29b      	uxth	r3, r3
 80076e2:	4313      	orrs	r3, r2
 80076e4:	b29b      	uxth	r3, r3
 80076e6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80076ea:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80076ee:	b29a      	uxth	r2, r3
 80076f0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80076f4:	801a      	strh	r2, [r3, #0]
 80076f6:	f000 bc10 	b.w	8007f1a <USB_EPStartXfer+0x16e2>
 80076fa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80076fe:	2b00      	cmp	r3, #0
 8007700:	d10c      	bne.n	800771c <USB_EPStartXfer+0xee4>
 8007702:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007706:	881b      	ldrh	r3, [r3, #0]
 8007708:	b29b      	uxth	r3, r3
 800770a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800770e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007712:	b29a      	uxth	r2, r3
 8007714:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007718:	801a      	strh	r2, [r3, #0]
 800771a:	e3fe      	b.n	8007f1a <USB_EPStartXfer+0x16e2>
 800771c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007720:	085b      	lsrs	r3, r3, #1
 8007722:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8007726:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800772a:	f003 0301 	and.w	r3, r3, #1
 800772e:	2b00      	cmp	r3, #0
 8007730:	d004      	beq.n	800773c <USB_EPStartXfer+0xf04>
 8007732:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8007736:	3301      	adds	r3, #1
 8007738:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800773c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007740:	881b      	ldrh	r3, [r3, #0]
 8007742:	b29a      	uxth	r2, r3
 8007744:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8007748:	b29b      	uxth	r3, r3
 800774a:	029b      	lsls	r3, r3, #10
 800774c:	b29b      	uxth	r3, r3
 800774e:	4313      	orrs	r3, r2
 8007750:	b29a      	uxth	r2, r3
 8007752:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007756:	801a      	strh	r2, [r3, #0]
 8007758:	e3df      	b.n	8007f1a <USB_EPStartXfer+0x16e2>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 800775a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800775e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007762:	681b      	ldr	r3, [r3, #0]
 8007764:	78db      	ldrb	r3, [r3, #3]
 8007766:	2b02      	cmp	r3, #2
 8007768:	f040 8218 	bne.w	8007b9c <USB_EPStartXfer+0x1364>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 800776c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007770:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007774:	681b      	ldr	r3, [r3, #0]
 8007776:	785b      	ldrb	r3, [r3, #1]
 8007778:	2b00      	cmp	r3, #0
 800777a:	f040 809d 	bne.w	80078b8 <USB_EPStartXfer+0x1080>
 800777e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007782:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007786:	681b      	ldr	r3, [r3, #0]
 8007788:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800778c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007790:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007794:	681b      	ldr	r3, [r3, #0]
 8007796:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800779a:	b29b      	uxth	r3, r3
 800779c:	461a      	mov	r2, r3
 800779e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80077a2:	4413      	add	r3, r2
 80077a4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80077a8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80077ac:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80077b0:	681b      	ldr	r3, [r3, #0]
 80077b2:	781b      	ldrb	r3, [r3, #0]
 80077b4:	011a      	lsls	r2, r3, #4
 80077b6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80077ba:	4413      	add	r3, r2
 80077bc:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80077c0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80077c4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80077c8:	881b      	ldrh	r3, [r3, #0]
 80077ca:	b29b      	uxth	r3, r3
 80077cc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80077d0:	b29a      	uxth	r2, r3
 80077d2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80077d6:	801a      	strh	r2, [r3, #0]
 80077d8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80077dc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80077e0:	681b      	ldr	r3, [r3, #0]
 80077e2:	691b      	ldr	r3, [r3, #16]
 80077e4:	2b3e      	cmp	r3, #62	@ 0x3e
 80077e6:	d92b      	bls.n	8007840 <USB_EPStartXfer+0x1008>
 80077e8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80077ec:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80077f0:	681b      	ldr	r3, [r3, #0]
 80077f2:	691b      	ldr	r3, [r3, #16]
 80077f4:	095b      	lsrs	r3, r3, #5
 80077f6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80077fa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80077fe:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007802:	681b      	ldr	r3, [r3, #0]
 8007804:	691b      	ldr	r3, [r3, #16]
 8007806:	f003 031f 	and.w	r3, r3, #31
 800780a:	2b00      	cmp	r3, #0
 800780c:	d104      	bne.n	8007818 <USB_EPStartXfer+0xfe0>
 800780e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007812:	3b01      	subs	r3, #1
 8007814:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8007818:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800781c:	881b      	ldrh	r3, [r3, #0]
 800781e:	b29a      	uxth	r2, r3
 8007820:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007824:	b29b      	uxth	r3, r3
 8007826:	029b      	lsls	r3, r3, #10
 8007828:	b29b      	uxth	r3, r3
 800782a:	4313      	orrs	r3, r2
 800782c:	b29b      	uxth	r3, r3
 800782e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007832:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007836:	b29a      	uxth	r2, r3
 8007838:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800783c:	801a      	strh	r2, [r3, #0]
 800783e:	e070      	b.n	8007922 <USB_EPStartXfer+0x10ea>
 8007840:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007844:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007848:	681b      	ldr	r3, [r3, #0]
 800784a:	691b      	ldr	r3, [r3, #16]
 800784c:	2b00      	cmp	r3, #0
 800784e:	d10c      	bne.n	800786a <USB_EPStartXfer+0x1032>
 8007850:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8007854:	881b      	ldrh	r3, [r3, #0]
 8007856:	b29b      	uxth	r3, r3
 8007858:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800785c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007860:	b29a      	uxth	r2, r3
 8007862:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8007866:	801a      	strh	r2, [r3, #0]
 8007868:	e05b      	b.n	8007922 <USB_EPStartXfer+0x10ea>
 800786a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800786e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007872:	681b      	ldr	r3, [r3, #0]
 8007874:	691b      	ldr	r3, [r3, #16]
 8007876:	085b      	lsrs	r3, r3, #1
 8007878:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800787c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007880:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007884:	681b      	ldr	r3, [r3, #0]
 8007886:	691b      	ldr	r3, [r3, #16]
 8007888:	f003 0301 	and.w	r3, r3, #1
 800788c:	2b00      	cmp	r3, #0
 800788e:	d004      	beq.n	800789a <USB_EPStartXfer+0x1062>
 8007890:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007894:	3301      	adds	r3, #1
 8007896:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800789a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800789e:	881b      	ldrh	r3, [r3, #0]
 80078a0:	b29a      	uxth	r2, r3
 80078a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80078a6:	b29b      	uxth	r3, r3
 80078a8:	029b      	lsls	r3, r3, #10
 80078aa:	b29b      	uxth	r3, r3
 80078ac:	4313      	orrs	r3, r2
 80078ae:	b29a      	uxth	r2, r3
 80078b0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80078b4:	801a      	strh	r2, [r3, #0]
 80078b6:	e034      	b.n	8007922 <USB_EPStartXfer+0x10ea>
 80078b8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80078bc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80078c0:	681b      	ldr	r3, [r3, #0]
 80078c2:	785b      	ldrb	r3, [r3, #1]
 80078c4:	2b01      	cmp	r3, #1
 80078c6:	d12c      	bne.n	8007922 <USB_EPStartXfer+0x10ea>
 80078c8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80078cc:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80078d0:	681b      	ldr	r3, [r3, #0]
 80078d2:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80078d6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80078da:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80078de:	681b      	ldr	r3, [r3, #0]
 80078e0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80078e4:	b29b      	uxth	r3, r3
 80078e6:	461a      	mov	r2, r3
 80078e8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80078ec:	4413      	add	r3, r2
 80078ee:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80078f2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80078f6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80078fa:	681b      	ldr	r3, [r3, #0]
 80078fc:	781b      	ldrb	r3, [r3, #0]
 80078fe:	011a      	lsls	r2, r3, #4
 8007900:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8007904:	4413      	add	r3, r2
 8007906:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800790a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800790e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007912:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007916:	681b      	ldr	r3, [r3, #0]
 8007918:	691b      	ldr	r3, [r3, #16]
 800791a:	b29a      	uxth	r2, r3
 800791c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8007920:	801a      	strh	r2, [r3, #0]
 8007922:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007926:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800792a:	681b      	ldr	r3, [r3, #0]
 800792c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8007930:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007934:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007938:	681b      	ldr	r3, [r3, #0]
 800793a:	785b      	ldrb	r3, [r3, #1]
 800793c:	2b00      	cmp	r3, #0
 800793e:	f040 809d 	bne.w	8007a7c <USB_EPStartXfer+0x1244>
 8007942:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007946:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800794a:	681b      	ldr	r3, [r3, #0]
 800794c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8007950:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007954:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007958:	681b      	ldr	r3, [r3, #0]
 800795a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800795e:	b29b      	uxth	r3, r3
 8007960:	461a      	mov	r2, r3
 8007962:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8007966:	4413      	add	r3, r2
 8007968:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800796c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007970:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007974:	681b      	ldr	r3, [r3, #0]
 8007976:	781b      	ldrb	r3, [r3, #0]
 8007978:	011a      	lsls	r2, r3, #4
 800797a:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800797e:	4413      	add	r3, r2
 8007980:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8007984:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8007988:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800798c:	881b      	ldrh	r3, [r3, #0]
 800798e:	b29b      	uxth	r3, r3
 8007990:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007994:	b29a      	uxth	r2, r3
 8007996:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800799a:	801a      	strh	r2, [r3, #0]
 800799c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80079a0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80079a4:	681b      	ldr	r3, [r3, #0]
 80079a6:	691b      	ldr	r3, [r3, #16]
 80079a8:	2b3e      	cmp	r3, #62	@ 0x3e
 80079aa:	d92b      	bls.n	8007a04 <USB_EPStartXfer+0x11cc>
 80079ac:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80079b0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80079b4:	681b      	ldr	r3, [r3, #0]
 80079b6:	691b      	ldr	r3, [r3, #16]
 80079b8:	095b      	lsrs	r3, r3, #5
 80079ba:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80079be:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80079c2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80079c6:	681b      	ldr	r3, [r3, #0]
 80079c8:	691b      	ldr	r3, [r3, #16]
 80079ca:	f003 031f 	and.w	r3, r3, #31
 80079ce:	2b00      	cmp	r3, #0
 80079d0:	d104      	bne.n	80079dc <USB_EPStartXfer+0x11a4>
 80079d2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80079d6:	3b01      	subs	r3, #1
 80079d8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80079dc:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80079e0:	881b      	ldrh	r3, [r3, #0]
 80079e2:	b29a      	uxth	r2, r3
 80079e4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80079e8:	b29b      	uxth	r3, r3
 80079ea:	029b      	lsls	r3, r3, #10
 80079ec:	b29b      	uxth	r3, r3
 80079ee:	4313      	orrs	r3, r2
 80079f0:	b29b      	uxth	r3, r3
 80079f2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80079f6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80079fa:	b29a      	uxth	r2, r3
 80079fc:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8007a00:	801a      	strh	r2, [r3, #0]
 8007a02:	e069      	b.n	8007ad8 <USB_EPStartXfer+0x12a0>
 8007a04:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007a08:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007a0c:	681b      	ldr	r3, [r3, #0]
 8007a0e:	691b      	ldr	r3, [r3, #16]
 8007a10:	2b00      	cmp	r3, #0
 8007a12:	d10c      	bne.n	8007a2e <USB_EPStartXfer+0x11f6>
 8007a14:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8007a18:	881b      	ldrh	r3, [r3, #0]
 8007a1a:	b29b      	uxth	r3, r3
 8007a1c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007a20:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007a24:	b29a      	uxth	r2, r3
 8007a26:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8007a2a:	801a      	strh	r2, [r3, #0]
 8007a2c:	e054      	b.n	8007ad8 <USB_EPStartXfer+0x12a0>
 8007a2e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007a32:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007a36:	681b      	ldr	r3, [r3, #0]
 8007a38:	691b      	ldr	r3, [r3, #16]
 8007a3a:	085b      	lsrs	r3, r3, #1
 8007a3c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8007a40:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007a44:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007a48:	681b      	ldr	r3, [r3, #0]
 8007a4a:	691b      	ldr	r3, [r3, #16]
 8007a4c:	f003 0301 	and.w	r3, r3, #1
 8007a50:	2b00      	cmp	r3, #0
 8007a52:	d004      	beq.n	8007a5e <USB_EPStartXfer+0x1226>
 8007a54:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007a58:	3301      	adds	r3, #1
 8007a5a:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8007a5e:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8007a62:	881b      	ldrh	r3, [r3, #0]
 8007a64:	b29a      	uxth	r2, r3
 8007a66:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007a6a:	b29b      	uxth	r3, r3
 8007a6c:	029b      	lsls	r3, r3, #10
 8007a6e:	b29b      	uxth	r3, r3
 8007a70:	4313      	orrs	r3, r2
 8007a72:	b29a      	uxth	r2, r3
 8007a74:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8007a78:	801a      	strh	r2, [r3, #0]
 8007a7a:	e02d      	b.n	8007ad8 <USB_EPStartXfer+0x12a0>
 8007a7c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007a80:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007a84:	681b      	ldr	r3, [r3, #0]
 8007a86:	785b      	ldrb	r3, [r3, #1]
 8007a88:	2b01      	cmp	r3, #1
 8007a8a:	d125      	bne.n	8007ad8 <USB_EPStartXfer+0x12a0>
 8007a8c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007a90:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007a94:	681b      	ldr	r3, [r3, #0]
 8007a96:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007a9a:	b29b      	uxth	r3, r3
 8007a9c:	461a      	mov	r2, r3
 8007a9e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8007aa2:	4413      	add	r3, r2
 8007aa4:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8007aa8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007aac:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007ab0:	681b      	ldr	r3, [r3, #0]
 8007ab2:	781b      	ldrb	r3, [r3, #0]
 8007ab4:	011a      	lsls	r2, r3, #4
 8007ab6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8007aba:	4413      	add	r3, r2
 8007abc:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8007ac0:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8007ac4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007ac8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007acc:	681b      	ldr	r3, [r3, #0]
 8007ace:	691b      	ldr	r3, [r3, #16]
 8007ad0:	b29a      	uxth	r2, r3
 8007ad2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8007ad6:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8007ad8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007adc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007ae0:	681b      	ldr	r3, [r3, #0]
 8007ae2:	69db      	ldr	r3, [r3, #28]
 8007ae4:	2b00      	cmp	r3, #0
 8007ae6:	f000 8218 	beq.w	8007f1a <USB_EPStartXfer+0x16e2>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8007aea:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007aee:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007af2:	681a      	ldr	r2, [r3, #0]
 8007af4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007af8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007afc:	681b      	ldr	r3, [r3, #0]
 8007afe:	781b      	ldrb	r3, [r3, #0]
 8007b00:	009b      	lsls	r3, r3, #2
 8007b02:	4413      	add	r3, r2
 8007b04:	881b      	ldrh	r3, [r3, #0]
 8007b06:	f8a7 3096 	strh.w	r3, [r7, #150]	@ 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8007b0a:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8007b0e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007b12:	2b00      	cmp	r3, #0
 8007b14:	d005      	beq.n	8007b22 <USB_EPStartXfer+0x12ea>
 8007b16:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8007b1a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007b1e:	2b00      	cmp	r3, #0
 8007b20:	d10d      	bne.n	8007b3e <USB_EPStartXfer+0x1306>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8007b22:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8007b26:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8007b2a:	2b00      	cmp	r3, #0
 8007b2c:	f040 81f5 	bne.w	8007f1a <USB_EPStartXfer+0x16e2>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8007b30:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8007b34:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007b38:	2b00      	cmp	r3, #0
 8007b3a:	f040 81ee 	bne.w	8007f1a <USB_EPStartXfer+0x16e2>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 8007b3e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007b42:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007b46:	681a      	ldr	r2, [r3, #0]
 8007b48:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007b4c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007b50:	681b      	ldr	r3, [r3, #0]
 8007b52:	781b      	ldrb	r3, [r3, #0]
 8007b54:	009b      	lsls	r3, r3, #2
 8007b56:	4413      	add	r3, r2
 8007b58:	881b      	ldrh	r3, [r3, #0]
 8007b5a:	b29b      	uxth	r3, r3
 8007b5c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007b60:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007b64:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
 8007b68:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007b6c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007b70:	681a      	ldr	r2, [r3, #0]
 8007b72:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007b76:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007b7a:	681b      	ldr	r3, [r3, #0]
 8007b7c:	781b      	ldrb	r3, [r3, #0]
 8007b7e:	009b      	lsls	r3, r3, #2
 8007b80:	441a      	add	r2, r3
 8007b82:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 8007b86:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007b8a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007b8e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007b92:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8007b96:	b29b      	uxth	r3, r3
 8007b98:	8013      	strh	r3, [r2, #0]
 8007b9a:	e1be      	b.n	8007f1a <USB_EPStartXfer+0x16e2>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8007b9c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007ba0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007ba4:	681b      	ldr	r3, [r3, #0]
 8007ba6:	78db      	ldrb	r3, [r3, #3]
 8007ba8:	2b01      	cmp	r3, #1
 8007baa:	f040 81b4 	bne.w	8007f16 <USB_EPStartXfer+0x16de>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 8007bae:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007bb2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007bb6:	681b      	ldr	r3, [r3, #0]
 8007bb8:	699a      	ldr	r2, [r3, #24]
 8007bba:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007bbe:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007bc2:	681b      	ldr	r3, [r3, #0]
 8007bc4:	691b      	ldr	r3, [r3, #16]
 8007bc6:	429a      	cmp	r2, r3
 8007bc8:	d917      	bls.n	8007bfa <USB_EPStartXfer+0x13c2>
        {
          len = ep->maxpacket;
 8007bca:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007bce:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007bd2:	681b      	ldr	r3, [r3, #0]
 8007bd4:	691b      	ldr	r3, [r3, #16]
 8007bd6:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
          ep->xfer_len -= len;
 8007bda:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007bde:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007be2:	681b      	ldr	r3, [r3, #0]
 8007be4:	699a      	ldr	r2, [r3, #24]
 8007be6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007bea:	1ad2      	subs	r2, r2, r3
 8007bec:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007bf0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007bf4:	681b      	ldr	r3, [r3, #0]
 8007bf6:	619a      	str	r2, [r3, #24]
 8007bf8:	e00e      	b.n	8007c18 <USB_EPStartXfer+0x13e0>
        }
        else
        {
          len = ep->xfer_len;
 8007bfa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007bfe:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007c02:	681b      	ldr	r3, [r3, #0]
 8007c04:	699b      	ldr	r3, [r3, #24]
 8007c06:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
          ep->xfer_len = 0U;
 8007c0a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007c0e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007c12:	681b      	ldr	r3, [r3, #0]
 8007c14:	2200      	movs	r2, #0
 8007c16:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8007c18:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007c1c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007c20:	681b      	ldr	r3, [r3, #0]
 8007c22:	785b      	ldrb	r3, [r3, #1]
 8007c24:	2b00      	cmp	r3, #0
 8007c26:	f040 8085 	bne.w	8007d34 <USB_EPStartXfer+0x14fc>
 8007c2a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007c2e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007c32:	681b      	ldr	r3, [r3, #0]
 8007c34:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8007c38:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007c3c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007c40:	681b      	ldr	r3, [r3, #0]
 8007c42:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007c46:	b29b      	uxth	r3, r3
 8007c48:	461a      	mov	r2, r3
 8007c4a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8007c4e:	4413      	add	r3, r2
 8007c50:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8007c54:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007c58:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007c5c:	681b      	ldr	r3, [r3, #0]
 8007c5e:	781b      	ldrb	r3, [r3, #0]
 8007c60:	011a      	lsls	r2, r3, #4
 8007c62:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8007c66:	4413      	add	r3, r2
 8007c68:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8007c6c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8007c70:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8007c74:	881b      	ldrh	r3, [r3, #0]
 8007c76:	b29b      	uxth	r3, r3
 8007c78:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007c7c:	b29a      	uxth	r2, r3
 8007c7e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8007c82:	801a      	strh	r2, [r3, #0]
 8007c84:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007c88:	2b3e      	cmp	r3, #62	@ 0x3e
 8007c8a:	d923      	bls.n	8007cd4 <USB_EPStartXfer+0x149c>
 8007c8c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007c90:	095b      	lsrs	r3, r3, #5
 8007c92:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8007c96:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007c9a:	f003 031f 	and.w	r3, r3, #31
 8007c9e:	2b00      	cmp	r3, #0
 8007ca0:	d104      	bne.n	8007cac <USB_EPStartXfer+0x1474>
 8007ca2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007ca6:	3b01      	subs	r3, #1
 8007ca8:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8007cac:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8007cb0:	881b      	ldrh	r3, [r3, #0]
 8007cb2:	b29a      	uxth	r2, r3
 8007cb4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007cb8:	b29b      	uxth	r3, r3
 8007cba:	029b      	lsls	r3, r3, #10
 8007cbc:	b29b      	uxth	r3, r3
 8007cbe:	4313      	orrs	r3, r2
 8007cc0:	b29b      	uxth	r3, r3
 8007cc2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007cc6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007cca:	b29a      	uxth	r2, r3
 8007ccc:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8007cd0:	801a      	strh	r2, [r3, #0]
 8007cd2:	e060      	b.n	8007d96 <USB_EPStartXfer+0x155e>
 8007cd4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007cd8:	2b00      	cmp	r3, #0
 8007cda:	d10c      	bne.n	8007cf6 <USB_EPStartXfer+0x14be>
 8007cdc:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8007ce0:	881b      	ldrh	r3, [r3, #0]
 8007ce2:	b29b      	uxth	r3, r3
 8007ce4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007ce8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007cec:	b29a      	uxth	r2, r3
 8007cee:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8007cf2:	801a      	strh	r2, [r3, #0]
 8007cf4:	e04f      	b.n	8007d96 <USB_EPStartXfer+0x155e>
 8007cf6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007cfa:	085b      	lsrs	r3, r3, #1
 8007cfc:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8007d00:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007d04:	f003 0301 	and.w	r3, r3, #1
 8007d08:	2b00      	cmp	r3, #0
 8007d0a:	d004      	beq.n	8007d16 <USB_EPStartXfer+0x14de>
 8007d0c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007d10:	3301      	adds	r3, #1
 8007d12:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8007d16:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8007d1a:	881b      	ldrh	r3, [r3, #0]
 8007d1c:	b29a      	uxth	r2, r3
 8007d1e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007d22:	b29b      	uxth	r3, r3
 8007d24:	029b      	lsls	r3, r3, #10
 8007d26:	b29b      	uxth	r3, r3
 8007d28:	4313      	orrs	r3, r2
 8007d2a:	b29a      	uxth	r2, r3
 8007d2c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8007d30:	801a      	strh	r2, [r3, #0]
 8007d32:	e030      	b.n	8007d96 <USB_EPStartXfer+0x155e>
 8007d34:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007d38:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007d3c:	681b      	ldr	r3, [r3, #0]
 8007d3e:	785b      	ldrb	r3, [r3, #1]
 8007d40:	2b01      	cmp	r3, #1
 8007d42:	d128      	bne.n	8007d96 <USB_EPStartXfer+0x155e>
 8007d44:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007d48:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007d4c:	681b      	ldr	r3, [r3, #0]
 8007d4e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8007d52:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007d56:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007d5a:	681b      	ldr	r3, [r3, #0]
 8007d5c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007d60:	b29b      	uxth	r3, r3
 8007d62:	461a      	mov	r2, r3
 8007d64:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007d68:	4413      	add	r3, r2
 8007d6a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8007d6e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007d72:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007d76:	681b      	ldr	r3, [r3, #0]
 8007d78:	781b      	ldrb	r3, [r3, #0]
 8007d7a:	011a      	lsls	r2, r3, #4
 8007d7c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007d80:	4413      	add	r3, r2
 8007d82:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8007d86:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8007d8a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007d8e:	b29a      	uxth	r2, r3
 8007d90:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8007d94:	801a      	strh	r2, [r3, #0]
 8007d96:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007d9a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007d9e:	681b      	ldr	r3, [r3, #0]
 8007da0:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8007da4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007da8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007dac:	681b      	ldr	r3, [r3, #0]
 8007dae:	785b      	ldrb	r3, [r3, #1]
 8007db0:	2b00      	cmp	r3, #0
 8007db2:	f040 8085 	bne.w	8007ec0 <USB_EPStartXfer+0x1688>
 8007db6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007dba:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007dbe:	681b      	ldr	r3, [r3, #0]
 8007dc0:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8007dc4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007dc8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007dcc:	681b      	ldr	r3, [r3, #0]
 8007dce:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007dd2:	b29b      	uxth	r3, r3
 8007dd4:	461a      	mov	r2, r3
 8007dd6:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8007dda:	4413      	add	r3, r2
 8007ddc:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8007de0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007de4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007de8:	681b      	ldr	r3, [r3, #0]
 8007dea:	781b      	ldrb	r3, [r3, #0]
 8007dec:	011a      	lsls	r2, r3, #4
 8007dee:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8007df2:	4413      	add	r3, r2
 8007df4:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8007df8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8007dfc:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8007e00:	881b      	ldrh	r3, [r3, #0]
 8007e02:	b29b      	uxth	r3, r3
 8007e04:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007e08:	b29a      	uxth	r2, r3
 8007e0a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8007e0e:	801a      	strh	r2, [r3, #0]
 8007e10:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007e14:	2b3e      	cmp	r3, #62	@ 0x3e
 8007e16:	d923      	bls.n	8007e60 <USB_EPStartXfer+0x1628>
 8007e18:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007e1c:	095b      	lsrs	r3, r3, #5
 8007e1e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8007e22:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007e26:	f003 031f 	and.w	r3, r3, #31
 8007e2a:	2b00      	cmp	r3, #0
 8007e2c:	d104      	bne.n	8007e38 <USB_EPStartXfer+0x1600>
 8007e2e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8007e32:	3b01      	subs	r3, #1
 8007e34:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8007e38:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8007e3c:	881b      	ldrh	r3, [r3, #0]
 8007e3e:	b29a      	uxth	r2, r3
 8007e40:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8007e44:	b29b      	uxth	r3, r3
 8007e46:	029b      	lsls	r3, r3, #10
 8007e48:	b29b      	uxth	r3, r3
 8007e4a:	4313      	orrs	r3, r2
 8007e4c:	b29b      	uxth	r3, r3
 8007e4e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007e52:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007e56:	b29a      	uxth	r2, r3
 8007e58:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8007e5c:	801a      	strh	r2, [r3, #0]
 8007e5e:	e05c      	b.n	8007f1a <USB_EPStartXfer+0x16e2>
 8007e60:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007e64:	2b00      	cmp	r3, #0
 8007e66:	d10c      	bne.n	8007e82 <USB_EPStartXfer+0x164a>
 8007e68:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8007e6c:	881b      	ldrh	r3, [r3, #0]
 8007e6e:	b29b      	uxth	r3, r3
 8007e70:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007e74:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007e78:	b29a      	uxth	r2, r3
 8007e7a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8007e7e:	801a      	strh	r2, [r3, #0]
 8007e80:	e04b      	b.n	8007f1a <USB_EPStartXfer+0x16e2>
 8007e82:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007e86:	085b      	lsrs	r3, r3, #1
 8007e88:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8007e8c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007e90:	f003 0301 	and.w	r3, r3, #1
 8007e94:	2b00      	cmp	r3, #0
 8007e96:	d004      	beq.n	8007ea2 <USB_EPStartXfer+0x166a>
 8007e98:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8007e9c:	3301      	adds	r3, #1
 8007e9e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8007ea2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8007ea6:	881b      	ldrh	r3, [r3, #0]
 8007ea8:	b29a      	uxth	r2, r3
 8007eaa:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8007eae:	b29b      	uxth	r3, r3
 8007eb0:	029b      	lsls	r3, r3, #10
 8007eb2:	b29b      	uxth	r3, r3
 8007eb4:	4313      	orrs	r3, r2
 8007eb6:	b29a      	uxth	r2, r3
 8007eb8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8007ebc:	801a      	strh	r2, [r3, #0]
 8007ebe:	e02c      	b.n	8007f1a <USB_EPStartXfer+0x16e2>
 8007ec0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007ec4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007ec8:	681b      	ldr	r3, [r3, #0]
 8007eca:	785b      	ldrb	r3, [r3, #1]
 8007ecc:	2b01      	cmp	r3, #1
 8007ece:	d124      	bne.n	8007f1a <USB_EPStartXfer+0x16e2>
 8007ed0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007ed4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007ed8:	681b      	ldr	r3, [r3, #0]
 8007eda:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007ede:	b29b      	uxth	r3, r3
 8007ee0:	461a      	mov	r2, r3
 8007ee2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8007ee6:	4413      	add	r3, r2
 8007ee8:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8007eec:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007ef0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007ef4:	681b      	ldr	r3, [r3, #0]
 8007ef6:	781b      	ldrb	r3, [r3, #0]
 8007ef8:	011a      	lsls	r2, r3, #4
 8007efa:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8007efe:	4413      	add	r3, r2
 8007f00:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8007f04:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8007f08:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007f0c:	b29a      	uxth	r2, r3
 8007f0e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8007f12:	801a      	strh	r2, [r3, #0]
 8007f14:	e001      	b.n	8007f1a <USB_EPStartXfer+0x16e2>
      }
      else
      {
        return HAL_ERROR;
 8007f16:	2301      	movs	r3, #1
 8007f18:	e03a      	b.n	8007f90 <USB_EPStartXfer+0x1758>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8007f1a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007f1e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007f22:	681a      	ldr	r2, [r3, #0]
 8007f24:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007f28:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007f2c:	681b      	ldr	r3, [r3, #0]
 8007f2e:	781b      	ldrb	r3, [r3, #0]
 8007f30:	009b      	lsls	r3, r3, #2
 8007f32:	4413      	add	r3, r2
 8007f34:	881b      	ldrh	r3, [r3, #0]
 8007f36:	b29b      	uxth	r3, r3
 8007f38:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8007f3c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007f40:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8007f44:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8007f48:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8007f4c:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8007f50:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8007f54:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8007f58:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8007f5c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007f60:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007f64:	681a      	ldr	r2, [r3, #0]
 8007f66:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007f6a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007f6e:	681b      	ldr	r3, [r3, #0]
 8007f70:	781b      	ldrb	r3, [r3, #0]
 8007f72:	009b      	lsls	r3, r3, #2
 8007f74:	441a      	add	r2, r3
 8007f76:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8007f7a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007f7e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007f82:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007f86:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007f8a:	b29b      	uxth	r3, r3
 8007f8c:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8007f8e:	2300      	movs	r3, #0
}
 8007f90:	4618      	mov	r0, r3
 8007f92:	f507 7784 	add.w	r7, r7, #264	@ 0x108
 8007f96:	46bd      	mov	sp, r7
 8007f98:	bd80      	pop	{r7, pc}

08007f9a <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8007f9a:	b480      	push	{r7}
 8007f9c:	b085      	sub	sp, #20
 8007f9e:	af00      	add	r7, sp, #0
 8007fa0:	6078      	str	r0, [r7, #4]
 8007fa2:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8007fa4:	683b      	ldr	r3, [r7, #0]
 8007fa6:	785b      	ldrb	r3, [r3, #1]
 8007fa8:	2b00      	cmp	r3, #0
 8007faa:	d020      	beq.n	8007fee <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8007fac:	687a      	ldr	r2, [r7, #4]
 8007fae:	683b      	ldr	r3, [r7, #0]
 8007fb0:	781b      	ldrb	r3, [r3, #0]
 8007fb2:	009b      	lsls	r3, r3, #2
 8007fb4:	4413      	add	r3, r2
 8007fb6:	881b      	ldrh	r3, [r3, #0]
 8007fb8:	b29b      	uxth	r3, r3
 8007fba:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007fbe:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007fc2:	81bb      	strh	r3, [r7, #12]
 8007fc4:	89bb      	ldrh	r3, [r7, #12]
 8007fc6:	f083 0310 	eor.w	r3, r3, #16
 8007fca:	81bb      	strh	r3, [r7, #12]
 8007fcc:	687a      	ldr	r2, [r7, #4]
 8007fce:	683b      	ldr	r3, [r7, #0]
 8007fd0:	781b      	ldrb	r3, [r3, #0]
 8007fd2:	009b      	lsls	r3, r3, #2
 8007fd4:	441a      	add	r2, r3
 8007fd6:	89bb      	ldrh	r3, [r7, #12]
 8007fd8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007fdc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007fe0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007fe4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007fe8:	b29b      	uxth	r3, r3
 8007fea:	8013      	strh	r3, [r2, #0]
 8007fec:	e01f      	b.n	800802e <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8007fee:	687a      	ldr	r2, [r7, #4]
 8007ff0:	683b      	ldr	r3, [r7, #0]
 8007ff2:	781b      	ldrb	r3, [r3, #0]
 8007ff4:	009b      	lsls	r3, r3, #2
 8007ff6:	4413      	add	r3, r2
 8007ff8:	881b      	ldrh	r3, [r3, #0]
 8007ffa:	b29b      	uxth	r3, r3
 8007ffc:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8008000:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008004:	81fb      	strh	r3, [r7, #14]
 8008006:	89fb      	ldrh	r3, [r7, #14]
 8008008:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800800c:	81fb      	strh	r3, [r7, #14]
 800800e:	687a      	ldr	r2, [r7, #4]
 8008010:	683b      	ldr	r3, [r7, #0]
 8008012:	781b      	ldrb	r3, [r3, #0]
 8008014:	009b      	lsls	r3, r3, #2
 8008016:	441a      	add	r2, r3
 8008018:	89fb      	ldrh	r3, [r7, #14]
 800801a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800801e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008022:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008026:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800802a:	b29b      	uxth	r3, r3
 800802c:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800802e:	2300      	movs	r3, #0
}
 8008030:	4618      	mov	r0, r3
 8008032:	3714      	adds	r7, #20
 8008034:	46bd      	mov	sp, r7
 8008036:	bc80      	pop	{r7}
 8008038:	4770      	bx	lr

0800803a <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800803a:	b480      	push	{r7}
 800803c:	b087      	sub	sp, #28
 800803e:	af00      	add	r7, sp, #0
 8008040:	6078      	str	r0, [r7, #4]
 8008042:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8008044:	683b      	ldr	r3, [r7, #0]
 8008046:	7b1b      	ldrb	r3, [r3, #12]
 8008048:	2b00      	cmp	r3, #0
 800804a:	f040 809d 	bne.w	8008188 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 800804e:	683b      	ldr	r3, [r7, #0]
 8008050:	785b      	ldrb	r3, [r3, #1]
 8008052:	2b00      	cmp	r3, #0
 8008054:	d04c      	beq.n	80080f0 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8008056:	687a      	ldr	r2, [r7, #4]
 8008058:	683b      	ldr	r3, [r7, #0]
 800805a:	781b      	ldrb	r3, [r3, #0]
 800805c:	009b      	lsls	r3, r3, #2
 800805e:	4413      	add	r3, r2
 8008060:	881b      	ldrh	r3, [r3, #0]
 8008062:	823b      	strh	r3, [r7, #16]
 8008064:	8a3b      	ldrh	r3, [r7, #16]
 8008066:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800806a:	2b00      	cmp	r3, #0
 800806c:	d01b      	beq.n	80080a6 <USB_EPClearStall+0x6c>
 800806e:	687a      	ldr	r2, [r7, #4]
 8008070:	683b      	ldr	r3, [r7, #0]
 8008072:	781b      	ldrb	r3, [r3, #0]
 8008074:	009b      	lsls	r3, r3, #2
 8008076:	4413      	add	r3, r2
 8008078:	881b      	ldrh	r3, [r3, #0]
 800807a:	b29b      	uxth	r3, r3
 800807c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008080:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008084:	81fb      	strh	r3, [r7, #14]
 8008086:	687a      	ldr	r2, [r7, #4]
 8008088:	683b      	ldr	r3, [r7, #0]
 800808a:	781b      	ldrb	r3, [r3, #0]
 800808c:	009b      	lsls	r3, r3, #2
 800808e:	441a      	add	r2, r3
 8008090:	89fb      	ldrh	r3, [r7, #14]
 8008092:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008096:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800809a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800809e:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80080a2:	b29b      	uxth	r3, r3
 80080a4:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80080a6:	683b      	ldr	r3, [r7, #0]
 80080a8:	78db      	ldrb	r3, [r3, #3]
 80080aa:	2b01      	cmp	r3, #1
 80080ac:	d06c      	beq.n	8008188 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80080ae:	687a      	ldr	r2, [r7, #4]
 80080b0:	683b      	ldr	r3, [r7, #0]
 80080b2:	781b      	ldrb	r3, [r3, #0]
 80080b4:	009b      	lsls	r3, r3, #2
 80080b6:	4413      	add	r3, r2
 80080b8:	881b      	ldrh	r3, [r3, #0]
 80080ba:	b29b      	uxth	r3, r3
 80080bc:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80080c0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80080c4:	81bb      	strh	r3, [r7, #12]
 80080c6:	89bb      	ldrh	r3, [r7, #12]
 80080c8:	f083 0320 	eor.w	r3, r3, #32
 80080cc:	81bb      	strh	r3, [r7, #12]
 80080ce:	687a      	ldr	r2, [r7, #4]
 80080d0:	683b      	ldr	r3, [r7, #0]
 80080d2:	781b      	ldrb	r3, [r3, #0]
 80080d4:	009b      	lsls	r3, r3, #2
 80080d6:	441a      	add	r2, r3
 80080d8:	89bb      	ldrh	r3, [r7, #12]
 80080da:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80080de:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80080e2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80080e6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80080ea:	b29b      	uxth	r3, r3
 80080ec:	8013      	strh	r3, [r2, #0]
 80080ee:	e04b      	b.n	8008188 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80080f0:	687a      	ldr	r2, [r7, #4]
 80080f2:	683b      	ldr	r3, [r7, #0]
 80080f4:	781b      	ldrb	r3, [r3, #0]
 80080f6:	009b      	lsls	r3, r3, #2
 80080f8:	4413      	add	r3, r2
 80080fa:	881b      	ldrh	r3, [r3, #0]
 80080fc:	82fb      	strh	r3, [r7, #22]
 80080fe:	8afb      	ldrh	r3, [r7, #22]
 8008100:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8008104:	2b00      	cmp	r3, #0
 8008106:	d01b      	beq.n	8008140 <USB_EPClearStall+0x106>
 8008108:	687a      	ldr	r2, [r7, #4]
 800810a:	683b      	ldr	r3, [r7, #0]
 800810c:	781b      	ldrb	r3, [r3, #0]
 800810e:	009b      	lsls	r3, r3, #2
 8008110:	4413      	add	r3, r2
 8008112:	881b      	ldrh	r3, [r3, #0]
 8008114:	b29b      	uxth	r3, r3
 8008116:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800811a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800811e:	82bb      	strh	r3, [r7, #20]
 8008120:	687a      	ldr	r2, [r7, #4]
 8008122:	683b      	ldr	r3, [r7, #0]
 8008124:	781b      	ldrb	r3, [r3, #0]
 8008126:	009b      	lsls	r3, r3, #2
 8008128:	441a      	add	r2, r3
 800812a:	8abb      	ldrh	r3, [r7, #20]
 800812c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008130:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008134:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8008138:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800813c:	b29b      	uxth	r3, r3
 800813e:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8008140:	687a      	ldr	r2, [r7, #4]
 8008142:	683b      	ldr	r3, [r7, #0]
 8008144:	781b      	ldrb	r3, [r3, #0]
 8008146:	009b      	lsls	r3, r3, #2
 8008148:	4413      	add	r3, r2
 800814a:	881b      	ldrh	r3, [r3, #0]
 800814c:	b29b      	uxth	r3, r3
 800814e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8008152:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008156:	827b      	strh	r3, [r7, #18]
 8008158:	8a7b      	ldrh	r3, [r7, #18]
 800815a:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800815e:	827b      	strh	r3, [r7, #18]
 8008160:	8a7b      	ldrh	r3, [r7, #18]
 8008162:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8008166:	827b      	strh	r3, [r7, #18]
 8008168:	687a      	ldr	r2, [r7, #4]
 800816a:	683b      	ldr	r3, [r7, #0]
 800816c:	781b      	ldrb	r3, [r3, #0]
 800816e:	009b      	lsls	r3, r3, #2
 8008170:	441a      	add	r2, r3
 8008172:	8a7b      	ldrh	r3, [r7, #18]
 8008174:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008178:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800817c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008180:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008184:	b29b      	uxth	r3, r3
 8008186:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8008188:	2300      	movs	r3, #0
}
 800818a:	4618      	mov	r0, r3
 800818c:	371c      	adds	r7, #28
 800818e:	46bd      	mov	sp, r7
 8008190:	bc80      	pop	{r7}
 8008192:	4770      	bx	lr

08008194 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8008194:	b480      	push	{r7}
 8008196:	b083      	sub	sp, #12
 8008198:	af00      	add	r7, sp, #0
 800819a:	6078      	str	r0, [r7, #4]
 800819c:	460b      	mov	r3, r1
 800819e:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 80081a0:	78fb      	ldrb	r3, [r7, #3]
 80081a2:	2b00      	cmp	r3, #0
 80081a4:	d103      	bne.n	80081ae <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	2280      	movs	r2, #128	@ 0x80
 80081aa:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 80081ae:	2300      	movs	r3, #0
}
 80081b0:	4618      	mov	r0, r3
 80081b2:	370c      	adds	r7, #12
 80081b4:	46bd      	mov	sp, r7
 80081b6:	bc80      	pop	{r7}
 80081b8:	4770      	bx	lr

080081ba <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 80081ba:	b480      	push	{r7}
 80081bc:	b083      	sub	sp, #12
 80081be:	af00      	add	r7, sp, #0
 80081c0:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 80081c2:	2300      	movs	r3, #0
}
 80081c4:	4618      	mov	r0, r3
 80081c6:	370c      	adds	r7, #12
 80081c8:	46bd      	mov	sp, r7
 80081ca:	bc80      	pop	{r7}
 80081cc:	4770      	bx	lr

080081ce <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 80081ce:	b480      	push	{r7}
 80081d0:	b083      	sub	sp, #12
 80081d2:	af00      	add	r7, sp, #0
 80081d4:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 80081d6:	2300      	movs	r3, #0
}
 80081d8:	4618      	mov	r0, r3
 80081da:	370c      	adds	r7, #12
 80081dc:	46bd      	mov	sp, r7
 80081de:	bc80      	pop	{r7}
 80081e0:	4770      	bx	lr

080081e2 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
 80081e2:	b480      	push	{r7}
 80081e4:	b085      	sub	sp, #20
 80081e6:	af00      	add	r7, sp, #0
 80081e8:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80081f0:	b29b      	uxth	r3, r3
 80081f2:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 80081f4:	68fb      	ldr	r3, [r7, #12]
}
 80081f6:	4618      	mov	r0, r3
 80081f8:	3714      	adds	r7, #20
 80081fa:	46bd      	mov	sp, r7
 80081fc:	bc80      	pop	{r7}
 80081fe:	4770      	bx	lr

08008200 <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 8008200:	b480      	push	{r7}
 8008202:	b083      	sub	sp, #12
 8008204:	af00      	add	r7, sp, #0
 8008206:	6078      	str	r0, [r7, #4]
 8008208:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 800820a:	2300      	movs	r3, #0
}
 800820c:	4618      	mov	r0, r3
 800820e:	370c      	adds	r7, #12
 8008210:	46bd      	mov	sp, r7
 8008212:	bc80      	pop	{r7}
 8008214:	4770      	bx	lr

08008216 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8008216:	b480      	push	{r7}
 8008218:	b08b      	sub	sp, #44	@ 0x2c
 800821a:	af00      	add	r7, sp, #0
 800821c:	60f8      	str	r0, [r7, #12]
 800821e:	60b9      	str	r1, [r7, #8]
 8008220:	4611      	mov	r1, r2
 8008222:	461a      	mov	r2, r3
 8008224:	460b      	mov	r3, r1
 8008226:	80fb      	strh	r3, [r7, #6]
 8008228:	4613      	mov	r3, r2
 800822a:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800822c:	88bb      	ldrh	r3, [r7, #4]
 800822e:	3301      	adds	r3, #1
 8008230:	085b      	lsrs	r3, r3, #1
 8008232:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8008234:	68fb      	ldr	r3, [r7, #12]
 8008236:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8008238:	68bb      	ldr	r3, [r7, #8]
 800823a:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800823c:	88fb      	ldrh	r3, [r7, #6]
 800823e:	005a      	lsls	r2, r3, #1
 8008240:	697b      	ldr	r3, [r7, #20]
 8008242:	4413      	add	r3, r2
 8008244:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8008248:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 800824a:	69bb      	ldr	r3, [r7, #24]
 800824c:	627b      	str	r3, [r7, #36]	@ 0x24
 800824e:	e01e      	b.n	800828e <USB_WritePMA+0x78>
  {
    WrVal = pBuf[0];
 8008250:	69fb      	ldr	r3, [r7, #28]
 8008252:	781b      	ldrb	r3, [r3, #0]
 8008254:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 8008256:	69fb      	ldr	r3, [r7, #28]
 8008258:	3301      	adds	r3, #1
 800825a:	781b      	ldrb	r3, [r3, #0]
 800825c:	021b      	lsls	r3, r3, #8
 800825e:	b21a      	sxth	r2, r3
 8008260:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8008264:	4313      	orrs	r3, r2
 8008266:	b21b      	sxth	r3, r3
 8008268:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 800826a:	6a3b      	ldr	r3, [r7, #32]
 800826c:	8a7a      	ldrh	r2, [r7, #18]
 800826e:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8008270:	6a3b      	ldr	r3, [r7, #32]
 8008272:	3302      	adds	r3, #2
 8008274:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
 8008276:	6a3b      	ldr	r3, [r7, #32]
 8008278:	3302      	adds	r3, #2
 800827a:	623b      	str	r3, [r7, #32]
#endif /* PMA_ACCESS */

    pBuf++;
 800827c:	69fb      	ldr	r3, [r7, #28]
 800827e:	3301      	adds	r3, #1
 8008280:	61fb      	str	r3, [r7, #28]
    pBuf++;
 8008282:	69fb      	ldr	r3, [r7, #28]
 8008284:	3301      	adds	r3, #1
 8008286:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 8008288:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800828a:	3b01      	subs	r3, #1
 800828c:	627b      	str	r3, [r7, #36]	@ 0x24
 800828e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008290:	2b00      	cmp	r3, #0
 8008292:	d1dd      	bne.n	8008250 <USB_WritePMA+0x3a>
  }
}
 8008294:	bf00      	nop
 8008296:	bf00      	nop
 8008298:	372c      	adds	r7, #44	@ 0x2c
 800829a:	46bd      	mov	sp, r7
 800829c:	bc80      	pop	{r7}
 800829e:	4770      	bx	lr

080082a0 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 80082a0:	b480      	push	{r7}
 80082a2:	b08b      	sub	sp, #44	@ 0x2c
 80082a4:	af00      	add	r7, sp, #0
 80082a6:	60f8      	str	r0, [r7, #12]
 80082a8:	60b9      	str	r1, [r7, #8]
 80082aa:	4611      	mov	r1, r2
 80082ac:	461a      	mov	r2, r3
 80082ae:	460b      	mov	r3, r1
 80082b0:	80fb      	strh	r3, [r7, #6]
 80082b2:	4613      	mov	r3, r2
 80082b4:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 80082b6:	88bb      	ldrh	r3, [r7, #4]
 80082b8:	085b      	lsrs	r3, r3, #1
 80082ba:	b29b      	uxth	r3, r3
 80082bc:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 80082be:	68fb      	ldr	r3, [r7, #12]
 80082c0:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 80082c2:	68bb      	ldr	r3, [r7, #8]
 80082c4:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80082c6:	88fb      	ldrh	r3, [r7, #6]
 80082c8:	005a      	lsls	r2, r3, #1
 80082ca:	697b      	ldr	r3, [r7, #20]
 80082cc:	4413      	add	r3, r2
 80082ce:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80082d2:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 80082d4:	69bb      	ldr	r3, [r7, #24]
 80082d6:	627b      	str	r3, [r7, #36]	@ 0x24
 80082d8:	e01b      	b.n	8008312 <USB_ReadPMA+0x72>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 80082da:	6a3b      	ldr	r3, [r7, #32]
 80082dc:	881b      	ldrh	r3, [r3, #0]
 80082de:	b29b      	uxth	r3, r3
 80082e0:	613b      	str	r3, [r7, #16]
    pdwVal++;
 80082e2:	6a3b      	ldr	r3, [r7, #32]
 80082e4:	3302      	adds	r3, #2
 80082e6:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 80082e8:	693b      	ldr	r3, [r7, #16]
 80082ea:	b2da      	uxtb	r2, r3
 80082ec:	69fb      	ldr	r3, [r7, #28]
 80082ee:	701a      	strb	r2, [r3, #0]
    pBuf++;
 80082f0:	69fb      	ldr	r3, [r7, #28]
 80082f2:	3301      	adds	r3, #1
 80082f4:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 80082f6:	693b      	ldr	r3, [r7, #16]
 80082f8:	0a1b      	lsrs	r3, r3, #8
 80082fa:	b2da      	uxtb	r2, r3
 80082fc:	69fb      	ldr	r3, [r7, #28]
 80082fe:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8008300:	69fb      	ldr	r3, [r7, #28]
 8008302:	3301      	adds	r3, #1
 8008304:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 8008306:	6a3b      	ldr	r3, [r7, #32]
 8008308:	3302      	adds	r3, #2
 800830a:	623b      	str	r3, [r7, #32]
  for (count = n; count != 0U; count--)
 800830c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800830e:	3b01      	subs	r3, #1
 8008310:	627b      	str	r3, [r7, #36]	@ 0x24
 8008312:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008314:	2b00      	cmp	r3, #0
 8008316:	d1e0      	bne.n	80082da <USB_ReadPMA+0x3a>
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 8008318:	88bb      	ldrh	r3, [r7, #4]
 800831a:	f003 0301 	and.w	r3, r3, #1
 800831e:	b29b      	uxth	r3, r3
 8008320:	2b00      	cmp	r3, #0
 8008322:	d007      	beq.n	8008334 <USB_ReadPMA+0x94>
  {
    RdVal = *pdwVal;
 8008324:	6a3b      	ldr	r3, [r7, #32]
 8008326:	881b      	ldrh	r3, [r3, #0]
 8008328:	b29b      	uxth	r3, r3
 800832a:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 800832c:	693b      	ldr	r3, [r7, #16]
 800832e:	b2da      	uxtb	r2, r3
 8008330:	69fb      	ldr	r3, [r7, #28]
 8008332:	701a      	strb	r2, [r3, #0]
  }
}
 8008334:	bf00      	nop
 8008336:	372c      	adds	r7, #44	@ 0x2c
 8008338:	46bd      	mov	sp, r7
 800833a:	bc80      	pop	{r7}
 800833c:	4770      	bx	lr

0800833e <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800833e:	b580      	push	{r7, lr}
 8008340:	b084      	sub	sp, #16
 8008342:	af00      	add	r7, sp, #0
 8008344:	6078      	str	r0, [r7, #4]
 8008346:	460b      	mov	r3, r1
 8008348:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 800834a:	2300      	movs	r3, #0
 800834c:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	7c1b      	ldrb	r3, [r3, #16]
 8008352:	2b00      	cmp	r3, #0
 8008354:	d115      	bne.n	8008382 <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8008356:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800835a:	2202      	movs	r2, #2
 800835c:	2181      	movs	r1, #129	@ 0x81
 800835e:	6878      	ldr	r0, [r7, #4]
 8008360:	f001 fe8f 	bl	800a082 <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	2201      	movs	r2, #1
 8008368:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800836a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800836e:	2202      	movs	r2, #2
 8008370:	2101      	movs	r1, #1
 8008372:	6878      	ldr	r0, [r7, #4]
 8008374:	f001 fe85 	bl	800a082 <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	2201      	movs	r2, #1
 800837c:	f8c3 216c 	str.w	r2, [r3, #364]	@ 0x16c
 8008380:	e012      	b.n	80083a8 <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8008382:	2340      	movs	r3, #64	@ 0x40
 8008384:	2202      	movs	r2, #2
 8008386:	2181      	movs	r1, #129	@ 0x81
 8008388:	6878      	ldr	r0, [r7, #4]
 800838a:	f001 fe7a 	bl	800a082 <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	2201      	movs	r2, #1
 8008392:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8008394:	2340      	movs	r3, #64	@ 0x40
 8008396:	2202      	movs	r2, #2
 8008398:	2101      	movs	r1, #1
 800839a:	6878      	ldr	r0, [r7, #4]
 800839c:	f001 fe71 	bl	800a082 <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	2201      	movs	r2, #1
 80083a4:	f8c3 216c 	str.w	r2, [r3, #364]	@ 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80083a8:	2308      	movs	r3, #8
 80083aa:	2203      	movs	r2, #3
 80083ac:	2182      	movs	r1, #130	@ 0x82
 80083ae:	6878      	ldr	r0, [r7, #4]
 80083b0:	f001 fe67 	bl	800a082 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	2201      	movs	r2, #1
 80083b8:	641a      	str	r2, [r3, #64]	@ 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 80083ba:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 80083be:	f001 ff87 	bl	800a2d0 <USBD_static_malloc>
 80083c2:	4602      	mov	r2, r0
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8

  if (pdev->pClassData == NULL)
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80083d0:	2b00      	cmp	r3, #0
 80083d2:	d102      	bne.n	80083da <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 80083d4:	2301      	movs	r3, #1
 80083d6:	73fb      	strb	r3, [r7, #15]
 80083d8:	e026      	b.n	8008428 <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80083e0:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 80083e8:	681b      	ldr	r3, [r3, #0]
 80083ea:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 80083ec:	68bb      	ldr	r3, [r7, #8]
 80083ee:	2200      	movs	r2, #0
 80083f0:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    hcdc->RxState = 0U;
 80083f4:	68bb      	ldr	r3, [r7, #8]
 80083f6:	2200      	movs	r2, #0
 80083f8:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	7c1b      	ldrb	r3, [r3, #16]
 8008400:	2b00      	cmp	r3, #0
 8008402:	d109      	bne.n	8008418 <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8008404:	68bb      	ldr	r3, [r7, #8]
 8008406:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800840a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800840e:	2101      	movs	r1, #1
 8008410:	6878      	ldr	r0, [r7, #4]
 8008412:	f001 ff26 	bl	800a262 <USBD_LL_PrepareReceive>
 8008416:	e007      	b.n	8008428 <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8008418:	68bb      	ldr	r3, [r7, #8]
 800841a:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800841e:	2340      	movs	r3, #64	@ 0x40
 8008420:	2101      	movs	r1, #1
 8008422:	6878      	ldr	r0, [r7, #4]
 8008424:	f001 ff1d 	bl	800a262 <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 8008428:	7bfb      	ldrb	r3, [r7, #15]
}
 800842a:	4618      	mov	r0, r3
 800842c:	3710      	adds	r7, #16
 800842e:	46bd      	mov	sp, r7
 8008430:	bd80      	pop	{r7, pc}

08008432 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008432:	b580      	push	{r7, lr}
 8008434:	b084      	sub	sp, #16
 8008436:	af00      	add	r7, sp, #0
 8008438:	6078      	str	r0, [r7, #4]
 800843a:	460b      	mov	r3, r1
 800843c:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 800843e:	2300      	movs	r3, #0
 8008440:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8008442:	2181      	movs	r1, #129	@ 0x81
 8008444:	6878      	ldr	r0, [r7, #4]
 8008446:	f001 fe42 	bl	800a0ce <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	2200      	movs	r2, #0
 800844e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8008450:	2101      	movs	r1, #1
 8008452:	6878      	ldr	r0, [r7, #4]
 8008454:	f001 fe3b 	bl	800a0ce <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	2200      	movs	r2, #0
 800845c:	f8c3 216c 	str.w	r2, [r3, #364]	@ 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8008460:	2182      	movs	r1, #130	@ 0x82
 8008462:	6878      	ldr	r0, [r7, #4]
 8008464:	f001 fe33 	bl	800a0ce <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	2200      	movs	r2, #0
 800846c:	641a      	str	r2, [r3, #64]	@ 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008474:	2b00      	cmp	r3, #0
 8008476:	d00e      	beq.n	8008496 <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800847e:	685b      	ldr	r3, [r3, #4]
 8008480:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008488:	4618      	mov	r0, r3
 800848a:	f001 ff2d 	bl	800a2e8 <USBD_static_free>
    pdev->pClassData = NULL;
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	2200      	movs	r2, #0
 8008492:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  }

  return ret;
 8008496:	7bfb      	ldrb	r3, [r7, #15]
}
 8008498:	4618      	mov	r0, r3
 800849a:	3710      	adds	r7, #16
 800849c:	46bd      	mov	sp, r7
 800849e:	bd80      	pop	{r7, pc}

080084a0 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 80084a0:	b580      	push	{r7, lr}
 80084a2:	b086      	sub	sp, #24
 80084a4:	af00      	add	r7, sp, #0
 80084a6:	6078      	str	r0, [r7, #4]
 80084a8:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80084b0:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 80084b2:	2300      	movs	r3, #0
 80084b4:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 80084b6:	2300      	movs	r3, #0
 80084b8:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 80084ba:	2300      	movs	r3, #0
 80084bc:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80084be:	683b      	ldr	r3, [r7, #0]
 80084c0:	781b      	ldrb	r3, [r3, #0]
 80084c2:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80084c6:	2b00      	cmp	r3, #0
 80084c8:	d039      	beq.n	800853e <USBD_CDC_Setup+0x9e>
 80084ca:	2b20      	cmp	r3, #32
 80084cc:	d17f      	bne.n	80085ce <USBD_CDC_Setup+0x12e>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 80084ce:	683b      	ldr	r3, [r7, #0]
 80084d0:	88db      	ldrh	r3, [r3, #6]
 80084d2:	2b00      	cmp	r3, #0
 80084d4:	d029      	beq.n	800852a <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 80084d6:	683b      	ldr	r3, [r7, #0]
 80084d8:	781b      	ldrb	r3, [r3, #0]
 80084da:	b25b      	sxtb	r3, r3
 80084dc:	2b00      	cmp	r3, #0
 80084de:	da11      	bge.n	8008504 <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 80084e6:	689b      	ldr	r3, [r3, #8]
 80084e8:	683a      	ldr	r2, [r7, #0]
 80084ea:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 80084ec:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80084ee:	683a      	ldr	r2, [r7, #0]
 80084f0:	88d2      	ldrh	r2, [r2, #6]
 80084f2:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 80084f4:	6939      	ldr	r1, [r7, #16]
 80084f6:	683b      	ldr	r3, [r7, #0]
 80084f8:	88db      	ldrh	r3, [r3, #6]
 80084fa:	461a      	mov	r2, r3
 80084fc:	6878      	ldr	r0, [r7, #4]
 80084fe:	f001 fa05 	bl	800990c <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 8008502:	e06b      	b.n	80085dc <USBD_CDC_Setup+0x13c>
          hcdc->CmdOpCode = req->bRequest;
 8008504:	683b      	ldr	r3, [r7, #0]
 8008506:	785a      	ldrb	r2, [r3, #1]
 8008508:	693b      	ldr	r3, [r7, #16]
 800850a:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 800850e:	683b      	ldr	r3, [r7, #0]
 8008510:	88db      	ldrh	r3, [r3, #6]
 8008512:	b2da      	uxtb	r2, r3
 8008514:	693b      	ldr	r3, [r7, #16]
 8008516:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 800851a:	6939      	ldr	r1, [r7, #16]
 800851c:	683b      	ldr	r3, [r7, #0]
 800851e:	88db      	ldrh	r3, [r3, #6]
 8008520:	461a      	mov	r2, r3
 8008522:	6878      	ldr	r0, [r7, #4]
 8008524:	f001 fa20 	bl	8009968 <USBD_CtlPrepareRx>
      break;
 8008528:	e058      	b.n	80085dc <USBD_CDC_Setup+0x13c>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8008530:	689b      	ldr	r3, [r3, #8]
 8008532:	683a      	ldr	r2, [r7, #0]
 8008534:	7850      	ldrb	r0, [r2, #1]
 8008536:	2200      	movs	r2, #0
 8008538:	6839      	ldr	r1, [r7, #0]
 800853a:	4798      	blx	r3
      break;
 800853c:	e04e      	b.n	80085dc <USBD_CDC_Setup+0x13c>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800853e:	683b      	ldr	r3, [r7, #0]
 8008540:	785b      	ldrb	r3, [r3, #1]
 8008542:	2b0b      	cmp	r3, #11
 8008544:	d02e      	beq.n	80085a4 <USBD_CDC_Setup+0x104>
 8008546:	2b0b      	cmp	r3, #11
 8008548:	dc38      	bgt.n	80085bc <USBD_CDC_Setup+0x11c>
 800854a:	2b00      	cmp	r3, #0
 800854c:	d002      	beq.n	8008554 <USBD_CDC_Setup+0xb4>
 800854e:	2b0a      	cmp	r3, #10
 8008550:	d014      	beq.n	800857c <USBD_CDC_Setup+0xdc>
 8008552:	e033      	b.n	80085bc <USBD_CDC_Setup+0x11c>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800855a:	2b03      	cmp	r3, #3
 800855c:	d107      	bne.n	800856e <USBD_CDC_Setup+0xce>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 800855e:	f107 030c 	add.w	r3, r7, #12
 8008562:	2202      	movs	r2, #2
 8008564:	4619      	mov	r1, r3
 8008566:	6878      	ldr	r0, [r7, #4]
 8008568:	f001 f9d0 	bl	800990c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800856c:	e02e      	b.n	80085cc <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 800856e:	6839      	ldr	r1, [r7, #0]
 8008570:	6878      	ldr	r0, [r7, #4]
 8008572:	f001 f961 	bl	8009838 <USBD_CtlError>
            ret = USBD_FAIL;
 8008576:	2302      	movs	r3, #2
 8008578:	75fb      	strb	r3, [r7, #23]
          break;
 800857a:	e027      	b.n	80085cc <USBD_CDC_Setup+0x12c>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008582:	2b03      	cmp	r3, #3
 8008584:	d107      	bne.n	8008596 <USBD_CDC_Setup+0xf6>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 8008586:	f107 030f 	add.w	r3, r7, #15
 800858a:	2201      	movs	r2, #1
 800858c:	4619      	mov	r1, r3
 800858e:	6878      	ldr	r0, [r7, #4]
 8008590:	f001 f9bc 	bl	800990c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8008594:	e01a      	b.n	80085cc <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 8008596:	6839      	ldr	r1, [r7, #0]
 8008598:	6878      	ldr	r0, [r7, #4]
 800859a:	f001 f94d 	bl	8009838 <USBD_CtlError>
            ret = USBD_FAIL;
 800859e:	2302      	movs	r3, #2
 80085a0:	75fb      	strb	r3, [r7, #23]
          break;
 80085a2:	e013      	b.n	80085cc <USBD_CDC_Setup+0x12c>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80085aa:	2b03      	cmp	r3, #3
 80085ac:	d00d      	beq.n	80085ca <USBD_CDC_Setup+0x12a>
          {
            USBD_CtlError(pdev, req);
 80085ae:	6839      	ldr	r1, [r7, #0]
 80085b0:	6878      	ldr	r0, [r7, #4]
 80085b2:	f001 f941 	bl	8009838 <USBD_CtlError>
            ret = USBD_FAIL;
 80085b6:	2302      	movs	r3, #2
 80085b8:	75fb      	strb	r3, [r7, #23]
          }
          break;
 80085ba:	e006      	b.n	80085ca <USBD_CDC_Setup+0x12a>

        default:
          USBD_CtlError(pdev, req);
 80085bc:	6839      	ldr	r1, [r7, #0]
 80085be:	6878      	ldr	r0, [r7, #4]
 80085c0:	f001 f93a 	bl	8009838 <USBD_CtlError>
          ret = USBD_FAIL;
 80085c4:	2302      	movs	r3, #2
 80085c6:	75fb      	strb	r3, [r7, #23]
          break;
 80085c8:	e000      	b.n	80085cc <USBD_CDC_Setup+0x12c>
          break;
 80085ca:	bf00      	nop
      }
      break;
 80085cc:	e006      	b.n	80085dc <USBD_CDC_Setup+0x13c>

    default:
      USBD_CtlError(pdev, req);
 80085ce:	6839      	ldr	r1, [r7, #0]
 80085d0:	6878      	ldr	r0, [r7, #4]
 80085d2:	f001 f931 	bl	8009838 <USBD_CtlError>
      ret = USBD_FAIL;
 80085d6:	2302      	movs	r3, #2
 80085d8:	75fb      	strb	r3, [r7, #23]
      break;
 80085da:	bf00      	nop
  }

  return ret;
 80085dc:	7dfb      	ldrb	r3, [r7, #23]
}
 80085de:	4618      	mov	r0, r3
 80085e0:	3718      	adds	r7, #24
 80085e2:	46bd      	mov	sp, r7
 80085e4:	bd80      	pop	{r7, pc}

080085e6 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80085e6:	b580      	push	{r7, lr}
 80085e8:	b084      	sub	sp, #16
 80085ea:	af00      	add	r7, sp, #0
 80085ec:	6078      	str	r0, [r7, #4]
 80085ee:	460b      	mov	r3, r1
 80085f0:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80085f8:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8008600:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008608:	2b00      	cmp	r3, #0
 800860a:	d03a      	beq.n	8008682 <USBD_CDC_DataIn+0x9c>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800860c:	78fa      	ldrb	r2, [r7, #3]
 800860e:	6879      	ldr	r1, [r7, #4]
 8008610:	4613      	mov	r3, r2
 8008612:	009b      	lsls	r3, r3, #2
 8008614:	4413      	add	r3, r2
 8008616:	009b      	lsls	r3, r3, #2
 8008618:	440b      	add	r3, r1
 800861a:	331c      	adds	r3, #28
 800861c:	681b      	ldr	r3, [r3, #0]
 800861e:	2b00      	cmp	r3, #0
 8008620:	d029      	beq.n	8008676 <USBD_CDC_DataIn+0x90>
 8008622:	78fa      	ldrb	r2, [r7, #3]
 8008624:	6879      	ldr	r1, [r7, #4]
 8008626:	4613      	mov	r3, r2
 8008628:	009b      	lsls	r3, r3, #2
 800862a:	4413      	add	r3, r2
 800862c:	009b      	lsls	r3, r3, #2
 800862e:	440b      	add	r3, r1
 8008630:	331c      	adds	r3, #28
 8008632:	681a      	ldr	r2, [r3, #0]
 8008634:	78f9      	ldrb	r1, [r7, #3]
 8008636:	68b8      	ldr	r0, [r7, #8]
 8008638:	460b      	mov	r3, r1
 800863a:	009b      	lsls	r3, r3, #2
 800863c:	440b      	add	r3, r1
 800863e:	00db      	lsls	r3, r3, #3
 8008640:	4403      	add	r3, r0
 8008642:	3320      	adds	r3, #32
 8008644:	681b      	ldr	r3, [r3, #0]
 8008646:	fbb2 f1f3 	udiv	r1, r2, r3
 800864a:	fb01 f303 	mul.w	r3, r1, r3
 800864e:	1ad3      	subs	r3, r2, r3
 8008650:	2b00      	cmp	r3, #0
 8008652:	d110      	bne.n	8008676 <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 8008654:	78fa      	ldrb	r2, [r7, #3]
 8008656:	6879      	ldr	r1, [r7, #4]
 8008658:	4613      	mov	r3, r2
 800865a:	009b      	lsls	r3, r3, #2
 800865c:	4413      	add	r3, r2
 800865e:	009b      	lsls	r3, r3, #2
 8008660:	440b      	add	r3, r1
 8008662:	331c      	adds	r3, #28
 8008664:	2200      	movs	r2, #0
 8008666:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8008668:	78f9      	ldrb	r1, [r7, #3]
 800866a:	2300      	movs	r3, #0
 800866c:	2200      	movs	r2, #0
 800866e:	6878      	ldr	r0, [r7, #4]
 8008670:	f001 fdd4 	bl	800a21c <USBD_LL_Transmit>
 8008674:	e003      	b.n	800867e <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 8008676:	68fb      	ldr	r3, [r7, #12]
 8008678:	2200      	movs	r2, #0
 800867a:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    }
    return USBD_OK;
 800867e:	2300      	movs	r3, #0
 8008680:	e000      	b.n	8008684 <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 8008682:	2302      	movs	r3, #2
  }
}
 8008684:	4618      	mov	r0, r3
 8008686:	3710      	adds	r7, #16
 8008688:	46bd      	mov	sp, r7
 800868a:	bd80      	pop	{r7, pc}

0800868c <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800868c:	b580      	push	{r7, lr}
 800868e:	b084      	sub	sp, #16
 8008690:	af00      	add	r7, sp, #0
 8008692:	6078      	str	r0, [r7, #4]
 8008694:	460b      	mov	r3, r1
 8008696:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800869e:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 80086a0:	78fb      	ldrb	r3, [r7, #3]
 80086a2:	4619      	mov	r1, r3
 80086a4:	6878      	ldr	r0, [r7, #4]
 80086a6:	f001 fdff 	bl	800a2a8 <USBD_LL_GetRxDataSize>
 80086aa:	4602      	mov	r2, r0
 80086ac:	68fb      	ldr	r3, [r7, #12]
 80086ae:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 80086b2:	687b      	ldr	r3, [r7, #4]
 80086b4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80086b8:	2b00      	cmp	r3, #0
 80086ba:	d00d      	beq.n	80086d8 <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 80086c2:	68db      	ldr	r3, [r3, #12]
 80086c4:	68fa      	ldr	r2, [r7, #12]
 80086c6:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 80086ca:	68fa      	ldr	r2, [r7, #12]
 80086cc:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 80086d0:	4611      	mov	r1, r2
 80086d2:	4798      	blx	r3

    return USBD_OK;
 80086d4:	2300      	movs	r3, #0
 80086d6:	e000      	b.n	80086da <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 80086d8:	2302      	movs	r3, #2
  }
}
 80086da:	4618      	mov	r0, r3
 80086dc:	3710      	adds	r7, #16
 80086de:	46bd      	mov	sp, r7
 80086e0:	bd80      	pop	{r7, pc}

080086e2 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 80086e2:	b580      	push	{r7, lr}
 80086e4:	b084      	sub	sp, #16
 80086e6:	af00      	add	r7, sp, #0
 80086e8:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80086f0:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 80086f8:	2b00      	cmp	r3, #0
 80086fa:	d014      	beq.n	8008726 <USBD_CDC_EP0_RxReady+0x44>
 80086fc:	68fb      	ldr	r3, [r7, #12]
 80086fe:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 8008702:	2bff      	cmp	r3, #255	@ 0xff
 8008704:	d00f      	beq.n	8008726 <USBD_CDC_EP0_RxReady+0x44>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8008706:	687b      	ldr	r3, [r7, #4]
 8008708:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800870c:	689b      	ldr	r3, [r3, #8]
 800870e:	68fa      	ldr	r2, [r7, #12]
 8008710:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 8008714:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8008716:	68fa      	ldr	r2, [r7, #12]
 8008718:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800871c:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800871e:	68fb      	ldr	r3, [r7, #12]
 8008720:	22ff      	movs	r2, #255	@ 0xff
 8008722:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200

  }
  return USBD_OK;
 8008726:	2300      	movs	r3, #0
}
 8008728:	4618      	mov	r0, r3
 800872a:	3710      	adds	r7, #16
 800872c:	46bd      	mov	sp, r7
 800872e:	bd80      	pop	{r7, pc}

08008730 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8008730:	b480      	push	{r7}
 8008732:	b083      	sub	sp, #12
 8008734:	af00      	add	r7, sp, #0
 8008736:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	2243      	movs	r2, #67	@ 0x43
 800873c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 800873e:	4b03      	ldr	r3, [pc, #12]	@ (800874c <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8008740:	4618      	mov	r0, r3
 8008742:	370c      	adds	r7, #12
 8008744:	46bd      	mov	sp, r7
 8008746:	bc80      	pop	{r7}
 8008748:	4770      	bx	lr
 800874a:	bf00      	nop
 800874c:	20000094 	.word	0x20000094

08008750 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8008750:	b480      	push	{r7}
 8008752:	b083      	sub	sp, #12
 8008754:	af00      	add	r7, sp, #0
 8008756:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	2243      	movs	r2, #67	@ 0x43
 800875c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 800875e:	4b03      	ldr	r3, [pc, #12]	@ (800876c <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8008760:	4618      	mov	r0, r3
 8008762:	370c      	adds	r7, #12
 8008764:	46bd      	mov	sp, r7
 8008766:	bc80      	pop	{r7}
 8008768:	4770      	bx	lr
 800876a:	bf00      	nop
 800876c:	20000050 	.word	0x20000050

08008770 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8008770:	b480      	push	{r7}
 8008772:	b083      	sub	sp, #12
 8008774:	af00      	add	r7, sp, #0
 8008776:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	2243      	movs	r2, #67	@ 0x43
 800877c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 800877e:	4b03      	ldr	r3, [pc, #12]	@ (800878c <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8008780:	4618      	mov	r0, r3
 8008782:	370c      	adds	r7, #12
 8008784:	46bd      	mov	sp, r7
 8008786:	bc80      	pop	{r7}
 8008788:	4770      	bx	lr
 800878a:	bf00      	nop
 800878c:	200000d8 	.word	0x200000d8

08008790 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8008790:	b480      	push	{r7}
 8008792:	b083      	sub	sp, #12
 8008794:	af00      	add	r7, sp, #0
 8008796:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	220a      	movs	r2, #10
 800879c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 800879e:	4b03      	ldr	r3, [pc, #12]	@ (80087ac <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 80087a0:	4618      	mov	r0, r3
 80087a2:	370c      	adds	r7, #12
 80087a4:	46bd      	mov	sp, r7
 80087a6:	bc80      	pop	{r7}
 80087a8:	4770      	bx	lr
 80087aa:	bf00      	nop
 80087ac:	2000000c 	.word	0x2000000c

080087b0 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 80087b0:	b480      	push	{r7}
 80087b2:	b085      	sub	sp, #20
 80087b4:	af00      	add	r7, sp, #0
 80087b6:	6078      	str	r0, [r7, #4]
 80087b8:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 80087ba:	2302      	movs	r3, #2
 80087bc:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 80087be:	683b      	ldr	r3, [r7, #0]
 80087c0:	2b00      	cmp	r3, #0
 80087c2:	d005      	beq.n	80087d0 <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	683a      	ldr	r2, [r7, #0]
 80087c8:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
    ret = USBD_OK;
 80087cc:	2300      	movs	r3, #0
 80087ce:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 80087d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80087d2:	4618      	mov	r0, r3
 80087d4:	3714      	adds	r7, #20
 80087d6:	46bd      	mov	sp, r7
 80087d8:	bc80      	pop	{r7}
 80087da:	4770      	bx	lr

080087dc <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 80087dc:	b480      	push	{r7}
 80087de:	b087      	sub	sp, #28
 80087e0:	af00      	add	r7, sp, #0
 80087e2:	60f8      	str	r0, [r7, #12]
 80087e4:	60b9      	str	r1, [r7, #8]
 80087e6:	4613      	mov	r3, r2
 80087e8:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80087ea:	68fb      	ldr	r3, [r7, #12]
 80087ec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80087f0:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 80087f2:	697b      	ldr	r3, [r7, #20]
 80087f4:	68ba      	ldr	r2, [r7, #8]
 80087f6:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 80087fa:	88fa      	ldrh	r2, [r7, #6]
 80087fc:	697b      	ldr	r3, [r7, #20]
 80087fe:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return USBD_OK;
 8008802:	2300      	movs	r3, #0
}
 8008804:	4618      	mov	r0, r3
 8008806:	371c      	adds	r7, #28
 8008808:	46bd      	mov	sp, r7
 800880a:	bc80      	pop	{r7}
 800880c:	4770      	bx	lr

0800880e <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 800880e:	b480      	push	{r7}
 8008810:	b085      	sub	sp, #20
 8008812:	af00      	add	r7, sp, #0
 8008814:	6078      	str	r0, [r7, #4]
 8008816:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800881e:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 8008820:	68fb      	ldr	r3, [r7, #12]
 8008822:	683a      	ldr	r2, [r7, #0]
 8008824:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return USBD_OK;
 8008828:	2300      	movs	r3, #0
}
 800882a:	4618      	mov	r0, r3
 800882c:	3714      	adds	r7, #20
 800882e:	46bd      	mov	sp, r7
 8008830:	bc80      	pop	{r7}
 8008832:	4770      	bx	lr

08008834 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8008834:	b580      	push	{r7, lr}
 8008836:	b084      	sub	sp, #16
 8008838:	af00      	add	r7, sp, #0
 800883a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008842:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData != NULL)
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800884a:	2b00      	cmp	r3, #0
 800884c:	d01c      	beq.n	8008888 <USBD_CDC_TransmitPacket+0x54>
  {
    if (hcdc->TxState == 0U)
 800884e:	68fb      	ldr	r3, [r7, #12]
 8008850:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8008854:	2b00      	cmp	r3, #0
 8008856:	d115      	bne.n	8008884 <USBD_CDC_TransmitPacket+0x50>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 8008858:	68fb      	ldr	r3, [r7, #12]
 800885a:	2201      	movs	r2, #1
 800885c:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8008860:	68fb      	ldr	r3, [r7, #12]
 8008862:	f8d3 2210 	ldr.w	r2, [r3, #528]	@ 0x210
 8008866:	687b      	ldr	r3, [r7, #4]
 8008868:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 800886a:	68fb      	ldr	r3, [r7, #12]
 800886c:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
                       (uint16_t)hcdc->TxLength);
 8008870:	68fb      	ldr	r3, [r7, #12]
 8008872:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8008876:	b29b      	uxth	r3, r3
 8008878:	2181      	movs	r1, #129	@ 0x81
 800887a:	6878      	ldr	r0, [r7, #4]
 800887c:	f001 fcce 	bl	800a21c <USBD_LL_Transmit>

      return USBD_OK;
 8008880:	2300      	movs	r3, #0
 8008882:	e002      	b.n	800888a <USBD_CDC_TransmitPacket+0x56>
    }
    else
    {
      return USBD_BUSY;
 8008884:	2301      	movs	r3, #1
 8008886:	e000      	b.n	800888a <USBD_CDC_TransmitPacket+0x56>
    }
  }
  else
  {
    return USBD_FAIL;
 8008888:	2302      	movs	r3, #2
  }
}
 800888a:	4618      	mov	r0, r3
 800888c:	3710      	adds	r7, #16
 800888e:	46bd      	mov	sp, r7
 8008890:	bd80      	pop	{r7, pc}

08008892 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8008892:	b580      	push	{r7, lr}
 8008894:	b084      	sub	sp, #16
 8008896:	af00      	add	r7, sp, #0
 8008898:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800889a:	687b      	ldr	r3, [r7, #4]
 800889c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80088a0:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80088a8:	2b00      	cmp	r3, #0
 80088aa:	d017      	beq.n	80088dc <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	7c1b      	ldrb	r3, [r3, #16]
 80088b0:	2b00      	cmp	r3, #0
 80088b2:	d109      	bne.n	80088c8 <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 80088b4:	68fb      	ldr	r3, [r7, #12]
 80088b6:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80088ba:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80088be:	2101      	movs	r1, #1
 80088c0:	6878      	ldr	r0, [r7, #4]
 80088c2:	f001 fcce 	bl	800a262 <USBD_LL_PrepareReceive>
 80088c6:	e007      	b.n	80088d8 <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 80088c8:	68fb      	ldr	r3, [r7, #12]
 80088ca:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80088ce:	2340      	movs	r3, #64	@ 0x40
 80088d0:	2101      	movs	r1, #1
 80088d2:	6878      	ldr	r0, [r7, #4]
 80088d4:	f001 fcc5 	bl	800a262 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 80088d8:	2300      	movs	r3, #0
 80088da:	e000      	b.n	80088de <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 80088dc:	2302      	movs	r3, #2
  }
}
 80088de:	4618      	mov	r0, r3
 80088e0:	3710      	adds	r7, #16
 80088e2:	46bd      	mov	sp, r7
 80088e4:	bd80      	pop	{r7, pc}

080088e6 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80088e6:	b580      	push	{r7, lr}
 80088e8:	b084      	sub	sp, #16
 80088ea:	af00      	add	r7, sp, #0
 80088ec:	60f8      	str	r0, [r7, #12]
 80088ee:	60b9      	str	r1, [r7, #8]
 80088f0:	4613      	mov	r3, r2
 80088f2:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80088f4:	68fb      	ldr	r3, [r7, #12]
 80088f6:	2b00      	cmp	r3, #0
 80088f8:	d101      	bne.n	80088fe <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 80088fa:	2302      	movs	r3, #2
 80088fc:	e01a      	b.n	8008934 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 80088fe:	68fb      	ldr	r3, [r7, #12]
 8008900:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008904:	2b00      	cmp	r3, #0
 8008906:	d003      	beq.n	8008910 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8008908:	68fb      	ldr	r3, [r7, #12]
 800890a:	2200      	movs	r2, #0
 800890c:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8008910:	68bb      	ldr	r3, [r7, #8]
 8008912:	2b00      	cmp	r3, #0
 8008914:	d003      	beq.n	800891e <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 8008916:	68fb      	ldr	r3, [r7, #12]
 8008918:	68ba      	ldr	r2, [r7, #8]
 800891a:	f8c3 22b0 	str.w	r2, [r3, #688]	@ 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800891e:	68fb      	ldr	r3, [r7, #12]
 8008920:	2201      	movs	r2, #1
 8008922:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 8008926:	68fb      	ldr	r3, [r7, #12]
 8008928:	79fa      	ldrb	r2, [r7, #7]
 800892a:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 800892c:	68f8      	ldr	r0, [r7, #12]
 800892e:	f001 fb33 	bl	8009f98 <USBD_LL_Init>

  return USBD_OK;
 8008932:	2300      	movs	r3, #0
}
 8008934:	4618      	mov	r0, r3
 8008936:	3710      	adds	r7, #16
 8008938:	46bd      	mov	sp, r7
 800893a:	bd80      	pop	{r7, pc}

0800893c <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800893c:	b480      	push	{r7}
 800893e:	b085      	sub	sp, #20
 8008940:	af00      	add	r7, sp, #0
 8008942:	6078      	str	r0, [r7, #4]
 8008944:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 8008946:	2300      	movs	r3, #0
 8008948:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 800894a:	683b      	ldr	r3, [r7, #0]
 800894c:	2b00      	cmp	r3, #0
 800894e:	d006      	beq.n	800895e <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	683a      	ldr	r2, [r7, #0]
 8008954:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
    status = USBD_OK;
 8008958:	2300      	movs	r3, #0
 800895a:	73fb      	strb	r3, [r7, #15]
 800895c:	e001      	b.n	8008962 <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 800895e:	2302      	movs	r3, #2
 8008960:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8008962:	7bfb      	ldrb	r3, [r7, #15]
}
 8008964:	4618      	mov	r0, r3
 8008966:	3714      	adds	r7, #20
 8008968:	46bd      	mov	sp, r7
 800896a:	bc80      	pop	{r7}
 800896c:	4770      	bx	lr

0800896e <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 800896e:	b580      	push	{r7, lr}
 8008970:	b082      	sub	sp, #8
 8008972:	af00      	add	r7, sp, #0
 8008974:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8008976:	6878      	ldr	r0, [r7, #4]
 8008978:	f001 fb68 	bl	800a04c <USBD_LL_Start>

  return USBD_OK;
 800897c:	2300      	movs	r3, #0
}
 800897e:	4618      	mov	r0, r3
 8008980:	3708      	adds	r7, #8
 8008982:	46bd      	mov	sp, r7
 8008984:	bd80      	pop	{r7, pc}

08008986 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8008986:	b480      	push	{r7}
 8008988:	b083      	sub	sp, #12
 800898a:	af00      	add	r7, sp, #0
 800898c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800898e:	2300      	movs	r3, #0
}
 8008990:	4618      	mov	r0, r3
 8008992:	370c      	adds	r7, #12
 8008994:	46bd      	mov	sp, r7
 8008996:	bc80      	pop	{r7}
 8008998:	4770      	bx	lr

0800899a <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800899a:	b580      	push	{r7, lr}
 800899c:	b084      	sub	sp, #16
 800899e:	af00      	add	r7, sp, #0
 80089a0:	6078      	str	r0, [r7, #4]
 80089a2:	460b      	mov	r3, r1
 80089a4:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 80089a6:	2302      	movs	r3, #2
 80089a8:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80089b0:	2b00      	cmp	r3, #0
 80089b2:	d00c      	beq.n	80089ce <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80089ba:	681b      	ldr	r3, [r3, #0]
 80089bc:	78fa      	ldrb	r2, [r7, #3]
 80089be:	4611      	mov	r1, r2
 80089c0:	6878      	ldr	r0, [r7, #4]
 80089c2:	4798      	blx	r3
 80089c4:	4603      	mov	r3, r0
 80089c6:	2b00      	cmp	r3, #0
 80089c8:	d101      	bne.n	80089ce <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 80089ca:	2300      	movs	r3, #0
 80089cc:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 80089ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80089d0:	4618      	mov	r0, r3
 80089d2:	3710      	adds	r7, #16
 80089d4:	46bd      	mov	sp, r7
 80089d6:	bd80      	pop	{r7, pc}

080089d8 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 80089d8:	b580      	push	{r7, lr}
 80089da:	b082      	sub	sp, #8
 80089dc:	af00      	add	r7, sp, #0
 80089de:	6078      	str	r0, [r7, #4]
 80089e0:	460b      	mov	r3, r1
 80089e2:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80089ea:	685b      	ldr	r3, [r3, #4]
 80089ec:	78fa      	ldrb	r2, [r7, #3]
 80089ee:	4611      	mov	r1, r2
 80089f0:	6878      	ldr	r0, [r7, #4]
 80089f2:	4798      	blx	r3

  return USBD_OK;
 80089f4:	2300      	movs	r3, #0
}
 80089f6:	4618      	mov	r0, r3
 80089f8:	3708      	adds	r7, #8
 80089fa:	46bd      	mov	sp, r7
 80089fc:	bd80      	pop	{r7, pc}

080089fe <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80089fe:	b580      	push	{r7, lr}
 8008a00:	b082      	sub	sp, #8
 8008a02:	af00      	add	r7, sp, #0
 8008a04:	6078      	str	r0, [r7, #4]
 8008a06:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 8008a0e:	6839      	ldr	r1, [r7, #0]
 8008a10:	4618      	mov	r0, r3
 8008a12:	f000 fed8 	bl	80097c6 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8008a16:	687b      	ldr	r3, [r7, #4]
 8008a18:	2201      	movs	r2, #1
 8008a1a:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8008a1e:	687b      	ldr	r3, [r7, #4]
 8008a20:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8008a24:	461a      	mov	r2, r3
 8008a26:	687b      	ldr	r3, [r7, #4]
 8008a28:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 8008a32:	f003 031f 	and.w	r3, r3, #31
 8008a36:	2b02      	cmp	r3, #2
 8008a38:	d016      	beq.n	8008a68 <USBD_LL_SetupStage+0x6a>
 8008a3a:	2b02      	cmp	r3, #2
 8008a3c:	d81c      	bhi.n	8008a78 <USBD_LL_SetupStage+0x7a>
 8008a3e:	2b00      	cmp	r3, #0
 8008a40:	d002      	beq.n	8008a48 <USBD_LL_SetupStage+0x4a>
 8008a42:	2b01      	cmp	r3, #1
 8008a44:	d008      	beq.n	8008a58 <USBD_LL_SetupStage+0x5a>
 8008a46:	e017      	b.n	8008a78 <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 8008a4e:	4619      	mov	r1, r3
 8008a50:	6878      	ldr	r0, [r7, #4]
 8008a52:	f000 f9cb 	bl	8008dec <USBD_StdDevReq>
      break;
 8008a56:	e01a      	b.n	8008a8e <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 8008a5e:	4619      	mov	r1, r3
 8008a60:	6878      	ldr	r0, [r7, #4]
 8008a62:	f000 fa2d 	bl	8008ec0 <USBD_StdItfReq>
      break;
 8008a66:	e012      	b.n	8008a8e <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 8008a6e:	4619      	mov	r1, r3
 8008a70:	6878      	ldr	r0, [r7, #4]
 8008a72:	f000 fa6d 	bl	8008f50 <USBD_StdEPReq>
      break;
 8008a76:	e00a      	b.n	8008a8e <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 8008a7e:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8008a82:	b2db      	uxtb	r3, r3
 8008a84:	4619      	mov	r1, r3
 8008a86:	6878      	ldr	r0, [r7, #4]
 8008a88:	f001 fb40 	bl	800a10c <USBD_LL_StallEP>
      break;
 8008a8c:	bf00      	nop
  }

  return USBD_OK;
 8008a8e:	2300      	movs	r3, #0
}
 8008a90:	4618      	mov	r0, r3
 8008a92:	3708      	adds	r7, #8
 8008a94:	46bd      	mov	sp, r7
 8008a96:	bd80      	pop	{r7, pc}

08008a98 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8008a98:	b580      	push	{r7, lr}
 8008a9a:	b086      	sub	sp, #24
 8008a9c:	af00      	add	r7, sp, #0
 8008a9e:	60f8      	str	r0, [r7, #12]
 8008aa0:	460b      	mov	r3, r1
 8008aa2:	607a      	str	r2, [r7, #4]
 8008aa4:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8008aa6:	7afb      	ldrb	r3, [r7, #11]
 8008aa8:	2b00      	cmp	r3, #0
 8008aaa:	d14b      	bne.n	8008b44 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 8008aac:	68fb      	ldr	r3, [r7, #12]
 8008aae:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 8008ab2:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8008ab4:	68fb      	ldr	r3, [r7, #12]
 8008ab6:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8008aba:	2b03      	cmp	r3, #3
 8008abc:	d134      	bne.n	8008b28 <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 8008abe:	697b      	ldr	r3, [r7, #20]
 8008ac0:	68da      	ldr	r2, [r3, #12]
 8008ac2:	697b      	ldr	r3, [r7, #20]
 8008ac4:	691b      	ldr	r3, [r3, #16]
 8008ac6:	429a      	cmp	r2, r3
 8008ac8:	d919      	bls.n	8008afe <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 8008aca:	697b      	ldr	r3, [r7, #20]
 8008acc:	68da      	ldr	r2, [r3, #12]
 8008ace:	697b      	ldr	r3, [r7, #20]
 8008ad0:	691b      	ldr	r3, [r3, #16]
 8008ad2:	1ad2      	subs	r2, r2, r3
 8008ad4:	697b      	ldr	r3, [r7, #20]
 8008ad6:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8008ad8:	697b      	ldr	r3, [r7, #20]
 8008ada:	68da      	ldr	r2, [r3, #12]
 8008adc:	697b      	ldr	r3, [r7, #20]
 8008ade:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8008ae0:	429a      	cmp	r2, r3
 8008ae2:	d203      	bcs.n	8008aec <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8008ae4:	697b      	ldr	r3, [r7, #20]
 8008ae6:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 8008ae8:	b29b      	uxth	r3, r3
 8008aea:	e002      	b.n	8008af2 <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8008aec:	697b      	ldr	r3, [r7, #20]
 8008aee:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8008af0:	b29b      	uxth	r3, r3
 8008af2:	461a      	mov	r2, r3
 8008af4:	6879      	ldr	r1, [r7, #4]
 8008af6:	68f8      	ldr	r0, [r7, #12]
 8008af8:	f000 ff54 	bl	80099a4 <USBD_CtlContinueRx>
 8008afc:	e038      	b.n	8008b70 <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8008afe:	68fb      	ldr	r3, [r7, #12]
 8008b00:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008b04:	691b      	ldr	r3, [r3, #16]
 8008b06:	2b00      	cmp	r3, #0
 8008b08:	d00a      	beq.n	8008b20 <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8008b0a:	68fb      	ldr	r3, [r7, #12]
 8008b0c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8008b10:	2b03      	cmp	r3, #3
 8008b12:	d105      	bne.n	8008b20 <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8008b14:	68fb      	ldr	r3, [r7, #12]
 8008b16:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008b1a:	691b      	ldr	r3, [r3, #16]
 8008b1c:	68f8      	ldr	r0, [r7, #12]
 8008b1e:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8008b20:	68f8      	ldr	r0, [r7, #12]
 8008b22:	f000 ff51 	bl	80099c8 <USBD_CtlSendStatus>
 8008b26:	e023      	b.n	8008b70 <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8008b28:	68fb      	ldr	r3, [r7, #12]
 8008b2a:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8008b2e:	2b05      	cmp	r3, #5
 8008b30:	d11e      	bne.n	8008b70 <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 8008b32:	68fb      	ldr	r3, [r7, #12]
 8008b34:	2200      	movs	r2, #0
 8008b36:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
        USBD_LL_StallEP(pdev, 0U);
 8008b3a:	2100      	movs	r1, #0
 8008b3c:	68f8      	ldr	r0, [r7, #12]
 8008b3e:	f001 fae5 	bl	800a10c <USBD_LL_StallEP>
 8008b42:	e015      	b.n	8008b70 <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8008b44:	68fb      	ldr	r3, [r7, #12]
 8008b46:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008b4a:	699b      	ldr	r3, [r3, #24]
 8008b4c:	2b00      	cmp	r3, #0
 8008b4e:	d00d      	beq.n	8008b6c <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8008b50:	68fb      	ldr	r3, [r7, #12]
 8008b52:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 8008b56:	2b03      	cmp	r3, #3
 8008b58:	d108      	bne.n	8008b6c <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 8008b5a:	68fb      	ldr	r3, [r7, #12]
 8008b5c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008b60:	699b      	ldr	r3, [r3, #24]
 8008b62:	7afa      	ldrb	r2, [r7, #11]
 8008b64:	4611      	mov	r1, r2
 8008b66:	68f8      	ldr	r0, [r7, #12]
 8008b68:	4798      	blx	r3
 8008b6a:	e001      	b.n	8008b70 <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8008b6c:	2302      	movs	r3, #2
 8008b6e:	e000      	b.n	8008b72 <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 8008b70:	2300      	movs	r3, #0
}
 8008b72:	4618      	mov	r0, r3
 8008b74:	3718      	adds	r7, #24
 8008b76:	46bd      	mov	sp, r7
 8008b78:	bd80      	pop	{r7, pc}

08008b7a <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8008b7a:	b580      	push	{r7, lr}
 8008b7c:	b086      	sub	sp, #24
 8008b7e:	af00      	add	r7, sp, #0
 8008b80:	60f8      	str	r0, [r7, #12]
 8008b82:	460b      	mov	r3, r1
 8008b84:	607a      	str	r2, [r7, #4]
 8008b86:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8008b88:	7afb      	ldrb	r3, [r7, #11]
 8008b8a:	2b00      	cmp	r3, #0
 8008b8c:	d17f      	bne.n	8008c8e <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 8008b8e:	68fb      	ldr	r3, [r7, #12]
 8008b90:	3314      	adds	r3, #20
 8008b92:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8008b94:	68fb      	ldr	r3, [r7, #12]
 8008b96:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8008b9a:	2b02      	cmp	r3, #2
 8008b9c:	d15c      	bne.n	8008c58 <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 8008b9e:	697b      	ldr	r3, [r7, #20]
 8008ba0:	68da      	ldr	r2, [r3, #12]
 8008ba2:	697b      	ldr	r3, [r7, #20]
 8008ba4:	691b      	ldr	r3, [r3, #16]
 8008ba6:	429a      	cmp	r2, r3
 8008ba8:	d915      	bls.n	8008bd6 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 8008baa:	697b      	ldr	r3, [r7, #20]
 8008bac:	68da      	ldr	r2, [r3, #12]
 8008bae:	697b      	ldr	r3, [r7, #20]
 8008bb0:	691b      	ldr	r3, [r3, #16]
 8008bb2:	1ad2      	subs	r2, r2, r3
 8008bb4:	697b      	ldr	r3, [r7, #20]
 8008bb6:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 8008bb8:	697b      	ldr	r3, [r7, #20]
 8008bba:	68db      	ldr	r3, [r3, #12]
 8008bbc:	b29b      	uxth	r3, r3
 8008bbe:	461a      	mov	r2, r3
 8008bc0:	6879      	ldr	r1, [r7, #4]
 8008bc2:	68f8      	ldr	r0, [r7, #12]
 8008bc4:	f000 febe 	bl	8009944 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008bc8:	2300      	movs	r3, #0
 8008bca:	2200      	movs	r2, #0
 8008bcc:	2100      	movs	r1, #0
 8008bce:	68f8      	ldr	r0, [r7, #12]
 8008bd0:	f001 fb47 	bl	800a262 <USBD_LL_PrepareReceive>
 8008bd4:	e04e      	b.n	8008c74 <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8008bd6:	697b      	ldr	r3, [r7, #20]
 8008bd8:	689b      	ldr	r3, [r3, #8]
 8008bda:	697a      	ldr	r2, [r7, #20]
 8008bdc:	6912      	ldr	r2, [r2, #16]
 8008bde:	fbb3 f1f2 	udiv	r1, r3, r2
 8008be2:	fb01 f202 	mul.w	r2, r1, r2
 8008be6:	1a9b      	subs	r3, r3, r2
 8008be8:	2b00      	cmp	r3, #0
 8008bea:	d11c      	bne.n	8008c26 <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 8008bec:	697b      	ldr	r3, [r7, #20]
 8008bee:	689a      	ldr	r2, [r3, #8]
 8008bf0:	697b      	ldr	r3, [r7, #20]
 8008bf2:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8008bf4:	429a      	cmp	r2, r3
 8008bf6:	d316      	bcc.n	8008c26 <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 8008bf8:	697b      	ldr	r3, [r7, #20]
 8008bfa:	689a      	ldr	r2, [r3, #8]
 8008bfc:	68fb      	ldr	r3, [r7, #12]
 8008bfe:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 8008c02:	429a      	cmp	r2, r3
 8008c04:	d20f      	bcs.n	8008c26 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8008c06:	2200      	movs	r2, #0
 8008c08:	2100      	movs	r1, #0
 8008c0a:	68f8      	ldr	r0, [r7, #12]
 8008c0c:	f000 fe9a 	bl	8009944 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8008c10:	68fb      	ldr	r3, [r7, #12]
 8008c12:	2200      	movs	r2, #0
 8008c14:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008c18:	2300      	movs	r3, #0
 8008c1a:	2200      	movs	r2, #0
 8008c1c:	2100      	movs	r1, #0
 8008c1e:	68f8      	ldr	r0, [r7, #12]
 8008c20:	f001 fb1f 	bl	800a262 <USBD_LL_PrepareReceive>
 8008c24:	e026      	b.n	8008c74 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8008c26:	68fb      	ldr	r3, [r7, #12]
 8008c28:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008c2c:	68db      	ldr	r3, [r3, #12]
 8008c2e:	2b00      	cmp	r3, #0
 8008c30:	d00a      	beq.n	8008c48 <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8008c32:	68fb      	ldr	r3, [r7, #12]
 8008c34:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8008c38:	2b03      	cmp	r3, #3
 8008c3a:	d105      	bne.n	8008c48 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8008c3c:	68fb      	ldr	r3, [r7, #12]
 8008c3e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008c42:	68db      	ldr	r3, [r3, #12]
 8008c44:	68f8      	ldr	r0, [r7, #12]
 8008c46:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 8008c48:	2180      	movs	r1, #128	@ 0x80
 8008c4a:	68f8      	ldr	r0, [r7, #12]
 8008c4c:	f001 fa5e 	bl	800a10c <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 8008c50:	68f8      	ldr	r0, [r7, #12]
 8008c52:	f000 fecc 	bl	80099ee <USBD_CtlReceiveStatus>
 8008c56:	e00d      	b.n	8008c74 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8008c58:	68fb      	ldr	r3, [r7, #12]
 8008c5a:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8008c5e:	2b04      	cmp	r3, #4
 8008c60:	d004      	beq.n	8008c6c <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 8008c62:	68fb      	ldr	r3, [r7, #12]
 8008c64:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8008c68:	2b00      	cmp	r3, #0
 8008c6a:	d103      	bne.n	8008c74 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 8008c6c:	2180      	movs	r1, #128	@ 0x80
 8008c6e:	68f8      	ldr	r0, [r7, #12]
 8008c70:	f001 fa4c 	bl	800a10c <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 8008c74:	68fb      	ldr	r3, [r7, #12]
 8008c76:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 8008c7a:	2b01      	cmp	r3, #1
 8008c7c:	d11d      	bne.n	8008cba <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 8008c7e:	68f8      	ldr	r0, [r7, #12]
 8008c80:	f7ff fe81 	bl	8008986 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8008c84:	68fb      	ldr	r3, [r7, #12]
 8008c86:	2200      	movs	r2, #0
 8008c88:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 8008c8c:	e015      	b.n	8008cba <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8008c8e:	68fb      	ldr	r3, [r7, #12]
 8008c90:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008c94:	695b      	ldr	r3, [r3, #20]
 8008c96:	2b00      	cmp	r3, #0
 8008c98:	d00d      	beq.n	8008cb6 <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8008c9a:	68fb      	ldr	r3, [r7, #12]
 8008c9c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 8008ca0:	2b03      	cmp	r3, #3
 8008ca2:	d108      	bne.n	8008cb6 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 8008ca4:	68fb      	ldr	r3, [r7, #12]
 8008ca6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008caa:	695b      	ldr	r3, [r3, #20]
 8008cac:	7afa      	ldrb	r2, [r7, #11]
 8008cae:	4611      	mov	r1, r2
 8008cb0:	68f8      	ldr	r0, [r7, #12]
 8008cb2:	4798      	blx	r3
 8008cb4:	e001      	b.n	8008cba <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8008cb6:	2302      	movs	r3, #2
 8008cb8:	e000      	b.n	8008cbc <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 8008cba:	2300      	movs	r3, #0
}
 8008cbc:	4618      	mov	r0, r3
 8008cbe:	3718      	adds	r7, #24
 8008cc0:	46bd      	mov	sp, r7
 8008cc2:	bd80      	pop	{r7, pc}

08008cc4 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8008cc4:	b580      	push	{r7, lr}
 8008cc6:	b082      	sub	sp, #8
 8008cc8:	af00      	add	r7, sp, #0
 8008cca:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008ccc:	2340      	movs	r3, #64	@ 0x40
 8008cce:	2200      	movs	r2, #0
 8008cd0:	2100      	movs	r1, #0
 8008cd2:	6878      	ldr	r0, [r7, #4]
 8008cd4:	f001 f9d5 	bl	800a082 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8008cd8:	687b      	ldr	r3, [r7, #4]
 8008cda:	2201      	movs	r2, #1
 8008cdc:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8008ce0:	687b      	ldr	r3, [r7, #4]
 8008ce2:	2240      	movs	r2, #64	@ 0x40
 8008ce4:	f8c3 2164 	str.w	r2, [r3, #356]	@ 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008ce8:	2340      	movs	r3, #64	@ 0x40
 8008cea:	2200      	movs	r2, #0
 8008cec:	2180      	movs	r1, #128	@ 0x80
 8008cee:	6878      	ldr	r0, [r7, #4]
 8008cf0:	f001 f9c7 	bl	800a082 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	2201      	movs	r2, #1
 8008cf8:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8008cfa:	687b      	ldr	r3, [r7, #4]
 8008cfc:	2240      	movs	r2, #64	@ 0x40
 8008cfe:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008d00:	687b      	ldr	r3, [r7, #4]
 8008d02:	2201      	movs	r2, #1
 8008d04:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8008d08:	687b      	ldr	r3, [r7, #4]
 8008d0a:	2200      	movs	r2, #0
 8008d0c:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	2200      	movs	r2, #0
 8008d14:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8008d16:	687b      	ldr	r3, [r7, #4]
 8008d18:	2200      	movs	r2, #0
 8008d1a:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4

  if (pdev->pClassData)
 8008d1e:	687b      	ldr	r3, [r7, #4]
 8008d20:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008d24:	2b00      	cmp	r3, #0
 8008d26:	d009      	beq.n	8008d3c <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008d2e:	685b      	ldr	r3, [r3, #4]
 8008d30:	687a      	ldr	r2, [r7, #4]
 8008d32:	6852      	ldr	r2, [r2, #4]
 8008d34:	b2d2      	uxtb	r2, r2
 8008d36:	4611      	mov	r1, r2
 8008d38:	6878      	ldr	r0, [r7, #4]
 8008d3a:	4798      	blx	r3
  }

  return USBD_OK;
 8008d3c:	2300      	movs	r3, #0
}
 8008d3e:	4618      	mov	r0, r3
 8008d40:	3708      	adds	r7, #8
 8008d42:	46bd      	mov	sp, r7
 8008d44:	bd80      	pop	{r7, pc}

08008d46 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8008d46:	b480      	push	{r7}
 8008d48:	b083      	sub	sp, #12
 8008d4a:	af00      	add	r7, sp, #0
 8008d4c:	6078      	str	r0, [r7, #4]
 8008d4e:	460b      	mov	r3, r1
 8008d50:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8008d52:	687b      	ldr	r3, [r7, #4]
 8008d54:	78fa      	ldrb	r2, [r7, #3]
 8008d56:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8008d58:	2300      	movs	r3, #0
}
 8008d5a:	4618      	mov	r0, r3
 8008d5c:	370c      	adds	r7, #12
 8008d5e:	46bd      	mov	sp, r7
 8008d60:	bc80      	pop	{r7}
 8008d62:	4770      	bx	lr

08008d64 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8008d64:	b480      	push	{r7}
 8008d66:	b083      	sub	sp, #12
 8008d68:	af00      	add	r7, sp, #0
 8008d6a:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 8008d6c:	687b      	ldr	r3, [r7, #4]
 8008d6e:	f893 229c 	ldrb.w	r2, [r3, #668]	@ 0x29c
 8008d72:	687b      	ldr	r3, [r7, #4]
 8008d74:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8008d78:	687b      	ldr	r3, [r7, #4]
 8008d7a:	2204      	movs	r2, #4
 8008d7c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 8008d80:	2300      	movs	r3, #0
}
 8008d82:	4618      	mov	r0, r3
 8008d84:	370c      	adds	r7, #12
 8008d86:	46bd      	mov	sp, r7
 8008d88:	bc80      	pop	{r7}
 8008d8a:	4770      	bx	lr

08008d8c <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8008d8c:	b480      	push	{r7}
 8008d8e:	b083      	sub	sp, #12
 8008d90:	af00      	add	r7, sp, #0
 8008d92:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8008d94:	687b      	ldr	r3, [r7, #4]
 8008d96:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008d9a:	2b04      	cmp	r3, #4
 8008d9c:	d105      	bne.n	8008daa <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 8008d9e:	687b      	ldr	r3, [r7, #4]
 8008da0:	f893 229d 	ldrb.w	r2, [r3, #669]	@ 0x29d
 8008da4:	687b      	ldr	r3, [r7, #4]
 8008da6:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 8008daa:	2300      	movs	r3, #0
}
 8008dac:	4618      	mov	r0, r3
 8008dae:	370c      	adds	r7, #12
 8008db0:	46bd      	mov	sp, r7
 8008db2:	bc80      	pop	{r7}
 8008db4:	4770      	bx	lr

08008db6 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8008db6:	b580      	push	{r7, lr}
 8008db8:	b082      	sub	sp, #8
 8008dba:	af00      	add	r7, sp, #0
 8008dbc:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008dbe:	687b      	ldr	r3, [r7, #4]
 8008dc0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008dc4:	2b03      	cmp	r3, #3
 8008dc6:	d10b      	bne.n	8008de0 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 8008dc8:	687b      	ldr	r3, [r7, #4]
 8008dca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008dce:	69db      	ldr	r3, [r3, #28]
 8008dd0:	2b00      	cmp	r3, #0
 8008dd2:	d005      	beq.n	8008de0 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8008dd4:	687b      	ldr	r3, [r7, #4]
 8008dd6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008dda:	69db      	ldr	r3, [r3, #28]
 8008ddc:	6878      	ldr	r0, [r7, #4]
 8008dde:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8008de0:	2300      	movs	r3, #0
}
 8008de2:	4618      	mov	r0, r3
 8008de4:	3708      	adds	r7, #8
 8008de6:	46bd      	mov	sp, r7
 8008de8:	bd80      	pop	{r7, pc}
	...

08008dec <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 8008dec:	b580      	push	{r7, lr}
 8008dee:	b084      	sub	sp, #16
 8008df0:	af00      	add	r7, sp, #0
 8008df2:	6078      	str	r0, [r7, #4]
 8008df4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008df6:	2300      	movs	r3, #0
 8008df8:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008dfa:	683b      	ldr	r3, [r7, #0]
 8008dfc:	781b      	ldrb	r3, [r3, #0]
 8008dfe:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8008e02:	2b40      	cmp	r3, #64	@ 0x40
 8008e04:	d005      	beq.n	8008e12 <USBD_StdDevReq+0x26>
 8008e06:	2b40      	cmp	r3, #64	@ 0x40
 8008e08:	d84f      	bhi.n	8008eaa <USBD_StdDevReq+0xbe>
 8008e0a:	2b00      	cmp	r3, #0
 8008e0c:	d009      	beq.n	8008e22 <USBD_StdDevReq+0x36>
 8008e0e:	2b20      	cmp	r3, #32
 8008e10:	d14b      	bne.n	8008eaa <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8008e12:	687b      	ldr	r3, [r7, #4]
 8008e14:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008e18:	689b      	ldr	r3, [r3, #8]
 8008e1a:	6839      	ldr	r1, [r7, #0]
 8008e1c:	6878      	ldr	r0, [r7, #4]
 8008e1e:	4798      	blx	r3
      break;
 8008e20:	e048      	b.n	8008eb4 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008e22:	683b      	ldr	r3, [r7, #0]
 8008e24:	785b      	ldrb	r3, [r3, #1]
 8008e26:	2b09      	cmp	r3, #9
 8008e28:	d839      	bhi.n	8008e9e <USBD_StdDevReq+0xb2>
 8008e2a:	a201      	add	r2, pc, #4	@ (adr r2, 8008e30 <USBD_StdDevReq+0x44>)
 8008e2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008e30:	08008e81 	.word	0x08008e81
 8008e34:	08008e95 	.word	0x08008e95
 8008e38:	08008e9f 	.word	0x08008e9f
 8008e3c:	08008e8b 	.word	0x08008e8b
 8008e40:	08008e9f 	.word	0x08008e9f
 8008e44:	08008e63 	.word	0x08008e63
 8008e48:	08008e59 	.word	0x08008e59
 8008e4c:	08008e9f 	.word	0x08008e9f
 8008e50:	08008e77 	.word	0x08008e77
 8008e54:	08008e6d 	.word	0x08008e6d
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8008e58:	6839      	ldr	r1, [r7, #0]
 8008e5a:	6878      	ldr	r0, [r7, #4]
 8008e5c:	f000 f9dc 	bl	8009218 <USBD_GetDescriptor>
          break;
 8008e60:	e022      	b.n	8008ea8 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8008e62:	6839      	ldr	r1, [r7, #0]
 8008e64:	6878      	ldr	r0, [r7, #4]
 8008e66:	f000 fb3f 	bl	80094e8 <USBD_SetAddress>
          break;
 8008e6a:	e01d      	b.n	8008ea8 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 8008e6c:	6839      	ldr	r1, [r7, #0]
 8008e6e:	6878      	ldr	r0, [r7, #4]
 8008e70:	f000 fb7e 	bl	8009570 <USBD_SetConfig>
          break;
 8008e74:	e018      	b.n	8008ea8 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8008e76:	6839      	ldr	r1, [r7, #0]
 8008e78:	6878      	ldr	r0, [r7, #4]
 8008e7a:	f000 fc07 	bl	800968c <USBD_GetConfig>
          break;
 8008e7e:	e013      	b.n	8008ea8 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8008e80:	6839      	ldr	r1, [r7, #0]
 8008e82:	6878      	ldr	r0, [r7, #4]
 8008e84:	f000 fc37 	bl	80096f6 <USBD_GetStatus>
          break;
 8008e88:	e00e      	b.n	8008ea8 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8008e8a:	6839      	ldr	r1, [r7, #0]
 8008e8c:	6878      	ldr	r0, [r7, #4]
 8008e8e:	f000 fc65 	bl	800975c <USBD_SetFeature>
          break;
 8008e92:	e009      	b.n	8008ea8 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8008e94:	6839      	ldr	r1, [r7, #0]
 8008e96:	6878      	ldr	r0, [r7, #4]
 8008e98:	f000 fc74 	bl	8009784 <USBD_ClrFeature>
          break;
 8008e9c:	e004      	b.n	8008ea8 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 8008e9e:	6839      	ldr	r1, [r7, #0]
 8008ea0:	6878      	ldr	r0, [r7, #4]
 8008ea2:	f000 fcc9 	bl	8009838 <USBD_CtlError>
          break;
 8008ea6:	bf00      	nop
      }
      break;
 8008ea8:	e004      	b.n	8008eb4 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 8008eaa:	6839      	ldr	r1, [r7, #0]
 8008eac:	6878      	ldr	r0, [r7, #4]
 8008eae:	f000 fcc3 	bl	8009838 <USBD_CtlError>
      break;
 8008eb2:	bf00      	nop
  }

  return ret;
 8008eb4:	7bfb      	ldrb	r3, [r7, #15]
}
 8008eb6:	4618      	mov	r0, r3
 8008eb8:	3710      	adds	r7, #16
 8008eba:	46bd      	mov	sp, r7
 8008ebc:	bd80      	pop	{r7, pc}
 8008ebe:	bf00      	nop

08008ec0 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 8008ec0:	b580      	push	{r7, lr}
 8008ec2:	b084      	sub	sp, #16
 8008ec4:	af00      	add	r7, sp, #0
 8008ec6:	6078      	str	r0, [r7, #4]
 8008ec8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008eca:	2300      	movs	r3, #0
 8008ecc:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008ece:	683b      	ldr	r3, [r7, #0]
 8008ed0:	781b      	ldrb	r3, [r3, #0]
 8008ed2:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8008ed6:	2b40      	cmp	r3, #64	@ 0x40
 8008ed8:	d005      	beq.n	8008ee6 <USBD_StdItfReq+0x26>
 8008eda:	2b40      	cmp	r3, #64	@ 0x40
 8008edc:	d82e      	bhi.n	8008f3c <USBD_StdItfReq+0x7c>
 8008ede:	2b00      	cmp	r3, #0
 8008ee0:	d001      	beq.n	8008ee6 <USBD_StdItfReq+0x26>
 8008ee2:	2b20      	cmp	r3, #32
 8008ee4:	d12a      	bne.n	8008f3c <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8008ee6:	687b      	ldr	r3, [r7, #4]
 8008ee8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008eec:	3b01      	subs	r3, #1
 8008eee:	2b02      	cmp	r3, #2
 8008ef0:	d81d      	bhi.n	8008f2e <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8008ef2:	683b      	ldr	r3, [r7, #0]
 8008ef4:	889b      	ldrh	r3, [r3, #4]
 8008ef6:	b2db      	uxtb	r3, r3
 8008ef8:	2b01      	cmp	r3, #1
 8008efa:	d813      	bhi.n	8008f24 <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8008efc:	687b      	ldr	r3, [r7, #4]
 8008efe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008f02:	689b      	ldr	r3, [r3, #8]
 8008f04:	6839      	ldr	r1, [r7, #0]
 8008f06:	6878      	ldr	r0, [r7, #4]
 8008f08:	4798      	blx	r3
 8008f0a:	4603      	mov	r3, r0
 8008f0c:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8008f0e:	683b      	ldr	r3, [r7, #0]
 8008f10:	88db      	ldrh	r3, [r3, #6]
 8008f12:	2b00      	cmp	r3, #0
 8008f14:	d110      	bne.n	8008f38 <USBD_StdItfReq+0x78>
 8008f16:	7bfb      	ldrb	r3, [r7, #15]
 8008f18:	2b00      	cmp	r3, #0
 8008f1a:	d10d      	bne.n	8008f38 <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 8008f1c:	6878      	ldr	r0, [r7, #4]
 8008f1e:	f000 fd53 	bl	80099c8 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8008f22:	e009      	b.n	8008f38 <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 8008f24:	6839      	ldr	r1, [r7, #0]
 8008f26:	6878      	ldr	r0, [r7, #4]
 8008f28:	f000 fc86 	bl	8009838 <USBD_CtlError>
          break;
 8008f2c:	e004      	b.n	8008f38 <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 8008f2e:	6839      	ldr	r1, [r7, #0]
 8008f30:	6878      	ldr	r0, [r7, #4]
 8008f32:	f000 fc81 	bl	8009838 <USBD_CtlError>
          break;
 8008f36:	e000      	b.n	8008f3a <USBD_StdItfReq+0x7a>
          break;
 8008f38:	bf00      	nop
      }
      break;
 8008f3a:	e004      	b.n	8008f46 <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 8008f3c:	6839      	ldr	r1, [r7, #0]
 8008f3e:	6878      	ldr	r0, [r7, #4]
 8008f40:	f000 fc7a 	bl	8009838 <USBD_CtlError>
      break;
 8008f44:	bf00      	nop
  }

  return USBD_OK;
 8008f46:	2300      	movs	r3, #0
}
 8008f48:	4618      	mov	r0, r3
 8008f4a:	3710      	adds	r7, #16
 8008f4c:	46bd      	mov	sp, r7
 8008f4e:	bd80      	pop	{r7, pc}

08008f50 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 8008f50:	b580      	push	{r7, lr}
 8008f52:	b084      	sub	sp, #16
 8008f54:	af00      	add	r7, sp, #0
 8008f56:	6078      	str	r0, [r7, #4]
 8008f58:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8008f5a:	2300      	movs	r3, #0
 8008f5c:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 8008f5e:	683b      	ldr	r3, [r7, #0]
 8008f60:	889b      	ldrh	r3, [r3, #4]
 8008f62:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008f64:	683b      	ldr	r3, [r7, #0]
 8008f66:	781b      	ldrb	r3, [r3, #0]
 8008f68:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8008f6c:	2b40      	cmp	r3, #64	@ 0x40
 8008f6e:	d007      	beq.n	8008f80 <USBD_StdEPReq+0x30>
 8008f70:	2b40      	cmp	r3, #64	@ 0x40
 8008f72:	f200 8146 	bhi.w	8009202 <USBD_StdEPReq+0x2b2>
 8008f76:	2b00      	cmp	r3, #0
 8008f78:	d00a      	beq.n	8008f90 <USBD_StdEPReq+0x40>
 8008f7a:	2b20      	cmp	r3, #32
 8008f7c:	f040 8141 	bne.w	8009202 <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8008f80:	687b      	ldr	r3, [r7, #4]
 8008f82:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008f86:	689b      	ldr	r3, [r3, #8]
 8008f88:	6839      	ldr	r1, [r7, #0]
 8008f8a:	6878      	ldr	r0, [r7, #4]
 8008f8c:	4798      	blx	r3
      break;
 8008f8e:	e13d      	b.n	800920c <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 8008f90:	683b      	ldr	r3, [r7, #0]
 8008f92:	781b      	ldrb	r3, [r3, #0]
 8008f94:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8008f98:	2b20      	cmp	r3, #32
 8008f9a:	d10a      	bne.n	8008fb2 <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8008f9c:	687b      	ldr	r3, [r7, #4]
 8008f9e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008fa2:	689b      	ldr	r3, [r3, #8]
 8008fa4:	6839      	ldr	r1, [r7, #0]
 8008fa6:	6878      	ldr	r0, [r7, #4]
 8008fa8:	4798      	blx	r3
 8008faa:	4603      	mov	r3, r0
 8008fac:	73fb      	strb	r3, [r7, #15]

        return ret;
 8008fae:	7bfb      	ldrb	r3, [r7, #15]
 8008fb0:	e12d      	b.n	800920e <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 8008fb2:	683b      	ldr	r3, [r7, #0]
 8008fb4:	785b      	ldrb	r3, [r3, #1]
 8008fb6:	2b03      	cmp	r3, #3
 8008fb8:	d007      	beq.n	8008fca <USBD_StdEPReq+0x7a>
 8008fba:	2b03      	cmp	r3, #3
 8008fbc:	f300 811b 	bgt.w	80091f6 <USBD_StdEPReq+0x2a6>
 8008fc0:	2b00      	cmp	r3, #0
 8008fc2:	d072      	beq.n	80090aa <USBD_StdEPReq+0x15a>
 8008fc4:	2b01      	cmp	r3, #1
 8008fc6:	d03a      	beq.n	800903e <USBD_StdEPReq+0xee>
 8008fc8:	e115      	b.n	80091f6 <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8008fca:	687b      	ldr	r3, [r7, #4]
 8008fcc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008fd0:	2b02      	cmp	r3, #2
 8008fd2:	d002      	beq.n	8008fda <USBD_StdEPReq+0x8a>
 8008fd4:	2b03      	cmp	r3, #3
 8008fd6:	d015      	beq.n	8009004 <USBD_StdEPReq+0xb4>
 8008fd8:	e02b      	b.n	8009032 <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008fda:	7bbb      	ldrb	r3, [r7, #14]
 8008fdc:	2b00      	cmp	r3, #0
 8008fde:	d00c      	beq.n	8008ffa <USBD_StdEPReq+0xaa>
 8008fe0:	7bbb      	ldrb	r3, [r7, #14]
 8008fe2:	2b80      	cmp	r3, #128	@ 0x80
 8008fe4:	d009      	beq.n	8008ffa <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8008fe6:	7bbb      	ldrb	r3, [r7, #14]
 8008fe8:	4619      	mov	r1, r3
 8008fea:	6878      	ldr	r0, [r7, #4]
 8008fec:	f001 f88e 	bl	800a10c <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8008ff0:	2180      	movs	r1, #128	@ 0x80
 8008ff2:	6878      	ldr	r0, [r7, #4]
 8008ff4:	f001 f88a 	bl	800a10c <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008ff8:	e020      	b.n	800903c <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 8008ffa:	6839      	ldr	r1, [r7, #0]
 8008ffc:	6878      	ldr	r0, [r7, #4]
 8008ffe:	f000 fc1b 	bl	8009838 <USBD_CtlError>
              break;
 8009002:	e01b      	b.n	800903c <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8009004:	683b      	ldr	r3, [r7, #0]
 8009006:	885b      	ldrh	r3, [r3, #2]
 8009008:	2b00      	cmp	r3, #0
 800900a:	d10e      	bne.n	800902a <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 800900c:	7bbb      	ldrb	r3, [r7, #14]
 800900e:	2b00      	cmp	r3, #0
 8009010:	d00b      	beq.n	800902a <USBD_StdEPReq+0xda>
 8009012:	7bbb      	ldrb	r3, [r7, #14]
 8009014:	2b80      	cmp	r3, #128	@ 0x80
 8009016:	d008      	beq.n	800902a <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8009018:	683b      	ldr	r3, [r7, #0]
 800901a:	88db      	ldrh	r3, [r3, #6]
 800901c:	2b00      	cmp	r3, #0
 800901e:	d104      	bne.n	800902a <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 8009020:	7bbb      	ldrb	r3, [r7, #14]
 8009022:	4619      	mov	r1, r3
 8009024:	6878      	ldr	r0, [r7, #4]
 8009026:	f001 f871 	bl	800a10c <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 800902a:	6878      	ldr	r0, [r7, #4]
 800902c:	f000 fccc 	bl	80099c8 <USBD_CtlSendStatus>

              break;
 8009030:	e004      	b.n	800903c <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 8009032:	6839      	ldr	r1, [r7, #0]
 8009034:	6878      	ldr	r0, [r7, #4]
 8009036:	f000 fbff 	bl	8009838 <USBD_CtlError>
              break;
 800903a:	bf00      	nop
          }
          break;
 800903c:	e0e0      	b.n	8009200 <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800903e:	687b      	ldr	r3, [r7, #4]
 8009040:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009044:	2b02      	cmp	r3, #2
 8009046:	d002      	beq.n	800904e <USBD_StdEPReq+0xfe>
 8009048:	2b03      	cmp	r3, #3
 800904a:	d015      	beq.n	8009078 <USBD_StdEPReq+0x128>
 800904c:	e026      	b.n	800909c <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800904e:	7bbb      	ldrb	r3, [r7, #14]
 8009050:	2b00      	cmp	r3, #0
 8009052:	d00c      	beq.n	800906e <USBD_StdEPReq+0x11e>
 8009054:	7bbb      	ldrb	r3, [r7, #14]
 8009056:	2b80      	cmp	r3, #128	@ 0x80
 8009058:	d009      	beq.n	800906e <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800905a:	7bbb      	ldrb	r3, [r7, #14]
 800905c:	4619      	mov	r1, r3
 800905e:	6878      	ldr	r0, [r7, #4]
 8009060:	f001 f854 	bl	800a10c <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8009064:	2180      	movs	r1, #128	@ 0x80
 8009066:	6878      	ldr	r0, [r7, #4]
 8009068:	f001 f850 	bl	800a10c <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800906c:	e01c      	b.n	80090a8 <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 800906e:	6839      	ldr	r1, [r7, #0]
 8009070:	6878      	ldr	r0, [r7, #4]
 8009072:	f000 fbe1 	bl	8009838 <USBD_CtlError>
              break;
 8009076:	e017      	b.n	80090a8 <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8009078:	683b      	ldr	r3, [r7, #0]
 800907a:	885b      	ldrh	r3, [r3, #2]
 800907c:	2b00      	cmp	r3, #0
 800907e:	d112      	bne.n	80090a6 <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8009080:	7bbb      	ldrb	r3, [r7, #14]
 8009082:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009086:	2b00      	cmp	r3, #0
 8009088:	d004      	beq.n	8009094 <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 800908a:	7bbb      	ldrb	r3, [r7, #14]
 800908c:	4619      	mov	r1, r3
 800908e:	6878      	ldr	r0, [r7, #4]
 8009090:	f001 f85b 	bl	800a14a <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 8009094:	6878      	ldr	r0, [r7, #4]
 8009096:	f000 fc97 	bl	80099c8 <USBD_CtlSendStatus>
              }
              break;
 800909a:	e004      	b.n	80090a6 <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 800909c:	6839      	ldr	r1, [r7, #0]
 800909e:	6878      	ldr	r0, [r7, #4]
 80090a0:	f000 fbca 	bl	8009838 <USBD_CtlError>
              break;
 80090a4:	e000      	b.n	80090a8 <USBD_StdEPReq+0x158>
              break;
 80090a6:	bf00      	nop
          }
          break;
 80090a8:	e0aa      	b.n	8009200 <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 80090aa:	687b      	ldr	r3, [r7, #4]
 80090ac:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80090b0:	2b02      	cmp	r3, #2
 80090b2:	d002      	beq.n	80090ba <USBD_StdEPReq+0x16a>
 80090b4:	2b03      	cmp	r3, #3
 80090b6:	d032      	beq.n	800911e <USBD_StdEPReq+0x1ce>
 80090b8:	e097      	b.n	80091ea <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80090ba:	7bbb      	ldrb	r3, [r7, #14]
 80090bc:	2b00      	cmp	r3, #0
 80090be:	d007      	beq.n	80090d0 <USBD_StdEPReq+0x180>
 80090c0:	7bbb      	ldrb	r3, [r7, #14]
 80090c2:	2b80      	cmp	r3, #128	@ 0x80
 80090c4:	d004      	beq.n	80090d0 <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 80090c6:	6839      	ldr	r1, [r7, #0]
 80090c8:	6878      	ldr	r0, [r7, #4]
 80090ca:	f000 fbb5 	bl	8009838 <USBD_CtlError>
                break;
 80090ce:	e091      	b.n	80091f4 <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80090d0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80090d4:	2b00      	cmp	r3, #0
 80090d6:	da0b      	bge.n	80090f0 <USBD_StdEPReq+0x1a0>
 80090d8:	7bbb      	ldrb	r3, [r7, #14]
 80090da:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80090de:	4613      	mov	r3, r2
 80090e0:	009b      	lsls	r3, r3, #2
 80090e2:	4413      	add	r3, r2
 80090e4:	009b      	lsls	r3, r3, #2
 80090e6:	3310      	adds	r3, #16
 80090e8:	687a      	ldr	r2, [r7, #4]
 80090ea:	4413      	add	r3, r2
 80090ec:	3304      	adds	r3, #4
 80090ee:	e00b      	b.n	8009108 <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80090f0:	7bbb      	ldrb	r3, [r7, #14]
 80090f2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80090f6:	4613      	mov	r3, r2
 80090f8:	009b      	lsls	r3, r3, #2
 80090fa:	4413      	add	r3, r2
 80090fc:	009b      	lsls	r3, r3, #2
 80090fe:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8009102:	687a      	ldr	r2, [r7, #4]
 8009104:	4413      	add	r3, r2
 8009106:	3304      	adds	r3, #4
 8009108:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800910a:	68bb      	ldr	r3, [r7, #8]
 800910c:	2200      	movs	r2, #0
 800910e:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8009110:	68bb      	ldr	r3, [r7, #8]
 8009112:	2202      	movs	r2, #2
 8009114:	4619      	mov	r1, r3
 8009116:	6878      	ldr	r0, [r7, #4]
 8009118:	f000 fbf8 	bl	800990c <USBD_CtlSendData>
              break;
 800911c:	e06a      	b.n	80091f4 <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800911e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009122:	2b00      	cmp	r3, #0
 8009124:	da11      	bge.n	800914a <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8009126:	7bbb      	ldrb	r3, [r7, #14]
 8009128:	f003 020f 	and.w	r2, r3, #15
 800912c:	6879      	ldr	r1, [r7, #4]
 800912e:	4613      	mov	r3, r2
 8009130:	009b      	lsls	r3, r3, #2
 8009132:	4413      	add	r3, r2
 8009134:	009b      	lsls	r3, r3, #2
 8009136:	440b      	add	r3, r1
 8009138:	3318      	adds	r3, #24
 800913a:	681b      	ldr	r3, [r3, #0]
 800913c:	2b00      	cmp	r3, #0
 800913e:	d117      	bne.n	8009170 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 8009140:	6839      	ldr	r1, [r7, #0]
 8009142:	6878      	ldr	r0, [r7, #4]
 8009144:	f000 fb78 	bl	8009838 <USBD_CtlError>
                  break;
 8009148:	e054      	b.n	80091f4 <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800914a:	7bbb      	ldrb	r3, [r7, #14]
 800914c:	f003 020f 	and.w	r2, r3, #15
 8009150:	6879      	ldr	r1, [r7, #4]
 8009152:	4613      	mov	r3, r2
 8009154:	009b      	lsls	r3, r3, #2
 8009156:	4413      	add	r3, r2
 8009158:	009b      	lsls	r3, r3, #2
 800915a:	440b      	add	r3, r1
 800915c:	f503 73ac 	add.w	r3, r3, #344	@ 0x158
 8009160:	681b      	ldr	r3, [r3, #0]
 8009162:	2b00      	cmp	r3, #0
 8009164:	d104      	bne.n	8009170 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 8009166:	6839      	ldr	r1, [r7, #0]
 8009168:	6878      	ldr	r0, [r7, #4]
 800916a:	f000 fb65 	bl	8009838 <USBD_CtlError>
                  break;
 800916e:	e041      	b.n	80091f4 <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009170:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009174:	2b00      	cmp	r3, #0
 8009176:	da0b      	bge.n	8009190 <USBD_StdEPReq+0x240>
 8009178:	7bbb      	ldrb	r3, [r7, #14]
 800917a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800917e:	4613      	mov	r3, r2
 8009180:	009b      	lsls	r3, r3, #2
 8009182:	4413      	add	r3, r2
 8009184:	009b      	lsls	r3, r3, #2
 8009186:	3310      	adds	r3, #16
 8009188:	687a      	ldr	r2, [r7, #4]
 800918a:	4413      	add	r3, r2
 800918c:	3304      	adds	r3, #4
 800918e:	e00b      	b.n	80091a8 <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8009190:	7bbb      	ldrb	r3, [r7, #14]
 8009192:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009196:	4613      	mov	r3, r2
 8009198:	009b      	lsls	r3, r3, #2
 800919a:	4413      	add	r3, r2
 800919c:	009b      	lsls	r3, r3, #2
 800919e:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80091a2:	687a      	ldr	r2, [r7, #4]
 80091a4:	4413      	add	r3, r2
 80091a6:	3304      	adds	r3, #4
 80091a8:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80091aa:	7bbb      	ldrb	r3, [r7, #14]
 80091ac:	2b00      	cmp	r3, #0
 80091ae:	d002      	beq.n	80091b6 <USBD_StdEPReq+0x266>
 80091b0:	7bbb      	ldrb	r3, [r7, #14]
 80091b2:	2b80      	cmp	r3, #128	@ 0x80
 80091b4:	d103      	bne.n	80091be <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 80091b6:	68bb      	ldr	r3, [r7, #8]
 80091b8:	2200      	movs	r2, #0
 80091ba:	601a      	str	r2, [r3, #0]
 80091bc:	e00e      	b.n	80091dc <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 80091be:	7bbb      	ldrb	r3, [r7, #14]
 80091c0:	4619      	mov	r1, r3
 80091c2:	6878      	ldr	r0, [r7, #4]
 80091c4:	f000 ffe0 	bl	800a188 <USBD_LL_IsStallEP>
 80091c8:	4603      	mov	r3, r0
 80091ca:	2b00      	cmp	r3, #0
 80091cc:	d003      	beq.n	80091d6 <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 80091ce:	68bb      	ldr	r3, [r7, #8]
 80091d0:	2201      	movs	r2, #1
 80091d2:	601a      	str	r2, [r3, #0]
 80091d4:	e002      	b.n	80091dc <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 80091d6:	68bb      	ldr	r3, [r7, #8]
 80091d8:	2200      	movs	r2, #0
 80091da:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 80091dc:	68bb      	ldr	r3, [r7, #8]
 80091de:	2202      	movs	r2, #2
 80091e0:	4619      	mov	r1, r3
 80091e2:	6878      	ldr	r0, [r7, #4]
 80091e4:	f000 fb92 	bl	800990c <USBD_CtlSendData>
              break;
 80091e8:	e004      	b.n	80091f4 <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 80091ea:	6839      	ldr	r1, [r7, #0]
 80091ec:	6878      	ldr	r0, [r7, #4]
 80091ee:	f000 fb23 	bl	8009838 <USBD_CtlError>
              break;
 80091f2:	bf00      	nop
          }
          break;
 80091f4:	e004      	b.n	8009200 <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 80091f6:	6839      	ldr	r1, [r7, #0]
 80091f8:	6878      	ldr	r0, [r7, #4]
 80091fa:	f000 fb1d 	bl	8009838 <USBD_CtlError>
          break;
 80091fe:	bf00      	nop
      }
      break;
 8009200:	e004      	b.n	800920c <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 8009202:	6839      	ldr	r1, [r7, #0]
 8009204:	6878      	ldr	r0, [r7, #4]
 8009206:	f000 fb17 	bl	8009838 <USBD_CtlError>
      break;
 800920a:	bf00      	nop
  }

  return ret;
 800920c:	7bfb      	ldrb	r3, [r7, #15]
}
 800920e:	4618      	mov	r0, r3
 8009210:	3710      	adds	r7, #16
 8009212:	46bd      	mov	sp, r7
 8009214:	bd80      	pop	{r7, pc}
	...

08009218 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8009218:	b580      	push	{r7, lr}
 800921a:	b084      	sub	sp, #16
 800921c:	af00      	add	r7, sp, #0
 800921e:	6078      	str	r0, [r7, #4]
 8009220:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8009222:	2300      	movs	r3, #0
 8009224:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8009226:	2300      	movs	r3, #0
 8009228:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800922a:	2300      	movs	r3, #0
 800922c:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800922e:	683b      	ldr	r3, [r7, #0]
 8009230:	885b      	ldrh	r3, [r3, #2]
 8009232:	0a1b      	lsrs	r3, r3, #8
 8009234:	b29b      	uxth	r3, r3
 8009236:	3b01      	subs	r3, #1
 8009238:	2b06      	cmp	r3, #6
 800923a:	f200 8128 	bhi.w	800948e <USBD_GetDescriptor+0x276>
 800923e:	a201      	add	r2, pc, #4	@ (adr r2, 8009244 <USBD_GetDescriptor+0x2c>)
 8009240:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009244:	08009261 	.word	0x08009261
 8009248:	08009279 	.word	0x08009279
 800924c:	080092b9 	.word	0x080092b9
 8009250:	0800948f 	.word	0x0800948f
 8009254:	0800948f 	.word	0x0800948f
 8009258:	0800942f 	.word	0x0800942f
 800925c:	0800945b 	.word	0x0800945b
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8009260:	687b      	ldr	r3, [r7, #4]
 8009262:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8009266:	681b      	ldr	r3, [r3, #0]
 8009268:	687a      	ldr	r2, [r7, #4]
 800926a:	7c12      	ldrb	r2, [r2, #16]
 800926c:	f107 0108 	add.w	r1, r7, #8
 8009270:	4610      	mov	r0, r2
 8009272:	4798      	blx	r3
 8009274:	60f8      	str	r0, [r7, #12]
      break;
 8009276:	e112      	b.n	800949e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009278:	687b      	ldr	r3, [r7, #4]
 800927a:	7c1b      	ldrb	r3, [r3, #16]
 800927c:	2b00      	cmp	r3, #0
 800927e:	d10d      	bne.n	800929c <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8009280:	687b      	ldr	r3, [r7, #4]
 8009282:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009286:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009288:	f107 0208 	add.w	r2, r7, #8
 800928c:	4610      	mov	r0, r2
 800928e:	4798      	blx	r3
 8009290:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8009292:	68fb      	ldr	r3, [r7, #12]
 8009294:	3301      	adds	r3, #1
 8009296:	2202      	movs	r2, #2
 8009298:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800929a:	e100      	b.n	800949e <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80092a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80092a4:	f107 0208 	add.w	r2, r7, #8
 80092a8:	4610      	mov	r0, r2
 80092aa:	4798      	blx	r3
 80092ac:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80092ae:	68fb      	ldr	r3, [r7, #12]
 80092b0:	3301      	adds	r3, #1
 80092b2:	2202      	movs	r2, #2
 80092b4:	701a      	strb	r2, [r3, #0]
      break;
 80092b6:	e0f2      	b.n	800949e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 80092b8:	683b      	ldr	r3, [r7, #0]
 80092ba:	885b      	ldrh	r3, [r3, #2]
 80092bc:	b2db      	uxtb	r3, r3
 80092be:	2b05      	cmp	r3, #5
 80092c0:	f200 80ac 	bhi.w	800941c <USBD_GetDescriptor+0x204>
 80092c4:	a201      	add	r2, pc, #4	@ (adr r2, 80092cc <USBD_GetDescriptor+0xb4>)
 80092c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80092ca:	bf00      	nop
 80092cc:	080092e5 	.word	0x080092e5
 80092d0:	08009319 	.word	0x08009319
 80092d4:	0800934d 	.word	0x0800934d
 80092d8:	08009381 	.word	0x08009381
 80092dc:	080093b5 	.word	0x080093b5
 80092e0:	080093e9 	.word	0x080093e9
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 80092ea:	685b      	ldr	r3, [r3, #4]
 80092ec:	2b00      	cmp	r3, #0
 80092ee:	d00b      	beq.n	8009308 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80092f0:	687b      	ldr	r3, [r7, #4]
 80092f2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 80092f6:	685b      	ldr	r3, [r3, #4]
 80092f8:	687a      	ldr	r2, [r7, #4]
 80092fa:	7c12      	ldrb	r2, [r2, #16]
 80092fc:	f107 0108 	add.w	r1, r7, #8
 8009300:	4610      	mov	r0, r2
 8009302:	4798      	blx	r3
 8009304:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009306:	e091      	b.n	800942c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009308:	6839      	ldr	r1, [r7, #0]
 800930a:	6878      	ldr	r0, [r7, #4]
 800930c:	f000 fa94 	bl	8009838 <USBD_CtlError>
            err++;
 8009310:	7afb      	ldrb	r3, [r7, #11]
 8009312:	3301      	adds	r3, #1
 8009314:	72fb      	strb	r3, [r7, #11]
          break;
 8009316:	e089      	b.n	800942c <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8009318:	687b      	ldr	r3, [r7, #4]
 800931a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800931e:	689b      	ldr	r3, [r3, #8]
 8009320:	2b00      	cmp	r3, #0
 8009322:	d00b      	beq.n	800933c <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8009324:	687b      	ldr	r3, [r7, #4]
 8009326:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800932a:	689b      	ldr	r3, [r3, #8]
 800932c:	687a      	ldr	r2, [r7, #4]
 800932e:	7c12      	ldrb	r2, [r2, #16]
 8009330:	f107 0108 	add.w	r1, r7, #8
 8009334:	4610      	mov	r0, r2
 8009336:	4798      	blx	r3
 8009338:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800933a:	e077      	b.n	800942c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800933c:	6839      	ldr	r1, [r7, #0]
 800933e:	6878      	ldr	r0, [r7, #4]
 8009340:	f000 fa7a 	bl	8009838 <USBD_CtlError>
            err++;
 8009344:	7afb      	ldrb	r3, [r7, #11]
 8009346:	3301      	adds	r3, #1
 8009348:	72fb      	strb	r3, [r7, #11]
          break;
 800934a:	e06f      	b.n	800942c <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800934c:	687b      	ldr	r3, [r7, #4]
 800934e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8009352:	68db      	ldr	r3, [r3, #12]
 8009354:	2b00      	cmp	r3, #0
 8009356:	d00b      	beq.n	8009370 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8009358:	687b      	ldr	r3, [r7, #4]
 800935a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800935e:	68db      	ldr	r3, [r3, #12]
 8009360:	687a      	ldr	r2, [r7, #4]
 8009362:	7c12      	ldrb	r2, [r2, #16]
 8009364:	f107 0108 	add.w	r1, r7, #8
 8009368:	4610      	mov	r0, r2
 800936a:	4798      	blx	r3
 800936c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800936e:	e05d      	b.n	800942c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009370:	6839      	ldr	r1, [r7, #0]
 8009372:	6878      	ldr	r0, [r7, #4]
 8009374:	f000 fa60 	bl	8009838 <USBD_CtlError>
            err++;
 8009378:	7afb      	ldrb	r3, [r7, #11]
 800937a:	3301      	adds	r3, #1
 800937c:	72fb      	strb	r3, [r7, #11]
          break;
 800937e:	e055      	b.n	800942c <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8009380:	687b      	ldr	r3, [r7, #4]
 8009382:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8009386:	691b      	ldr	r3, [r3, #16]
 8009388:	2b00      	cmp	r3, #0
 800938a:	d00b      	beq.n	80093a4 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800938c:	687b      	ldr	r3, [r7, #4]
 800938e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8009392:	691b      	ldr	r3, [r3, #16]
 8009394:	687a      	ldr	r2, [r7, #4]
 8009396:	7c12      	ldrb	r2, [r2, #16]
 8009398:	f107 0108 	add.w	r1, r7, #8
 800939c:	4610      	mov	r0, r2
 800939e:	4798      	blx	r3
 80093a0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80093a2:	e043      	b.n	800942c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80093a4:	6839      	ldr	r1, [r7, #0]
 80093a6:	6878      	ldr	r0, [r7, #4]
 80093a8:	f000 fa46 	bl	8009838 <USBD_CtlError>
            err++;
 80093ac:	7afb      	ldrb	r3, [r7, #11]
 80093ae:	3301      	adds	r3, #1
 80093b0:	72fb      	strb	r3, [r7, #11]
          break;
 80093b2:	e03b      	b.n	800942c <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80093b4:	687b      	ldr	r3, [r7, #4]
 80093b6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 80093ba:	695b      	ldr	r3, [r3, #20]
 80093bc:	2b00      	cmp	r3, #0
 80093be:	d00b      	beq.n	80093d8 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80093c0:	687b      	ldr	r3, [r7, #4]
 80093c2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 80093c6:	695b      	ldr	r3, [r3, #20]
 80093c8:	687a      	ldr	r2, [r7, #4]
 80093ca:	7c12      	ldrb	r2, [r2, #16]
 80093cc:	f107 0108 	add.w	r1, r7, #8
 80093d0:	4610      	mov	r0, r2
 80093d2:	4798      	blx	r3
 80093d4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80093d6:	e029      	b.n	800942c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80093d8:	6839      	ldr	r1, [r7, #0]
 80093da:	6878      	ldr	r0, [r7, #4]
 80093dc:	f000 fa2c 	bl	8009838 <USBD_CtlError>
            err++;
 80093e0:	7afb      	ldrb	r3, [r7, #11]
 80093e2:	3301      	adds	r3, #1
 80093e4:	72fb      	strb	r3, [r7, #11]
          break;
 80093e6:	e021      	b.n	800942c <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80093e8:	687b      	ldr	r3, [r7, #4]
 80093ea:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 80093ee:	699b      	ldr	r3, [r3, #24]
 80093f0:	2b00      	cmp	r3, #0
 80093f2:	d00b      	beq.n	800940c <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80093f4:	687b      	ldr	r3, [r7, #4]
 80093f6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 80093fa:	699b      	ldr	r3, [r3, #24]
 80093fc:	687a      	ldr	r2, [r7, #4]
 80093fe:	7c12      	ldrb	r2, [r2, #16]
 8009400:	f107 0108 	add.w	r1, r7, #8
 8009404:	4610      	mov	r0, r2
 8009406:	4798      	blx	r3
 8009408:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800940a:	e00f      	b.n	800942c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800940c:	6839      	ldr	r1, [r7, #0]
 800940e:	6878      	ldr	r0, [r7, #4]
 8009410:	f000 fa12 	bl	8009838 <USBD_CtlError>
            err++;
 8009414:	7afb      	ldrb	r3, [r7, #11]
 8009416:	3301      	adds	r3, #1
 8009418:	72fb      	strb	r3, [r7, #11]
          break;
 800941a:	e007      	b.n	800942c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 800941c:	6839      	ldr	r1, [r7, #0]
 800941e:	6878      	ldr	r0, [r7, #4]
 8009420:	f000 fa0a 	bl	8009838 <USBD_CtlError>
          err++;
 8009424:	7afb      	ldrb	r3, [r7, #11]
 8009426:	3301      	adds	r3, #1
 8009428:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 800942a:	e038      	b.n	800949e <USBD_GetDescriptor+0x286>
 800942c:	e037      	b.n	800949e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800942e:	687b      	ldr	r3, [r7, #4]
 8009430:	7c1b      	ldrb	r3, [r3, #16]
 8009432:	2b00      	cmp	r3, #0
 8009434:	d109      	bne.n	800944a <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8009436:	687b      	ldr	r3, [r7, #4]
 8009438:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800943c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800943e:	f107 0208 	add.w	r2, r7, #8
 8009442:	4610      	mov	r0, r2
 8009444:	4798      	blx	r3
 8009446:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009448:	e029      	b.n	800949e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800944a:	6839      	ldr	r1, [r7, #0]
 800944c:	6878      	ldr	r0, [r7, #4]
 800944e:	f000 f9f3 	bl	8009838 <USBD_CtlError>
        err++;
 8009452:	7afb      	ldrb	r3, [r7, #11]
 8009454:	3301      	adds	r3, #1
 8009456:	72fb      	strb	r3, [r7, #11]
      break;
 8009458:	e021      	b.n	800949e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800945a:	687b      	ldr	r3, [r7, #4]
 800945c:	7c1b      	ldrb	r3, [r3, #16]
 800945e:	2b00      	cmp	r3, #0
 8009460:	d10d      	bne.n	800947e <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8009462:	687b      	ldr	r3, [r7, #4]
 8009464:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009468:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800946a:	f107 0208 	add.w	r2, r7, #8
 800946e:	4610      	mov	r0, r2
 8009470:	4798      	blx	r3
 8009472:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8009474:	68fb      	ldr	r3, [r7, #12]
 8009476:	3301      	adds	r3, #1
 8009478:	2207      	movs	r2, #7
 800947a:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800947c:	e00f      	b.n	800949e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800947e:	6839      	ldr	r1, [r7, #0]
 8009480:	6878      	ldr	r0, [r7, #4]
 8009482:	f000 f9d9 	bl	8009838 <USBD_CtlError>
        err++;
 8009486:	7afb      	ldrb	r3, [r7, #11]
 8009488:	3301      	adds	r3, #1
 800948a:	72fb      	strb	r3, [r7, #11]
      break;
 800948c:	e007      	b.n	800949e <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800948e:	6839      	ldr	r1, [r7, #0]
 8009490:	6878      	ldr	r0, [r7, #4]
 8009492:	f000 f9d1 	bl	8009838 <USBD_CtlError>
      err++;
 8009496:	7afb      	ldrb	r3, [r7, #11]
 8009498:	3301      	adds	r3, #1
 800949a:	72fb      	strb	r3, [r7, #11]
      break;
 800949c:	bf00      	nop
  }

  if (err != 0U)
 800949e:	7afb      	ldrb	r3, [r7, #11]
 80094a0:	2b00      	cmp	r3, #0
 80094a2:	d11c      	bne.n	80094de <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 80094a4:	893b      	ldrh	r3, [r7, #8]
 80094a6:	2b00      	cmp	r3, #0
 80094a8:	d011      	beq.n	80094ce <USBD_GetDescriptor+0x2b6>
 80094aa:	683b      	ldr	r3, [r7, #0]
 80094ac:	88db      	ldrh	r3, [r3, #6]
 80094ae:	2b00      	cmp	r3, #0
 80094b0:	d00d      	beq.n	80094ce <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 80094b2:	683b      	ldr	r3, [r7, #0]
 80094b4:	88da      	ldrh	r2, [r3, #6]
 80094b6:	893b      	ldrh	r3, [r7, #8]
 80094b8:	4293      	cmp	r3, r2
 80094ba:	bf28      	it	cs
 80094bc:	4613      	movcs	r3, r2
 80094be:	b29b      	uxth	r3, r3
 80094c0:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 80094c2:	893b      	ldrh	r3, [r7, #8]
 80094c4:	461a      	mov	r2, r3
 80094c6:	68f9      	ldr	r1, [r7, #12]
 80094c8:	6878      	ldr	r0, [r7, #4]
 80094ca:	f000 fa1f 	bl	800990c <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 80094ce:	683b      	ldr	r3, [r7, #0]
 80094d0:	88db      	ldrh	r3, [r3, #6]
 80094d2:	2b00      	cmp	r3, #0
 80094d4:	d104      	bne.n	80094e0 <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 80094d6:	6878      	ldr	r0, [r7, #4]
 80094d8:	f000 fa76 	bl	80099c8 <USBD_CtlSendStatus>
 80094dc:	e000      	b.n	80094e0 <USBD_GetDescriptor+0x2c8>
    return;
 80094de:	bf00      	nop
    }
  }
}
 80094e0:	3710      	adds	r7, #16
 80094e2:	46bd      	mov	sp, r7
 80094e4:	bd80      	pop	{r7, pc}
 80094e6:	bf00      	nop

080094e8 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 80094e8:	b580      	push	{r7, lr}
 80094ea:	b084      	sub	sp, #16
 80094ec:	af00      	add	r7, sp, #0
 80094ee:	6078      	str	r0, [r7, #4]
 80094f0:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80094f2:	683b      	ldr	r3, [r7, #0]
 80094f4:	889b      	ldrh	r3, [r3, #4]
 80094f6:	2b00      	cmp	r3, #0
 80094f8:	d130      	bne.n	800955c <USBD_SetAddress+0x74>
 80094fa:	683b      	ldr	r3, [r7, #0]
 80094fc:	88db      	ldrh	r3, [r3, #6]
 80094fe:	2b00      	cmp	r3, #0
 8009500:	d12c      	bne.n	800955c <USBD_SetAddress+0x74>
 8009502:	683b      	ldr	r3, [r7, #0]
 8009504:	885b      	ldrh	r3, [r3, #2]
 8009506:	2b7f      	cmp	r3, #127	@ 0x7f
 8009508:	d828      	bhi.n	800955c <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800950a:	683b      	ldr	r3, [r7, #0]
 800950c:	885b      	ldrh	r3, [r3, #2]
 800950e:	b2db      	uxtb	r3, r3
 8009510:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009514:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009516:	687b      	ldr	r3, [r7, #4]
 8009518:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800951c:	2b03      	cmp	r3, #3
 800951e:	d104      	bne.n	800952a <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8009520:	6839      	ldr	r1, [r7, #0]
 8009522:	6878      	ldr	r0, [r7, #4]
 8009524:	f000 f988 	bl	8009838 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009528:	e01d      	b.n	8009566 <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800952a:	687b      	ldr	r3, [r7, #4]
 800952c:	7bfa      	ldrb	r2, [r7, #15]
 800952e:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 8009532:	7bfb      	ldrb	r3, [r7, #15]
 8009534:	4619      	mov	r1, r3
 8009536:	6878      	ldr	r0, [r7, #4]
 8009538:	f000 fe51 	bl	800a1de <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 800953c:	6878      	ldr	r0, [r7, #4]
 800953e:	f000 fa43 	bl	80099c8 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8009542:	7bfb      	ldrb	r3, [r7, #15]
 8009544:	2b00      	cmp	r3, #0
 8009546:	d004      	beq.n	8009552 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8009548:	687b      	ldr	r3, [r7, #4]
 800954a:	2202      	movs	r2, #2
 800954c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009550:	e009      	b.n	8009566 <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8009552:	687b      	ldr	r3, [r7, #4]
 8009554:	2201      	movs	r2, #1
 8009556:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800955a:	e004      	b.n	8009566 <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800955c:	6839      	ldr	r1, [r7, #0]
 800955e:	6878      	ldr	r0, [r7, #4]
 8009560:	f000 f96a 	bl	8009838 <USBD_CtlError>
  }
}
 8009564:	bf00      	nop
 8009566:	bf00      	nop
 8009568:	3710      	adds	r7, #16
 800956a:	46bd      	mov	sp, r7
 800956c:	bd80      	pop	{r7, pc}
	...

08009570 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009570:	b580      	push	{r7, lr}
 8009572:	b082      	sub	sp, #8
 8009574:	af00      	add	r7, sp, #0
 8009576:	6078      	str	r0, [r7, #4]
 8009578:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800957a:	683b      	ldr	r3, [r7, #0]
 800957c:	885b      	ldrh	r3, [r3, #2]
 800957e:	b2da      	uxtb	r2, r3
 8009580:	4b41      	ldr	r3, [pc, #260]	@ (8009688 <USBD_SetConfig+0x118>)
 8009582:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8009584:	4b40      	ldr	r3, [pc, #256]	@ (8009688 <USBD_SetConfig+0x118>)
 8009586:	781b      	ldrb	r3, [r3, #0]
 8009588:	2b01      	cmp	r3, #1
 800958a:	d904      	bls.n	8009596 <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 800958c:	6839      	ldr	r1, [r7, #0]
 800958e:	6878      	ldr	r0, [r7, #4]
 8009590:	f000 f952 	bl	8009838 <USBD_CtlError>
 8009594:	e075      	b.n	8009682 <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 8009596:	687b      	ldr	r3, [r7, #4]
 8009598:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800959c:	2b02      	cmp	r3, #2
 800959e:	d002      	beq.n	80095a6 <USBD_SetConfig+0x36>
 80095a0:	2b03      	cmp	r3, #3
 80095a2:	d023      	beq.n	80095ec <USBD_SetConfig+0x7c>
 80095a4:	e062      	b.n	800966c <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 80095a6:	4b38      	ldr	r3, [pc, #224]	@ (8009688 <USBD_SetConfig+0x118>)
 80095a8:	781b      	ldrb	r3, [r3, #0]
 80095aa:	2b00      	cmp	r3, #0
 80095ac:	d01a      	beq.n	80095e4 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 80095ae:	4b36      	ldr	r3, [pc, #216]	@ (8009688 <USBD_SetConfig+0x118>)
 80095b0:	781b      	ldrb	r3, [r3, #0]
 80095b2:	461a      	mov	r2, r3
 80095b4:	687b      	ldr	r3, [r7, #4]
 80095b6:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 80095b8:	687b      	ldr	r3, [r7, #4]
 80095ba:	2203      	movs	r2, #3
 80095bc:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 80095c0:	4b31      	ldr	r3, [pc, #196]	@ (8009688 <USBD_SetConfig+0x118>)
 80095c2:	781b      	ldrb	r3, [r3, #0]
 80095c4:	4619      	mov	r1, r3
 80095c6:	6878      	ldr	r0, [r7, #4]
 80095c8:	f7ff f9e7 	bl	800899a <USBD_SetClassConfig>
 80095cc:	4603      	mov	r3, r0
 80095ce:	2b02      	cmp	r3, #2
 80095d0:	d104      	bne.n	80095dc <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 80095d2:	6839      	ldr	r1, [r7, #0]
 80095d4:	6878      	ldr	r0, [r7, #4]
 80095d6:	f000 f92f 	bl	8009838 <USBD_CtlError>
            return;
 80095da:	e052      	b.n	8009682 <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 80095dc:	6878      	ldr	r0, [r7, #4]
 80095de:	f000 f9f3 	bl	80099c8 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 80095e2:	e04e      	b.n	8009682 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 80095e4:	6878      	ldr	r0, [r7, #4]
 80095e6:	f000 f9ef 	bl	80099c8 <USBD_CtlSendStatus>
        break;
 80095ea:	e04a      	b.n	8009682 <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 80095ec:	4b26      	ldr	r3, [pc, #152]	@ (8009688 <USBD_SetConfig+0x118>)
 80095ee:	781b      	ldrb	r3, [r3, #0]
 80095f0:	2b00      	cmp	r3, #0
 80095f2:	d112      	bne.n	800961a <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80095f4:	687b      	ldr	r3, [r7, #4]
 80095f6:	2202      	movs	r2, #2
 80095f8:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
          pdev->dev_config = cfgidx;
 80095fc:	4b22      	ldr	r3, [pc, #136]	@ (8009688 <USBD_SetConfig+0x118>)
 80095fe:	781b      	ldrb	r3, [r3, #0]
 8009600:	461a      	mov	r2, r3
 8009602:	687b      	ldr	r3, [r7, #4]
 8009604:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 8009606:	4b20      	ldr	r3, [pc, #128]	@ (8009688 <USBD_SetConfig+0x118>)
 8009608:	781b      	ldrb	r3, [r3, #0]
 800960a:	4619      	mov	r1, r3
 800960c:	6878      	ldr	r0, [r7, #4]
 800960e:	f7ff f9e3 	bl	80089d8 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 8009612:	6878      	ldr	r0, [r7, #4]
 8009614:	f000 f9d8 	bl	80099c8 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8009618:	e033      	b.n	8009682 <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 800961a:	4b1b      	ldr	r3, [pc, #108]	@ (8009688 <USBD_SetConfig+0x118>)
 800961c:	781b      	ldrb	r3, [r3, #0]
 800961e:	461a      	mov	r2, r3
 8009620:	687b      	ldr	r3, [r7, #4]
 8009622:	685b      	ldr	r3, [r3, #4]
 8009624:	429a      	cmp	r2, r3
 8009626:	d01d      	beq.n	8009664 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8009628:	687b      	ldr	r3, [r7, #4]
 800962a:	685b      	ldr	r3, [r3, #4]
 800962c:	b2db      	uxtb	r3, r3
 800962e:	4619      	mov	r1, r3
 8009630:	6878      	ldr	r0, [r7, #4]
 8009632:	f7ff f9d1 	bl	80089d8 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 8009636:	4b14      	ldr	r3, [pc, #80]	@ (8009688 <USBD_SetConfig+0x118>)
 8009638:	781b      	ldrb	r3, [r3, #0]
 800963a:	461a      	mov	r2, r3
 800963c:	687b      	ldr	r3, [r7, #4]
 800963e:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8009640:	4b11      	ldr	r3, [pc, #68]	@ (8009688 <USBD_SetConfig+0x118>)
 8009642:	781b      	ldrb	r3, [r3, #0]
 8009644:	4619      	mov	r1, r3
 8009646:	6878      	ldr	r0, [r7, #4]
 8009648:	f7ff f9a7 	bl	800899a <USBD_SetClassConfig>
 800964c:	4603      	mov	r3, r0
 800964e:	2b02      	cmp	r3, #2
 8009650:	d104      	bne.n	800965c <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 8009652:	6839      	ldr	r1, [r7, #0]
 8009654:	6878      	ldr	r0, [r7, #4]
 8009656:	f000 f8ef 	bl	8009838 <USBD_CtlError>
            return;
 800965a:	e012      	b.n	8009682 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800965c:	6878      	ldr	r0, [r7, #4]
 800965e:	f000 f9b3 	bl	80099c8 <USBD_CtlSendStatus>
        break;
 8009662:	e00e      	b.n	8009682 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8009664:	6878      	ldr	r0, [r7, #4]
 8009666:	f000 f9af 	bl	80099c8 <USBD_CtlSendStatus>
        break;
 800966a:	e00a      	b.n	8009682 <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 800966c:	6839      	ldr	r1, [r7, #0]
 800966e:	6878      	ldr	r0, [r7, #4]
 8009670:	f000 f8e2 	bl	8009838 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 8009674:	4b04      	ldr	r3, [pc, #16]	@ (8009688 <USBD_SetConfig+0x118>)
 8009676:	781b      	ldrb	r3, [r3, #0]
 8009678:	4619      	mov	r1, r3
 800967a:	6878      	ldr	r0, [r7, #4]
 800967c:	f7ff f9ac 	bl	80089d8 <USBD_ClrClassConfig>
        break;
 8009680:	bf00      	nop
    }
  }
}
 8009682:	3708      	adds	r7, #8
 8009684:	46bd      	mov	sp, r7
 8009686:	bd80      	pop	{r7, pc}
 8009688:	200003fc 	.word	0x200003fc

0800968c <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800968c:	b580      	push	{r7, lr}
 800968e:	b082      	sub	sp, #8
 8009690:	af00      	add	r7, sp, #0
 8009692:	6078      	str	r0, [r7, #4]
 8009694:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8009696:	683b      	ldr	r3, [r7, #0]
 8009698:	88db      	ldrh	r3, [r3, #6]
 800969a:	2b01      	cmp	r3, #1
 800969c:	d004      	beq.n	80096a8 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800969e:	6839      	ldr	r1, [r7, #0]
 80096a0:	6878      	ldr	r0, [r7, #4]
 80096a2:	f000 f8c9 	bl	8009838 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 80096a6:	e022      	b.n	80096ee <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 80096a8:	687b      	ldr	r3, [r7, #4]
 80096aa:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80096ae:	2b02      	cmp	r3, #2
 80096b0:	dc02      	bgt.n	80096b8 <USBD_GetConfig+0x2c>
 80096b2:	2b00      	cmp	r3, #0
 80096b4:	dc03      	bgt.n	80096be <USBD_GetConfig+0x32>
 80096b6:	e015      	b.n	80096e4 <USBD_GetConfig+0x58>
 80096b8:	2b03      	cmp	r3, #3
 80096ba:	d00b      	beq.n	80096d4 <USBD_GetConfig+0x48>
 80096bc:	e012      	b.n	80096e4 <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 80096be:	687b      	ldr	r3, [r7, #4]
 80096c0:	2200      	movs	r2, #0
 80096c2:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 80096c4:	687b      	ldr	r3, [r7, #4]
 80096c6:	3308      	adds	r3, #8
 80096c8:	2201      	movs	r2, #1
 80096ca:	4619      	mov	r1, r3
 80096cc:	6878      	ldr	r0, [r7, #4]
 80096ce:	f000 f91d 	bl	800990c <USBD_CtlSendData>
        break;
 80096d2:	e00c      	b.n	80096ee <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 80096d4:	687b      	ldr	r3, [r7, #4]
 80096d6:	3304      	adds	r3, #4
 80096d8:	2201      	movs	r2, #1
 80096da:	4619      	mov	r1, r3
 80096dc:	6878      	ldr	r0, [r7, #4]
 80096de:	f000 f915 	bl	800990c <USBD_CtlSendData>
        break;
 80096e2:	e004      	b.n	80096ee <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 80096e4:	6839      	ldr	r1, [r7, #0]
 80096e6:	6878      	ldr	r0, [r7, #4]
 80096e8:	f000 f8a6 	bl	8009838 <USBD_CtlError>
        break;
 80096ec:	bf00      	nop
}
 80096ee:	bf00      	nop
 80096f0:	3708      	adds	r7, #8
 80096f2:	46bd      	mov	sp, r7
 80096f4:	bd80      	pop	{r7, pc}

080096f6 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80096f6:	b580      	push	{r7, lr}
 80096f8:	b082      	sub	sp, #8
 80096fa:	af00      	add	r7, sp, #0
 80096fc:	6078      	str	r0, [r7, #4]
 80096fe:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8009700:	687b      	ldr	r3, [r7, #4]
 8009702:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009706:	3b01      	subs	r3, #1
 8009708:	2b02      	cmp	r3, #2
 800970a:	d81e      	bhi.n	800974a <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800970c:	683b      	ldr	r3, [r7, #0]
 800970e:	88db      	ldrh	r3, [r3, #6]
 8009710:	2b02      	cmp	r3, #2
 8009712:	d004      	beq.n	800971e <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 8009714:	6839      	ldr	r1, [r7, #0]
 8009716:	6878      	ldr	r0, [r7, #4]
 8009718:	f000 f88e 	bl	8009838 <USBD_CtlError>
        break;
 800971c:	e01a      	b.n	8009754 <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800971e:	687b      	ldr	r3, [r7, #4]
 8009720:	2201      	movs	r2, #1
 8009722:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 8009724:	687b      	ldr	r3, [r7, #4]
 8009726:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 800972a:	2b00      	cmp	r3, #0
 800972c:	d005      	beq.n	800973a <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800972e:	687b      	ldr	r3, [r7, #4]
 8009730:	68db      	ldr	r3, [r3, #12]
 8009732:	f043 0202 	orr.w	r2, r3, #2
 8009736:	687b      	ldr	r3, [r7, #4]
 8009738:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 800973a:	687b      	ldr	r3, [r7, #4]
 800973c:	330c      	adds	r3, #12
 800973e:	2202      	movs	r2, #2
 8009740:	4619      	mov	r1, r3
 8009742:	6878      	ldr	r0, [r7, #4]
 8009744:	f000 f8e2 	bl	800990c <USBD_CtlSendData>
      break;
 8009748:	e004      	b.n	8009754 <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 800974a:	6839      	ldr	r1, [r7, #0]
 800974c:	6878      	ldr	r0, [r7, #4]
 800974e:	f000 f873 	bl	8009838 <USBD_CtlError>
      break;
 8009752:	bf00      	nop
  }
}
 8009754:	bf00      	nop
 8009756:	3708      	adds	r7, #8
 8009758:	46bd      	mov	sp, r7
 800975a:	bd80      	pop	{r7, pc}

0800975c <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800975c:	b580      	push	{r7, lr}
 800975e:	b082      	sub	sp, #8
 8009760:	af00      	add	r7, sp, #0
 8009762:	6078      	str	r0, [r7, #4]
 8009764:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8009766:	683b      	ldr	r3, [r7, #0]
 8009768:	885b      	ldrh	r3, [r3, #2]
 800976a:	2b01      	cmp	r3, #1
 800976c:	d106      	bne.n	800977c <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800976e:	687b      	ldr	r3, [r7, #4]
 8009770:	2201      	movs	r2, #1
 8009772:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    USBD_CtlSendStatus(pdev);
 8009776:	6878      	ldr	r0, [r7, #4]
 8009778:	f000 f926 	bl	80099c8 <USBD_CtlSendStatus>
  }
}
 800977c:	bf00      	nop
 800977e:	3708      	adds	r7, #8
 8009780:	46bd      	mov	sp, r7
 8009782:	bd80      	pop	{r7, pc}

08009784 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8009784:	b580      	push	{r7, lr}
 8009786:	b082      	sub	sp, #8
 8009788:	af00      	add	r7, sp, #0
 800978a:	6078      	str	r0, [r7, #4]
 800978c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800978e:	687b      	ldr	r3, [r7, #4]
 8009790:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009794:	3b01      	subs	r3, #1
 8009796:	2b02      	cmp	r3, #2
 8009798:	d80b      	bhi.n	80097b2 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800979a:	683b      	ldr	r3, [r7, #0]
 800979c:	885b      	ldrh	r3, [r3, #2]
 800979e:	2b01      	cmp	r3, #1
 80097a0:	d10c      	bne.n	80097bc <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 80097a2:	687b      	ldr	r3, [r7, #4]
 80097a4:	2200      	movs	r2, #0
 80097a6:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        USBD_CtlSendStatus(pdev);
 80097aa:	6878      	ldr	r0, [r7, #4]
 80097ac:	f000 f90c 	bl	80099c8 <USBD_CtlSendStatus>
      }
      break;
 80097b0:	e004      	b.n	80097bc <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 80097b2:	6839      	ldr	r1, [r7, #0]
 80097b4:	6878      	ldr	r0, [r7, #4]
 80097b6:	f000 f83f 	bl	8009838 <USBD_CtlError>
      break;
 80097ba:	e000      	b.n	80097be <USBD_ClrFeature+0x3a>
      break;
 80097bc:	bf00      	nop
  }
}
 80097be:	bf00      	nop
 80097c0:	3708      	adds	r7, #8
 80097c2:	46bd      	mov	sp, r7
 80097c4:	bd80      	pop	{r7, pc}

080097c6 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 80097c6:	b480      	push	{r7}
 80097c8:	b083      	sub	sp, #12
 80097ca:	af00      	add	r7, sp, #0
 80097cc:	6078      	str	r0, [r7, #4]
 80097ce:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 80097d0:	683b      	ldr	r3, [r7, #0]
 80097d2:	781a      	ldrb	r2, [r3, #0]
 80097d4:	687b      	ldr	r3, [r7, #4]
 80097d6:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 80097d8:	683b      	ldr	r3, [r7, #0]
 80097da:	785a      	ldrb	r2, [r3, #1]
 80097dc:	687b      	ldr	r3, [r7, #4]
 80097de:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 80097e0:	683b      	ldr	r3, [r7, #0]
 80097e2:	3302      	adds	r3, #2
 80097e4:	781b      	ldrb	r3, [r3, #0]
 80097e6:	461a      	mov	r2, r3
 80097e8:	683b      	ldr	r3, [r7, #0]
 80097ea:	3303      	adds	r3, #3
 80097ec:	781b      	ldrb	r3, [r3, #0]
 80097ee:	021b      	lsls	r3, r3, #8
 80097f0:	b29b      	uxth	r3, r3
 80097f2:	4413      	add	r3, r2
 80097f4:	b29a      	uxth	r2, r3
 80097f6:	687b      	ldr	r3, [r7, #4]
 80097f8:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 80097fa:	683b      	ldr	r3, [r7, #0]
 80097fc:	3304      	adds	r3, #4
 80097fe:	781b      	ldrb	r3, [r3, #0]
 8009800:	461a      	mov	r2, r3
 8009802:	683b      	ldr	r3, [r7, #0]
 8009804:	3305      	adds	r3, #5
 8009806:	781b      	ldrb	r3, [r3, #0]
 8009808:	021b      	lsls	r3, r3, #8
 800980a:	b29b      	uxth	r3, r3
 800980c:	4413      	add	r3, r2
 800980e:	b29a      	uxth	r2, r3
 8009810:	687b      	ldr	r3, [r7, #4]
 8009812:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 8009814:	683b      	ldr	r3, [r7, #0]
 8009816:	3306      	adds	r3, #6
 8009818:	781b      	ldrb	r3, [r3, #0]
 800981a:	461a      	mov	r2, r3
 800981c:	683b      	ldr	r3, [r7, #0]
 800981e:	3307      	adds	r3, #7
 8009820:	781b      	ldrb	r3, [r3, #0]
 8009822:	021b      	lsls	r3, r3, #8
 8009824:	b29b      	uxth	r3, r3
 8009826:	4413      	add	r3, r2
 8009828:	b29a      	uxth	r2, r3
 800982a:	687b      	ldr	r3, [r7, #4]
 800982c:	80da      	strh	r2, [r3, #6]

}
 800982e:	bf00      	nop
 8009830:	370c      	adds	r7, #12
 8009832:	46bd      	mov	sp, r7
 8009834:	bc80      	pop	{r7}
 8009836:	4770      	bx	lr

08009838 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 8009838:	b580      	push	{r7, lr}
 800983a:	b082      	sub	sp, #8
 800983c:	af00      	add	r7, sp, #0
 800983e:	6078      	str	r0, [r7, #4]
 8009840:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 8009842:	2180      	movs	r1, #128	@ 0x80
 8009844:	6878      	ldr	r0, [r7, #4]
 8009846:	f000 fc61 	bl	800a10c <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 800984a:	2100      	movs	r1, #0
 800984c:	6878      	ldr	r0, [r7, #4]
 800984e:	f000 fc5d 	bl	800a10c <USBD_LL_StallEP>
}
 8009852:	bf00      	nop
 8009854:	3708      	adds	r7, #8
 8009856:	46bd      	mov	sp, r7
 8009858:	bd80      	pop	{r7, pc}

0800985a <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800985a:	b580      	push	{r7, lr}
 800985c:	b086      	sub	sp, #24
 800985e:	af00      	add	r7, sp, #0
 8009860:	60f8      	str	r0, [r7, #12]
 8009862:	60b9      	str	r1, [r7, #8]
 8009864:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8009866:	2300      	movs	r3, #0
 8009868:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 800986a:	68fb      	ldr	r3, [r7, #12]
 800986c:	2b00      	cmp	r3, #0
 800986e:	d032      	beq.n	80098d6 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 8009870:	68f8      	ldr	r0, [r7, #12]
 8009872:	f000 f834 	bl	80098de <USBD_GetLen>
 8009876:	4603      	mov	r3, r0
 8009878:	3301      	adds	r3, #1
 800987a:	b29b      	uxth	r3, r3
 800987c:	005b      	lsls	r3, r3, #1
 800987e:	b29a      	uxth	r2, r3
 8009880:	687b      	ldr	r3, [r7, #4]
 8009882:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 8009884:	7dfb      	ldrb	r3, [r7, #23]
 8009886:	1c5a      	adds	r2, r3, #1
 8009888:	75fa      	strb	r2, [r7, #23]
 800988a:	461a      	mov	r2, r3
 800988c:	68bb      	ldr	r3, [r7, #8]
 800988e:	4413      	add	r3, r2
 8009890:	687a      	ldr	r2, [r7, #4]
 8009892:	7812      	ldrb	r2, [r2, #0]
 8009894:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8009896:	7dfb      	ldrb	r3, [r7, #23]
 8009898:	1c5a      	adds	r2, r3, #1
 800989a:	75fa      	strb	r2, [r7, #23]
 800989c:	461a      	mov	r2, r3
 800989e:	68bb      	ldr	r3, [r7, #8]
 80098a0:	4413      	add	r3, r2
 80098a2:	2203      	movs	r2, #3
 80098a4:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 80098a6:	e012      	b.n	80098ce <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 80098a8:	68fb      	ldr	r3, [r7, #12]
 80098aa:	1c5a      	adds	r2, r3, #1
 80098ac:	60fa      	str	r2, [r7, #12]
 80098ae:	7dfa      	ldrb	r2, [r7, #23]
 80098b0:	1c51      	adds	r1, r2, #1
 80098b2:	75f9      	strb	r1, [r7, #23]
 80098b4:	4611      	mov	r1, r2
 80098b6:	68ba      	ldr	r2, [r7, #8]
 80098b8:	440a      	add	r2, r1
 80098ba:	781b      	ldrb	r3, [r3, #0]
 80098bc:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 80098be:	7dfb      	ldrb	r3, [r7, #23]
 80098c0:	1c5a      	adds	r2, r3, #1
 80098c2:	75fa      	strb	r2, [r7, #23]
 80098c4:	461a      	mov	r2, r3
 80098c6:	68bb      	ldr	r3, [r7, #8]
 80098c8:	4413      	add	r3, r2
 80098ca:	2200      	movs	r2, #0
 80098cc:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 80098ce:	68fb      	ldr	r3, [r7, #12]
 80098d0:	781b      	ldrb	r3, [r3, #0]
 80098d2:	2b00      	cmp	r3, #0
 80098d4:	d1e8      	bne.n	80098a8 <USBD_GetString+0x4e>
    }
  }
}
 80098d6:	bf00      	nop
 80098d8:	3718      	adds	r7, #24
 80098da:	46bd      	mov	sp, r7
 80098dc:	bd80      	pop	{r7, pc}

080098de <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80098de:	b480      	push	{r7}
 80098e0:	b085      	sub	sp, #20
 80098e2:	af00      	add	r7, sp, #0
 80098e4:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 80098e6:	2300      	movs	r3, #0
 80098e8:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 80098ea:	e005      	b.n	80098f8 <USBD_GetLen+0x1a>
  {
    len++;
 80098ec:	7bfb      	ldrb	r3, [r7, #15]
 80098ee:	3301      	adds	r3, #1
 80098f0:	73fb      	strb	r3, [r7, #15]
    buf++;
 80098f2:	687b      	ldr	r3, [r7, #4]
 80098f4:	3301      	adds	r3, #1
 80098f6:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 80098f8:	687b      	ldr	r3, [r7, #4]
 80098fa:	781b      	ldrb	r3, [r3, #0]
 80098fc:	2b00      	cmp	r3, #0
 80098fe:	d1f5      	bne.n	80098ec <USBD_GetLen+0xe>
  }

  return len;
 8009900:	7bfb      	ldrb	r3, [r7, #15]
}
 8009902:	4618      	mov	r0, r3
 8009904:	3714      	adds	r7, #20
 8009906:	46bd      	mov	sp, r7
 8009908:	bc80      	pop	{r7}
 800990a:	4770      	bx	lr

0800990c <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 800990c:	b580      	push	{r7, lr}
 800990e:	b084      	sub	sp, #16
 8009910:	af00      	add	r7, sp, #0
 8009912:	60f8      	str	r0, [r7, #12]
 8009914:	60b9      	str	r1, [r7, #8]
 8009916:	4613      	mov	r3, r2
 8009918:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800991a:	68fb      	ldr	r3, [r7, #12]
 800991c:	2202      	movs	r2, #2
 800991e:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 8009922:	88fa      	ldrh	r2, [r7, #6]
 8009924:	68fb      	ldr	r3, [r7, #12]
 8009926:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 8009928:	88fa      	ldrh	r2, [r7, #6]
 800992a:	68fb      	ldr	r3, [r7, #12]
 800992c:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800992e:	88fb      	ldrh	r3, [r7, #6]
 8009930:	68ba      	ldr	r2, [r7, #8]
 8009932:	2100      	movs	r1, #0
 8009934:	68f8      	ldr	r0, [r7, #12]
 8009936:	f000 fc71 	bl	800a21c <USBD_LL_Transmit>

  return USBD_OK;
 800993a:	2300      	movs	r3, #0
}
 800993c:	4618      	mov	r0, r3
 800993e:	3710      	adds	r7, #16
 8009940:	46bd      	mov	sp, r7
 8009942:	bd80      	pop	{r7, pc}

08009944 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 8009944:	b580      	push	{r7, lr}
 8009946:	b084      	sub	sp, #16
 8009948:	af00      	add	r7, sp, #0
 800994a:	60f8      	str	r0, [r7, #12]
 800994c:	60b9      	str	r1, [r7, #8]
 800994e:	4613      	mov	r3, r2
 8009950:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8009952:	88fb      	ldrh	r3, [r7, #6]
 8009954:	68ba      	ldr	r2, [r7, #8]
 8009956:	2100      	movs	r1, #0
 8009958:	68f8      	ldr	r0, [r7, #12]
 800995a:	f000 fc5f 	bl	800a21c <USBD_LL_Transmit>

  return USBD_OK;
 800995e:	2300      	movs	r3, #0
}
 8009960:	4618      	mov	r0, r3
 8009962:	3710      	adds	r7, #16
 8009964:	46bd      	mov	sp, r7
 8009966:	bd80      	pop	{r7, pc}

08009968 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 8009968:	b580      	push	{r7, lr}
 800996a:	b084      	sub	sp, #16
 800996c:	af00      	add	r7, sp, #0
 800996e:	60f8      	str	r0, [r7, #12]
 8009970:	60b9      	str	r1, [r7, #8]
 8009972:	4613      	mov	r3, r2
 8009974:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8009976:	68fb      	ldr	r3, [r7, #12]
 8009978:	2203      	movs	r2, #3
 800997a:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 800997e:	88fa      	ldrh	r2, [r7, #6]
 8009980:	68fb      	ldr	r3, [r7, #12]
 8009982:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
  pdev->ep_out[0].rem_length   = len;
 8009986:	88fa      	ldrh	r2, [r7, #6]
 8009988:	68fb      	ldr	r3, [r7, #12]
 800998a:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800998e:	88fb      	ldrh	r3, [r7, #6]
 8009990:	68ba      	ldr	r2, [r7, #8]
 8009992:	2100      	movs	r1, #0
 8009994:	68f8      	ldr	r0, [r7, #12]
 8009996:	f000 fc64 	bl	800a262 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800999a:	2300      	movs	r3, #0
}
 800999c:	4618      	mov	r0, r3
 800999e:	3710      	adds	r7, #16
 80099a0:	46bd      	mov	sp, r7
 80099a2:	bd80      	pop	{r7, pc}

080099a4 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 80099a4:	b580      	push	{r7, lr}
 80099a6:	b084      	sub	sp, #16
 80099a8:	af00      	add	r7, sp, #0
 80099aa:	60f8      	str	r0, [r7, #12]
 80099ac:	60b9      	str	r1, [r7, #8]
 80099ae:	4613      	mov	r3, r2
 80099b0:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80099b2:	88fb      	ldrh	r3, [r7, #6]
 80099b4:	68ba      	ldr	r2, [r7, #8]
 80099b6:	2100      	movs	r1, #0
 80099b8:	68f8      	ldr	r0, [r7, #12]
 80099ba:	f000 fc52 	bl	800a262 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80099be:	2300      	movs	r3, #0
}
 80099c0:	4618      	mov	r0, r3
 80099c2:	3710      	adds	r7, #16
 80099c4:	46bd      	mov	sp, r7
 80099c6:	bd80      	pop	{r7, pc}

080099c8 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 80099c8:	b580      	push	{r7, lr}
 80099ca:	b082      	sub	sp, #8
 80099cc:	af00      	add	r7, sp, #0
 80099ce:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80099d0:	687b      	ldr	r3, [r7, #4]
 80099d2:	2204      	movs	r2, #4
 80099d4:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80099d8:	2300      	movs	r3, #0
 80099da:	2200      	movs	r2, #0
 80099dc:	2100      	movs	r1, #0
 80099de:	6878      	ldr	r0, [r7, #4]
 80099e0:	f000 fc1c 	bl	800a21c <USBD_LL_Transmit>

  return USBD_OK;
 80099e4:	2300      	movs	r3, #0
}
 80099e6:	4618      	mov	r0, r3
 80099e8:	3708      	adds	r7, #8
 80099ea:	46bd      	mov	sp, r7
 80099ec:	bd80      	pop	{r7, pc}

080099ee <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 80099ee:	b580      	push	{r7, lr}
 80099f0:	b082      	sub	sp, #8
 80099f2:	af00      	add	r7, sp, #0
 80099f4:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80099f6:	687b      	ldr	r3, [r7, #4]
 80099f8:	2205      	movs	r2, #5
 80099fa:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80099fe:	2300      	movs	r3, #0
 8009a00:	2200      	movs	r2, #0
 8009a02:	2100      	movs	r1, #0
 8009a04:	6878      	ldr	r0, [r7, #4]
 8009a06:	f000 fc2c 	bl	800a262 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009a0a:	2300      	movs	r3, #0
}
 8009a0c:	4618      	mov	r0, r3
 8009a0e:	3708      	adds	r7, #8
 8009a10:	46bd      	mov	sp, r7
 8009a12:	bd80      	pop	{r7, pc}

08009a14 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8009a14:	b580      	push	{r7, lr}
 8009a16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8009a18:	2200      	movs	r2, #0
 8009a1a:	4912      	ldr	r1, [pc, #72]	@ (8009a64 <MX_USB_DEVICE_Init+0x50>)
 8009a1c:	4812      	ldr	r0, [pc, #72]	@ (8009a68 <MX_USB_DEVICE_Init+0x54>)
 8009a1e:	f7fe ff62 	bl	80088e6 <USBD_Init>
 8009a22:	4603      	mov	r3, r0
 8009a24:	2b00      	cmp	r3, #0
 8009a26:	d001      	beq.n	8009a2c <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8009a28:	f7f8 f994 	bl	8001d54 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8009a2c:	490f      	ldr	r1, [pc, #60]	@ (8009a6c <MX_USB_DEVICE_Init+0x58>)
 8009a2e:	480e      	ldr	r0, [pc, #56]	@ (8009a68 <MX_USB_DEVICE_Init+0x54>)
 8009a30:	f7fe ff84 	bl	800893c <USBD_RegisterClass>
 8009a34:	4603      	mov	r3, r0
 8009a36:	2b00      	cmp	r3, #0
 8009a38:	d001      	beq.n	8009a3e <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8009a3a:	f7f8 f98b 	bl	8001d54 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8009a3e:	490c      	ldr	r1, [pc, #48]	@ (8009a70 <MX_USB_DEVICE_Init+0x5c>)
 8009a40:	4809      	ldr	r0, [pc, #36]	@ (8009a68 <MX_USB_DEVICE_Init+0x54>)
 8009a42:	f7fe feb5 	bl	80087b0 <USBD_CDC_RegisterInterface>
 8009a46:	4603      	mov	r3, r0
 8009a48:	2b00      	cmp	r3, #0
 8009a4a:	d001      	beq.n	8009a50 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8009a4c:	f7f8 f982 	bl	8001d54 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8009a50:	4805      	ldr	r0, [pc, #20]	@ (8009a68 <MX_USB_DEVICE_Init+0x54>)
 8009a52:	f7fe ff8c 	bl	800896e <USBD_Start>
 8009a56:	4603      	mov	r3, r0
 8009a58:	2b00      	cmp	r3, #0
 8009a5a:	d001      	beq.n	8009a60 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8009a5c:	f7f8 f97a 	bl	8001d54 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8009a60:	bf00      	nop
 8009a62:	bd80      	pop	{r7, pc}
 8009a64:	2000012c 	.word	0x2000012c
 8009a68:	20000400 	.word	0x20000400
 8009a6c:	20000018 	.word	0x20000018
 8009a70:	2000011c 	.word	0x2000011c

08009a74 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8009a74:	b580      	push	{r7, lr}
 8009a76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8009a78:	2200      	movs	r2, #0
 8009a7a:	4905      	ldr	r1, [pc, #20]	@ (8009a90 <CDC_Init_FS+0x1c>)
 8009a7c:	4805      	ldr	r0, [pc, #20]	@ (8009a94 <CDC_Init_FS+0x20>)
 8009a7e:	f7fe fead 	bl	80087dc <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8009a82:	4905      	ldr	r1, [pc, #20]	@ (8009a98 <CDC_Init_FS+0x24>)
 8009a84:	4803      	ldr	r0, [pc, #12]	@ (8009a94 <CDC_Init_FS+0x20>)
 8009a86:	f7fe fec2 	bl	800880e <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8009a8a:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8009a8c:	4618      	mov	r0, r3
 8009a8e:	bd80      	pop	{r7, pc}
 8009a90:	20000ac4 	.word	0x20000ac4
 8009a94:	20000400 	.word	0x20000400
 8009a98:	200006c4 	.word	0x200006c4

08009a9c <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8009a9c:	b480      	push	{r7}
 8009a9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8009aa0:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8009aa2:	4618      	mov	r0, r3
 8009aa4:	46bd      	mov	sp, r7
 8009aa6:	bc80      	pop	{r7}
 8009aa8:	4770      	bx	lr
	...

08009aac <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8009aac:	b480      	push	{r7}
 8009aae:	b083      	sub	sp, #12
 8009ab0:	af00      	add	r7, sp, #0
 8009ab2:	4603      	mov	r3, r0
 8009ab4:	6039      	str	r1, [r7, #0]
 8009ab6:	71fb      	strb	r3, [r7, #7]
 8009ab8:	4613      	mov	r3, r2
 8009aba:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8009abc:	79fb      	ldrb	r3, [r7, #7]
 8009abe:	2b23      	cmp	r3, #35	@ 0x23
 8009ac0:	d84a      	bhi.n	8009b58 <CDC_Control_FS+0xac>
 8009ac2:	a201      	add	r2, pc, #4	@ (adr r2, 8009ac8 <CDC_Control_FS+0x1c>)
 8009ac4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009ac8:	08009b59 	.word	0x08009b59
 8009acc:	08009b59 	.word	0x08009b59
 8009ad0:	08009b59 	.word	0x08009b59
 8009ad4:	08009b59 	.word	0x08009b59
 8009ad8:	08009b59 	.word	0x08009b59
 8009adc:	08009b59 	.word	0x08009b59
 8009ae0:	08009b59 	.word	0x08009b59
 8009ae4:	08009b59 	.word	0x08009b59
 8009ae8:	08009b59 	.word	0x08009b59
 8009aec:	08009b59 	.word	0x08009b59
 8009af0:	08009b59 	.word	0x08009b59
 8009af4:	08009b59 	.word	0x08009b59
 8009af8:	08009b59 	.word	0x08009b59
 8009afc:	08009b59 	.word	0x08009b59
 8009b00:	08009b59 	.word	0x08009b59
 8009b04:	08009b59 	.word	0x08009b59
 8009b08:	08009b59 	.word	0x08009b59
 8009b0c:	08009b59 	.word	0x08009b59
 8009b10:	08009b59 	.word	0x08009b59
 8009b14:	08009b59 	.word	0x08009b59
 8009b18:	08009b59 	.word	0x08009b59
 8009b1c:	08009b59 	.word	0x08009b59
 8009b20:	08009b59 	.word	0x08009b59
 8009b24:	08009b59 	.word	0x08009b59
 8009b28:	08009b59 	.word	0x08009b59
 8009b2c:	08009b59 	.word	0x08009b59
 8009b30:	08009b59 	.word	0x08009b59
 8009b34:	08009b59 	.word	0x08009b59
 8009b38:	08009b59 	.word	0x08009b59
 8009b3c:	08009b59 	.word	0x08009b59
 8009b40:	08009b59 	.word	0x08009b59
 8009b44:	08009b59 	.word	0x08009b59
 8009b48:	08009b59 	.word	0x08009b59
 8009b4c:	08009b59 	.word	0x08009b59
 8009b50:	08009b59 	.word	0x08009b59
 8009b54:	08009b59 	.word	0x08009b59
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8009b58:	bf00      	nop
  }

  return (USBD_OK);
 8009b5a:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8009b5c:	4618      	mov	r0, r3
 8009b5e:	370c      	adds	r7, #12
 8009b60:	46bd      	mov	sp, r7
 8009b62:	bc80      	pop	{r7}
 8009b64:	4770      	bx	lr
 8009b66:	bf00      	nop

08009b68 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8009b68:	b580      	push	{r7, lr}
 8009b6a:	b082      	sub	sp, #8
 8009b6c:	af00      	add	r7, sp, #0
 8009b6e:	6078      	str	r0, [r7, #4]
 8009b70:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8009b72:	6879      	ldr	r1, [r7, #4]
 8009b74:	480b      	ldr	r0, [pc, #44]	@ (8009ba4 <CDC_Receive_FS+0x3c>)
 8009b76:	f7fe fe4a 	bl	800880e <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8009b7a:	480a      	ldr	r0, [pc, #40]	@ (8009ba4 <CDC_Receive_FS+0x3c>)
 8009b7c:	f7fe fe89 	bl	8008892 <USBD_CDC_ReceivePacket>
  USB_CDC_RxHandler(UserRxBufferFS, *Len);
 8009b80:	683b      	ldr	r3, [r7, #0]
 8009b82:	681b      	ldr	r3, [r3, #0]
 8009b84:	4619      	mov	r1, r3
 8009b86:	4808      	ldr	r0, [pc, #32]	@ (8009ba8 <CDC_Receive_FS+0x40>)
 8009b88:	f7f7 ffb2 	bl	8001af0 <USB_CDC_RxHandler>
  memset(UserRxBufferFS, '\0', *Len);
 8009b8c:	683b      	ldr	r3, [r7, #0]
 8009b8e:	681b      	ldr	r3, [r3, #0]
 8009b90:	461a      	mov	r2, r3
 8009b92:	2100      	movs	r1, #0
 8009b94:	4804      	ldr	r0, [pc, #16]	@ (8009ba8 <CDC_Receive_FS+0x40>)
 8009b96:	f002 fe84 	bl	800c8a2 <memset>
  return (USBD_OK);
 8009b9a:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8009b9c:	4618      	mov	r0, r3
 8009b9e:	3708      	adds	r7, #8
 8009ba0:	46bd      	mov	sp, r7
 8009ba2:	bd80      	pop	{r7, pc}
 8009ba4:	20000400 	.word	0x20000400
 8009ba8:	200006c4 	.word	0x200006c4

08009bac <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8009bac:	b580      	push	{r7, lr}
 8009bae:	b084      	sub	sp, #16
 8009bb0:	af00      	add	r7, sp, #0
 8009bb2:	6078      	str	r0, [r7, #4]
 8009bb4:	460b      	mov	r3, r1
 8009bb6:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8009bb8:	2300      	movs	r3, #0
 8009bba:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8009bbc:	4b0d      	ldr	r3, [pc, #52]	@ (8009bf4 <CDC_Transmit_FS+0x48>)
 8009bbe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009bc2:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8009bc4:	68bb      	ldr	r3, [r7, #8]
 8009bc6:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8009bca:	2b00      	cmp	r3, #0
 8009bcc:	d001      	beq.n	8009bd2 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8009bce:	2301      	movs	r3, #1
 8009bd0:	e00b      	b.n	8009bea <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8009bd2:	887b      	ldrh	r3, [r7, #2]
 8009bd4:	461a      	mov	r2, r3
 8009bd6:	6879      	ldr	r1, [r7, #4]
 8009bd8:	4806      	ldr	r0, [pc, #24]	@ (8009bf4 <CDC_Transmit_FS+0x48>)
 8009bda:	f7fe fdff 	bl	80087dc <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8009bde:	4805      	ldr	r0, [pc, #20]	@ (8009bf4 <CDC_Transmit_FS+0x48>)
 8009be0:	f7fe fe28 	bl	8008834 <USBD_CDC_TransmitPacket>
 8009be4:	4603      	mov	r3, r0
 8009be6:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8009be8:	7bfb      	ldrb	r3, [r7, #15]
}
 8009bea:	4618      	mov	r0, r3
 8009bec:	3710      	adds	r7, #16
 8009bee:	46bd      	mov	sp, r7
 8009bf0:	bd80      	pop	{r7, pc}
 8009bf2:	bf00      	nop
 8009bf4:	20000400 	.word	0x20000400

08009bf8 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009bf8:	b480      	push	{r7}
 8009bfa:	b083      	sub	sp, #12
 8009bfc:	af00      	add	r7, sp, #0
 8009bfe:	4603      	mov	r3, r0
 8009c00:	6039      	str	r1, [r7, #0]
 8009c02:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8009c04:	683b      	ldr	r3, [r7, #0]
 8009c06:	2212      	movs	r2, #18
 8009c08:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8009c0a:	4b03      	ldr	r3, [pc, #12]	@ (8009c18 <USBD_FS_DeviceDescriptor+0x20>)
}
 8009c0c:	4618      	mov	r0, r3
 8009c0e:	370c      	adds	r7, #12
 8009c10:	46bd      	mov	sp, r7
 8009c12:	bc80      	pop	{r7}
 8009c14:	4770      	bx	lr
 8009c16:	bf00      	nop
 8009c18:	20000148 	.word	0x20000148

08009c1c <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009c1c:	b480      	push	{r7}
 8009c1e:	b083      	sub	sp, #12
 8009c20:	af00      	add	r7, sp, #0
 8009c22:	4603      	mov	r3, r0
 8009c24:	6039      	str	r1, [r7, #0]
 8009c26:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8009c28:	683b      	ldr	r3, [r7, #0]
 8009c2a:	2204      	movs	r2, #4
 8009c2c:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8009c2e:	4b03      	ldr	r3, [pc, #12]	@ (8009c3c <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8009c30:	4618      	mov	r0, r3
 8009c32:	370c      	adds	r7, #12
 8009c34:	46bd      	mov	sp, r7
 8009c36:	bc80      	pop	{r7}
 8009c38:	4770      	bx	lr
 8009c3a:	bf00      	nop
 8009c3c:	2000015c 	.word	0x2000015c

08009c40 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009c40:	b580      	push	{r7, lr}
 8009c42:	b082      	sub	sp, #8
 8009c44:	af00      	add	r7, sp, #0
 8009c46:	4603      	mov	r3, r0
 8009c48:	6039      	str	r1, [r7, #0]
 8009c4a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8009c4c:	79fb      	ldrb	r3, [r7, #7]
 8009c4e:	2b00      	cmp	r3, #0
 8009c50:	d105      	bne.n	8009c5e <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8009c52:	683a      	ldr	r2, [r7, #0]
 8009c54:	4907      	ldr	r1, [pc, #28]	@ (8009c74 <USBD_FS_ProductStrDescriptor+0x34>)
 8009c56:	4808      	ldr	r0, [pc, #32]	@ (8009c78 <USBD_FS_ProductStrDescriptor+0x38>)
 8009c58:	f7ff fdff 	bl	800985a <USBD_GetString>
 8009c5c:	e004      	b.n	8009c68 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8009c5e:	683a      	ldr	r2, [r7, #0]
 8009c60:	4904      	ldr	r1, [pc, #16]	@ (8009c74 <USBD_FS_ProductStrDescriptor+0x34>)
 8009c62:	4805      	ldr	r0, [pc, #20]	@ (8009c78 <USBD_FS_ProductStrDescriptor+0x38>)
 8009c64:	f7ff fdf9 	bl	800985a <USBD_GetString>
  }
  return USBD_StrDesc;
 8009c68:	4b02      	ldr	r3, [pc, #8]	@ (8009c74 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8009c6a:	4618      	mov	r0, r3
 8009c6c:	3708      	adds	r7, #8
 8009c6e:	46bd      	mov	sp, r7
 8009c70:	bd80      	pop	{r7, pc}
 8009c72:	bf00      	nop
 8009c74:	20000ec4 	.word	0x20000ec4
 8009c78:	0800f570 	.word	0x0800f570

08009c7c <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009c7c:	b580      	push	{r7, lr}
 8009c7e:	b082      	sub	sp, #8
 8009c80:	af00      	add	r7, sp, #0
 8009c82:	4603      	mov	r3, r0
 8009c84:	6039      	str	r1, [r7, #0]
 8009c86:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8009c88:	683a      	ldr	r2, [r7, #0]
 8009c8a:	4904      	ldr	r1, [pc, #16]	@ (8009c9c <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8009c8c:	4804      	ldr	r0, [pc, #16]	@ (8009ca0 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8009c8e:	f7ff fde4 	bl	800985a <USBD_GetString>
  return USBD_StrDesc;
 8009c92:	4b02      	ldr	r3, [pc, #8]	@ (8009c9c <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8009c94:	4618      	mov	r0, r3
 8009c96:	3708      	adds	r7, #8
 8009c98:	46bd      	mov	sp, r7
 8009c9a:	bd80      	pop	{r7, pc}
 8009c9c:	20000ec4 	.word	0x20000ec4
 8009ca0:	0800f588 	.word	0x0800f588

08009ca4 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009ca4:	b580      	push	{r7, lr}
 8009ca6:	b082      	sub	sp, #8
 8009ca8:	af00      	add	r7, sp, #0
 8009caa:	4603      	mov	r3, r0
 8009cac:	6039      	str	r1, [r7, #0]
 8009cae:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8009cb0:	683b      	ldr	r3, [r7, #0]
 8009cb2:	221a      	movs	r2, #26
 8009cb4:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8009cb6:	f000 f843 	bl	8009d40 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8009cba:	4b02      	ldr	r3, [pc, #8]	@ (8009cc4 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8009cbc:	4618      	mov	r0, r3
 8009cbe:	3708      	adds	r7, #8
 8009cc0:	46bd      	mov	sp, r7
 8009cc2:	bd80      	pop	{r7, pc}
 8009cc4:	20000160 	.word	0x20000160

08009cc8 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009cc8:	b580      	push	{r7, lr}
 8009cca:	b082      	sub	sp, #8
 8009ccc:	af00      	add	r7, sp, #0
 8009cce:	4603      	mov	r3, r0
 8009cd0:	6039      	str	r1, [r7, #0]
 8009cd2:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8009cd4:	79fb      	ldrb	r3, [r7, #7]
 8009cd6:	2b00      	cmp	r3, #0
 8009cd8:	d105      	bne.n	8009ce6 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8009cda:	683a      	ldr	r2, [r7, #0]
 8009cdc:	4907      	ldr	r1, [pc, #28]	@ (8009cfc <USBD_FS_ConfigStrDescriptor+0x34>)
 8009cde:	4808      	ldr	r0, [pc, #32]	@ (8009d00 <USBD_FS_ConfigStrDescriptor+0x38>)
 8009ce0:	f7ff fdbb 	bl	800985a <USBD_GetString>
 8009ce4:	e004      	b.n	8009cf0 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8009ce6:	683a      	ldr	r2, [r7, #0]
 8009ce8:	4904      	ldr	r1, [pc, #16]	@ (8009cfc <USBD_FS_ConfigStrDescriptor+0x34>)
 8009cea:	4805      	ldr	r0, [pc, #20]	@ (8009d00 <USBD_FS_ConfigStrDescriptor+0x38>)
 8009cec:	f7ff fdb5 	bl	800985a <USBD_GetString>
  }
  return USBD_StrDesc;
 8009cf0:	4b02      	ldr	r3, [pc, #8]	@ (8009cfc <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8009cf2:	4618      	mov	r0, r3
 8009cf4:	3708      	adds	r7, #8
 8009cf6:	46bd      	mov	sp, r7
 8009cf8:	bd80      	pop	{r7, pc}
 8009cfa:	bf00      	nop
 8009cfc:	20000ec4 	.word	0x20000ec4
 8009d00:	0800f59c 	.word	0x0800f59c

08009d04 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009d04:	b580      	push	{r7, lr}
 8009d06:	b082      	sub	sp, #8
 8009d08:	af00      	add	r7, sp, #0
 8009d0a:	4603      	mov	r3, r0
 8009d0c:	6039      	str	r1, [r7, #0]
 8009d0e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8009d10:	79fb      	ldrb	r3, [r7, #7]
 8009d12:	2b00      	cmp	r3, #0
 8009d14:	d105      	bne.n	8009d22 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8009d16:	683a      	ldr	r2, [r7, #0]
 8009d18:	4907      	ldr	r1, [pc, #28]	@ (8009d38 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8009d1a:	4808      	ldr	r0, [pc, #32]	@ (8009d3c <USBD_FS_InterfaceStrDescriptor+0x38>)
 8009d1c:	f7ff fd9d 	bl	800985a <USBD_GetString>
 8009d20:	e004      	b.n	8009d2c <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8009d22:	683a      	ldr	r2, [r7, #0]
 8009d24:	4904      	ldr	r1, [pc, #16]	@ (8009d38 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8009d26:	4805      	ldr	r0, [pc, #20]	@ (8009d3c <USBD_FS_InterfaceStrDescriptor+0x38>)
 8009d28:	f7ff fd97 	bl	800985a <USBD_GetString>
  }
  return USBD_StrDesc;
 8009d2c:	4b02      	ldr	r3, [pc, #8]	@ (8009d38 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8009d2e:	4618      	mov	r0, r3
 8009d30:	3708      	adds	r7, #8
 8009d32:	46bd      	mov	sp, r7
 8009d34:	bd80      	pop	{r7, pc}
 8009d36:	bf00      	nop
 8009d38:	20000ec4 	.word	0x20000ec4
 8009d3c:	0800f5a8 	.word	0x0800f5a8

08009d40 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8009d40:	b580      	push	{r7, lr}
 8009d42:	b084      	sub	sp, #16
 8009d44:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8009d46:	4b0f      	ldr	r3, [pc, #60]	@ (8009d84 <Get_SerialNum+0x44>)
 8009d48:	681b      	ldr	r3, [r3, #0]
 8009d4a:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8009d4c:	4b0e      	ldr	r3, [pc, #56]	@ (8009d88 <Get_SerialNum+0x48>)
 8009d4e:	681b      	ldr	r3, [r3, #0]
 8009d50:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8009d52:	4b0e      	ldr	r3, [pc, #56]	@ (8009d8c <Get_SerialNum+0x4c>)
 8009d54:	681b      	ldr	r3, [r3, #0]
 8009d56:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8009d58:	68fa      	ldr	r2, [r7, #12]
 8009d5a:	687b      	ldr	r3, [r7, #4]
 8009d5c:	4413      	add	r3, r2
 8009d5e:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8009d60:	68fb      	ldr	r3, [r7, #12]
 8009d62:	2b00      	cmp	r3, #0
 8009d64:	d009      	beq.n	8009d7a <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8009d66:	2208      	movs	r2, #8
 8009d68:	4909      	ldr	r1, [pc, #36]	@ (8009d90 <Get_SerialNum+0x50>)
 8009d6a:	68f8      	ldr	r0, [r7, #12]
 8009d6c:	f000 f814 	bl	8009d98 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8009d70:	2204      	movs	r2, #4
 8009d72:	4908      	ldr	r1, [pc, #32]	@ (8009d94 <Get_SerialNum+0x54>)
 8009d74:	68b8      	ldr	r0, [r7, #8]
 8009d76:	f000 f80f 	bl	8009d98 <IntToUnicode>
  }
}
 8009d7a:	bf00      	nop
 8009d7c:	3710      	adds	r7, #16
 8009d7e:	46bd      	mov	sp, r7
 8009d80:	bd80      	pop	{r7, pc}
 8009d82:	bf00      	nop
 8009d84:	1ffff7e8 	.word	0x1ffff7e8
 8009d88:	1ffff7ec 	.word	0x1ffff7ec
 8009d8c:	1ffff7f0 	.word	0x1ffff7f0
 8009d90:	20000162 	.word	0x20000162
 8009d94:	20000172 	.word	0x20000172

08009d98 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8009d98:	b480      	push	{r7}
 8009d9a:	b087      	sub	sp, #28
 8009d9c:	af00      	add	r7, sp, #0
 8009d9e:	60f8      	str	r0, [r7, #12]
 8009da0:	60b9      	str	r1, [r7, #8]
 8009da2:	4613      	mov	r3, r2
 8009da4:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8009da6:	2300      	movs	r3, #0
 8009da8:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8009daa:	2300      	movs	r3, #0
 8009dac:	75fb      	strb	r3, [r7, #23]
 8009dae:	e027      	b.n	8009e00 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8009db0:	68fb      	ldr	r3, [r7, #12]
 8009db2:	0f1b      	lsrs	r3, r3, #28
 8009db4:	2b09      	cmp	r3, #9
 8009db6:	d80b      	bhi.n	8009dd0 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8009db8:	68fb      	ldr	r3, [r7, #12]
 8009dba:	0f1b      	lsrs	r3, r3, #28
 8009dbc:	b2da      	uxtb	r2, r3
 8009dbe:	7dfb      	ldrb	r3, [r7, #23]
 8009dc0:	005b      	lsls	r3, r3, #1
 8009dc2:	4619      	mov	r1, r3
 8009dc4:	68bb      	ldr	r3, [r7, #8]
 8009dc6:	440b      	add	r3, r1
 8009dc8:	3230      	adds	r2, #48	@ 0x30
 8009dca:	b2d2      	uxtb	r2, r2
 8009dcc:	701a      	strb	r2, [r3, #0]
 8009dce:	e00a      	b.n	8009de6 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8009dd0:	68fb      	ldr	r3, [r7, #12]
 8009dd2:	0f1b      	lsrs	r3, r3, #28
 8009dd4:	b2da      	uxtb	r2, r3
 8009dd6:	7dfb      	ldrb	r3, [r7, #23]
 8009dd8:	005b      	lsls	r3, r3, #1
 8009dda:	4619      	mov	r1, r3
 8009ddc:	68bb      	ldr	r3, [r7, #8]
 8009dde:	440b      	add	r3, r1
 8009de0:	3237      	adds	r2, #55	@ 0x37
 8009de2:	b2d2      	uxtb	r2, r2
 8009de4:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8009de6:	68fb      	ldr	r3, [r7, #12]
 8009de8:	011b      	lsls	r3, r3, #4
 8009dea:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8009dec:	7dfb      	ldrb	r3, [r7, #23]
 8009dee:	005b      	lsls	r3, r3, #1
 8009df0:	3301      	adds	r3, #1
 8009df2:	68ba      	ldr	r2, [r7, #8]
 8009df4:	4413      	add	r3, r2
 8009df6:	2200      	movs	r2, #0
 8009df8:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8009dfa:	7dfb      	ldrb	r3, [r7, #23]
 8009dfc:	3301      	adds	r3, #1
 8009dfe:	75fb      	strb	r3, [r7, #23]
 8009e00:	7dfa      	ldrb	r2, [r7, #23]
 8009e02:	79fb      	ldrb	r3, [r7, #7]
 8009e04:	429a      	cmp	r2, r3
 8009e06:	d3d3      	bcc.n	8009db0 <IntToUnicode+0x18>
  }
}
 8009e08:	bf00      	nop
 8009e0a:	bf00      	nop
 8009e0c:	371c      	adds	r7, #28
 8009e0e:	46bd      	mov	sp, r7
 8009e10:	bc80      	pop	{r7}
 8009e12:	4770      	bx	lr

08009e14 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8009e14:	b580      	push	{r7, lr}
 8009e16:	b084      	sub	sp, #16
 8009e18:	af00      	add	r7, sp, #0
 8009e1a:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 8009e1c:	687b      	ldr	r3, [r7, #4]
 8009e1e:	681b      	ldr	r3, [r3, #0]
 8009e20:	4a0d      	ldr	r2, [pc, #52]	@ (8009e58 <HAL_PCD_MspInit+0x44>)
 8009e22:	4293      	cmp	r3, r2
 8009e24:	d113      	bne.n	8009e4e <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8009e26:	4b0d      	ldr	r3, [pc, #52]	@ (8009e5c <HAL_PCD_MspInit+0x48>)
 8009e28:	69db      	ldr	r3, [r3, #28]
 8009e2a:	4a0c      	ldr	r2, [pc, #48]	@ (8009e5c <HAL_PCD_MspInit+0x48>)
 8009e2c:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8009e30:	61d3      	str	r3, [r2, #28]
 8009e32:	4b0a      	ldr	r3, [pc, #40]	@ (8009e5c <HAL_PCD_MspInit+0x48>)
 8009e34:	69db      	ldr	r3, [r3, #28]
 8009e36:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009e3a:	60fb      	str	r3, [r7, #12]
 8009e3c:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 8009e3e:	2200      	movs	r2, #0
 8009e40:	2100      	movs	r1, #0
 8009e42:	2014      	movs	r0, #20
 8009e44:	f7f8 feb9 	bl	8002bba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 8009e48:	2014      	movs	r0, #20
 8009e4a:	f7f8 fed2 	bl	8002bf2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8009e4e:	bf00      	nop
 8009e50:	3710      	adds	r7, #16
 8009e52:	46bd      	mov	sp, r7
 8009e54:	bd80      	pop	{r7, pc}
 8009e56:	bf00      	nop
 8009e58:	40005c00 	.word	0x40005c00
 8009e5c:	40021000 	.word	0x40021000

08009e60 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009e60:	b580      	push	{r7, lr}
 8009e62:	b082      	sub	sp, #8
 8009e64:	af00      	add	r7, sp, #0
 8009e66:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8009e68:	687b      	ldr	r3, [r7, #4]
 8009e6a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009e6e:	687b      	ldr	r3, [r7, #4]
 8009e70:	f503 7326 	add.w	r3, r3, #664	@ 0x298
 8009e74:	4619      	mov	r1, r3
 8009e76:	4610      	mov	r0, r2
 8009e78:	f7fe fdc1 	bl	80089fe <USBD_LL_SetupStage>
}
 8009e7c:	bf00      	nop
 8009e7e:	3708      	adds	r7, #8
 8009e80:	46bd      	mov	sp, r7
 8009e82:	bd80      	pop	{r7, pc}

08009e84 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009e84:	b580      	push	{r7, lr}
 8009e86:	b082      	sub	sp, #8
 8009e88:	af00      	add	r7, sp, #0
 8009e8a:	6078      	str	r0, [r7, #4]
 8009e8c:	460b      	mov	r3, r1
 8009e8e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8009e90:	687b      	ldr	r3, [r7, #4]
 8009e92:	f8d3 02d4 	ldr.w	r0, [r3, #724]	@ 0x2d4
 8009e96:	78fa      	ldrb	r2, [r7, #3]
 8009e98:	6879      	ldr	r1, [r7, #4]
 8009e9a:	4613      	mov	r3, r2
 8009e9c:	009b      	lsls	r3, r3, #2
 8009e9e:	4413      	add	r3, r2
 8009ea0:	00db      	lsls	r3, r3, #3
 8009ea2:	440b      	add	r3, r1
 8009ea4:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8009ea8:	681a      	ldr	r2, [r3, #0]
 8009eaa:	78fb      	ldrb	r3, [r7, #3]
 8009eac:	4619      	mov	r1, r3
 8009eae:	f7fe fdf3 	bl	8008a98 <USBD_LL_DataOutStage>
}
 8009eb2:	bf00      	nop
 8009eb4:	3708      	adds	r7, #8
 8009eb6:	46bd      	mov	sp, r7
 8009eb8:	bd80      	pop	{r7, pc}

08009eba <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009eba:	b580      	push	{r7, lr}
 8009ebc:	b082      	sub	sp, #8
 8009ebe:	af00      	add	r7, sp, #0
 8009ec0:	6078      	str	r0, [r7, #4]
 8009ec2:	460b      	mov	r3, r1
 8009ec4:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8009ec6:	687b      	ldr	r3, [r7, #4]
 8009ec8:	f8d3 02d4 	ldr.w	r0, [r3, #724]	@ 0x2d4
 8009ecc:	78fa      	ldrb	r2, [r7, #3]
 8009ece:	6879      	ldr	r1, [r7, #4]
 8009ed0:	4613      	mov	r3, r2
 8009ed2:	009b      	lsls	r3, r3, #2
 8009ed4:	4413      	add	r3, r2
 8009ed6:	00db      	lsls	r3, r3, #3
 8009ed8:	440b      	add	r3, r1
 8009eda:	3324      	adds	r3, #36	@ 0x24
 8009edc:	681a      	ldr	r2, [r3, #0]
 8009ede:	78fb      	ldrb	r3, [r7, #3]
 8009ee0:	4619      	mov	r1, r3
 8009ee2:	f7fe fe4a 	bl	8008b7a <USBD_LL_DataInStage>
}
 8009ee6:	bf00      	nop
 8009ee8:	3708      	adds	r7, #8
 8009eea:	46bd      	mov	sp, r7
 8009eec:	bd80      	pop	{r7, pc}

08009eee <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009eee:	b580      	push	{r7, lr}
 8009ef0:	b082      	sub	sp, #8
 8009ef2:	af00      	add	r7, sp, #0
 8009ef4:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8009ef6:	687b      	ldr	r3, [r7, #4]
 8009ef8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8009efc:	4618      	mov	r0, r3
 8009efe:	f7fe ff5a 	bl	8008db6 <USBD_LL_SOF>
}
 8009f02:	bf00      	nop
 8009f04:	3708      	adds	r7, #8
 8009f06:	46bd      	mov	sp, r7
 8009f08:	bd80      	pop	{r7, pc}

08009f0a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009f0a:	b580      	push	{r7, lr}
 8009f0c:	b084      	sub	sp, #16
 8009f0e:	af00      	add	r7, sp, #0
 8009f10:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8009f12:	2301      	movs	r3, #1
 8009f14:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8009f16:	687b      	ldr	r3, [r7, #4]
 8009f18:	799b      	ldrb	r3, [r3, #6]
 8009f1a:	2b02      	cmp	r3, #2
 8009f1c:	d001      	beq.n	8009f22 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8009f1e:	f7f7 ff19 	bl	8001d54 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8009f22:	687b      	ldr	r3, [r7, #4]
 8009f24:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8009f28:	7bfa      	ldrb	r2, [r7, #15]
 8009f2a:	4611      	mov	r1, r2
 8009f2c:	4618      	mov	r0, r3
 8009f2e:	f7fe ff0a 	bl	8008d46 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8009f32:	687b      	ldr	r3, [r7, #4]
 8009f34:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8009f38:	4618      	mov	r0, r3
 8009f3a:	f7fe fec3 	bl	8008cc4 <USBD_LL_Reset>
}
 8009f3e:	bf00      	nop
 8009f40:	3710      	adds	r7, #16
 8009f42:	46bd      	mov	sp, r7
 8009f44:	bd80      	pop	{r7, pc}
	...

08009f48 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009f48:	b580      	push	{r7, lr}
 8009f4a:	b082      	sub	sp, #8
 8009f4c:	af00      	add	r7, sp, #0
 8009f4e:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8009f50:	687b      	ldr	r3, [r7, #4]
 8009f52:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8009f56:	4618      	mov	r0, r3
 8009f58:	f7fe ff04 	bl	8008d64 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8009f5c:	687b      	ldr	r3, [r7, #4]
 8009f5e:	7a9b      	ldrb	r3, [r3, #10]
 8009f60:	2b00      	cmp	r3, #0
 8009f62:	d005      	beq.n	8009f70 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8009f64:	4b04      	ldr	r3, [pc, #16]	@ (8009f78 <HAL_PCD_SuspendCallback+0x30>)
 8009f66:	691b      	ldr	r3, [r3, #16]
 8009f68:	4a03      	ldr	r2, [pc, #12]	@ (8009f78 <HAL_PCD_SuspendCallback+0x30>)
 8009f6a:	f043 0306 	orr.w	r3, r3, #6
 8009f6e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8009f70:	bf00      	nop
 8009f72:	3708      	adds	r7, #8
 8009f74:	46bd      	mov	sp, r7
 8009f76:	bd80      	pop	{r7, pc}
 8009f78:	e000ed00 	.word	0xe000ed00

08009f7c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009f7c:	b580      	push	{r7, lr}
 8009f7e:	b082      	sub	sp, #8
 8009f80:	af00      	add	r7, sp, #0
 8009f82:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8009f84:	687b      	ldr	r3, [r7, #4]
 8009f86:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8009f8a:	4618      	mov	r0, r3
 8009f8c:	f7fe fefe 	bl	8008d8c <USBD_LL_Resume>
}
 8009f90:	bf00      	nop
 8009f92:	3708      	adds	r7, #8
 8009f94:	46bd      	mov	sp, r7
 8009f96:	bd80      	pop	{r7, pc}

08009f98 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8009f98:	b580      	push	{r7, lr}
 8009f9a:	b082      	sub	sp, #8
 8009f9c:	af00      	add	r7, sp, #0
 8009f9e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 8009fa0:	4a28      	ldr	r2, [pc, #160]	@ (800a044 <USBD_LL_Init+0xac>)
 8009fa2:	687b      	ldr	r3, [r7, #4]
 8009fa4:	f8c2 32d4 	str.w	r3, [r2, #724]	@ 0x2d4
  pdev->pData = &hpcd_USB_FS;
 8009fa8:	687b      	ldr	r3, [r7, #4]
 8009faa:	4a26      	ldr	r2, [pc, #152]	@ (800a044 <USBD_LL_Init+0xac>)
 8009fac:	f8c3 22c0 	str.w	r2, [r3, #704]	@ 0x2c0

  hpcd_USB_FS.Instance = USB;
 8009fb0:	4b24      	ldr	r3, [pc, #144]	@ (800a044 <USBD_LL_Init+0xac>)
 8009fb2:	4a25      	ldr	r2, [pc, #148]	@ (800a048 <USBD_LL_Init+0xb0>)
 8009fb4:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8009fb6:	4b23      	ldr	r3, [pc, #140]	@ (800a044 <USBD_LL_Init+0xac>)
 8009fb8:	2208      	movs	r2, #8
 8009fba:	711a      	strb	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8009fbc:	4b21      	ldr	r3, [pc, #132]	@ (800a044 <USBD_LL_Init+0xac>)
 8009fbe:	2202      	movs	r2, #2
 8009fc0:	719a      	strb	r2, [r3, #6]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8009fc2:	4b20      	ldr	r3, [pc, #128]	@ (800a044 <USBD_LL_Init+0xac>)
 8009fc4:	2200      	movs	r2, #0
 8009fc6:	729a      	strb	r2, [r3, #10]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8009fc8:	4b1e      	ldr	r3, [pc, #120]	@ (800a044 <USBD_LL_Init+0xac>)
 8009fca:	2200      	movs	r2, #0
 8009fcc:	72da      	strb	r2, [r3, #11]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8009fce:	4b1d      	ldr	r3, [pc, #116]	@ (800a044 <USBD_LL_Init+0xac>)
 8009fd0:	2200      	movs	r2, #0
 8009fd2:	731a      	strb	r2, [r3, #12]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8009fd4:	481b      	ldr	r0, [pc, #108]	@ (800a044 <USBD_LL_Init+0xac>)
 8009fd6:	f7f8 ffab 	bl	8002f30 <HAL_PCD_Init>
 8009fda:	4603      	mov	r3, r0
 8009fdc:	2b00      	cmp	r3, #0
 8009fde:	d001      	beq.n	8009fe4 <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 8009fe0:	f7f7 feb8 	bl	8001d54 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8009fe4:	687b      	ldr	r3, [r7, #4]
 8009fe6:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 8009fea:	2318      	movs	r3, #24
 8009fec:	2200      	movs	r2, #0
 8009fee:	2100      	movs	r1, #0
 8009ff0:	f7fa fcbc 	bl	800496c <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8009ff4:	687b      	ldr	r3, [r7, #4]
 8009ff6:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 8009ffa:	2358      	movs	r3, #88	@ 0x58
 8009ffc:	2200      	movs	r2, #0
 8009ffe:	2180      	movs	r1, #128	@ 0x80
 800a000:	f7fa fcb4 	bl	800496c <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 800a004:	687b      	ldr	r3, [r7, #4]
 800a006:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800a00a:	23c0      	movs	r3, #192	@ 0xc0
 800a00c:	2200      	movs	r2, #0
 800a00e:	2181      	movs	r1, #129	@ 0x81
 800a010:	f7fa fcac 	bl	800496c <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 800a014:	687b      	ldr	r3, [r7, #4]
 800a016:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800a01a:	f44f 7388 	mov.w	r3, #272	@ 0x110
 800a01e:	2200      	movs	r2, #0
 800a020:	2101      	movs	r1, #1
 800a022:	f7fa fca3 	bl	800496c <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800a026:	687b      	ldr	r3, [r7, #4]
 800a028:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800a02c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800a030:	2200      	movs	r2, #0
 800a032:	2182      	movs	r1, #130	@ 0x82
 800a034:	f7fa fc9a 	bl	800496c <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 800a038:	2300      	movs	r3, #0
}
 800a03a:	4618      	mov	r0, r3
 800a03c:	3708      	adds	r7, #8
 800a03e:	46bd      	mov	sp, r7
 800a040:	bd80      	pop	{r7, pc}
 800a042:	bf00      	nop
 800a044:	200010c4 	.word	0x200010c4
 800a048:	40005c00 	.word	0x40005c00

0800a04c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800a04c:	b580      	push	{r7, lr}
 800a04e:	b084      	sub	sp, #16
 800a050:	af00      	add	r7, sp, #0
 800a052:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a054:	2300      	movs	r3, #0
 800a056:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a058:	2300      	movs	r3, #0
 800a05a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800a05c:	687b      	ldr	r3, [r7, #4]
 800a05e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800a062:	4618      	mov	r0, r3
 800a064:	f7f9 f85a 	bl	800311c <HAL_PCD_Start>
 800a068:	4603      	mov	r3, r0
 800a06a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a06c:	7bfb      	ldrb	r3, [r7, #15]
 800a06e:	4618      	mov	r0, r3
 800a070:	f000 f94e 	bl	800a310 <USBD_Get_USB_Status>
 800a074:	4603      	mov	r3, r0
 800a076:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a078:	7bbb      	ldrb	r3, [r7, #14]
}
 800a07a:	4618      	mov	r0, r3
 800a07c:	3710      	adds	r7, #16
 800a07e:	46bd      	mov	sp, r7
 800a080:	bd80      	pop	{r7, pc}

0800a082 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800a082:	b580      	push	{r7, lr}
 800a084:	b084      	sub	sp, #16
 800a086:	af00      	add	r7, sp, #0
 800a088:	6078      	str	r0, [r7, #4]
 800a08a:	4608      	mov	r0, r1
 800a08c:	4611      	mov	r1, r2
 800a08e:	461a      	mov	r2, r3
 800a090:	4603      	mov	r3, r0
 800a092:	70fb      	strb	r3, [r7, #3]
 800a094:	460b      	mov	r3, r1
 800a096:	70bb      	strb	r3, [r7, #2]
 800a098:	4613      	mov	r3, r2
 800a09a:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a09c:	2300      	movs	r3, #0
 800a09e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a0a0:	2300      	movs	r3, #0
 800a0a2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800a0a4:	687b      	ldr	r3, [r7, #4]
 800a0a6:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800a0aa:	78bb      	ldrb	r3, [r7, #2]
 800a0ac:	883a      	ldrh	r2, [r7, #0]
 800a0ae:	78f9      	ldrb	r1, [r7, #3]
 800a0b0:	f7f9 f9ae 	bl	8003410 <HAL_PCD_EP_Open>
 800a0b4:	4603      	mov	r3, r0
 800a0b6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a0b8:	7bfb      	ldrb	r3, [r7, #15]
 800a0ba:	4618      	mov	r0, r3
 800a0bc:	f000 f928 	bl	800a310 <USBD_Get_USB_Status>
 800a0c0:	4603      	mov	r3, r0
 800a0c2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a0c4:	7bbb      	ldrb	r3, [r7, #14]
}
 800a0c6:	4618      	mov	r0, r3
 800a0c8:	3710      	adds	r7, #16
 800a0ca:	46bd      	mov	sp, r7
 800a0cc:	bd80      	pop	{r7, pc}

0800a0ce <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a0ce:	b580      	push	{r7, lr}
 800a0d0:	b084      	sub	sp, #16
 800a0d2:	af00      	add	r7, sp, #0
 800a0d4:	6078      	str	r0, [r7, #4]
 800a0d6:	460b      	mov	r3, r1
 800a0d8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a0da:	2300      	movs	r3, #0
 800a0dc:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a0de:	2300      	movs	r3, #0
 800a0e0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800a0e2:	687b      	ldr	r3, [r7, #4]
 800a0e4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800a0e8:	78fa      	ldrb	r2, [r7, #3]
 800a0ea:	4611      	mov	r1, r2
 800a0ec:	4618      	mov	r0, r3
 800a0ee:	f7f9 f9ec 	bl	80034ca <HAL_PCD_EP_Close>
 800a0f2:	4603      	mov	r3, r0
 800a0f4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a0f6:	7bfb      	ldrb	r3, [r7, #15]
 800a0f8:	4618      	mov	r0, r3
 800a0fa:	f000 f909 	bl	800a310 <USBD_Get_USB_Status>
 800a0fe:	4603      	mov	r3, r0
 800a100:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a102:	7bbb      	ldrb	r3, [r7, #14]
}
 800a104:	4618      	mov	r0, r3
 800a106:	3710      	adds	r7, #16
 800a108:	46bd      	mov	sp, r7
 800a10a:	bd80      	pop	{r7, pc}

0800a10c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a10c:	b580      	push	{r7, lr}
 800a10e:	b084      	sub	sp, #16
 800a110:	af00      	add	r7, sp, #0
 800a112:	6078      	str	r0, [r7, #4]
 800a114:	460b      	mov	r3, r1
 800a116:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a118:	2300      	movs	r3, #0
 800a11a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a11c:	2300      	movs	r3, #0
 800a11e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800a120:	687b      	ldr	r3, [r7, #4]
 800a122:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800a126:	78fa      	ldrb	r2, [r7, #3]
 800a128:	4611      	mov	r1, r2
 800a12a:	4618      	mov	r0, r3
 800a12c:	f7f9 fa94 	bl	8003658 <HAL_PCD_EP_SetStall>
 800a130:	4603      	mov	r3, r0
 800a132:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a134:	7bfb      	ldrb	r3, [r7, #15]
 800a136:	4618      	mov	r0, r3
 800a138:	f000 f8ea 	bl	800a310 <USBD_Get_USB_Status>
 800a13c:	4603      	mov	r3, r0
 800a13e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a140:	7bbb      	ldrb	r3, [r7, #14]
}
 800a142:	4618      	mov	r0, r3
 800a144:	3710      	adds	r7, #16
 800a146:	46bd      	mov	sp, r7
 800a148:	bd80      	pop	{r7, pc}

0800a14a <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a14a:	b580      	push	{r7, lr}
 800a14c:	b084      	sub	sp, #16
 800a14e:	af00      	add	r7, sp, #0
 800a150:	6078      	str	r0, [r7, #4]
 800a152:	460b      	mov	r3, r1
 800a154:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a156:	2300      	movs	r3, #0
 800a158:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a15a:	2300      	movs	r3, #0
 800a15c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800a15e:	687b      	ldr	r3, [r7, #4]
 800a160:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800a164:	78fa      	ldrb	r2, [r7, #3]
 800a166:	4611      	mov	r1, r2
 800a168:	4618      	mov	r0, r3
 800a16a:	f7f9 fad5 	bl	8003718 <HAL_PCD_EP_ClrStall>
 800a16e:	4603      	mov	r3, r0
 800a170:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a172:	7bfb      	ldrb	r3, [r7, #15]
 800a174:	4618      	mov	r0, r3
 800a176:	f000 f8cb 	bl	800a310 <USBD_Get_USB_Status>
 800a17a:	4603      	mov	r3, r0
 800a17c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a17e:	7bbb      	ldrb	r3, [r7, #14]
}
 800a180:	4618      	mov	r0, r3
 800a182:	3710      	adds	r7, #16
 800a184:	46bd      	mov	sp, r7
 800a186:	bd80      	pop	{r7, pc}

0800a188 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a188:	b480      	push	{r7}
 800a18a:	b085      	sub	sp, #20
 800a18c:	af00      	add	r7, sp, #0
 800a18e:	6078      	str	r0, [r7, #4]
 800a190:	460b      	mov	r3, r1
 800a192:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800a194:	687b      	ldr	r3, [r7, #4]
 800a196:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800a19a:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800a19c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800a1a0:	2b00      	cmp	r3, #0
 800a1a2:	da0b      	bge.n	800a1bc <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800a1a4:	78fb      	ldrb	r3, [r7, #3]
 800a1a6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800a1aa:	68f9      	ldr	r1, [r7, #12]
 800a1ac:	4613      	mov	r3, r2
 800a1ae:	009b      	lsls	r3, r3, #2
 800a1b0:	4413      	add	r3, r2
 800a1b2:	00db      	lsls	r3, r3, #3
 800a1b4:	440b      	add	r3, r1
 800a1b6:	3312      	adds	r3, #18
 800a1b8:	781b      	ldrb	r3, [r3, #0]
 800a1ba:	e00b      	b.n	800a1d4 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800a1bc:	78fb      	ldrb	r3, [r7, #3]
 800a1be:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800a1c2:	68f9      	ldr	r1, [r7, #12]
 800a1c4:	4613      	mov	r3, r2
 800a1c6:	009b      	lsls	r3, r3, #2
 800a1c8:	4413      	add	r3, r2
 800a1ca:	00db      	lsls	r3, r3, #3
 800a1cc:	440b      	add	r3, r1
 800a1ce:	f503 73a9 	add.w	r3, r3, #338	@ 0x152
 800a1d2:	781b      	ldrb	r3, [r3, #0]
  }
}
 800a1d4:	4618      	mov	r0, r3
 800a1d6:	3714      	adds	r7, #20
 800a1d8:	46bd      	mov	sp, r7
 800a1da:	bc80      	pop	{r7}
 800a1dc:	4770      	bx	lr

0800a1de <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800a1de:	b580      	push	{r7, lr}
 800a1e0:	b084      	sub	sp, #16
 800a1e2:	af00      	add	r7, sp, #0
 800a1e4:	6078      	str	r0, [r7, #4]
 800a1e6:	460b      	mov	r3, r1
 800a1e8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a1ea:	2300      	movs	r3, #0
 800a1ec:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a1ee:	2300      	movs	r3, #0
 800a1f0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800a1f2:	687b      	ldr	r3, [r7, #4]
 800a1f4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800a1f8:	78fa      	ldrb	r2, [r7, #3]
 800a1fa:	4611      	mov	r1, r2
 800a1fc:	4618      	mov	r0, r3
 800a1fe:	f7f9 f8e3 	bl	80033c8 <HAL_PCD_SetAddress>
 800a202:	4603      	mov	r3, r0
 800a204:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a206:	7bfb      	ldrb	r3, [r7, #15]
 800a208:	4618      	mov	r0, r3
 800a20a:	f000 f881 	bl	800a310 <USBD_Get_USB_Status>
 800a20e:	4603      	mov	r3, r0
 800a210:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a212:	7bbb      	ldrb	r3, [r7, #14]
}
 800a214:	4618      	mov	r0, r3
 800a216:	3710      	adds	r7, #16
 800a218:	46bd      	mov	sp, r7
 800a21a:	bd80      	pop	{r7, pc}

0800a21c <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800a21c:	b580      	push	{r7, lr}
 800a21e:	b086      	sub	sp, #24
 800a220:	af00      	add	r7, sp, #0
 800a222:	60f8      	str	r0, [r7, #12]
 800a224:	607a      	str	r2, [r7, #4]
 800a226:	461a      	mov	r2, r3
 800a228:	460b      	mov	r3, r1
 800a22a:	72fb      	strb	r3, [r7, #11]
 800a22c:	4613      	mov	r3, r2
 800a22e:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a230:	2300      	movs	r3, #0
 800a232:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a234:	2300      	movs	r3, #0
 800a236:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800a238:	68fb      	ldr	r3, [r7, #12]
 800a23a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800a23e:	893b      	ldrh	r3, [r7, #8]
 800a240:	7af9      	ldrb	r1, [r7, #11]
 800a242:	687a      	ldr	r2, [r7, #4]
 800a244:	f7f9 f9d1 	bl	80035ea <HAL_PCD_EP_Transmit>
 800a248:	4603      	mov	r3, r0
 800a24a:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a24c:	7dfb      	ldrb	r3, [r7, #23]
 800a24e:	4618      	mov	r0, r3
 800a250:	f000 f85e 	bl	800a310 <USBD_Get_USB_Status>
 800a254:	4603      	mov	r3, r0
 800a256:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800a258:	7dbb      	ldrb	r3, [r7, #22]
}
 800a25a:	4618      	mov	r0, r3
 800a25c:	3718      	adds	r7, #24
 800a25e:	46bd      	mov	sp, r7
 800a260:	bd80      	pop	{r7, pc}

0800a262 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800a262:	b580      	push	{r7, lr}
 800a264:	b086      	sub	sp, #24
 800a266:	af00      	add	r7, sp, #0
 800a268:	60f8      	str	r0, [r7, #12]
 800a26a:	607a      	str	r2, [r7, #4]
 800a26c:	461a      	mov	r2, r3
 800a26e:	460b      	mov	r3, r1
 800a270:	72fb      	strb	r3, [r7, #11]
 800a272:	4613      	mov	r3, r2
 800a274:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a276:	2300      	movs	r3, #0
 800a278:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a27a:	2300      	movs	r3, #0
 800a27c:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800a27e:	68fb      	ldr	r3, [r7, #12]
 800a280:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800a284:	893b      	ldrh	r3, [r7, #8]
 800a286:	7af9      	ldrb	r1, [r7, #11]
 800a288:	687a      	ldr	r2, [r7, #4]
 800a28a:	f7f9 f966 	bl	800355a <HAL_PCD_EP_Receive>
 800a28e:	4603      	mov	r3, r0
 800a290:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a292:	7dfb      	ldrb	r3, [r7, #23]
 800a294:	4618      	mov	r0, r3
 800a296:	f000 f83b 	bl	800a310 <USBD_Get_USB_Status>
 800a29a:	4603      	mov	r3, r0
 800a29c:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800a29e:	7dbb      	ldrb	r3, [r7, #22]
}
 800a2a0:	4618      	mov	r0, r3
 800a2a2:	3718      	adds	r7, #24
 800a2a4:	46bd      	mov	sp, r7
 800a2a6:	bd80      	pop	{r7, pc}

0800a2a8 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a2a8:	b580      	push	{r7, lr}
 800a2aa:	b082      	sub	sp, #8
 800a2ac:	af00      	add	r7, sp, #0
 800a2ae:	6078      	str	r0, [r7, #4]
 800a2b0:	460b      	mov	r3, r1
 800a2b2:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800a2b4:	687b      	ldr	r3, [r7, #4]
 800a2b6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800a2ba:	78fa      	ldrb	r2, [r7, #3]
 800a2bc:	4611      	mov	r1, r2
 800a2be:	4618      	mov	r0, r3
 800a2c0:	f7f9 f97c 	bl	80035bc <HAL_PCD_EP_GetRxCount>
 800a2c4:	4603      	mov	r3, r0
}
 800a2c6:	4618      	mov	r0, r3
 800a2c8:	3708      	adds	r7, #8
 800a2ca:	46bd      	mov	sp, r7
 800a2cc:	bd80      	pop	{r7, pc}
	...

0800a2d0 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800a2d0:	b480      	push	{r7}
 800a2d2:	b083      	sub	sp, #12
 800a2d4:	af00      	add	r7, sp, #0
 800a2d6:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800a2d8:	4b02      	ldr	r3, [pc, #8]	@ (800a2e4 <USBD_static_malloc+0x14>)
}
 800a2da:	4618      	mov	r0, r3
 800a2dc:	370c      	adds	r7, #12
 800a2de:	46bd      	mov	sp, r7
 800a2e0:	bc80      	pop	{r7}
 800a2e2:	4770      	bx	lr
 800a2e4:	2000139c 	.word	0x2000139c

0800a2e8 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800a2e8:	b480      	push	{r7}
 800a2ea:	b083      	sub	sp, #12
 800a2ec:	af00      	add	r7, sp, #0
 800a2ee:	6078      	str	r0, [r7, #4]

}
 800a2f0:	bf00      	nop
 800a2f2:	370c      	adds	r7, #12
 800a2f4:	46bd      	mov	sp, r7
 800a2f6:	bc80      	pop	{r7}
 800a2f8:	4770      	bx	lr

0800a2fa <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a2fa:	b480      	push	{r7}
 800a2fc:	b083      	sub	sp, #12
 800a2fe:	af00      	add	r7, sp, #0
 800a300:	6078      	str	r0, [r7, #4]
 800a302:	460b      	mov	r3, r1
 800a304:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 800a306:	bf00      	nop
 800a308:	370c      	adds	r7, #12
 800a30a:	46bd      	mov	sp, r7
 800a30c:	bc80      	pop	{r7}
 800a30e:	4770      	bx	lr

0800a310 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800a310:	b480      	push	{r7}
 800a312:	b085      	sub	sp, #20
 800a314:	af00      	add	r7, sp, #0
 800a316:	4603      	mov	r3, r0
 800a318:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a31a:	2300      	movs	r3, #0
 800a31c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800a31e:	79fb      	ldrb	r3, [r7, #7]
 800a320:	2b03      	cmp	r3, #3
 800a322:	d817      	bhi.n	800a354 <USBD_Get_USB_Status+0x44>
 800a324:	a201      	add	r2, pc, #4	@ (adr r2, 800a32c <USBD_Get_USB_Status+0x1c>)
 800a326:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a32a:	bf00      	nop
 800a32c:	0800a33d 	.word	0x0800a33d
 800a330:	0800a343 	.word	0x0800a343
 800a334:	0800a349 	.word	0x0800a349
 800a338:	0800a34f 	.word	0x0800a34f
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800a33c:	2300      	movs	r3, #0
 800a33e:	73fb      	strb	r3, [r7, #15]
    break;
 800a340:	e00b      	b.n	800a35a <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800a342:	2302      	movs	r3, #2
 800a344:	73fb      	strb	r3, [r7, #15]
    break;
 800a346:	e008      	b.n	800a35a <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800a348:	2301      	movs	r3, #1
 800a34a:	73fb      	strb	r3, [r7, #15]
    break;
 800a34c:	e005      	b.n	800a35a <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800a34e:	2302      	movs	r3, #2
 800a350:	73fb      	strb	r3, [r7, #15]
    break;
 800a352:	e002      	b.n	800a35a <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800a354:	2302      	movs	r3, #2
 800a356:	73fb      	strb	r3, [r7, #15]
    break;
 800a358:	bf00      	nop
  }
  return usb_status;
 800a35a:	7bfb      	ldrb	r3, [r7, #15]
}
 800a35c:	4618      	mov	r0, r3
 800a35e:	3714      	adds	r7, #20
 800a360:	46bd      	mov	sp, r7
 800a362:	bc80      	pop	{r7}
 800a364:	4770      	bx	lr
 800a366:	bf00      	nop

0800a368 <pow>:
 800a368:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a36c:	4614      	mov	r4, r2
 800a36e:	461d      	mov	r5, r3
 800a370:	4680      	mov	r8, r0
 800a372:	4689      	mov	r9, r1
 800a374:	f000 f868 	bl	800a448 <__ieee754_pow>
 800a378:	4622      	mov	r2, r4
 800a37a:	4606      	mov	r6, r0
 800a37c:	460f      	mov	r7, r1
 800a37e:	462b      	mov	r3, r5
 800a380:	4620      	mov	r0, r4
 800a382:	4629      	mov	r1, r5
 800a384:	f7f6 fbf6 	bl	8000b74 <__aeabi_dcmpun>
 800a388:	bbc8      	cbnz	r0, 800a3fe <pow+0x96>
 800a38a:	2200      	movs	r2, #0
 800a38c:	2300      	movs	r3, #0
 800a38e:	4640      	mov	r0, r8
 800a390:	4649      	mov	r1, r9
 800a392:	f7f6 fbbd 	bl	8000b10 <__aeabi_dcmpeq>
 800a396:	b1b8      	cbz	r0, 800a3c8 <pow+0x60>
 800a398:	2200      	movs	r2, #0
 800a39a:	2300      	movs	r3, #0
 800a39c:	4620      	mov	r0, r4
 800a39e:	4629      	mov	r1, r5
 800a3a0:	f7f6 fbb6 	bl	8000b10 <__aeabi_dcmpeq>
 800a3a4:	2800      	cmp	r0, #0
 800a3a6:	d141      	bne.n	800a42c <pow+0xc4>
 800a3a8:	4620      	mov	r0, r4
 800a3aa:	4629      	mov	r1, r5
 800a3ac:	f000 f844 	bl	800a438 <finite>
 800a3b0:	b328      	cbz	r0, 800a3fe <pow+0x96>
 800a3b2:	2200      	movs	r2, #0
 800a3b4:	2300      	movs	r3, #0
 800a3b6:	4620      	mov	r0, r4
 800a3b8:	4629      	mov	r1, r5
 800a3ba:	f7f6 fbb3 	bl	8000b24 <__aeabi_dcmplt>
 800a3be:	b1f0      	cbz	r0, 800a3fe <pow+0x96>
 800a3c0:	f002 fad4 	bl	800c96c <__errno>
 800a3c4:	2322      	movs	r3, #34	@ 0x22
 800a3c6:	e019      	b.n	800a3fc <pow+0x94>
 800a3c8:	4630      	mov	r0, r6
 800a3ca:	4639      	mov	r1, r7
 800a3cc:	f000 f834 	bl	800a438 <finite>
 800a3d0:	b9c8      	cbnz	r0, 800a406 <pow+0x9e>
 800a3d2:	4640      	mov	r0, r8
 800a3d4:	4649      	mov	r1, r9
 800a3d6:	f000 f82f 	bl	800a438 <finite>
 800a3da:	b1a0      	cbz	r0, 800a406 <pow+0x9e>
 800a3dc:	4620      	mov	r0, r4
 800a3de:	4629      	mov	r1, r5
 800a3e0:	f000 f82a 	bl	800a438 <finite>
 800a3e4:	b178      	cbz	r0, 800a406 <pow+0x9e>
 800a3e6:	4632      	mov	r2, r6
 800a3e8:	463b      	mov	r3, r7
 800a3ea:	4630      	mov	r0, r6
 800a3ec:	4639      	mov	r1, r7
 800a3ee:	f7f6 fbc1 	bl	8000b74 <__aeabi_dcmpun>
 800a3f2:	2800      	cmp	r0, #0
 800a3f4:	d0e4      	beq.n	800a3c0 <pow+0x58>
 800a3f6:	f002 fab9 	bl	800c96c <__errno>
 800a3fa:	2321      	movs	r3, #33	@ 0x21
 800a3fc:	6003      	str	r3, [r0, #0]
 800a3fe:	4630      	mov	r0, r6
 800a400:	4639      	mov	r1, r7
 800a402:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a406:	2200      	movs	r2, #0
 800a408:	2300      	movs	r3, #0
 800a40a:	4630      	mov	r0, r6
 800a40c:	4639      	mov	r1, r7
 800a40e:	f7f6 fb7f 	bl	8000b10 <__aeabi_dcmpeq>
 800a412:	2800      	cmp	r0, #0
 800a414:	d0f3      	beq.n	800a3fe <pow+0x96>
 800a416:	4640      	mov	r0, r8
 800a418:	4649      	mov	r1, r9
 800a41a:	f000 f80d 	bl	800a438 <finite>
 800a41e:	2800      	cmp	r0, #0
 800a420:	d0ed      	beq.n	800a3fe <pow+0x96>
 800a422:	4620      	mov	r0, r4
 800a424:	4629      	mov	r1, r5
 800a426:	f000 f807 	bl	800a438 <finite>
 800a42a:	e7c8      	b.n	800a3be <pow+0x56>
 800a42c:	2600      	movs	r6, #0
 800a42e:	4f01      	ldr	r7, [pc, #4]	@ (800a434 <pow+0xcc>)
 800a430:	e7e5      	b.n	800a3fe <pow+0x96>
 800a432:	bf00      	nop
 800a434:	3ff00000 	.word	0x3ff00000

0800a438 <finite>:
 800a438:	f041 4000 	orr.w	r0, r1, #2147483648	@ 0x80000000
 800a43c:	f500 1080 	add.w	r0, r0, #1048576	@ 0x100000
 800a440:	0fc0      	lsrs	r0, r0, #31
 800a442:	4770      	bx	lr
 800a444:	0000      	movs	r0, r0
	...

0800a448 <__ieee754_pow>:
 800a448:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a44c:	b091      	sub	sp, #68	@ 0x44
 800a44e:	e9cd 2300 	strd	r2, r3, [sp]
 800a452:	468b      	mov	fp, r1
 800a454:	e9dd 1800 	ldrd	r1, r8, [sp]
 800a458:	f028 4700 	bic.w	r7, r8, #2147483648	@ 0x80000000
 800a45c:	4682      	mov	sl, r0
 800a45e:	ea57 0001 	orrs.w	r0, r7, r1
 800a462:	d112      	bne.n	800a48a <__ieee754_pow+0x42>
 800a464:	4653      	mov	r3, sl
 800a466:	f48b 2200 	eor.w	r2, fp, #524288	@ 0x80000
 800a46a:	18db      	adds	r3, r3, r3
 800a46c:	4152      	adcs	r2, r2
 800a46e:	4298      	cmp	r0, r3
 800a470:	4b91      	ldr	r3, [pc, #580]	@ (800a6b8 <__ieee754_pow+0x270>)
 800a472:	4193      	sbcs	r3, r2
 800a474:	f080 84ce 	bcs.w	800ae14 <__ieee754_pow+0x9cc>
 800a478:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a47c:	4650      	mov	r0, sl
 800a47e:	4659      	mov	r1, fp
 800a480:	f7f5 ff28 	bl	80002d4 <__adddf3>
 800a484:	b011      	add	sp, #68	@ 0x44
 800a486:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a48a:	4b8c      	ldr	r3, [pc, #560]	@ (800a6bc <__ieee754_pow+0x274>)
 800a48c:	f02b 4600 	bic.w	r6, fp, #2147483648	@ 0x80000000
 800a490:	429e      	cmp	r6, r3
 800a492:	465d      	mov	r5, fp
 800a494:	46d1      	mov	r9, sl
 800a496:	d807      	bhi.n	800a4a8 <__ieee754_pow+0x60>
 800a498:	d102      	bne.n	800a4a0 <__ieee754_pow+0x58>
 800a49a:	f1ba 0f00 	cmp.w	sl, #0
 800a49e:	d1eb      	bne.n	800a478 <__ieee754_pow+0x30>
 800a4a0:	429f      	cmp	r7, r3
 800a4a2:	d801      	bhi.n	800a4a8 <__ieee754_pow+0x60>
 800a4a4:	d10f      	bne.n	800a4c6 <__ieee754_pow+0x7e>
 800a4a6:	b171      	cbz	r1, 800a4c6 <__ieee754_pow+0x7e>
 800a4a8:	f105 4540 	add.w	r5, r5, #3221225472	@ 0xc0000000
 800a4ac:	f505 1580 	add.w	r5, r5, #1048576	@ 0x100000
 800a4b0:	ea55 0509 	orrs.w	r5, r5, r9
 800a4b4:	d1e0      	bne.n	800a478 <__ieee754_pow+0x30>
 800a4b6:	e9dd 3200 	ldrd	r3, r2, [sp]
 800a4ba:	18db      	adds	r3, r3, r3
 800a4bc:	f482 2200 	eor.w	r2, r2, #524288	@ 0x80000
 800a4c0:	4152      	adcs	r2, r2
 800a4c2:	429d      	cmp	r5, r3
 800a4c4:	e7d4      	b.n	800a470 <__ieee754_pow+0x28>
 800a4c6:	2d00      	cmp	r5, #0
 800a4c8:	4633      	mov	r3, r6
 800a4ca:	da39      	bge.n	800a540 <__ieee754_pow+0xf8>
 800a4cc:	4a7c      	ldr	r2, [pc, #496]	@ (800a6c0 <__ieee754_pow+0x278>)
 800a4ce:	4297      	cmp	r7, r2
 800a4d0:	d84e      	bhi.n	800a570 <__ieee754_pow+0x128>
 800a4d2:	f1a2 7254 	sub.w	r2, r2, #55574528	@ 0x3500000
 800a4d6:	4297      	cmp	r7, r2
 800a4d8:	f240 84ab 	bls.w	800ae32 <__ieee754_pow+0x9ea>
 800a4dc:	153a      	asrs	r2, r7, #20
 800a4de:	f2a2 32ff 	subw	r2, r2, #1023	@ 0x3ff
 800a4e2:	2a14      	cmp	r2, #20
 800a4e4:	dd0f      	ble.n	800a506 <__ieee754_pow+0xbe>
 800a4e6:	f1c2 0234 	rsb	r2, r2, #52	@ 0x34
 800a4ea:	fa21 f402 	lsr.w	r4, r1, r2
 800a4ee:	fa04 f202 	lsl.w	r2, r4, r2
 800a4f2:	428a      	cmp	r2, r1
 800a4f4:	f040 849d 	bne.w	800ae32 <__ieee754_pow+0x9ea>
 800a4f8:	f004 0401 	and.w	r4, r4, #1
 800a4fc:	f1c4 0402 	rsb	r4, r4, #2
 800a500:	2900      	cmp	r1, #0
 800a502:	d15a      	bne.n	800a5ba <__ieee754_pow+0x172>
 800a504:	e00e      	b.n	800a524 <__ieee754_pow+0xdc>
 800a506:	2900      	cmp	r1, #0
 800a508:	d156      	bne.n	800a5b8 <__ieee754_pow+0x170>
 800a50a:	f1c2 0214 	rsb	r2, r2, #20
 800a50e:	fa47 f402 	asr.w	r4, r7, r2
 800a512:	fa04 f202 	lsl.w	r2, r4, r2
 800a516:	42ba      	cmp	r2, r7
 800a518:	f040 8488 	bne.w	800ae2c <__ieee754_pow+0x9e4>
 800a51c:	f004 0401 	and.w	r4, r4, #1
 800a520:	f1c4 0402 	rsb	r4, r4, #2
 800a524:	4a67      	ldr	r2, [pc, #412]	@ (800a6c4 <__ieee754_pow+0x27c>)
 800a526:	4297      	cmp	r7, r2
 800a528:	d130      	bne.n	800a58c <__ieee754_pow+0x144>
 800a52a:	f1b8 0f00 	cmp.w	r8, #0
 800a52e:	f280 8479 	bge.w	800ae24 <__ieee754_pow+0x9dc>
 800a532:	4652      	mov	r2, sl
 800a534:	465b      	mov	r3, fp
 800a536:	2000      	movs	r0, #0
 800a538:	4962      	ldr	r1, [pc, #392]	@ (800a6c4 <__ieee754_pow+0x27c>)
 800a53a:	f7f6 f9ab 	bl	8000894 <__aeabi_ddiv>
 800a53e:	e7a1      	b.n	800a484 <__ieee754_pow+0x3c>
 800a540:	2400      	movs	r4, #0
 800a542:	2900      	cmp	r1, #0
 800a544:	d139      	bne.n	800a5ba <__ieee754_pow+0x172>
 800a546:	4a5d      	ldr	r2, [pc, #372]	@ (800a6bc <__ieee754_pow+0x274>)
 800a548:	4297      	cmp	r7, r2
 800a54a:	d1eb      	bne.n	800a524 <__ieee754_pow+0xdc>
 800a54c:	f106 4340 	add.w	r3, r6, #3221225472	@ 0xc0000000
 800a550:	f503 1380 	add.w	r3, r3, #1048576	@ 0x100000
 800a554:	ea53 0309 	orrs.w	r3, r3, r9
 800a558:	f000 845c 	beq.w	800ae14 <__ieee754_pow+0x9cc>
 800a55c:	4b5a      	ldr	r3, [pc, #360]	@ (800a6c8 <__ieee754_pow+0x280>)
 800a55e:	429e      	cmp	r6, r3
 800a560:	d908      	bls.n	800a574 <__ieee754_pow+0x12c>
 800a562:	f1b8 0f00 	cmp.w	r8, #0
 800a566:	f2c0 8459 	blt.w	800ae1c <__ieee754_pow+0x9d4>
 800a56a:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a56e:	e789      	b.n	800a484 <__ieee754_pow+0x3c>
 800a570:	2402      	movs	r4, #2
 800a572:	e7e6      	b.n	800a542 <__ieee754_pow+0xfa>
 800a574:	f1b8 0f00 	cmp.w	r8, #0
 800a578:	f04f 0000 	mov.w	r0, #0
 800a57c:	f04f 0100 	mov.w	r1, #0
 800a580:	da80      	bge.n	800a484 <__ieee754_pow+0x3c>
 800a582:	e9dd 0300 	ldrd	r0, r3, [sp]
 800a586:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 800a58a:	e77b      	b.n	800a484 <__ieee754_pow+0x3c>
 800a58c:	f1b8 4f80 	cmp.w	r8, #1073741824	@ 0x40000000
 800a590:	d106      	bne.n	800a5a0 <__ieee754_pow+0x158>
 800a592:	4652      	mov	r2, sl
 800a594:	465b      	mov	r3, fp
 800a596:	4650      	mov	r0, sl
 800a598:	4659      	mov	r1, fp
 800a59a:	f7f6 f851 	bl	8000640 <__aeabi_dmul>
 800a59e:	e771      	b.n	800a484 <__ieee754_pow+0x3c>
 800a5a0:	4a4a      	ldr	r2, [pc, #296]	@ (800a6cc <__ieee754_pow+0x284>)
 800a5a2:	4590      	cmp	r8, r2
 800a5a4:	d109      	bne.n	800a5ba <__ieee754_pow+0x172>
 800a5a6:	2d00      	cmp	r5, #0
 800a5a8:	db07      	blt.n	800a5ba <__ieee754_pow+0x172>
 800a5aa:	4650      	mov	r0, sl
 800a5ac:	4659      	mov	r1, fp
 800a5ae:	b011      	add	sp, #68	@ 0x44
 800a5b0:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a5b4:	f000 bd12 	b.w	800afdc <__ieee754_sqrt>
 800a5b8:	2400      	movs	r4, #0
 800a5ba:	4650      	mov	r0, sl
 800a5bc:	4659      	mov	r1, fp
 800a5be:	9302      	str	r3, [sp, #8]
 800a5c0:	f000 fc6a 	bl	800ae98 <fabs>
 800a5c4:	9b02      	ldr	r3, [sp, #8]
 800a5c6:	f1b9 0f00 	cmp.w	r9, #0
 800a5ca:	d127      	bne.n	800a61c <__ieee754_pow+0x1d4>
 800a5cc:	4a3d      	ldr	r2, [pc, #244]	@ (800a6c4 <__ieee754_pow+0x27c>)
 800a5ce:	f025 4c40 	bic.w	ip, r5, #3221225472	@ 0xc0000000
 800a5d2:	4594      	cmp	ip, r2
 800a5d4:	d000      	beq.n	800a5d8 <__ieee754_pow+0x190>
 800a5d6:	bb0e      	cbnz	r6, 800a61c <__ieee754_pow+0x1d4>
 800a5d8:	f1b8 0f00 	cmp.w	r8, #0
 800a5dc:	da05      	bge.n	800a5ea <__ieee754_pow+0x1a2>
 800a5de:	4602      	mov	r2, r0
 800a5e0:	460b      	mov	r3, r1
 800a5e2:	2000      	movs	r0, #0
 800a5e4:	4937      	ldr	r1, [pc, #220]	@ (800a6c4 <__ieee754_pow+0x27c>)
 800a5e6:	f7f6 f955 	bl	8000894 <__aeabi_ddiv>
 800a5ea:	2d00      	cmp	r5, #0
 800a5ec:	f6bf af4a 	bge.w	800a484 <__ieee754_pow+0x3c>
 800a5f0:	f106 4640 	add.w	r6, r6, #3221225472	@ 0xc0000000
 800a5f4:	f506 1680 	add.w	r6, r6, #1048576	@ 0x100000
 800a5f8:	4326      	orrs	r6, r4
 800a5fa:	d108      	bne.n	800a60e <__ieee754_pow+0x1c6>
 800a5fc:	4602      	mov	r2, r0
 800a5fe:	460b      	mov	r3, r1
 800a600:	4610      	mov	r0, r2
 800a602:	4619      	mov	r1, r3
 800a604:	f7f5 fe64 	bl	80002d0 <__aeabi_dsub>
 800a608:	4602      	mov	r2, r0
 800a60a:	460b      	mov	r3, r1
 800a60c:	e795      	b.n	800a53a <__ieee754_pow+0xf2>
 800a60e:	2c01      	cmp	r4, #1
 800a610:	f47f af38 	bne.w	800a484 <__ieee754_pow+0x3c>
 800a614:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800a618:	4619      	mov	r1, r3
 800a61a:	e733      	b.n	800a484 <__ieee754_pow+0x3c>
 800a61c:	0fea      	lsrs	r2, r5, #31
 800a61e:	3a01      	subs	r2, #1
 800a620:	ea52 0c04 	orrs.w	ip, r2, r4
 800a624:	d102      	bne.n	800a62c <__ieee754_pow+0x1e4>
 800a626:	4652      	mov	r2, sl
 800a628:	465b      	mov	r3, fp
 800a62a:	e7e9      	b.n	800a600 <__ieee754_pow+0x1b8>
 800a62c:	f04f 0900 	mov.w	r9, #0
 800a630:	3c01      	subs	r4, #1
 800a632:	4314      	orrs	r4, r2
 800a634:	bf14      	ite	ne
 800a636:	f8df a08c 	ldrne.w	sl, [pc, #140]	@ 800a6c4 <__ieee754_pow+0x27c>
 800a63a:	f8df a094 	ldreq.w	sl, [pc, #148]	@ 800a6d0 <__ieee754_pow+0x288>
 800a63e:	f1b7 4f84 	cmp.w	r7, #1107296256	@ 0x42000000
 800a642:	e9cd 9a02 	strd	r9, sl, [sp, #8]
 800a646:	f240 8107 	bls.w	800a858 <__ieee754_pow+0x410>
 800a64a:	4b22      	ldr	r3, [pc, #136]	@ (800a6d4 <__ieee754_pow+0x28c>)
 800a64c:	429f      	cmp	r7, r3
 800a64e:	4b1e      	ldr	r3, [pc, #120]	@ (800a6c8 <__ieee754_pow+0x280>)
 800a650:	d913      	bls.n	800a67a <__ieee754_pow+0x232>
 800a652:	429e      	cmp	r6, r3
 800a654:	d808      	bhi.n	800a668 <__ieee754_pow+0x220>
 800a656:	f1b8 0f00 	cmp.w	r8, #0
 800a65a:	da08      	bge.n	800a66e <__ieee754_pow+0x226>
 800a65c:	2000      	movs	r0, #0
 800a65e:	b011      	add	sp, #68	@ 0x44
 800a660:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a664:	f000 bcb4 	b.w	800afd0 <__math_oflow>
 800a668:	f1b8 0f00 	cmp.w	r8, #0
 800a66c:	dcf6      	bgt.n	800a65c <__ieee754_pow+0x214>
 800a66e:	2000      	movs	r0, #0
 800a670:	b011      	add	sp, #68	@ 0x44
 800a672:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a676:	f000 bca6 	b.w	800afc6 <__math_uflow>
 800a67a:	429e      	cmp	r6, r3
 800a67c:	d20c      	bcs.n	800a698 <__ieee754_pow+0x250>
 800a67e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a682:	2200      	movs	r2, #0
 800a684:	2300      	movs	r3, #0
 800a686:	f7f6 fa4d 	bl	8000b24 <__aeabi_dcmplt>
 800a68a:	3800      	subs	r0, #0
 800a68c:	bf18      	it	ne
 800a68e:	2001      	movne	r0, #1
 800a690:	f1b8 0f00 	cmp.w	r8, #0
 800a694:	daec      	bge.n	800a670 <__ieee754_pow+0x228>
 800a696:	e7e2      	b.n	800a65e <__ieee754_pow+0x216>
 800a698:	4b0a      	ldr	r3, [pc, #40]	@ (800a6c4 <__ieee754_pow+0x27c>)
 800a69a:	2200      	movs	r2, #0
 800a69c:	429e      	cmp	r6, r3
 800a69e:	d91b      	bls.n	800a6d8 <__ieee754_pow+0x290>
 800a6a0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a6a4:	2300      	movs	r3, #0
 800a6a6:	f7f6 fa3d 	bl	8000b24 <__aeabi_dcmplt>
 800a6aa:	3800      	subs	r0, #0
 800a6ac:	bf18      	it	ne
 800a6ae:	2001      	movne	r0, #1
 800a6b0:	f1b8 0f00 	cmp.w	r8, #0
 800a6b4:	dcd3      	bgt.n	800a65e <__ieee754_pow+0x216>
 800a6b6:	e7db      	b.n	800a670 <__ieee754_pow+0x228>
 800a6b8:	fff00000 	.word	0xfff00000
 800a6bc:	7ff00000 	.word	0x7ff00000
 800a6c0:	433fffff 	.word	0x433fffff
 800a6c4:	3ff00000 	.word	0x3ff00000
 800a6c8:	3fefffff 	.word	0x3fefffff
 800a6cc:	3fe00000 	.word	0x3fe00000
 800a6d0:	bff00000 	.word	0xbff00000
 800a6d4:	43f00000 	.word	0x43f00000
 800a6d8:	4b5b      	ldr	r3, [pc, #364]	@ (800a848 <__ieee754_pow+0x400>)
 800a6da:	f7f5 fdf9 	bl	80002d0 <__aeabi_dsub>
 800a6de:	a352      	add	r3, pc, #328	@ (adr r3, 800a828 <__ieee754_pow+0x3e0>)
 800a6e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a6e4:	4604      	mov	r4, r0
 800a6e6:	460d      	mov	r5, r1
 800a6e8:	f7f5 ffaa 	bl	8000640 <__aeabi_dmul>
 800a6ec:	a350      	add	r3, pc, #320	@ (adr r3, 800a830 <__ieee754_pow+0x3e8>)
 800a6ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a6f2:	4606      	mov	r6, r0
 800a6f4:	460f      	mov	r7, r1
 800a6f6:	4620      	mov	r0, r4
 800a6f8:	4629      	mov	r1, r5
 800a6fa:	f7f5 ffa1 	bl	8000640 <__aeabi_dmul>
 800a6fe:	2200      	movs	r2, #0
 800a700:	4682      	mov	sl, r0
 800a702:	468b      	mov	fp, r1
 800a704:	4620      	mov	r0, r4
 800a706:	4629      	mov	r1, r5
 800a708:	4b50      	ldr	r3, [pc, #320]	@ (800a84c <__ieee754_pow+0x404>)
 800a70a:	f7f5 ff99 	bl	8000640 <__aeabi_dmul>
 800a70e:	4602      	mov	r2, r0
 800a710:	460b      	mov	r3, r1
 800a712:	a149      	add	r1, pc, #292	@ (adr r1, 800a838 <__ieee754_pow+0x3f0>)
 800a714:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a718:	f7f5 fdda 	bl	80002d0 <__aeabi_dsub>
 800a71c:	4622      	mov	r2, r4
 800a71e:	462b      	mov	r3, r5
 800a720:	f7f5 ff8e 	bl	8000640 <__aeabi_dmul>
 800a724:	4602      	mov	r2, r0
 800a726:	460b      	mov	r3, r1
 800a728:	2000      	movs	r0, #0
 800a72a:	4949      	ldr	r1, [pc, #292]	@ (800a850 <__ieee754_pow+0x408>)
 800a72c:	f7f5 fdd0 	bl	80002d0 <__aeabi_dsub>
 800a730:	4622      	mov	r2, r4
 800a732:	4680      	mov	r8, r0
 800a734:	4689      	mov	r9, r1
 800a736:	462b      	mov	r3, r5
 800a738:	4620      	mov	r0, r4
 800a73a:	4629      	mov	r1, r5
 800a73c:	f7f5 ff80 	bl	8000640 <__aeabi_dmul>
 800a740:	4602      	mov	r2, r0
 800a742:	460b      	mov	r3, r1
 800a744:	4640      	mov	r0, r8
 800a746:	4649      	mov	r1, r9
 800a748:	f7f5 ff7a 	bl	8000640 <__aeabi_dmul>
 800a74c:	a33c      	add	r3, pc, #240	@ (adr r3, 800a840 <__ieee754_pow+0x3f8>)
 800a74e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a752:	f7f5 ff75 	bl	8000640 <__aeabi_dmul>
 800a756:	4602      	mov	r2, r0
 800a758:	460b      	mov	r3, r1
 800a75a:	4650      	mov	r0, sl
 800a75c:	4659      	mov	r1, fp
 800a75e:	f7f5 fdb7 	bl	80002d0 <__aeabi_dsub>
 800a762:	2400      	movs	r4, #0
 800a764:	4602      	mov	r2, r0
 800a766:	460b      	mov	r3, r1
 800a768:	4680      	mov	r8, r0
 800a76a:	4689      	mov	r9, r1
 800a76c:	4630      	mov	r0, r6
 800a76e:	4639      	mov	r1, r7
 800a770:	f7f5 fdb0 	bl	80002d4 <__adddf3>
 800a774:	4632      	mov	r2, r6
 800a776:	463b      	mov	r3, r7
 800a778:	4620      	mov	r0, r4
 800a77a:	460d      	mov	r5, r1
 800a77c:	f7f5 fda8 	bl	80002d0 <__aeabi_dsub>
 800a780:	4602      	mov	r2, r0
 800a782:	460b      	mov	r3, r1
 800a784:	4640      	mov	r0, r8
 800a786:	4649      	mov	r1, r9
 800a788:	f7f5 fda2 	bl	80002d0 <__aeabi_dsub>
 800a78c:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a790:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800a794:	2300      	movs	r3, #0
 800a796:	9304      	str	r3, [sp, #16]
 800a798:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 800a79c:	4606      	mov	r6, r0
 800a79e:	460f      	mov	r7, r1
 800a7a0:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a7a4:	4652      	mov	r2, sl
 800a7a6:	465b      	mov	r3, fp
 800a7a8:	f7f5 fd92 	bl	80002d0 <__aeabi_dsub>
 800a7ac:	4622      	mov	r2, r4
 800a7ae:	462b      	mov	r3, r5
 800a7b0:	f7f5 ff46 	bl	8000640 <__aeabi_dmul>
 800a7b4:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a7b8:	4680      	mov	r8, r0
 800a7ba:	4689      	mov	r9, r1
 800a7bc:	4630      	mov	r0, r6
 800a7be:	4639      	mov	r1, r7
 800a7c0:	f7f5 ff3e 	bl	8000640 <__aeabi_dmul>
 800a7c4:	4602      	mov	r2, r0
 800a7c6:	460b      	mov	r3, r1
 800a7c8:	4640      	mov	r0, r8
 800a7ca:	4649      	mov	r1, r9
 800a7cc:	f7f5 fd82 	bl	80002d4 <__adddf3>
 800a7d0:	4652      	mov	r2, sl
 800a7d2:	465b      	mov	r3, fp
 800a7d4:	4606      	mov	r6, r0
 800a7d6:	460f      	mov	r7, r1
 800a7d8:	4620      	mov	r0, r4
 800a7da:	4629      	mov	r1, r5
 800a7dc:	f7f5 ff30 	bl	8000640 <__aeabi_dmul>
 800a7e0:	460b      	mov	r3, r1
 800a7e2:	4602      	mov	r2, r0
 800a7e4:	4680      	mov	r8, r0
 800a7e6:	4689      	mov	r9, r1
 800a7e8:	4630      	mov	r0, r6
 800a7ea:	4639      	mov	r1, r7
 800a7ec:	f7f5 fd72 	bl	80002d4 <__adddf3>
 800a7f0:	4b18      	ldr	r3, [pc, #96]	@ (800a854 <__ieee754_pow+0x40c>)
 800a7f2:	4604      	mov	r4, r0
 800a7f4:	4299      	cmp	r1, r3
 800a7f6:	460d      	mov	r5, r1
 800a7f8:	468a      	mov	sl, r1
 800a7fa:	468b      	mov	fp, r1
 800a7fc:	f340 82e0 	ble.w	800adc0 <__ieee754_pow+0x978>
 800a800:	f101 433f 	add.w	r3, r1, #3204448256	@ 0xbf000000
 800a804:	f503 03e0 	add.w	r3, r3, #7340032	@ 0x700000
 800a808:	4303      	orrs	r3, r0
 800a80a:	f000 81df 	beq.w	800abcc <__ieee754_pow+0x784>
 800a80e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a812:	2200      	movs	r2, #0
 800a814:	2300      	movs	r3, #0
 800a816:	f7f6 f985 	bl	8000b24 <__aeabi_dcmplt>
 800a81a:	3800      	subs	r0, #0
 800a81c:	bf18      	it	ne
 800a81e:	2001      	movne	r0, #1
 800a820:	e71d      	b.n	800a65e <__ieee754_pow+0x216>
 800a822:	bf00      	nop
 800a824:	f3af 8000 	nop.w
 800a828:	60000000 	.word	0x60000000
 800a82c:	3ff71547 	.word	0x3ff71547
 800a830:	f85ddf44 	.word	0xf85ddf44
 800a834:	3e54ae0b 	.word	0x3e54ae0b
 800a838:	55555555 	.word	0x55555555
 800a83c:	3fd55555 	.word	0x3fd55555
 800a840:	652b82fe 	.word	0x652b82fe
 800a844:	3ff71547 	.word	0x3ff71547
 800a848:	3ff00000 	.word	0x3ff00000
 800a84c:	3fd00000 	.word	0x3fd00000
 800a850:	3fe00000 	.word	0x3fe00000
 800a854:	408fffff 	.word	0x408fffff
 800a858:	4ad3      	ldr	r2, [pc, #844]	@ (800aba8 <__ieee754_pow+0x760>)
 800a85a:	402a      	ands	r2, r5
 800a85c:	2a00      	cmp	r2, #0
 800a85e:	f040 817a 	bne.w	800ab56 <__ieee754_pow+0x70e>
 800a862:	4bd2      	ldr	r3, [pc, #840]	@ (800abac <__ieee754_pow+0x764>)
 800a864:	2200      	movs	r2, #0
 800a866:	f7f5 feeb 	bl	8000640 <__aeabi_dmul>
 800a86a:	f06f 0434 	mvn.w	r4, #52	@ 0x34
 800a86e:	460b      	mov	r3, r1
 800a870:	151a      	asrs	r2, r3, #20
 800a872:	f2a2 32ff 	subw	r2, r2, #1023	@ 0x3ff
 800a876:	4422      	add	r2, r4
 800a878:	920a      	str	r2, [sp, #40]	@ 0x28
 800a87a:	4acd      	ldr	r2, [pc, #820]	@ (800abb0 <__ieee754_pow+0x768>)
 800a87c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a880:	f043 557f 	orr.w	r5, r3, #1069547520	@ 0x3fc00000
 800a884:	4293      	cmp	r3, r2
 800a886:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800a88a:	dd08      	ble.n	800a89e <__ieee754_pow+0x456>
 800a88c:	4ac9      	ldr	r2, [pc, #804]	@ (800abb4 <__ieee754_pow+0x76c>)
 800a88e:	4293      	cmp	r3, r2
 800a890:	f340 8163 	ble.w	800ab5a <__ieee754_pow+0x712>
 800a894:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a896:	f5a5 1580 	sub.w	r5, r5, #1048576	@ 0x100000
 800a89a:	3301      	adds	r3, #1
 800a89c:	930a      	str	r3, [sp, #40]	@ 0x28
 800a89e:	2600      	movs	r6, #0
 800a8a0:	00f3      	lsls	r3, r6, #3
 800a8a2:	930b      	str	r3, [sp, #44]	@ 0x2c
 800a8a4:	4bc4      	ldr	r3, [pc, #784]	@ (800abb8 <__ieee754_pow+0x770>)
 800a8a6:	4629      	mov	r1, r5
 800a8a8:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800a8ac:	e9d3 3400 	ldrd	r3, r4, [r3]
 800a8b0:	461a      	mov	r2, r3
 800a8b2:	e9cd 3408 	strd	r3, r4, [sp, #32]
 800a8b6:	4623      	mov	r3, r4
 800a8b8:	4682      	mov	sl, r0
 800a8ba:	f7f5 fd09 	bl	80002d0 <__aeabi_dsub>
 800a8be:	4652      	mov	r2, sl
 800a8c0:	462b      	mov	r3, r5
 800a8c2:	e9cd 010c 	strd	r0, r1, [sp, #48]	@ 0x30
 800a8c6:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800a8ca:	f7f5 fd03 	bl	80002d4 <__adddf3>
 800a8ce:	4602      	mov	r2, r0
 800a8d0:	460b      	mov	r3, r1
 800a8d2:	2000      	movs	r0, #0
 800a8d4:	49b9      	ldr	r1, [pc, #740]	@ (800abbc <__ieee754_pow+0x774>)
 800a8d6:	f7f5 ffdd 	bl	8000894 <__aeabi_ddiv>
 800a8da:	4602      	mov	r2, r0
 800a8dc:	460b      	mov	r3, r1
 800a8de:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800a8e2:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800a8e6:	f7f5 feab 	bl	8000640 <__aeabi_dmul>
 800a8ea:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800a8ee:	e9dd 3406 	ldrd	r3, r4, [sp, #24]
 800a8f2:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800a8f6:	2300      	movs	r3, #0
 800a8f8:	2200      	movs	r2, #0
 800a8fa:	46ab      	mov	fp, r5
 800a8fc:	106d      	asrs	r5, r5, #1
 800a8fe:	f045 5500 	orr.w	r5, r5, #536870912	@ 0x20000000
 800a902:	9304      	str	r3, [sp, #16]
 800a904:	f505 2500 	add.w	r5, r5, #524288	@ 0x80000
 800a908:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 800a90c:	eb05 4386 	add.w	r3, r5, r6, lsl #18
 800a910:	4640      	mov	r0, r8
 800a912:	4649      	mov	r1, r9
 800a914:	4614      	mov	r4, r2
 800a916:	461d      	mov	r5, r3
 800a918:	f7f5 fe92 	bl	8000640 <__aeabi_dmul>
 800a91c:	4602      	mov	r2, r0
 800a91e:	460b      	mov	r3, r1
 800a920:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800a924:	f7f5 fcd4 	bl	80002d0 <__aeabi_dsub>
 800a928:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800a92c:	4606      	mov	r6, r0
 800a92e:	460f      	mov	r7, r1
 800a930:	4620      	mov	r0, r4
 800a932:	4629      	mov	r1, r5
 800a934:	f7f5 fccc 	bl	80002d0 <__aeabi_dsub>
 800a938:	4602      	mov	r2, r0
 800a93a:	460b      	mov	r3, r1
 800a93c:	4650      	mov	r0, sl
 800a93e:	4659      	mov	r1, fp
 800a940:	f7f5 fcc6 	bl	80002d0 <__aeabi_dsub>
 800a944:	4642      	mov	r2, r8
 800a946:	464b      	mov	r3, r9
 800a948:	f7f5 fe7a 	bl	8000640 <__aeabi_dmul>
 800a94c:	4602      	mov	r2, r0
 800a94e:	460b      	mov	r3, r1
 800a950:	4630      	mov	r0, r6
 800a952:	4639      	mov	r1, r7
 800a954:	f7f5 fcbc 	bl	80002d0 <__aeabi_dsub>
 800a958:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800a95c:	f7f5 fe70 	bl	8000640 <__aeabi_dmul>
 800a960:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800a964:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800a968:	4610      	mov	r0, r2
 800a96a:	4619      	mov	r1, r3
 800a96c:	f7f5 fe68 	bl	8000640 <__aeabi_dmul>
 800a970:	a37b      	add	r3, pc, #492	@ (adr r3, 800ab60 <__ieee754_pow+0x718>)
 800a972:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a976:	4604      	mov	r4, r0
 800a978:	460d      	mov	r5, r1
 800a97a:	f7f5 fe61 	bl	8000640 <__aeabi_dmul>
 800a97e:	a37a      	add	r3, pc, #488	@ (adr r3, 800ab68 <__ieee754_pow+0x720>)
 800a980:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a984:	f7f5 fca6 	bl	80002d4 <__adddf3>
 800a988:	4622      	mov	r2, r4
 800a98a:	462b      	mov	r3, r5
 800a98c:	f7f5 fe58 	bl	8000640 <__aeabi_dmul>
 800a990:	a377      	add	r3, pc, #476	@ (adr r3, 800ab70 <__ieee754_pow+0x728>)
 800a992:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a996:	f7f5 fc9d 	bl	80002d4 <__adddf3>
 800a99a:	4622      	mov	r2, r4
 800a99c:	462b      	mov	r3, r5
 800a99e:	f7f5 fe4f 	bl	8000640 <__aeabi_dmul>
 800a9a2:	a375      	add	r3, pc, #468	@ (adr r3, 800ab78 <__ieee754_pow+0x730>)
 800a9a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a9a8:	f7f5 fc94 	bl	80002d4 <__adddf3>
 800a9ac:	4622      	mov	r2, r4
 800a9ae:	462b      	mov	r3, r5
 800a9b0:	f7f5 fe46 	bl	8000640 <__aeabi_dmul>
 800a9b4:	a372      	add	r3, pc, #456	@ (adr r3, 800ab80 <__ieee754_pow+0x738>)
 800a9b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a9ba:	f7f5 fc8b 	bl	80002d4 <__adddf3>
 800a9be:	4622      	mov	r2, r4
 800a9c0:	462b      	mov	r3, r5
 800a9c2:	f7f5 fe3d 	bl	8000640 <__aeabi_dmul>
 800a9c6:	a370      	add	r3, pc, #448	@ (adr r3, 800ab88 <__ieee754_pow+0x740>)
 800a9c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a9cc:	f7f5 fc82 	bl	80002d4 <__adddf3>
 800a9d0:	4622      	mov	r2, r4
 800a9d2:	4606      	mov	r6, r0
 800a9d4:	460f      	mov	r7, r1
 800a9d6:	462b      	mov	r3, r5
 800a9d8:	4620      	mov	r0, r4
 800a9da:	4629      	mov	r1, r5
 800a9dc:	f7f5 fe30 	bl	8000640 <__aeabi_dmul>
 800a9e0:	4602      	mov	r2, r0
 800a9e2:	460b      	mov	r3, r1
 800a9e4:	4630      	mov	r0, r6
 800a9e6:	4639      	mov	r1, r7
 800a9e8:	f7f5 fe2a 	bl	8000640 <__aeabi_dmul>
 800a9ec:	4604      	mov	r4, r0
 800a9ee:	460d      	mov	r5, r1
 800a9f0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a9f4:	4642      	mov	r2, r8
 800a9f6:	464b      	mov	r3, r9
 800a9f8:	f7f5 fc6c 	bl	80002d4 <__adddf3>
 800a9fc:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800aa00:	f7f5 fe1e 	bl	8000640 <__aeabi_dmul>
 800aa04:	4622      	mov	r2, r4
 800aa06:	462b      	mov	r3, r5
 800aa08:	f7f5 fc64 	bl	80002d4 <__adddf3>
 800aa0c:	4642      	mov	r2, r8
 800aa0e:	4682      	mov	sl, r0
 800aa10:	468b      	mov	fp, r1
 800aa12:	464b      	mov	r3, r9
 800aa14:	4640      	mov	r0, r8
 800aa16:	4649      	mov	r1, r9
 800aa18:	f7f5 fe12 	bl	8000640 <__aeabi_dmul>
 800aa1c:	2200      	movs	r2, #0
 800aa1e:	4b68      	ldr	r3, [pc, #416]	@ (800abc0 <__ieee754_pow+0x778>)
 800aa20:	4606      	mov	r6, r0
 800aa22:	460f      	mov	r7, r1
 800aa24:	f7f5 fc56 	bl	80002d4 <__adddf3>
 800aa28:	4652      	mov	r2, sl
 800aa2a:	465b      	mov	r3, fp
 800aa2c:	f7f5 fc52 	bl	80002d4 <__adddf3>
 800aa30:	2400      	movs	r4, #0
 800aa32:	460d      	mov	r5, r1
 800aa34:	4622      	mov	r2, r4
 800aa36:	460b      	mov	r3, r1
 800aa38:	4640      	mov	r0, r8
 800aa3a:	4649      	mov	r1, r9
 800aa3c:	f7f5 fe00 	bl	8000640 <__aeabi_dmul>
 800aa40:	2200      	movs	r2, #0
 800aa42:	4680      	mov	r8, r0
 800aa44:	4689      	mov	r9, r1
 800aa46:	4620      	mov	r0, r4
 800aa48:	4629      	mov	r1, r5
 800aa4a:	4b5d      	ldr	r3, [pc, #372]	@ (800abc0 <__ieee754_pow+0x778>)
 800aa4c:	f7f5 fc40 	bl	80002d0 <__aeabi_dsub>
 800aa50:	4632      	mov	r2, r6
 800aa52:	463b      	mov	r3, r7
 800aa54:	f7f5 fc3c 	bl	80002d0 <__aeabi_dsub>
 800aa58:	4602      	mov	r2, r0
 800aa5a:	460b      	mov	r3, r1
 800aa5c:	4650      	mov	r0, sl
 800aa5e:	4659      	mov	r1, fp
 800aa60:	f7f5 fc36 	bl	80002d0 <__aeabi_dsub>
 800aa64:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800aa68:	f7f5 fdea 	bl	8000640 <__aeabi_dmul>
 800aa6c:	4622      	mov	r2, r4
 800aa6e:	4606      	mov	r6, r0
 800aa70:	460f      	mov	r7, r1
 800aa72:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800aa76:	462b      	mov	r3, r5
 800aa78:	f7f5 fde2 	bl	8000640 <__aeabi_dmul>
 800aa7c:	4602      	mov	r2, r0
 800aa7e:	460b      	mov	r3, r1
 800aa80:	4630      	mov	r0, r6
 800aa82:	4639      	mov	r1, r7
 800aa84:	f7f5 fc26 	bl	80002d4 <__adddf3>
 800aa88:	2400      	movs	r4, #0
 800aa8a:	4606      	mov	r6, r0
 800aa8c:	460f      	mov	r7, r1
 800aa8e:	4602      	mov	r2, r0
 800aa90:	460b      	mov	r3, r1
 800aa92:	4640      	mov	r0, r8
 800aa94:	4649      	mov	r1, r9
 800aa96:	f7f5 fc1d 	bl	80002d4 <__adddf3>
 800aa9a:	a33d      	add	r3, pc, #244	@ (adr r3, 800ab90 <__ieee754_pow+0x748>)
 800aa9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aaa0:	4620      	mov	r0, r4
 800aaa2:	460d      	mov	r5, r1
 800aaa4:	f7f5 fdcc 	bl	8000640 <__aeabi_dmul>
 800aaa8:	4642      	mov	r2, r8
 800aaaa:	464b      	mov	r3, r9
 800aaac:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800aab0:	4620      	mov	r0, r4
 800aab2:	4629      	mov	r1, r5
 800aab4:	f7f5 fc0c 	bl	80002d0 <__aeabi_dsub>
 800aab8:	4602      	mov	r2, r0
 800aaba:	460b      	mov	r3, r1
 800aabc:	4630      	mov	r0, r6
 800aabe:	4639      	mov	r1, r7
 800aac0:	f7f5 fc06 	bl	80002d0 <__aeabi_dsub>
 800aac4:	a334      	add	r3, pc, #208	@ (adr r3, 800ab98 <__ieee754_pow+0x750>)
 800aac6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aaca:	f7f5 fdb9 	bl	8000640 <__aeabi_dmul>
 800aace:	a334      	add	r3, pc, #208	@ (adr r3, 800aba0 <__ieee754_pow+0x758>)
 800aad0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aad4:	4606      	mov	r6, r0
 800aad6:	460f      	mov	r7, r1
 800aad8:	4620      	mov	r0, r4
 800aada:	4629      	mov	r1, r5
 800aadc:	f7f5 fdb0 	bl	8000640 <__aeabi_dmul>
 800aae0:	4602      	mov	r2, r0
 800aae2:	460b      	mov	r3, r1
 800aae4:	4630      	mov	r0, r6
 800aae6:	4639      	mov	r1, r7
 800aae8:	f7f5 fbf4 	bl	80002d4 <__adddf3>
 800aaec:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800aaee:	4b35      	ldr	r3, [pc, #212]	@ (800abc4 <__ieee754_pow+0x77c>)
 800aaf0:	2400      	movs	r4, #0
 800aaf2:	4413      	add	r3, r2
 800aaf4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aaf8:	f7f5 fbec 	bl	80002d4 <__adddf3>
 800aafc:	4682      	mov	sl, r0
 800aafe:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800ab00:	468b      	mov	fp, r1
 800ab02:	f7f5 fd33 	bl	800056c <__aeabi_i2d>
 800ab06:	4606      	mov	r6, r0
 800ab08:	460f      	mov	r7, r1
 800ab0a:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800ab0c:	4b2e      	ldr	r3, [pc, #184]	@ (800abc8 <__ieee754_pow+0x780>)
 800ab0e:	4413      	add	r3, r2
 800ab10:	e9d3 8900 	ldrd	r8, r9, [r3]
 800ab14:	4652      	mov	r2, sl
 800ab16:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800ab1a:	465b      	mov	r3, fp
 800ab1c:	f7f5 fbda 	bl	80002d4 <__adddf3>
 800ab20:	4642      	mov	r2, r8
 800ab22:	464b      	mov	r3, r9
 800ab24:	f7f5 fbd6 	bl	80002d4 <__adddf3>
 800ab28:	4632      	mov	r2, r6
 800ab2a:	463b      	mov	r3, r7
 800ab2c:	f7f5 fbd2 	bl	80002d4 <__adddf3>
 800ab30:	4632      	mov	r2, r6
 800ab32:	463b      	mov	r3, r7
 800ab34:	4620      	mov	r0, r4
 800ab36:	460d      	mov	r5, r1
 800ab38:	f7f5 fbca 	bl	80002d0 <__aeabi_dsub>
 800ab3c:	4642      	mov	r2, r8
 800ab3e:	464b      	mov	r3, r9
 800ab40:	f7f5 fbc6 	bl	80002d0 <__aeabi_dsub>
 800ab44:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800ab48:	f7f5 fbc2 	bl	80002d0 <__aeabi_dsub>
 800ab4c:	4602      	mov	r2, r0
 800ab4e:	460b      	mov	r3, r1
 800ab50:	4650      	mov	r0, sl
 800ab52:	4659      	mov	r1, fp
 800ab54:	e618      	b.n	800a788 <__ieee754_pow+0x340>
 800ab56:	2400      	movs	r4, #0
 800ab58:	e68a      	b.n	800a870 <__ieee754_pow+0x428>
 800ab5a:	2601      	movs	r6, #1
 800ab5c:	e6a0      	b.n	800a8a0 <__ieee754_pow+0x458>
 800ab5e:	bf00      	nop
 800ab60:	4a454eef 	.word	0x4a454eef
 800ab64:	3fca7e28 	.word	0x3fca7e28
 800ab68:	93c9db65 	.word	0x93c9db65
 800ab6c:	3fcd864a 	.word	0x3fcd864a
 800ab70:	a91d4101 	.word	0xa91d4101
 800ab74:	3fd17460 	.word	0x3fd17460
 800ab78:	518f264d 	.word	0x518f264d
 800ab7c:	3fd55555 	.word	0x3fd55555
 800ab80:	db6fabff 	.word	0xdb6fabff
 800ab84:	3fdb6db6 	.word	0x3fdb6db6
 800ab88:	33333303 	.word	0x33333303
 800ab8c:	3fe33333 	.word	0x3fe33333
 800ab90:	e0000000 	.word	0xe0000000
 800ab94:	3feec709 	.word	0x3feec709
 800ab98:	dc3a03fd 	.word	0xdc3a03fd
 800ab9c:	3feec709 	.word	0x3feec709
 800aba0:	145b01f5 	.word	0x145b01f5
 800aba4:	be3e2fe0 	.word	0xbe3e2fe0
 800aba8:	7ff00000 	.word	0x7ff00000
 800abac:	43400000 	.word	0x43400000
 800abb0:	0003988e 	.word	0x0003988e
 800abb4:	000bb679 	.word	0x000bb679
 800abb8:	0800f600 	.word	0x0800f600
 800abbc:	3ff00000 	.word	0x3ff00000
 800abc0:	40080000 	.word	0x40080000
 800abc4:	0800f5e0 	.word	0x0800f5e0
 800abc8:	0800f5f0 	.word	0x0800f5f0
 800abcc:	a39a      	add	r3, pc, #616	@ (adr r3, 800ae38 <__ieee754_pow+0x9f0>)
 800abce:	e9d3 2300 	ldrd	r2, r3, [r3]
 800abd2:	4630      	mov	r0, r6
 800abd4:	4639      	mov	r1, r7
 800abd6:	f7f5 fb7d 	bl	80002d4 <__adddf3>
 800abda:	4642      	mov	r2, r8
 800abdc:	e9cd 0100 	strd	r0, r1, [sp]
 800abe0:	464b      	mov	r3, r9
 800abe2:	4620      	mov	r0, r4
 800abe4:	4629      	mov	r1, r5
 800abe6:	f7f5 fb73 	bl	80002d0 <__aeabi_dsub>
 800abea:	4602      	mov	r2, r0
 800abec:	460b      	mov	r3, r1
 800abee:	e9dd 0100 	ldrd	r0, r1, [sp]
 800abf2:	f7f5 ffb5 	bl	8000b60 <__aeabi_dcmpgt>
 800abf6:	2800      	cmp	r0, #0
 800abf8:	f47f ae09 	bne.w	800a80e <__ieee754_pow+0x3c6>
 800abfc:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 800ac00:	ea4f 5a2a 	mov.w	sl, sl, asr #20
 800ac04:	f2aa 3afe 	subw	sl, sl, #1022	@ 0x3fe
 800ac08:	fa43 fa0a 	asr.w	sl, r3, sl
 800ac0c:	44da      	add	sl, fp
 800ac0e:	f3ca 510a 	ubfx	r1, sl, #20, #11
 800ac12:	489b      	ldr	r0, [pc, #620]	@ (800ae80 <__ieee754_pow+0xa38>)
 800ac14:	f2a1 31ff 	subw	r1, r1, #1023	@ 0x3ff
 800ac18:	4108      	asrs	r0, r1
 800ac1a:	ea00 030a 	and.w	r3, r0, sl
 800ac1e:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 800ac22:	f1c1 0114 	rsb	r1, r1, #20
 800ac26:	f44a 1a80 	orr.w	sl, sl, #1048576	@ 0x100000
 800ac2a:	4640      	mov	r0, r8
 800ac2c:	fa4a fa01 	asr.w	sl, sl, r1
 800ac30:	f1bb 0f00 	cmp.w	fp, #0
 800ac34:	4649      	mov	r1, r9
 800ac36:	f04f 0200 	mov.w	r2, #0
 800ac3a:	bfb8      	it	lt
 800ac3c:	f1ca 0a00 	rsblt	sl, sl, #0
 800ac40:	f7f5 fb46 	bl	80002d0 <__aeabi_dsub>
 800ac44:	4680      	mov	r8, r0
 800ac46:	4689      	mov	r9, r1
 800ac48:	2400      	movs	r4, #0
 800ac4a:	4632      	mov	r2, r6
 800ac4c:	463b      	mov	r3, r7
 800ac4e:	4640      	mov	r0, r8
 800ac50:	4649      	mov	r1, r9
 800ac52:	f7f5 fb3f 	bl	80002d4 <__adddf3>
 800ac56:	a37a      	add	r3, pc, #488	@ (adr r3, 800ae40 <__ieee754_pow+0x9f8>)
 800ac58:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac5c:	4620      	mov	r0, r4
 800ac5e:	460d      	mov	r5, r1
 800ac60:	f7f5 fcee 	bl	8000640 <__aeabi_dmul>
 800ac64:	4642      	mov	r2, r8
 800ac66:	464b      	mov	r3, r9
 800ac68:	e9cd 0100 	strd	r0, r1, [sp]
 800ac6c:	4620      	mov	r0, r4
 800ac6e:	4629      	mov	r1, r5
 800ac70:	f7f5 fb2e 	bl	80002d0 <__aeabi_dsub>
 800ac74:	4602      	mov	r2, r0
 800ac76:	460b      	mov	r3, r1
 800ac78:	4630      	mov	r0, r6
 800ac7a:	4639      	mov	r1, r7
 800ac7c:	f7f5 fb28 	bl	80002d0 <__aeabi_dsub>
 800ac80:	a371      	add	r3, pc, #452	@ (adr r3, 800ae48 <__ieee754_pow+0xa00>)
 800ac82:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac86:	f7f5 fcdb 	bl	8000640 <__aeabi_dmul>
 800ac8a:	a371      	add	r3, pc, #452	@ (adr r3, 800ae50 <__ieee754_pow+0xa08>)
 800ac8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac90:	4680      	mov	r8, r0
 800ac92:	4689      	mov	r9, r1
 800ac94:	4620      	mov	r0, r4
 800ac96:	4629      	mov	r1, r5
 800ac98:	f7f5 fcd2 	bl	8000640 <__aeabi_dmul>
 800ac9c:	4602      	mov	r2, r0
 800ac9e:	460b      	mov	r3, r1
 800aca0:	4640      	mov	r0, r8
 800aca2:	4649      	mov	r1, r9
 800aca4:	f7f5 fb16 	bl	80002d4 <__adddf3>
 800aca8:	4604      	mov	r4, r0
 800acaa:	460d      	mov	r5, r1
 800acac:	4602      	mov	r2, r0
 800acae:	460b      	mov	r3, r1
 800acb0:	e9dd 0100 	ldrd	r0, r1, [sp]
 800acb4:	f7f5 fb0e 	bl	80002d4 <__adddf3>
 800acb8:	e9dd 2300 	ldrd	r2, r3, [sp]
 800acbc:	4680      	mov	r8, r0
 800acbe:	4689      	mov	r9, r1
 800acc0:	f7f5 fb06 	bl	80002d0 <__aeabi_dsub>
 800acc4:	4602      	mov	r2, r0
 800acc6:	460b      	mov	r3, r1
 800acc8:	4620      	mov	r0, r4
 800acca:	4629      	mov	r1, r5
 800accc:	f7f5 fb00 	bl	80002d0 <__aeabi_dsub>
 800acd0:	4642      	mov	r2, r8
 800acd2:	4606      	mov	r6, r0
 800acd4:	460f      	mov	r7, r1
 800acd6:	464b      	mov	r3, r9
 800acd8:	4640      	mov	r0, r8
 800acda:	4649      	mov	r1, r9
 800acdc:	f7f5 fcb0 	bl	8000640 <__aeabi_dmul>
 800ace0:	a35d      	add	r3, pc, #372	@ (adr r3, 800ae58 <__ieee754_pow+0xa10>)
 800ace2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ace6:	4604      	mov	r4, r0
 800ace8:	460d      	mov	r5, r1
 800acea:	f7f5 fca9 	bl	8000640 <__aeabi_dmul>
 800acee:	a35c      	add	r3, pc, #368	@ (adr r3, 800ae60 <__ieee754_pow+0xa18>)
 800acf0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800acf4:	f7f5 faec 	bl	80002d0 <__aeabi_dsub>
 800acf8:	4622      	mov	r2, r4
 800acfa:	462b      	mov	r3, r5
 800acfc:	f7f5 fca0 	bl	8000640 <__aeabi_dmul>
 800ad00:	a359      	add	r3, pc, #356	@ (adr r3, 800ae68 <__ieee754_pow+0xa20>)
 800ad02:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad06:	f7f5 fae5 	bl	80002d4 <__adddf3>
 800ad0a:	4622      	mov	r2, r4
 800ad0c:	462b      	mov	r3, r5
 800ad0e:	f7f5 fc97 	bl	8000640 <__aeabi_dmul>
 800ad12:	a357      	add	r3, pc, #348	@ (adr r3, 800ae70 <__ieee754_pow+0xa28>)
 800ad14:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad18:	f7f5 fada 	bl	80002d0 <__aeabi_dsub>
 800ad1c:	4622      	mov	r2, r4
 800ad1e:	462b      	mov	r3, r5
 800ad20:	f7f5 fc8e 	bl	8000640 <__aeabi_dmul>
 800ad24:	a354      	add	r3, pc, #336	@ (adr r3, 800ae78 <__ieee754_pow+0xa30>)
 800ad26:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad2a:	f7f5 fad3 	bl	80002d4 <__adddf3>
 800ad2e:	4622      	mov	r2, r4
 800ad30:	462b      	mov	r3, r5
 800ad32:	f7f5 fc85 	bl	8000640 <__aeabi_dmul>
 800ad36:	4602      	mov	r2, r0
 800ad38:	460b      	mov	r3, r1
 800ad3a:	4640      	mov	r0, r8
 800ad3c:	4649      	mov	r1, r9
 800ad3e:	f7f5 fac7 	bl	80002d0 <__aeabi_dsub>
 800ad42:	4604      	mov	r4, r0
 800ad44:	460d      	mov	r5, r1
 800ad46:	4602      	mov	r2, r0
 800ad48:	460b      	mov	r3, r1
 800ad4a:	4640      	mov	r0, r8
 800ad4c:	4649      	mov	r1, r9
 800ad4e:	f7f5 fc77 	bl	8000640 <__aeabi_dmul>
 800ad52:	2200      	movs	r2, #0
 800ad54:	e9cd 0100 	strd	r0, r1, [sp]
 800ad58:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800ad5c:	4620      	mov	r0, r4
 800ad5e:	4629      	mov	r1, r5
 800ad60:	f7f5 fab6 	bl	80002d0 <__aeabi_dsub>
 800ad64:	4602      	mov	r2, r0
 800ad66:	460b      	mov	r3, r1
 800ad68:	e9dd 0100 	ldrd	r0, r1, [sp]
 800ad6c:	f7f5 fd92 	bl	8000894 <__aeabi_ddiv>
 800ad70:	4632      	mov	r2, r6
 800ad72:	4604      	mov	r4, r0
 800ad74:	460d      	mov	r5, r1
 800ad76:	463b      	mov	r3, r7
 800ad78:	4640      	mov	r0, r8
 800ad7a:	4649      	mov	r1, r9
 800ad7c:	f7f5 fc60 	bl	8000640 <__aeabi_dmul>
 800ad80:	4632      	mov	r2, r6
 800ad82:	463b      	mov	r3, r7
 800ad84:	f7f5 faa6 	bl	80002d4 <__adddf3>
 800ad88:	4602      	mov	r2, r0
 800ad8a:	460b      	mov	r3, r1
 800ad8c:	4620      	mov	r0, r4
 800ad8e:	4629      	mov	r1, r5
 800ad90:	f7f5 fa9e 	bl	80002d0 <__aeabi_dsub>
 800ad94:	4642      	mov	r2, r8
 800ad96:	464b      	mov	r3, r9
 800ad98:	f7f5 fa9a 	bl	80002d0 <__aeabi_dsub>
 800ad9c:	4602      	mov	r2, r0
 800ad9e:	460b      	mov	r3, r1
 800ada0:	2000      	movs	r0, #0
 800ada2:	4938      	ldr	r1, [pc, #224]	@ (800ae84 <__ieee754_pow+0xa3c>)
 800ada4:	f7f5 fa94 	bl	80002d0 <__aeabi_dsub>
 800ada8:	eb01 540a 	add.w	r4, r1, sl, lsl #20
 800adac:	f5b4 1f80 	cmp.w	r4, #1048576	@ 0x100000
 800adb0:	da2e      	bge.n	800ae10 <__ieee754_pow+0x9c8>
 800adb2:	4652      	mov	r2, sl
 800adb4:	f000 f874 	bl	800aea0 <scalbn>
 800adb8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800adbc:	f7ff bbed 	b.w	800a59a <__ieee754_pow+0x152>
 800adc0:	4c31      	ldr	r4, [pc, #196]	@ (800ae88 <__ieee754_pow+0xa40>)
 800adc2:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800adc6:	42a3      	cmp	r3, r4
 800adc8:	d91a      	bls.n	800ae00 <__ieee754_pow+0x9b8>
 800adca:	4b30      	ldr	r3, [pc, #192]	@ (800ae8c <__ieee754_pow+0xa44>)
 800adcc:	440b      	add	r3, r1
 800adce:	4303      	orrs	r3, r0
 800add0:	d009      	beq.n	800ade6 <__ieee754_pow+0x99e>
 800add2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800add6:	2200      	movs	r2, #0
 800add8:	2300      	movs	r3, #0
 800adda:	f7f5 fea3 	bl	8000b24 <__aeabi_dcmplt>
 800adde:	3800      	subs	r0, #0
 800ade0:	bf18      	it	ne
 800ade2:	2001      	movne	r0, #1
 800ade4:	e444      	b.n	800a670 <__ieee754_pow+0x228>
 800ade6:	4642      	mov	r2, r8
 800ade8:	464b      	mov	r3, r9
 800adea:	f7f5 fa71 	bl	80002d0 <__aeabi_dsub>
 800adee:	4632      	mov	r2, r6
 800adf0:	463b      	mov	r3, r7
 800adf2:	f7f5 feab 	bl	8000b4c <__aeabi_dcmpge>
 800adf6:	2800      	cmp	r0, #0
 800adf8:	d1eb      	bne.n	800add2 <__ieee754_pow+0x98a>
 800adfa:	f8df a094 	ldr.w	sl, [pc, #148]	@ 800ae90 <__ieee754_pow+0xa48>
 800adfe:	e6fd      	b.n	800abfc <__ieee754_pow+0x7b4>
 800ae00:	469a      	mov	sl, r3
 800ae02:	4b24      	ldr	r3, [pc, #144]	@ (800ae94 <__ieee754_pow+0xa4c>)
 800ae04:	459a      	cmp	sl, r3
 800ae06:	f63f aef9 	bhi.w	800abfc <__ieee754_pow+0x7b4>
 800ae0a:	f8dd a010 	ldr.w	sl, [sp, #16]
 800ae0e:	e71b      	b.n	800ac48 <__ieee754_pow+0x800>
 800ae10:	4621      	mov	r1, r4
 800ae12:	e7d1      	b.n	800adb8 <__ieee754_pow+0x970>
 800ae14:	2000      	movs	r0, #0
 800ae16:	491b      	ldr	r1, [pc, #108]	@ (800ae84 <__ieee754_pow+0xa3c>)
 800ae18:	f7ff bb34 	b.w	800a484 <__ieee754_pow+0x3c>
 800ae1c:	2000      	movs	r0, #0
 800ae1e:	2100      	movs	r1, #0
 800ae20:	f7ff bb30 	b.w	800a484 <__ieee754_pow+0x3c>
 800ae24:	4650      	mov	r0, sl
 800ae26:	4659      	mov	r1, fp
 800ae28:	f7ff bb2c 	b.w	800a484 <__ieee754_pow+0x3c>
 800ae2c:	460c      	mov	r4, r1
 800ae2e:	f7ff bb79 	b.w	800a524 <__ieee754_pow+0xdc>
 800ae32:	2400      	movs	r4, #0
 800ae34:	f7ff bb64 	b.w	800a500 <__ieee754_pow+0xb8>
 800ae38:	652b82fe 	.word	0x652b82fe
 800ae3c:	3c971547 	.word	0x3c971547
 800ae40:	00000000 	.word	0x00000000
 800ae44:	3fe62e43 	.word	0x3fe62e43
 800ae48:	fefa39ef 	.word	0xfefa39ef
 800ae4c:	3fe62e42 	.word	0x3fe62e42
 800ae50:	0ca86c39 	.word	0x0ca86c39
 800ae54:	be205c61 	.word	0xbe205c61
 800ae58:	72bea4d0 	.word	0x72bea4d0
 800ae5c:	3e663769 	.word	0x3e663769
 800ae60:	c5d26bf1 	.word	0xc5d26bf1
 800ae64:	3ebbbd41 	.word	0x3ebbbd41
 800ae68:	af25de2c 	.word	0xaf25de2c
 800ae6c:	3f11566a 	.word	0x3f11566a
 800ae70:	16bebd93 	.word	0x16bebd93
 800ae74:	3f66c16c 	.word	0x3f66c16c
 800ae78:	5555553e 	.word	0x5555553e
 800ae7c:	3fc55555 	.word	0x3fc55555
 800ae80:	fff00000 	.word	0xfff00000
 800ae84:	3ff00000 	.word	0x3ff00000
 800ae88:	4090cbff 	.word	0x4090cbff
 800ae8c:	3f6f3400 	.word	0x3f6f3400
 800ae90:	4090cc00 	.word	0x4090cc00
 800ae94:	3fe00000 	.word	0x3fe00000

0800ae98 <fabs>:
 800ae98:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800ae9c:	4619      	mov	r1, r3
 800ae9e:	4770      	bx	lr

0800aea0 <scalbn>:
 800aea0:	e92d 48f0 	stmdb	sp!, {r4, r5, r6, r7, fp, lr}
 800aea4:	4616      	mov	r6, r2
 800aea6:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800aeaa:	4683      	mov	fp, r0
 800aeac:	468c      	mov	ip, r1
 800aeae:	460b      	mov	r3, r1
 800aeb0:	b982      	cbnz	r2, 800aed4 <scalbn+0x34>
 800aeb2:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800aeb6:	4303      	orrs	r3, r0
 800aeb8:	d039      	beq.n	800af2e <scalbn+0x8e>
 800aeba:	4b2f      	ldr	r3, [pc, #188]	@ (800af78 <scalbn+0xd8>)
 800aebc:	2200      	movs	r2, #0
 800aebe:	f7f5 fbbf 	bl	8000640 <__aeabi_dmul>
 800aec2:	4b2e      	ldr	r3, [pc, #184]	@ (800af7c <scalbn+0xdc>)
 800aec4:	4683      	mov	fp, r0
 800aec6:	429e      	cmp	r6, r3
 800aec8:	468c      	mov	ip, r1
 800aeca:	da0d      	bge.n	800aee8 <scalbn+0x48>
 800aecc:	a326      	add	r3, pc, #152	@ (adr r3, 800af68 <scalbn+0xc8>)
 800aece:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aed2:	e01b      	b.n	800af0c <scalbn+0x6c>
 800aed4:	f240 77ff 	movw	r7, #2047	@ 0x7ff
 800aed8:	42ba      	cmp	r2, r7
 800aeda:	d109      	bne.n	800aef0 <scalbn+0x50>
 800aedc:	4602      	mov	r2, r0
 800aede:	f7f5 f9f9 	bl	80002d4 <__adddf3>
 800aee2:	4683      	mov	fp, r0
 800aee4:	468c      	mov	ip, r1
 800aee6:	e022      	b.n	800af2e <scalbn+0x8e>
 800aee8:	460b      	mov	r3, r1
 800aeea:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800aeee:	3a36      	subs	r2, #54	@ 0x36
 800aef0:	f24c 3150 	movw	r1, #50000	@ 0xc350
 800aef4:	428e      	cmp	r6, r1
 800aef6:	dd0c      	ble.n	800af12 <scalbn+0x72>
 800aef8:	a31d      	add	r3, pc, #116	@ (adr r3, 800af70 <scalbn+0xd0>)
 800aefa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aefe:	461c      	mov	r4, r3
 800af00:	ea4f 71dc 	mov.w	r1, ip, lsr #31
 800af04:	f361 74df 	bfi	r4, r1, #31, #1
 800af08:	4621      	mov	r1, r4
 800af0a:	481d      	ldr	r0, [pc, #116]	@ (800af80 <scalbn+0xe0>)
 800af0c:	f7f5 fb98 	bl	8000640 <__aeabi_dmul>
 800af10:	e7e7      	b.n	800aee2 <scalbn+0x42>
 800af12:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 800af16:	4432      	add	r2, r6
 800af18:	428a      	cmp	r2, r1
 800af1a:	dced      	bgt.n	800aef8 <scalbn+0x58>
 800af1c:	2a00      	cmp	r2, #0
 800af1e:	dd0a      	ble.n	800af36 <scalbn+0x96>
 800af20:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800af24:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 800af28:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800af2c:	46ac      	mov	ip, r5
 800af2e:	4658      	mov	r0, fp
 800af30:	4661      	mov	r1, ip
 800af32:	e8bd 88f0 	ldmia.w	sp!, {r4, r5, r6, r7, fp, pc}
 800af36:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 800af3a:	da09      	bge.n	800af50 <scalbn+0xb0>
 800af3c:	f00c 4300 	and.w	r3, ip, #2147483648	@ 0x80000000
 800af40:	f043 71d2 	orr.w	r1, r3, #27525120	@ 0x1a40000
 800af44:	f441 31b7 	orr.w	r1, r1, #93696	@ 0x16e00
 800af48:	480e      	ldr	r0, [pc, #56]	@ (800af84 <scalbn+0xe4>)
 800af4a:	f041 011f 	orr.w	r1, r1, #31
 800af4e:	e7bd      	b.n	800aecc <scalbn+0x2c>
 800af50:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800af54:	3236      	adds	r2, #54	@ 0x36
 800af56:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 800af5a:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800af5e:	4658      	mov	r0, fp
 800af60:	4629      	mov	r1, r5
 800af62:	2200      	movs	r2, #0
 800af64:	4b08      	ldr	r3, [pc, #32]	@ (800af88 <scalbn+0xe8>)
 800af66:	e7d1      	b.n	800af0c <scalbn+0x6c>
 800af68:	c2f8f359 	.word	0xc2f8f359
 800af6c:	01a56e1f 	.word	0x01a56e1f
 800af70:	8800759c 	.word	0x8800759c
 800af74:	7e37e43c 	.word	0x7e37e43c
 800af78:	43500000 	.word	0x43500000
 800af7c:	ffff3cb0 	.word	0xffff3cb0
 800af80:	8800759c 	.word	0x8800759c
 800af84:	c2f8f359 	.word	0xc2f8f359
 800af88:	3c900000 	.word	0x3c900000

0800af8c <with_errno>:
 800af8c:	b570      	push	{r4, r5, r6, lr}
 800af8e:	4604      	mov	r4, r0
 800af90:	460d      	mov	r5, r1
 800af92:	4616      	mov	r6, r2
 800af94:	f001 fcea 	bl	800c96c <__errno>
 800af98:	4629      	mov	r1, r5
 800af9a:	6006      	str	r6, [r0, #0]
 800af9c:	4620      	mov	r0, r4
 800af9e:	bd70      	pop	{r4, r5, r6, pc}

0800afa0 <xflow>:
 800afa0:	b513      	push	{r0, r1, r4, lr}
 800afa2:	4604      	mov	r4, r0
 800afa4:	4619      	mov	r1, r3
 800afa6:	4610      	mov	r0, r2
 800afa8:	b10c      	cbz	r4, 800afae <xflow+0xe>
 800afaa:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 800afae:	e9cd 2300 	strd	r2, r3, [sp]
 800afb2:	e9dd 2300 	ldrd	r2, r3, [sp]
 800afb6:	f7f5 fb43 	bl	8000640 <__aeabi_dmul>
 800afba:	2222      	movs	r2, #34	@ 0x22
 800afbc:	b002      	add	sp, #8
 800afbe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800afc2:	f7ff bfe3 	b.w	800af8c <with_errno>

0800afc6 <__math_uflow>:
 800afc6:	2200      	movs	r2, #0
 800afc8:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 800afcc:	f7ff bfe8 	b.w	800afa0 <xflow>

0800afd0 <__math_oflow>:
 800afd0:	2200      	movs	r2, #0
 800afd2:	f04f 43e0 	mov.w	r3, #1879048192	@ 0x70000000
 800afd6:	f7ff bfe3 	b.w	800afa0 <xflow>
	...

0800afdc <__ieee754_sqrt>:
 800afdc:	4a67      	ldr	r2, [pc, #412]	@ (800b17c <__ieee754_sqrt+0x1a0>)
 800afde:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800afe2:	438a      	bics	r2, r1
 800afe4:	4606      	mov	r6, r0
 800afe6:	460f      	mov	r7, r1
 800afe8:	460b      	mov	r3, r1
 800afea:	4604      	mov	r4, r0
 800afec:	d10e      	bne.n	800b00c <__ieee754_sqrt+0x30>
 800afee:	4602      	mov	r2, r0
 800aff0:	f7f5 fb26 	bl	8000640 <__aeabi_dmul>
 800aff4:	4602      	mov	r2, r0
 800aff6:	460b      	mov	r3, r1
 800aff8:	4630      	mov	r0, r6
 800affa:	4639      	mov	r1, r7
 800affc:	f7f5 f96a 	bl	80002d4 <__adddf3>
 800b000:	4606      	mov	r6, r0
 800b002:	460f      	mov	r7, r1
 800b004:	4630      	mov	r0, r6
 800b006:	4639      	mov	r1, r7
 800b008:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b00c:	2900      	cmp	r1, #0
 800b00e:	dc0c      	bgt.n	800b02a <__ieee754_sqrt+0x4e>
 800b010:	f021 4200 	bic.w	r2, r1, #2147483648	@ 0x80000000
 800b014:	4302      	orrs	r2, r0
 800b016:	d0f5      	beq.n	800b004 <__ieee754_sqrt+0x28>
 800b018:	b189      	cbz	r1, 800b03e <__ieee754_sqrt+0x62>
 800b01a:	4602      	mov	r2, r0
 800b01c:	f7f5 f958 	bl	80002d0 <__aeabi_dsub>
 800b020:	4602      	mov	r2, r0
 800b022:	460b      	mov	r3, r1
 800b024:	f7f5 fc36 	bl	8000894 <__aeabi_ddiv>
 800b028:	e7ea      	b.n	800b000 <__ieee754_sqrt+0x24>
 800b02a:	150a      	asrs	r2, r1, #20
 800b02c:	d115      	bne.n	800b05a <__ieee754_sqrt+0x7e>
 800b02e:	2100      	movs	r1, #0
 800b030:	e009      	b.n	800b046 <__ieee754_sqrt+0x6a>
 800b032:	0ae3      	lsrs	r3, r4, #11
 800b034:	3a15      	subs	r2, #21
 800b036:	0564      	lsls	r4, r4, #21
 800b038:	2b00      	cmp	r3, #0
 800b03a:	d0fa      	beq.n	800b032 <__ieee754_sqrt+0x56>
 800b03c:	e7f7      	b.n	800b02e <__ieee754_sqrt+0x52>
 800b03e:	460a      	mov	r2, r1
 800b040:	e7fa      	b.n	800b038 <__ieee754_sqrt+0x5c>
 800b042:	005b      	lsls	r3, r3, #1
 800b044:	3101      	adds	r1, #1
 800b046:	02d8      	lsls	r0, r3, #11
 800b048:	d5fb      	bpl.n	800b042 <__ieee754_sqrt+0x66>
 800b04a:	1e48      	subs	r0, r1, #1
 800b04c:	1a12      	subs	r2, r2, r0
 800b04e:	f1c1 0020 	rsb	r0, r1, #32
 800b052:	fa24 f000 	lsr.w	r0, r4, r0
 800b056:	4303      	orrs	r3, r0
 800b058:	408c      	lsls	r4, r1
 800b05a:	2600      	movs	r6, #0
 800b05c:	f2a2 37ff 	subw	r7, r2, #1023	@ 0x3ff
 800b060:	2116      	movs	r1, #22
 800b062:	07d2      	lsls	r2, r2, #31
 800b064:	f44f 1000 	mov.w	r0, #2097152	@ 0x200000
 800b068:	4632      	mov	r2, r6
 800b06a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b06e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800b072:	bf5c      	itt	pl
 800b074:	005b      	lslpl	r3, r3, #1
 800b076:	eb03 73d4 	addpl.w	r3, r3, r4, lsr #31
 800b07a:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800b07e:	bf58      	it	pl
 800b080:	0064      	lslpl	r4, r4, #1
 800b082:	eb03 73d4 	add.w	r3, r3, r4, lsr #31
 800b086:	107f      	asrs	r7, r7, #1
 800b088:	0064      	lsls	r4, r4, #1
 800b08a:	1815      	adds	r5, r2, r0
 800b08c:	429d      	cmp	r5, r3
 800b08e:	bfde      	ittt	le
 800b090:	182a      	addle	r2, r5, r0
 800b092:	1b5b      	suble	r3, r3, r5
 800b094:	1836      	addle	r6, r6, r0
 800b096:	0fe5      	lsrs	r5, r4, #31
 800b098:	3901      	subs	r1, #1
 800b09a:	eb05 0343 	add.w	r3, r5, r3, lsl #1
 800b09e:	ea4f 0444 	mov.w	r4, r4, lsl #1
 800b0a2:	ea4f 0050 	mov.w	r0, r0, lsr #1
 800b0a6:	d1f0      	bne.n	800b08a <__ieee754_sqrt+0xae>
 800b0a8:	460d      	mov	r5, r1
 800b0aa:	f04f 0a20 	mov.w	sl, #32
 800b0ae:	f04f 4000 	mov.w	r0, #2147483648	@ 0x80000000
 800b0b2:	429a      	cmp	r2, r3
 800b0b4:	eb01 0c00 	add.w	ip, r1, r0
 800b0b8:	db02      	blt.n	800b0c0 <__ieee754_sqrt+0xe4>
 800b0ba:	d113      	bne.n	800b0e4 <__ieee754_sqrt+0x108>
 800b0bc:	45a4      	cmp	ip, r4
 800b0be:	d811      	bhi.n	800b0e4 <__ieee754_sqrt+0x108>
 800b0c0:	f1bc 0f00 	cmp.w	ip, #0
 800b0c4:	eb0c 0100 	add.w	r1, ip, r0
 800b0c8:	da42      	bge.n	800b150 <__ieee754_sqrt+0x174>
 800b0ca:	2900      	cmp	r1, #0
 800b0cc:	db40      	blt.n	800b150 <__ieee754_sqrt+0x174>
 800b0ce:	f102 0e01 	add.w	lr, r2, #1
 800b0d2:	1a9b      	subs	r3, r3, r2
 800b0d4:	4672      	mov	r2, lr
 800b0d6:	45a4      	cmp	ip, r4
 800b0d8:	bf88      	it	hi
 800b0da:	f103 33ff 	addhi.w	r3, r3, #4294967295	@ 0xffffffff
 800b0de:	eba4 040c 	sub.w	r4, r4, ip
 800b0e2:	4405      	add	r5, r0
 800b0e4:	ea4f 7cd4 	mov.w	ip, r4, lsr #31
 800b0e8:	f1ba 0a01 	subs.w	sl, sl, #1
 800b0ec:	eb0c 0343 	add.w	r3, ip, r3, lsl #1
 800b0f0:	ea4f 0444 	mov.w	r4, r4, lsl #1
 800b0f4:	ea4f 0050 	mov.w	r0, r0, lsr #1
 800b0f8:	d1db      	bne.n	800b0b2 <__ieee754_sqrt+0xd6>
 800b0fa:	431c      	orrs	r4, r3
 800b0fc:	d01a      	beq.n	800b134 <__ieee754_sqrt+0x158>
 800b0fe:	4c20      	ldr	r4, [pc, #128]	@ (800b180 <__ieee754_sqrt+0x1a4>)
 800b100:	f8df b080 	ldr.w	fp, [pc, #128]	@ 800b184 <__ieee754_sqrt+0x1a8>
 800b104:	e9d4 0100 	ldrd	r0, r1, [r4]
 800b108:	e9db 2300 	ldrd	r2, r3, [fp]
 800b10c:	f7f5 f8e0 	bl	80002d0 <__aeabi_dsub>
 800b110:	e9d4 8900 	ldrd	r8, r9, [r4]
 800b114:	4602      	mov	r2, r0
 800b116:	460b      	mov	r3, r1
 800b118:	4640      	mov	r0, r8
 800b11a:	4649      	mov	r1, r9
 800b11c:	f7f5 fd0c 	bl	8000b38 <__aeabi_dcmple>
 800b120:	b140      	cbz	r0, 800b134 <__ieee754_sqrt+0x158>
 800b122:	e9d4 0100 	ldrd	r0, r1, [r4]
 800b126:	e9db 2300 	ldrd	r2, r3, [fp]
 800b12a:	f1b5 3fff 	cmp.w	r5, #4294967295	@ 0xffffffff
 800b12e:	d111      	bne.n	800b154 <__ieee754_sqrt+0x178>
 800b130:	4655      	mov	r5, sl
 800b132:	3601      	adds	r6, #1
 800b134:	1072      	asrs	r2, r6, #1
 800b136:	086b      	lsrs	r3, r5, #1
 800b138:	07f1      	lsls	r1, r6, #31
 800b13a:	f102 527f 	add.w	r2, r2, #1069547520	@ 0x3fc00000
 800b13e:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
 800b142:	bf48      	it	mi
 800b144:	f043 4300 	orrmi.w	r3, r3, #2147483648	@ 0x80000000
 800b148:	4618      	mov	r0, r3
 800b14a:	eb02 5107 	add.w	r1, r2, r7, lsl #20
 800b14e:	e757      	b.n	800b000 <__ieee754_sqrt+0x24>
 800b150:	4696      	mov	lr, r2
 800b152:	e7be      	b.n	800b0d2 <__ieee754_sqrt+0xf6>
 800b154:	f7f5 f8be 	bl	80002d4 <__adddf3>
 800b158:	e9d4 8900 	ldrd	r8, r9, [r4]
 800b15c:	4602      	mov	r2, r0
 800b15e:	460b      	mov	r3, r1
 800b160:	4640      	mov	r0, r8
 800b162:	4649      	mov	r1, r9
 800b164:	f7f5 fcde 	bl	8000b24 <__aeabi_dcmplt>
 800b168:	b120      	cbz	r0, 800b174 <__ieee754_sqrt+0x198>
 800b16a:	1ca8      	adds	r0, r5, #2
 800b16c:	bf08      	it	eq
 800b16e:	3601      	addeq	r6, #1
 800b170:	3502      	adds	r5, #2
 800b172:	e7df      	b.n	800b134 <__ieee754_sqrt+0x158>
 800b174:	1c6b      	adds	r3, r5, #1
 800b176:	f023 0501 	bic.w	r5, r3, #1
 800b17a:	e7db      	b.n	800b134 <__ieee754_sqrt+0x158>
 800b17c:	7ff00000 	.word	0x7ff00000
 800b180:	20000188 	.word	0x20000188
 800b184:	20000180 	.word	0x20000180

0800b188 <atof>:
 800b188:	2100      	movs	r1, #0
 800b18a:	f000 bdf9 	b.w	800bd80 <strtod>

0800b18e <sulp>:
 800b18e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b192:	460f      	mov	r7, r1
 800b194:	4690      	mov	r8, r2
 800b196:	f003 fa47 	bl	800e628 <__ulp>
 800b19a:	4604      	mov	r4, r0
 800b19c:	460d      	mov	r5, r1
 800b19e:	f1b8 0f00 	cmp.w	r8, #0
 800b1a2:	d011      	beq.n	800b1c8 <sulp+0x3a>
 800b1a4:	f3c7 530a 	ubfx	r3, r7, #20, #11
 800b1a8:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800b1ac:	2b00      	cmp	r3, #0
 800b1ae:	dd0b      	ble.n	800b1c8 <sulp+0x3a>
 800b1b0:	2400      	movs	r4, #0
 800b1b2:	051b      	lsls	r3, r3, #20
 800b1b4:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 800b1b8:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 800b1bc:	4622      	mov	r2, r4
 800b1be:	462b      	mov	r3, r5
 800b1c0:	f7f5 fa3e 	bl	8000640 <__aeabi_dmul>
 800b1c4:	4604      	mov	r4, r0
 800b1c6:	460d      	mov	r5, r1
 800b1c8:	4620      	mov	r0, r4
 800b1ca:	4629      	mov	r1, r5
 800b1cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800b1d0 <_strtod_l>:
 800b1d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b1d4:	b09f      	sub	sp, #124	@ 0x7c
 800b1d6:	9217      	str	r2, [sp, #92]	@ 0x5c
 800b1d8:	2200      	movs	r2, #0
 800b1da:	460c      	mov	r4, r1
 800b1dc:	921a      	str	r2, [sp, #104]	@ 0x68
 800b1de:	f04f 0a00 	mov.w	sl, #0
 800b1e2:	f04f 0b00 	mov.w	fp, #0
 800b1e6:	460a      	mov	r2, r1
 800b1e8:	9005      	str	r0, [sp, #20]
 800b1ea:	9219      	str	r2, [sp, #100]	@ 0x64
 800b1ec:	7811      	ldrb	r1, [r2, #0]
 800b1ee:	292b      	cmp	r1, #43	@ 0x2b
 800b1f0:	d048      	beq.n	800b284 <_strtod_l+0xb4>
 800b1f2:	d836      	bhi.n	800b262 <_strtod_l+0x92>
 800b1f4:	290d      	cmp	r1, #13
 800b1f6:	d830      	bhi.n	800b25a <_strtod_l+0x8a>
 800b1f8:	2908      	cmp	r1, #8
 800b1fa:	d830      	bhi.n	800b25e <_strtod_l+0x8e>
 800b1fc:	2900      	cmp	r1, #0
 800b1fe:	d039      	beq.n	800b274 <_strtod_l+0xa4>
 800b200:	2200      	movs	r2, #0
 800b202:	920b      	str	r2, [sp, #44]	@ 0x2c
 800b204:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 800b206:	782a      	ldrb	r2, [r5, #0]
 800b208:	2a30      	cmp	r2, #48	@ 0x30
 800b20a:	f040 80b1 	bne.w	800b370 <_strtod_l+0x1a0>
 800b20e:	786a      	ldrb	r2, [r5, #1]
 800b210:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800b214:	2a58      	cmp	r2, #88	@ 0x58
 800b216:	d16c      	bne.n	800b2f2 <_strtod_l+0x122>
 800b218:	9302      	str	r3, [sp, #8]
 800b21a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b21c:	4a8e      	ldr	r2, [pc, #568]	@ (800b458 <_strtod_l+0x288>)
 800b21e:	9301      	str	r3, [sp, #4]
 800b220:	ab1a      	add	r3, sp, #104	@ 0x68
 800b222:	9300      	str	r3, [sp, #0]
 800b224:	9805      	ldr	r0, [sp, #20]
 800b226:	ab1b      	add	r3, sp, #108	@ 0x6c
 800b228:	a919      	add	r1, sp, #100	@ 0x64
 800b22a:	f002 faf1 	bl	800d810 <__gethex>
 800b22e:	f010 060f 	ands.w	r6, r0, #15
 800b232:	4604      	mov	r4, r0
 800b234:	d005      	beq.n	800b242 <_strtod_l+0x72>
 800b236:	2e06      	cmp	r6, #6
 800b238:	d126      	bne.n	800b288 <_strtod_l+0xb8>
 800b23a:	2300      	movs	r3, #0
 800b23c:	3501      	adds	r5, #1
 800b23e:	9519      	str	r5, [sp, #100]	@ 0x64
 800b240:	930b      	str	r3, [sp, #44]	@ 0x2c
 800b242:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800b244:	2b00      	cmp	r3, #0
 800b246:	f040 8584 	bne.w	800bd52 <_strtod_l+0xb82>
 800b24a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b24c:	b1bb      	cbz	r3, 800b27e <_strtod_l+0xae>
 800b24e:	4650      	mov	r0, sl
 800b250:	f10b 4100 	add.w	r1, fp, #2147483648	@ 0x80000000
 800b254:	b01f      	add	sp, #124	@ 0x7c
 800b256:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b25a:	2920      	cmp	r1, #32
 800b25c:	d1d0      	bne.n	800b200 <_strtod_l+0x30>
 800b25e:	3201      	adds	r2, #1
 800b260:	e7c3      	b.n	800b1ea <_strtod_l+0x1a>
 800b262:	292d      	cmp	r1, #45	@ 0x2d
 800b264:	d1cc      	bne.n	800b200 <_strtod_l+0x30>
 800b266:	2101      	movs	r1, #1
 800b268:	910b      	str	r1, [sp, #44]	@ 0x2c
 800b26a:	1c51      	adds	r1, r2, #1
 800b26c:	9119      	str	r1, [sp, #100]	@ 0x64
 800b26e:	7852      	ldrb	r2, [r2, #1]
 800b270:	2a00      	cmp	r2, #0
 800b272:	d1c7      	bne.n	800b204 <_strtod_l+0x34>
 800b274:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800b276:	9419      	str	r4, [sp, #100]	@ 0x64
 800b278:	2b00      	cmp	r3, #0
 800b27a:	f040 8568 	bne.w	800bd4e <_strtod_l+0xb7e>
 800b27e:	4650      	mov	r0, sl
 800b280:	4659      	mov	r1, fp
 800b282:	e7e7      	b.n	800b254 <_strtod_l+0x84>
 800b284:	2100      	movs	r1, #0
 800b286:	e7ef      	b.n	800b268 <_strtod_l+0x98>
 800b288:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800b28a:	b13a      	cbz	r2, 800b29c <_strtod_l+0xcc>
 800b28c:	2135      	movs	r1, #53	@ 0x35
 800b28e:	a81c      	add	r0, sp, #112	@ 0x70
 800b290:	f003 faba 	bl	800e808 <__copybits>
 800b294:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800b296:	9805      	ldr	r0, [sp, #20]
 800b298:	f002 fe94 	bl	800dfc4 <_Bfree>
 800b29c:	3e01      	subs	r6, #1
 800b29e:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 800b2a0:	2e04      	cmp	r6, #4
 800b2a2:	d806      	bhi.n	800b2b2 <_strtod_l+0xe2>
 800b2a4:	e8df f006 	tbb	[pc, r6]
 800b2a8:	201d0314 	.word	0x201d0314
 800b2ac:	14          	.byte	0x14
 800b2ad:	00          	.byte	0x00
 800b2ae:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 800b2b2:	05e1      	lsls	r1, r4, #23
 800b2b4:	bf48      	it	mi
 800b2b6:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 800b2ba:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800b2be:	0d1b      	lsrs	r3, r3, #20
 800b2c0:	051b      	lsls	r3, r3, #20
 800b2c2:	2b00      	cmp	r3, #0
 800b2c4:	d1bd      	bne.n	800b242 <_strtod_l+0x72>
 800b2c6:	f001 fb51 	bl	800c96c <__errno>
 800b2ca:	2322      	movs	r3, #34	@ 0x22
 800b2cc:	6003      	str	r3, [r0, #0]
 800b2ce:	e7b8      	b.n	800b242 <_strtod_l+0x72>
 800b2d0:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800b2d4:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 800b2d8:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800b2dc:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800b2e0:	e7e7      	b.n	800b2b2 <_strtod_l+0xe2>
 800b2e2:	f8df b178 	ldr.w	fp, [pc, #376]	@ 800b45c <_strtod_l+0x28c>
 800b2e6:	e7e4      	b.n	800b2b2 <_strtod_l+0xe2>
 800b2e8:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 800b2ec:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 800b2f0:	e7df      	b.n	800b2b2 <_strtod_l+0xe2>
 800b2f2:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800b2f4:	1c5a      	adds	r2, r3, #1
 800b2f6:	9219      	str	r2, [sp, #100]	@ 0x64
 800b2f8:	785b      	ldrb	r3, [r3, #1]
 800b2fa:	2b30      	cmp	r3, #48	@ 0x30
 800b2fc:	d0f9      	beq.n	800b2f2 <_strtod_l+0x122>
 800b2fe:	2b00      	cmp	r3, #0
 800b300:	d09f      	beq.n	800b242 <_strtod_l+0x72>
 800b302:	2301      	movs	r3, #1
 800b304:	9309      	str	r3, [sp, #36]	@ 0x24
 800b306:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800b308:	220a      	movs	r2, #10
 800b30a:	930c      	str	r3, [sp, #48]	@ 0x30
 800b30c:	2300      	movs	r3, #0
 800b30e:	461f      	mov	r7, r3
 800b310:	9308      	str	r3, [sp, #32]
 800b312:	930a      	str	r3, [sp, #40]	@ 0x28
 800b314:	9819      	ldr	r0, [sp, #100]	@ 0x64
 800b316:	7805      	ldrb	r5, [r0, #0]
 800b318:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 800b31c:	b2d9      	uxtb	r1, r3
 800b31e:	2909      	cmp	r1, #9
 800b320:	d928      	bls.n	800b374 <_strtod_l+0x1a4>
 800b322:	2201      	movs	r2, #1
 800b324:	494e      	ldr	r1, [pc, #312]	@ (800b460 <_strtod_l+0x290>)
 800b326:	f001 fac4 	bl	800c8b2 <strncmp>
 800b32a:	2800      	cmp	r0, #0
 800b32c:	d032      	beq.n	800b394 <_strtod_l+0x1c4>
 800b32e:	2000      	movs	r0, #0
 800b330:	462a      	mov	r2, r5
 800b332:	4681      	mov	r9, r0
 800b334:	463d      	mov	r5, r7
 800b336:	4603      	mov	r3, r0
 800b338:	2a65      	cmp	r2, #101	@ 0x65
 800b33a:	d001      	beq.n	800b340 <_strtod_l+0x170>
 800b33c:	2a45      	cmp	r2, #69	@ 0x45
 800b33e:	d114      	bne.n	800b36a <_strtod_l+0x19a>
 800b340:	b91d      	cbnz	r5, 800b34a <_strtod_l+0x17a>
 800b342:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b344:	4302      	orrs	r2, r0
 800b346:	d095      	beq.n	800b274 <_strtod_l+0xa4>
 800b348:	2500      	movs	r5, #0
 800b34a:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 800b34c:	1c62      	adds	r2, r4, #1
 800b34e:	9219      	str	r2, [sp, #100]	@ 0x64
 800b350:	7862      	ldrb	r2, [r4, #1]
 800b352:	2a2b      	cmp	r2, #43	@ 0x2b
 800b354:	d077      	beq.n	800b446 <_strtod_l+0x276>
 800b356:	2a2d      	cmp	r2, #45	@ 0x2d
 800b358:	d07b      	beq.n	800b452 <_strtod_l+0x282>
 800b35a:	f04f 0c00 	mov.w	ip, #0
 800b35e:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 800b362:	2909      	cmp	r1, #9
 800b364:	f240 8082 	bls.w	800b46c <_strtod_l+0x29c>
 800b368:	9419      	str	r4, [sp, #100]	@ 0x64
 800b36a:	f04f 0800 	mov.w	r8, #0
 800b36e:	e0a2      	b.n	800b4b6 <_strtod_l+0x2e6>
 800b370:	2300      	movs	r3, #0
 800b372:	e7c7      	b.n	800b304 <_strtod_l+0x134>
 800b374:	2f08      	cmp	r7, #8
 800b376:	bfd5      	itete	le
 800b378:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 800b37a:	9908      	ldrgt	r1, [sp, #32]
 800b37c:	fb02 3301 	mlale	r3, r2, r1, r3
 800b380:	fb02 3301 	mlagt	r3, r2, r1, r3
 800b384:	f100 0001 	add.w	r0, r0, #1
 800b388:	bfd4      	ite	le
 800b38a:	930a      	strle	r3, [sp, #40]	@ 0x28
 800b38c:	9308      	strgt	r3, [sp, #32]
 800b38e:	3701      	adds	r7, #1
 800b390:	9019      	str	r0, [sp, #100]	@ 0x64
 800b392:	e7bf      	b.n	800b314 <_strtod_l+0x144>
 800b394:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800b396:	1c5a      	adds	r2, r3, #1
 800b398:	9219      	str	r2, [sp, #100]	@ 0x64
 800b39a:	785a      	ldrb	r2, [r3, #1]
 800b39c:	b37f      	cbz	r7, 800b3fe <_strtod_l+0x22e>
 800b39e:	4681      	mov	r9, r0
 800b3a0:	463d      	mov	r5, r7
 800b3a2:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 800b3a6:	2b09      	cmp	r3, #9
 800b3a8:	d912      	bls.n	800b3d0 <_strtod_l+0x200>
 800b3aa:	2301      	movs	r3, #1
 800b3ac:	e7c4      	b.n	800b338 <_strtod_l+0x168>
 800b3ae:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800b3b0:	3001      	adds	r0, #1
 800b3b2:	1c5a      	adds	r2, r3, #1
 800b3b4:	9219      	str	r2, [sp, #100]	@ 0x64
 800b3b6:	785a      	ldrb	r2, [r3, #1]
 800b3b8:	2a30      	cmp	r2, #48	@ 0x30
 800b3ba:	d0f8      	beq.n	800b3ae <_strtod_l+0x1de>
 800b3bc:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 800b3c0:	2b08      	cmp	r3, #8
 800b3c2:	f200 84cb 	bhi.w	800bd5c <_strtod_l+0xb8c>
 800b3c6:	4681      	mov	r9, r0
 800b3c8:	2000      	movs	r0, #0
 800b3ca:	4605      	mov	r5, r0
 800b3cc:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800b3ce:	930c      	str	r3, [sp, #48]	@ 0x30
 800b3d0:	3a30      	subs	r2, #48	@ 0x30
 800b3d2:	f100 0301 	add.w	r3, r0, #1
 800b3d6:	d02a      	beq.n	800b42e <_strtod_l+0x25e>
 800b3d8:	4499      	add	r9, r3
 800b3da:	210a      	movs	r1, #10
 800b3dc:	462b      	mov	r3, r5
 800b3de:	eb00 0c05 	add.w	ip, r0, r5
 800b3e2:	4563      	cmp	r3, ip
 800b3e4:	d10d      	bne.n	800b402 <_strtod_l+0x232>
 800b3e6:	1c69      	adds	r1, r5, #1
 800b3e8:	4401      	add	r1, r0
 800b3ea:	4428      	add	r0, r5
 800b3ec:	2808      	cmp	r0, #8
 800b3ee:	dc16      	bgt.n	800b41e <_strtod_l+0x24e>
 800b3f0:	230a      	movs	r3, #10
 800b3f2:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800b3f4:	fb03 2300 	mla	r3, r3, r0, r2
 800b3f8:	930a      	str	r3, [sp, #40]	@ 0x28
 800b3fa:	2300      	movs	r3, #0
 800b3fc:	e018      	b.n	800b430 <_strtod_l+0x260>
 800b3fe:	4638      	mov	r0, r7
 800b400:	e7da      	b.n	800b3b8 <_strtod_l+0x1e8>
 800b402:	2b08      	cmp	r3, #8
 800b404:	f103 0301 	add.w	r3, r3, #1
 800b408:	dc03      	bgt.n	800b412 <_strtod_l+0x242>
 800b40a:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 800b40c:	434e      	muls	r6, r1
 800b40e:	960a      	str	r6, [sp, #40]	@ 0x28
 800b410:	e7e7      	b.n	800b3e2 <_strtod_l+0x212>
 800b412:	2b10      	cmp	r3, #16
 800b414:	bfde      	ittt	le
 800b416:	9e08      	ldrle	r6, [sp, #32]
 800b418:	434e      	mulle	r6, r1
 800b41a:	9608      	strle	r6, [sp, #32]
 800b41c:	e7e1      	b.n	800b3e2 <_strtod_l+0x212>
 800b41e:	280f      	cmp	r0, #15
 800b420:	dceb      	bgt.n	800b3fa <_strtod_l+0x22a>
 800b422:	230a      	movs	r3, #10
 800b424:	9808      	ldr	r0, [sp, #32]
 800b426:	fb03 2300 	mla	r3, r3, r0, r2
 800b42a:	9308      	str	r3, [sp, #32]
 800b42c:	e7e5      	b.n	800b3fa <_strtod_l+0x22a>
 800b42e:	4629      	mov	r1, r5
 800b430:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800b432:	460d      	mov	r5, r1
 800b434:	1c50      	adds	r0, r2, #1
 800b436:	9019      	str	r0, [sp, #100]	@ 0x64
 800b438:	7852      	ldrb	r2, [r2, #1]
 800b43a:	4618      	mov	r0, r3
 800b43c:	e7b1      	b.n	800b3a2 <_strtod_l+0x1d2>
 800b43e:	f04f 0900 	mov.w	r9, #0
 800b442:	2301      	movs	r3, #1
 800b444:	e77d      	b.n	800b342 <_strtod_l+0x172>
 800b446:	f04f 0c00 	mov.w	ip, #0
 800b44a:	1ca2      	adds	r2, r4, #2
 800b44c:	9219      	str	r2, [sp, #100]	@ 0x64
 800b44e:	78a2      	ldrb	r2, [r4, #2]
 800b450:	e785      	b.n	800b35e <_strtod_l+0x18e>
 800b452:	f04f 0c01 	mov.w	ip, #1
 800b456:	e7f8      	b.n	800b44a <_strtod_l+0x27a>
 800b458:	0800f628 	.word	0x0800f628
 800b45c:	7ff00000 	.word	0x7ff00000
 800b460:	0800f610 	.word	0x0800f610
 800b464:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800b466:	1c51      	adds	r1, r2, #1
 800b468:	9119      	str	r1, [sp, #100]	@ 0x64
 800b46a:	7852      	ldrb	r2, [r2, #1]
 800b46c:	2a30      	cmp	r2, #48	@ 0x30
 800b46e:	d0f9      	beq.n	800b464 <_strtod_l+0x294>
 800b470:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 800b474:	2908      	cmp	r1, #8
 800b476:	f63f af78 	bhi.w	800b36a <_strtod_l+0x19a>
 800b47a:	f04f 080a 	mov.w	r8, #10
 800b47e:	3a30      	subs	r2, #48	@ 0x30
 800b480:	920e      	str	r2, [sp, #56]	@ 0x38
 800b482:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800b484:	920f      	str	r2, [sp, #60]	@ 0x3c
 800b486:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800b488:	1c56      	adds	r6, r2, #1
 800b48a:	9619      	str	r6, [sp, #100]	@ 0x64
 800b48c:	7852      	ldrb	r2, [r2, #1]
 800b48e:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 800b492:	f1be 0f09 	cmp.w	lr, #9
 800b496:	d939      	bls.n	800b50c <_strtod_l+0x33c>
 800b498:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800b49a:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 800b49e:	1a76      	subs	r6, r6, r1
 800b4a0:	2e08      	cmp	r6, #8
 800b4a2:	dc03      	bgt.n	800b4ac <_strtod_l+0x2dc>
 800b4a4:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800b4a6:	4588      	cmp	r8, r1
 800b4a8:	bfa8      	it	ge
 800b4aa:	4688      	movge	r8, r1
 800b4ac:	f1bc 0f00 	cmp.w	ip, #0
 800b4b0:	d001      	beq.n	800b4b6 <_strtod_l+0x2e6>
 800b4b2:	f1c8 0800 	rsb	r8, r8, #0
 800b4b6:	2d00      	cmp	r5, #0
 800b4b8:	d14e      	bne.n	800b558 <_strtod_l+0x388>
 800b4ba:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800b4bc:	4308      	orrs	r0, r1
 800b4be:	f47f aec0 	bne.w	800b242 <_strtod_l+0x72>
 800b4c2:	2b00      	cmp	r3, #0
 800b4c4:	f47f aed6 	bne.w	800b274 <_strtod_l+0xa4>
 800b4c8:	2a69      	cmp	r2, #105	@ 0x69
 800b4ca:	d028      	beq.n	800b51e <_strtod_l+0x34e>
 800b4cc:	dc25      	bgt.n	800b51a <_strtod_l+0x34a>
 800b4ce:	2a49      	cmp	r2, #73	@ 0x49
 800b4d0:	d025      	beq.n	800b51e <_strtod_l+0x34e>
 800b4d2:	2a4e      	cmp	r2, #78	@ 0x4e
 800b4d4:	f47f aece 	bne.w	800b274 <_strtod_l+0xa4>
 800b4d8:	499a      	ldr	r1, [pc, #616]	@ (800b744 <_strtod_l+0x574>)
 800b4da:	a819      	add	r0, sp, #100	@ 0x64
 800b4dc:	f002 fbba 	bl	800dc54 <__match>
 800b4e0:	2800      	cmp	r0, #0
 800b4e2:	f43f aec7 	beq.w	800b274 <_strtod_l+0xa4>
 800b4e6:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800b4e8:	781b      	ldrb	r3, [r3, #0]
 800b4ea:	2b28      	cmp	r3, #40	@ 0x28
 800b4ec:	d12e      	bne.n	800b54c <_strtod_l+0x37c>
 800b4ee:	4996      	ldr	r1, [pc, #600]	@ (800b748 <_strtod_l+0x578>)
 800b4f0:	aa1c      	add	r2, sp, #112	@ 0x70
 800b4f2:	a819      	add	r0, sp, #100	@ 0x64
 800b4f4:	f002 fbc2 	bl	800dc7c <__hexnan>
 800b4f8:	2805      	cmp	r0, #5
 800b4fa:	d127      	bne.n	800b54c <_strtod_l+0x37c>
 800b4fc:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800b4fe:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 800b502:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 800b506:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 800b50a:	e69a      	b.n	800b242 <_strtod_l+0x72>
 800b50c:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800b50e:	fb08 2101 	mla	r1, r8, r1, r2
 800b512:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 800b516:	920e      	str	r2, [sp, #56]	@ 0x38
 800b518:	e7b5      	b.n	800b486 <_strtod_l+0x2b6>
 800b51a:	2a6e      	cmp	r2, #110	@ 0x6e
 800b51c:	e7da      	b.n	800b4d4 <_strtod_l+0x304>
 800b51e:	498b      	ldr	r1, [pc, #556]	@ (800b74c <_strtod_l+0x57c>)
 800b520:	a819      	add	r0, sp, #100	@ 0x64
 800b522:	f002 fb97 	bl	800dc54 <__match>
 800b526:	2800      	cmp	r0, #0
 800b528:	f43f aea4 	beq.w	800b274 <_strtod_l+0xa4>
 800b52c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800b52e:	4988      	ldr	r1, [pc, #544]	@ (800b750 <_strtod_l+0x580>)
 800b530:	3b01      	subs	r3, #1
 800b532:	a819      	add	r0, sp, #100	@ 0x64
 800b534:	9319      	str	r3, [sp, #100]	@ 0x64
 800b536:	f002 fb8d 	bl	800dc54 <__match>
 800b53a:	b910      	cbnz	r0, 800b542 <_strtod_l+0x372>
 800b53c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800b53e:	3301      	adds	r3, #1
 800b540:	9319      	str	r3, [sp, #100]	@ 0x64
 800b542:	f04f 0a00 	mov.w	sl, #0
 800b546:	f8df b20c 	ldr.w	fp, [pc, #524]	@ 800b754 <_strtod_l+0x584>
 800b54a:	e67a      	b.n	800b242 <_strtod_l+0x72>
 800b54c:	4882      	ldr	r0, [pc, #520]	@ (800b758 <_strtod_l+0x588>)
 800b54e:	f001 fa57 	bl	800ca00 <nan>
 800b552:	4682      	mov	sl, r0
 800b554:	468b      	mov	fp, r1
 800b556:	e674      	b.n	800b242 <_strtod_l+0x72>
 800b558:	eba8 0309 	sub.w	r3, r8, r9
 800b55c:	2f00      	cmp	r7, #0
 800b55e:	bf08      	it	eq
 800b560:	462f      	moveq	r7, r5
 800b562:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800b564:	2d10      	cmp	r5, #16
 800b566:	462c      	mov	r4, r5
 800b568:	9309      	str	r3, [sp, #36]	@ 0x24
 800b56a:	bfa8      	it	ge
 800b56c:	2410      	movge	r4, #16
 800b56e:	f7f4 ffed 	bl	800054c <__aeabi_ui2d>
 800b572:	2d09      	cmp	r5, #9
 800b574:	4682      	mov	sl, r0
 800b576:	468b      	mov	fp, r1
 800b578:	dc11      	bgt.n	800b59e <_strtod_l+0x3ce>
 800b57a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b57c:	2b00      	cmp	r3, #0
 800b57e:	f43f ae60 	beq.w	800b242 <_strtod_l+0x72>
 800b582:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b584:	dd76      	ble.n	800b674 <_strtod_l+0x4a4>
 800b586:	2b16      	cmp	r3, #22
 800b588:	dc5d      	bgt.n	800b646 <_strtod_l+0x476>
 800b58a:	4974      	ldr	r1, [pc, #464]	@ (800b75c <_strtod_l+0x58c>)
 800b58c:	4652      	mov	r2, sl
 800b58e:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800b592:	465b      	mov	r3, fp
 800b594:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b598:	f7f5 f852 	bl	8000640 <__aeabi_dmul>
 800b59c:	e7d9      	b.n	800b552 <_strtod_l+0x382>
 800b59e:	4b6f      	ldr	r3, [pc, #444]	@ (800b75c <_strtod_l+0x58c>)
 800b5a0:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800b5a4:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 800b5a8:	f7f5 f84a 	bl	8000640 <__aeabi_dmul>
 800b5ac:	4682      	mov	sl, r0
 800b5ae:	9808      	ldr	r0, [sp, #32]
 800b5b0:	468b      	mov	fp, r1
 800b5b2:	f7f4 ffcb 	bl	800054c <__aeabi_ui2d>
 800b5b6:	4602      	mov	r2, r0
 800b5b8:	460b      	mov	r3, r1
 800b5ba:	4650      	mov	r0, sl
 800b5bc:	4659      	mov	r1, fp
 800b5be:	f7f4 fe89 	bl	80002d4 <__adddf3>
 800b5c2:	2d0f      	cmp	r5, #15
 800b5c4:	4682      	mov	sl, r0
 800b5c6:	468b      	mov	fp, r1
 800b5c8:	ddd7      	ble.n	800b57a <_strtod_l+0x3aa>
 800b5ca:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b5cc:	1b2c      	subs	r4, r5, r4
 800b5ce:	441c      	add	r4, r3
 800b5d0:	2c00      	cmp	r4, #0
 800b5d2:	f340 8096 	ble.w	800b702 <_strtod_l+0x532>
 800b5d6:	f014 030f 	ands.w	r3, r4, #15
 800b5da:	d00a      	beq.n	800b5f2 <_strtod_l+0x422>
 800b5dc:	495f      	ldr	r1, [pc, #380]	@ (800b75c <_strtod_l+0x58c>)
 800b5de:	4652      	mov	r2, sl
 800b5e0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800b5e4:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b5e8:	465b      	mov	r3, fp
 800b5ea:	f7f5 f829 	bl	8000640 <__aeabi_dmul>
 800b5ee:	4682      	mov	sl, r0
 800b5f0:	468b      	mov	fp, r1
 800b5f2:	f034 040f 	bics.w	r4, r4, #15
 800b5f6:	d073      	beq.n	800b6e0 <_strtod_l+0x510>
 800b5f8:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 800b5fc:	dd48      	ble.n	800b690 <_strtod_l+0x4c0>
 800b5fe:	2400      	movs	r4, #0
 800b600:	46a0      	mov	r8, r4
 800b602:	46a1      	mov	r9, r4
 800b604:	940a      	str	r4, [sp, #40]	@ 0x28
 800b606:	2322      	movs	r3, #34	@ 0x22
 800b608:	f04f 0a00 	mov.w	sl, #0
 800b60c:	9a05      	ldr	r2, [sp, #20]
 800b60e:	f8df b144 	ldr.w	fp, [pc, #324]	@ 800b754 <_strtod_l+0x584>
 800b612:	6013      	str	r3, [r2, #0]
 800b614:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b616:	2b00      	cmp	r3, #0
 800b618:	f43f ae13 	beq.w	800b242 <_strtod_l+0x72>
 800b61c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800b61e:	9805      	ldr	r0, [sp, #20]
 800b620:	f002 fcd0 	bl	800dfc4 <_Bfree>
 800b624:	4649      	mov	r1, r9
 800b626:	9805      	ldr	r0, [sp, #20]
 800b628:	f002 fccc 	bl	800dfc4 <_Bfree>
 800b62c:	4641      	mov	r1, r8
 800b62e:	9805      	ldr	r0, [sp, #20]
 800b630:	f002 fcc8 	bl	800dfc4 <_Bfree>
 800b634:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800b636:	9805      	ldr	r0, [sp, #20]
 800b638:	f002 fcc4 	bl	800dfc4 <_Bfree>
 800b63c:	4621      	mov	r1, r4
 800b63e:	9805      	ldr	r0, [sp, #20]
 800b640:	f002 fcc0 	bl	800dfc4 <_Bfree>
 800b644:	e5fd      	b.n	800b242 <_strtod_l+0x72>
 800b646:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b648:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 800b64c:	4293      	cmp	r3, r2
 800b64e:	dbbc      	blt.n	800b5ca <_strtod_l+0x3fa>
 800b650:	4c42      	ldr	r4, [pc, #264]	@ (800b75c <_strtod_l+0x58c>)
 800b652:	f1c5 050f 	rsb	r5, r5, #15
 800b656:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800b65a:	4652      	mov	r2, sl
 800b65c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b660:	465b      	mov	r3, fp
 800b662:	f7f4 ffed 	bl	8000640 <__aeabi_dmul>
 800b666:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b668:	1b5d      	subs	r5, r3, r5
 800b66a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800b66e:	e9d4 2300 	ldrd	r2, r3, [r4]
 800b672:	e791      	b.n	800b598 <_strtod_l+0x3c8>
 800b674:	3316      	adds	r3, #22
 800b676:	dba8      	blt.n	800b5ca <_strtod_l+0x3fa>
 800b678:	4b38      	ldr	r3, [pc, #224]	@ (800b75c <_strtod_l+0x58c>)
 800b67a:	eba9 0808 	sub.w	r8, r9, r8
 800b67e:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 800b682:	4650      	mov	r0, sl
 800b684:	e9d8 2300 	ldrd	r2, r3, [r8]
 800b688:	4659      	mov	r1, fp
 800b68a:	f7f5 f903 	bl	8000894 <__aeabi_ddiv>
 800b68e:	e760      	b.n	800b552 <_strtod_l+0x382>
 800b690:	4b33      	ldr	r3, [pc, #204]	@ (800b760 <_strtod_l+0x590>)
 800b692:	4650      	mov	r0, sl
 800b694:	9308      	str	r3, [sp, #32]
 800b696:	2300      	movs	r3, #0
 800b698:	4659      	mov	r1, fp
 800b69a:	461e      	mov	r6, r3
 800b69c:	1124      	asrs	r4, r4, #4
 800b69e:	2c01      	cmp	r4, #1
 800b6a0:	dc21      	bgt.n	800b6e6 <_strtod_l+0x516>
 800b6a2:	b10b      	cbz	r3, 800b6a8 <_strtod_l+0x4d8>
 800b6a4:	4682      	mov	sl, r0
 800b6a6:	468b      	mov	fp, r1
 800b6a8:	492d      	ldr	r1, [pc, #180]	@ (800b760 <_strtod_l+0x590>)
 800b6aa:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 800b6ae:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 800b6b2:	4652      	mov	r2, sl
 800b6b4:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b6b8:	465b      	mov	r3, fp
 800b6ba:	f7f4 ffc1 	bl	8000640 <__aeabi_dmul>
 800b6be:	4b25      	ldr	r3, [pc, #148]	@ (800b754 <_strtod_l+0x584>)
 800b6c0:	460a      	mov	r2, r1
 800b6c2:	400b      	ands	r3, r1
 800b6c4:	4927      	ldr	r1, [pc, #156]	@ (800b764 <_strtod_l+0x594>)
 800b6c6:	4682      	mov	sl, r0
 800b6c8:	428b      	cmp	r3, r1
 800b6ca:	d898      	bhi.n	800b5fe <_strtod_l+0x42e>
 800b6cc:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 800b6d0:	428b      	cmp	r3, r1
 800b6d2:	bf86      	itte	hi
 800b6d4:	f04f 3aff 	movhi.w	sl, #4294967295	@ 0xffffffff
 800b6d8:	f8df b08c 	ldrhi.w	fp, [pc, #140]	@ 800b768 <_strtod_l+0x598>
 800b6dc:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 800b6e0:	2300      	movs	r3, #0
 800b6e2:	9308      	str	r3, [sp, #32]
 800b6e4:	e07a      	b.n	800b7dc <_strtod_l+0x60c>
 800b6e6:	07e2      	lsls	r2, r4, #31
 800b6e8:	d505      	bpl.n	800b6f6 <_strtod_l+0x526>
 800b6ea:	9b08      	ldr	r3, [sp, #32]
 800b6ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b6f0:	f7f4 ffa6 	bl	8000640 <__aeabi_dmul>
 800b6f4:	2301      	movs	r3, #1
 800b6f6:	9a08      	ldr	r2, [sp, #32]
 800b6f8:	3601      	adds	r6, #1
 800b6fa:	3208      	adds	r2, #8
 800b6fc:	1064      	asrs	r4, r4, #1
 800b6fe:	9208      	str	r2, [sp, #32]
 800b700:	e7cd      	b.n	800b69e <_strtod_l+0x4ce>
 800b702:	d0ed      	beq.n	800b6e0 <_strtod_l+0x510>
 800b704:	4264      	negs	r4, r4
 800b706:	f014 020f 	ands.w	r2, r4, #15
 800b70a:	d00a      	beq.n	800b722 <_strtod_l+0x552>
 800b70c:	4b13      	ldr	r3, [pc, #76]	@ (800b75c <_strtod_l+0x58c>)
 800b70e:	4650      	mov	r0, sl
 800b710:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b714:	4659      	mov	r1, fp
 800b716:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b71a:	f7f5 f8bb 	bl	8000894 <__aeabi_ddiv>
 800b71e:	4682      	mov	sl, r0
 800b720:	468b      	mov	fp, r1
 800b722:	1124      	asrs	r4, r4, #4
 800b724:	d0dc      	beq.n	800b6e0 <_strtod_l+0x510>
 800b726:	2c1f      	cmp	r4, #31
 800b728:	dd20      	ble.n	800b76c <_strtod_l+0x59c>
 800b72a:	2400      	movs	r4, #0
 800b72c:	46a0      	mov	r8, r4
 800b72e:	46a1      	mov	r9, r4
 800b730:	940a      	str	r4, [sp, #40]	@ 0x28
 800b732:	2322      	movs	r3, #34	@ 0x22
 800b734:	9a05      	ldr	r2, [sp, #20]
 800b736:	f04f 0a00 	mov.w	sl, #0
 800b73a:	f04f 0b00 	mov.w	fp, #0
 800b73e:	6013      	str	r3, [r2, #0]
 800b740:	e768      	b.n	800b614 <_strtod_l+0x444>
 800b742:	bf00      	nop
 800b744:	0800f675 	.word	0x0800f675
 800b748:	0800f614 	.word	0x0800f614
 800b74c:	0800f66d 	.word	0x0800f66d
 800b750:	0800f6a7 	.word	0x0800f6a7
 800b754:	7ff00000 	.word	0x7ff00000
 800b758:	0800fa35 	.word	0x0800fa35
 800b75c:	0800f820 	.word	0x0800f820
 800b760:	0800f7f8 	.word	0x0800f7f8
 800b764:	7ca00000 	.word	0x7ca00000
 800b768:	7fefffff 	.word	0x7fefffff
 800b76c:	f014 0310 	ands.w	r3, r4, #16
 800b770:	bf18      	it	ne
 800b772:	236a      	movne	r3, #106	@ 0x6a
 800b774:	4650      	mov	r0, sl
 800b776:	9308      	str	r3, [sp, #32]
 800b778:	4659      	mov	r1, fp
 800b77a:	2300      	movs	r3, #0
 800b77c:	4ea9      	ldr	r6, [pc, #676]	@ (800ba24 <_strtod_l+0x854>)
 800b77e:	07e2      	lsls	r2, r4, #31
 800b780:	d504      	bpl.n	800b78c <_strtod_l+0x5bc>
 800b782:	e9d6 2300 	ldrd	r2, r3, [r6]
 800b786:	f7f4 ff5b 	bl	8000640 <__aeabi_dmul>
 800b78a:	2301      	movs	r3, #1
 800b78c:	1064      	asrs	r4, r4, #1
 800b78e:	f106 0608 	add.w	r6, r6, #8
 800b792:	d1f4      	bne.n	800b77e <_strtod_l+0x5ae>
 800b794:	b10b      	cbz	r3, 800b79a <_strtod_l+0x5ca>
 800b796:	4682      	mov	sl, r0
 800b798:	468b      	mov	fp, r1
 800b79a:	9b08      	ldr	r3, [sp, #32]
 800b79c:	b1b3      	cbz	r3, 800b7cc <_strtod_l+0x5fc>
 800b79e:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800b7a2:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 800b7a6:	2b00      	cmp	r3, #0
 800b7a8:	4659      	mov	r1, fp
 800b7aa:	dd0f      	ble.n	800b7cc <_strtod_l+0x5fc>
 800b7ac:	2b1f      	cmp	r3, #31
 800b7ae:	dd57      	ble.n	800b860 <_strtod_l+0x690>
 800b7b0:	2b34      	cmp	r3, #52	@ 0x34
 800b7b2:	bfd8      	it	le
 800b7b4:	f04f 33ff 	movle.w	r3, #4294967295	@ 0xffffffff
 800b7b8:	f04f 0a00 	mov.w	sl, #0
 800b7bc:	bfcf      	iteee	gt
 800b7be:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 800b7c2:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 800b7c6:	4093      	lslle	r3, r2
 800b7c8:	ea03 0b01 	andle.w	fp, r3, r1
 800b7cc:	2200      	movs	r2, #0
 800b7ce:	2300      	movs	r3, #0
 800b7d0:	4650      	mov	r0, sl
 800b7d2:	4659      	mov	r1, fp
 800b7d4:	f7f5 f99c 	bl	8000b10 <__aeabi_dcmpeq>
 800b7d8:	2800      	cmp	r0, #0
 800b7da:	d1a6      	bne.n	800b72a <_strtod_l+0x55a>
 800b7dc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b7de:	463a      	mov	r2, r7
 800b7e0:	9300      	str	r3, [sp, #0]
 800b7e2:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800b7e4:	462b      	mov	r3, r5
 800b7e6:	9805      	ldr	r0, [sp, #20]
 800b7e8:	f002 fc54 	bl	800e094 <__s2b>
 800b7ec:	900a      	str	r0, [sp, #40]	@ 0x28
 800b7ee:	2800      	cmp	r0, #0
 800b7f0:	f43f af05 	beq.w	800b5fe <_strtod_l+0x42e>
 800b7f4:	2400      	movs	r4, #0
 800b7f6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b7f8:	eba9 0308 	sub.w	r3, r9, r8
 800b7fc:	2a00      	cmp	r2, #0
 800b7fe:	bfa8      	it	ge
 800b800:	2300      	movge	r3, #0
 800b802:	46a0      	mov	r8, r4
 800b804:	9312      	str	r3, [sp, #72]	@ 0x48
 800b806:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800b80a:	9316      	str	r3, [sp, #88]	@ 0x58
 800b80c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b80e:	9805      	ldr	r0, [sp, #20]
 800b810:	6859      	ldr	r1, [r3, #4]
 800b812:	f002 fb97 	bl	800df44 <_Balloc>
 800b816:	4681      	mov	r9, r0
 800b818:	2800      	cmp	r0, #0
 800b81a:	f43f aef4 	beq.w	800b606 <_strtod_l+0x436>
 800b81e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b820:	300c      	adds	r0, #12
 800b822:	691a      	ldr	r2, [r3, #16]
 800b824:	f103 010c 	add.w	r1, r3, #12
 800b828:	3202      	adds	r2, #2
 800b82a:	0092      	lsls	r2, r2, #2
 800b82c:	f001 f8d9 	bl	800c9e2 <memcpy>
 800b830:	ab1c      	add	r3, sp, #112	@ 0x70
 800b832:	9301      	str	r3, [sp, #4]
 800b834:	ab1b      	add	r3, sp, #108	@ 0x6c
 800b836:	9300      	str	r3, [sp, #0]
 800b838:	4652      	mov	r2, sl
 800b83a:	465b      	mov	r3, fp
 800b83c:	9805      	ldr	r0, [sp, #20]
 800b83e:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 800b842:	f002 ff59 	bl	800e6f8 <__d2b>
 800b846:	901a      	str	r0, [sp, #104]	@ 0x68
 800b848:	2800      	cmp	r0, #0
 800b84a:	f43f aedc 	beq.w	800b606 <_strtod_l+0x436>
 800b84e:	2101      	movs	r1, #1
 800b850:	9805      	ldr	r0, [sp, #20]
 800b852:	f002 fcb5 	bl	800e1c0 <__i2b>
 800b856:	4680      	mov	r8, r0
 800b858:	b948      	cbnz	r0, 800b86e <_strtod_l+0x69e>
 800b85a:	f04f 0800 	mov.w	r8, #0
 800b85e:	e6d2      	b.n	800b606 <_strtod_l+0x436>
 800b860:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800b864:	fa02 f303 	lsl.w	r3, r2, r3
 800b868:	ea03 0a0a 	and.w	sl, r3, sl
 800b86c:	e7ae      	b.n	800b7cc <_strtod_l+0x5fc>
 800b86e:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 800b870:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 800b872:	2d00      	cmp	r5, #0
 800b874:	bfab      	itete	ge
 800b876:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 800b878:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 800b87a:	18ef      	addge	r7, r5, r3
 800b87c:	1b5e      	sublt	r6, r3, r5
 800b87e:	9b08      	ldr	r3, [sp, #32]
 800b880:	bfa8      	it	ge
 800b882:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 800b884:	eba5 0503 	sub.w	r5, r5, r3
 800b888:	4415      	add	r5, r2
 800b88a:	4b67      	ldr	r3, [pc, #412]	@ (800ba28 <_strtod_l+0x858>)
 800b88c:	f105 35ff 	add.w	r5, r5, #4294967295	@ 0xffffffff
 800b890:	bfb8      	it	lt
 800b892:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 800b894:	429d      	cmp	r5, r3
 800b896:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 800b89a:	da50      	bge.n	800b93e <_strtod_l+0x76e>
 800b89c:	1b5b      	subs	r3, r3, r5
 800b89e:	2b1f      	cmp	r3, #31
 800b8a0:	f04f 0101 	mov.w	r1, #1
 800b8a4:	eba2 0203 	sub.w	r2, r2, r3
 800b8a8:	dc3d      	bgt.n	800b926 <_strtod_l+0x756>
 800b8aa:	fa01 f303 	lsl.w	r3, r1, r3
 800b8ae:	9313      	str	r3, [sp, #76]	@ 0x4c
 800b8b0:	2300      	movs	r3, #0
 800b8b2:	9310      	str	r3, [sp, #64]	@ 0x40
 800b8b4:	18bd      	adds	r5, r7, r2
 800b8b6:	9b08      	ldr	r3, [sp, #32]
 800b8b8:	42af      	cmp	r7, r5
 800b8ba:	4416      	add	r6, r2
 800b8bc:	441e      	add	r6, r3
 800b8be:	463b      	mov	r3, r7
 800b8c0:	bfa8      	it	ge
 800b8c2:	462b      	movge	r3, r5
 800b8c4:	42b3      	cmp	r3, r6
 800b8c6:	bfa8      	it	ge
 800b8c8:	4633      	movge	r3, r6
 800b8ca:	2b00      	cmp	r3, #0
 800b8cc:	bfc2      	ittt	gt
 800b8ce:	1aed      	subgt	r5, r5, r3
 800b8d0:	1af6      	subgt	r6, r6, r3
 800b8d2:	1aff      	subgt	r7, r7, r3
 800b8d4:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800b8d6:	2b00      	cmp	r3, #0
 800b8d8:	dd16      	ble.n	800b908 <_strtod_l+0x738>
 800b8da:	4641      	mov	r1, r8
 800b8dc:	461a      	mov	r2, r3
 800b8de:	9805      	ldr	r0, [sp, #20]
 800b8e0:	f002 fd2c 	bl	800e33c <__pow5mult>
 800b8e4:	4680      	mov	r8, r0
 800b8e6:	2800      	cmp	r0, #0
 800b8e8:	d0b7      	beq.n	800b85a <_strtod_l+0x68a>
 800b8ea:	4601      	mov	r1, r0
 800b8ec:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800b8ee:	9805      	ldr	r0, [sp, #20]
 800b8f0:	f002 fc7c 	bl	800e1ec <__multiply>
 800b8f4:	900e      	str	r0, [sp, #56]	@ 0x38
 800b8f6:	2800      	cmp	r0, #0
 800b8f8:	f43f ae85 	beq.w	800b606 <_strtod_l+0x436>
 800b8fc:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800b8fe:	9805      	ldr	r0, [sp, #20]
 800b900:	f002 fb60 	bl	800dfc4 <_Bfree>
 800b904:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b906:	931a      	str	r3, [sp, #104]	@ 0x68
 800b908:	2d00      	cmp	r5, #0
 800b90a:	dc1d      	bgt.n	800b948 <_strtod_l+0x778>
 800b90c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b90e:	2b00      	cmp	r3, #0
 800b910:	dd23      	ble.n	800b95a <_strtod_l+0x78a>
 800b912:	4649      	mov	r1, r9
 800b914:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800b916:	9805      	ldr	r0, [sp, #20]
 800b918:	f002 fd10 	bl	800e33c <__pow5mult>
 800b91c:	4681      	mov	r9, r0
 800b91e:	b9e0      	cbnz	r0, 800b95a <_strtod_l+0x78a>
 800b920:	f04f 0900 	mov.w	r9, #0
 800b924:	e66f      	b.n	800b606 <_strtod_l+0x436>
 800b926:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 800b92a:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 800b92e:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 800b932:	35e2      	adds	r5, #226	@ 0xe2
 800b934:	fa01 f305 	lsl.w	r3, r1, r5
 800b938:	9310      	str	r3, [sp, #64]	@ 0x40
 800b93a:	9113      	str	r1, [sp, #76]	@ 0x4c
 800b93c:	e7ba      	b.n	800b8b4 <_strtod_l+0x6e4>
 800b93e:	2300      	movs	r3, #0
 800b940:	9310      	str	r3, [sp, #64]	@ 0x40
 800b942:	2301      	movs	r3, #1
 800b944:	9313      	str	r3, [sp, #76]	@ 0x4c
 800b946:	e7b5      	b.n	800b8b4 <_strtod_l+0x6e4>
 800b948:	462a      	mov	r2, r5
 800b94a:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800b94c:	9805      	ldr	r0, [sp, #20]
 800b94e:	f002 fd4f 	bl	800e3f0 <__lshift>
 800b952:	901a      	str	r0, [sp, #104]	@ 0x68
 800b954:	2800      	cmp	r0, #0
 800b956:	d1d9      	bne.n	800b90c <_strtod_l+0x73c>
 800b958:	e655      	b.n	800b606 <_strtod_l+0x436>
 800b95a:	2e00      	cmp	r6, #0
 800b95c:	dd07      	ble.n	800b96e <_strtod_l+0x79e>
 800b95e:	4649      	mov	r1, r9
 800b960:	4632      	mov	r2, r6
 800b962:	9805      	ldr	r0, [sp, #20]
 800b964:	f002 fd44 	bl	800e3f0 <__lshift>
 800b968:	4681      	mov	r9, r0
 800b96a:	2800      	cmp	r0, #0
 800b96c:	d0d8      	beq.n	800b920 <_strtod_l+0x750>
 800b96e:	2f00      	cmp	r7, #0
 800b970:	dd08      	ble.n	800b984 <_strtod_l+0x7b4>
 800b972:	4641      	mov	r1, r8
 800b974:	463a      	mov	r2, r7
 800b976:	9805      	ldr	r0, [sp, #20]
 800b978:	f002 fd3a 	bl	800e3f0 <__lshift>
 800b97c:	4680      	mov	r8, r0
 800b97e:	2800      	cmp	r0, #0
 800b980:	f43f ae41 	beq.w	800b606 <_strtod_l+0x436>
 800b984:	464a      	mov	r2, r9
 800b986:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800b988:	9805      	ldr	r0, [sp, #20]
 800b98a:	f002 fdb9 	bl	800e500 <__mdiff>
 800b98e:	4604      	mov	r4, r0
 800b990:	2800      	cmp	r0, #0
 800b992:	f43f ae38 	beq.w	800b606 <_strtod_l+0x436>
 800b996:	68c3      	ldr	r3, [r0, #12]
 800b998:	4641      	mov	r1, r8
 800b99a:	930f      	str	r3, [sp, #60]	@ 0x3c
 800b99c:	2300      	movs	r3, #0
 800b99e:	60c3      	str	r3, [r0, #12]
 800b9a0:	f002 fd92 	bl	800e4c8 <__mcmp>
 800b9a4:	2800      	cmp	r0, #0
 800b9a6:	da45      	bge.n	800ba34 <_strtod_l+0x864>
 800b9a8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b9aa:	ea53 030a 	orrs.w	r3, r3, sl
 800b9ae:	d16b      	bne.n	800ba88 <_strtod_l+0x8b8>
 800b9b0:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800b9b4:	2b00      	cmp	r3, #0
 800b9b6:	d167      	bne.n	800ba88 <_strtod_l+0x8b8>
 800b9b8:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800b9bc:	0d1b      	lsrs	r3, r3, #20
 800b9be:	051b      	lsls	r3, r3, #20
 800b9c0:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800b9c4:	d960      	bls.n	800ba88 <_strtod_l+0x8b8>
 800b9c6:	6963      	ldr	r3, [r4, #20]
 800b9c8:	b913      	cbnz	r3, 800b9d0 <_strtod_l+0x800>
 800b9ca:	6923      	ldr	r3, [r4, #16]
 800b9cc:	2b01      	cmp	r3, #1
 800b9ce:	dd5b      	ble.n	800ba88 <_strtod_l+0x8b8>
 800b9d0:	4621      	mov	r1, r4
 800b9d2:	2201      	movs	r2, #1
 800b9d4:	9805      	ldr	r0, [sp, #20]
 800b9d6:	f002 fd0b 	bl	800e3f0 <__lshift>
 800b9da:	4641      	mov	r1, r8
 800b9dc:	4604      	mov	r4, r0
 800b9de:	f002 fd73 	bl	800e4c8 <__mcmp>
 800b9e2:	2800      	cmp	r0, #0
 800b9e4:	dd50      	ble.n	800ba88 <_strtod_l+0x8b8>
 800b9e6:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800b9ea:	9a08      	ldr	r2, [sp, #32]
 800b9ec:	0d1b      	lsrs	r3, r3, #20
 800b9ee:	051b      	lsls	r3, r3, #20
 800b9f0:	2a00      	cmp	r2, #0
 800b9f2:	d06a      	beq.n	800baca <_strtod_l+0x8fa>
 800b9f4:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800b9f8:	d867      	bhi.n	800baca <_strtod_l+0x8fa>
 800b9fa:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 800b9fe:	f67f ae98 	bls.w	800b732 <_strtod_l+0x562>
 800ba02:	4650      	mov	r0, sl
 800ba04:	4659      	mov	r1, fp
 800ba06:	4b09      	ldr	r3, [pc, #36]	@ (800ba2c <_strtod_l+0x85c>)
 800ba08:	2200      	movs	r2, #0
 800ba0a:	f7f4 fe19 	bl	8000640 <__aeabi_dmul>
 800ba0e:	4b08      	ldr	r3, [pc, #32]	@ (800ba30 <_strtod_l+0x860>)
 800ba10:	4682      	mov	sl, r0
 800ba12:	400b      	ands	r3, r1
 800ba14:	468b      	mov	fp, r1
 800ba16:	2b00      	cmp	r3, #0
 800ba18:	f47f ae00 	bne.w	800b61c <_strtod_l+0x44c>
 800ba1c:	2322      	movs	r3, #34	@ 0x22
 800ba1e:	9a05      	ldr	r2, [sp, #20]
 800ba20:	6013      	str	r3, [r2, #0]
 800ba22:	e5fb      	b.n	800b61c <_strtod_l+0x44c>
 800ba24:	0800f640 	.word	0x0800f640
 800ba28:	fffffc02 	.word	0xfffffc02
 800ba2c:	39500000 	.word	0x39500000
 800ba30:	7ff00000 	.word	0x7ff00000
 800ba34:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800ba38:	d165      	bne.n	800bb06 <_strtod_l+0x936>
 800ba3a:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800ba3c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800ba40:	b35a      	cbz	r2, 800ba9a <_strtod_l+0x8ca>
 800ba42:	4a99      	ldr	r2, [pc, #612]	@ (800bca8 <_strtod_l+0xad8>)
 800ba44:	4293      	cmp	r3, r2
 800ba46:	d12b      	bne.n	800baa0 <_strtod_l+0x8d0>
 800ba48:	9b08      	ldr	r3, [sp, #32]
 800ba4a:	4651      	mov	r1, sl
 800ba4c:	b303      	cbz	r3, 800ba90 <_strtod_l+0x8c0>
 800ba4e:	465a      	mov	r2, fp
 800ba50:	4b96      	ldr	r3, [pc, #600]	@ (800bcac <_strtod_l+0xadc>)
 800ba52:	4013      	ands	r3, r2
 800ba54:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 800ba58:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800ba5c:	d81b      	bhi.n	800ba96 <_strtod_l+0x8c6>
 800ba5e:	0d1b      	lsrs	r3, r3, #20
 800ba60:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800ba64:	fa02 f303 	lsl.w	r3, r2, r3
 800ba68:	4299      	cmp	r1, r3
 800ba6a:	d119      	bne.n	800baa0 <_strtod_l+0x8d0>
 800ba6c:	4b90      	ldr	r3, [pc, #576]	@ (800bcb0 <_strtod_l+0xae0>)
 800ba6e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800ba70:	429a      	cmp	r2, r3
 800ba72:	d102      	bne.n	800ba7a <_strtod_l+0x8aa>
 800ba74:	3101      	adds	r1, #1
 800ba76:	f43f adc6 	beq.w	800b606 <_strtod_l+0x436>
 800ba7a:	f04f 0a00 	mov.w	sl, #0
 800ba7e:	4b8b      	ldr	r3, [pc, #556]	@ (800bcac <_strtod_l+0xadc>)
 800ba80:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800ba82:	401a      	ands	r2, r3
 800ba84:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 800ba88:	9b08      	ldr	r3, [sp, #32]
 800ba8a:	2b00      	cmp	r3, #0
 800ba8c:	d1b9      	bne.n	800ba02 <_strtod_l+0x832>
 800ba8e:	e5c5      	b.n	800b61c <_strtod_l+0x44c>
 800ba90:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800ba94:	e7e8      	b.n	800ba68 <_strtod_l+0x898>
 800ba96:	4613      	mov	r3, r2
 800ba98:	e7e6      	b.n	800ba68 <_strtod_l+0x898>
 800ba9a:	ea53 030a 	orrs.w	r3, r3, sl
 800ba9e:	d0a2      	beq.n	800b9e6 <_strtod_l+0x816>
 800baa0:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800baa2:	b1db      	cbz	r3, 800badc <_strtod_l+0x90c>
 800baa4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800baa6:	4213      	tst	r3, r2
 800baa8:	d0ee      	beq.n	800ba88 <_strtod_l+0x8b8>
 800baaa:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800baac:	4650      	mov	r0, sl
 800baae:	4659      	mov	r1, fp
 800bab0:	9a08      	ldr	r2, [sp, #32]
 800bab2:	b1bb      	cbz	r3, 800bae4 <_strtod_l+0x914>
 800bab4:	f7ff fb6b 	bl	800b18e <sulp>
 800bab8:	4602      	mov	r2, r0
 800baba:	460b      	mov	r3, r1
 800babc:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800bac0:	f7f4 fc08 	bl	80002d4 <__adddf3>
 800bac4:	4682      	mov	sl, r0
 800bac6:	468b      	mov	fp, r1
 800bac8:	e7de      	b.n	800ba88 <_strtod_l+0x8b8>
 800baca:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800bace:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800bad2:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 800bad6:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800bada:	e7d5      	b.n	800ba88 <_strtod_l+0x8b8>
 800badc:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800bade:	ea13 0f0a 	tst.w	r3, sl
 800bae2:	e7e1      	b.n	800baa8 <_strtod_l+0x8d8>
 800bae4:	f7ff fb53 	bl	800b18e <sulp>
 800bae8:	4602      	mov	r2, r0
 800baea:	460b      	mov	r3, r1
 800baec:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800baf0:	f7f4 fbee 	bl	80002d0 <__aeabi_dsub>
 800baf4:	2200      	movs	r2, #0
 800baf6:	2300      	movs	r3, #0
 800baf8:	4682      	mov	sl, r0
 800bafa:	468b      	mov	fp, r1
 800bafc:	f7f5 f808 	bl	8000b10 <__aeabi_dcmpeq>
 800bb00:	2800      	cmp	r0, #0
 800bb02:	d0c1      	beq.n	800ba88 <_strtod_l+0x8b8>
 800bb04:	e615      	b.n	800b732 <_strtod_l+0x562>
 800bb06:	4641      	mov	r1, r8
 800bb08:	4620      	mov	r0, r4
 800bb0a:	f002 fe4d 	bl	800e7a8 <__ratio>
 800bb0e:	2200      	movs	r2, #0
 800bb10:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800bb14:	4606      	mov	r6, r0
 800bb16:	460f      	mov	r7, r1
 800bb18:	f7f5 f80e 	bl	8000b38 <__aeabi_dcmple>
 800bb1c:	2800      	cmp	r0, #0
 800bb1e:	d06d      	beq.n	800bbfc <_strtod_l+0xa2c>
 800bb20:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800bb22:	2b00      	cmp	r3, #0
 800bb24:	d178      	bne.n	800bc18 <_strtod_l+0xa48>
 800bb26:	f1ba 0f00 	cmp.w	sl, #0
 800bb2a:	d156      	bne.n	800bbda <_strtod_l+0xa0a>
 800bb2c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800bb2e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800bb32:	2b00      	cmp	r3, #0
 800bb34:	d158      	bne.n	800bbe8 <_strtod_l+0xa18>
 800bb36:	2200      	movs	r2, #0
 800bb38:	4630      	mov	r0, r6
 800bb3a:	4639      	mov	r1, r7
 800bb3c:	4b5d      	ldr	r3, [pc, #372]	@ (800bcb4 <_strtod_l+0xae4>)
 800bb3e:	f7f4 fff1 	bl	8000b24 <__aeabi_dcmplt>
 800bb42:	2800      	cmp	r0, #0
 800bb44:	d157      	bne.n	800bbf6 <_strtod_l+0xa26>
 800bb46:	4630      	mov	r0, r6
 800bb48:	4639      	mov	r1, r7
 800bb4a:	2200      	movs	r2, #0
 800bb4c:	4b5a      	ldr	r3, [pc, #360]	@ (800bcb8 <_strtod_l+0xae8>)
 800bb4e:	f7f4 fd77 	bl	8000640 <__aeabi_dmul>
 800bb52:	4606      	mov	r6, r0
 800bb54:	460f      	mov	r7, r1
 800bb56:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 800bb5a:	9606      	str	r6, [sp, #24]
 800bb5c:	9307      	str	r3, [sp, #28]
 800bb5e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800bb62:	4d52      	ldr	r5, [pc, #328]	@ (800bcac <_strtod_l+0xadc>)
 800bb64:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800bb68:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800bb6a:	401d      	ands	r5, r3
 800bb6c:	4b53      	ldr	r3, [pc, #332]	@ (800bcbc <_strtod_l+0xaec>)
 800bb6e:	429d      	cmp	r5, r3
 800bb70:	f040 80aa 	bne.w	800bcc8 <_strtod_l+0xaf8>
 800bb74:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800bb76:	4650      	mov	r0, sl
 800bb78:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 800bb7c:	4659      	mov	r1, fp
 800bb7e:	f002 fd53 	bl	800e628 <__ulp>
 800bb82:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800bb86:	f7f4 fd5b 	bl	8000640 <__aeabi_dmul>
 800bb8a:	4652      	mov	r2, sl
 800bb8c:	465b      	mov	r3, fp
 800bb8e:	f7f4 fba1 	bl	80002d4 <__adddf3>
 800bb92:	460b      	mov	r3, r1
 800bb94:	4945      	ldr	r1, [pc, #276]	@ (800bcac <_strtod_l+0xadc>)
 800bb96:	4a4a      	ldr	r2, [pc, #296]	@ (800bcc0 <_strtod_l+0xaf0>)
 800bb98:	4019      	ands	r1, r3
 800bb9a:	4291      	cmp	r1, r2
 800bb9c:	4682      	mov	sl, r0
 800bb9e:	d942      	bls.n	800bc26 <_strtod_l+0xa56>
 800bba0:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800bba2:	4b43      	ldr	r3, [pc, #268]	@ (800bcb0 <_strtod_l+0xae0>)
 800bba4:	429a      	cmp	r2, r3
 800bba6:	d103      	bne.n	800bbb0 <_strtod_l+0x9e0>
 800bba8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800bbaa:	3301      	adds	r3, #1
 800bbac:	f43f ad2b 	beq.w	800b606 <_strtod_l+0x436>
 800bbb0:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 800bbb4:	f8df b0f8 	ldr.w	fp, [pc, #248]	@ 800bcb0 <_strtod_l+0xae0>
 800bbb8:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800bbba:	9805      	ldr	r0, [sp, #20]
 800bbbc:	f002 fa02 	bl	800dfc4 <_Bfree>
 800bbc0:	4649      	mov	r1, r9
 800bbc2:	9805      	ldr	r0, [sp, #20]
 800bbc4:	f002 f9fe 	bl	800dfc4 <_Bfree>
 800bbc8:	4641      	mov	r1, r8
 800bbca:	9805      	ldr	r0, [sp, #20]
 800bbcc:	f002 f9fa 	bl	800dfc4 <_Bfree>
 800bbd0:	4621      	mov	r1, r4
 800bbd2:	9805      	ldr	r0, [sp, #20]
 800bbd4:	f002 f9f6 	bl	800dfc4 <_Bfree>
 800bbd8:	e618      	b.n	800b80c <_strtod_l+0x63c>
 800bbda:	f1ba 0f01 	cmp.w	sl, #1
 800bbde:	d103      	bne.n	800bbe8 <_strtod_l+0xa18>
 800bbe0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800bbe2:	2b00      	cmp	r3, #0
 800bbe4:	f43f ada5 	beq.w	800b732 <_strtod_l+0x562>
 800bbe8:	2200      	movs	r2, #0
 800bbea:	4b36      	ldr	r3, [pc, #216]	@ (800bcc4 <_strtod_l+0xaf4>)
 800bbec:	2600      	movs	r6, #0
 800bbee:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800bbf2:	4f30      	ldr	r7, [pc, #192]	@ (800bcb4 <_strtod_l+0xae4>)
 800bbf4:	e7b3      	b.n	800bb5e <_strtod_l+0x98e>
 800bbf6:	2600      	movs	r6, #0
 800bbf8:	4f2f      	ldr	r7, [pc, #188]	@ (800bcb8 <_strtod_l+0xae8>)
 800bbfa:	e7ac      	b.n	800bb56 <_strtod_l+0x986>
 800bbfc:	4630      	mov	r0, r6
 800bbfe:	4639      	mov	r1, r7
 800bc00:	4b2d      	ldr	r3, [pc, #180]	@ (800bcb8 <_strtod_l+0xae8>)
 800bc02:	2200      	movs	r2, #0
 800bc04:	f7f4 fd1c 	bl	8000640 <__aeabi_dmul>
 800bc08:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800bc0a:	4606      	mov	r6, r0
 800bc0c:	460f      	mov	r7, r1
 800bc0e:	2b00      	cmp	r3, #0
 800bc10:	d0a1      	beq.n	800bb56 <_strtod_l+0x986>
 800bc12:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800bc16:	e7a2      	b.n	800bb5e <_strtod_l+0x98e>
 800bc18:	2200      	movs	r2, #0
 800bc1a:	4b26      	ldr	r3, [pc, #152]	@ (800bcb4 <_strtod_l+0xae4>)
 800bc1c:	4616      	mov	r6, r2
 800bc1e:	461f      	mov	r7, r3
 800bc20:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800bc24:	e79b      	b.n	800bb5e <_strtod_l+0x98e>
 800bc26:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 800bc2a:	9b08      	ldr	r3, [sp, #32]
 800bc2c:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800bc30:	2b00      	cmp	r3, #0
 800bc32:	d1c1      	bne.n	800bbb8 <_strtod_l+0x9e8>
 800bc34:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800bc38:	0d1b      	lsrs	r3, r3, #20
 800bc3a:	051b      	lsls	r3, r3, #20
 800bc3c:	429d      	cmp	r5, r3
 800bc3e:	d1bb      	bne.n	800bbb8 <_strtod_l+0x9e8>
 800bc40:	4630      	mov	r0, r6
 800bc42:	4639      	mov	r1, r7
 800bc44:	f7f5 f990 	bl	8000f68 <__aeabi_d2lz>
 800bc48:	f7f4 fccc 	bl	80005e4 <__aeabi_l2d>
 800bc4c:	4602      	mov	r2, r0
 800bc4e:	460b      	mov	r3, r1
 800bc50:	4630      	mov	r0, r6
 800bc52:	4639      	mov	r1, r7
 800bc54:	f7f4 fb3c 	bl	80002d0 <__aeabi_dsub>
 800bc58:	460b      	mov	r3, r1
 800bc5a:	4602      	mov	r2, r0
 800bc5c:	f3cb 0613 	ubfx	r6, fp, #0, #20
 800bc60:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800bc64:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800bc66:	ea46 060a 	orr.w	r6, r6, sl
 800bc6a:	431e      	orrs	r6, r3
 800bc6c:	d069      	beq.n	800bd42 <_strtod_l+0xb72>
 800bc6e:	a30a      	add	r3, pc, #40	@ (adr r3, 800bc98 <_strtod_l+0xac8>)
 800bc70:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc74:	f7f4 ff56 	bl	8000b24 <__aeabi_dcmplt>
 800bc78:	2800      	cmp	r0, #0
 800bc7a:	f47f accf 	bne.w	800b61c <_strtod_l+0x44c>
 800bc7e:	a308      	add	r3, pc, #32	@ (adr r3, 800bca0 <_strtod_l+0xad0>)
 800bc80:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc84:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800bc88:	f7f4 ff6a 	bl	8000b60 <__aeabi_dcmpgt>
 800bc8c:	2800      	cmp	r0, #0
 800bc8e:	d093      	beq.n	800bbb8 <_strtod_l+0x9e8>
 800bc90:	e4c4      	b.n	800b61c <_strtod_l+0x44c>
 800bc92:	bf00      	nop
 800bc94:	f3af 8000 	nop.w
 800bc98:	94a03595 	.word	0x94a03595
 800bc9c:	3fdfffff 	.word	0x3fdfffff
 800bca0:	35afe535 	.word	0x35afe535
 800bca4:	3fe00000 	.word	0x3fe00000
 800bca8:	000fffff 	.word	0x000fffff
 800bcac:	7ff00000 	.word	0x7ff00000
 800bcb0:	7fefffff 	.word	0x7fefffff
 800bcb4:	3ff00000 	.word	0x3ff00000
 800bcb8:	3fe00000 	.word	0x3fe00000
 800bcbc:	7fe00000 	.word	0x7fe00000
 800bcc0:	7c9fffff 	.word	0x7c9fffff
 800bcc4:	bff00000 	.word	0xbff00000
 800bcc8:	9b08      	ldr	r3, [sp, #32]
 800bcca:	b323      	cbz	r3, 800bd16 <_strtod_l+0xb46>
 800bccc:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 800bcd0:	d821      	bhi.n	800bd16 <_strtod_l+0xb46>
 800bcd2:	a327      	add	r3, pc, #156	@ (adr r3, 800bd70 <_strtod_l+0xba0>)
 800bcd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bcd8:	4630      	mov	r0, r6
 800bcda:	4639      	mov	r1, r7
 800bcdc:	f7f4 ff2c 	bl	8000b38 <__aeabi_dcmple>
 800bce0:	b1a0      	cbz	r0, 800bd0c <_strtod_l+0xb3c>
 800bce2:	4639      	mov	r1, r7
 800bce4:	4630      	mov	r0, r6
 800bce6:	f7f4 ff83 	bl	8000bf0 <__aeabi_d2uiz>
 800bcea:	2801      	cmp	r0, #1
 800bcec:	bf38      	it	cc
 800bcee:	2001      	movcc	r0, #1
 800bcf0:	f7f4 fc2c 	bl	800054c <__aeabi_ui2d>
 800bcf4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800bcf6:	4606      	mov	r6, r0
 800bcf8:	460f      	mov	r7, r1
 800bcfa:	b9fb      	cbnz	r3, 800bd3c <_strtod_l+0xb6c>
 800bcfc:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800bd00:	9014      	str	r0, [sp, #80]	@ 0x50
 800bd02:	9315      	str	r3, [sp, #84]	@ 0x54
 800bd04:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 800bd08:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800bd0c:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800bd0e:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 800bd12:	1b5b      	subs	r3, r3, r5
 800bd14:	9311      	str	r3, [sp, #68]	@ 0x44
 800bd16:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800bd1a:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 800bd1e:	f002 fc83 	bl	800e628 <__ulp>
 800bd22:	4602      	mov	r2, r0
 800bd24:	460b      	mov	r3, r1
 800bd26:	4650      	mov	r0, sl
 800bd28:	4659      	mov	r1, fp
 800bd2a:	f7f4 fc89 	bl	8000640 <__aeabi_dmul>
 800bd2e:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800bd32:	f7f4 facf 	bl	80002d4 <__adddf3>
 800bd36:	4682      	mov	sl, r0
 800bd38:	468b      	mov	fp, r1
 800bd3a:	e776      	b.n	800bc2a <_strtod_l+0xa5a>
 800bd3c:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 800bd40:	e7e0      	b.n	800bd04 <_strtod_l+0xb34>
 800bd42:	a30d      	add	r3, pc, #52	@ (adr r3, 800bd78 <_strtod_l+0xba8>)
 800bd44:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd48:	f7f4 feec 	bl	8000b24 <__aeabi_dcmplt>
 800bd4c:	e79e      	b.n	800bc8c <_strtod_l+0xabc>
 800bd4e:	2300      	movs	r3, #0
 800bd50:	930b      	str	r3, [sp, #44]	@ 0x2c
 800bd52:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800bd54:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 800bd56:	6013      	str	r3, [r2, #0]
 800bd58:	f7ff ba77 	b.w	800b24a <_strtod_l+0x7a>
 800bd5c:	2a65      	cmp	r2, #101	@ 0x65
 800bd5e:	f43f ab6e 	beq.w	800b43e <_strtod_l+0x26e>
 800bd62:	2a45      	cmp	r2, #69	@ 0x45
 800bd64:	f43f ab6b 	beq.w	800b43e <_strtod_l+0x26e>
 800bd68:	2301      	movs	r3, #1
 800bd6a:	f7ff bba6 	b.w	800b4ba <_strtod_l+0x2ea>
 800bd6e:	bf00      	nop
 800bd70:	ffc00000 	.word	0xffc00000
 800bd74:	41dfffff 	.word	0x41dfffff
 800bd78:	94a03595 	.word	0x94a03595
 800bd7c:	3fcfffff 	.word	0x3fcfffff

0800bd80 <strtod>:
 800bd80:	460a      	mov	r2, r1
 800bd82:	4601      	mov	r1, r0
 800bd84:	4802      	ldr	r0, [pc, #8]	@ (800bd90 <strtod+0x10>)
 800bd86:	4b03      	ldr	r3, [pc, #12]	@ (800bd94 <strtod+0x14>)
 800bd88:	6800      	ldr	r0, [r0, #0]
 800bd8a:	f7ff ba21 	b.w	800b1d0 <_strtod_l>
 800bd8e:	bf00      	nop
 800bd90:	20000308 	.word	0x20000308
 800bd94:	2000019c 	.word	0x2000019c

0800bd98 <atoll>:
 800bd98:	220a      	movs	r2, #10
 800bd9a:	2100      	movs	r1, #0
 800bd9c:	f002 be14 	b.w	800e9c8 <strtoll>

0800bda0 <__cvt>:
 800bda0:	2b00      	cmp	r3, #0
 800bda2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bda6:	461d      	mov	r5, r3
 800bda8:	bfbb      	ittet	lt
 800bdaa:	f103 4300 	addlt.w	r3, r3, #2147483648	@ 0x80000000
 800bdae:	461d      	movlt	r5, r3
 800bdb0:	2300      	movge	r3, #0
 800bdb2:	232d      	movlt	r3, #45	@ 0x2d
 800bdb4:	b088      	sub	sp, #32
 800bdb6:	4614      	mov	r4, r2
 800bdb8:	bfb8      	it	lt
 800bdba:	4614      	movlt	r4, r2
 800bdbc:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800bdbe:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 800bdc0:	7013      	strb	r3, [r2, #0]
 800bdc2:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800bdc4:	f8dd a04c 	ldr.w	sl, [sp, #76]	@ 0x4c
 800bdc8:	f023 0820 	bic.w	r8, r3, #32
 800bdcc:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800bdd0:	d005      	beq.n	800bdde <__cvt+0x3e>
 800bdd2:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800bdd6:	d100      	bne.n	800bdda <__cvt+0x3a>
 800bdd8:	3601      	adds	r6, #1
 800bdda:	2302      	movs	r3, #2
 800bddc:	e000      	b.n	800bde0 <__cvt+0x40>
 800bdde:	2303      	movs	r3, #3
 800bde0:	aa07      	add	r2, sp, #28
 800bde2:	9204      	str	r2, [sp, #16]
 800bde4:	aa06      	add	r2, sp, #24
 800bde6:	e9cd a202 	strd	sl, r2, [sp, #8]
 800bdea:	e9cd 3600 	strd	r3, r6, [sp]
 800bdee:	4622      	mov	r2, r4
 800bdf0:	462b      	mov	r3, r5
 800bdf2:	f000 fe95 	bl	800cb20 <_dtoa_r>
 800bdf6:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800bdfa:	4607      	mov	r7, r0
 800bdfc:	d119      	bne.n	800be32 <__cvt+0x92>
 800bdfe:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800be00:	07db      	lsls	r3, r3, #31
 800be02:	d50e      	bpl.n	800be22 <__cvt+0x82>
 800be04:	eb00 0906 	add.w	r9, r0, r6
 800be08:	2200      	movs	r2, #0
 800be0a:	2300      	movs	r3, #0
 800be0c:	4620      	mov	r0, r4
 800be0e:	4629      	mov	r1, r5
 800be10:	f7f4 fe7e 	bl	8000b10 <__aeabi_dcmpeq>
 800be14:	b108      	cbz	r0, 800be1a <__cvt+0x7a>
 800be16:	f8cd 901c 	str.w	r9, [sp, #28]
 800be1a:	2230      	movs	r2, #48	@ 0x30
 800be1c:	9b07      	ldr	r3, [sp, #28]
 800be1e:	454b      	cmp	r3, r9
 800be20:	d31e      	bcc.n	800be60 <__cvt+0xc0>
 800be22:	4638      	mov	r0, r7
 800be24:	9b07      	ldr	r3, [sp, #28]
 800be26:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 800be28:	1bdb      	subs	r3, r3, r7
 800be2a:	6013      	str	r3, [r2, #0]
 800be2c:	b008      	add	sp, #32
 800be2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800be32:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800be36:	eb00 0906 	add.w	r9, r0, r6
 800be3a:	d1e5      	bne.n	800be08 <__cvt+0x68>
 800be3c:	7803      	ldrb	r3, [r0, #0]
 800be3e:	2b30      	cmp	r3, #48	@ 0x30
 800be40:	d10a      	bne.n	800be58 <__cvt+0xb8>
 800be42:	2200      	movs	r2, #0
 800be44:	2300      	movs	r3, #0
 800be46:	4620      	mov	r0, r4
 800be48:	4629      	mov	r1, r5
 800be4a:	f7f4 fe61 	bl	8000b10 <__aeabi_dcmpeq>
 800be4e:	b918      	cbnz	r0, 800be58 <__cvt+0xb8>
 800be50:	f1c6 0601 	rsb	r6, r6, #1
 800be54:	f8ca 6000 	str.w	r6, [sl]
 800be58:	f8da 3000 	ldr.w	r3, [sl]
 800be5c:	4499      	add	r9, r3
 800be5e:	e7d3      	b.n	800be08 <__cvt+0x68>
 800be60:	1c59      	adds	r1, r3, #1
 800be62:	9107      	str	r1, [sp, #28]
 800be64:	701a      	strb	r2, [r3, #0]
 800be66:	e7d9      	b.n	800be1c <__cvt+0x7c>

0800be68 <__exponent>:
 800be68:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800be6a:	2900      	cmp	r1, #0
 800be6c:	bfb6      	itet	lt
 800be6e:	232d      	movlt	r3, #45	@ 0x2d
 800be70:	232b      	movge	r3, #43	@ 0x2b
 800be72:	4249      	neglt	r1, r1
 800be74:	2909      	cmp	r1, #9
 800be76:	7002      	strb	r2, [r0, #0]
 800be78:	7043      	strb	r3, [r0, #1]
 800be7a:	dd29      	ble.n	800bed0 <__exponent+0x68>
 800be7c:	f10d 0307 	add.w	r3, sp, #7
 800be80:	461d      	mov	r5, r3
 800be82:	270a      	movs	r7, #10
 800be84:	fbb1 f6f7 	udiv	r6, r1, r7
 800be88:	461a      	mov	r2, r3
 800be8a:	fb07 1416 	mls	r4, r7, r6, r1
 800be8e:	3430      	adds	r4, #48	@ 0x30
 800be90:	f802 4c01 	strb.w	r4, [r2, #-1]
 800be94:	460c      	mov	r4, r1
 800be96:	2c63      	cmp	r4, #99	@ 0x63
 800be98:	4631      	mov	r1, r6
 800be9a:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 800be9e:	dcf1      	bgt.n	800be84 <__exponent+0x1c>
 800bea0:	3130      	adds	r1, #48	@ 0x30
 800bea2:	1e94      	subs	r4, r2, #2
 800bea4:	f803 1c01 	strb.w	r1, [r3, #-1]
 800bea8:	4623      	mov	r3, r4
 800beaa:	1c41      	adds	r1, r0, #1
 800beac:	42ab      	cmp	r3, r5
 800beae:	d30a      	bcc.n	800bec6 <__exponent+0x5e>
 800beb0:	f10d 0309 	add.w	r3, sp, #9
 800beb4:	1a9b      	subs	r3, r3, r2
 800beb6:	42ac      	cmp	r4, r5
 800beb8:	bf88      	it	hi
 800beba:	2300      	movhi	r3, #0
 800bebc:	3302      	adds	r3, #2
 800bebe:	4403      	add	r3, r0
 800bec0:	1a18      	subs	r0, r3, r0
 800bec2:	b003      	add	sp, #12
 800bec4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bec6:	f813 6b01 	ldrb.w	r6, [r3], #1
 800beca:	f801 6f01 	strb.w	r6, [r1, #1]!
 800bece:	e7ed      	b.n	800beac <__exponent+0x44>
 800bed0:	2330      	movs	r3, #48	@ 0x30
 800bed2:	3130      	adds	r1, #48	@ 0x30
 800bed4:	7083      	strb	r3, [r0, #2]
 800bed6:	70c1      	strb	r1, [r0, #3]
 800bed8:	1d03      	adds	r3, r0, #4
 800beda:	e7f1      	b.n	800bec0 <__exponent+0x58>

0800bedc <_printf_float>:
 800bedc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bee0:	b091      	sub	sp, #68	@ 0x44
 800bee2:	460c      	mov	r4, r1
 800bee4:	f8dd 8068 	ldr.w	r8, [sp, #104]	@ 0x68
 800bee8:	4616      	mov	r6, r2
 800beea:	461f      	mov	r7, r3
 800beec:	4605      	mov	r5, r0
 800beee:	f000 fcf3 	bl	800c8d8 <_localeconv_r>
 800bef2:	6803      	ldr	r3, [r0, #0]
 800bef4:	4618      	mov	r0, r3
 800bef6:	9308      	str	r3, [sp, #32]
 800bef8:	f7f4 f92a 	bl	8000150 <strlen>
 800befc:	2300      	movs	r3, #0
 800befe:	930e      	str	r3, [sp, #56]	@ 0x38
 800bf00:	f8d8 3000 	ldr.w	r3, [r8]
 800bf04:	9009      	str	r0, [sp, #36]	@ 0x24
 800bf06:	3307      	adds	r3, #7
 800bf08:	f023 0307 	bic.w	r3, r3, #7
 800bf0c:	f103 0208 	add.w	r2, r3, #8
 800bf10:	f894 a018 	ldrb.w	sl, [r4, #24]
 800bf14:	f8d4 b000 	ldr.w	fp, [r4]
 800bf18:	f8c8 2000 	str.w	r2, [r8]
 800bf1c:	e9d3 8900 	ldrd	r8, r9, [r3]
 800bf20:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800bf24:	930b      	str	r3, [sp, #44]	@ 0x2c
 800bf26:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 800bf2a:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800bf2e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800bf32:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800bf36:	4b9c      	ldr	r3, [pc, #624]	@ (800c1a8 <_printf_float+0x2cc>)
 800bf38:	f7f4 fe1c 	bl	8000b74 <__aeabi_dcmpun>
 800bf3c:	bb70      	cbnz	r0, 800bf9c <_printf_float+0xc0>
 800bf3e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800bf42:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800bf46:	4b98      	ldr	r3, [pc, #608]	@ (800c1a8 <_printf_float+0x2cc>)
 800bf48:	f7f4 fdf6 	bl	8000b38 <__aeabi_dcmple>
 800bf4c:	bb30      	cbnz	r0, 800bf9c <_printf_float+0xc0>
 800bf4e:	2200      	movs	r2, #0
 800bf50:	2300      	movs	r3, #0
 800bf52:	4640      	mov	r0, r8
 800bf54:	4649      	mov	r1, r9
 800bf56:	f7f4 fde5 	bl	8000b24 <__aeabi_dcmplt>
 800bf5a:	b110      	cbz	r0, 800bf62 <_printf_float+0x86>
 800bf5c:	232d      	movs	r3, #45	@ 0x2d
 800bf5e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800bf62:	4a92      	ldr	r2, [pc, #584]	@ (800c1ac <_printf_float+0x2d0>)
 800bf64:	4b92      	ldr	r3, [pc, #584]	@ (800c1b0 <_printf_float+0x2d4>)
 800bf66:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800bf6a:	bf94      	ite	ls
 800bf6c:	4690      	movls	r8, r2
 800bf6e:	4698      	movhi	r8, r3
 800bf70:	2303      	movs	r3, #3
 800bf72:	f04f 0900 	mov.w	r9, #0
 800bf76:	6123      	str	r3, [r4, #16]
 800bf78:	f02b 0304 	bic.w	r3, fp, #4
 800bf7c:	6023      	str	r3, [r4, #0]
 800bf7e:	4633      	mov	r3, r6
 800bf80:	4621      	mov	r1, r4
 800bf82:	4628      	mov	r0, r5
 800bf84:	9700      	str	r7, [sp, #0]
 800bf86:	aa0f      	add	r2, sp, #60	@ 0x3c
 800bf88:	f000 f9d4 	bl	800c334 <_printf_common>
 800bf8c:	3001      	adds	r0, #1
 800bf8e:	f040 8090 	bne.w	800c0b2 <_printf_float+0x1d6>
 800bf92:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800bf96:	b011      	add	sp, #68	@ 0x44
 800bf98:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bf9c:	4642      	mov	r2, r8
 800bf9e:	464b      	mov	r3, r9
 800bfa0:	4640      	mov	r0, r8
 800bfa2:	4649      	mov	r1, r9
 800bfa4:	f7f4 fde6 	bl	8000b74 <__aeabi_dcmpun>
 800bfa8:	b148      	cbz	r0, 800bfbe <_printf_float+0xe2>
 800bfaa:	464b      	mov	r3, r9
 800bfac:	2b00      	cmp	r3, #0
 800bfae:	bfb8      	it	lt
 800bfb0:	232d      	movlt	r3, #45	@ 0x2d
 800bfb2:	4a80      	ldr	r2, [pc, #512]	@ (800c1b4 <_printf_float+0x2d8>)
 800bfb4:	bfb8      	it	lt
 800bfb6:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800bfba:	4b7f      	ldr	r3, [pc, #508]	@ (800c1b8 <_printf_float+0x2dc>)
 800bfbc:	e7d3      	b.n	800bf66 <_printf_float+0x8a>
 800bfbe:	6863      	ldr	r3, [r4, #4]
 800bfc0:	f00a 01df 	and.w	r1, sl, #223	@ 0xdf
 800bfc4:	1c5a      	adds	r2, r3, #1
 800bfc6:	d13f      	bne.n	800c048 <_printf_float+0x16c>
 800bfc8:	2306      	movs	r3, #6
 800bfca:	6063      	str	r3, [r4, #4]
 800bfcc:	2200      	movs	r2, #0
 800bfce:	f44b 6380 	orr.w	r3, fp, #1024	@ 0x400
 800bfd2:	6023      	str	r3, [r4, #0]
 800bfd4:	9206      	str	r2, [sp, #24]
 800bfd6:	aa0e      	add	r2, sp, #56	@ 0x38
 800bfd8:	e9cd a204 	strd	sl, r2, [sp, #16]
 800bfdc:	aa0d      	add	r2, sp, #52	@ 0x34
 800bfde:	9203      	str	r2, [sp, #12]
 800bfe0:	f10d 0233 	add.w	r2, sp, #51	@ 0x33
 800bfe4:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800bfe8:	6863      	ldr	r3, [r4, #4]
 800bfea:	4642      	mov	r2, r8
 800bfec:	9300      	str	r3, [sp, #0]
 800bfee:	4628      	mov	r0, r5
 800bff0:	464b      	mov	r3, r9
 800bff2:	910a      	str	r1, [sp, #40]	@ 0x28
 800bff4:	f7ff fed4 	bl	800bda0 <__cvt>
 800bff8:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800bffa:	4680      	mov	r8, r0
 800bffc:	2947      	cmp	r1, #71	@ 0x47
 800bffe:	990d      	ldr	r1, [sp, #52]	@ 0x34
 800c000:	d128      	bne.n	800c054 <_printf_float+0x178>
 800c002:	1cc8      	adds	r0, r1, #3
 800c004:	db02      	blt.n	800c00c <_printf_float+0x130>
 800c006:	6863      	ldr	r3, [r4, #4]
 800c008:	4299      	cmp	r1, r3
 800c00a:	dd40      	ble.n	800c08e <_printf_float+0x1b2>
 800c00c:	f1aa 0a02 	sub.w	sl, sl, #2
 800c010:	fa5f fa8a 	uxtb.w	sl, sl
 800c014:	4652      	mov	r2, sl
 800c016:	3901      	subs	r1, #1
 800c018:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800c01c:	910d      	str	r1, [sp, #52]	@ 0x34
 800c01e:	f7ff ff23 	bl	800be68 <__exponent>
 800c022:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800c024:	4681      	mov	r9, r0
 800c026:	1813      	adds	r3, r2, r0
 800c028:	2a01      	cmp	r2, #1
 800c02a:	6123      	str	r3, [r4, #16]
 800c02c:	dc02      	bgt.n	800c034 <_printf_float+0x158>
 800c02e:	6822      	ldr	r2, [r4, #0]
 800c030:	07d2      	lsls	r2, r2, #31
 800c032:	d501      	bpl.n	800c038 <_printf_float+0x15c>
 800c034:	3301      	adds	r3, #1
 800c036:	6123      	str	r3, [r4, #16]
 800c038:	f89d 3033 	ldrb.w	r3, [sp, #51]	@ 0x33
 800c03c:	2b00      	cmp	r3, #0
 800c03e:	d09e      	beq.n	800bf7e <_printf_float+0xa2>
 800c040:	232d      	movs	r3, #45	@ 0x2d
 800c042:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800c046:	e79a      	b.n	800bf7e <_printf_float+0xa2>
 800c048:	2947      	cmp	r1, #71	@ 0x47
 800c04a:	d1bf      	bne.n	800bfcc <_printf_float+0xf0>
 800c04c:	2b00      	cmp	r3, #0
 800c04e:	d1bd      	bne.n	800bfcc <_printf_float+0xf0>
 800c050:	2301      	movs	r3, #1
 800c052:	e7ba      	b.n	800bfca <_printf_float+0xee>
 800c054:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800c058:	d9dc      	bls.n	800c014 <_printf_float+0x138>
 800c05a:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800c05e:	d118      	bne.n	800c092 <_printf_float+0x1b6>
 800c060:	2900      	cmp	r1, #0
 800c062:	6863      	ldr	r3, [r4, #4]
 800c064:	dd0b      	ble.n	800c07e <_printf_float+0x1a2>
 800c066:	6121      	str	r1, [r4, #16]
 800c068:	b913      	cbnz	r3, 800c070 <_printf_float+0x194>
 800c06a:	6822      	ldr	r2, [r4, #0]
 800c06c:	07d0      	lsls	r0, r2, #31
 800c06e:	d502      	bpl.n	800c076 <_printf_float+0x19a>
 800c070:	3301      	adds	r3, #1
 800c072:	440b      	add	r3, r1
 800c074:	6123      	str	r3, [r4, #16]
 800c076:	f04f 0900 	mov.w	r9, #0
 800c07a:	65a1      	str	r1, [r4, #88]	@ 0x58
 800c07c:	e7dc      	b.n	800c038 <_printf_float+0x15c>
 800c07e:	b913      	cbnz	r3, 800c086 <_printf_float+0x1aa>
 800c080:	6822      	ldr	r2, [r4, #0]
 800c082:	07d2      	lsls	r2, r2, #31
 800c084:	d501      	bpl.n	800c08a <_printf_float+0x1ae>
 800c086:	3302      	adds	r3, #2
 800c088:	e7f4      	b.n	800c074 <_printf_float+0x198>
 800c08a:	2301      	movs	r3, #1
 800c08c:	e7f2      	b.n	800c074 <_printf_float+0x198>
 800c08e:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800c092:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c094:	4299      	cmp	r1, r3
 800c096:	db05      	blt.n	800c0a4 <_printf_float+0x1c8>
 800c098:	6823      	ldr	r3, [r4, #0]
 800c09a:	6121      	str	r1, [r4, #16]
 800c09c:	07d8      	lsls	r0, r3, #31
 800c09e:	d5ea      	bpl.n	800c076 <_printf_float+0x19a>
 800c0a0:	1c4b      	adds	r3, r1, #1
 800c0a2:	e7e7      	b.n	800c074 <_printf_float+0x198>
 800c0a4:	2900      	cmp	r1, #0
 800c0a6:	bfcc      	ite	gt
 800c0a8:	2201      	movgt	r2, #1
 800c0aa:	f1c1 0202 	rsble	r2, r1, #2
 800c0ae:	4413      	add	r3, r2
 800c0b0:	e7e0      	b.n	800c074 <_printf_float+0x198>
 800c0b2:	6823      	ldr	r3, [r4, #0]
 800c0b4:	055a      	lsls	r2, r3, #21
 800c0b6:	d407      	bmi.n	800c0c8 <_printf_float+0x1ec>
 800c0b8:	6923      	ldr	r3, [r4, #16]
 800c0ba:	4642      	mov	r2, r8
 800c0bc:	4631      	mov	r1, r6
 800c0be:	4628      	mov	r0, r5
 800c0c0:	47b8      	blx	r7
 800c0c2:	3001      	adds	r0, #1
 800c0c4:	d12b      	bne.n	800c11e <_printf_float+0x242>
 800c0c6:	e764      	b.n	800bf92 <_printf_float+0xb6>
 800c0c8:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800c0cc:	f240 80dc 	bls.w	800c288 <_printf_float+0x3ac>
 800c0d0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800c0d4:	2200      	movs	r2, #0
 800c0d6:	2300      	movs	r3, #0
 800c0d8:	f7f4 fd1a 	bl	8000b10 <__aeabi_dcmpeq>
 800c0dc:	2800      	cmp	r0, #0
 800c0de:	d033      	beq.n	800c148 <_printf_float+0x26c>
 800c0e0:	2301      	movs	r3, #1
 800c0e2:	4631      	mov	r1, r6
 800c0e4:	4628      	mov	r0, r5
 800c0e6:	4a35      	ldr	r2, [pc, #212]	@ (800c1bc <_printf_float+0x2e0>)
 800c0e8:	47b8      	blx	r7
 800c0ea:	3001      	adds	r0, #1
 800c0ec:	f43f af51 	beq.w	800bf92 <_printf_float+0xb6>
 800c0f0:	e9dd 380d 	ldrd	r3, r8, [sp, #52]	@ 0x34
 800c0f4:	4543      	cmp	r3, r8
 800c0f6:	db02      	blt.n	800c0fe <_printf_float+0x222>
 800c0f8:	6823      	ldr	r3, [r4, #0]
 800c0fa:	07d8      	lsls	r0, r3, #31
 800c0fc:	d50f      	bpl.n	800c11e <_printf_float+0x242>
 800c0fe:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800c102:	4631      	mov	r1, r6
 800c104:	4628      	mov	r0, r5
 800c106:	47b8      	blx	r7
 800c108:	3001      	adds	r0, #1
 800c10a:	f43f af42 	beq.w	800bf92 <_printf_float+0xb6>
 800c10e:	f04f 0900 	mov.w	r9, #0
 800c112:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 800c116:	f104 0a1a 	add.w	sl, r4, #26
 800c11a:	45c8      	cmp	r8, r9
 800c11c:	dc09      	bgt.n	800c132 <_printf_float+0x256>
 800c11e:	6823      	ldr	r3, [r4, #0]
 800c120:	079b      	lsls	r3, r3, #30
 800c122:	f100 8102 	bmi.w	800c32a <_printf_float+0x44e>
 800c126:	68e0      	ldr	r0, [r4, #12]
 800c128:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c12a:	4298      	cmp	r0, r3
 800c12c:	bfb8      	it	lt
 800c12e:	4618      	movlt	r0, r3
 800c130:	e731      	b.n	800bf96 <_printf_float+0xba>
 800c132:	2301      	movs	r3, #1
 800c134:	4652      	mov	r2, sl
 800c136:	4631      	mov	r1, r6
 800c138:	4628      	mov	r0, r5
 800c13a:	47b8      	blx	r7
 800c13c:	3001      	adds	r0, #1
 800c13e:	f43f af28 	beq.w	800bf92 <_printf_float+0xb6>
 800c142:	f109 0901 	add.w	r9, r9, #1
 800c146:	e7e8      	b.n	800c11a <_printf_float+0x23e>
 800c148:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800c14a:	2b00      	cmp	r3, #0
 800c14c:	dc38      	bgt.n	800c1c0 <_printf_float+0x2e4>
 800c14e:	2301      	movs	r3, #1
 800c150:	4631      	mov	r1, r6
 800c152:	4628      	mov	r0, r5
 800c154:	4a19      	ldr	r2, [pc, #100]	@ (800c1bc <_printf_float+0x2e0>)
 800c156:	47b8      	blx	r7
 800c158:	3001      	adds	r0, #1
 800c15a:	f43f af1a 	beq.w	800bf92 <_printf_float+0xb6>
 800c15e:	e9dd 390d 	ldrd	r3, r9, [sp, #52]	@ 0x34
 800c162:	ea59 0303 	orrs.w	r3, r9, r3
 800c166:	d102      	bne.n	800c16e <_printf_float+0x292>
 800c168:	6823      	ldr	r3, [r4, #0]
 800c16a:	07d9      	lsls	r1, r3, #31
 800c16c:	d5d7      	bpl.n	800c11e <_printf_float+0x242>
 800c16e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800c172:	4631      	mov	r1, r6
 800c174:	4628      	mov	r0, r5
 800c176:	47b8      	blx	r7
 800c178:	3001      	adds	r0, #1
 800c17a:	f43f af0a 	beq.w	800bf92 <_printf_float+0xb6>
 800c17e:	f04f 0a00 	mov.w	sl, #0
 800c182:	f104 0b1a 	add.w	fp, r4, #26
 800c186:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800c188:	425b      	negs	r3, r3
 800c18a:	4553      	cmp	r3, sl
 800c18c:	dc01      	bgt.n	800c192 <_printf_float+0x2b6>
 800c18e:	464b      	mov	r3, r9
 800c190:	e793      	b.n	800c0ba <_printf_float+0x1de>
 800c192:	2301      	movs	r3, #1
 800c194:	465a      	mov	r2, fp
 800c196:	4631      	mov	r1, r6
 800c198:	4628      	mov	r0, r5
 800c19a:	47b8      	blx	r7
 800c19c:	3001      	adds	r0, #1
 800c19e:	f43f aef8 	beq.w	800bf92 <_printf_float+0xb6>
 800c1a2:	f10a 0a01 	add.w	sl, sl, #1
 800c1a6:	e7ee      	b.n	800c186 <_printf_float+0x2aa>
 800c1a8:	7fefffff 	.word	0x7fefffff
 800c1ac:	0800f668 	.word	0x0800f668
 800c1b0:	0800f66c 	.word	0x0800f66c
 800c1b4:	0800f670 	.word	0x0800f670
 800c1b8:	0800f674 	.word	0x0800f674
 800c1bc:	0800f678 	.word	0x0800f678
 800c1c0:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800c1c2:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 800c1c6:	4553      	cmp	r3, sl
 800c1c8:	bfa8      	it	ge
 800c1ca:	4653      	movge	r3, sl
 800c1cc:	2b00      	cmp	r3, #0
 800c1ce:	4699      	mov	r9, r3
 800c1d0:	dc36      	bgt.n	800c240 <_printf_float+0x364>
 800c1d2:	f04f 0b00 	mov.w	fp, #0
 800c1d6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800c1da:	f104 021a 	add.w	r2, r4, #26
 800c1de:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800c1e0:	930a      	str	r3, [sp, #40]	@ 0x28
 800c1e2:	eba3 0309 	sub.w	r3, r3, r9
 800c1e6:	455b      	cmp	r3, fp
 800c1e8:	dc31      	bgt.n	800c24e <_printf_float+0x372>
 800c1ea:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800c1ec:	459a      	cmp	sl, r3
 800c1ee:	dc3a      	bgt.n	800c266 <_printf_float+0x38a>
 800c1f0:	6823      	ldr	r3, [r4, #0]
 800c1f2:	07da      	lsls	r2, r3, #31
 800c1f4:	d437      	bmi.n	800c266 <_printf_float+0x38a>
 800c1f6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800c1f8:	ebaa 0903 	sub.w	r9, sl, r3
 800c1fc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c1fe:	ebaa 0303 	sub.w	r3, sl, r3
 800c202:	4599      	cmp	r9, r3
 800c204:	bfa8      	it	ge
 800c206:	4699      	movge	r9, r3
 800c208:	f1b9 0f00 	cmp.w	r9, #0
 800c20c:	dc33      	bgt.n	800c276 <_printf_float+0x39a>
 800c20e:	f04f 0800 	mov.w	r8, #0
 800c212:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800c216:	f104 0b1a 	add.w	fp, r4, #26
 800c21a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800c21c:	ebaa 0303 	sub.w	r3, sl, r3
 800c220:	eba3 0309 	sub.w	r3, r3, r9
 800c224:	4543      	cmp	r3, r8
 800c226:	f77f af7a 	ble.w	800c11e <_printf_float+0x242>
 800c22a:	2301      	movs	r3, #1
 800c22c:	465a      	mov	r2, fp
 800c22e:	4631      	mov	r1, r6
 800c230:	4628      	mov	r0, r5
 800c232:	47b8      	blx	r7
 800c234:	3001      	adds	r0, #1
 800c236:	f43f aeac 	beq.w	800bf92 <_printf_float+0xb6>
 800c23a:	f108 0801 	add.w	r8, r8, #1
 800c23e:	e7ec      	b.n	800c21a <_printf_float+0x33e>
 800c240:	4642      	mov	r2, r8
 800c242:	4631      	mov	r1, r6
 800c244:	4628      	mov	r0, r5
 800c246:	47b8      	blx	r7
 800c248:	3001      	adds	r0, #1
 800c24a:	d1c2      	bne.n	800c1d2 <_printf_float+0x2f6>
 800c24c:	e6a1      	b.n	800bf92 <_printf_float+0xb6>
 800c24e:	2301      	movs	r3, #1
 800c250:	4631      	mov	r1, r6
 800c252:	4628      	mov	r0, r5
 800c254:	920a      	str	r2, [sp, #40]	@ 0x28
 800c256:	47b8      	blx	r7
 800c258:	3001      	adds	r0, #1
 800c25a:	f43f ae9a 	beq.w	800bf92 <_printf_float+0xb6>
 800c25e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800c260:	f10b 0b01 	add.w	fp, fp, #1
 800c264:	e7bb      	b.n	800c1de <_printf_float+0x302>
 800c266:	4631      	mov	r1, r6
 800c268:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800c26c:	4628      	mov	r0, r5
 800c26e:	47b8      	blx	r7
 800c270:	3001      	adds	r0, #1
 800c272:	d1c0      	bne.n	800c1f6 <_printf_float+0x31a>
 800c274:	e68d      	b.n	800bf92 <_printf_float+0xb6>
 800c276:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800c278:	464b      	mov	r3, r9
 800c27a:	4631      	mov	r1, r6
 800c27c:	4628      	mov	r0, r5
 800c27e:	4442      	add	r2, r8
 800c280:	47b8      	blx	r7
 800c282:	3001      	adds	r0, #1
 800c284:	d1c3      	bne.n	800c20e <_printf_float+0x332>
 800c286:	e684      	b.n	800bf92 <_printf_float+0xb6>
 800c288:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 800c28c:	f1ba 0f01 	cmp.w	sl, #1
 800c290:	dc01      	bgt.n	800c296 <_printf_float+0x3ba>
 800c292:	07db      	lsls	r3, r3, #31
 800c294:	d536      	bpl.n	800c304 <_printf_float+0x428>
 800c296:	2301      	movs	r3, #1
 800c298:	4642      	mov	r2, r8
 800c29a:	4631      	mov	r1, r6
 800c29c:	4628      	mov	r0, r5
 800c29e:	47b8      	blx	r7
 800c2a0:	3001      	adds	r0, #1
 800c2a2:	f43f ae76 	beq.w	800bf92 <_printf_float+0xb6>
 800c2a6:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800c2aa:	4631      	mov	r1, r6
 800c2ac:	4628      	mov	r0, r5
 800c2ae:	47b8      	blx	r7
 800c2b0:	3001      	adds	r0, #1
 800c2b2:	f43f ae6e 	beq.w	800bf92 <_printf_float+0xb6>
 800c2b6:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800c2ba:	2200      	movs	r2, #0
 800c2bc:	2300      	movs	r3, #0
 800c2be:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 800c2c2:	f7f4 fc25 	bl	8000b10 <__aeabi_dcmpeq>
 800c2c6:	b9c0      	cbnz	r0, 800c2fa <_printf_float+0x41e>
 800c2c8:	4653      	mov	r3, sl
 800c2ca:	f108 0201 	add.w	r2, r8, #1
 800c2ce:	4631      	mov	r1, r6
 800c2d0:	4628      	mov	r0, r5
 800c2d2:	47b8      	blx	r7
 800c2d4:	3001      	adds	r0, #1
 800c2d6:	d10c      	bne.n	800c2f2 <_printf_float+0x416>
 800c2d8:	e65b      	b.n	800bf92 <_printf_float+0xb6>
 800c2da:	2301      	movs	r3, #1
 800c2dc:	465a      	mov	r2, fp
 800c2de:	4631      	mov	r1, r6
 800c2e0:	4628      	mov	r0, r5
 800c2e2:	47b8      	blx	r7
 800c2e4:	3001      	adds	r0, #1
 800c2e6:	f43f ae54 	beq.w	800bf92 <_printf_float+0xb6>
 800c2ea:	f108 0801 	add.w	r8, r8, #1
 800c2ee:	45d0      	cmp	r8, sl
 800c2f0:	dbf3      	blt.n	800c2da <_printf_float+0x3fe>
 800c2f2:	464b      	mov	r3, r9
 800c2f4:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800c2f8:	e6e0      	b.n	800c0bc <_printf_float+0x1e0>
 800c2fa:	f04f 0800 	mov.w	r8, #0
 800c2fe:	f104 0b1a 	add.w	fp, r4, #26
 800c302:	e7f4      	b.n	800c2ee <_printf_float+0x412>
 800c304:	2301      	movs	r3, #1
 800c306:	4642      	mov	r2, r8
 800c308:	e7e1      	b.n	800c2ce <_printf_float+0x3f2>
 800c30a:	2301      	movs	r3, #1
 800c30c:	464a      	mov	r2, r9
 800c30e:	4631      	mov	r1, r6
 800c310:	4628      	mov	r0, r5
 800c312:	47b8      	blx	r7
 800c314:	3001      	adds	r0, #1
 800c316:	f43f ae3c 	beq.w	800bf92 <_printf_float+0xb6>
 800c31a:	f108 0801 	add.w	r8, r8, #1
 800c31e:	68e3      	ldr	r3, [r4, #12]
 800c320:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800c322:	1a5b      	subs	r3, r3, r1
 800c324:	4543      	cmp	r3, r8
 800c326:	dcf0      	bgt.n	800c30a <_printf_float+0x42e>
 800c328:	e6fd      	b.n	800c126 <_printf_float+0x24a>
 800c32a:	f04f 0800 	mov.w	r8, #0
 800c32e:	f104 0919 	add.w	r9, r4, #25
 800c332:	e7f4      	b.n	800c31e <_printf_float+0x442>

0800c334 <_printf_common>:
 800c334:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c338:	4616      	mov	r6, r2
 800c33a:	4698      	mov	r8, r3
 800c33c:	688a      	ldr	r2, [r1, #8]
 800c33e:	690b      	ldr	r3, [r1, #16]
 800c340:	4607      	mov	r7, r0
 800c342:	4293      	cmp	r3, r2
 800c344:	bfb8      	it	lt
 800c346:	4613      	movlt	r3, r2
 800c348:	6033      	str	r3, [r6, #0]
 800c34a:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800c34e:	460c      	mov	r4, r1
 800c350:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800c354:	b10a      	cbz	r2, 800c35a <_printf_common+0x26>
 800c356:	3301      	adds	r3, #1
 800c358:	6033      	str	r3, [r6, #0]
 800c35a:	6823      	ldr	r3, [r4, #0]
 800c35c:	0699      	lsls	r1, r3, #26
 800c35e:	bf42      	ittt	mi
 800c360:	6833      	ldrmi	r3, [r6, #0]
 800c362:	3302      	addmi	r3, #2
 800c364:	6033      	strmi	r3, [r6, #0]
 800c366:	6825      	ldr	r5, [r4, #0]
 800c368:	f015 0506 	ands.w	r5, r5, #6
 800c36c:	d106      	bne.n	800c37c <_printf_common+0x48>
 800c36e:	f104 0a19 	add.w	sl, r4, #25
 800c372:	68e3      	ldr	r3, [r4, #12]
 800c374:	6832      	ldr	r2, [r6, #0]
 800c376:	1a9b      	subs	r3, r3, r2
 800c378:	42ab      	cmp	r3, r5
 800c37a:	dc2b      	bgt.n	800c3d4 <_printf_common+0xa0>
 800c37c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800c380:	6822      	ldr	r2, [r4, #0]
 800c382:	3b00      	subs	r3, #0
 800c384:	bf18      	it	ne
 800c386:	2301      	movne	r3, #1
 800c388:	0692      	lsls	r2, r2, #26
 800c38a:	d430      	bmi.n	800c3ee <_printf_common+0xba>
 800c38c:	4641      	mov	r1, r8
 800c38e:	4638      	mov	r0, r7
 800c390:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800c394:	47c8      	blx	r9
 800c396:	3001      	adds	r0, #1
 800c398:	d023      	beq.n	800c3e2 <_printf_common+0xae>
 800c39a:	6823      	ldr	r3, [r4, #0]
 800c39c:	6922      	ldr	r2, [r4, #16]
 800c39e:	f003 0306 	and.w	r3, r3, #6
 800c3a2:	2b04      	cmp	r3, #4
 800c3a4:	bf14      	ite	ne
 800c3a6:	2500      	movne	r5, #0
 800c3a8:	6833      	ldreq	r3, [r6, #0]
 800c3aa:	f04f 0600 	mov.w	r6, #0
 800c3ae:	bf08      	it	eq
 800c3b0:	68e5      	ldreq	r5, [r4, #12]
 800c3b2:	f104 041a 	add.w	r4, r4, #26
 800c3b6:	bf08      	it	eq
 800c3b8:	1aed      	subeq	r5, r5, r3
 800c3ba:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800c3be:	bf08      	it	eq
 800c3c0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800c3c4:	4293      	cmp	r3, r2
 800c3c6:	bfc4      	itt	gt
 800c3c8:	1a9b      	subgt	r3, r3, r2
 800c3ca:	18ed      	addgt	r5, r5, r3
 800c3cc:	42b5      	cmp	r5, r6
 800c3ce:	d11a      	bne.n	800c406 <_printf_common+0xd2>
 800c3d0:	2000      	movs	r0, #0
 800c3d2:	e008      	b.n	800c3e6 <_printf_common+0xb2>
 800c3d4:	2301      	movs	r3, #1
 800c3d6:	4652      	mov	r2, sl
 800c3d8:	4641      	mov	r1, r8
 800c3da:	4638      	mov	r0, r7
 800c3dc:	47c8      	blx	r9
 800c3de:	3001      	adds	r0, #1
 800c3e0:	d103      	bne.n	800c3ea <_printf_common+0xb6>
 800c3e2:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800c3e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c3ea:	3501      	adds	r5, #1
 800c3ec:	e7c1      	b.n	800c372 <_printf_common+0x3e>
 800c3ee:	2030      	movs	r0, #48	@ 0x30
 800c3f0:	18e1      	adds	r1, r4, r3
 800c3f2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800c3f6:	1c5a      	adds	r2, r3, #1
 800c3f8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800c3fc:	4422      	add	r2, r4
 800c3fe:	3302      	adds	r3, #2
 800c400:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800c404:	e7c2      	b.n	800c38c <_printf_common+0x58>
 800c406:	2301      	movs	r3, #1
 800c408:	4622      	mov	r2, r4
 800c40a:	4641      	mov	r1, r8
 800c40c:	4638      	mov	r0, r7
 800c40e:	47c8      	blx	r9
 800c410:	3001      	adds	r0, #1
 800c412:	d0e6      	beq.n	800c3e2 <_printf_common+0xae>
 800c414:	3601      	adds	r6, #1
 800c416:	e7d9      	b.n	800c3cc <_printf_common+0x98>

0800c418 <_printf_i>:
 800c418:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c41c:	7e0f      	ldrb	r7, [r1, #24]
 800c41e:	4691      	mov	r9, r2
 800c420:	2f78      	cmp	r7, #120	@ 0x78
 800c422:	4680      	mov	r8, r0
 800c424:	460c      	mov	r4, r1
 800c426:	469a      	mov	sl, r3
 800c428:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800c42a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800c42e:	d807      	bhi.n	800c440 <_printf_i+0x28>
 800c430:	2f62      	cmp	r7, #98	@ 0x62
 800c432:	d80a      	bhi.n	800c44a <_printf_i+0x32>
 800c434:	2f00      	cmp	r7, #0
 800c436:	f000 80d3 	beq.w	800c5e0 <_printf_i+0x1c8>
 800c43a:	2f58      	cmp	r7, #88	@ 0x58
 800c43c:	f000 80ba 	beq.w	800c5b4 <_printf_i+0x19c>
 800c440:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800c444:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800c448:	e03a      	b.n	800c4c0 <_printf_i+0xa8>
 800c44a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800c44e:	2b15      	cmp	r3, #21
 800c450:	d8f6      	bhi.n	800c440 <_printf_i+0x28>
 800c452:	a101      	add	r1, pc, #4	@ (adr r1, 800c458 <_printf_i+0x40>)
 800c454:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800c458:	0800c4b1 	.word	0x0800c4b1
 800c45c:	0800c4c5 	.word	0x0800c4c5
 800c460:	0800c441 	.word	0x0800c441
 800c464:	0800c441 	.word	0x0800c441
 800c468:	0800c441 	.word	0x0800c441
 800c46c:	0800c441 	.word	0x0800c441
 800c470:	0800c4c5 	.word	0x0800c4c5
 800c474:	0800c441 	.word	0x0800c441
 800c478:	0800c441 	.word	0x0800c441
 800c47c:	0800c441 	.word	0x0800c441
 800c480:	0800c441 	.word	0x0800c441
 800c484:	0800c5c7 	.word	0x0800c5c7
 800c488:	0800c4ef 	.word	0x0800c4ef
 800c48c:	0800c581 	.word	0x0800c581
 800c490:	0800c441 	.word	0x0800c441
 800c494:	0800c441 	.word	0x0800c441
 800c498:	0800c5e9 	.word	0x0800c5e9
 800c49c:	0800c441 	.word	0x0800c441
 800c4a0:	0800c4ef 	.word	0x0800c4ef
 800c4a4:	0800c441 	.word	0x0800c441
 800c4a8:	0800c441 	.word	0x0800c441
 800c4ac:	0800c589 	.word	0x0800c589
 800c4b0:	6833      	ldr	r3, [r6, #0]
 800c4b2:	1d1a      	adds	r2, r3, #4
 800c4b4:	681b      	ldr	r3, [r3, #0]
 800c4b6:	6032      	str	r2, [r6, #0]
 800c4b8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800c4bc:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800c4c0:	2301      	movs	r3, #1
 800c4c2:	e09e      	b.n	800c602 <_printf_i+0x1ea>
 800c4c4:	6833      	ldr	r3, [r6, #0]
 800c4c6:	6820      	ldr	r0, [r4, #0]
 800c4c8:	1d19      	adds	r1, r3, #4
 800c4ca:	6031      	str	r1, [r6, #0]
 800c4cc:	0606      	lsls	r6, r0, #24
 800c4ce:	d501      	bpl.n	800c4d4 <_printf_i+0xbc>
 800c4d0:	681d      	ldr	r5, [r3, #0]
 800c4d2:	e003      	b.n	800c4dc <_printf_i+0xc4>
 800c4d4:	0645      	lsls	r5, r0, #25
 800c4d6:	d5fb      	bpl.n	800c4d0 <_printf_i+0xb8>
 800c4d8:	f9b3 5000 	ldrsh.w	r5, [r3]
 800c4dc:	2d00      	cmp	r5, #0
 800c4de:	da03      	bge.n	800c4e8 <_printf_i+0xd0>
 800c4e0:	232d      	movs	r3, #45	@ 0x2d
 800c4e2:	426d      	negs	r5, r5
 800c4e4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800c4e8:	230a      	movs	r3, #10
 800c4ea:	4859      	ldr	r0, [pc, #356]	@ (800c650 <_printf_i+0x238>)
 800c4ec:	e011      	b.n	800c512 <_printf_i+0xfa>
 800c4ee:	6821      	ldr	r1, [r4, #0]
 800c4f0:	6833      	ldr	r3, [r6, #0]
 800c4f2:	0608      	lsls	r0, r1, #24
 800c4f4:	f853 5b04 	ldr.w	r5, [r3], #4
 800c4f8:	d402      	bmi.n	800c500 <_printf_i+0xe8>
 800c4fa:	0649      	lsls	r1, r1, #25
 800c4fc:	bf48      	it	mi
 800c4fe:	b2ad      	uxthmi	r5, r5
 800c500:	2f6f      	cmp	r7, #111	@ 0x6f
 800c502:	6033      	str	r3, [r6, #0]
 800c504:	bf14      	ite	ne
 800c506:	230a      	movne	r3, #10
 800c508:	2308      	moveq	r3, #8
 800c50a:	4851      	ldr	r0, [pc, #324]	@ (800c650 <_printf_i+0x238>)
 800c50c:	2100      	movs	r1, #0
 800c50e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800c512:	6866      	ldr	r6, [r4, #4]
 800c514:	2e00      	cmp	r6, #0
 800c516:	bfa8      	it	ge
 800c518:	6821      	ldrge	r1, [r4, #0]
 800c51a:	60a6      	str	r6, [r4, #8]
 800c51c:	bfa4      	itt	ge
 800c51e:	f021 0104 	bicge.w	r1, r1, #4
 800c522:	6021      	strge	r1, [r4, #0]
 800c524:	b90d      	cbnz	r5, 800c52a <_printf_i+0x112>
 800c526:	2e00      	cmp	r6, #0
 800c528:	d04b      	beq.n	800c5c2 <_printf_i+0x1aa>
 800c52a:	4616      	mov	r6, r2
 800c52c:	fbb5 f1f3 	udiv	r1, r5, r3
 800c530:	fb03 5711 	mls	r7, r3, r1, r5
 800c534:	5dc7      	ldrb	r7, [r0, r7]
 800c536:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800c53a:	462f      	mov	r7, r5
 800c53c:	42bb      	cmp	r3, r7
 800c53e:	460d      	mov	r5, r1
 800c540:	d9f4      	bls.n	800c52c <_printf_i+0x114>
 800c542:	2b08      	cmp	r3, #8
 800c544:	d10b      	bne.n	800c55e <_printf_i+0x146>
 800c546:	6823      	ldr	r3, [r4, #0]
 800c548:	07df      	lsls	r7, r3, #31
 800c54a:	d508      	bpl.n	800c55e <_printf_i+0x146>
 800c54c:	6923      	ldr	r3, [r4, #16]
 800c54e:	6861      	ldr	r1, [r4, #4]
 800c550:	4299      	cmp	r1, r3
 800c552:	bfde      	ittt	le
 800c554:	2330      	movle	r3, #48	@ 0x30
 800c556:	f806 3c01 	strble.w	r3, [r6, #-1]
 800c55a:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 800c55e:	1b92      	subs	r2, r2, r6
 800c560:	6122      	str	r2, [r4, #16]
 800c562:	464b      	mov	r3, r9
 800c564:	4621      	mov	r1, r4
 800c566:	4640      	mov	r0, r8
 800c568:	f8cd a000 	str.w	sl, [sp]
 800c56c:	aa03      	add	r2, sp, #12
 800c56e:	f7ff fee1 	bl	800c334 <_printf_common>
 800c572:	3001      	adds	r0, #1
 800c574:	d14a      	bne.n	800c60c <_printf_i+0x1f4>
 800c576:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800c57a:	b004      	add	sp, #16
 800c57c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c580:	6823      	ldr	r3, [r4, #0]
 800c582:	f043 0320 	orr.w	r3, r3, #32
 800c586:	6023      	str	r3, [r4, #0]
 800c588:	2778      	movs	r7, #120	@ 0x78
 800c58a:	4832      	ldr	r0, [pc, #200]	@ (800c654 <_printf_i+0x23c>)
 800c58c:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800c590:	6823      	ldr	r3, [r4, #0]
 800c592:	6831      	ldr	r1, [r6, #0]
 800c594:	061f      	lsls	r7, r3, #24
 800c596:	f851 5b04 	ldr.w	r5, [r1], #4
 800c59a:	d402      	bmi.n	800c5a2 <_printf_i+0x18a>
 800c59c:	065f      	lsls	r7, r3, #25
 800c59e:	bf48      	it	mi
 800c5a0:	b2ad      	uxthmi	r5, r5
 800c5a2:	6031      	str	r1, [r6, #0]
 800c5a4:	07d9      	lsls	r1, r3, #31
 800c5a6:	bf44      	itt	mi
 800c5a8:	f043 0320 	orrmi.w	r3, r3, #32
 800c5ac:	6023      	strmi	r3, [r4, #0]
 800c5ae:	b11d      	cbz	r5, 800c5b8 <_printf_i+0x1a0>
 800c5b0:	2310      	movs	r3, #16
 800c5b2:	e7ab      	b.n	800c50c <_printf_i+0xf4>
 800c5b4:	4826      	ldr	r0, [pc, #152]	@ (800c650 <_printf_i+0x238>)
 800c5b6:	e7e9      	b.n	800c58c <_printf_i+0x174>
 800c5b8:	6823      	ldr	r3, [r4, #0]
 800c5ba:	f023 0320 	bic.w	r3, r3, #32
 800c5be:	6023      	str	r3, [r4, #0]
 800c5c0:	e7f6      	b.n	800c5b0 <_printf_i+0x198>
 800c5c2:	4616      	mov	r6, r2
 800c5c4:	e7bd      	b.n	800c542 <_printf_i+0x12a>
 800c5c6:	6833      	ldr	r3, [r6, #0]
 800c5c8:	6825      	ldr	r5, [r4, #0]
 800c5ca:	1d18      	adds	r0, r3, #4
 800c5cc:	6961      	ldr	r1, [r4, #20]
 800c5ce:	6030      	str	r0, [r6, #0]
 800c5d0:	062e      	lsls	r6, r5, #24
 800c5d2:	681b      	ldr	r3, [r3, #0]
 800c5d4:	d501      	bpl.n	800c5da <_printf_i+0x1c2>
 800c5d6:	6019      	str	r1, [r3, #0]
 800c5d8:	e002      	b.n	800c5e0 <_printf_i+0x1c8>
 800c5da:	0668      	lsls	r0, r5, #25
 800c5dc:	d5fb      	bpl.n	800c5d6 <_printf_i+0x1be>
 800c5de:	8019      	strh	r1, [r3, #0]
 800c5e0:	2300      	movs	r3, #0
 800c5e2:	4616      	mov	r6, r2
 800c5e4:	6123      	str	r3, [r4, #16]
 800c5e6:	e7bc      	b.n	800c562 <_printf_i+0x14a>
 800c5e8:	6833      	ldr	r3, [r6, #0]
 800c5ea:	2100      	movs	r1, #0
 800c5ec:	1d1a      	adds	r2, r3, #4
 800c5ee:	6032      	str	r2, [r6, #0]
 800c5f0:	681e      	ldr	r6, [r3, #0]
 800c5f2:	6862      	ldr	r2, [r4, #4]
 800c5f4:	4630      	mov	r0, r6
 800c5f6:	f000 f9e6 	bl	800c9c6 <memchr>
 800c5fa:	b108      	cbz	r0, 800c600 <_printf_i+0x1e8>
 800c5fc:	1b80      	subs	r0, r0, r6
 800c5fe:	6060      	str	r0, [r4, #4]
 800c600:	6863      	ldr	r3, [r4, #4]
 800c602:	6123      	str	r3, [r4, #16]
 800c604:	2300      	movs	r3, #0
 800c606:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800c60a:	e7aa      	b.n	800c562 <_printf_i+0x14a>
 800c60c:	4632      	mov	r2, r6
 800c60e:	4649      	mov	r1, r9
 800c610:	4640      	mov	r0, r8
 800c612:	6923      	ldr	r3, [r4, #16]
 800c614:	47d0      	blx	sl
 800c616:	3001      	adds	r0, #1
 800c618:	d0ad      	beq.n	800c576 <_printf_i+0x15e>
 800c61a:	6823      	ldr	r3, [r4, #0]
 800c61c:	079b      	lsls	r3, r3, #30
 800c61e:	d413      	bmi.n	800c648 <_printf_i+0x230>
 800c620:	68e0      	ldr	r0, [r4, #12]
 800c622:	9b03      	ldr	r3, [sp, #12]
 800c624:	4298      	cmp	r0, r3
 800c626:	bfb8      	it	lt
 800c628:	4618      	movlt	r0, r3
 800c62a:	e7a6      	b.n	800c57a <_printf_i+0x162>
 800c62c:	2301      	movs	r3, #1
 800c62e:	4632      	mov	r2, r6
 800c630:	4649      	mov	r1, r9
 800c632:	4640      	mov	r0, r8
 800c634:	47d0      	blx	sl
 800c636:	3001      	adds	r0, #1
 800c638:	d09d      	beq.n	800c576 <_printf_i+0x15e>
 800c63a:	3501      	adds	r5, #1
 800c63c:	68e3      	ldr	r3, [r4, #12]
 800c63e:	9903      	ldr	r1, [sp, #12]
 800c640:	1a5b      	subs	r3, r3, r1
 800c642:	42ab      	cmp	r3, r5
 800c644:	dcf2      	bgt.n	800c62c <_printf_i+0x214>
 800c646:	e7eb      	b.n	800c620 <_printf_i+0x208>
 800c648:	2500      	movs	r5, #0
 800c64a:	f104 0619 	add.w	r6, r4, #25
 800c64e:	e7f5      	b.n	800c63c <_printf_i+0x224>
 800c650:	0800f67a 	.word	0x0800f67a
 800c654:	0800f68b 	.word	0x0800f68b

0800c658 <std>:
 800c658:	2300      	movs	r3, #0
 800c65a:	b510      	push	{r4, lr}
 800c65c:	4604      	mov	r4, r0
 800c65e:	e9c0 3300 	strd	r3, r3, [r0]
 800c662:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800c666:	6083      	str	r3, [r0, #8]
 800c668:	8181      	strh	r1, [r0, #12]
 800c66a:	6643      	str	r3, [r0, #100]	@ 0x64
 800c66c:	81c2      	strh	r2, [r0, #14]
 800c66e:	6183      	str	r3, [r0, #24]
 800c670:	4619      	mov	r1, r3
 800c672:	2208      	movs	r2, #8
 800c674:	305c      	adds	r0, #92	@ 0x5c
 800c676:	f000 f914 	bl	800c8a2 <memset>
 800c67a:	4b0d      	ldr	r3, [pc, #52]	@ (800c6b0 <std+0x58>)
 800c67c:	6224      	str	r4, [r4, #32]
 800c67e:	6263      	str	r3, [r4, #36]	@ 0x24
 800c680:	4b0c      	ldr	r3, [pc, #48]	@ (800c6b4 <std+0x5c>)
 800c682:	62a3      	str	r3, [r4, #40]	@ 0x28
 800c684:	4b0c      	ldr	r3, [pc, #48]	@ (800c6b8 <std+0x60>)
 800c686:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800c688:	4b0c      	ldr	r3, [pc, #48]	@ (800c6bc <std+0x64>)
 800c68a:	6323      	str	r3, [r4, #48]	@ 0x30
 800c68c:	4b0c      	ldr	r3, [pc, #48]	@ (800c6c0 <std+0x68>)
 800c68e:	429c      	cmp	r4, r3
 800c690:	d006      	beq.n	800c6a0 <std+0x48>
 800c692:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800c696:	4294      	cmp	r4, r2
 800c698:	d002      	beq.n	800c6a0 <std+0x48>
 800c69a:	33d0      	adds	r3, #208	@ 0xd0
 800c69c:	429c      	cmp	r4, r3
 800c69e:	d105      	bne.n	800c6ac <std+0x54>
 800c6a0:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800c6a4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c6a8:	f000 b98a 	b.w	800c9c0 <__retarget_lock_init_recursive>
 800c6ac:	bd10      	pop	{r4, pc}
 800c6ae:	bf00      	nop
 800c6b0:	0800c81d 	.word	0x0800c81d
 800c6b4:	0800c83f 	.word	0x0800c83f
 800c6b8:	0800c877 	.word	0x0800c877
 800c6bc:	0800c89b 	.word	0x0800c89b
 800c6c0:	200015bc 	.word	0x200015bc

0800c6c4 <stdio_exit_handler>:
 800c6c4:	4a02      	ldr	r2, [pc, #8]	@ (800c6d0 <stdio_exit_handler+0xc>)
 800c6c6:	4903      	ldr	r1, [pc, #12]	@ (800c6d4 <stdio_exit_handler+0x10>)
 800c6c8:	4803      	ldr	r0, [pc, #12]	@ (800c6d8 <stdio_exit_handler+0x14>)
 800c6ca:	f000 b869 	b.w	800c7a0 <_fwalk_sglue>
 800c6ce:	bf00      	nop
 800c6d0:	20000190 	.word	0x20000190
 800c6d4:	0800ed8d 	.word	0x0800ed8d
 800c6d8:	2000030c 	.word	0x2000030c

0800c6dc <cleanup_stdio>:
 800c6dc:	6841      	ldr	r1, [r0, #4]
 800c6de:	4b0c      	ldr	r3, [pc, #48]	@ (800c710 <cleanup_stdio+0x34>)
 800c6e0:	b510      	push	{r4, lr}
 800c6e2:	4299      	cmp	r1, r3
 800c6e4:	4604      	mov	r4, r0
 800c6e6:	d001      	beq.n	800c6ec <cleanup_stdio+0x10>
 800c6e8:	f002 fb50 	bl	800ed8c <_fflush_r>
 800c6ec:	68a1      	ldr	r1, [r4, #8]
 800c6ee:	4b09      	ldr	r3, [pc, #36]	@ (800c714 <cleanup_stdio+0x38>)
 800c6f0:	4299      	cmp	r1, r3
 800c6f2:	d002      	beq.n	800c6fa <cleanup_stdio+0x1e>
 800c6f4:	4620      	mov	r0, r4
 800c6f6:	f002 fb49 	bl	800ed8c <_fflush_r>
 800c6fa:	68e1      	ldr	r1, [r4, #12]
 800c6fc:	4b06      	ldr	r3, [pc, #24]	@ (800c718 <cleanup_stdio+0x3c>)
 800c6fe:	4299      	cmp	r1, r3
 800c700:	d004      	beq.n	800c70c <cleanup_stdio+0x30>
 800c702:	4620      	mov	r0, r4
 800c704:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c708:	f002 bb40 	b.w	800ed8c <_fflush_r>
 800c70c:	bd10      	pop	{r4, pc}
 800c70e:	bf00      	nop
 800c710:	200015bc 	.word	0x200015bc
 800c714:	20001624 	.word	0x20001624
 800c718:	2000168c 	.word	0x2000168c

0800c71c <global_stdio_init.part.0>:
 800c71c:	b510      	push	{r4, lr}
 800c71e:	4b0b      	ldr	r3, [pc, #44]	@ (800c74c <global_stdio_init.part.0+0x30>)
 800c720:	4c0b      	ldr	r4, [pc, #44]	@ (800c750 <global_stdio_init.part.0+0x34>)
 800c722:	4a0c      	ldr	r2, [pc, #48]	@ (800c754 <global_stdio_init.part.0+0x38>)
 800c724:	4620      	mov	r0, r4
 800c726:	601a      	str	r2, [r3, #0]
 800c728:	2104      	movs	r1, #4
 800c72a:	2200      	movs	r2, #0
 800c72c:	f7ff ff94 	bl	800c658 <std>
 800c730:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800c734:	2201      	movs	r2, #1
 800c736:	2109      	movs	r1, #9
 800c738:	f7ff ff8e 	bl	800c658 <std>
 800c73c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800c740:	2202      	movs	r2, #2
 800c742:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c746:	2112      	movs	r1, #18
 800c748:	f7ff bf86 	b.w	800c658 <std>
 800c74c:	200016f4 	.word	0x200016f4
 800c750:	200015bc 	.word	0x200015bc
 800c754:	0800c6c5 	.word	0x0800c6c5

0800c758 <__sfp_lock_acquire>:
 800c758:	4801      	ldr	r0, [pc, #4]	@ (800c760 <__sfp_lock_acquire+0x8>)
 800c75a:	f000 b932 	b.w	800c9c2 <__retarget_lock_acquire_recursive>
 800c75e:	bf00      	nop
 800c760:	200016fd 	.word	0x200016fd

0800c764 <__sfp_lock_release>:
 800c764:	4801      	ldr	r0, [pc, #4]	@ (800c76c <__sfp_lock_release+0x8>)
 800c766:	f000 b92d 	b.w	800c9c4 <__retarget_lock_release_recursive>
 800c76a:	bf00      	nop
 800c76c:	200016fd 	.word	0x200016fd

0800c770 <__sinit>:
 800c770:	b510      	push	{r4, lr}
 800c772:	4604      	mov	r4, r0
 800c774:	f7ff fff0 	bl	800c758 <__sfp_lock_acquire>
 800c778:	6a23      	ldr	r3, [r4, #32]
 800c77a:	b11b      	cbz	r3, 800c784 <__sinit+0x14>
 800c77c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c780:	f7ff bff0 	b.w	800c764 <__sfp_lock_release>
 800c784:	4b04      	ldr	r3, [pc, #16]	@ (800c798 <__sinit+0x28>)
 800c786:	6223      	str	r3, [r4, #32]
 800c788:	4b04      	ldr	r3, [pc, #16]	@ (800c79c <__sinit+0x2c>)
 800c78a:	681b      	ldr	r3, [r3, #0]
 800c78c:	2b00      	cmp	r3, #0
 800c78e:	d1f5      	bne.n	800c77c <__sinit+0xc>
 800c790:	f7ff ffc4 	bl	800c71c <global_stdio_init.part.0>
 800c794:	e7f2      	b.n	800c77c <__sinit+0xc>
 800c796:	bf00      	nop
 800c798:	0800c6dd 	.word	0x0800c6dd
 800c79c:	200016f4 	.word	0x200016f4

0800c7a0 <_fwalk_sglue>:
 800c7a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c7a4:	4607      	mov	r7, r0
 800c7a6:	4688      	mov	r8, r1
 800c7a8:	4614      	mov	r4, r2
 800c7aa:	2600      	movs	r6, #0
 800c7ac:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800c7b0:	f1b9 0901 	subs.w	r9, r9, #1
 800c7b4:	d505      	bpl.n	800c7c2 <_fwalk_sglue+0x22>
 800c7b6:	6824      	ldr	r4, [r4, #0]
 800c7b8:	2c00      	cmp	r4, #0
 800c7ba:	d1f7      	bne.n	800c7ac <_fwalk_sglue+0xc>
 800c7bc:	4630      	mov	r0, r6
 800c7be:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c7c2:	89ab      	ldrh	r3, [r5, #12]
 800c7c4:	2b01      	cmp	r3, #1
 800c7c6:	d907      	bls.n	800c7d8 <_fwalk_sglue+0x38>
 800c7c8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800c7cc:	3301      	adds	r3, #1
 800c7ce:	d003      	beq.n	800c7d8 <_fwalk_sglue+0x38>
 800c7d0:	4629      	mov	r1, r5
 800c7d2:	4638      	mov	r0, r7
 800c7d4:	47c0      	blx	r8
 800c7d6:	4306      	orrs	r6, r0
 800c7d8:	3568      	adds	r5, #104	@ 0x68
 800c7da:	e7e9      	b.n	800c7b0 <_fwalk_sglue+0x10>

0800c7dc <siprintf>:
 800c7dc:	b40e      	push	{r1, r2, r3}
 800c7de:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800c7e2:	b500      	push	{lr}
 800c7e4:	b09c      	sub	sp, #112	@ 0x70
 800c7e6:	ab1d      	add	r3, sp, #116	@ 0x74
 800c7e8:	9002      	str	r0, [sp, #8]
 800c7ea:	9006      	str	r0, [sp, #24]
 800c7ec:	9107      	str	r1, [sp, #28]
 800c7ee:	9104      	str	r1, [sp, #16]
 800c7f0:	4808      	ldr	r0, [pc, #32]	@ (800c814 <siprintf+0x38>)
 800c7f2:	4909      	ldr	r1, [pc, #36]	@ (800c818 <siprintf+0x3c>)
 800c7f4:	f853 2b04 	ldr.w	r2, [r3], #4
 800c7f8:	9105      	str	r1, [sp, #20]
 800c7fa:	6800      	ldr	r0, [r0, #0]
 800c7fc:	a902      	add	r1, sp, #8
 800c7fe:	9301      	str	r3, [sp, #4]
 800c800:	f002 f948 	bl	800ea94 <_svfiprintf_r>
 800c804:	2200      	movs	r2, #0
 800c806:	9b02      	ldr	r3, [sp, #8]
 800c808:	701a      	strb	r2, [r3, #0]
 800c80a:	b01c      	add	sp, #112	@ 0x70
 800c80c:	f85d eb04 	ldr.w	lr, [sp], #4
 800c810:	b003      	add	sp, #12
 800c812:	4770      	bx	lr
 800c814:	20000308 	.word	0x20000308
 800c818:	ffff0208 	.word	0xffff0208

0800c81c <__sread>:
 800c81c:	b510      	push	{r4, lr}
 800c81e:	460c      	mov	r4, r1
 800c820:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c824:	f000 f87e 	bl	800c924 <_read_r>
 800c828:	2800      	cmp	r0, #0
 800c82a:	bfab      	itete	ge
 800c82c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800c82e:	89a3      	ldrhlt	r3, [r4, #12]
 800c830:	181b      	addge	r3, r3, r0
 800c832:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800c836:	bfac      	ite	ge
 800c838:	6563      	strge	r3, [r4, #84]	@ 0x54
 800c83a:	81a3      	strhlt	r3, [r4, #12]
 800c83c:	bd10      	pop	{r4, pc}

0800c83e <__swrite>:
 800c83e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c842:	461f      	mov	r7, r3
 800c844:	898b      	ldrh	r3, [r1, #12]
 800c846:	4605      	mov	r5, r0
 800c848:	05db      	lsls	r3, r3, #23
 800c84a:	460c      	mov	r4, r1
 800c84c:	4616      	mov	r6, r2
 800c84e:	d505      	bpl.n	800c85c <__swrite+0x1e>
 800c850:	2302      	movs	r3, #2
 800c852:	2200      	movs	r2, #0
 800c854:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c858:	f000 f852 	bl	800c900 <_lseek_r>
 800c85c:	89a3      	ldrh	r3, [r4, #12]
 800c85e:	4632      	mov	r2, r6
 800c860:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800c864:	81a3      	strh	r3, [r4, #12]
 800c866:	4628      	mov	r0, r5
 800c868:	463b      	mov	r3, r7
 800c86a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c86e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c872:	f000 b869 	b.w	800c948 <_write_r>

0800c876 <__sseek>:
 800c876:	b510      	push	{r4, lr}
 800c878:	460c      	mov	r4, r1
 800c87a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c87e:	f000 f83f 	bl	800c900 <_lseek_r>
 800c882:	1c43      	adds	r3, r0, #1
 800c884:	89a3      	ldrh	r3, [r4, #12]
 800c886:	bf15      	itete	ne
 800c888:	6560      	strne	r0, [r4, #84]	@ 0x54
 800c88a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800c88e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800c892:	81a3      	strheq	r3, [r4, #12]
 800c894:	bf18      	it	ne
 800c896:	81a3      	strhne	r3, [r4, #12]
 800c898:	bd10      	pop	{r4, pc}

0800c89a <__sclose>:
 800c89a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c89e:	f000 b81f 	b.w	800c8e0 <_close_r>

0800c8a2 <memset>:
 800c8a2:	4603      	mov	r3, r0
 800c8a4:	4402      	add	r2, r0
 800c8a6:	4293      	cmp	r3, r2
 800c8a8:	d100      	bne.n	800c8ac <memset+0xa>
 800c8aa:	4770      	bx	lr
 800c8ac:	f803 1b01 	strb.w	r1, [r3], #1
 800c8b0:	e7f9      	b.n	800c8a6 <memset+0x4>

0800c8b2 <strncmp>:
 800c8b2:	b510      	push	{r4, lr}
 800c8b4:	b16a      	cbz	r2, 800c8d2 <strncmp+0x20>
 800c8b6:	3901      	subs	r1, #1
 800c8b8:	1884      	adds	r4, r0, r2
 800c8ba:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c8be:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800c8c2:	429a      	cmp	r2, r3
 800c8c4:	d103      	bne.n	800c8ce <strncmp+0x1c>
 800c8c6:	42a0      	cmp	r0, r4
 800c8c8:	d001      	beq.n	800c8ce <strncmp+0x1c>
 800c8ca:	2a00      	cmp	r2, #0
 800c8cc:	d1f5      	bne.n	800c8ba <strncmp+0x8>
 800c8ce:	1ad0      	subs	r0, r2, r3
 800c8d0:	bd10      	pop	{r4, pc}
 800c8d2:	4610      	mov	r0, r2
 800c8d4:	e7fc      	b.n	800c8d0 <strncmp+0x1e>
	...

0800c8d8 <_localeconv_r>:
 800c8d8:	4800      	ldr	r0, [pc, #0]	@ (800c8dc <_localeconv_r+0x4>)
 800c8da:	4770      	bx	lr
 800c8dc:	2000028c 	.word	0x2000028c

0800c8e0 <_close_r>:
 800c8e0:	b538      	push	{r3, r4, r5, lr}
 800c8e2:	2300      	movs	r3, #0
 800c8e4:	4d05      	ldr	r5, [pc, #20]	@ (800c8fc <_close_r+0x1c>)
 800c8e6:	4604      	mov	r4, r0
 800c8e8:	4608      	mov	r0, r1
 800c8ea:	602b      	str	r3, [r5, #0]
 800c8ec:	f7f5 fb9b 	bl	8002026 <_close>
 800c8f0:	1c43      	adds	r3, r0, #1
 800c8f2:	d102      	bne.n	800c8fa <_close_r+0x1a>
 800c8f4:	682b      	ldr	r3, [r5, #0]
 800c8f6:	b103      	cbz	r3, 800c8fa <_close_r+0x1a>
 800c8f8:	6023      	str	r3, [r4, #0]
 800c8fa:	bd38      	pop	{r3, r4, r5, pc}
 800c8fc:	200016f8 	.word	0x200016f8

0800c900 <_lseek_r>:
 800c900:	b538      	push	{r3, r4, r5, lr}
 800c902:	4604      	mov	r4, r0
 800c904:	4608      	mov	r0, r1
 800c906:	4611      	mov	r1, r2
 800c908:	2200      	movs	r2, #0
 800c90a:	4d05      	ldr	r5, [pc, #20]	@ (800c920 <_lseek_r+0x20>)
 800c90c:	602a      	str	r2, [r5, #0]
 800c90e:	461a      	mov	r2, r3
 800c910:	f7f5 fbad 	bl	800206e <_lseek>
 800c914:	1c43      	adds	r3, r0, #1
 800c916:	d102      	bne.n	800c91e <_lseek_r+0x1e>
 800c918:	682b      	ldr	r3, [r5, #0]
 800c91a:	b103      	cbz	r3, 800c91e <_lseek_r+0x1e>
 800c91c:	6023      	str	r3, [r4, #0]
 800c91e:	bd38      	pop	{r3, r4, r5, pc}
 800c920:	200016f8 	.word	0x200016f8

0800c924 <_read_r>:
 800c924:	b538      	push	{r3, r4, r5, lr}
 800c926:	4604      	mov	r4, r0
 800c928:	4608      	mov	r0, r1
 800c92a:	4611      	mov	r1, r2
 800c92c:	2200      	movs	r2, #0
 800c92e:	4d05      	ldr	r5, [pc, #20]	@ (800c944 <_read_r+0x20>)
 800c930:	602a      	str	r2, [r5, #0]
 800c932:	461a      	mov	r2, r3
 800c934:	f7f5 fb3e 	bl	8001fb4 <_read>
 800c938:	1c43      	adds	r3, r0, #1
 800c93a:	d102      	bne.n	800c942 <_read_r+0x1e>
 800c93c:	682b      	ldr	r3, [r5, #0]
 800c93e:	b103      	cbz	r3, 800c942 <_read_r+0x1e>
 800c940:	6023      	str	r3, [r4, #0]
 800c942:	bd38      	pop	{r3, r4, r5, pc}
 800c944:	200016f8 	.word	0x200016f8

0800c948 <_write_r>:
 800c948:	b538      	push	{r3, r4, r5, lr}
 800c94a:	4604      	mov	r4, r0
 800c94c:	4608      	mov	r0, r1
 800c94e:	4611      	mov	r1, r2
 800c950:	2200      	movs	r2, #0
 800c952:	4d05      	ldr	r5, [pc, #20]	@ (800c968 <_write_r+0x20>)
 800c954:	602a      	str	r2, [r5, #0]
 800c956:	461a      	mov	r2, r3
 800c958:	f7f5 fb49 	bl	8001fee <_write>
 800c95c:	1c43      	adds	r3, r0, #1
 800c95e:	d102      	bne.n	800c966 <_write_r+0x1e>
 800c960:	682b      	ldr	r3, [r5, #0]
 800c962:	b103      	cbz	r3, 800c966 <_write_r+0x1e>
 800c964:	6023      	str	r3, [r4, #0]
 800c966:	bd38      	pop	{r3, r4, r5, pc}
 800c968:	200016f8 	.word	0x200016f8

0800c96c <__errno>:
 800c96c:	4b01      	ldr	r3, [pc, #4]	@ (800c974 <__errno+0x8>)
 800c96e:	6818      	ldr	r0, [r3, #0]
 800c970:	4770      	bx	lr
 800c972:	bf00      	nop
 800c974:	20000308 	.word	0x20000308

0800c978 <__libc_init_array>:
 800c978:	b570      	push	{r4, r5, r6, lr}
 800c97a:	2600      	movs	r6, #0
 800c97c:	4d0c      	ldr	r5, [pc, #48]	@ (800c9b0 <__libc_init_array+0x38>)
 800c97e:	4c0d      	ldr	r4, [pc, #52]	@ (800c9b4 <__libc_init_array+0x3c>)
 800c980:	1b64      	subs	r4, r4, r5
 800c982:	10a4      	asrs	r4, r4, #2
 800c984:	42a6      	cmp	r6, r4
 800c986:	d109      	bne.n	800c99c <__libc_init_array+0x24>
 800c988:	f002 fd6e 	bl	800f468 <_init>
 800c98c:	2600      	movs	r6, #0
 800c98e:	4d0a      	ldr	r5, [pc, #40]	@ (800c9b8 <__libc_init_array+0x40>)
 800c990:	4c0a      	ldr	r4, [pc, #40]	@ (800c9bc <__libc_init_array+0x44>)
 800c992:	1b64      	subs	r4, r4, r5
 800c994:	10a4      	asrs	r4, r4, #2
 800c996:	42a6      	cmp	r6, r4
 800c998:	d105      	bne.n	800c9a6 <__libc_init_array+0x2e>
 800c99a:	bd70      	pop	{r4, r5, r6, pc}
 800c99c:	f855 3b04 	ldr.w	r3, [r5], #4
 800c9a0:	4798      	blx	r3
 800c9a2:	3601      	adds	r6, #1
 800c9a4:	e7ee      	b.n	800c984 <__libc_init_array+0xc>
 800c9a6:	f855 3b04 	ldr.w	r3, [r5], #4
 800c9aa:	4798      	blx	r3
 800c9ac:	3601      	adds	r6, #1
 800c9ae:	e7f2      	b.n	800c996 <__libc_init_array+0x1e>
 800c9b0:	0800fa40 	.word	0x0800fa40
 800c9b4:	0800fa40 	.word	0x0800fa40
 800c9b8:	0800fa40 	.word	0x0800fa40
 800c9bc:	0800fa44 	.word	0x0800fa44

0800c9c0 <__retarget_lock_init_recursive>:
 800c9c0:	4770      	bx	lr

0800c9c2 <__retarget_lock_acquire_recursive>:
 800c9c2:	4770      	bx	lr

0800c9c4 <__retarget_lock_release_recursive>:
 800c9c4:	4770      	bx	lr

0800c9c6 <memchr>:
 800c9c6:	4603      	mov	r3, r0
 800c9c8:	b510      	push	{r4, lr}
 800c9ca:	b2c9      	uxtb	r1, r1
 800c9cc:	4402      	add	r2, r0
 800c9ce:	4293      	cmp	r3, r2
 800c9d0:	4618      	mov	r0, r3
 800c9d2:	d101      	bne.n	800c9d8 <memchr+0x12>
 800c9d4:	2000      	movs	r0, #0
 800c9d6:	e003      	b.n	800c9e0 <memchr+0x1a>
 800c9d8:	7804      	ldrb	r4, [r0, #0]
 800c9da:	3301      	adds	r3, #1
 800c9dc:	428c      	cmp	r4, r1
 800c9de:	d1f6      	bne.n	800c9ce <memchr+0x8>
 800c9e0:	bd10      	pop	{r4, pc}

0800c9e2 <memcpy>:
 800c9e2:	440a      	add	r2, r1
 800c9e4:	4291      	cmp	r1, r2
 800c9e6:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 800c9ea:	d100      	bne.n	800c9ee <memcpy+0xc>
 800c9ec:	4770      	bx	lr
 800c9ee:	b510      	push	{r4, lr}
 800c9f0:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c9f4:	4291      	cmp	r1, r2
 800c9f6:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c9fa:	d1f9      	bne.n	800c9f0 <memcpy+0xe>
 800c9fc:	bd10      	pop	{r4, pc}
	...

0800ca00 <nan>:
 800ca00:	2000      	movs	r0, #0
 800ca02:	4901      	ldr	r1, [pc, #4]	@ (800ca08 <nan+0x8>)
 800ca04:	4770      	bx	lr
 800ca06:	bf00      	nop
 800ca08:	7ff80000 	.word	0x7ff80000

0800ca0c <quorem>:
 800ca0c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ca10:	6903      	ldr	r3, [r0, #16]
 800ca12:	690c      	ldr	r4, [r1, #16]
 800ca14:	4607      	mov	r7, r0
 800ca16:	42a3      	cmp	r3, r4
 800ca18:	db7e      	blt.n	800cb18 <quorem+0x10c>
 800ca1a:	3c01      	subs	r4, #1
 800ca1c:	00a3      	lsls	r3, r4, #2
 800ca1e:	f100 0514 	add.w	r5, r0, #20
 800ca22:	f101 0814 	add.w	r8, r1, #20
 800ca26:	9300      	str	r3, [sp, #0]
 800ca28:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800ca2c:	9301      	str	r3, [sp, #4]
 800ca2e:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800ca32:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800ca36:	3301      	adds	r3, #1
 800ca38:	429a      	cmp	r2, r3
 800ca3a:	fbb2 f6f3 	udiv	r6, r2, r3
 800ca3e:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800ca42:	d32e      	bcc.n	800caa2 <quorem+0x96>
 800ca44:	f04f 0a00 	mov.w	sl, #0
 800ca48:	46c4      	mov	ip, r8
 800ca4a:	46ae      	mov	lr, r5
 800ca4c:	46d3      	mov	fp, sl
 800ca4e:	f85c 3b04 	ldr.w	r3, [ip], #4
 800ca52:	b298      	uxth	r0, r3
 800ca54:	fb06 a000 	mla	r0, r6, r0, sl
 800ca58:	0c1b      	lsrs	r3, r3, #16
 800ca5a:	0c02      	lsrs	r2, r0, #16
 800ca5c:	fb06 2303 	mla	r3, r6, r3, r2
 800ca60:	f8de 2000 	ldr.w	r2, [lr]
 800ca64:	b280      	uxth	r0, r0
 800ca66:	b292      	uxth	r2, r2
 800ca68:	1a12      	subs	r2, r2, r0
 800ca6a:	445a      	add	r2, fp
 800ca6c:	f8de 0000 	ldr.w	r0, [lr]
 800ca70:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800ca74:	b29b      	uxth	r3, r3
 800ca76:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800ca7a:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800ca7e:	b292      	uxth	r2, r2
 800ca80:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800ca84:	45e1      	cmp	r9, ip
 800ca86:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800ca8a:	f84e 2b04 	str.w	r2, [lr], #4
 800ca8e:	d2de      	bcs.n	800ca4e <quorem+0x42>
 800ca90:	9b00      	ldr	r3, [sp, #0]
 800ca92:	58eb      	ldr	r3, [r5, r3]
 800ca94:	b92b      	cbnz	r3, 800caa2 <quorem+0x96>
 800ca96:	9b01      	ldr	r3, [sp, #4]
 800ca98:	3b04      	subs	r3, #4
 800ca9a:	429d      	cmp	r5, r3
 800ca9c:	461a      	mov	r2, r3
 800ca9e:	d32f      	bcc.n	800cb00 <quorem+0xf4>
 800caa0:	613c      	str	r4, [r7, #16]
 800caa2:	4638      	mov	r0, r7
 800caa4:	f001 fd10 	bl	800e4c8 <__mcmp>
 800caa8:	2800      	cmp	r0, #0
 800caaa:	db25      	blt.n	800caf8 <quorem+0xec>
 800caac:	4629      	mov	r1, r5
 800caae:	2000      	movs	r0, #0
 800cab0:	f858 2b04 	ldr.w	r2, [r8], #4
 800cab4:	f8d1 c000 	ldr.w	ip, [r1]
 800cab8:	fa1f fe82 	uxth.w	lr, r2
 800cabc:	fa1f f38c 	uxth.w	r3, ip
 800cac0:	eba3 030e 	sub.w	r3, r3, lr
 800cac4:	4403      	add	r3, r0
 800cac6:	0c12      	lsrs	r2, r2, #16
 800cac8:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800cacc:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800cad0:	b29b      	uxth	r3, r3
 800cad2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800cad6:	45c1      	cmp	r9, r8
 800cad8:	ea4f 4022 	mov.w	r0, r2, asr #16
 800cadc:	f841 3b04 	str.w	r3, [r1], #4
 800cae0:	d2e6      	bcs.n	800cab0 <quorem+0xa4>
 800cae2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800cae6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800caea:	b922      	cbnz	r2, 800caf6 <quorem+0xea>
 800caec:	3b04      	subs	r3, #4
 800caee:	429d      	cmp	r5, r3
 800caf0:	461a      	mov	r2, r3
 800caf2:	d30b      	bcc.n	800cb0c <quorem+0x100>
 800caf4:	613c      	str	r4, [r7, #16]
 800caf6:	3601      	adds	r6, #1
 800caf8:	4630      	mov	r0, r6
 800cafa:	b003      	add	sp, #12
 800cafc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cb00:	6812      	ldr	r2, [r2, #0]
 800cb02:	3b04      	subs	r3, #4
 800cb04:	2a00      	cmp	r2, #0
 800cb06:	d1cb      	bne.n	800caa0 <quorem+0x94>
 800cb08:	3c01      	subs	r4, #1
 800cb0a:	e7c6      	b.n	800ca9a <quorem+0x8e>
 800cb0c:	6812      	ldr	r2, [r2, #0]
 800cb0e:	3b04      	subs	r3, #4
 800cb10:	2a00      	cmp	r2, #0
 800cb12:	d1ef      	bne.n	800caf4 <quorem+0xe8>
 800cb14:	3c01      	subs	r4, #1
 800cb16:	e7ea      	b.n	800caee <quorem+0xe2>
 800cb18:	2000      	movs	r0, #0
 800cb1a:	e7ee      	b.n	800cafa <quorem+0xee>
 800cb1c:	0000      	movs	r0, r0
	...

0800cb20 <_dtoa_r>:
 800cb20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cb24:	4614      	mov	r4, r2
 800cb26:	461d      	mov	r5, r3
 800cb28:	69c7      	ldr	r7, [r0, #28]
 800cb2a:	b097      	sub	sp, #92	@ 0x5c
 800cb2c:	4683      	mov	fp, r0
 800cb2e:	e9cd 4502 	strd	r4, r5, [sp, #8]
 800cb32:	9e23      	ldr	r6, [sp, #140]	@ 0x8c
 800cb34:	b97f      	cbnz	r7, 800cb56 <_dtoa_r+0x36>
 800cb36:	2010      	movs	r0, #16
 800cb38:	f001 f93c 	bl	800ddb4 <malloc>
 800cb3c:	4602      	mov	r2, r0
 800cb3e:	f8cb 001c 	str.w	r0, [fp, #28]
 800cb42:	b920      	cbnz	r0, 800cb4e <_dtoa_r+0x2e>
 800cb44:	21ef      	movs	r1, #239	@ 0xef
 800cb46:	4ba8      	ldr	r3, [pc, #672]	@ (800cde8 <_dtoa_r+0x2c8>)
 800cb48:	48a8      	ldr	r0, [pc, #672]	@ (800cdec <_dtoa_r+0x2cc>)
 800cb4a:	f002 f971 	bl	800ee30 <__assert_func>
 800cb4e:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800cb52:	6007      	str	r7, [r0, #0]
 800cb54:	60c7      	str	r7, [r0, #12]
 800cb56:	f8db 301c 	ldr.w	r3, [fp, #28]
 800cb5a:	6819      	ldr	r1, [r3, #0]
 800cb5c:	b159      	cbz	r1, 800cb76 <_dtoa_r+0x56>
 800cb5e:	685a      	ldr	r2, [r3, #4]
 800cb60:	2301      	movs	r3, #1
 800cb62:	4093      	lsls	r3, r2
 800cb64:	604a      	str	r2, [r1, #4]
 800cb66:	608b      	str	r3, [r1, #8]
 800cb68:	4658      	mov	r0, fp
 800cb6a:	f001 fa2b 	bl	800dfc4 <_Bfree>
 800cb6e:	2200      	movs	r2, #0
 800cb70:	f8db 301c 	ldr.w	r3, [fp, #28]
 800cb74:	601a      	str	r2, [r3, #0]
 800cb76:	1e2b      	subs	r3, r5, #0
 800cb78:	bfaf      	iteee	ge
 800cb7a:	2300      	movge	r3, #0
 800cb7c:	2201      	movlt	r2, #1
 800cb7e:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800cb82:	9303      	strlt	r3, [sp, #12]
 800cb84:	bfa8      	it	ge
 800cb86:	6033      	strge	r3, [r6, #0]
 800cb88:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800cb8c:	4b98      	ldr	r3, [pc, #608]	@ (800cdf0 <_dtoa_r+0x2d0>)
 800cb8e:	bfb8      	it	lt
 800cb90:	6032      	strlt	r2, [r6, #0]
 800cb92:	ea33 0308 	bics.w	r3, r3, r8
 800cb96:	d112      	bne.n	800cbbe <_dtoa_r+0x9e>
 800cb98:	f242 730f 	movw	r3, #9999	@ 0x270f
 800cb9c:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 800cb9e:	6013      	str	r3, [r2, #0]
 800cba0:	f3c8 0313 	ubfx	r3, r8, #0, #20
 800cba4:	4323      	orrs	r3, r4
 800cba6:	f000 8550 	beq.w	800d64a <_dtoa_r+0xb2a>
 800cbaa:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800cbac:	f8df a244 	ldr.w	sl, [pc, #580]	@ 800cdf4 <_dtoa_r+0x2d4>
 800cbb0:	2b00      	cmp	r3, #0
 800cbb2:	f000 8552 	beq.w	800d65a <_dtoa_r+0xb3a>
 800cbb6:	f10a 0303 	add.w	r3, sl, #3
 800cbba:	f000 bd4c 	b.w	800d656 <_dtoa_r+0xb36>
 800cbbe:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800cbc2:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800cbc6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800cbca:	2200      	movs	r2, #0
 800cbcc:	2300      	movs	r3, #0
 800cbce:	f7f3 ff9f 	bl	8000b10 <__aeabi_dcmpeq>
 800cbd2:	4607      	mov	r7, r0
 800cbd4:	b158      	cbz	r0, 800cbee <_dtoa_r+0xce>
 800cbd6:	2301      	movs	r3, #1
 800cbd8:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 800cbda:	6013      	str	r3, [r2, #0]
 800cbdc:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800cbde:	b113      	cbz	r3, 800cbe6 <_dtoa_r+0xc6>
 800cbe0:	4b85      	ldr	r3, [pc, #532]	@ (800cdf8 <_dtoa_r+0x2d8>)
 800cbe2:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 800cbe4:	6013      	str	r3, [r2, #0]
 800cbe6:	f8df a214 	ldr.w	sl, [pc, #532]	@ 800cdfc <_dtoa_r+0x2dc>
 800cbea:	f000 bd36 	b.w	800d65a <_dtoa_r+0xb3a>
 800cbee:	ab14      	add	r3, sp, #80	@ 0x50
 800cbf0:	9301      	str	r3, [sp, #4]
 800cbf2:	ab15      	add	r3, sp, #84	@ 0x54
 800cbf4:	9300      	str	r3, [sp, #0]
 800cbf6:	4658      	mov	r0, fp
 800cbf8:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800cbfc:	f001 fd7c 	bl	800e6f8 <__d2b>
 800cc00:	f3c8 560a 	ubfx	r6, r8, #20, #11
 800cc04:	4681      	mov	r9, r0
 800cc06:	2e00      	cmp	r6, #0
 800cc08:	d077      	beq.n	800ccfa <_dtoa_r+0x1da>
 800cc0a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800cc0e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800cc10:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800cc14:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800cc18:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800cc1c:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800cc20:	9712      	str	r7, [sp, #72]	@ 0x48
 800cc22:	4619      	mov	r1, r3
 800cc24:	2200      	movs	r2, #0
 800cc26:	4b76      	ldr	r3, [pc, #472]	@ (800ce00 <_dtoa_r+0x2e0>)
 800cc28:	f7f3 fb52 	bl	80002d0 <__aeabi_dsub>
 800cc2c:	a368      	add	r3, pc, #416	@ (adr r3, 800cdd0 <_dtoa_r+0x2b0>)
 800cc2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cc32:	f7f3 fd05 	bl	8000640 <__aeabi_dmul>
 800cc36:	a368      	add	r3, pc, #416	@ (adr r3, 800cdd8 <_dtoa_r+0x2b8>)
 800cc38:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cc3c:	f7f3 fb4a 	bl	80002d4 <__adddf3>
 800cc40:	4604      	mov	r4, r0
 800cc42:	4630      	mov	r0, r6
 800cc44:	460d      	mov	r5, r1
 800cc46:	f7f3 fc91 	bl	800056c <__aeabi_i2d>
 800cc4a:	a365      	add	r3, pc, #404	@ (adr r3, 800cde0 <_dtoa_r+0x2c0>)
 800cc4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cc50:	f7f3 fcf6 	bl	8000640 <__aeabi_dmul>
 800cc54:	4602      	mov	r2, r0
 800cc56:	460b      	mov	r3, r1
 800cc58:	4620      	mov	r0, r4
 800cc5a:	4629      	mov	r1, r5
 800cc5c:	f7f3 fb3a 	bl	80002d4 <__adddf3>
 800cc60:	4604      	mov	r4, r0
 800cc62:	460d      	mov	r5, r1
 800cc64:	f7f3 ff9c 	bl	8000ba0 <__aeabi_d2iz>
 800cc68:	2200      	movs	r2, #0
 800cc6a:	4607      	mov	r7, r0
 800cc6c:	2300      	movs	r3, #0
 800cc6e:	4620      	mov	r0, r4
 800cc70:	4629      	mov	r1, r5
 800cc72:	f7f3 ff57 	bl	8000b24 <__aeabi_dcmplt>
 800cc76:	b140      	cbz	r0, 800cc8a <_dtoa_r+0x16a>
 800cc78:	4638      	mov	r0, r7
 800cc7a:	f7f3 fc77 	bl	800056c <__aeabi_i2d>
 800cc7e:	4622      	mov	r2, r4
 800cc80:	462b      	mov	r3, r5
 800cc82:	f7f3 ff45 	bl	8000b10 <__aeabi_dcmpeq>
 800cc86:	b900      	cbnz	r0, 800cc8a <_dtoa_r+0x16a>
 800cc88:	3f01      	subs	r7, #1
 800cc8a:	2f16      	cmp	r7, #22
 800cc8c:	d853      	bhi.n	800cd36 <_dtoa_r+0x216>
 800cc8e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800cc92:	4b5c      	ldr	r3, [pc, #368]	@ (800ce04 <_dtoa_r+0x2e4>)
 800cc94:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800cc98:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cc9c:	f7f3 ff42 	bl	8000b24 <__aeabi_dcmplt>
 800cca0:	2800      	cmp	r0, #0
 800cca2:	d04a      	beq.n	800cd3a <_dtoa_r+0x21a>
 800cca4:	2300      	movs	r3, #0
 800cca6:	3f01      	subs	r7, #1
 800cca8:	930f      	str	r3, [sp, #60]	@ 0x3c
 800ccaa:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800ccac:	1b9b      	subs	r3, r3, r6
 800ccae:	1e5a      	subs	r2, r3, #1
 800ccb0:	bf46      	itte	mi
 800ccb2:	f1c3 0801 	rsbmi	r8, r3, #1
 800ccb6:	2300      	movmi	r3, #0
 800ccb8:	f04f 0800 	movpl.w	r8, #0
 800ccbc:	9209      	str	r2, [sp, #36]	@ 0x24
 800ccbe:	bf48      	it	mi
 800ccc0:	9309      	strmi	r3, [sp, #36]	@ 0x24
 800ccc2:	2f00      	cmp	r7, #0
 800ccc4:	db3b      	blt.n	800cd3e <_dtoa_r+0x21e>
 800ccc6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ccc8:	970e      	str	r7, [sp, #56]	@ 0x38
 800ccca:	443b      	add	r3, r7
 800cccc:	9309      	str	r3, [sp, #36]	@ 0x24
 800ccce:	2300      	movs	r3, #0
 800ccd0:	930a      	str	r3, [sp, #40]	@ 0x28
 800ccd2:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800ccd4:	2b09      	cmp	r3, #9
 800ccd6:	d866      	bhi.n	800cda6 <_dtoa_r+0x286>
 800ccd8:	2b05      	cmp	r3, #5
 800ccda:	bfc4      	itt	gt
 800ccdc:	3b04      	subgt	r3, #4
 800ccde:	9320      	strgt	r3, [sp, #128]	@ 0x80
 800cce0:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800cce2:	bfc8      	it	gt
 800cce4:	2400      	movgt	r4, #0
 800cce6:	f1a3 0302 	sub.w	r3, r3, #2
 800ccea:	bfd8      	it	le
 800ccec:	2401      	movle	r4, #1
 800ccee:	2b03      	cmp	r3, #3
 800ccf0:	d864      	bhi.n	800cdbc <_dtoa_r+0x29c>
 800ccf2:	e8df f003 	tbb	[pc, r3]
 800ccf6:	382b      	.short	0x382b
 800ccf8:	5636      	.short	0x5636
 800ccfa:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 800ccfe:	441e      	add	r6, r3
 800cd00:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800cd04:	2b20      	cmp	r3, #32
 800cd06:	bfc1      	itttt	gt
 800cd08:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800cd0c:	fa08 f803 	lslgt.w	r8, r8, r3
 800cd10:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800cd14:	fa24 f303 	lsrgt.w	r3, r4, r3
 800cd18:	bfd6      	itet	le
 800cd1a:	f1c3 0320 	rsble	r3, r3, #32
 800cd1e:	ea48 0003 	orrgt.w	r0, r8, r3
 800cd22:	fa04 f003 	lslle.w	r0, r4, r3
 800cd26:	f7f3 fc11 	bl	800054c <__aeabi_ui2d>
 800cd2a:	2201      	movs	r2, #1
 800cd2c:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800cd30:	3e01      	subs	r6, #1
 800cd32:	9212      	str	r2, [sp, #72]	@ 0x48
 800cd34:	e775      	b.n	800cc22 <_dtoa_r+0x102>
 800cd36:	2301      	movs	r3, #1
 800cd38:	e7b6      	b.n	800cca8 <_dtoa_r+0x188>
 800cd3a:	900f      	str	r0, [sp, #60]	@ 0x3c
 800cd3c:	e7b5      	b.n	800ccaa <_dtoa_r+0x18a>
 800cd3e:	427b      	negs	r3, r7
 800cd40:	930a      	str	r3, [sp, #40]	@ 0x28
 800cd42:	2300      	movs	r3, #0
 800cd44:	eba8 0807 	sub.w	r8, r8, r7
 800cd48:	930e      	str	r3, [sp, #56]	@ 0x38
 800cd4a:	e7c2      	b.n	800ccd2 <_dtoa_r+0x1b2>
 800cd4c:	2300      	movs	r3, #0
 800cd4e:	930b      	str	r3, [sp, #44]	@ 0x2c
 800cd50:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800cd52:	2b00      	cmp	r3, #0
 800cd54:	dc35      	bgt.n	800cdc2 <_dtoa_r+0x2a2>
 800cd56:	2301      	movs	r3, #1
 800cd58:	461a      	mov	r2, r3
 800cd5a:	e9cd 3307 	strd	r3, r3, [sp, #28]
 800cd5e:	9221      	str	r2, [sp, #132]	@ 0x84
 800cd60:	e00b      	b.n	800cd7a <_dtoa_r+0x25a>
 800cd62:	2301      	movs	r3, #1
 800cd64:	e7f3      	b.n	800cd4e <_dtoa_r+0x22e>
 800cd66:	2300      	movs	r3, #0
 800cd68:	930b      	str	r3, [sp, #44]	@ 0x2c
 800cd6a:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800cd6c:	18fb      	adds	r3, r7, r3
 800cd6e:	9308      	str	r3, [sp, #32]
 800cd70:	3301      	adds	r3, #1
 800cd72:	2b01      	cmp	r3, #1
 800cd74:	9307      	str	r3, [sp, #28]
 800cd76:	bfb8      	it	lt
 800cd78:	2301      	movlt	r3, #1
 800cd7a:	2100      	movs	r1, #0
 800cd7c:	2204      	movs	r2, #4
 800cd7e:	f8db 001c 	ldr.w	r0, [fp, #28]
 800cd82:	f102 0514 	add.w	r5, r2, #20
 800cd86:	429d      	cmp	r5, r3
 800cd88:	d91f      	bls.n	800cdca <_dtoa_r+0x2aa>
 800cd8a:	6041      	str	r1, [r0, #4]
 800cd8c:	4658      	mov	r0, fp
 800cd8e:	f001 f8d9 	bl	800df44 <_Balloc>
 800cd92:	4682      	mov	sl, r0
 800cd94:	2800      	cmp	r0, #0
 800cd96:	d139      	bne.n	800ce0c <_dtoa_r+0x2ec>
 800cd98:	4602      	mov	r2, r0
 800cd9a:	f240 11af 	movw	r1, #431	@ 0x1af
 800cd9e:	4b1a      	ldr	r3, [pc, #104]	@ (800ce08 <_dtoa_r+0x2e8>)
 800cda0:	e6d2      	b.n	800cb48 <_dtoa_r+0x28>
 800cda2:	2301      	movs	r3, #1
 800cda4:	e7e0      	b.n	800cd68 <_dtoa_r+0x248>
 800cda6:	2401      	movs	r4, #1
 800cda8:	2300      	movs	r3, #0
 800cdaa:	940b      	str	r4, [sp, #44]	@ 0x2c
 800cdac:	9320      	str	r3, [sp, #128]	@ 0x80
 800cdae:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800cdb2:	2200      	movs	r2, #0
 800cdb4:	e9cd 3307 	strd	r3, r3, [sp, #28]
 800cdb8:	2312      	movs	r3, #18
 800cdba:	e7d0      	b.n	800cd5e <_dtoa_r+0x23e>
 800cdbc:	2301      	movs	r3, #1
 800cdbe:	930b      	str	r3, [sp, #44]	@ 0x2c
 800cdc0:	e7f5      	b.n	800cdae <_dtoa_r+0x28e>
 800cdc2:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800cdc4:	e9cd 3307 	strd	r3, r3, [sp, #28]
 800cdc8:	e7d7      	b.n	800cd7a <_dtoa_r+0x25a>
 800cdca:	3101      	adds	r1, #1
 800cdcc:	0052      	lsls	r2, r2, #1
 800cdce:	e7d8      	b.n	800cd82 <_dtoa_r+0x262>
 800cdd0:	636f4361 	.word	0x636f4361
 800cdd4:	3fd287a7 	.word	0x3fd287a7
 800cdd8:	8b60c8b3 	.word	0x8b60c8b3
 800cddc:	3fc68a28 	.word	0x3fc68a28
 800cde0:	509f79fb 	.word	0x509f79fb
 800cde4:	3fd34413 	.word	0x3fd34413
 800cde8:	0800f6b1 	.word	0x0800f6b1
 800cdec:	0800f6c8 	.word	0x0800f6c8
 800cdf0:	7ff00000 	.word	0x7ff00000
 800cdf4:	0800f6ad 	.word	0x0800f6ad
 800cdf8:	0800f679 	.word	0x0800f679
 800cdfc:	0800f678 	.word	0x0800f678
 800ce00:	3ff80000 	.word	0x3ff80000
 800ce04:	0800f820 	.word	0x0800f820
 800ce08:	0800f720 	.word	0x0800f720
 800ce0c:	f8db 301c 	ldr.w	r3, [fp, #28]
 800ce10:	6018      	str	r0, [r3, #0]
 800ce12:	9b07      	ldr	r3, [sp, #28]
 800ce14:	2b0e      	cmp	r3, #14
 800ce16:	f200 80a4 	bhi.w	800cf62 <_dtoa_r+0x442>
 800ce1a:	2c00      	cmp	r4, #0
 800ce1c:	f000 80a1 	beq.w	800cf62 <_dtoa_r+0x442>
 800ce20:	2f00      	cmp	r7, #0
 800ce22:	dd33      	ble.n	800ce8c <_dtoa_r+0x36c>
 800ce24:	4b86      	ldr	r3, [pc, #536]	@ (800d040 <_dtoa_r+0x520>)
 800ce26:	f007 020f 	and.w	r2, r7, #15
 800ce2a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800ce2e:	05f8      	lsls	r0, r7, #23
 800ce30:	e9d3 3400 	ldrd	r3, r4, [r3]
 800ce34:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800ce38:	ea4f 1427 	mov.w	r4, r7, asr #4
 800ce3c:	d516      	bpl.n	800ce6c <_dtoa_r+0x34c>
 800ce3e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800ce42:	4b80      	ldr	r3, [pc, #512]	@ (800d044 <_dtoa_r+0x524>)
 800ce44:	2603      	movs	r6, #3
 800ce46:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800ce4a:	f7f3 fd23 	bl	8000894 <__aeabi_ddiv>
 800ce4e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ce52:	f004 040f 	and.w	r4, r4, #15
 800ce56:	4d7b      	ldr	r5, [pc, #492]	@ (800d044 <_dtoa_r+0x524>)
 800ce58:	b954      	cbnz	r4, 800ce70 <_dtoa_r+0x350>
 800ce5a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ce5e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ce62:	f7f3 fd17 	bl	8000894 <__aeabi_ddiv>
 800ce66:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ce6a:	e028      	b.n	800cebe <_dtoa_r+0x39e>
 800ce6c:	2602      	movs	r6, #2
 800ce6e:	e7f2      	b.n	800ce56 <_dtoa_r+0x336>
 800ce70:	07e1      	lsls	r1, r4, #31
 800ce72:	d508      	bpl.n	800ce86 <_dtoa_r+0x366>
 800ce74:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800ce78:	e9d5 2300 	ldrd	r2, r3, [r5]
 800ce7c:	f7f3 fbe0 	bl	8000640 <__aeabi_dmul>
 800ce80:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800ce84:	3601      	adds	r6, #1
 800ce86:	1064      	asrs	r4, r4, #1
 800ce88:	3508      	adds	r5, #8
 800ce8a:	e7e5      	b.n	800ce58 <_dtoa_r+0x338>
 800ce8c:	f000 80d2 	beq.w	800d034 <_dtoa_r+0x514>
 800ce90:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800ce94:	427c      	negs	r4, r7
 800ce96:	4b6a      	ldr	r3, [pc, #424]	@ (800d040 <_dtoa_r+0x520>)
 800ce98:	f004 020f 	and.w	r2, r4, #15
 800ce9c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800cea0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cea4:	f7f3 fbcc 	bl	8000640 <__aeabi_dmul>
 800cea8:	2602      	movs	r6, #2
 800ceaa:	2300      	movs	r3, #0
 800ceac:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ceb0:	4d64      	ldr	r5, [pc, #400]	@ (800d044 <_dtoa_r+0x524>)
 800ceb2:	1124      	asrs	r4, r4, #4
 800ceb4:	2c00      	cmp	r4, #0
 800ceb6:	f040 80b2 	bne.w	800d01e <_dtoa_r+0x4fe>
 800ceba:	2b00      	cmp	r3, #0
 800cebc:	d1d3      	bne.n	800ce66 <_dtoa_r+0x346>
 800cebe:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800cec2:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800cec4:	2b00      	cmp	r3, #0
 800cec6:	f000 80b7 	beq.w	800d038 <_dtoa_r+0x518>
 800ceca:	2200      	movs	r2, #0
 800cecc:	4620      	mov	r0, r4
 800cece:	4629      	mov	r1, r5
 800ced0:	4b5d      	ldr	r3, [pc, #372]	@ (800d048 <_dtoa_r+0x528>)
 800ced2:	f7f3 fe27 	bl	8000b24 <__aeabi_dcmplt>
 800ced6:	2800      	cmp	r0, #0
 800ced8:	f000 80ae 	beq.w	800d038 <_dtoa_r+0x518>
 800cedc:	9b07      	ldr	r3, [sp, #28]
 800cede:	2b00      	cmp	r3, #0
 800cee0:	f000 80aa 	beq.w	800d038 <_dtoa_r+0x518>
 800cee4:	9b08      	ldr	r3, [sp, #32]
 800cee6:	2b00      	cmp	r3, #0
 800cee8:	dd37      	ble.n	800cf5a <_dtoa_r+0x43a>
 800ceea:	1e7b      	subs	r3, r7, #1
 800ceec:	4620      	mov	r0, r4
 800ceee:	9304      	str	r3, [sp, #16]
 800cef0:	2200      	movs	r2, #0
 800cef2:	4629      	mov	r1, r5
 800cef4:	4b55      	ldr	r3, [pc, #340]	@ (800d04c <_dtoa_r+0x52c>)
 800cef6:	f7f3 fba3 	bl	8000640 <__aeabi_dmul>
 800cefa:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800cefe:	9c08      	ldr	r4, [sp, #32]
 800cf00:	3601      	adds	r6, #1
 800cf02:	4630      	mov	r0, r6
 800cf04:	f7f3 fb32 	bl	800056c <__aeabi_i2d>
 800cf08:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800cf0c:	f7f3 fb98 	bl	8000640 <__aeabi_dmul>
 800cf10:	2200      	movs	r2, #0
 800cf12:	4b4f      	ldr	r3, [pc, #316]	@ (800d050 <_dtoa_r+0x530>)
 800cf14:	f7f3 f9de 	bl	80002d4 <__adddf3>
 800cf18:	4605      	mov	r5, r0
 800cf1a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800cf1e:	2c00      	cmp	r4, #0
 800cf20:	f040 809a 	bne.w	800d058 <_dtoa_r+0x538>
 800cf24:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800cf28:	2200      	movs	r2, #0
 800cf2a:	4b4a      	ldr	r3, [pc, #296]	@ (800d054 <_dtoa_r+0x534>)
 800cf2c:	f7f3 f9d0 	bl	80002d0 <__aeabi_dsub>
 800cf30:	4602      	mov	r2, r0
 800cf32:	460b      	mov	r3, r1
 800cf34:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800cf38:	462a      	mov	r2, r5
 800cf3a:	4633      	mov	r3, r6
 800cf3c:	f7f3 fe10 	bl	8000b60 <__aeabi_dcmpgt>
 800cf40:	2800      	cmp	r0, #0
 800cf42:	f040 828e 	bne.w	800d462 <_dtoa_r+0x942>
 800cf46:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800cf4a:	462a      	mov	r2, r5
 800cf4c:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800cf50:	f7f3 fde8 	bl	8000b24 <__aeabi_dcmplt>
 800cf54:	2800      	cmp	r0, #0
 800cf56:	f040 8127 	bne.w	800d1a8 <_dtoa_r+0x688>
 800cf5a:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800cf5e:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800cf62:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800cf64:	2b00      	cmp	r3, #0
 800cf66:	f2c0 8163 	blt.w	800d230 <_dtoa_r+0x710>
 800cf6a:	2f0e      	cmp	r7, #14
 800cf6c:	f300 8160 	bgt.w	800d230 <_dtoa_r+0x710>
 800cf70:	4b33      	ldr	r3, [pc, #204]	@ (800d040 <_dtoa_r+0x520>)
 800cf72:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800cf76:	e9d3 3400 	ldrd	r3, r4, [r3]
 800cf7a:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800cf7e:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800cf80:	2b00      	cmp	r3, #0
 800cf82:	da03      	bge.n	800cf8c <_dtoa_r+0x46c>
 800cf84:	9b07      	ldr	r3, [sp, #28]
 800cf86:	2b00      	cmp	r3, #0
 800cf88:	f340 8100 	ble.w	800d18c <_dtoa_r+0x66c>
 800cf8c:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800cf90:	4656      	mov	r6, sl
 800cf92:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800cf96:	4620      	mov	r0, r4
 800cf98:	4629      	mov	r1, r5
 800cf9a:	f7f3 fc7b 	bl	8000894 <__aeabi_ddiv>
 800cf9e:	f7f3 fdff 	bl	8000ba0 <__aeabi_d2iz>
 800cfa2:	4680      	mov	r8, r0
 800cfa4:	f7f3 fae2 	bl	800056c <__aeabi_i2d>
 800cfa8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800cfac:	f7f3 fb48 	bl	8000640 <__aeabi_dmul>
 800cfb0:	4602      	mov	r2, r0
 800cfb2:	460b      	mov	r3, r1
 800cfb4:	4620      	mov	r0, r4
 800cfb6:	4629      	mov	r1, r5
 800cfb8:	f7f3 f98a 	bl	80002d0 <__aeabi_dsub>
 800cfbc:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800cfc0:	9d07      	ldr	r5, [sp, #28]
 800cfc2:	f806 4b01 	strb.w	r4, [r6], #1
 800cfc6:	eba6 040a 	sub.w	r4, r6, sl
 800cfca:	42a5      	cmp	r5, r4
 800cfcc:	4602      	mov	r2, r0
 800cfce:	460b      	mov	r3, r1
 800cfd0:	f040 8116 	bne.w	800d200 <_dtoa_r+0x6e0>
 800cfd4:	f7f3 f97e 	bl	80002d4 <__adddf3>
 800cfd8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800cfdc:	4604      	mov	r4, r0
 800cfde:	460d      	mov	r5, r1
 800cfe0:	f7f3 fdbe 	bl	8000b60 <__aeabi_dcmpgt>
 800cfe4:	2800      	cmp	r0, #0
 800cfe6:	f040 80f8 	bne.w	800d1da <_dtoa_r+0x6ba>
 800cfea:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800cfee:	4620      	mov	r0, r4
 800cff0:	4629      	mov	r1, r5
 800cff2:	f7f3 fd8d 	bl	8000b10 <__aeabi_dcmpeq>
 800cff6:	b118      	cbz	r0, 800d000 <_dtoa_r+0x4e0>
 800cff8:	f018 0f01 	tst.w	r8, #1
 800cffc:	f040 80ed 	bne.w	800d1da <_dtoa_r+0x6ba>
 800d000:	4649      	mov	r1, r9
 800d002:	4658      	mov	r0, fp
 800d004:	f000 ffde 	bl	800dfc4 <_Bfree>
 800d008:	2300      	movs	r3, #0
 800d00a:	7033      	strb	r3, [r6, #0]
 800d00c:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 800d00e:	3701      	adds	r7, #1
 800d010:	601f      	str	r7, [r3, #0]
 800d012:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800d014:	2b00      	cmp	r3, #0
 800d016:	f000 8320 	beq.w	800d65a <_dtoa_r+0xb3a>
 800d01a:	601e      	str	r6, [r3, #0]
 800d01c:	e31d      	b.n	800d65a <_dtoa_r+0xb3a>
 800d01e:	07e2      	lsls	r2, r4, #31
 800d020:	d505      	bpl.n	800d02e <_dtoa_r+0x50e>
 800d022:	e9d5 2300 	ldrd	r2, r3, [r5]
 800d026:	f7f3 fb0b 	bl	8000640 <__aeabi_dmul>
 800d02a:	2301      	movs	r3, #1
 800d02c:	3601      	adds	r6, #1
 800d02e:	1064      	asrs	r4, r4, #1
 800d030:	3508      	adds	r5, #8
 800d032:	e73f      	b.n	800ceb4 <_dtoa_r+0x394>
 800d034:	2602      	movs	r6, #2
 800d036:	e742      	b.n	800cebe <_dtoa_r+0x39e>
 800d038:	9c07      	ldr	r4, [sp, #28]
 800d03a:	9704      	str	r7, [sp, #16]
 800d03c:	e761      	b.n	800cf02 <_dtoa_r+0x3e2>
 800d03e:	bf00      	nop
 800d040:	0800f820 	.word	0x0800f820
 800d044:	0800f7f8 	.word	0x0800f7f8
 800d048:	3ff00000 	.word	0x3ff00000
 800d04c:	40240000 	.word	0x40240000
 800d050:	401c0000 	.word	0x401c0000
 800d054:	40140000 	.word	0x40140000
 800d058:	4b70      	ldr	r3, [pc, #448]	@ (800d21c <_dtoa_r+0x6fc>)
 800d05a:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800d05c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800d060:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800d064:	4454      	add	r4, sl
 800d066:	2900      	cmp	r1, #0
 800d068:	d045      	beq.n	800d0f6 <_dtoa_r+0x5d6>
 800d06a:	2000      	movs	r0, #0
 800d06c:	496c      	ldr	r1, [pc, #432]	@ (800d220 <_dtoa_r+0x700>)
 800d06e:	f7f3 fc11 	bl	8000894 <__aeabi_ddiv>
 800d072:	4633      	mov	r3, r6
 800d074:	462a      	mov	r2, r5
 800d076:	f7f3 f92b 	bl	80002d0 <__aeabi_dsub>
 800d07a:	4656      	mov	r6, sl
 800d07c:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800d080:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d084:	f7f3 fd8c 	bl	8000ba0 <__aeabi_d2iz>
 800d088:	4605      	mov	r5, r0
 800d08a:	f7f3 fa6f 	bl	800056c <__aeabi_i2d>
 800d08e:	4602      	mov	r2, r0
 800d090:	460b      	mov	r3, r1
 800d092:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d096:	f7f3 f91b 	bl	80002d0 <__aeabi_dsub>
 800d09a:	4602      	mov	r2, r0
 800d09c:	460b      	mov	r3, r1
 800d09e:	3530      	adds	r5, #48	@ 0x30
 800d0a0:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800d0a4:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800d0a8:	f806 5b01 	strb.w	r5, [r6], #1
 800d0ac:	f7f3 fd3a 	bl	8000b24 <__aeabi_dcmplt>
 800d0b0:	2800      	cmp	r0, #0
 800d0b2:	d163      	bne.n	800d17c <_dtoa_r+0x65c>
 800d0b4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800d0b8:	2000      	movs	r0, #0
 800d0ba:	495a      	ldr	r1, [pc, #360]	@ (800d224 <_dtoa_r+0x704>)
 800d0bc:	f7f3 f908 	bl	80002d0 <__aeabi_dsub>
 800d0c0:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800d0c4:	f7f3 fd2e 	bl	8000b24 <__aeabi_dcmplt>
 800d0c8:	2800      	cmp	r0, #0
 800d0ca:	f040 8087 	bne.w	800d1dc <_dtoa_r+0x6bc>
 800d0ce:	42a6      	cmp	r6, r4
 800d0d0:	f43f af43 	beq.w	800cf5a <_dtoa_r+0x43a>
 800d0d4:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800d0d8:	2200      	movs	r2, #0
 800d0da:	4b53      	ldr	r3, [pc, #332]	@ (800d228 <_dtoa_r+0x708>)
 800d0dc:	f7f3 fab0 	bl	8000640 <__aeabi_dmul>
 800d0e0:	2200      	movs	r2, #0
 800d0e2:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800d0e6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d0ea:	4b4f      	ldr	r3, [pc, #316]	@ (800d228 <_dtoa_r+0x708>)
 800d0ec:	f7f3 faa8 	bl	8000640 <__aeabi_dmul>
 800d0f0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d0f4:	e7c4      	b.n	800d080 <_dtoa_r+0x560>
 800d0f6:	4631      	mov	r1, r6
 800d0f8:	4628      	mov	r0, r5
 800d0fa:	f7f3 faa1 	bl	8000640 <__aeabi_dmul>
 800d0fe:	4656      	mov	r6, sl
 800d100:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800d104:	9413      	str	r4, [sp, #76]	@ 0x4c
 800d106:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d10a:	f7f3 fd49 	bl	8000ba0 <__aeabi_d2iz>
 800d10e:	4605      	mov	r5, r0
 800d110:	f7f3 fa2c 	bl	800056c <__aeabi_i2d>
 800d114:	4602      	mov	r2, r0
 800d116:	460b      	mov	r3, r1
 800d118:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d11c:	f7f3 f8d8 	bl	80002d0 <__aeabi_dsub>
 800d120:	4602      	mov	r2, r0
 800d122:	460b      	mov	r3, r1
 800d124:	3530      	adds	r5, #48	@ 0x30
 800d126:	f806 5b01 	strb.w	r5, [r6], #1
 800d12a:	42a6      	cmp	r6, r4
 800d12c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800d130:	f04f 0200 	mov.w	r2, #0
 800d134:	d124      	bne.n	800d180 <_dtoa_r+0x660>
 800d136:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800d13a:	4b39      	ldr	r3, [pc, #228]	@ (800d220 <_dtoa_r+0x700>)
 800d13c:	f7f3 f8ca 	bl	80002d4 <__adddf3>
 800d140:	4602      	mov	r2, r0
 800d142:	460b      	mov	r3, r1
 800d144:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d148:	f7f3 fd0a 	bl	8000b60 <__aeabi_dcmpgt>
 800d14c:	2800      	cmp	r0, #0
 800d14e:	d145      	bne.n	800d1dc <_dtoa_r+0x6bc>
 800d150:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800d154:	2000      	movs	r0, #0
 800d156:	4932      	ldr	r1, [pc, #200]	@ (800d220 <_dtoa_r+0x700>)
 800d158:	f7f3 f8ba 	bl	80002d0 <__aeabi_dsub>
 800d15c:	4602      	mov	r2, r0
 800d15e:	460b      	mov	r3, r1
 800d160:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d164:	f7f3 fcde 	bl	8000b24 <__aeabi_dcmplt>
 800d168:	2800      	cmp	r0, #0
 800d16a:	f43f aef6 	beq.w	800cf5a <_dtoa_r+0x43a>
 800d16e:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 800d170:	1e73      	subs	r3, r6, #1
 800d172:	9313      	str	r3, [sp, #76]	@ 0x4c
 800d174:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800d178:	2b30      	cmp	r3, #48	@ 0x30
 800d17a:	d0f8      	beq.n	800d16e <_dtoa_r+0x64e>
 800d17c:	9f04      	ldr	r7, [sp, #16]
 800d17e:	e73f      	b.n	800d000 <_dtoa_r+0x4e0>
 800d180:	4b29      	ldr	r3, [pc, #164]	@ (800d228 <_dtoa_r+0x708>)
 800d182:	f7f3 fa5d 	bl	8000640 <__aeabi_dmul>
 800d186:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d18a:	e7bc      	b.n	800d106 <_dtoa_r+0x5e6>
 800d18c:	d10c      	bne.n	800d1a8 <_dtoa_r+0x688>
 800d18e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800d192:	2200      	movs	r2, #0
 800d194:	4b25      	ldr	r3, [pc, #148]	@ (800d22c <_dtoa_r+0x70c>)
 800d196:	f7f3 fa53 	bl	8000640 <__aeabi_dmul>
 800d19a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800d19e:	f7f3 fcd5 	bl	8000b4c <__aeabi_dcmpge>
 800d1a2:	2800      	cmp	r0, #0
 800d1a4:	f000 815b 	beq.w	800d45e <_dtoa_r+0x93e>
 800d1a8:	2400      	movs	r4, #0
 800d1aa:	4625      	mov	r5, r4
 800d1ac:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800d1ae:	4656      	mov	r6, sl
 800d1b0:	43db      	mvns	r3, r3
 800d1b2:	9304      	str	r3, [sp, #16]
 800d1b4:	2700      	movs	r7, #0
 800d1b6:	4621      	mov	r1, r4
 800d1b8:	4658      	mov	r0, fp
 800d1ba:	f000 ff03 	bl	800dfc4 <_Bfree>
 800d1be:	2d00      	cmp	r5, #0
 800d1c0:	d0dc      	beq.n	800d17c <_dtoa_r+0x65c>
 800d1c2:	b12f      	cbz	r7, 800d1d0 <_dtoa_r+0x6b0>
 800d1c4:	42af      	cmp	r7, r5
 800d1c6:	d003      	beq.n	800d1d0 <_dtoa_r+0x6b0>
 800d1c8:	4639      	mov	r1, r7
 800d1ca:	4658      	mov	r0, fp
 800d1cc:	f000 fefa 	bl	800dfc4 <_Bfree>
 800d1d0:	4629      	mov	r1, r5
 800d1d2:	4658      	mov	r0, fp
 800d1d4:	f000 fef6 	bl	800dfc4 <_Bfree>
 800d1d8:	e7d0      	b.n	800d17c <_dtoa_r+0x65c>
 800d1da:	9704      	str	r7, [sp, #16]
 800d1dc:	4633      	mov	r3, r6
 800d1de:	461e      	mov	r6, r3
 800d1e0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800d1e4:	2a39      	cmp	r2, #57	@ 0x39
 800d1e6:	d107      	bne.n	800d1f8 <_dtoa_r+0x6d8>
 800d1e8:	459a      	cmp	sl, r3
 800d1ea:	d1f8      	bne.n	800d1de <_dtoa_r+0x6be>
 800d1ec:	9a04      	ldr	r2, [sp, #16]
 800d1ee:	3201      	adds	r2, #1
 800d1f0:	9204      	str	r2, [sp, #16]
 800d1f2:	2230      	movs	r2, #48	@ 0x30
 800d1f4:	f88a 2000 	strb.w	r2, [sl]
 800d1f8:	781a      	ldrb	r2, [r3, #0]
 800d1fa:	3201      	adds	r2, #1
 800d1fc:	701a      	strb	r2, [r3, #0]
 800d1fe:	e7bd      	b.n	800d17c <_dtoa_r+0x65c>
 800d200:	2200      	movs	r2, #0
 800d202:	4b09      	ldr	r3, [pc, #36]	@ (800d228 <_dtoa_r+0x708>)
 800d204:	f7f3 fa1c 	bl	8000640 <__aeabi_dmul>
 800d208:	2200      	movs	r2, #0
 800d20a:	2300      	movs	r3, #0
 800d20c:	4604      	mov	r4, r0
 800d20e:	460d      	mov	r5, r1
 800d210:	f7f3 fc7e 	bl	8000b10 <__aeabi_dcmpeq>
 800d214:	2800      	cmp	r0, #0
 800d216:	f43f aebc 	beq.w	800cf92 <_dtoa_r+0x472>
 800d21a:	e6f1      	b.n	800d000 <_dtoa_r+0x4e0>
 800d21c:	0800f820 	.word	0x0800f820
 800d220:	3fe00000 	.word	0x3fe00000
 800d224:	3ff00000 	.word	0x3ff00000
 800d228:	40240000 	.word	0x40240000
 800d22c:	40140000 	.word	0x40140000
 800d230:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800d232:	2a00      	cmp	r2, #0
 800d234:	f000 80db 	beq.w	800d3ee <_dtoa_r+0x8ce>
 800d238:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800d23a:	2a01      	cmp	r2, #1
 800d23c:	f300 80bf 	bgt.w	800d3be <_dtoa_r+0x89e>
 800d240:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800d242:	2a00      	cmp	r2, #0
 800d244:	f000 80b7 	beq.w	800d3b6 <_dtoa_r+0x896>
 800d248:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800d24c:	4646      	mov	r6, r8
 800d24e:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800d250:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800d252:	2101      	movs	r1, #1
 800d254:	441a      	add	r2, r3
 800d256:	4658      	mov	r0, fp
 800d258:	4498      	add	r8, r3
 800d25a:	9209      	str	r2, [sp, #36]	@ 0x24
 800d25c:	f000 ffb0 	bl	800e1c0 <__i2b>
 800d260:	4605      	mov	r5, r0
 800d262:	b15e      	cbz	r6, 800d27c <_dtoa_r+0x75c>
 800d264:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d266:	2b00      	cmp	r3, #0
 800d268:	dd08      	ble.n	800d27c <_dtoa_r+0x75c>
 800d26a:	42b3      	cmp	r3, r6
 800d26c:	bfa8      	it	ge
 800d26e:	4633      	movge	r3, r6
 800d270:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800d272:	eba8 0803 	sub.w	r8, r8, r3
 800d276:	1af6      	subs	r6, r6, r3
 800d278:	1ad3      	subs	r3, r2, r3
 800d27a:	9309      	str	r3, [sp, #36]	@ 0x24
 800d27c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d27e:	b1f3      	cbz	r3, 800d2be <_dtoa_r+0x79e>
 800d280:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800d282:	2b00      	cmp	r3, #0
 800d284:	f000 80b7 	beq.w	800d3f6 <_dtoa_r+0x8d6>
 800d288:	b18c      	cbz	r4, 800d2ae <_dtoa_r+0x78e>
 800d28a:	4629      	mov	r1, r5
 800d28c:	4622      	mov	r2, r4
 800d28e:	4658      	mov	r0, fp
 800d290:	f001 f854 	bl	800e33c <__pow5mult>
 800d294:	464a      	mov	r2, r9
 800d296:	4601      	mov	r1, r0
 800d298:	4605      	mov	r5, r0
 800d29a:	4658      	mov	r0, fp
 800d29c:	f000 ffa6 	bl	800e1ec <__multiply>
 800d2a0:	4649      	mov	r1, r9
 800d2a2:	9004      	str	r0, [sp, #16]
 800d2a4:	4658      	mov	r0, fp
 800d2a6:	f000 fe8d 	bl	800dfc4 <_Bfree>
 800d2aa:	9b04      	ldr	r3, [sp, #16]
 800d2ac:	4699      	mov	r9, r3
 800d2ae:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d2b0:	1b1a      	subs	r2, r3, r4
 800d2b2:	d004      	beq.n	800d2be <_dtoa_r+0x79e>
 800d2b4:	4649      	mov	r1, r9
 800d2b6:	4658      	mov	r0, fp
 800d2b8:	f001 f840 	bl	800e33c <__pow5mult>
 800d2bc:	4681      	mov	r9, r0
 800d2be:	2101      	movs	r1, #1
 800d2c0:	4658      	mov	r0, fp
 800d2c2:	f000 ff7d 	bl	800e1c0 <__i2b>
 800d2c6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d2c8:	4604      	mov	r4, r0
 800d2ca:	2b00      	cmp	r3, #0
 800d2cc:	f000 81c9 	beq.w	800d662 <_dtoa_r+0xb42>
 800d2d0:	461a      	mov	r2, r3
 800d2d2:	4601      	mov	r1, r0
 800d2d4:	4658      	mov	r0, fp
 800d2d6:	f001 f831 	bl	800e33c <__pow5mult>
 800d2da:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800d2dc:	4604      	mov	r4, r0
 800d2de:	2b01      	cmp	r3, #1
 800d2e0:	f300 808f 	bgt.w	800d402 <_dtoa_r+0x8e2>
 800d2e4:	9b02      	ldr	r3, [sp, #8]
 800d2e6:	2b00      	cmp	r3, #0
 800d2e8:	f040 8087 	bne.w	800d3fa <_dtoa_r+0x8da>
 800d2ec:	9b03      	ldr	r3, [sp, #12]
 800d2ee:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800d2f2:	2b00      	cmp	r3, #0
 800d2f4:	f040 8083 	bne.w	800d3fe <_dtoa_r+0x8de>
 800d2f8:	9b03      	ldr	r3, [sp, #12]
 800d2fa:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800d2fe:	0d1b      	lsrs	r3, r3, #20
 800d300:	051b      	lsls	r3, r3, #20
 800d302:	b12b      	cbz	r3, 800d310 <_dtoa_r+0x7f0>
 800d304:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d306:	f108 0801 	add.w	r8, r8, #1
 800d30a:	3301      	adds	r3, #1
 800d30c:	9309      	str	r3, [sp, #36]	@ 0x24
 800d30e:	2301      	movs	r3, #1
 800d310:	930a      	str	r3, [sp, #40]	@ 0x28
 800d312:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d314:	2b00      	cmp	r3, #0
 800d316:	f000 81aa 	beq.w	800d66e <_dtoa_r+0xb4e>
 800d31a:	6923      	ldr	r3, [r4, #16]
 800d31c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800d320:	6918      	ldr	r0, [r3, #16]
 800d322:	f000 ff01 	bl	800e128 <__hi0bits>
 800d326:	f1c0 0020 	rsb	r0, r0, #32
 800d32a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d32c:	4418      	add	r0, r3
 800d32e:	f010 001f 	ands.w	r0, r0, #31
 800d332:	d071      	beq.n	800d418 <_dtoa_r+0x8f8>
 800d334:	f1c0 0320 	rsb	r3, r0, #32
 800d338:	2b04      	cmp	r3, #4
 800d33a:	dd65      	ble.n	800d408 <_dtoa_r+0x8e8>
 800d33c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d33e:	f1c0 001c 	rsb	r0, r0, #28
 800d342:	4403      	add	r3, r0
 800d344:	4480      	add	r8, r0
 800d346:	4406      	add	r6, r0
 800d348:	9309      	str	r3, [sp, #36]	@ 0x24
 800d34a:	f1b8 0f00 	cmp.w	r8, #0
 800d34e:	dd05      	ble.n	800d35c <_dtoa_r+0x83c>
 800d350:	4649      	mov	r1, r9
 800d352:	4642      	mov	r2, r8
 800d354:	4658      	mov	r0, fp
 800d356:	f001 f84b 	bl	800e3f0 <__lshift>
 800d35a:	4681      	mov	r9, r0
 800d35c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d35e:	2b00      	cmp	r3, #0
 800d360:	dd05      	ble.n	800d36e <_dtoa_r+0x84e>
 800d362:	4621      	mov	r1, r4
 800d364:	461a      	mov	r2, r3
 800d366:	4658      	mov	r0, fp
 800d368:	f001 f842 	bl	800e3f0 <__lshift>
 800d36c:	4604      	mov	r4, r0
 800d36e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d370:	2b00      	cmp	r3, #0
 800d372:	d053      	beq.n	800d41c <_dtoa_r+0x8fc>
 800d374:	4621      	mov	r1, r4
 800d376:	4648      	mov	r0, r9
 800d378:	f001 f8a6 	bl	800e4c8 <__mcmp>
 800d37c:	2800      	cmp	r0, #0
 800d37e:	da4d      	bge.n	800d41c <_dtoa_r+0x8fc>
 800d380:	1e7b      	subs	r3, r7, #1
 800d382:	4649      	mov	r1, r9
 800d384:	9304      	str	r3, [sp, #16]
 800d386:	220a      	movs	r2, #10
 800d388:	2300      	movs	r3, #0
 800d38a:	4658      	mov	r0, fp
 800d38c:	f000 fe3c 	bl	800e008 <__multadd>
 800d390:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800d392:	4681      	mov	r9, r0
 800d394:	2b00      	cmp	r3, #0
 800d396:	f000 816c 	beq.w	800d672 <_dtoa_r+0xb52>
 800d39a:	2300      	movs	r3, #0
 800d39c:	4629      	mov	r1, r5
 800d39e:	220a      	movs	r2, #10
 800d3a0:	4658      	mov	r0, fp
 800d3a2:	f000 fe31 	bl	800e008 <__multadd>
 800d3a6:	9b08      	ldr	r3, [sp, #32]
 800d3a8:	4605      	mov	r5, r0
 800d3aa:	2b00      	cmp	r3, #0
 800d3ac:	dc61      	bgt.n	800d472 <_dtoa_r+0x952>
 800d3ae:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800d3b0:	2b02      	cmp	r3, #2
 800d3b2:	dc3b      	bgt.n	800d42c <_dtoa_r+0x90c>
 800d3b4:	e05d      	b.n	800d472 <_dtoa_r+0x952>
 800d3b6:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800d3b8:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800d3bc:	e746      	b.n	800d24c <_dtoa_r+0x72c>
 800d3be:	9b07      	ldr	r3, [sp, #28]
 800d3c0:	1e5c      	subs	r4, r3, #1
 800d3c2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d3c4:	42a3      	cmp	r3, r4
 800d3c6:	bfbf      	itttt	lt
 800d3c8:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800d3ca:	9a0e      	ldrlt	r2, [sp, #56]	@ 0x38
 800d3cc:	1ae3      	sublt	r3, r4, r3
 800d3ce:	18d2      	addlt	r2, r2, r3
 800d3d0:	bfa8      	it	ge
 800d3d2:	1b1c      	subge	r4, r3, r4
 800d3d4:	9b07      	ldr	r3, [sp, #28]
 800d3d6:	bfbe      	ittt	lt
 800d3d8:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800d3da:	920e      	strlt	r2, [sp, #56]	@ 0x38
 800d3dc:	2400      	movlt	r4, #0
 800d3de:	2b00      	cmp	r3, #0
 800d3e0:	bfb5      	itete	lt
 800d3e2:	eba8 0603 	sublt.w	r6, r8, r3
 800d3e6:	4646      	movge	r6, r8
 800d3e8:	2300      	movlt	r3, #0
 800d3ea:	9b07      	ldrge	r3, [sp, #28]
 800d3ec:	e730      	b.n	800d250 <_dtoa_r+0x730>
 800d3ee:	4646      	mov	r6, r8
 800d3f0:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800d3f2:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800d3f4:	e735      	b.n	800d262 <_dtoa_r+0x742>
 800d3f6:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800d3f8:	e75c      	b.n	800d2b4 <_dtoa_r+0x794>
 800d3fa:	2300      	movs	r3, #0
 800d3fc:	e788      	b.n	800d310 <_dtoa_r+0x7f0>
 800d3fe:	9b02      	ldr	r3, [sp, #8]
 800d400:	e786      	b.n	800d310 <_dtoa_r+0x7f0>
 800d402:	2300      	movs	r3, #0
 800d404:	930a      	str	r3, [sp, #40]	@ 0x28
 800d406:	e788      	b.n	800d31a <_dtoa_r+0x7fa>
 800d408:	d09f      	beq.n	800d34a <_dtoa_r+0x82a>
 800d40a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800d40c:	331c      	adds	r3, #28
 800d40e:	441a      	add	r2, r3
 800d410:	4498      	add	r8, r3
 800d412:	441e      	add	r6, r3
 800d414:	9209      	str	r2, [sp, #36]	@ 0x24
 800d416:	e798      	b.n	800d34a <_dtoa_r+0x82a>
 800d418:	4603      	mov	r3, r0
 800d41a:	e7f6      	b.n	800d40a <_dtoa_r+0x8ea>
 800d41c:	9b07      	ldr	r3, [sp, #28]
 800d41e:	9704      	str	r7, [sp, #16]
 800d420:	2b00      	cmp	r3, #0
 800d422:	dc20      	bgt.n	800d466 <_dtoa_r+0x946>
 800d424:	9308      	str	r3, [sp, #32]
 800d426:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800d428:	2b02      	cmp	r3, #2
 800d42a:	dd1e      	ble.n	800d46a <_dtoa_r+0x94a>
 800d42c:	9b08      	ldr	r3, [sp, #32]
 800d42e:	2b00      	cmp	r3, #0
 800d430:	f47f aebc 	bne.w	800d1ac <_dtoa_r+0x68c>
 800d434:	4621      	mov	r1, r4
 800d436:	2205      	movs	r2, #5
 800d438:	4658      	mov	r0, fp
 800d43a:	f000 fde5 	bl	800e008 <__multadd>
 800d43e:	4601      	mov	r1, r0
 800d440:	4604      	mov	r4, r0
 800d442:	4648      	mov	r0, r9
 800d444:	f001 f840 	bl	800e4c8 <__mcmp>
 800d448:	2800      	cmp	r0, #0
 800d44a:	f77f aeaf 	ble.w	800d1ac <_dtoa_r+0x68c>
 800d44e:	2331      	movs	r3, #49	@ 0x31
 800d450:	4656      	mov	r6, sl
 800d452:	f806 3b01 	strb.w	r3, [r6], #1
 800d456:	9b04      	ldr	r3, [sp, #16]
 800d458:	3301      	adds	r3, #1
 800d45a:	9304      	str	r3, [sp, #16]
 800d45c:	e6aa      	b.n	800d1b4 <_dtoa_r+0x694>
 800d45e:	9c07      	ldr	r4, [sp, #28]
 800d460:	9704      	str	r7, [sp, #16]
 800d462:	4625      	mov	r5, r4
 800d464:	e7f3      	b.n	800d44e <_dtoa_r+0x92e>
 800d466:	9b07      	ldr	r3, [sp, #28]
 800d468:	9308      	str	r3, [sp, #32]
 800d46a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800d46c:	2b00      	cmp	r3, #0
 800d46e:	f000 8104 	beq.w	800d67a <_dtoa_r+0xb5a>
 800d472:	2e00      	cmp	r6, #0
 800d474:	dd05      	ble.n	800d482 <_dtoa_r+0x962>
 800d476:	4629      	mov	r1, r5
 800d478:	4632      	mov	r2, r6
 800d47a:	4658      	mov	r0, fp
 800d47c:	f000 ffb8 	bl	800e3f0 <__lshift>
 800d480:	4605      	mov	r5, r0
 800d482:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d484:	2b00      	cmp	r3, #0
 800d486:	d05a      	beq.n	800d53e <_dtoa_r+0xa1e>
 800d488:	4658      	mov	r0, fp
 800d48a:	6869      	ldr	r1, [r5, #4]
 800d48c:	f000 fd5a 	bl	800df44 <_Balloc>
 800d490:	4606      	mov	r6, r0
 800d492:	b928      	cbnz	r0, 800d4a0 <_dtoa_r+0x980>
 800d494:	4602      	mov	r2, r0
 800d496:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800d49a:	4b83      	ldr	r3, [pc, #524]	@ (800d6a8 <_dtoa_r+0xb88>)
 800d49c:	f7ff bb54 	b.w	800cb48 <_dtoa_r+0x28>
 800d4a0:	692a      	ldr	r2, [r5, #16]
 800d4a2:	f105 010c 	add.w	r1, r5, #12
 800d4a6:	3202      	adds	r2, #2
 800d4a8:	0092      	lsls	r2, r2, #2
 800d4aa:	300c      	adds	r0, #12
 800d4ac:	f7ff fa99 	bl	800c9e2 <memcpy>
 800d4b0:	2201      	movs	r2, #1
 800d4b2:	4631      	mov	r1, r6
 800d4b4:	4658      	mov	r0, fp
 800d4b6:	f000 ff9b 	bl	800e3f0 <__lshift>
 800d4ba:	462f      	mov	r7, r5
 800d4bc:	4605      	mov	r5, r0
 800d4be:	f10a 0301 	add.w	r3, sl, #1
 800d4c2:	9307      	str	r3, [sp, #28]
 800d4c4:	9b08      	ldr	r3, [sp, #32]
 800d4c6:	4453      	add	r3, sl
 800d4c8:	930b      	str	r3, [sp, #44]	@ 0x2c
 800d4ca:	9b02      	ldr	r3, [sp, #8]
 800d4cc:	f003 0301 	and.w	r3, r3, #1
 800d4d0:	930a      	str	r3, [sp, #40]	@ 0x28
 800d4d2:	9b07      	ldr	r3, [sp, #28]
 800d4d4:	4621      	mov	r1, r4
 800d4d6:	3b01      	subs	r3, #1
 800d4d8:	4648      	mov	r0, r9
 800d4da:	9302      	str	r3, [sp, #8]
 800d4dc:	f7ff fa96 	bl	800ca0c <quorem>
 800d4e0:	4639      	mov	r1, r7
 800d4e2:	9008      	str	r0, [sp, #32]
 800d4e4:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800d4e8:	4648      	mov	r0, r9
 800d4ea:	f000 ffed 	bl	800e4c8 <__mcmp>
 800d4ee:	462a      	mov	r2, r5
 800d4f0:	9009      	str	r0, [sp, #36]	@ 0x24
 800d4f2:	4621      	mov	r1, r4
 800d4f4:	4658      	mov	r0, fp
 800d4f6:	f001 f803 	bl	800e500 <__mdiff>
 800d4fa:	68c2      	ldr	r2, [r0, #12]
 800d4fc:	4606      	mov	r6, r0
 800d4fe:	bb02      	cbnz	r2, 800d542 <_dtoa_r+0xa22>
 800d500:	4601      	mov	r1, r0
 800d502:	4648      	mov	r0, r9
 800d504:	f000 ffe0 	bl	800e4c8 <__mcmp>
 800d508:	4602      	mov	r2, r0
 800d50a:	4631      	mov	r1, r6
 800d50c:	4658      	mov	r0, fp
 800d50e:	920c      	str	r2, [sp, #48]	@ 0x30
 800d510:	f000 fd58 	bl	800dfc4 <_Bfree>
 800d514:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800d516:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800d518:	9e07      	ldr	r6, [sp, #28]
 800d51a:	ea43 0102 	orr.w	r1, r3, r2
 800d51e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d520:	4319      	orrs	r1, r3
 800d522:	d110      	bne.n	800d546 <_dtoa_r+0xa26>
 800d524:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800d528:	d029      	beq.n	800d57e <_dtoa_r+0xa5e>
 800d52a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d52c:	2b00      	cmp	r3, #0
 800d52e:	dd02      	ble.n	800d536 <_dtoa_r+0xa16>
 800d530:	9b08      	ldr	r3, [sp, #32]
 800d532:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 800d536:	9b02      	ldr	r3, [sp, #8]
 800d538:	f883 8000 	strb.w	r8, [r3]
 800d53c:	e63b      	b.n	800d1b6 <_dtoa_r+0x696>
 800d53e:	4628      	mov	r0, r5
 800d540:	e7bb      	b.n	800d4ba <_dtoa_r+0x99a>
 800d542:	2201      	movs	r2, #1
 800d544:	e7e1      	b.n	800d50a <_dtoa_r+0x9ea>
 800d546:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d548:	2b00      	cmp	r3, #0
 800d54a:	db04      	blt.n	800d556 <_dtoa_r+0xa36>
 800d54c:	9920      	ldr	r1, [sp, #128]	@ 0x80
 800d54e:	430b      	orrs	r3, r1
 800d550:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800d552:	430b      	orrs	r3, r1
 800d554:	d120      	bne.n	800d598 <_dtoa_r+0xa78>
 800d556:	2a00      	cmp	r2, #0
 800d558:	dded      	ble.n	800d536 <_dtoa_r+0xa16>
 800d55a:	4649      	mov	r1, r9
 800d55c:	2201      	movs	r2, #1
 800d55e:	4658      	mov	r0, fp
 800d560:	f000 ff46 	bl	800e3f0 <__lshift>
 800d564:	4621      	mov	r1, r4
 800d566:	4681      	mov	r9, r0
 800d568:	f000 ffae 	bl	800e4c8 <__mcmp>
 800d56c:	2800      	cmp	r0, #0
 800d56e:	dc03      	bgt.n	800d578 <_dtoa_r+0xa58>
 800d570:	d1e1      	bne.n	800d536 <_dtoa_r+0xa16>
 800d572:	f018 0f01 	tst.w	r8, #1
 800d576:	d0de      	beq.n	800d536 <_dtoa_r+0xa16>
 800d578:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800d57c:	d1d8      	bne.n	800d530 <_dtoa_r+0xa10>
 800d57e:	2339      	movs	r3, #57	@ 0x39
 800d580:	9a02      	ldr	r2, [sp, #8]
 800d582:	7013      	strb	r3, [r2, #0]
 800d584:	4633      	mov	r3, r6
 800d586:	461e      	mov	r6, r3
 800d588:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800d58c:	3b01      	subs	r3, #1
 800d58e:	2a39      	cmp	r2, #57	@ 0x39
 800d590:	d052      	beq.n	800d638 <_dtoa_r+0xb18>
 800d592:	3201      	adds	r2, #1
 800d594:	701a      	strb	r2, [r3, #0]
 800d596:	e60e      	b.n	800d1b6 <_dtoa_r+0x696>
 800d598:	2a00      	cmp	r2, #0
 800d59a:	dd07      	ble.n	800d5ac <_dtoa_r+0xa8c>
 800d59c:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800d5a0:	d0ed      	beq.n	800d57e <_dtoa_r+0xa5e>
 800d5a2:	9a02      	ldr	r2, [sp, #8]
 800d5a4:	f108 0301 	add.w	r3, r8, #1
 800d5a8:	7013      	strb	r3, [r2, #0]
 800d5aa:	e604      	b.n	800d1b6 <_dtoa_r+0x696>
 800d5ac:	9b07      	ldr	r3, [sp, #28]
 800d5ae:	9a07      	ldr	r2, [sp, #28]
 800d5b0:	f803 8c01 	strb.w	r8, [r3, #-1]
 800d5b4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800d5b6:	4293      	cmp	r3, r2
 800d5b8:	d028      	beq.n	800d60c <_dtoa_r+0xaec>
 800d5ba:	4649      	mov	r1, r9
 800d5bc:	2300      	movs	r3, #0
 800d5be:	220a      	movs	r2, #10
 800d5c0:	4658      	mov	r0, fp
 800d5c2:	f000 fd21 	bl	800e008 <__multadd>
 800d5c6:	42af      	cmp	r7, r5
 800d5c8:	4681      	mov	r9, r0
 800d5ca:	f04f 0300 	mov.w	r3, #0
 800d5ce:	f04f 020a 	mov.w	r2, #10
 800d5d2:	4639      	mov	r1, r7
 800d5d4:	4658      	mov	r0, fp
 800d5d6:	d107      	bne.n	800d5e8 <_dtoa_r+0xac8>
 800d5d8:	f000 fd16 	bl	800e008 <__multadd>
 800d5dc:	4607      	mov	r7, r0
 800d5de:	4605      	mov	r5, r0
 800d5e0:	9b07      	ldr	r3, [sp, #28]
 800d5e2:	3301      	adds	r3, #1
 800d5e4:	9307      	str	r3, [sp, #28]
 800d5e6:	e774      	b.n	800d4d2 <_dtoa_r+0x9b2>
 800d5e8:	f000 fd0e 	bl	800e008 <__multadd>
 800d5ec:	4629      	mov	r1, r5
 800d5ee:	4607      	mov	r7, r0
 800d5f0:	2300      	movs	r3, #0
 800d5f2:	220a      	movs	r2, #10
 800d5f4:	4658      	mov	r0, fp
 800d5f6:	f000 fd07 	bl	800e008 <__multadd>
 800d5fa:	4605      	mov	r5, r0
 800d5fc:	e7f0      	b.n	800d5e0 <_dtoa_r+0xac0>
 800d5fe:	9b08      	ldr	r3, [sp, #32]
 800d600:	2700      	movs	r7, #0
 800d602:	2b00      	cmp	r3, #0
 800d604:	bfcc      	ite	gt
 800d606:	461e      	movgt	r6, r3
 800d608:	2601      	movle	r6, #1
 800d60a:	4456      	add	r6, sl
 800d60c:	4649      	mov	r1, r9
 800d60e:	2201      	movs	r2, #1
 800d610:	4658      	mov	r0, fp
 800d612:	f000 feed 	bl	800e3f0 <__lshift>
 800d616:	4621      	mov	r1, r4
 800d618:	4681      	mov	r9, r0
 800d61a:	f000 ff55 	bl	800e4c8 <__mcmp>
 800d61e:	2800      	cmp	r0, #0
 800d620:	dcb0      	bgt.n	800d584 <_dtoa_r+0xa64>
 800d622:	d102      	bne.n	800d62a <_dtoa_r+0xb0a>
 800d624:	f018 0f01 	tst.w	r8, #1
 800d628:	d1ac      	bne.n	800d584 <_dtoa_r+0xa64>
 800d62a:	4633      	mov	r3, r6
 800d62c:	461e      	mov	r6, r3
 800d62e:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800d632:	2a30      	cmp	r2, #48	@ 0x30
 800d634:	d0fa      	beq.n	800d62c <_dtoa_r+0xb0c>
 800d636:	e5be      	b.n	800d1b6 <_dtoa_r+0x696>
 800d638:	459a      	cmp	sl, r3
 800d63a:	d1a4      	bne.n	800d586 <_dtoa_r+0xa66>
 800d63c:	9b04      	ldr	r3, [sp, #16]
 800d63e:	3301      	adds	r3, #1
 800d640:	9304      	str	r3, [sp, #16]
 800d642:	2331      	movs	r3, #49	@ 0x31
 800d644:	f88a 3000 	strb.w	r3, [sl]
 800d648:	e5b5      	b.n	800d1b6 <_dtoa_r+0x696>
 800d64a:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800d64c:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800d6ac <_dtoa_r+0xb8c>
 800d650:	b11b      	cbz	r3, 800d65a <_dtoa_r+0xb3a>
 800d652:	f10a 0308 	add.w	r3, sl, #8
 800d656:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 800d658:	6013      	str	r3, [r2, #0]
 800d65a:	4650      	mov	r0, sl
 800d65c:	b017      	add	sp, #92	@ 0x5c
 800d65e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d662:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800d664:	2b01      	cmp	r3, #1
 800d666:	f77f ae3d 	ble.w	800d2e4 <_dtoa_r+0x7c4>
 800d66a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d66c:	930a      	str	r3, [sp, #40]	@ 0x28
 800d66e:	2001      	movs	r0, #1
 800d670:	e65b      	b.n	800d32a <_dtoa_r+0x80a>
 800d672:	9b08      	ldr	r3, [sp, #32]
 800d674:	2b00      	cmp	r3, #0
 800d676:	f77f aed6 	ble.w	800d426 <_dtoa_r+0x906>
 800d67a:	4656      	mov	r6, sl
 800d67c:	4621      	mov	r1, r4
 800d67e:	4648      	mov	r0, r9
 800d680:	f7ff f9c4 	bl	800ca0c <quorem>
 800d684:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800d688:	9b08      	ldr	r3, [sp, #32]
 800d68a:	f806 8b01 	strb.w	r8, [r6], #1
 800d68e:	eba6 020a 	sub.w	r2, r6, sl
 800d692:	4293      	cmp	r3, r2
 800d694:	ddb3      	ble.n	800d5fe <_dtoa_r+0xade>
 800d696:	4649      	mov	r1, r9
 800d698:	2300      	movs	r3, #0
 800d69a:	220a      	movs	r2, #10
 800d69c:	4658      	mov	r0, fp
 800d69e:	f000 fcb3 	bl	800e008 <__multadd>
 800d6a2:	4681      	mov	r9, r0
 800d6a4:	e7ea      	b.n	800d67c <_dtoa_r+0xb5c>
 800d6a6:	bf00      	nop
 800d6a8:	0800f720 	.word	0x0800f720
 800d6ac:	0800f6a4 	.word	0x0800f6a4

0800d6b0 <_free_r>:
 800d6b0:	b538      	push	{r3, r4, r5, lr}
 800d6b2:	4605      	mov	r5, r0
 800d6b4:	2900      	cmp	r1, #0
 800d6b6:	d040      	beq.n	800d73a <_free_r+0x8a>
 800d6b8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d6bc:	1f0c      	subs	r4, r1, #4
 800d6be:	2b00      	cmp	r3, #0
 800d6c0:	bfb8      	it	lt
 800d6c2:	18e4      	addlt	r4, r4, r3
 800d6c4:	f000 fc32 	bl	800df2c <__malloc_lock>
 800d6c8:	4a1c      	ldr	r2, [pc, #112]	@ (800d73c <_free_r+0x8c>)
 800d6ca:	6813      	ldr	r3, [r2, #0]
 800d6cc:	b933      	cbnz	r3, 800d6dc <_free_r+0x2c>
 800d6ce:	6063      	str	r3, [r4, #4]
 800d6d0:	6014      	str	r4, [r2, #0]
 800d6d2:	4628      	mov	r0, r5
 800d6d4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d6d8:	f000 bc2e 	b.w	800df38 <__malloc_unlock>
 800d6dc:	42a3      	cmp	r3, r4
 800d6de:	d908      	bls.n	800d6f2 <_free_r+0x42>
 800d6e0:	6820      	ldr	r0, [r4, #0]
 800d6e2:	1821      	adds	r1, r4, r0
 800d6e4:	428b      	cmp	r3, r1
 800d6e6:	bf01      	itttt	eq
 800d6e8:	6819      	ldreq	r1, [r3, #0]
 800d6ea:	685b      	ldreq	r3, [r3, #4]
 800d6ec:	1809      	addeq	r1, r1, r0
 800d6ee:	6021      	streq	r1, [r4, #0]
 800d6f0:	e7ed      	b.n	800d6ce <_free_r+0x1e>
 800d6f2:	461a      	mov	r2, r3
 800d6f4:	685b      	ldr	r3, [r3, #4]
 800d6f6:	b10b      	cbz	r3, 800d6fc <_free_r+0x4c>
 800d6f8:	42a3      	cmp	r3, r4
 800d6fa:	d9fa      	bls.n	800d6f2 <_free_r+0x42>
 800d6fc:	6811      	ldr	r1, [r2, #0]
 800d6fe:	1850      	adds	r0, r2, r1
 800d700:	42a0      	cmp	r0, r4
 800d702:	d10b      	bne.n	800d71c <_free_r+0x6c>
 800d704:	6820      	ldr	r0, [r4, #0]
 800d706:	4401      	add	r1, r0
 800d708:	1850      	adds	r0, r2, r1
 800d70a:	4283      	cmp	r3, r0
 800d70c:	6011      	str	r1, [r2, #0]
 800d70e:	d1e0      	bne.n	800d6d2 <_free_r+0x22>
 800d710:	6818      	ldr	r0, [r3, #0]
 800d712:	685b      	ldr	r3, [r3, #4]
 800d714:	4408      	add	r0, r1
 800d716:	6010      	str	r0, [r2, #0]
 800d718:	6053      	str	r3, [r2, #4]
 800d71a:	e7da      	b.n	800d6d2 <_free_r+0x22>
 800d71c:	d902      	bls.n	800d724 <_free_r+0x74>
 800d71e:	230c      	movs	r3, #12
 800d720:	602b      	str	r3, [r5, #0]
 800d722:	e7d6      	b.n	800d6d2 <_free_r+0x22>
 800d724:	6820      	ldr	r0, [r4, #0]
 800d726:	1821      	adds	r1, r4, r0
 800d728:	428b      	cmp	r3, r1
 800d72a:	bf01      	itttt	eq
 800d72c:	6819      	ldreq	r1, [r3, #0]
 800d72e:	685b      	ldreq	r3, [r3, #4]
 800d730:	1809      	addeq	r1, r1, r0
 800d732:	6021      	streq	r1, [r4, #0]
 800d734:	6063      	str	r3, [r4, #4]
 800d736:	6054      	str	r4, [r2, #4]
 800d738:	e7cb      	b.n	800d6d2 <_free_r+0x22>
 800d73a:	bd38      	pop	{r3, r4, r5, pc}
 800d73c:	20001704 	.word	0x20001704

0800d740 <rshift>:
 800d740:	6903      	ldr	r3, [r0, #16]
 800d742:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800d746:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800d74a:	f100 0414 	add.w	r4, r0, #20
 800d74e:	ea4f 1261 	mov.w	r2, r1, asr #5
 800d752:	dd46      	ble.n	800d7e2 <rshift+0xa2>
 800d754:	f011 011f 	ands.w	r1, r1, #31
 800d758:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800d75c:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800d760:	d10c      	bne.n	800d77c <rshift+0x3c>
 800d762:	4629      	mov	r1, r5
 800d764:	f100 0710 	add.w	r7, r0, #16
 800d768:	42b1      	cmp	r1, r6
 800d76a:	d335      	bcc.n	800d7d8 <rshift+0x98>
 800d76c:	1a9b      	subs	r3, r3, r2
 800d76e:	009b      	lsls	r3, r3, #2
 800d770:	1eea      	subs	r2, r5, #3
 800d772:	4296      	cmp	r6, r2
 800d774:	bf38      	it	cc
 800d776:	2300      	movcc	r3, #0
 800d778:	4423      	add	r3, r4
 800d77a:	e015      	b.n	800d7a8 <rshift+0x68>
 800d77c:	46a1      	mov	r9, r4
 800d77e:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800d782:	f1c1 0820 	rsb	r8, r1, #32
 800d786:	40cf      	lsrs	r7, r1
 800d788:	f105 0e04 	add.w	lr, r5, #4
 800d78c:	4576      	cmp	r6, lr
 800d78e:	46f4      	mov	ip, lr
 800d790:	d816      	bhi.n	800d7c0 <rshift+0x80>
 800d792:	1a9a      	subs	r2, r3, r2
 800d794:	0092      	lsls	r2, r2, #2
 800d796:	3a04      	subs	r2, #4
 800d798:	3501      	adds	r5, #1
 800d79a:	42ae      	cmp	r6, r5
 800d79c:	bf38      	it	cc
 800d79e:	2200      	movcc	r2, #0
 800d7a0:	18a3      	adds	r3, r4, r2
 800d7a2:	50a7      	str	r7, [r4, r2]
 800d7a4:	b107      	cbz	r7, 800d7a8 <rshift+0x68>
 800d7a6:	3304      	adds	r3, #4
 800d7a8:	42a3      	cmp	r3, r4
 800d7aa:	eba3 0204 	sub.w	r2, r3, r4
 800d7ae:	bf08      	it	eq
 800d7b0:	2300      	moveq	r3, #0
 800d7b2:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800d7b6:	6102      	str	r2, [r0, #16]
 800d7b8:	bf08      	it	eq
 800d7ba:	6143      	streq	r3, [r0, #20]
 800d7bc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d7c0:	f8dc c000 	ldr.w	ip, [ip]
 800d7c4:	fa0c fc08 	lsl.w	ip, ip, r8
 800d7c8:	ea4c 0707 	orr.w	r7, ip, r7
 800d7cc:	f849 7b04 	str.w	r7, [r9], #4
 800d7d0:	f85e 7b04 	ldr.w	r7, [lr], #4
 800d7d4:	40cf      	lsrs	r7, r1
 800d7d6:	e7d9      	b.n	800d78c <rshift+0x4c>
 800d7d8:	f851 cb04 	ldr.w	ip, [r1], #4
 800d7dc:	f847 cf04 	str.w	ip, [r7, #4]!
 800d7e0:	e7c2      	b.n	800d768 <rshift+0x28>
 800d7e2:	4623      	mov	r3, r4
 800d7e4:	e7e0      	b.n	800d7a8 <rshift+0x68>

0800d7e6 <__hexdig_fun>:
 800d7e6:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800d7ea:	2b09      	cmp	r3, #9
 800d7ec:	d802      	bhi.n	800d7f4 <__hexdig_fun+0xe>
 800d7ee:	3820      	subs	r0, #32
 800d7f0:	b2c0      	uxtb	r0, r0
 800d7f2:	4770      	bx	lr
 800d7f4:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800d7f8:	2b05      	cmp	r3, #5
 800d7fa:	d801      	bhi.n	800d800 <__hexdig_fun+0x1a>
 800d7fc:	3847      	subs	r0, #71	@ 0x47
 800d7fe:	e7f7      	b.n	800d7f0 <__hexdig_fun+0xa>
 800d800:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800d804:	2b05      	cmp	r3, #5
 800d806:	d801      	bhi.n	800d80c <__hexdig_fun+0x26>
 800d808:	3827      	subs	r0, #39	@ 0x27
 800d80a:	e7f1      	b.n	800d7f0 <__hexdig_fun+0xa>
 800d80c:	2000      	movs	r0, #0
 800d80e:	4770      	bx	lr

0800d810 <__gethex>:
 800d810:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d814:	468a      	mov	sl, r1
 800d816:	4690      	mov	r8, r2
 800d818:	b085      	sub	sp, #20
 800d81a:	9302      	str	r3, [sp, #8]
 800d81c:	680b      	ldr	r3, [r1, #0]
 800d81e:	9001      	str	r0, [sp, #4]
 800d820:	1c9c      	adds	r4, r3, #2
 800d822:	46a1      	mov	r9, r4
 800d824:	f814 0b01 	ldrb.w	r0, [r4], #1
 800d828:	2830      	cmp	r0, #48	@ 0x30
 800d82a:	d0fa      	beq.n	800d822 <__gethex+0x12>
 800d82c:	eba9 0303 	sub.w	r3, r9, r3
 800d830:	f1a3 0b02 	sub.w	fp, r3, #2
 800d834:	f7ff ffd7 	bl	800d7e6 <__hexdig_fun>
 800d838:	4605      	mov	r5, r0
 800d83a:	2800      	cmp	r0, #0
 800d83c:	d168      	bne.n	800d910 <__gethex+0x100>
 800d83e:	2201      	movs	r2, #1
 800d840:	4648      	mov	r0, r9
 800d842:	499f      	ldr	r1, [pc, #636]	@ (800dac0 <__gethex+0x2b0>)
 800d844:	f7ff f835 	bl	800c8b2 <strncmp>
 800d848:	4607      	mov	r7, r0
 800d84a:	2800      	cmp	r0, #0
 800d84c:	d167      	bne.n	800d91e <__gethex+0x10e>
 800d84e:	f899 0001 	ldrb.w	r0, [r9, #1]
 800d852:	4626      	mov	r6, r4
 800d854:	f7ff ffc7 	bl	800d7e6 <__hexdig_fun>
 800d858:	2800      	cmp	r0, #0
 800d85a:	d062      	beq.n	800d922 <__gethex+0x112>
 800d85c:	4623      	mov	r3, r4
 800d85e:	7818      	ldrb	r0, [r3, #0]
 800d860:	4699      	mov	r9, r3
 800d862:	2830      	cmp	r0, #48	@ 0x30
 800d864:	f103 0301 	add.w	r3, r3, #1
 800d868:	d0f9      	beq.n	800d85e <__gethex+0x4e>
 800d86a:	f7ff ffbc 	bl	800d7e6 <__hexdig_fun>
 800d86e:	fab0 f580 	clz	r5, r0
 800d872:	f04f 0b01 	mov.w	fp, #1
 800d876:	096d      	lsrs	r5, r5, #5
 800d878:	464a      	mov	r2, r9
 800d87a:	4616      	mov	r6, r2
 800d87c:	7830      	ldrb	r0, [r6, #0]
 800d87e:	3201      	adds	r2, #1
 800d880:	f7ff ffb1 	bl	800d7e6 <__hexdig_fun>
 800d884:	2800      	cmp	r0, #0
 800d886:	d1f8      	bne.n	800d87a <__gethex+0x6a>
 800d888:	2201      	movs	r2, #1
 800d88a:	4630      	mov	r0, r6
 800d88c:	498c      	ldr	r1, [pc, #560]	@ (800dac0 <__gethex+0x2b0>)
 800d88e:	f7ff f810 	bl	800c8b2 <strncmp>
 800d892:	2800      	cmp	r0, #0
 800d894:	d13f      	bne.n	800d916 <__gethex+0x106>
 800d896:	b944      	cbnz	r4, 800d8aa <__gethex+0x9a>
 800d898:	1c74      	adds	r4, r6, #1
 800d89a:	4622      	mov	r2, r4
 800d89c:	4616      	mov	r6, r2
 800d89e:	7830      	ldrb	r0, [r6, #0]
 800d8a0:	3201      	adds	r2, #1
 800d8a2:	f7ff ffa0 	bl	800d7e6 <__hexdig_fun>
 800d8a6:	2800      	cmp	r0, #0
 800d8a8:	d1f8      	bne.n	800d89c <__gethex+0x8c>
 800d8aa:	1ba4      	subs	r4, r4, r6
 800d8ac:	00a7      	lsls	r7, r4, #2
 800d8ae:	7833      	ldrb	r3, [r6, #0]
 800d8b0:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 800d8b4:	2b50      	cmp	r3, #80	@ 0x50
 800d8b6:	d13e      	bne.n	800d936 <__gethex+0x126>
 800d8b8:	7873      	ldrb	r3, [r6, #1]
 800d8ba:	2b2b      	cmp	r3, #43	@ 0x2b
 800d8bc:	d033      	beq.n	800d926 <__gethex+0x116>
 800d8be:	2b2d      	cmp	r3, #45	@ 0x2d
 800d8c0:	d034      	beq.n	800d92c <__gethex+0x11c>
 800d8c2:	2400      	movs	r4, #0
 800d8c4:	1c71      	adds	r1, r6, #1
 800d8c6:	7808      	ldrb	r0, [r1, #0]
 800d8c8:	f7ff ff8d 	bl	800d7e6 <__hexdig_fun>
 800d8cc:	1e43      	subs	r3, r0, #1
 800d8ce:	b2db      	uxtb	r3, r3
 800d8d0:	2b18      	cmp	r3, #24
 800d8d2:	d830      	bhi.n	800d936 <__gethex+0x126>
 800d8d4:	f1a0 0210 	sub.w	r2, r0, #16
 800d8d8:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800d8dc:	f7ff ff83 	bl	800d7e6 <__hexdig_fun>
 800d8e0:	f100 3cff 	add.w	ip, r0, #4294967295	@ 0xffffffff
 800d8e4:	fa5f fc8c 	uxtb.w	ip, ip
 800d8e8:	f1bc 0f18 	cmp.w	ip, #24
 800d8ec:	f04f 030a 	mov.w	r3, #10
 800d8f0:	d91e      	bls.n	800d930 <__gethex+0x120>
 800d8f2:	b104      	cbz	r4, 800d8f6 <__gethex+0xe6>
 800d8f4:	4252      	negs	r2, r2
 800d8f6:	4417      	add	r7, r2
 800d8f8:	f8ca 1000 	str.w	r1, [sl]
 800d8fc:	b1ed      	cbz	r5, 800d93a <__gethex+0x12a>
 800d8fe:	f1bb 0f00 	cmp.w	fp, #0
 800d902:	bf0c      	ite	eq
 800d904:	2506      	moveq	r5, #6
 800d906:	2500      	movne	r5, #0
 800d908:	4628      	mov	r0, r5
 800d90a:	b005      	add	sp, #20
 800d90c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d910:	2500      	movs	r5, #0
 800d912:	462c      	mov	r4, r5
 800d914:	e7b0      	b.n	800d878 <__gethex+0x68>
 800d916:	2c00      	cmp	r4, #0
 800d918:	d1c7      	bne.n	800d8aa <__gethex+0x9a>
 800d91a:	4627      	mov	r7, r4
 800d91c:	e7c7      	b.n	800d8ae <__gethex+0x9e>
 800d91e:	464e      	mov	r6, r9
 800d920:	462f      	mov	r7, r5
 800d922:	2501      	movs	r5, #1
 800d924:	e7c3      	b.n	800d8ae <__gethex+0x9e>
 800d926:	2400      	movs	r4, #0
 800d928:	1cb1      	adds	r1, r6, #2
 800d92a:	e7cc      	b.n	800d8c6 <__gethex+0xb6>
 800d92c:	2401      	movs	r4, #1
 800d92e:	e7fb      	b.n	800d928 <__gethex+0x118>
 800d930:	fb03 0002 	mla	r0, r3, r2, r0
 800d934:	e7ce      	b.n	800d8d4 <__gethex+0xc4>
 800d936:	4631      	mov	r1, r6
 800d938:	e7de      	b.n	800d8f8 <__gethex+0xe8>
 800d93a:	4629      	mov	r1, r5
 800d93c:	eba6 0309 	sub.w	r3, r6, r9
 800d940:	3b01      	subs	r3, #1
 800d942:	2b07      	cmp	r3, #7
 800d944:	dc0a      	bgt.n	800d95c <__gethex+0x14c>
 800d946:	9801      	ldr	r0, [sp, #4]
 800d948:	f000 fafc 	bl	800df44 <_Balloc>
 800d94c:	4604      	mov	r4, r0
 800d94e:	b940      	cbnz	r0, 800d962 <__gethex+0x152>
 800d950:	4602      	mov	r2, r0
 800d952:	21e4      	movs	r1, #228	@ 0xe4
 800d954:	4b5b      	ldr	r3, [pc, #364]	@ (800dac4 <__gethex+0x2b4>)
 800d956:	485c      	ldr	r0, [pc, #368]	@ (800dac8 <__gethex+0x2b8>)
 800d958:	f001 fa6a 	bl	800ee30 <__assert_func>
 800d95c:	3101      	adds	r1, #1
 800d95e:	105b      	asrs	r3, r3, #1
 800d960:	e7ef      	b.n	800d942 <__gethex+0x132>
 800d962:	2300      	movs	r3, #0
 800d964:	f100 0a14 	add.w	sl, r0, #20
 800d968:	4655      	mov	r5, sl
 800d96a:	469b      	mov	fp, r3
 800d96c:	45b1      	cmp	r9, r6
 800d96e:	d337      	bcc.n	800d9e0 <__gethex+0x1d0>
 800d970:	f845 bb04 	str.w	fp, [r5], #4
 800d974:	eba5 050a 	sub.w	r5, r5, sl
 800d978:	10ad      	asrs	r5, r5, #2
 800d97a:	6125      	str	r5, [r4, #16]
 800d97c:	4658      	mov	r0, fp
 800d97e:	f000 fbd3 	bl	800e128 <__hi0bits>
 800d982:	016d      	lsls	r5, r5, #5
 800d984:	f8d8 6000 	ldr.w	r6, [r8]
 800d988:	1a2d      	subs	r5, r5, r0
 800d98a:	42b5      	cmp	r5, r6
 800d98c:	dd54      	ble.n	800da38 <__gethex+0x228>
 800d98e:	1bad      	subs	r5, r5, r6
 800d990:	4629      	mov	r1, r5
 800d992:	4620      	mov	r0, r4
 800d994:	f000 ff5b 	bl	800e84e <__any_on>
 800d998:	4681      	mov	r9, r0
 800d99a:	b178      	cbz	r0, 800d9bc <__gethex+0x1ac>
 800d99c:	f04f 0901 	mov.w	r9, #1
 800d9a0:	1e6b      	subs	r3, r5, #1
 800d9a2:	1159      	asrs	r1, r3, #5
 800d9a4:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800d9a8:	f003 021f 	and.w	r2, r3, #31
 800d9ac:	fa09 f202 	lsl.w	r2, r9, r2
 800d9b0:	420a      	tst	r2, r1
 800d9b2:	d003      	beq.n	800d9bc <__gethex+0x1ac>
 800d9b4:	454b      	cmp	r3, r9
 800d9b6:	dc36      	bgt.n	800da26 <__gethex+0x216>
 800d9b8:	f04f 0902 	mov.w	r9, #2
 800d9bc:	4629      	mov	r1, r5
 800d9be:	4620      	mov	r0, r4
 800d9c0:	f7ff febe 	bl	800d740 <rshift>
 800d9c4:	442f      	add	r7, r5
 800d9c6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800d9ca:	42bb      	cmp	r3, r7
 800d9cc:	da42      	bge.n	800da54 <__gethex+0x244>
 800d9ce:	4621      	mov	r1, r4
 800d9d0:	9801      	ldr	r0, [sp, #4]
 800d9d2:	f000 faf7 	bl	800dfc4 <_Bfree>
 800d9d6:	2300      	movs	r3, #0
 800d9d8:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800d9da:	25a3      	movs	r5, #163	@ 0xa3
 800d9dc:	6013      	str	r3, [r2, #0]
 800d9de:	e793      	b.n	800d908 <__gethex+0xf8>
 800d9e0:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 800d9e4:	2a2e      	cmp	r2, #46	@ 0x2e
 800d9e6:	d012      	beq.n	800da0e <__gethex+0x1fe>
 800d9e8:	2b20      	cmp	r3, #32
 800d9ea:	d104      	bne.n	800d9f6 <__gethex+0x1e6>
 800d9ec:	f845 bb04 	str.w	fp, [r5], #4
 800d9f0:	f04f 0b00 	mov.w	fp, #0
 800d9f4:	465b      	mov	r3, fp
 800d9f6:	7830      	ldrb	r0, [r6, #0]
 800d9f8:	9303      	str	r3, [sp, #12]
 800d9fa:	f7ff fef4 	bl	800d7e6 <__hexdig_fun>
 800d9fe:	9b03      	ldr	r3, [sp, #12]
 800da00:	f000 000f 	and.w	r0, r0, #15
 800da04:	4098      	lsls	r0, r3
 800da06:	ea4b 0b00 	orr.w	fp, fp, r0
 800da0a:	3304      	adds	r3, #4
 800da0c:	e7ae      	b.n	800d96c <__gethex+0x15c>
 800da0e:	45b1      	cmp	r9, r6
 800da10:	d8ea      	bhi.n	800d9e8 <__gethex+0x1d8>
 800da12:	2201      	movs	r2, #1
 800da14:	4630      	mov	r0, r6
 800da16:	492a      	ldr	r1, [pc, #168]	@ (800dac0 <__gethex+0x2b0>)
 800da18:	9303      	str	r3, [sp, #12]
 800da1a:	f7fe ff4a 	bl	800c8b2 <strncmp>
 800da1e:	9b03      	ldr	r3, [sp, #12]
 800da20:	2800      	cmp	r0, #0
 800da22:	d1e1      	bne.n	800d9e8 <__gethex+0x1d8>
 800da24:	e7a2      	b.n	800d96c <__gethex+0x15c>
 800da26:	4620      	mov	r0, r4
 800da28:	1ea9      	subs	r1, r5, #2
 800da2a:	f000 ff10 	bl	800e84e <__any_on>
 800da2e:	2800      	cmp	r0, #0
 800da30:	d0c2      	beq.n	800d9b8 <__gethex+0x1a8>
 800da32:	f04f 0903 	mov.w	r9, #3
 800da36:	e7c1      	b.n	800d9bc <__gethex+0x1ac>
 800da38:	da09      	bge.n	800da4e <__gethex+0x23e>
 800da3a:	1b75      	subs	r5, r6, r5
 800da3c:	4621      	mov	r1, r4
 800da3e:	462a      	mov	r2, r5
 800da40:	9801      	ldr	r0, [sp, #4]
 800da42:	f000 fcd5 	bl	800e3f0 <__lshift>
 800da46:	4604      	mov	r4, r0
 800da48:	1b7f      	subs	r7, r7, r5
 800da4a:	f100 0a14 	add.w	sl, r0, #20
 800da4e:	f04f 0900 	mov.w	r9, #0
 800da52:	e7b8      	b.n	800d9c6 <__gethex+0x1b6>
 800da54:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800da58:	42bd      	cmp	r5, r7
 800da5a:	dd6f      	ble.n	800db3c <__gethex+0x32c>
 800da5c:	1bed      	subs	r5, r5, r7
 800da5e:	42ae      	cmp	r6, r5
 800da60:	dc34      	bgt.n	800dacc <__gethex+0x2bc>
 800da62:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800da66:	2b02      	cmp	r3, #2
 800da68:	d022      	beq.n	800dab0 <__gethex+0x2a0>
 800da6a:	2b03      	cmp	r3, #3
 800da6c:	d024      	beq.n	800dab8 <__gethex+0x2a8>
 800da6e:	2b01      	cmp	r3, #1
 800da70:	d115      	bne.n	800da9e <__gethex+0x28e>
 800da72:	42ae      	cmp	r6, r5
 800da74:	d113      	bne.n	800da9e <__gethex+0x28e>
 800da76:	2e01      	cmp	r6, #1
 800da78:	d10b      	bne.n	800da92 <__gethex+0x282>
 800da7a:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800da7e:	9a02      	ldr	r2, [sp, #8]
 800da80:	2562      	movs	r5, #98	@ 0x62
 800da82:	6013      	str	r3, [r2, #0]
 800da84:	2301      	movs	r3, #1
 800da86:	6123      	str	r3, [r4, #16]
 800da88:	f8ca 3000 	str.w	r3, [sl]
 800da8c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800da8e:	601c      	str	r4, [r3, #0]
 800da90:	e73a      	b.n	800d908 <__gethex+0xf8>
 800da92:	4620      	mov	r0, r4
 800da94:	1e71      	subs	r1, r6, #1
 800da96:	f000 feda 	bl	800e84e <__any_on>
 800da9a:	2800      	cmp	r0, #0
 800da9c:	d1ed      	bne.n	800da7a <__gethex+0x26a>
 800da9e:	4621      	mov	r1, r4
 800daa0:	9801      	ldr	r0, [sp, #4]
 800daa2:	f000 fa8f 	bl	800dfc4 <_Bfree>
 800daa6:	2300      	movs	r3, #0
 800daa8:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800daaa:	2550      	movs	r5, #80	@ 0x50
 800daac:	6013      	str	r3, [r2, #0]
 800daae:	e72b      	b.n	800d908 <__gethex+0xf8>
 800dab0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800dab2:	2b00      	cmp	r3, #0
 800dab4:	d1f3      	bne.n	800da9e <__gethex+0x28e>
 800dab6:	e7e0      	b.n	800da7a <__gethex+0x26a>
 800dab8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800daba:	2b00      	cmp	r3, #0
 800dabc:	d1dd      	bne.n	800da7a <__gethex+0x26a>
 800dabe:	e7ee      	b.n	800da9e <__gethex+0x28e>
 800dac0:	0800f610 	.word	0x0800f610
 800dac4:	0800f720 	.word	0x0800f720
 800dac8:	0800f731 	.word	0x0800f731
 800dacc:	1e6f      	subs	r7, r5, #1
 800dace:	f1b9 0f00 	cmp.w	r9, #0
 800dad2:	d130      	bne.n	800db36 <__gethex+0x326>
 800dad4:	b127      	cbz	r7, 800dae0 <__gethex+0x2d0>
 800dad6:	4639      	mov	r1, r7
 800dad8:	4620      	mov	r0, r4
 800dada:	f000 feb8 	bl	800e84e <__any_on>
 800dade:	4681      	mov	r9, r0
 800dae0:	2301      	movs	r3, #1
 800dae2:	4629      	mov	r1, r5
 800dae4:	1b76      	subs	r6, r6, r5
 800dae6:	2502      	movs	r5, #2
 800dae8:	117a      	asrs	r2, r7, #5
 800daea:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800daee:	f007 071f 	and.w	r7, r7, #31
 800daf2:	40bb      	lsls	r3, r7
 800daf4:	4213      	tst	r3, r2
 800daf6:	4620      	mov	r0, r4
 800daf8:	bf18      	it	ne
 800dafa:	f049 0902 	orrne.w	r9, r9, #2
 800dafe:	f7ff fe1f 	bl	800d740 <rshift>
 800db02:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800db06:	f1b9 0f00 	cmp.w	r9, #0
 800db0a:	d047      	beq.n	800db9c <__gethex+0x38c>
 800db0c:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800db10:	2b02      	cmp	r3, #2
 800db12:	d015      	beq.n	800db40 <__gethex+0x330>
 800db14:	2b03      	cmp	r3, #3
 800db16:	d017      	beq.n	800db48 <__gethex+0x338>
 800db18:	2b01      	cmp	r3, #1
 800db1a:	d109      	bne.n	800db30 <__gethex+0x320>
 800db1c:	f019 0f02 	tst.w	r9, #2
 800db20:	d006      	beq.n	800db30 <__gethex+0x320>
 800db22:	f8da 3000 	ldr.w	r3, [sl]
 800db26:	ea49 0903 	orr.w	r9, r9, r3
 800db2a:	f019 0f01 	tst.w	r9, #1
 800db2e:	d10e      	bne.n	800db4e <__gethex+0x33e>
 800db30:	f045 0510 	orr.w	r5, r5, #16
 800db34:	e032      	b.n	800db9c <__gethex+0x38c>
 800db36:	f04f 0901 	mov.w	r9, #1
 800db3a:	e7d1      	b.n	800dae0 <__gethex+0x2d0>
 800db3c:	2501      	movs	r5, #1
 800db3e:	e7e2      	b.n	800db06 <__gethex+0x2f6>
 800db40:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800db42:	f1c3 0301 	rsb	r3, r3, #1
 800db46:	930f      	str	r3, [sp, #60]	@ 0x3c
 800db48:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800db4a:	2b00      	cmp	r3, #0
 800db4c:	d0f0      	beq.n	800db30 <__gethex+0x320>
 800db4e:	f04f 0c00 	mov.w	ip, #0
 800db52:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800db56:	f104 0314 	add.w	r3, r4, #20
 800db5a:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800db5e:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800db62:	4618      	mov	r0, r3
 800db64:	f853 2b04 	ldr.w	r2, [r3], #4
 800db68:	f1b2 3fff 	cmp.w	r2, #4294967295	@ 0xffffffff
 800db6c:	d01b      	beq.n	800dba6 <__gethex+0x396>
 800db6e:	3201      	adds	r2, #1
 800db70:	6002      	str	r2, [r0, #0]
 800db72:	2d02      	cmp	r5, #2
 800db74:	f104 0314 	add.w	r3, r4, #20
 800db78:	d13c      	bne.n	800dbf4 <__gethex+0x3e4>
 800db7a:	f8d8 2000 	ldr.w	r2, [r8]
 800db7e:	3a01      	subs	r2, #1
 800db80:	42b2      	cmp	r2, r6
 800db82:	d109      	bne.n	800db98 <__gethex+0x388>
 800db84:	2201      	movs	r2, #1
 800db86:	1171      	asrs	r1, r6, #5
 800db88:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800db8c:	f006 061f 	and.w	r6, r6, #31
 800db90:	fa02 f606 	lsl.w	r6, r2, r6
 800db94:	421e      	tst	r6, r3
 800db96:	d13a      	bne.n	800dc0e <__gethex+0x3fe>
 800db98:	f045 0520 	orr.w	r5, r5, #32
 800db9c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800db9e:	601c      	str	r4, [r3, #0]
 800dba0:	9b02      	ldr	r3, [sp, #8]
 800dba2:	601f      	str	r7, [r3, #0]
 800dba4:	e6b0      	b.n	800d908 <__gethex+0xf8>
 800dba6:	4299      	cmp	r1, r3
 800dba8:	f843 cc04 	str.w	ip, [r3, #-4]
 800dbac:	d8d9      	bhi.n	800db62 <__gethex+0x352>
 800dbae:	68a3      	ldr	r3, [r4, #8]
 800dbb0:	459b      	cmp	fp, r3
 800dbb2:	db17      	blt.n	800dbe4 <__gethex+0x3d4>
 800dbb4:	6861      	ldr	r1, [r4, #4]
 800dbb6:	9801      	ldr	r0, [sp, #4]
 800dbb8:	3101      	adds	r1, #1
 800dbba:	f000 f9c3 	bl	800df44 <_Balloc>
 800dbbe:	4681      	mov	r9, r0
 800dbc0:	b918      	cbnz	r0, 800dbca <__gethex+0x3ba>
 800dbc2:	4602      	mov	r2, r0
 800dbc4:	2184      	movs	r1, #132	@ 0x84
 800dbc6:	4b19      	ldr	r3, [pc, #100]	@ (800dc2c <__gethex+0x41c>)
 800dbc8:	e6c5      	b.n	800d956 <__gethex+0x146>
 800dbca:	6922      	ldr	r2, [r4, #16]
 800dbcc:	f104 010c 	add.w	r1, r4, #12
 800dbd0:	3202      	adds	r2, #2
 800dbd2:	0092      	lsls	r2, r2, #2
 800dbd4:	300c      	adds	r0, #12
 800dbd6:	f7fe ff04 	bl	800c9e2 <memcpy>
 800dbda:	4621      	mov	r1, r4
 800dbdc:	9801      	ldr	r0, [sp, #4]
 800dbde:	f000 f9f1 	bl	800dfc4 <_Bfree>
 800dbe2:	464c      	mov	r4, r9
 800dbe4:	6923      	ldr	r3, [r4, #16]
 800dbe6:	1c5a      	adds	r2, r3, #1
 800dbe8:	6122      	str	r2, [r4, #16]
 800dbea:	2201      	movs	r2, #1
 800dbec:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800dbf0:	615a      	str	r2, [r3, #20]
 800dbf2:	e7be      	b.n	800db72 <__gethex+0x362>
 800dbf4:	6922      	ldr	r2, [r4, #16]
 800dbf6:	455a      	cmp	r2, fp
 800dbf8:	dd0b      	ble.n	800dc12 <__gethex+0x402>
 800dbfa:	2101      	movs	r1, #1
 800dbfc:	4620      	mov	r0, r4
 800dbfe:	f7ff fd9f 	bl	800d740 <rshift>
 800dc02:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800dc06:	3701      	adds	r7, #1
 800dc08:	42bb      	cmp	r3, r7
 800dc0a:	f6ff aee0 	blt.w	800d9ce <__gethex+0x1be>
 800dc0e:	2501      	movs	r5, #1
 800dc10:	e7c2      	b.n	800db98 <__gethex+0x388>
 800dc12:	f016 061f 	ands.w	r6, r6, #31
 800dc16:	d0fa      	beq.n	800dc0e <__gethex+0x3fe>
 800dc18:	4453      	add	r3, sl
 800dc1a:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800dc1e:	f000 fa83 	bl	800e128 <__hi0bits>
 800dc22:	f1c6 0620 	rsb	r6, r6, #32
 800dc26:	42b0      	cmp	r0, r6
 800dc28:	dbe7      	blt.n	800dbfa <__gethex+0x3ea>
 800dc2a:	e7f0      	b.n	800dc0e <__gethex+0x3fe>
 800dc2c:	0800f720 	.word	0x0800f720

0800dc30 <L_shift>:
 800dc30:	f1c2 0208 	rsb	r2, r2, #8
 800dc34:	0092      	lsls	r2, r2, #2
 800dc36:	b570      	push	{r4, r5, r6, lr}
 800dc38:	f1c2 0620 	rsb	r6, r2, #32
 800dc3c:	6843      	ldr	r3, [r0, #4]
 800dc3e:	6804      	ldr	r4, [r0, #0]
 800dc40:	fa03 f506 	lsl.w	r5, r3, r6
 800dc44:	432c      	orrs	r4, r5
 800dc46:	40d3      	lsrs	r3, r2
 800dc48:	6004      	str	r4, [r0, #0]
 800dc4a:	f840 3f04 	str.w	r3, [r0, #4]!
 800dc4e:	4288      	cmp	r0, r1
 800dc50:	d3f4      	bcc.n	800dc3c <L_shift+0xc>
 800dc52:	bd70      	pop	{r4, r5, r6, pc}

0800dc54 <__match>:
 800dc54:	b530      	push	{r4, r5, lr}
 800dc56:	6803      	ldr	r3, [r0, #0]
 800dc58:	3301      	adds	r3, #1
 800dc5a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800dc5e:	b914      	cbnz	r4, 800dc66 <__match+0x12>
 800dc60:	6003      	str	r3, [r0, #0]
 800dc62:	2001      	movs	r0, #1
 800dc64:	bd30      	pop	{r4, r5, pc}
 800dc66:	f813 2b01 	ldrb.w	r2, [r3], #1
 800dc6a:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800dc6e:	2d19      	cmp	r5, #25
 800dc70:	bf98      	it	ls
 800dc72:	3220      	addls	r2, #32
 800dc74:	42a2      	cmp	r2, r4
 800dc76:	d0f0      	beq.n	800dc5a <__match+0x6>
 800dc78:	2000      	movs	r0, #0
 800dc7a:	e7f3      	b.n	800dc64 <__match+0x10>

0800dc7c <__hexnan>:
 800dc7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dc80:	2500      	movs	r5, #0
 800dc82:	680b      	ldr	r3, [r1, #0]
 800dc84:	4682      	mov	sl, r0
 800dc86:	115e      	asrs	r6, r3, #5
 800dc88:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800dc8c:	f013 031f 	ands.w	r3, r3, #31
 800dc90:	bf18      	it	ne
 800dc92:	3604      	addne	r6, #4
 800dc94:	1f37      	subs	r7, r6, #4
 800dc96:	4690      	mov	r8, r2
 800dc98:	46b9      	mov	r9, r7
 800dc9a:	463c      	mov	r4, r7
 800dc9c:	46ab      	mov	fp, r5
 800dc9e:	b087      	sub	sp, #28
 800dca0:	6801      	ldr	r1, [r0, #0]
 800dca2:	9301      	str	r3, [sp, #4]
 800dca4:	f846 5c04 	str.w	r5, [r6, #-4]
 800dca8:	9502      	str	r5, [sp, #8]
 800dcaa:	784a      	ldrb	r2, [r1, #1]
 800dcac:	1c4b      	adds	r3, r1, #1
 800dcae:	9303      	str	r3, [sp, #12]
 800dcb0:	b342      	cbz	r2, 800dd04 <__hexnan+0x88>
 800dcb2:	4610      	mov	r0, r2
 800dcb4:	9105      	str	r1, [sp, #20]
 800dcb6:	9204      	str	r2, [sp, #16]
 800dcb8:	f7ff fd95 	bl	800d7e6 <__hexdig_fun>
 800dcbc:	2800      	cmp	r0, #0
 800dcbe:	d151      	bne.n	800dd64 <__hexnan+0xe8>
 800dcc0:	9a04      	ldr	r2, [sp, #16]
 800dcc2:	9905      	ldr	r1, [sp, #20]
 800dcc4:	2a20      	cmp	r2, #32
 800dcc6:	d818      	bhi.n	800dcfa <__hexnan+0x7e>
 800dcc8:	9b02      	ldr	r3, [sp, #8]
 800dcca:	459b      	cmp	fp, r3
 800dccc:	dd13      	ble.n	800dcf6 <__hexnan+0x7a>
 800dcce:	454c      	cmp	r4, r9
 800dcd0:	d206      	bcs.n	800dce0 <__hexnan+0x64>
 800dcd2:	2d07      	cmp	r5, #7
 800dcd4:	dc04      	bgt.n	800dce0 <__hexnan+0x64>
 800dcd6:	462a      	mov	r2, r5
 800dcd8:	4649      	mov	r1, r9
 800dcda:	4620      	mov	r0, r4
 800dcdc:	f7ff ffa8 	bl	800dc30 <L_shift>
 800dce0:	4544      	cmp	r4, r8
 800dce2:	d952      	bls.n	800dd8a <__hexnan+0x10e>
 800dce4:	2300      	movs	r3, #0
 800dce6:	f1a4 0904 	sub.w	r9, r4, #4
 800dcea:	f844 3c04 	str.w	r3, [r4, #-4]
 800dcee:	461d      	mov	r5, r3
 800dcf0:	464c      	mov	r4, r9
 800dcf2:	f8cd b008 	str.w	fp, [sp, #8]
 800dcf6:	9903      	ldr	r1, [sp, #12]
 800dcf8:	e7d7      	b.n	800dcaa <__hexnan+0x2e>
 800dcfa:	2a29      	cmp	r2, #41	@ 0x29
 800dcfc:	d157      	bne.n	800ddae <__hexnan+0x132>
 800dcfe:	3102      	adds	r1, #2
 800dd00:	f8ca 1000 	str.w	r1, [sl]
 800dd04:	f1bb 0f00 	cmp.w	fp, #0
 800dd08:	d051      	beq.n	800ddae <__hexnan+0x132>
 800dd0a:	454c      	cmp	r4, r9
 800dd0c:	d206      	bcs.n	800dd1c <__hexnan+0xa0>
 800dd0e:	2d07      	cmp	r5, #7
 800dd10:	dc04      	bgt.n	800dd1c <__hexnan+0xa0>
 800dd12:	462a      	mov	r2, r5
 800dd14:	4649      	mov	r1, r9
 800dd16:	4620      	mov	r0, r4
 800dd18:	f7ff ff8a 	bl	800dc30 <L_shift>
 800dd1c:	4544      	cmp	r4, r8
 800dd1e:	d936      	bls.n	800dd8e <__hexnan+0x112>
 800dd20:	4623      	mov	r3, r4
 800dd22:	f1a8 0204 	sub.w	r2, r8, #4
 800dd26:	f853 1b04 	ldr.w	r1, [r3], #4
 800dd2a:	429f      	cmp	r7, r3
 800dd2c:	f842 1f04 	str.w	r1, [r2, #4]!
 800dd30:	d2f9      	bcs.n	800dd26 <__hexnan+0xaa>
 800dd32:	1b3b      	subs	r3, r7, r4
 800dd34:	f023 0303 	bic.w	r3, r3, #3
 800dd38:	3304      	adds	r3, #4
 800dd3a:	3401      	adds	r4, #1
 800dd3c:	3e03      	subs	r6, #3
 800dd3e:	42b4      	cmp	r4, r6
 800dd40:	bf88      	it	hi
 800dd42:	2304      	movhi	r3, #4
 800dd44:	2200      	movs	r2, #0
 800dd46:	4443      	add	r3, r8
 800dd48:	f843 2b04 	str.w	r2, [r3], #4
 800dd4c:	429f      	cmp	r7, r3
 800dd4e:	d2fb      	bcs.n	800dd48 <__hexnan+0xcc>
 800dd50:	683b      	ldr	r3, [r7, #0]
 800dd52:	b91b      	cbnz	r3, 800dd5c <__hexnan+0xe0>
 800dd54:	4547      	cmp	r7, r8
 800dd56:	d128      	bne.n	800ddaa <__hexnan+0x12e>
 800dd58:	2301      	movs	r3, #1
 800dd5a:	603b      	str	r3, [r7, #0]
 800dd5c:	2005      	movs	r0, #5
 800dd5e:	b007      	add	sp, #28
 800dd60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dd64:	3501      	adds	r5, #1
 800dd66:	2d08      	cmp	r5, #8
 800dd68:	f10b 0b01 	add.w	fp, fp, #1
 800dd6c:	dd06      	ble.n	800dd7c <__hexnan+0x100>
 800dd6e:	4544      	cmp	r4, r8
 800dd70:	d9c1      	bls.n	800dcf6 <__hexnan+0x7a>
 800dd72:	2300      	movs	r3, #0
 800dd74:	2501      	movs	r5, #1
 800dd76:	f844 3c04 	str.w	r3, [r4, #-4]
 800dd7a:	3c04      	subs	r4, #4
 800dd7c:	6822      	ldr	r2, [r4, #0]
 800dd7e:	f000 000f 	and.w	r0, r0, #15
 800dd82:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800dd86:	6020      	str	r0, [r4, #0]
 800dd88:	e7b5      	b.n	800dcf6 <__hexnan+0x7a>
 800dd8a:	2508      	movs	r5, #8
 800dd8c:	e7b3      	b.n	800dcf6 <__hexnan+0x7a>
 800dd8e:	9b01      	ldr	r3, [sp, #4]
 800dd90:	2b00      	cmp	r3, #0
 800dd92:	d0dd      	beq.n	800dd50 <__hexnan+0xd4>
 800dd94:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800dd98:	f1c3 0320 	rsb	r3, r3, #32
 800dd9c:	40da      	lsrs	r2, r3
 800dd9e:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800dda2:	4013      	ands	r3, r2
 800dda4:	f846 3c04 	str.w	r3, [r6, #-4]
 800dda8:	e7d2      	b.n	800dd50 <__hexnan+0xd4>
 800ddaa:	3f04      	subs	r7, #4
 800ddac:	e7d0      	b.n	800dd50 <__hexnan+0xd4>
 800ddae:	2004      	movs	r0, #4
 800ddb0:	e7d5      	b.n	800dd5e <__hexnan+0xe2>
	...

0800ddb4 <malloc>:
 800ddb4:	4b02      	ldr	r3, [pc, #8]	@ (800ddc0 <malloc+0xc>)
 800ddb6:	4601      	mov	r1, r0
 800ddb8:	6818      	ldr	r0, [r3, #0]
 800ddba:	f000 b825 	b.w	800de08 <_malloc_r>
 800ddbe:	bf00      	nop
 800ddc0:	20000308 	.word	0x20000308

0800ddc4 <sbrk_aligned>:
 800ddc4:	b570      	push	{r4, r5, r6, lr}
 800ddc6:	4e0f      	ldr	r6, [pc, #60]	@ (800de04 <sbrk_aligned+0x40>)
 800ddc8:	460c      	mov	r4, r1
 800ddca:	6831      	ldr	r1, [r6, #0]
 800ddcc:	4605      	mov	r5, r0
 800ddce:	b911      	cbnz	r1, 800ddd6 <sbrk_aligned+0x12>
 800ddd0:	f001 f81e 	bl	800ee10 <_sbrk_r>
 800ddd4:	6030      	str	r0, [r6, #0]
 800ddd6:	4621      	mov	r1, r4
 800ddd8:	4628      	mov	r0, r5
 800ddda:	f001 f819 	bl	800ee10 <_sbrk_r>
 800ddde:	1c43      	adds	r3, r0, #1
 800dde0:	d103      	bne.n	800ddea <sbrk_aligned+0x26>
 800dde2:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 800dde6:	4620      	mov	r0, r4
 800dde8:	bd70      	pop	{r4, r5, r6, pc}
 800ddea:	1cc4      	adds	r4, r0, #3
 800ddec:	f024 0403 	bic.w	r4, r4, #3
 800ddf0:	42a0      	cmp	r0, r4
 800ddf2:	d0f8      	beq.n	800dde6 <sbrk_aligned+0x22>
 800ddf4:	1a21      	subs	r1, r4, r0
 800ddf6:	4628      	mov	r0, r5
 800ddf8:	f001 f80a 	bl	800ee10 <_sbrk_r>
 800ddfc:	3001      	adds	r0, #1
 800ddfe:	d1f2      	bne.n	800dde6 <sbrk_aligned+0x22>
 800de00:	e7ef      	b.n	800dde2 <sbrk_aligned+0x1e>
 800de02:	bf00      	nop
 800de04:	20001700 	.word	0x20001700

0800de08 <_malloc_r>:
 800de08:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800de0c:	1ccd      	adds	r5, r1, #3
 800de0e:	f025 0503 	bic.w	r5, r5, #3
 800de12:	3508      	adds	r5, #8
 800de14:	2d0c      	cmp	r5, #12
 800de16:	bf38      	it	cc
 800de18:	250c      	movcc	r5, #12
 800de1a:	2d00      	cmp	r5, #0
 800de1c:	4606      	mov	r6, r0
 800de1e:	db01      	blt.n	800de24 <_malloc_r+0x1c>
 800de20:	42a9      	cmp	r1, r5
 800de22:	d904      	bls.n	800de2e <_malloc_r+0x26>
 800de24:	230c      	movs	r3, #12
 800de26:	6033      	str	r3, [r6, #0]
 800de28:	2000      	movs	r0, #0
 800de2a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800de2e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800df04 <_malloc_r+0xfc>
 800de32:	f000 f87b 	bl	800df2c <__malloc_lock>
 800de36:	f8d8 3000 	ldr.w	r3, [r8]
 800de3a:	461c      	mov	r4, r3
 800de3c:	bb44      	cbnz	r4, 800de90 <_malloc_r+0x88>
 800de3e:	4629      	mov	r1, r5
 800de40:	4630      	mov	r0, r6
 800de42:	f7ff ffbf 	bl	800ddc4 <sbrk_aligned>
 800de46:	1c43      	adds	r3, r0, #1
 800de48:	4604      	mov	r4, r0
 800de4a:	d158      	bne.n	800defe <_malloc_r+0xf6>
 800de4c:	f8d8 4000 	ldr.w	r4, [r8]
 800de50:	4627      	mov	r7, r4
 800de52:	2f00      	cmp	r7, #0
 800de54:	d143      	bne.n	800dede <_malloc_r+0xd6>
 800de56:	2c00      	cmp	r4, #0
 800de58:	d04b      	beq.n	800def2 <_malloc_r+0xea>
 800de5a:	6823      	ldr	r3, [r4, #0]
 800de5c:	4639      	mov	r1, r7
 800de5e:	4630      	mov	r0, r6
 800de60:	eb04 0903 	add.w	r9, r4, r3
 800de64:	f000 ffd4 	bl	800ee10 <_sbrk_r>
 800de68:	4581      	cmp	r9, r0
 800de6a:	d142      	bne.n	800def2 <_malloc_r+0xea>
 800de6c:	6821      	ldr	r1, [r4, #0]
 800de6e:	4630      	mov	r0, r6
 800de70:	1a6d      	subs	r5, r5, r1
 800de72:	4629      	mov	r1, r5
 800de74:	f7ff ffa6 	bl	800ddc4 <sbrk_aligned>
 800de78:	3001      	adds	r0, #1
 800de7a:	d03a      	beq.n	800def2 <_malloc_r+0xea>
 800de7c:	6823      	ldr	r3, [r4, #0]
 800de7e:	442b      	add	r3, r5
 800de80:	6023      	str	r3, [r4, #0]
 800de82:	f8d8 3000 	ldr.w	r3, [r8]
 800de86:	685a      	ldr	r2, [r3, #4]
 800de88:	bb62      	cbnz	r2, 800dee4 <_malloc_r+0xdc>
 800de8a:	f8c8 7000 	str.w	r7, [r8]
 800de8e:	e00f      	b.n	800deb0 <_malloc_r+0xa8>
 800de90:	6822      	ldr	r2, [r4, #0]
 800de92:	1b52      	subs	r2, r2, r5
 800de94:	d420      	bmi.n	800ded8 <_malloc_r+0xd0>
 800de96:	2a0b      	cmp	r2, #11
 800de98:	d917      	bls.n	800deca <_malloc_r+0xc2>
 800de9a:	1961      	adds	r1, r4, r5
 800de9c:	42a3      	cmp	r3, r4
 800de9e:	6025      	str	r5, [r4, #0]
 800dea0:	bf18      	it	ne
 800dea2:	6059      	strne	r1, [r3, #4]
 800dea4:	6863      	ldr	r3, [r4, #4]
 800dea6:	bf08      	it	eq
 800dea8:	f8c8 1000 	streq.w	r1, [r8]
 800deac:	5162      	str	r2, [r4, r5]
 800deae:	604b      	str	r3, [r1, #4]
 800deb0:	4630      	mov	r0, r6
 800deb2:	f000 f841 	bl	800df38 <__malloc_unlock>
 800deb6:	f104 000b 	add.w	r0, r4, #11
 800deba:	1d23      	adds	r3, r4, #4
 800debc:	f020 0007 	bic.w	r0, r0, #7
 800dec0:	1ac2      	subs	r2, r0, r3
 800dec2:	bf1c      	itt	ne
 800dec4:	1a1b      	subne	r3, r3, r0
 800dec6:	50a3      	strne	r3, [r4, r2]
 800dec8:	e7af      	b.n	800de2a <_malloc_r+0x22>
 800deca:	6862      	ldr	r2, [r4, #4]
 800decc:	42a3      	cmp	r3, r4
 800dece:	bf0c      	ite	eq
 800ded0:	f8c8 2000 	streq.w	r2, [r8]
 800ded4:	605a      	strne	r2, [r3, #4]
 800ded6:	e7eb      	b.n	800deb0 <_malloc_r+0xa8>
 800ded8:	4623      	mov	r3, r4
 800deda:	6864      	ldr	r4, [r4, #4]
 800dedc:	e7ae      	b.n	800de3c <_malloc_r+0x34>
 800dede:	463c      	mov	r4, r7
 800dee0:	687f      	ldr	r7, [r7, #4]
 800dee2:	e7b6      	b.n	800de52 <_malloc_r+0x4a>
 800dee4:	461a      	mov	r2, r3
 800dee6:	685b      	ldr	r3, [r3, #4]
 800dee8:	42a3      	cmp	r3, r4
 800deea:	d1fb      	bne.n	800dee4 <_malloc_r+0xdc>
 800deec:	2300      	movs	r3, #0
 800deee:	6053      	str	r3, [r2, #4]
 800def0:	e7de      	b.n	800deb0 <_malloc_r+0xa8>
 800def2:	230c      	movs	r3, #12
 800def4:	4630      	mov	r0, r6
 800def6:	6033      	str	r3, [r6, #0]
 800def8:	f000 f81e 	bl	800df38 <__malloc_unlock>
 800defc:	e794      	b.n	800de28 <_malloc_r+0x20>
 800defe:	6005      	str	r5, [r0, #0]
 800df00:	e7d6      	b.n	800deb0 <_malloc_r+0xa8>
 800df02:	bf00      	nop
 800df04:	20001704 	.word	0x20001704

0800df08 <__ascii_mbtowc>:
 800df08:	b082      	sub	sp, #8
 800df0a:	b901      	cbnz	r1, 800df0e <__ascii_mbtowc+0x6>
 800df0c:	a901      	add	r1, sp, #4
 800df0e:	b142      	cbz	r2, 800df22 <__ascii_mbtowc+0x1a>
 800df10:	b14b      	cbz	r3, 800df26 <__ascii_mbtowc+0x1e>
 800df12:	7813      	ldrb	r3, [r2, #0]
 800df14:	600b      	str	r3, [r1, #0]
 800df16:	7812      	ldrb	r2, [r2, #0]
 800df18:	1e10      	subs	r0, r2, #0
 800df1a:	bf18      	it	ne
 800df1c:	2001      	movne	r0, #1
 800df1e:	b002      	add	sp, #8
 800df20:	4770      	bx	lr
 800df22:	4610      	mov	r0, r2
 800df24:	e7fb      	b.n	800df1e <__ascii_mbtowc+0x16>
 800df26:	f06f 0001 	mvn.w	r0, #1
 800df2a:	e7f8      	b.n	800df1e <__ascii_mbtowc+0x16>

0800df2c <__malloc_lock>:
 800df2c:	4801      	ldr	r0, [pc, #4]	@ (800df34 <__malloc_lock+0x8>)
 800df2e:	f7fe bd48 	b.w	800c9c2 <__retarget_lock_acquire_recursive>
 800df32:	bf00      	nop
 800df34:	200016fc 	.word	0x200016fc

0800df38 <__malloc_unlock>:
 800df38:	4801      	ldr	r0, [pc, #4]	@ (800df40 <__malloc_unlock+0x8>)
 800df3a:	f7fe bd43 	b.w	800c9c4 <__retarget_lock_release_recursive>
 800df3e:	bf00      	nop
 800df40:	200016fc 	.word	0x200016fc

0800df44 <_Balloc>:
 800df44:	b570      	push	{r4, r5, r6, lr}
 800df46:	69c6      	ldr	r6, [r0, #28]
 800df48:	4604      	mov	r4, r0
 800df4a:	460d      	mov	r5, r1
 800df4c:	b976      	cbnz	r6, 800df6c <_Balloc+0x28>
 800df4e:	2010      	movs	r0, #16
 800df50:	f7ff ff30 	bl	800ddb4 <malloc>
 800df54:	4602      	mov	r2, r0
 800df56:	61e0      	str	r0, [r4, #28]
 800df58:	b920      	cbnz	r0, 800df64 <_Balloc+0x20>
 800df5a:	216b      	movs	r1, #107	@ 0x6b
 800df5c:	4b17      	ldr	r3, [pc, #92]	@ (800dfbc <_Balloc+0x78>)
 800df5e:	4818      	ldr	r0, [pc, #96]	@ (800dfc0 <_Balloc+0x7c>)
 800df60:	f000 ff66 	bl	800ee30 <__assert_func>
 800df64:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800df68:	6006      	str	r6, [r0, #0]
 800df6a:	60c6      	str	r6, [r0, #12]
 800df6c:	69e6      	ldr	r6, [r4, #28]
 800df6e:	68f3      	ldr	r3, [r6, #12]
 800df70:	b183      	cbz	r3, 800df94 <_Balloc+0x50>
 800df72:	69e3      	ldr	r3, [r4, #28]
 800df74:	68db      	ldr	r3, [r3, #12]
 800df76:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800df7a:	b9b8      	cbnz	r0, 800dfac <_Balloc+0x68>
 800df7c:	2101      	movs	r1, #1
 800df7e:	fa01 f605 	lsl.w	r6, r1, r5
 800df82:	1d72      	adds	r2, r6, #5
 800df84:	4620      	mov	r0, r4
 800df86:	0092      	lsls	r2, r2, #2
 800df88:	f000 ff70 	bl	800ee6c <_calloc_r>
 800df8c:	b160      	cbz	r0, 800dfa8 <_Balloc+0x64>
 800df8e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800df92:	e00e      	b.n	800dfb2 <_Balloc+0x6e>
 800df94:	2221      	movs	r2, #33	@ 0x21
 800df96:	2104      	movs	r1, #4
 800df98:	4620      	mov	r0, r4
 800df9a:	f000 ff67 	bl	800ee6c <_calloc_r>
 800df9e:	69e3      	ldr	r3, [r4, #28]
 800dfa0:	60f0      	str	r0, [r6, #12]
 800dfa2:	68db      	ldr	r3, [r3, #12]
 800dfa4:	2b00      	cmp	r3, #0
 800dfa6:	d1e4      	bne.n	800df72 <_Balloc+0x2e>
 800dfa8:	2000      	movs	r0, #0
 800dfaa:	bd70      	pop	{r4, r5, r6, pc}
 800dfac:	6802      	ldr	r2, [r0, #0]
 800dfae:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800dfb2:	2300      	movs	r3, #0
 800dfb4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800dfb8:	e7f7      	b.n	800dfaa <_Balloc+0x66>
 800dfba:	bf00      	nop
 800dfbc:	0800f6b1 	.word	0x0800f6b1
 800dfc0:	0800f791 	.word	0x0800f791

0800dfc4 <_Bfree>:
 800dfc4:	b570      	push	{r4, r5, r6, lr}
 800dfc6:	69c6      	ldr	r6, [r0, #28]
 800dfc8:	4605      	mov	r5, r0
 800dfca:	460c      	mov	r4, r1
 800dfcc:	b976      	cbnz	r6, 800dfec <_Bfree+0x28>
 800dfce:	2010      	movs	r0, #16
 800dfd0:	f7ff fef0 	bl	800ddb4 <malloc>
 800dfd4:	4602      	mov	r2, r0
 800dfd6:	61e8      	str	r0, [r5, #28]
 800dfd8:	b920      	cbnz	r0, 800dfe4 <_Bfree+0x20>
 800dfda:	218f      	movs	r1, #143	@ 0x8f
 800dfdc:	4b08      	ldr	r3, [pc, #32]	@ (800e000 <_Bfree+0x3c>)
 800dfde:	4809      	ldr	r0, [pc, #36]	@ (800e004 <_Bfree+0x40>)
 800dfe0:	f000 ff26 	bl	800ee30 <__assert_func>
 800dfe4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800dfe8:	6006      	str	r6, [r0, #0]
 800dfea:	60c6      	str	r6, [r0, #12]
 800dfec:	b13c      	cbz	r4, 800dffe <_Bfree+0x3a>
 800dfee:	69eb      	ldr	r3, [r5, #28]
 800dff0:	6862      	ldr	r2, [r4, #4]
 800dff2:	68db      	ldr	r3, [r3, #12]
 800dff4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800dff8:	6021      	str	r1, [r4, #0]
 800dffa:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800dffe:	bd70      	pop	{r4, r5, r6, pc}
 800e000:	0800f6b1 	.word	0x0800f6b1
 800e004:	0800f791 	.word	0x0800f791

0800e008 <__multadd>:
 800e008:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e00c:	4607      	mov	r7, r0
 800e00e:	460c      	mov	r4, r1
 800e010:	461e      	mov	r6, r3
 800e012:	2000      	movs	r0, #0
 800e014:	690d      	ldr	r5, [r1, #16]
 800e016:	f101 0c14 	add.w	ip, r1, #20
 800e01a:	f8dc 3000 	ldr.w	r3, [ip]
 800e01e:	3001      	adds	r0, #1
 800e020:	b299      	uxth	r1, r3
 800e022:	fb02 6101 	mla	r1, r2, r1, r6
 800e026:	0c1e      	lsrs	r6, r3, #16
 800e028:	0c0b      	lsrs	r3, r1, #16
 800e02a:	fb02 3306 	mla	r3, r2, r6, r3
 800e02e:	b289      	uxth	r1, r1
 800e030:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800e034:	4285      	cmp	r5, r0
 800e036:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800e03a:	f84c 1b04 	str.w	r1, [ip], #4
 800e03e:	dcec      	bgt.n	800e01a <__multadd+0x12>
 800e040:	b30e      	cbz	r6, 800e086 <__multadd+0x7e>
 800e042:	68a3      	ldr	r3, [r4, #8]
 800e044:	42ab      	cmp	r3, r5
 800e046:	dc19      	bgt.n	800e07c <__multadd+0x74>
 800e048:	6861      	ldr	r1, [r4, #4]
 800e04a:	4638      	mov	r0, r7
 800e04c:	3101      	adds	r1, #1
 800e04e:	f7ff ff79 	bl	800df44 <_Balloc>
 800e052:	4680      	mov	r8, r0
 800e054:	b928      	cbnz	r0, 800e062 <__multadd+0x5a>
 800e056:	4602      	mov	r2, r0
 800e058:	21ba      	movs	r1, #186	@ 0xba
 800e05a:	4b0c      	ldr	r3, [pc, #48]	@ (800e08c <__multadd+0x84>)
 800e05c:	480c      	ldr	r0, [pc, #48]	@ (800e090 <__multadd+0x88>)
 800e05e:	f000 fee7 	bl	800ee30 <__assert_func>
 800e062:	6922      	ldr	r2, [r4, #16]
 800e064:	f104 010c 	add.w	r1, r4, #12
 800e068:	3202      	adds	r2, #2
 800e06a:	0092      	lsls	r2, r2, #2
 800e06c:	300c      	adds	r0, #12
 800e06e:	f7fe fcb8 	bl	800c9e2 <memcpy>
 800e072:	4621      	mov	r1, r4
 800e074:	4638      	mov	r0, r7
 800e076:	f7ff ffa5 	bl	800dfc4 <_Bfree>
 800e07a:	4644      	mov	r4, r8
 800e07c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800e080:	3501      	adds	r5, #1
 800e082:	615e      	str	r6, [r3, #20]
 800e084:	6125      	str	r5, [r4, #16]
 800e086:	4620      	mov	r0, r4
 800e088:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e08c:	0800f720 	.word	0x0800f720
 800e090:	0800f791 	.word	0x0800f791

0800e094 <__s2b>:
 800e094:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e098:	4615      	mov	r5, r2
 800e09a:	2209      	movs	r2, #9
 800e09c:	461f      	mov	r7, r3
 800e09e:	3308      	adds	r3, #8
 800e0a0:	460c      	mov	r4, r1
 800e0a2:	fb93 f3f2 	sdiv	r3, r3, r2
 800e0a6:	4606      	mov	r6, r0
 800e0a8:	2201      	movs	r2, #1
 800e0aa:	2100      	movs	r1, #0
 800e0ac:	429a      	cmp	r2, r3
 800e0ae:	db09      	blt.n	800e0c4 <__s2b+0x30>
 800e0b0:	4630      	mov	r0, r6
 800e0b2:	f7ff ff47 	bl	800df44 <_Balloc>
 800e0b6:	b940      	cbnz	r0, 800e0ca <__s2b+0x36>
 800e0b8:	4602      	mov	r2, r0
 800e0ba:	21d3      	movs	r1, #211	@ 0xd3
 800e0bc:	4b18      	ldr	r3, [pc, #96]	@ (800e120 <__s2b+0x8c>)
 800e0be:	4819      	ldr	r0, [pc, #100]	@ (800e124 <__s2b+0x90>)
 800e0c0:	f000 feb6 	bl	800ee30 <__assert_func>
 800e0c4:	0052      	lsls	r2, r2, #1
 800e0c6:	3101      	adds	r1, #1
 800e0c8:	e7f0      	b.n	800e0ac <__s2b+0x18>
 800e0ca:	9b08      	ldr	r3, [sp, #32]
 800e0cc:	2d09      	cmp	r5, #9
 800e0ce:	6143      	str	r3, [r0, #20]
 800e0d0:	f04f 0301 	mov.w	r3, #1
 800e0d4:	6103      	str	r3, [r0, #16]
 800e0d6:	dd16      	ble.n	800e106 <__s2b+0x72>
 800e0d8:	f104 0909 	add.w	r9, r4, #9
 800e0dc:	46c8      	mov	r8, r9
 800e0de:	442c      	add	r4, r5
 800e0e0:	f818 3b01 	ldrb.w	r3, [r8], #1
 800e0e4:	4601      	mov	r1, r0
 800e0e6:	220a      	movs	r2, #10
 800e0e8:	4630      	mov	r0, r6
 800e0ea:	3b30      	subs	r3, #48	@ 0x30
 800e0ec:	f7ff ff8c 	bl	800e008 <__multadd>
 800e0f0:	45a0      	cmp	r8, r4
 800e0f2:	d1f5      	bne.n	800e0e0 <__s2b+0x4c>
 800e0f4:	f1a5 0408 	sub.w	r4, r5, #8
 800e0f8:	444c      	add	r4, r9
 800e0fa:	1b2d      	subs	r5, r5, r4
 800e0fc:	1963      	adds	r3, r4, r5
 800e0fe:	42bb      	cmp	r3, r7
 800e100:	db04      	blt.n	800e10c <__s2b+0x78>
 800e102:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e106:	2509      	movs	r5, #9
 800e108:	340a      	adds	r4, #10
 800e10a:	e7f6      	b.n	800e0fa <__s2b+0x66>
 800e10c:	f814 3b01 	ldrb.w	r3, [r4], #1
 800e110:	4601      	mov	r1, r0
 800e112:	220a      	movs	r2, #10
 800e114:	4630      	mov	r0, r6
 800e116:	3b30      	subs	r3, #48	@ 0x30
 800e118:	f7ff ff76 	bl	800e008 <__multadd>
 800e11c:	e7ee      	b.n	800e0fc <__s2b+0x68>
 800e11e:	bf00      	nop
 800e120:	0800f720 	.word	0x0800f720
 800e124:	0800f791 	.word	0x0800f791

0800e128 <__hi0bits>:
 800e128:	4603      	mov	r3, r0
 800e12a:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800e12e:	bf3a      	itte	cc
 800e130:	0403      	lslcc	r3, r0, #16
 800e132:	2010      	movcc	r0, #16
 800e134:	2000      	movcs	r0, #0
 800e136:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800e13a:	bf3c      	itt	cc
 800e13c:	021b      	lslcc	r3, r3, #8
 800e13e:	3008      	addcc	r0, #8
 800e140:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800e144:	bf3c      	itt	cc
 800e146:	011b      	lslcc	r3, r3, #4
 800e148:	3004      	addcc	r0, #4
 800e14a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800e14e:	bf3c      	itt	cc
 800e150:	009b      	lslcc	r3, r3, #2
 800e152:	3002      	addcc	r0, #2
 800e154:	2b00      	cmp	r3, #0
 800e156:	db05      	blt.n	800e164 <__hi0bits+0x3c>
 800e158:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800e15c:	f100 0001 	add.w	r0, r0, #1
 800e160:	bf08      	it	eq
 800e162:	2020      	moveq	r0, #32
 800e164:	4770      	bx	lr

0800e166 <__lo0bits>:
 800e166:	6803      	ldr	r3, [r0, #0]
 800e168:	4602      	mov	r2, r0
 800e16a:	f013 0007 	ands.w	r0, r3, #7
 800e16e:	d00b      	beq.n	800e188 <__lo0bits+0x22>
 800e170:	07d9      	lsls	r1, r3, #31
 800e172:	d421      	bmi.n	800e1b8 <__lo0bits+0x52>
 800e174:	0798      	lsls	r0, r3, #30
 800e176:	bf49      	itett	mi
 800e178:	085b      	lsrmi	r3, r3, #1
 800e17a:	089b      	lsrpl	r3, r3, #2
 800e17c:	2001      	movmi	r0, #1
 800e17e:	6013      	strmi	r3, [r2, #0]
 800e180:	bf5c      	itt	pl
 800e182:	2002      	movpl	r0, #2
 800e184:	6013      	strpl	r3, [r2, #0]
 800e186:	4770      	bx	lr
 800e188:	b299      	uxth	r1, r3
 800e18a:	b909      	cbnz	r1, 800e190 <__lo0bits+0x2a>
 800e18c:	2010      	movs	r0, #16
 800e18e:	0c1b      	lsrs	r3, r3, #16
 800e190:	b2d9      	uxtb	r1, r3
 800e192:	b909      	cbnz	r1, 800e198 <__lo0bits+0x32>
 800e194:	3008      	adds	r0, #8
 800e196:	0a1b      	lsrs	r3, r3, #8
 800e198:	0719      	lsls	r1, r3, #28
 800e19a:	bf04      	itt	eq
 800e19c:	091b      	lsreq	r3, r3, #4
 800e19e:	3004      	addeq	r0, #4
 800e1a0:	0799      	lsls	r1, r3, #30
 800e1a2:	bf04      	itt	eq
 800e1a4:	089b      	lsreq	r3, r3, #2
 800e1a6:	3002      	addeq	r0, #2
 800e1a8:	07d9      	lsls	r1, r3, #31
 800e1aa:	d403      	bmi.n	800e1b4 <__lo0bits+0x4e>
 800e1ac:	085b      	lsrs	r3, r3, #1
 800e1ae:	f100 0001 	add.w	r0, r0, #1
 800e1b2:	d003      	beq.n	800e1bc <__lo0bits+0x56>
 800e1b4:	6013      	str	r3, [r2, #0]
 800e1b6:	4770      	bx	lr
 800e1b8:	2000      	movs	r0, #0
 800e1ba:	4770      	bx	lr
 800e1bc:	2020      	movs	r0, #32
 800e1be:	4770      	bx	lr

0800e1c0 <__i2b>:
 800e1c0:	b510      	push	{r4, lr}
 800e1c2:	460c      	mov	r4, r1
 800e1c4:	2101      	movs	r1, #1
 800e1c6:	f7ff febd 	bl	800df44 <_Balloc>
 800e1ca:	4602      	mov	r2, r0
 800e1cc:	b928      	cbnz	r0, 800e1da <__i2b+0x1a>
 800e1ce:	f240 1145 	movw	r1, #325	@ 0x145
 800e1d2:	4b04      	ldr	r3, [pc, #16]	@ (800e1e4 <__i2b+0x24>)
 800e1d4:	4804      	ldr	r0, [pc, #16]	@ (800e1e8 <__i2b+0x28>)
 800e1d6:	f000 fe2b 	bl	800ee30 <__assert_func>
 800e1da:	2301      	movs	r3, #1
 800e1dc:	6144      	str	r4, [r0, #20]
 800e1de:	6103      	str	r3, [r0, #16]
 800e1e0:	bd10      	pop	{r4, pc}
 800e1e2:	bf00      	nop
 800e1e4:	0800f720 	.word	0x0800f720
 800e1e8:	0800f791 	.word	0x0800f791

0800e1ec <__multiply>:
 800e1ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e1f0:	4614      	mov	r4, r2
 800e1f2:	690a      	ldr	r2, [r1, #16]
 800e1f4:	6923      	ldr	r3, [r4, #16]
 800e1f6:	460f      	mov	r7, r1
 800e1f8:	429a      	cmp	r2, r3
 800e1fa:	bfa2      	ittt	ge
 800e1fc:	4623      	movge	r3, r4
 800e1fe:	460c      	movge	r4, r1
 800e200:	461f      	movge	r7, r3
 800e202:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800e206:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800e20a:	68a3      	ldr	r3, [r4, #8]
 800e20c:	6861      	ldr	r1, [r4, #4]
 800e20e:	eb0a 0609 	add.w	r6, sl, r9
 800e212:	42b3      	cmp	r3, r6
 800e214:	b085      	sub	sp, #20
 800e216:	bfb8      	it	lt
 800e218:	3101      	addlt	r1, #1
 800e21a:	f7ff fe93 	bl	800df44 <_Balloc>
 800e21e:	b930      	cbnz	r0, 800e22e <__multiply+0x42>
 800e220:	4602      	mov	r2, r0
 800e222:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800e226:	4b43      	ldr	r3, [pc, #268]	@ (800e334 <__multiply+0x148>)
 800e228:	4843      	ldr	r0, [pc, #268]	@ (800e338 <__multiply+0x14c>)
 800e22a:	f000 fe01 	bl	800ee30 <__assert_func>
 800e22e:	f100 0514 	add.w	r5, r0, #20
 800e232:	462b      	mov	r3, r5
 800e234:	2200      	movs	r2, #0
 800e236:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800e23a:	4543      	cmp	r3, r8
 800e23c:	d321      	bcc.n	800e282 <__multiply+0x96>
 800e23e:	f107 0114 	add.w	r1, r7, #20
 800e242:	f104 0214 	add.w	r2, r4, #20
 800e246:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800e24a:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800e24e:	9302      	str	r3, [sp, #8]
 800e250:	1b13      	subs	r3, r2, r4
 800e252:	3b15      	subs	r3, #21
 800e254:	f023 0303 	bic.w	r3, r3, #3
 800e258:	3304      	adds	r3, #4
 800e25a:	f104 0715 	add.w	r7, r4, #21
 800e25e:	42ba      	cmp	r2, r7
 800e260:	bf38      	it	cc
 800e262:	2304      	movcc	r3, #4
 800e264:	9301      	str	r3, [sp, #4]
 800e266:	9b02      	ldr	r3, [sp, #8]
 800e268:	9103      	str	r1, [sp, #12]
 800e26a:	428b      	cmp	r3, r1
 800e26c:	d80c      	bhi.n	800e288 <__multiply+0x9c>
 800e26e:	2e00      	cmp	r6, #0
 800e270:	dd03      	ble.n	800e27a <__multiply+0x8e>
 800e272:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800e276:	2b00      	cmp	r3, #0
 800e278:	d05a      	beq.n	800e330 <__multiply+0x144>
 800e27a:	6106      	str	r6, [r0, #16]
 800e27c:	b005      	add	sp, #20
 800e27e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e282:	f843 2b04 	str.w	r2, [r3], #4
 800e286:	e7d8      	b.n	800e23a <__multiply+0x4e>
 800e288:	f8b1 a000 	ldrh.w	sl, [r1]
 800e28c:	f1ba 0f00 	cmp.w	sl, #0
 800e290:	d023      	beq.n	800e2da <__multiply+0xee>
 800e292:	46a9      	mov	r9, r5
 800e294:	f04f 0c00 	mov.w	ip, #0
 800e298:	f104 0e14 	add.w	lr, r4, #20
 800e29c:	f85e 7b04 	ldr.w	r7, [lr], #4
 800e2a0:	f8d9 3000 	ldr.w	r3, [r9]
 800e2a4:	fa1f fb87 	uxth.w	fp, r7
 800e2a8:	b29b      	uxth	r3, r3
 800e2aa:	fb0a 330b 	mla	r3, sl, fp, r3
 800e2ae:	4463      	add	r3, ip
 800e2b0:	f8d9 c000 	ldr.w	ip, [r9]
 800e2b4:	0c3f      	lsrs	r7, r7, #16
 800e2b6:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 800e2ba:	fb0a c707 	mla	r7, sl, r7, ip
 800e2be:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800e2c2:	b29b      	uxth	r3, r3
 800e2c4:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800e2c8:	4572      	cmp	r2, lr
 800e2ca:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800e2ce:	f849 3b04 	str.w	r3, [r9], #4
 800e2d2:	d8e3      	bhi.n	800e29c <__multiply+0xb0>
 800e2d4:	9b01      	ldr	r3, [sp, #4]
 800e2d6:	f845 c003 	str.w	ip, [r5, r3]
 800e2da:	9b03      	ldr	r3, [sp, #12]
 800e2dc:	3104      	adds	r1, #4
 800e2de:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800e2e2:	f1b9 0f00 	cmp.w	r9, #0
 800e2e6:	d021      	beq.n	800e32c <__multiply+0x140>
 800e2e8:	46ae      	mov	lr, r5
 800e2ea:	f04f 0a00 	mov.w	sl, #0
 800e2ee:	682b      	ldr	r3, [r5, #0]
 800e2f0:	f104 0c14 	add.w	ip, r4, #20
 800e2f4:	f8bc b000 	ldrh.w	fp, [ip]
 800e2f8:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800e2fc:	b29b      	uxth	r3, r3
 800e2fe:	fb09 770b 	mla	r7, r9, fp, r7
 800e302:	4457      	add	r7, sl
 800e304:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800e308:	f84e 3b04 	str.w	r3, [lr], #4
 800e30c:	f85c 3b04 	ldr.w	r3, [ip], #4
 800e310:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800e314:	f8be 3000 	ldrh.w	r3, [lr]
 800e318:	4562      	cmp	r2, ip
 800e31a:	fb09 330a 	mla	r3, r9, sl, r3
 800e31e:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800e322:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800e326:	d8e5      	bhi.n	800e2f4 <__multiply+0x108>
 800e328:	9f01      	ldr	r7, [sp, #4]
 800e32a:	51eb      	str	r3, [r5, r7]
 800e32c:	3504      	adds	r5, #4
 800e32e:	e79a      	b.n	800e266 <__multiply+0x7a>
 800e330:	3e01      	subs	r6, #1
 800e332:	e79c      	b.n	800e26e <__multiply+0x82>
 800e334:	0800f720 	.word	0x0800f720
 800e338:	0800f791 	.word	0x0800f791

0800e33c <__pow5mult>:
 800e33c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e340:	4615      	mov	r5, r2
 800e342:	f012 0203 	ands.w	r2, r2, #3
 800e346:	4607      	mov	r7, r0
 800e348:	460e      	mov	r6, r1
 800e34a:	d007      	beq.n	800e35c <__pow5mult+0x20>
 800e34c:	4c25      	ldr	r4, [pc, #148]	@ (800e3e4 <__pow5mult+0xa8>)
 800e34e:	3a01      	subs	r2, #1
 800e350:	2300      	movs	r3, #0
 800e352:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800e356:	f7ff fe57 	bl	800e008 <__multadd>
 800e35a:	4606      	mov	r6, r0
 800e35c:	10ad      	asrs	r5, r5, #2
 800e35e:	d03d      	beq.n	800e3dc <__pow5mult+0xa0>
 800e360:	69fc      	ldr	r4, [r7, #28]
 800e362:	b97c      	cbnz	r4, 800e384 <__pow5mult+0x48>
 800e364:	2010      	movs	r0, #16
 800e366:	f7ff fd25 	bl	800ddb4 <malloc>
 800e36a:	4602      	mov	r2, r0
 800e36c:	61f8      	str	r0, [r7, #28]
 800e36e:	b928      	cbnz	r0, 800e37c <__pow5mult+0x40>
 800e370:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800e374:	4b1c      	ldr	r3, [pc, #112]	@ (800e3e8 <__pow5mult+0xac>)
 800e376:	481d      	ldr	r0, [pc, #116]	@ (800e3ec <__pow5mult+0xb0>)
 800e378:	f000 fd5a 	bl	800ee30 <__assert_func>
 800e37c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800e380:	6004      	str	r4, [r0, #0]
 800e382:	60c4      	str	r4, [r0, #12]
 800e384:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800e388:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800e38c:	b94c      	cbnz	r4, 800e3a2 <__pow5mult+0x66>
 800e38e:	f240 2171 	movw	r1, #625	@ 0x271
 800e392:	4638      	mov	r0, r7
 800e394:	f7ff ff14 	bl	800e1c0 <__i2b>
 800e398:	2300      	movs	r3, #0
 800e39a:	4604      	mov	r4, r0
 800e39c:	f8c8 0008 	str.w	r0, [r8, #8]
 800e3a0:	6003      	str	r3, [r0, #0]
 800e3a2:	f04f 0900 	mov.w	r9, #0
 800e3a6:	07eb      	lsls	r3, r5, #31
 800e3a8:	d50a      	bpl.n	800e3c0 <__pow5mult+0x84>
 800e3aa:	4631      	mov	r1, r6
 800e3ac:	4622      	mov	r2, r4
 800e3ae:	4638      	mov	r0, r7
 800e3b0:	f7ff ff1c 	bl	800e1ec <__multiply>
 800e3b4:	4680      	mov	r8, r0
 800e3b6:	4631      	mov	r1, r6
 800e3b8:	4638      	mov	r0, r7
 800e3ba:	f7ff fe03 	bl	800dfc4 <_Bfree>
 800e3be:	4646      	mov	r6, r8
 800e3c0:	106d      	asrs	r5, r5, #1
 800e3c2:	d00b      	beq.n	800e3dc <__pow5mult+0xa0>
 800e3c4:	6820      	ldr	r0, [r4, #0]
 800e3c6:	b938      	cbnz	r0, 800e3d8 <__pow5mult+0x9c>
 800e3c8:	4622      	mov	r2, r4
 800e3ca:	4621      	mov	r1, r4
 800e3cc:	4638      	mov	r0, r7
 800e3ce:	f7ff ff0d 	bl	800e1ec <__multiply>
 800e3d2:	6020      	str	r0, [r4, #0]
 800e3d4:	f8c0 9000 	str.w	r9, [r0]
 800e3d8:	4604      	mov	r4, r0
 800e3da:	e7e4      	b.n	800e3a6 <__pow5mult+0x6a>
 800e3dc:	4630      	mov	r0, r6
 800e3de:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e3e2:	bf00      	nop
 800e3e4:	0800f7ec 	.word	0x0800f7ec
 800e3e8:	0800f6b1 	.word	0x0800f6b1
 800e3ec:	0800f791 	.word	0x0800f791

0800e3f0 <__lshift>:
 800e3f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e3f4:	460c      	mov	r4, r1
 800e3f6:	4607      	mov	r7, r0
 800e3f8:	4691      	mov	r9, r2
 800e3fa:	6923      	ldr	r3, [r4, #16]
 800e3fc:	6849      	ldr	r1, [r1, #4]
 800e3fe:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800e402:	68a3      	ldr	r3, [r4, #8]
 800e404:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800e408:	f108 0601 	add.w	r6, r8, #1
 800e40c:	42b3      	cmp	r3, r6
 800e40e:	db0b      	blt.n	800e428 <__lshift+0x38>
 800e410:	4638      	mov	r0, r7
 800e412:	f7ff fd97 	bl	800df44 <_Balloc>
 800e416:	4605      	mov	r5, r0
 800e418:	b948      	cbnz	r0, 800e42e <__lshift+0x3e>
 800e41a:	4602      	mov	r2, r0
 800e41c:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800e420:	4b27      	ldr	r3, [pc, #156]	@ (800e4c0 <__lshift+0xd0>)
 800e422:	4828      	ldr	r0, [pc, #160]	@ (800e4c4 <__lshift+0xd4>)
 800e424:	f000 fd04 	bl	800ee30 <__assert_func>
 800e428:	3101      	adds	r1, #1
 800e42a:	005b      	lsls	r3, r3, #1
 800e42c:	e7ee      	b.n	800e40c <__lshift+0x1c>
 800e42e:	2300      	movs	r3, #0
 800e430:	f100 0114 	add.w	r1, r0, #20
 800e434:	f100 0210 	add.w	r2, r0, #16
 800e438:	4618      	mov	r0, r3
 800e43a:	4553      	cmp	r3, sl
 800e43c:	db33      	blt.n	800e4a6 <__lshift+0xb6>
 800e43e:	6920      	ldr	r0, [r4, #16]
 800e440:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800e444:	f104 0314 	add.w	r3, r4, #20
 800e448:	f019 091f 	ands.w	r9, r9, #31
 800e44c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800e450:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800e454:	d02b      	beq.n	800e4ae <__lshift+0xbe>
 800e456:	468a      	mov	sl, r1
 800e458:	2200      	movs	r2, #0
 800e45a:	f1c9 0e20 	rsb	lr, r9, #32
 800e45e:	6818      	ldr	r0, [r3, #0]
 800e460:	fa00 f009 	lsl.w	r0, r0, r9
 800e464:	4310      	orrs	r0, r2
 800e466:	f84a 0b04 	str.w	r0, [sl], #4
 800e46a:	f853 2b04 	ldr.w	r2, [r3], #4
 800e46e:	459c      	cmp	ip, r3
 800e470:	fa22 f20e 	lsr.w	r2, r2, lr
 800e474:	d8f3      	bhi.n	800e45e <__lshift+0x6e>
 800e476:	ebac 0304 	sub.w	r3, ip, r4
 800e47a:	3b15      	subs	r3, #21
 800e47c:	f023 0303 	bic.w	r3, r3, #3
 800e480:	3304      	adds	r3, #4
 800e482:	f104 0015 	add.w	r0, r4, #21
 800e486:	4584      	cmp	ip, r0
 800e488:	bf38      	it	cc
 800e48a:	2304      	movcc	r3, #4
 800e48c:	50ca      	str	r2, [r1, r3]
 800e48e:	b10a      	cbz	r2, 800e494 <__lshift+0xa4>
 800e490:	f108 0602 	add.w	r6, r8, #2
 800e494:	3e01      	subs	r6, #1
 800e496:	4638      	mov	r0, r7
 800e498:	4621      	mov	r1, r4
 800e49a:	612e      	str	r6, [r5, #16]
 800e49c:	f7ff fd92 	bl	800dfc4 <_Bfree>
 800e4a0:	4628      	mov	r0, r5
 800e4a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e4a6:	f842 0f04 	str.w	r0, [r2, #4]!
 800e4aa:	3301      	adds	r3, #1
 800e4ac:	e7c5      	b.n	800e43a <__lshift+0x4a>
 800e4ae:	3904      	subs	r1, #4
 800e4b0:	f853 2b04 	ldr.w	r2, [r3], #4
 800e4b4:	459c      	cmp	ip, r3
 800e4b6:	f841 2f04 	str.w	r2, [r1, #4]!
 800e4ba:	d8f9      	bhi.n	800e4b0 <__lshift+0xc0>
 800e4bc:	e7ea      	b.n	800e494 <__lshift+0xa4>
 800e4be:	bf00      	nop
 800e4c0:	0800f720 	.word	0x0800f720
 800e4c4:	0800f791 	.word	0x0800f791

0800e4c8 <__mcmp>:
 800e4c8:	4603      	mov	r3, r0
 800e4ca:	690a      	ldr	r2, [r1, #16]
 800e4cc:	6900      	ldr	r0, [r0, #16]
 800e4ce:	b530      	push	{r4, r5, lr}
 800e4d0:	1a80      	subs	r0, r0, r2
 800e4d2:	d10e      	bne.n	800e4f2 <__mcmp+0x2a>
 800e4d4:	3314      	adds	r3, #20
 800e4d6:	3114      	adds	r1, #20
 800e4d8:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800e4dc:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800e4e0:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800e4e4:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800e4e8:	4295      	cmp	r5, r2
 800e4ea:	d003      	beq.n	800e4f4 <__mcmp+0x2c>
 800e4ec:	d205      	bcs.n	800e4fa <__mcmp+0x32>
 800e4ee:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800e4f2:	bd30      	pop	{r4, r5, pc}
 800e4f4:	42a3      	cmp	r3, r4
 800e4f6:	d3f3      	bcc.n	800e4e0 <__mcmp+0x18>
 800e4f8:	e7fb      	b.n	800e4f2 <__mcmp+0x2a>
 800e4fa:	2001      	movs	r0, #1
 800e4fc:	e7f9      	b.n	800e4f2 <__mcmp+0x2a>
	...

0800e500 <__mdiff>:
 800e500:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e504:	4689      	mov	r9, r1
 800e506:	4606      	mov	r6, r0
 800e508:	4611      	mov	r1, r2
 800e50a:	4648      	mov	r0, r9
 800e50c:	4614      	mov	r4, r2
 800e50e:	f7ff ffdb 	bl	800e4c8 <__mcmp>
 800e512:	1e05      	subs	r5, r0, #0
 800e514:	d112      	bne.n	800e53c <__mdiff+0x3c>
 800e516:	4629      	mov	r1, r5
 800e518:	4630      	mov	r0, r6
 800e51a:	f7ff fd13 	bl	800df44 <_Balloc>
 800e51e:	4602      	mov	r2, r0
 800e520:	b928      	cbnz	r0, 800e52e <__mdiff+0x2e>
 800e522:	f240 2137 	movw	r1, #567	@ 0x237
 800e526:	4b3e      	ldr	r3, [pc, #248]	@ (800e620 <__mdiff+0x120>)
 800e528:	483e      	ldr	r0, [pc, #248]	@ (800e624 <__mdiff+0x124>)
 800e52a:	f000 fc81 	bl	800ee30 <__assert_func>
 800e52e:	2301      	movs	r3, #1
 800e530:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800e534:	4610      	mov	r0, r2
 800e536:	b003      	add	sp, #12
 800e538:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e53c:	bfbc      	itt	lt
 800e53e:	464b      	movlt	r3, r9
 800e540:	46a1      	movlt	r9, r4
 800e542:	4630      	mov	r0, r6
 800e544:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800e548:	bfba      	itte	lt
 800e54a:	461c      	movlt	r4, r3
 800e54c:	2501      	movlt	r5, #1
 800e54e:	2500      	movge	r5, #0
 800e550:	f7ff fcf8 	bl	800df44 <_Balloc>
 800e554:	4602      	mov	r2, r0
 800e556:	b918      	cbnz	r0, 800e560 <__mdiff+0x60>
 800e558:	f240 2145 	movw	r1, #581	@ 0x245
 800e55c:	4b30      	ldr	r3, [pc, #192]	@ (800e620 <__mdiff+0x120>)
 800e55e:	e7e3      	b.n	800e528 <__mdiff+0x28>
 800e560:	f100 0b14 	add.w	fp, r0, #20
 800e564:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800e568:	f109 0310 	add.w	r3, r9, #16
 800e56c:	60c5      	str	r5, [r0, #12]
 800e56e:	f04f 0c00 	mov.w	ip, #0
 800e572:	f109 0514 	add.w	r5, r9, #20
 800e576:	46d9      	mov	r9, fp
 800e578:	6926      	ldr	r6, [r4, #16]
 800e57a:	f104 0e14 	add.w	lr, r4, #20
 800e57e:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800e582:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800e586:	9301      	str	r3, [sp, #4]
 800e588:	9b01      	ldr	r3, [sp, #4]
 800e58a:	f85e 0b04 	ldr.w	r0, [lr], #4
 800e58e:	f853 af04 	ldr.w	sl, [r3, #4]!
 800e592:	b281      	uxth	r1, r0
 800e594:	9301      	str	r3, [sp, #4]
 800e596:	fa1f f38a 	uxth.w	r3, sl
 800e59a:	1a5b      	subs	r3, r3, r1
 800e59c:	0c00      	lsrs	r0, r0, #16
 800e59e:	4463      	add	r3, ip
 800e5a0:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800e5a4:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800e5a8:	b29b      	uxth	r3, r3
 800e5aa:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800e5ae:	4576      	cmp	r6, lr
 800e5b0:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800e5b4:	f849 3b04 	str.w	r3, [r9], #4
 800e5b8:	d8e6      	bhi.n	800e588 <__mdiff+0x88>
 800e5ba:	1b33      	subs	r3, r6, r4
 800e5bc:	3b15      	subs	r3, #21
 800e5be:	f023 0303 	bic.w	r3, r3, #3
 800e5c2:	3415      	adds	r4, #21
 800e5c4:	3304      	adds	r3, #4
 800e5c6:	42a6      	cmp	r6, r4
 800e5c8:	bf38      	it	cc
 800e5ca:	2304      	movcc	r3, #4
 800e5cc:	441d      	add	r5, r3
 800e5ce:	445b      	add	r3, fp
 800e5d0:	461e      	mov	r6, r3
 800e5d2:	462c      	mov	r4, r5
 800e5d4:	4544      	cmp	r4, r8
 800e5d6:	d30e      	bcc.n	800e5f6 <__mdiff+0xf6>
 800e5d8:	f108 0103 	add.w	r1, r8, #3
 800e5dc:	1b49      	subs	r1, r1, r5
 800e5de:	f021 0103 	bic.w	r1, r1, #3
 800e5e2:	3d03      	subs	r5, #3
 800e5e4:	45a8      	cmp	r8, r5
 800e5e6:	bf38      	it	cc
 800e5e8:	2100      	movcc	r1, #0
 800e5ea:	440b      	add	r3, r1
 800e5ec:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800e5f0:	b199      	cbz	r1, 800e61a <__mdiff+0x11a>
 800e5f2:	6117      	str	r7, [r2, #16]
 800e5f4:	e79e      	b.n	800e534 <__mdiff+0x34>
 800e5f6:	46e6      	mov	lr, ip
 800e5f8:	f854 1b04 	ldr.w	r1, [r4], #4
 800e5fc:	fa1f fc81 	uxth.w	ip, r1
 800e600:	44f4      	add	ip, lr
 800e602:	0c08      	lsrs	r0, r1, #16
 800e604:	4471      	add	r1, lr
 800e606:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800e60a:	b289      	uxth	r1, r1
 800e60c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800e610:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800e614:	f846 1b04 	str.w	r1, [r6], #4
 800e618:	e7dc      	b.n	800e5d4 <__mdiff+0xd4>
 800e61a:	3f01      	subs	r7, #1
 800e61c:	e7e6      	b.n	800e5ec <__mdiff+0xec>
 800e61e:	bf00      	nop
 800e620:	0800f720 	.word	0x0800f720
 800e624:	0800f791 	.word	0x0800f791

0800e628 <__ulp>:
 800e628:	4b0e      	ldr	r3, [pc, #56]	@ (800e664 <__ulp+0x3c>)
 800e62a:	400b      	ands	r3, r1
 800e62c:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 800e630:	2b00      	cmp	r3, #0
 800e632:	dc08      	bgt.n	800e646 <__ulp+0x1e>
 800e634:	425b      	negs	r3, r3
 800e636:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800e63a:	ea4f 5223 	mov.w	r2, r3, asr #20
 800e63e:	da04      	bge.n	800e64a <__ulp+0x22>
 800e640:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800e644:	4113      	asrs	r3, r2
 800e646:	2200      	movs	r2, #0
 800e648:	e008      	b.n	800e65c <__ulp+0x34>
 800e64a:	f1a2 0314 	sub.w	r3, r2, #20
 800e64e:	2b1e      	cmp	r3, #30
 800e650:	bfd6      	itet	le
 800e652:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 800e656:	2201      	movgt	r2, #1
 800e658:	40da      	lsrle	r2, r3
 800e65a:	2300      	movs	r3, #0
 800e65c:	4619      	mov	r1, r3
 800e65e:	4610      	mov	r0, r2
 800e660:	4770      	bx	lr
 800e662:	bf00      	nop
 800e664:	7ff00000 	.word	0x7ff00000

0800e668 <__b2d>:
 800e668:	6902      	ldr	r2, [r0, #16]
 800e66a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e66c:	f100 0614 	add.w	r6, r0, #20
 800e670:	eb06 0282 	add.w	r2, r6, r2, lsl #2
 800e674:	f852 4c04 	ldr.w	r4, [r2, #-4]
 800e678:	4f1e      	ldr	r7, [pc, #120]	@ (800e6f4 <__b2d+0x8c>)
 800e67a:	4620      	mov	r0, r4
 800e67c:	f7ff fd54 	bl	800e128 <__hi0bits>
 800e680:	4603      	mov	r3, r0
 800e682:	f1c0 0020 	rsb	r0, r0, #32
 800e686:	2b0a      	cmp	r3, #10
 800e688:	f1a2 0504 	sub.w	r5, r2, #4
 800e68c:	6008      	str	r0, [r1, #0]
 800e68e:	dc12      	bgt.n	800e6b6 <__b2d+0x4e>
 800e690:	42ae      	cmp	r6, r5
 800e692:	bf2c      	ite	cs
 800e694:	2200      	movcs	r2, #0
 800e696:	f852 2c08 	ldrcc.w	r2, [r2, #-8]
 800e69a:	f1c3 0c0b 	rsb	ip, r3, #11
 800e69e:	3315      	adds	r3, #21
 800e6a0:	fa24 fe0c 	lsr.w	lr, r4, ip
 800e6a4:	fa04 f303 	lsl.w	r3, r4, r3
 800e6a8:	fa22 f20c 	lsr.w	r2, r2, ip
 800e6ac:	ea4e 0107 	orr.w	r1, lr, r7
 800e6b0:	431a      	orrs	r2, r3
 800e6b2:	4610      	mov	r0, r2
 800e6b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e6b6:	42ae      	cmp	r6, r5
 800e6b8:	bf36      	itet	cc
 800e6ba:	f1a2 0508 	subcc.w	r5, r2, #8
 800e6be:	2200      	movcs	r2, #0
 800e6c0:	f852 2c08 	ldrcc.w	r2, [r2, #-8]
 800e6c4:	3b0b      	subs	r3, #11
 800e6c6:	d012      	beq.n	800e6ee <__b2d+0x86>
 800e6c8:	f1c3 0720 	rsb	r7, r3, #32
 800e6cc:	fa22 f107 	lsr.w	r1, r2, r7
 800e6d0:	409c      	lsls	r4, r3
 800e6d2:	430c      	orrs	r4, r1
 800e6d4:	42b5      	cmp	r5, r6
 800e6d6:	f044 517f 	orr.w	r1, r4, #1069547520	@ 0x3fc00000
 800e6da:	bf94      	ite	ls
 800e6dc:	2400      	movls	r4, #0
 800e6de:	f855 4c04 	ldrhi.w	r4, [r5, #-4]
 800e6e2:	409a      	lsls	r2, r3
 800e6e4:	40fc      	lsrs	r4, r7
 800e6e6:	f441 1140 	orr.w	r1, r1, #3145728	@ 0x300000
 800e6ea:	4322      	orrs	r2, r4
 800e6ec:	e7e1      	b.n	800e6b2 <__b2d+0x4a>
 800e6ee:	ea44 0107 	orr.w	r1, r4, r7
 800e6f2:	e7de      	b.n	800e6b2 <__b2d+0x4a>
 800e6f4:	3ff00000 	.word	0x3ff00000

0800e6f8 <__d2b>:
 800e6f8:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
 800e6fc:	2101      	movs	r1, #1
 800e6fe:	4690      	mov	r8, r2
 800e700:	4699      	mov	r9, r3
 800e702:	9e08      	ldr	r6, [sp, #32]
 800e704:	f7ff fc1e 	bl	800df44 <_Balloc>
 800e708:	4604      	mov	r4, r0
 800e70a:	b930      	cbnz	r0, 800e71a <__d2b+0x22>
 800e70c:	4602      	mov	r2, r0
 800e70e:	f240 310f 	movw	r1, #783	@ 0x30f
 800e712:	4b23      	ldr	r3, [pc, #140]	@ (800e7a0 <__d2b+0xa8>)
 800e714:	4823      	ldr	r0, [pc, #140]	@ (800e7a4 <__d2b+0xac>)
 800e716:	f000 fb8b 	bl	800ee30 <__assert_func>
 800e71a:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800e71e:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800e722:	b10d      	cbz	r5, 800e728 <__d2b+0x30>
 800e724:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800e728:	9301      	str	r3, [sp, #4]
 800e72a:	f1b8 0300 	subs.w	r3, r8, #0
 800e72e:	d024      	beq.n	800e77a <__d2b+0x82>
 800e730:	4668      	mov	r0, sp
 800e732:	9300      	str	r3, [sp, #0]
 800e734:	f7ff fd17 	bl	800e166 <__lo0bits>
 800e738:	e9dd 1200 	ldrd	r1, r2, [sp]
 800e73c:	b1d8      	cbz	r0, 800e776 <__d2b+0x7e>
 800e73e:	f1c0 0320 	rsb	r3, r0, #32
 800e742:	fa02 f303 	lsl.w	r3, r2, r3
 800e746:	430b      	orrs	r3, r1
 800e748:	40c2      	lsrs	r2, r0
 800e74a:	6163      	str	r3, [r4, #20]
 800e74c:	9201      	str	r2, [sp, #4]
 800e74e:	9b01      	ldr	r3, [sp, #4]
 800e750:	2b00      	cmp	r3, #0
 800e752:	bf0c      	ite	eq
 800e754:	2201      	moveq	r2, #1
 800e756:	2202      	movne	r2, #2
 800e758:	61a3      	str	r3, [r4, #24]
 800e75a:	6122      	str	r2, [r4, #16]
 800e75c:	b1ad      	cbz	r5, 800e78a <__d2b+0x92>
 800e75e:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800e762:	4405      	add	r5, r0
 800e764:	6035      	str	r5, [r6, #0]
 800e766:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800e76a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e76c:	6018      	str	r0, [r3, #0]
 800e76e:	4620      	mov	r0, r4
 800e770:	b002      	add	sp, #8
 800e772:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 800e776:	6161      	str	r1, [r4, #20]
 800e778:	e7e9      	b.n	800e74e <__d2b+0x56>
 800e77a:	a801      	add	r0, sp, #4
 800e77c:	f7ff fcf3 	bl	800e166 <__lo0bits>
 800e780:	9b01      	ldr	r3, [sp, #4]
 800e782:	2201      	movs	r2, #1
 800e784:	6163      	str	r3, [r4, #20]
 800e786:	3020      	adds	r0, #32
 800e788:	e7e7      	b.n	800e75a <__d2b+0x62>
 800e78a:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800e78e:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800e792:	6030      	str	r0, [r6, #0]
 800e794:	6918      	ldr	r0, [r3, #16]
 800e796:	f7ff fcc7 	bl	800e128 <__hi0bits>
 800e79a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800e79e:	e7e4      	b.n	800e76a <__d2b+0x72>
 800e7a0:	0800f720 	.word	0x0800f720
 800e7a4:	0800f791 	.word	0x0800f791

0800e7a8 <__ratio>:
 800e7a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e7ac:	b085      	sub	sp, #20
 800e7ae:	e9cd 1000 	strd	r1, r0, [sp]
 800e7b2:	a902      	add	r1, sp, #8
 800e7b4:	f7ff ff58 	bl	800e668 <__b2d>
 800e7b8:	468b      	mov	fp, r1
 800e7ba:	4606      	mov	r6, r0
 800e7bc:	460f      	mov	r7, r1
 800e7be:	9800      	ldr	r0, [sp, #0]
 800e7c0:	a903      	add	r1, sp, #12
 800e7c2:	f7ff ff51 	bl	800e668 <__b2d>
 800e7c6:	460d      	mov	r5, r1
 800e7c8:	9b01      	ldr	r3, [sp, #4]
 800e7ca:	4689      	mov	r9, r1
 800e7cc:	6919      	ldr	r1, [r3, #16]
 800e7ce:	9b00      	ldr	r3, [sp, #0]
 800e7d0:	4604      	mov	r4, r0
 800e7d2:	691b      	ldr	r3, [r3, #16]
 800e7d4:	4630      	mov	r0, r6
 800e7d6:	1ac9      	subs	r1, r1, r3
 800e7d8:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800e7dc:	1a9b      	subs	r3, r3, r2
 800e7de:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 800e7e2:	2b00      	cmp	r3, #0
 800e7e4:	bfcd      	iteet	gt
 800e7e6:	463a      	movgt	r2, r7
 800e7e8:	462a      	movle	r2, r5
 800e7ea:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800e7ee:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
 800e7f2:	bfd8      	it	le
 800e7f4:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 800e7f8:	464b      	mov	r3, r9
 800e7fa:	4622      	mov	r2, r4
 800e7fc:	4659      	mov	r1, fp
 800e7fe:	f7f2 f849 	bl	8000894 <__aeabi_ddiv>
 800e802:	b005      	add	sp, #20
 800e804:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800e808 <__copybits>:
 800e808:	3901      	subs	r1, #1
 800e80a:	b570      	push	{r4, r5, r6, lr}
 800e80c:	1149      	asrs	r1, r1, #5
 800e80e:	6914      	ldr	r4, [r2, #16]
 800e810:	3101      	adds	r1, #1
 800e812:	f102 0314 	add.w	r3, r2, #20
 800e816:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800e81a:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800e81e:	1f05      	subs	r5, r0, #4
 800e820:	42a3      	cmp	r3, r4
 800e822:	d30c      	bcc.n	800e83e <__copybits+0x36>
 800e824:	1aa3      	subs	r3, r4, r2
 800e826:	3b11      	subs	r3, #17
 800e828:	f023 0303 	bic.w	r3, r3, #3
 800e82c:	3211      	adds	r2, #17
 800e82e:	42a2      	cmp	r2, r4
 800e830:	bf88      	it	hi
 800e832:	2300      	movhi	r3, #0
 800e834:	4418      	add	r0, r3
 800e836:	2300      	movs	r3, #0
 800e838:	4288      	cmp	r0, r1
 800e83a:	d305      	bcc.n	800e848 <__copybits+0x40>
 800e83c:	bd70      	pop	{r4, r5, r6, pc}
 800e83e:	f853 6b04 	ldr.w	r6, [r3], #4
 800e842:	f845 6f04 	str.w	r6, [r5, #4]!
 800e846:	e7eb      	b.n	800e820 <__copybits+0x18>
 800e848:	f840 3b04 	str.w	r3, [r0], #4
 800e84c:	e7f4      	b.n	800e838 <__copybits+0x30>

0800e84e <__any_on>:
 800e84e:	f100 0214 	add.w	r2, r0, #20
 800e852:	6900      	ldr	r0, [r0, #16]
 800e854:	114b      	asrs	r3, r1, #5
 800e856:	4298      	cmp	r0, r3
 800e858:	b510      	push	{r4, lr}
 800e85a:	db11      	blt.n	800e880 <__any_on+0x32>
 800e85c:	dd0a      	ble.n	800e874 <__any_on+0x26>
 800e85e:	f011 011f 	ands.w	r1, r1, #31
 800e862:	d007      	beq.n	800e874 <__any_on+0x26>
 800e864:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800e868:	fa24 f001 	lsr.w	r0, r4, r1
 800e86c:	fa00 f101 	lsl.w	r1, r0, r1
 800e870:	428c      	cmp	r4, r1
 800e872:	d10b      	bne.n	800e88c <__any_on+0x3e>
 800e874:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800e878:	4293      	cmp	r3, r2
 800e87a:	d803      	bhi.n	800e884 <__any_on+0x36>
 800e87c:	2000      	movs	r0, #0
 800e87e:	bd10      	pop	{r4, pc}
 800e880:	4603      	mov	r3, r0
 800e882:	e7f7      	b.n	800e874 <__any_on+0x26>
 800e884:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800e888:	2900      	cmp	r1, #0
 800e88a:	d0f5      	beq.n	800e878 <__any_on+0x2a>
 800e88c:	2001      	movs	r0, #1
 800e88e:	e7f6      	b.n	800e87e <__any_on+0x30>

0800e890 <__ascii_wctomb>:
 800e890:	4603      	mov	r3, r0
 800e892:	4608      	mov	r0, r1
 800e894:	b141      	cbz	r1, 800e8a8 <__ascii_wctomb+0x18>
 800e896:	2aff      	cmp	r2, #255	@ 0xff
 800e898:	d904      	bls.n	800e8a4 <__ascii_wctomb+0x14>
 800e89a:	228a      	movs	r2, #138	@ 0x8a
 800e89c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800e8a0:	601a      	str	r2, [r3, #0]
 800e8a2:	4770      	bx	lr
 800e8a4:	2001      	movs	r0, #1
 800e8a6:	700a      	strb	r2, [r1, #0]
 800e8a8:	4770      	bx	lr
	...

0800e8ac <_strtoll_l.constprop.0>:
 800e8ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e8b0:	4689      	mov	r9, r1
 800e8b2:	461e      	mov	r6, r3
 800e8b4:	460d      	mov	r5, r1
 800e8b6:	4690      	mov	r8, r2
 800e8b8:	b085      	sub	sp, #20
 800e8ba:	4a42      	ldr	r2, [pc, #264]	@ (800e9c4 <_strtoll_l.constprop.0+0x118>)
 800e8bc:	9002      	str	r0, [sp, #8]
 800e8be:	462b      	mov	r3, r5
 800e8c0:	f815 4b01 	ldrb.w	r4, [r5], #1
 800e8c4:	5d17      	ldrb	r7, [r2, r4]
 800e8c6:	f017 0708 	ands.w	r7, r7, #8
 800e8ca:	d1f8      	bne.n	800e8be <_strtoll_l.constprop.0+0x12>
 800e8cc:	2c2d      	cmp	r4, #45	@ 0x2d
 800e8ce:	d149      	bne.n	800e964 <_strtoll_l.constprop.0+0xb8>
 800e8d0:	2701      	movs	r7, #1
 800e8d2:	782c      	ldrb	r4, [r5, #0]
 800e8d4:	1c9d      	adds	r5, r3, #2
 800e8d6:	f036 0310 	bics.w	r3, r6, #16
 800e8da:	d109      	bne.n	800e8f0 <_strtoll_l.constprop.0+0x44>
 800e8dc:	2c30      	cmp	r4, #48	@ 0x30
 800e8de:	d146      	bne.n	800e96e <_strtoll_l.constprop.0+0xc2>
 800e8e0:	782b      	ldrb	r3, [r5, #0]
 800e8e2:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 800e8e6:	2b58      	cmp	r3, #88	@ 0x58
 800e8e8:	d141      	bne.n	800e96e <_strtoll_l.constprop.0+0xc2>
 800e8ea:	2610      	movs	r6, #16
 800e8ec:	786c      	ldrb	r4, [r5, #1]
 800e8ee:	3502      	adds	r5, #2
 800e8f0:	f107 4a00 	add.w	sl, r7, #2147483648	@ 0x80000000
 800e8f4:	f107 3bff 	add.w	fp, r7, #4294967295	@ 0xffffffff
 800e8f8:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 800e8fc:	17f3      	asrs	r3, r6, #31
 800e8fe:	4632      	mov	r2, r6
 800e900:	4658      	mov	r0, fp
 800e902:	4651      	mov	r1, sl
 800e904:	9303      	str	r3, [sp, #12]
 800e906:	f7f2 fb17 	bl	8000f38 <__aeabi_uldivmod>
 800e90a:	9201      	str	r2, [sp, #4]
 800e90c:	2200      	movs	r2, #0
 800e90e:	468e      	mov	lr, r1
 800e910:	4684      	mov	ip, r0
 800e912:	4611      	mov	r1, r2
 800e914:	4610      	mov	r0, r2
 800e916:	f1a4 0330 	sub.w	r3, r4, #48	@ 0x30
 800e91a:	2b09      	cmp	r3, #9
 800e91c:	d905      	bls.n	800e92a <_strtoll_l.constprop.0+0x7e>
 800e91e:	f1a4 0341 	sub.w	r3, r4, #65	@ 0x41
 800e922:	2b19      	cmp	r3, #25
 800e924:	d82a      	bhi.n	800e97c <_strtoll_l.constprop.0+0xd0>
 800e926:	f1a4 0337 	sub.w	r3, r4, #55	@ 0x37
 800e92a:	429e      	cmp	r6, r3
 800e92c:	dd30      	ble.n	800e990 <_strtoll_l.constprop.0+0xe4>
 800e92e:	1c54      	adds	r4, r2, #1
 800e930:	d015      	beq.n	800e95e <_strtoll_l.constprop.0+0xb2>
 800e932:	4584      	cmp	ip, r0
 800e934:	eb7e 0201 	sbcs.w	r2, lr, r1
 800e938:	d327      	bcc.n	800e98a <_strtoll_l.constprop.0+0xde>
 800e93a:	458e      	cmp	lr, r1
 800e93c:	bf08      	it	eq
 800e93e:	4584      	cmpeq	ip, r0
 800e940:	d102      	bne.n	800e948 <_strtoll_l.constprop.0+0x9c>
 800e942:	9a01      	ldr	r2, [sp, #4]
 800e944:	429a      	cmp	r2, r3
 800e946:	db20      	blt.n	800e98a <_strtoll_l.constprop.0+0xde>
 800e948:	4371      	muls	r1, r6
 800e94a:	9a03      	ldr	r2, [sp, #12]
 800e94c:	fb00 1102 	mla	r1, r0, r2, r1
 800e950:	fba6 0200 	umull	r0, r2, r6, r0
 800e954:	440a      	add	r2, r1
 800e956:	1818      	adds	r0, r3, r0
 800e958:	eb42 71e3 	adc.w	r1, r2, r3, asr #31
 800e95c:	2201      	movs	r2, #1
 800e95e:	f815 4b01 	ldrb.w	r4, [r5], #1
 800e962:	e7d8      	b.n	800e916 <_strtoll_l.constprop.0+0x6a>
 800e964:	2c2b      	cmp	r4, #43	@ 0x2b
 800e966:	bf04      	itt	eq
 800e968:	782c      	ldrbeq	r4, [r5, #0]
 800e96a:	1c9d      	addeq	r5, r3, #2
 800e96c:	e7b3      	b.n	800e8d6 <_strtoll_l.constprop.0+0x2a>
 800e96e:	2e00      	cmp	r6, #0
 800e970:	d1be      	bne.n	800e8f0 <_strtoll_l.constprop.0+0x44>
 800e972:	2c30      	cmp	r4, #48	@ 0x30
 800e974:	bf0c      	ite	eq
 800e976:	2608      	moveq	r6, #8
 800e978:	260a      	movne	r6, #10
 800e97a:	e7b9      	b.n	800e8f0 <_strtoll_l.constprop.0+0x44>
 800e97c:	f1a4 0361 	sub.w	r3, r4, #97	@ 0x61
 800e980:	2b19      	cmp	r3, #25
 800e982:	d805      	bhi.n	800e990 <_strtoll_l.constprop.0+0xe4>
 800e984:	f1a4 0357 	sub.w	r3, r4, #87	@ 0x57
 800e988:	e7cf      	b.n	800e92a <_strtoll_l.constprop.0+0x7e>
 800e98a:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800e98e:	e7e6      	b.n	800e95e <_strtoll_l.constprop.0+0xb2>
 800e990:	1c53      	adds	r3, r2, #1
 800e992:	d10a      	bne.n	800e9aa <_strtoll_l.constprop.0+0xfe>
 800e994:	2322      	movs	r3, #34	@ 0x22
 800e996:	9a02      	ldr	r2, [sp, #8]
 800e998:	4658      	mov	r0, fp
 800e99a:	4651      	mov	r1, sl
 800e99c:	6013      	str	r3, [r2, #0]
 800e99e:	f1b8 0f00 	cmp.w	r8, #0
 800e9a2:	d10a      	bne.n	800e9ba <_strtoll_l.constprop.0+0x10e>
 800e9a4:	b005      	add	sp, #20
 800e9a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e9aa:	b117      	cbz	r7, 800e9b2 <_strtoll_l.constprop.0+0x106>
 800e9ac:	4240      	negs	r0, r0
 800e9ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800e9b2:	f1b8 0f00 	cmp.w	r8, #0
 800e9b6:	d0f5      	beq.n	800e9a4 <_strtoll_l.constprop.0+0xf8>
 800e9b8:	b10a      	cbz	r2, 800e9be <_strtoll_l.constprop.0+0x112>
 800e9ba:	f105 39ff 	add.w	r9, r5, #4294967295	@ 0xffffffff
 800e9be:	f8c8 9000 	str.w	r9, [r8]
 800e9c2:	e7ef      	b.n	800e9a4 <_strtoll_l.constprop.0+0xf8>
 800e9c4:	0800f8e9 	.word	0x0800f8e9

0800e9c8 <strtoll>:
 800e9c8:	4613      	mov	r3, r2
 800e9ca:	460a      	mov	r2, r1
 800e9cc:	4601      	mov	r1, r0
 800e9ce:	4802      	ldr	r0, [pc, #8]	@ (800e9d8 <strtoll+0x10>)
 800e9d0:	6800      	ldr	r0, [r0, #0]
 800e9d2:	f7ff bf6b 	b.w	800e8ac <_strtoll_l.constprop.0>
 800e9d6:	bf00      	nop
 800e9d8:	20000308 	.word	0x20000308

0800e9dc <__ssputs_r>:
 800e9dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e9e0:	461f      	mov	r7, r3
 800e9e2:	688e      	ldr	r6, [r1, #8]
 800e9e4:	4682      	mov	sl, r0
 800e9e6:	42be      	cmp	r6, r7
 800e9e8:	460c      	mov	r4, r1
 800e9ea:	4690      	mov	r8, r2
 800e9ec:	680b      	ldr	r3, [r1, #0]
 800e9ee:	d82d      	bhi.n	800ea4c <__ssputs_r+0x70>
 800e9f0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800e9f4:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800e9f8:	d026      	beq.n	800ea48 <__ssputs_r+0x6c>
 800e9fa:	6965      	ldr	r5, [r4, #20]
 800e9fc:	6909      	ldr	r1, [r1, #16]
 800e9fe:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800ea02:	eba3 0901 	sub.w	r9, r3, r1
 800ea06:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800ea0a:	1c7b      	adds	r3, r7, #1
 800ea0c:	444b      	add	r3, r9
 800ea0e:	106d      	asrs	r5, r5, #1
 800ea10:	429d      	cmp	r5, r3
 800ea12:	bf38      	it	cc
 800ea14:	461d      	movcc	r5, r3
 800ea16:	0553      	lsls	r3, r2, #21
 800ea18:	d527      	bpl.n	800ea6a <__ssputs_r+0x8e>
 800ea1a:	4629      	mov	r1, r5
 800ea1c:	f7ff f9f4 	bl	800de08 <_malloc_r>
 800ea20:	4606      	mov	r6, r0
 800ea22:	b360      	cbz	r0, 800ea7e <__ssputs_r+0xa2>
 800ea24:	464a      	mov	r2, r9
 800ea26:	6921      	ldr	r1, [r4, #16]
 800ea28:	f7fd ffdb 	bl	800c9e2 <memcpy>
 800ea2c:	89a3      	ldrh	r3, [r4, #12]
 800ea2e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800ea32:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ea36:	81a3      	strh	r3, [r4, #12]
 800ea38:	6126      	str	r6, [r4, #16]
 800ea3a:	444e      	add	r6, r9
 800ea3c:	6026      	str	r6, [r4, #0]
 800ea3e:	463e      	mov	r6, r7
 800ea40:	6165      	str	r5, [r4, #20]
 800ea42:	eba5 0509 	sub.w	r5, r5, r9
 800ea46:	60a5      	str	r5, [r4, #8]
 800ea48:	42be      	cmp	r6, r7
 800ea4a:	d900      	bls.n	800ea4e <__ssputs_r+0x72>
 800ea4c:	463e      	mov	r6, r7
 800ea4e:	4632      	mov	r2, r6
 800ea50:	4641      	mov	r1, r8
 800ea52:	6820      	ldr	r0, [r4, #0]
 800ea54:	f000 f9c2 	bl	800eddc <memmove>
 800ea58:	2000      	movs	r0, #0
 800ea5a:	68a3      	ldr	r3, [r4, #8]
 800ea5c:	1b9b      	subs	r3, r3, r6
 800ea5e:	60a3      	str	r3, [r4, #8]
 800ea60:	6823      	ldr	r3, [r4, #0]
 800ea62:	4433      	add	r3, r6
 800ea64:	6023      	str	r3, [r4, #0]
 800ea66:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ea6a:	462a      	mov	r2, r5
 800ea6c:	f000 fa12 	bl	800ee94 <_realloc_r>
 800ea70:	4606      	mov	r6, r0
 800ea72:	2800      	cmp	r0, #0
 800ea74:	d1e0      	bne.n	800ea38 <__ssputs_r+0x5c>
 800ea76:	4650      	mov	r0, sl
 800ea78:	6921      	ldr	r1, [r4, #16]
 800ea7a:	f7fe fe19 	bl	800d6b0 <_free_r>
 800ea7e:	230c      	movs	r3, #12
 800ea80:	f8ca 3000 	str.w	r3, [sl]
 800ea84:	89a3      	ldrh	r3, [r4, #12]
 800ea86:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800ea8a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ea8e:	81a3      	strh	r3, [r4, #12]
 800ea90:	e7e9      	b.n	800ea66 <__ssputs_r+0x8a>
	...

0800ea94 <_svfiprintf_r>:
 800ea94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ea98:	4698      	mov	r8, r3
 800ea9a:	898b      	ldrh	r3, [r1, #12]
 800ea9c:	4607      	mov	r7, r0
 800ea9e:	061b      	lsls	r3, r3, #24
 800eaa0:	460d      	mov	r5, r1
 800eaa2:	4614      	mov	r4, r2
 800eaa4:	b09d      	sub	sp, #116	@ 0x74
 800eaa6:	d510      	bpl.n	800eaca <_svfiprintf_r+0x36>
 800eaa8:	690b      	ldr	r3, [r1, #16]
 800eaaa:	b973      	cbnz	r3, 800eaca <_svfiprintf_r+0x36>
 800eaac:	2140      	movs	r1, #64	@ 0x40
 800eaae:	f7ff f9ab 	bl	800de08 <_malloc_r>
 800eab2:	6028      	str	r0, [r5, #0]
 800eab4:	6128      	str	r0, [r5, #16]
 800eab6:	b930      	cbnz	r0, 800eac6 <_svfiprintf_r+0x32>
 800eab8:	230c      	movs	r3, #12
 800eaba:	603b      	str	r3, [r7, #0]
 800eabc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800eac0:	b01d      	add	sp, #116	@ 0x74
 800eac2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800eac6:	2340      	movs	r3, #64	@ 0x40
 800eac8:	616b      	str	r3, [r5, #20]
 800eaca:	2300      	movs	r3, #0
 800eacc:	9309      	str	r3, [sp, #36]	@ 0x24
 800eace:	2320      	movs	r3, #32
 800ead0:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800ead4:	2330      	movs	r3, #48	@ 0x30
 800ead6:	f04f 0901 	mov.w	r9, #1
 800eada:	f8cd 800c 	str.w	r8, [sp, #12]
 800eade:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 800ec78 <_svfiprintf_r+0x1e4>
 800eae2:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800eae6:	4623      	mov	r3, r4
 800eae8:	469a      	mov	sl, r3
 800eaea:	f813 2b01 	ldrb.w	r2, [r3], #1
 800eaee:	b10a      	cbz	r2, 800eaf4 <_svfiprintf_r+0x60>
 800eaf0:	2a25      	cmp	r2, #37	@ 0x25
 800eaf2:	d1f9      	bne.n	800eae8 <_svfiprintf_r+0x54>
 800eaf4:	ebba 0b04 	subs.w	fp, sl, r4
 800eaf8:	d00b      	beq.n	800eb12 <_svfiprintf_r+0x7e>
 800eafa:	465b      	mov	r3, fp
 800eafc:	4622      	mov	r2, r4
 800eafe:	4629      	mov	r1, r5
 800eb00:	4638      	mov	r0, r7
 800eb02:	f7ff ff6b 	bl	800e9dc <__ssputs_r>
 800eb06:	3001      	adds	r0, #1
 800eb08:	f000 80a7 	beq.w	800ec5a <_svfiprintf_r+0x1c6>
 800eb0c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800eb0e:	445a      	add	r2, fp
 800eb10:	9209      	str	r2, [sp, #36]	@ 0x24
 800eb12:	f89a 3000 	ldrb.w	r3, [sl]
 800eb16:	2b00      	cmp	r3, #0
 800eb18:	f000 809f 	beq.w	800ec5a <_svfiprintf_r+0x1c6>
 800eb1c:	2300      	movs	r3, #0
 800eb1e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800eb22:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800eb26:	f10a 0a01 	add.w	sl, sl, #1
 800eb2a:	9304      	str	r3, [sp, #16]
 800eb2c:	9307      	str	r3, [sp, #28]
 800eb2e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800eb32:	931a      	str	r3, [sp, #104]	@ 0x68
 800eb34:	4654      	mov	r4, sl
 800eb36:	2205      	movs	r2, #5
 800eb38:	f814 1b01 	ldrb.w	r1, [r4], #1
 800eb3c:	484e      	ldr	r0, [pc, #312]	@ (800ec78 <_svfiprintf_r+0x1e4>)
 800eb3e:	f7fd ff42 	bl	800c9c6 <memchr>
 800eb42:	9a04      	ldr	r2, [sp, #16]
 800eb44:	b9d8      	cbnz	r0, 800eb7e <_svfiprintf_r+0xea>
 800eb46:	06d0      	lsls	r0, r2, #27
 800eb48:	bf44      	itt	mi
 800eb4a:	2320      	movmi	r3, #32
 800eb4c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800eb50:	0711      	lsls	r1, r2, #28
 800eb52:	bf44      	itt	mi
 800eb54:	232b      	movmi	r3, #43	@ 0x2b
 800eb56:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800eb5a:	f89a 3000 	ldrb.w	r3, [sl]
 800eb5e:	2b2a      	cmp	r3, #42	@ 0x2a
 800eb60:	d015      	beq.n	800eb8e <_svfiprintf_r+0xfa>
 800eb62:	4654      	mov	r4, sl
 800eb64:	2000      	movs	r0, #0
 800eb66:	f04f 0c0a 	mov.w	ip, #10
 800eb6a:	9a07      	ldr	r2, [sp, #28]
 800eb6c:	4621      	mov	r1, r4
 800eb6e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800eb72:	3b30      	subs	r3, #48	@ 0x30
 800eb74:	2b09      	cmp	r3, #9
 800eb76:	d94b      	bls.n	800ec10 <_svfiprintf_r+0x17c>
 800eb78:	b1b0      	cbz	r0, 800eba8 <_svfiprintf_r+0x114>
 800eb7a:	9207      	str	r2, [sp, #28]
 800eb7c:	e014      	b.n	800eba8 <_svfiprintf_r+0x114>
 800eb7e:	eba0 0308 	sub.w	r3, r0, r8
 800eb82:	fa09 f303 	lsl.w	r3, r9, r3
 800eb86:	4313      	orrs	r3, r2
 800eb88:	46a2      	mov	sl, r4
 800eb8a:	9304      	str	r3, [sp, #16]
 800eb8c:	e7d2      	b.n	800eb34 <_svfiprintf_r+0xa0>
 800eb8e:	9b03      	ldr	r3, [sp, #12]
 800eb90:	1d19      	adds	r1, r3, #4
 800eb92:	681b      	ldr	r3, [r3, #0]
 800eb94:	9103      	str	r1, [sp, #12]
 800eb96:	2b00      	cmp	r3, #0
 800eb98:	bfbb      	ittet	lt
 800eb9a:	425b      	neglt	r3, r3
 800eb9c:	f042 0202 	orrlt.w	r2, r2, #2
 800eba0:	9307      	strge	r3, [sp, #28]
 800eba2:	9307      	strlt	r3, [sp, #28]
 800eba4:	bfb8      	it	lt
 800eba6:	9204      	strlt	r2, [sp, #16]
 800eba8:	7823      	ldrb	r3, [r4, #0]
 800ebaa:	2b2e      	cmp	r3, #46	@ 0x2e
 800ebac:	d10a      	bne.n	800ebc4 <_svfiprintf_r+0x130>
 800ebae:	7863      	ldrb	r3, [r4, #1]
 800ebb0:	2b2a      	cmp	r3, #42	@ 0x2a
 800ebb2:	d132      	bne.n	800ec1a <_svfiprintf_r+0x186>
 800ebb4:	9b03      	ldr	r3, [sp, #12]
 800ebb6:	3402      	adds	r4, #2
 800ebb8:	1d1a      	adds	r2, r3, #4
 800ebba:	681b      	ldr	r3, [r3, #0]
 800ebbc:	9203      	str	r2, [sp, #12]
 800ebbe:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800ebc2:	9305      	str	r3, [sp, #20]
 800ebc4:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 800ec7c <_svfiprintf_r+0x1e8>
 800ebc8:	2203      	movs	r2, #3
 800ebca:	4650      	mov	r0, sl
 800ebcc:	7821      	ldrb	r1, [r4, #0]
 800ebce:	f7fd fefa 	bl	800c9c6 <memchr>
 800ebd2:	b138      	cbz	r0, 800ebe4 <_svfiprintf_r+0x150>
 800ebd4:	2240      	movs	r2, #64	@ 0x40
 800ebd6:	9b04      	ldr	r3, [sp, #16]
 800ebd8:	eba0 000a 	sub.w	r0, r0, sl
 800ebdc:	4082      	lsls	r2, r0
 800ebde:	4313      	orrs	r3, r2
 800ebe0:	3401      	adds	r4, #1
 800ebe2:	9304      	str	r3, [sp, #16]
 800ebe4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ebe8:	2206      	movs	r2, #6
 800ebea:	4825      	ldr	r0, [pc, #148]	@ (800ec80 <_svfiprintf_r+0x1ec>)
 800ebec:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800ebf0:	f7fd fee9 	bl	800c9c6 <memchr>
 800ebf4:	2800      	cmp	r0, #0
 800ebf6:	d036      	beq.n	800ec66 <_svfiprintf_r+0x1d2>
 800ebf8:	4b22      	ldr	r3, [pc, #136]	@ (800ec84 <_svfiprintf_r+0x1f0>)
 800ebfa:	bb1b      	cbnz	r3, 800ec44 <_svfiprintf_r+0x1b0>
 800ebfc:	9b03      	ldr	r3, [sp, #12]
 800ebfe:	3307      	adds	r3, #7
 800ec00:	f023 0307 	bic.w	r3, r3, #7
 800ec04:	3308      	adds	r3, #8
 800ec06:	9303      	str	r3, [sp, #12]
 800ec08:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ec0a:	4433      	add	r3, r6
 800ec0c:	9309      	str	r3, [sp, #36]	@ 0x24
 800ec0e:	e76a      	b.n	800eae6 <_svfiprintf_r+0x52>
 800ec10:	460c      	mov	r4, r1
 800ec12:	2001      	movs	r0, #1
 800ec14:	fb0c 3202 	mla	r2, ip, r2, r3
 800ec18:	e7a8      	b.n	800eb6c <_svfiprintf_r+0xd8>
 800ec1a:	2300      	movs	r3, #0
 800ec1c:	f04f 0c0a 	mov.w	ip, #10
 800ec20:	4619      	mov	r1, r3
 800ec22:	3401      	adds	r4, #1
 800ec24:	9305      	str	r3, [sp, #20]
 800ec26:	4620      	mov	r0, r4
 800ec28:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ec2c:	3a30      	subs	r2, #48	@ 0x30
 800ec2e:	2a09      	cmp	r2, #9
 800ec30:	d903      	bls.n	800ec3a <_svfiprintf_r+0x1a6>
 800ec32:	2b00      	cmp	r3, #0
 800ec34:	d0c6      	beq.n	800ebc4 <_svfiprintf_r+0x130>
 800ec36:	9105      	str	r1, [sp, #20]
 800ec38:	e7c4      	b.n	800ebc4 <_svfiprintf_r+0x130>
 800ec3a:	4604      	mov	r4, r0
 800ec3c:	2301      	movs	r3, #1
 800ec3e:	fb0c 2101 	mla	r1, ip, r1, r2
 800ec42:	e7f0      	b.n	800ec26 <_svfiprintf_r+0x192>
 800ec44:	ab03      	add	r3, sp, #12
 800ec46:	9300      	str	r3, [sp, #0]
 800ec48:	462a      	mov	r2, r5
 800ec4a:	4638      	mov	r0, r7
 800ec4c:	4b0e      	ldr	r3, [pc, #56]	@ (800ec88 <_svfiprintf_r+0x1f4>)
 800ec4e:	a904      	add	r1, sp, #16
 800ec50:	f7fd f944 	bl	800bedc <_printf_float>
 800ec54:	1c42      	adds	r2, r0, #1
 800ec56:	4606      	mov	r6, r0
 800ec58:	d1d6      	bne.n	800ec08 <_svfiprintf_r+0x174>
 800ec5a:	89ab      	ldrh	r3, [r5, #12]
 800ec5c:	065b      	lsls	r3, r3, #25
 800ec5e:	f53f af2d 	bmi.w	800eabc <_svfiprintf_r+0x28>
 800ec62:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800ec64:	e72c      	b.n	800eac0 <_svfiprintf_r+0x2c>
 800ec66:	ab03      	add	r3, sp, #12
 800ec68:	9300      	str	r3, [sp, #0]
 800ec6a:	462a      	mov	r2, r5
 800ec6c:	4638      	mov	r0, r7
 800ec6e:	4b06      	ldr	r3, [pc, #24]	@ (800ec88 <_svfiprintf_r+0x1f4>)
 800ec70:	a904      	add	r1, sp, #16
 800ec72:	f7fd fbd1 	bl	800c418 <_printf_i>
 800ec76:	e7ed      	b.n	800ec54 <_svfiprintf_r+0x1c0>
 800ec78:	0800f9e9 	.word	0x0800f9e9
 800ec7c:	0800f9ef 	.word	0x0800f9ef
 800ec80:	0800f9f3 	.word	0x0800f9f3
 800ec84:	0800bedd 	.word	0x0800bedd
 800ec88:	0800e9dd 	.word	0x0800e9dd

0800ec8c <__sflush_r>:
 800ec8c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800ec90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ec92:	0716      	lsls	r6, r2, #28
 800ec94:	4605      	mov	r5, r0
 800ec96:	460c      	mov	r4, r1
 800ec98:	d454      	bmi.n	800ed44 <__sflush_r+0xb8>
 800ec9a:	684b      	ldr	r3, [r1, #4]
 800ec9c:	2b00      	cmp	r3, #0
 800ec9e:	dc02      	bgt.n	800eca6 <__sflush_r+0x1a>
 800eca0:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800eca2:	2b00      	cmp	r3, #0
 800eca4:	dd48      	ble.n	800ed38 <__sflush_r+0xac>
 800eca6:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800eca8:	2e00      	cmp	r6, #0
 800ecaa:	d045      	beq.n	800ed38 <__sflush_r+0xac>
 800ecac:	2300      	movs	r3, #0
 800ecae:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800ecb2:	682f      	ldr	r7, [r5, #0]
 800ecb4:	6a21      	ldr	r1, [r4, #32]
 800ecb6:	602b      	str	r3, [r5, #0]
 800ecb8:	d030      	beq.n	800ed1c <__sflush_r+0x90>
 800ecba:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800ecbc:	89a3      	ldrh	r3, [r4, #12]
 800ecbe:	0759      	lsls	r1, r3, #29
 800ecc0:	d505      	bpl.n	800ecce <__sflush_r+0x42>
 800ecc2:	6863      	ldr	r3, [r4, #4]
 800ecc4:	1ad2      	subs	r2, r2, r3
 800ecc6:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800ecc8:	b10b      	cbz	r3, 800ecce <__sflush_r+0x42>
 800ecca:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800eccc:	1ad2      	subs	r2, r2, r3
 800ecce:	2300      	movs	r3, #0
 800ecd0:	4628      	mov	r0, r5
 800ecd2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800ecd4:	6a21      	ldr	r1, [r4, #32]
 800ecd6:	47b0      	blx	r6
 800ecd8:	1c43      	adds	r3, r0, #1
 800ecda:	89a3      	ldrh	r3, [r4, #12]
 800ecdc:	d106      	bne.n	800ecec <__sflush_r+0x60>
 800ecde:	6829      	ldr	r1, [r5, #0]
 800ece0:	291d      	cmp	r1, #29
 800ece2:	d82b      	bhi.n	800ed3c <__sflush_r+0xb0>
 800ece4:	4a28      	ldr	r2, [pc, #160]	@ (800ed88 <__sflush_r+0xfc>)
 800ece6:	410a      	asrs	r2, r1
 800ece8:	07d6      	lsls	r6, r2, #31
 800ecea:	d427      	bmi.n	800ed3c <__sflush_r+0xb0>
 800ecec:	2200      	movs	r2, #0
 800ecee:	6062      	str	r2, [r4, #4]
 800ecf0:	6922      	ldr	r2, [r4, #16]
 800ecf2:	04d9      	lsls	r1, r3, #19
 800ecf4:	6022      	str	r2, [r4, #0]
 800ecf6:	d504      	bpl.n	800ed02 <__sflush_r+0x76>
 800ecf8:	1c42      	adds	r2, r0, #1
 800ecfa:	d101      	bne.n	800ed00 <__sflush_r+0x74>
 800ecfc:	682b      	ldr	r3, [r5, #0]
 800ecfe:	b903      	cbnz	r3, 800ed02 <__sflush_r+0x76>
 800ed00:	6560      	str	r0, [r4, #84]	@ 0x54
 800ed02:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800ed04:	602f      	str	r7, [r5, #0]
 800ed06:	b1b9      	cbz	r1, 800ed38 <__sflush_r+0xac>
 800ed08:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800ed0c:	4299      	cmp	r1, r3
 800ed0e:	d002      	beq.n	800ed16 <__sflush_r+0x8a>
 800ed10:	4628      	mov	r0, r5
 800ed12:	f7fe fccd 	bl	800d6b0 <_free_r>
 800ed16:	2300      	movs	r3, #0
 800ed18:	6363      	str	r3, [r4, #52]	@ 0x34
 800ed1a:	e00d      	b.n	800ed38 <__sflush_r+0xac>
 800ed1c:	2301      	movs	r3, #1
 800ed1e:	4628      	mov	r0, r5
 800ed20:	47b0      	blx	r6
 800ed22:	4602      	mov	r2, r0
 800ed24:	1c50      	adds	r0, r2, #1
 800ed26:	d1c9      	bne.n	800ecbc <__sflush_r+0x30>
 800ed28:	682b      	ldr	r3, [r5, #0]
 800ed2a:	2b00      	cmp	r3, #0
 800ed2c:	d0c6      	beq.n	800ecbc <__sflush_r+0x30>
 800ed2e:	2b1d      	cmp	r3, #29
 800ed30:	d001      	beq.n	800ed36 <__sflush_r+0xaa>
 800ed32:	2b16      	cmp	r3, #22
 800ed34:	d11d      	bne.n	800ed72 <__sflush_r+0xe6>
 800ed36:	602f      	str	r7, [r5, #0]
 800ed38:	2000      	movs	r0, #0
 800ed3a:	e021      	b.n	800ed80 <__sflush_r+0xf4>
 800ed3c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ed40:	b21b      	sxth	r3, r3
 800ed42:	e01a      	b.n	800ed7a <__sflush_r+0xee>
 800ed44:	690f      	ldr	r7, [r1, #16]
 800ed46:	2f00      	cmp	r7, #0
 800ed48:	d0f6      	beq.n	800ed38 <__sflush_r+0xac>
 800ed4a:	0793      	lsls	r3, r2, #30
 800ed4c:	bf18      	it	ne
 800ed4e:	2300      	movne	r3, #0
 800ed50:	680e      	ldr	r6, [r1, #0]
 800ed52:	bf08      	it	eq
 800ed54:	694b      	ldreq	r3, [r1, #20]
 800ed56:	1bf6      	subs	r6, r6, r7
 800ed58:	600f      	str	r7, [r1, #0]
 800ed5a:	608b      	str	r3, [r1, #8]
 800ed5c:	2e00      	cmp	r6, #0
 800ed5e:	ddeb      	ble.n	800ed38 <__sflush_r+0xac>
 800ed60:	4633      	mov	r3, r6
 800ed62:	463a      	mov	r2, r7
 800ed64:	4628      	mov	r0, r5
 800ed66:	6a21      	ldr	r1, [r4, #32]
 800ed68:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 800ed6c:	47e0      	blx	ip
 800ed6e:	2800      	cmp	r0, #0
 800ed70:	dc07      	bgt.n	800ed82 <__sflush_r+0xf6>
 800ed72:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ed76:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ed7a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800ed7e:	81a3      	strh	r3, [r4, #12]
 800ed80:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ed82:	4407      	add	r7, r0
 800ed84:	1a36      	subs	r6, r6, r0
 800ed86:	e7e9      	b.n	800ed5c <__sflush_r+0xd0>
 800ed88:	dfbffffe 	.word	0xdfbffffe

0800ed8c <_fflush_r>:
 800ed8c:	b538      	push	{r3, r4, r5, lr}
 800ed8e:	690b      	ldr	r3, [r1, #16]
 800ed90:	4605      	mov	r5, r0
 800ed92:	460c      	mov	r4, r1
 800ed94:	b913      	cbnz	r3, 800ed9c <_fflush_r+0x10>
 800ed96:	2500      	movs	r5, #0
 800ed98:	4628      	mov	r0, r5
 800ed9a:	bd38      	pop	{r3, r4, r5, pc}
 800ed9c:	b118      	cbz	r0, 800eda6 <_fflush_r+0x1a>
 800ed9e:	6a03      	ldr	r3, [r0, #32]
 800eda0:	b90b      	cbnz	r3, 800eda6 <_fflush_r+0x1a>
 800eda2:	f7fd fce5 	bl	800c770 <__sinit>
 800eda6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800edaa:	2b00      	cmp	r3, #0
 800edac:	d0f3      	beq.n	800ed96 <_fflush_r+0xa>
 800edae:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800edb0:	07d0      	lsls	r0, r2, #31
 800edb2:	d404      	bmi.n	800edbe <_fflush_r+0x32>
 800edb4:	0599      	lsls	r1, r3, #22
 800edb6:	d402      	bmi.n	800edbe <_fflush_r+0x32>
 800edb8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800edba:	f7fd fe02 	bl	800c9c2 <__retarget_lock_acquire_recursive>
 800edbe:	4628      	mov	r0, r5
 800edc0:	4621      	mov	r1, r4
 800edc2:	f7ff ff63 	bl	800ec8c <__sflush_r>
 800edc6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800edc8:	4605      	mov	r5, r0
 800edca:	07da      	lsls	r2, r3, #31
 800edcc:	d4e4      	bmi.n	800ed98 <_fflush_r+0xc>
 800edce:	89a3      	ldrh	r3, [r4, #12]
 800edd0:	059b      	lsls	r3, r3, #22
 800edd2:	d4e1      	bmi.n	800ed98 <_fflush_r+0xc>
 800edd4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800edd6:	f7fd fdf5 	bl	800c9c4 <__retarget_lock_release_recursive>
 800edda:	e7dd      	b.n	800ed98 <_fflush_r+0xc>

0800eddc <memmove>:
 800eddc:	4288      	cmp	r0, r1
 800edde:	b510      	push	{r4, lr}
 800ede0:	eb01 0402 	add.w	r4, r1, r2
 800ede4:	d902      	bls.n	800edec <memmove+0x10>
 800ede6:	4284      	cmp	r4, r0
 800ede8:	4623      	mov	r3, r4
 800edea:	d807      	bhi.n	800edfc <memmove+0x20>
 800edec:	1e43      	subs	r3, r0, #1
 800edee:	42a1      	cmp	r1, r4
 800edf0:	d008      	beq.n	800ee04 <memmove+0x28>
 800edf2:	f811 2b01 	ldrb.w	r2, [r1], #1
 800edf6:	f803 2f01 	strb.w	r2, [r3, #1]!
 800edfa:	e7f8      	b.n	800edee <memmove+0x12>
 800edfc:	4601      	mov	r1, r0
 800edfe:	4402      	add	r2, r0
 800ee00:	428a      	cmp	r2, r1
 800ee02:	d100      	bne.n	800ee06 <memmove+0x2a>
 800ee04:	bd10      	pop	{r4, pc}
 800ee06:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800ee0a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800ee0e:	e7f7      	b.n	800ee00 <memmove+0x24>

0800ee10 <_sbrk_r>:
 800ee10:	b538      	push	{r3, r4, r5, lr}
 800ee12:	2300      	movs	r3, #0
 800ee14:	4d05      	ldr	r5, [pc, #20]	@ (800ee2c <_sbrk_r+0x1c>)
 800ee16:	4604      	mov	r4, r0
 800ee18:	4608      	mov	r0, r1
 800ee1a:	602b      	str	r3, [r5, #0]
 800ee1c:	f7f3 f934 	bl	8002088 <_sbrk>
 800ee20:	1c43      	adds	r3, r0, #1
 800ee22:	d102      	bne.n	800ee2a <_sbrk_r+0x1a>
 800ee24:	682b      	ldr	r3, [r5, #0]
 800ee26:	b103      	cbz	r3, 800ee2a <_sbrk_r+0x1a>
 800ee28:	6023      	str	r3, [r4, #0]
 800ee2a:	bd38      	pop	{r3, r4, r5, pc}
 800ee2c:	200016f8 	.word	0x200016f8

0800ee30 <__assert_func>:
 800ee30:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800ee32:	4614      	mov	r4, r2
 800ee34:	461a      	mov	r2, r3
 800ee36:	4b09      	ldr	r3, [pc, #36]	@ (800ee5c <__assert_func+0x2c>)
 800ee38:	4605      	mov	r5, r0
 800ee3a:	681b      	ldr	r3, [r3, #0]
 800ee3c:	68d8      	ldr	r0, [r3, #12]
 800ee3e:	b954      	cbnz	r4, 800ee56 <__assert_func+0x26>
 800ee40:	4b07      	ldr	r3, [pc, #28]	@ (800ee60 <__assert_func+0x30>)
 800ee42:	461c      	mov	r4, r3
 800ee44:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800ee48:	9100      	str	r1, [sp, #0]
 800ee4a:	462b      	mov	r3, r5
 800ee4c:	4905      	ldr	r1, [pc, #20]	@ (800ee64 <__assert_func+0x34>)
 800ee4e:	f000 f84f 	bl	800eef0 <fiprintf>
 800ee52:	f000 f85f 	bl	800ef14 <abort>
 800ee56:	4b04      	ldr	r3, [pc, #16]	@ (800ee68 <__assert_func+0x38>)
 800ee58:	e7f4      	b.n	800ee44 <__assert_func+0x14>
 800ee5a:	bf00      	nop
 800ee5c:	20000308 	.word	0x20000308
 800ee60:	0800fa35 	.word	0x0800fa35
 800ee64:	0800fa07 	.word	0x0800fa07
 800ee68:	0800f9fa 	.word	0x0800f9fa

0800ee6c <_calloc_r>:
 800ee6c:	b570      	push	{r4, r5, r6, lr}
 800ee6e:	fba1 5402 	umull	r5, r4, r1, r2
 800ee72:	b93c      	cbnz	r4, 800ee84 <_calloc_r+0x18>
 800ee74:	4629      	mov	r1, r5
 800ee76:	f7fe ffc7 	bl	800de08 <_malloc_r>
 800ee7a:	4606      	mov	r6, r0
 800ee7c:	b928      	cbnz	r0, 800ee8a <_calloc_r+0x1e>
 800ee7e:	2600      	movs	r6, #0
 800ee80:	4630      	mov	r0, r6
 800ee82:	bd70      	pop	{r4, r5, r6, pc}
 800ee84:	220c      	movs	r2, #12
 800ee86:	6002      	str	r2, [r0, #0]
 800ee88:	e7f9      	b.n	800ee7e <_calloc_r+0x12>
 800ee8a:	462a      	mov	r2, r5
 800ee8c:	4621      	mov	r1, r4
 800ee8e:	f7fd fd08 	bl	800c8a2 <memset>
 800ee92:	e7f5      	b.n	800ee80 <_calloc_r+0x14>

0800ee94 <_realloc_r>:
 800ee94:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ee98:	4680      	mov	r8, r0
 800ee9a:	4615      	mov	r5, r2
 800ee9c:	460c      	mov	r4, r1
 800ee9e:	b921      	cbnz	r1, 800eeaa <_realloc_r+0x16>
 800eea0:	4611      	mov	r1, r2
 800eea2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800eea6:	f7fe bfaf 	b.w	800de08 <_malloc_r>
 800eeaa:	b92a      	cbnz	r2, 800eeb8 <_realloc_r+0x24>
 800eeac:	f7fe fc00 	bl	800d6b0 <_free_r>
 800eeb0:	2400      	movs	r4, #0
 800eeb2:	4620      	mov	r0, r4
 800eeb4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800eeb8:	f000 f833 	bl	800ef22 <_malloc_usable_size_r>
 800eebc:	4285      	cmp	r5, r0
 800eebe:	4606      	mov	r6, r0
 800eec0:	d802      	bhi.n	800eec8 <_realloc_r+0x34>
 800eec2:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800eec6:	d8f4      	bhi.n	800eeb2 <_realloc_r+0x1e>
 800eec8:	4629      	mov	r1, r5
 800eeca:	4640      	mov	r0, r8
 800eecc:	f7fe ff9c 	bl	800de08 <_malloc_r>
 800eed0:	4607      	mov	r7, r0
 800eed2:	2800      	cmp	r0, #0
 800eed4:	d0ec      	beq.n	800eeb0 <_realloc_r+0x1c>
 800eed6:	42b5      	cmp	r5, r6
 800eed8:	462a      	mov	r2, r5
 800eeda:	4621      	mov	r1, r4
 800eedc:	bf28      	it	cs
 800eede:	4632      	movcs	r2, r6
 800eee0:	f7fd fd7f 	bl	800c9e2 <memcpy>
 800eee4:	4621      	mov	r1, r4
 800eee6:	4640      	mov	r0, r8
 800eee8:	f7fe fbe2 	bl	800d6b0 <_free_r>
 800eeec:	463c      	mov	r4, r7
 800eeee:	e7e0      	b.n	800eeb2 <_realloc_r+0x1e>

0800eef0 <fiprintf>:
 800eef0:	b40e      	push	{r1, r2, r3}
 800eef2:	b503      	push	{r0, r1, lr}
 800eef4:	4601      	mov	r1, r0
 800eef6:	ab03      	add	r3, sp, #12
 800eef8:	4805      	ldr	r0, [pc, #20]	@ (800ef10 <fiprintf+0x20>)
 800eefa:	f853 2b04 	ldr.w	r2, [r3], #4
 800eefe:	6800      	ldr	r0, [r0, #0]
 800ef00:	9301      	str	r3, [sp, #4]
 800ef02:	f000 f83d 	bl	800ef80 <_vfiprintf_r>
 800ef06:	b002      	add	sp, #8
 800ef08:	f85d eb04 	ldr.w	lr, [sp], #4
 800ef0c:	b003      	add	sp, #12
 800ef0e:	4770      	bx	lr
 800ef10:	20000308 	.word	0x20000308

0800ef14 <abort>:
 800ef14:	2006      	movs	r0, #6
 800ef16:	b508      	push	{r3, lr}
 800ef18:	f000 fa06 	bl	800f328 <raise>
 800ef1c:	2001      	movs	r0, #1
 800ef1e:	f7f3 f83e 	bl	8001f9e <_exit>

0800ef22 <_malloc_usable_size_r>:
 800ef22:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ef26:	1f18      	subs	r0, r3, #4
 800ef28:	2b00      	cmp	r3, #0
 800ef2a:	bfbc      	itt	lt
 800ef2c:	580b      	ldrlt	r3, [r1, r0]
 800ef2e:	18c0      	addlt	r0, r0, r3
 800ef30:	4770      	bx	lr

0800ef32 <__sfputc_r>:
 800ef32:	6893      	ldr	r3, [r2, #8]
 800ef34:	b410      	push	{r4}
 800ef36:	3b01      	subs	r3, #1
 800ef38:	2b00      	cmp	r3, #0
 800ef3a:	6093      	str	r3, [r2, #8]
 800ef3c:	da07      	bge.n	800ef4e <__sfputc_r+0x1c>
 800ef3e:	6994      	ldr	r4, [r2, #24]
 800ef40:	42a3      	cmp	r3, r4
 800ef42:	db01      	blt.n	800ef48 <__sfputc_r+0x16>
 800ef44:	290a      	cmp	r1, #10
 800ef46:	d102      	bne.n	800ef4e <__sfputc_r+0x1c>
 800ef48:	bc10      	pop	{r4}
 800ef4a:	f000 b931 	b.w	800f1b0 <__swbuf_r>
 800ef4e:	6813      	ldr	r3, [r2, #0]
 800ef50:	1c58      	adds	r0, r3, #1
 800ef52:	6010      	str	r0, [r2, #0]
 800ef54:	7019      	strb	r1, [r3, #0]
 800ef56:	4608      	mov	r0, r1
 800ef58:	bc10      	pop	{r4}
 800ef5a:	4770      	bx	lr

0800ef5c <__sfputs_r>:
 800ef5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ef5e:	4606      	mov	r6, r0
 800ef60:	460f      	mov	r7, r1
 800ef62:	4614      	mov	r4, r2
 800ef64:	18d5      	adds	r5, r2, r3
 800ef66:	42ac      	cmp	r4, r5
 800ef68:	d101      	bne.n	800ef6e <__sfputs_r+0x12>
 800ef6a:	2000      	movs	r0, #0
 800ef6c:	e007      	b.n	800ef7e <__sfputs_r+0x22>
 800ef6e:	463a      	mov	r2, r7
 800ef70:	4630      	mov	r0, r6
 800ef72:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ef76:	f7ff ffdc 	bl	800ef32 <__sfputc_r>
 800ef7a:	1c43      	adds	r3, r0, #1
 800ef7c:	d1f3      	bne.n	800ef66 <__sfputs_r+0xa>
 800ef7e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800ef80 <_vfiprintf_r>:
 800ef80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ef84:	460d      	mov	r5, r1
 800ef86:	4614      	mov	r4, r2
 800ef88:	4698      	mov	r8, r3
 800ef8a:	4606      	mov	r6, r0
 800ef8c:	b09d      	sub	sp, #116	@ 0x74
 800ef8e:	b118      	cbz	r0, 800ef98 <_vfiprintf_r+0x18>
 800ef90:	6a03      	ldr	r3, [r0, #32]
 800ef92:	b90b      	cbnz	r3, 800ef98 <_vfiprintf_r+0x18>
 800ef94:	f7fd fbec 	bl	800c770 <__sinit>
 800ef98:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800ef9a:	07d9      	lsls	r1, r3, #31
 800ef9c:	d405      	bmi.n	800efaa <_vfiprintf_r+0x2a>
 800ef9e:	89ab      	ldrh	r3, [r5, #12]
 800efa0:	059a      	lsls	r2, r3, #22
 800efa2:	d402      	bmi.n	800efaa <_vfiprintf_r+0x2a>
 800efa4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800efa6:	f7fd fd0c 	bl	800c9c2 <__retarget_lock_acquire_recursive>
 800efaa:	89ab      	ldrh	r3, [r5, #12]
 800efac:	071b      	lsls	r3, r3, #28
 800efae:	d501      	bpl.n	800efb4 <_vfiprintf_r+0x34>
 800efb0:	692b      	ldr	r3, [r5, #16]
 800efb2:	b99b      	cbnz	r3, 800efdc <_vfiprintf_r+0x5c>
 800efb4:	4629      	mov	r1, r5
 800efb6:	4630      	mov	r0, r6
 800efb8:	f000 f938 	bl	800f22c <__swsetup_r>
 800efbc:	b170      	cbz	r0, 800efdc <_vfiprintf_r+0x5c>
 800efbe:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800efc0:	07dc      	lsls	r4, r3, #31
 800efc2:	d504      	bpl.n	800efce <_vfiprintf_r+0x4e>
 800efc4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800efc8:	b01d      	add	sp, #116	@ 0x74
 800efca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800efce:	89ab      	ldrh	r3, [r5, #12]
 800efd0:	0598      	lsls	r0, r3, #22
 800efd2:	d4f7      	bmi.n	800efc4 <_vfiprintf_r+0x44>
 800efd4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800efd6:	f7fd fcf5 	bl	800c9c4 <__retarget_lock_release_recursive>
 800efda:	e7f3      	b.n	800efc4 <_vfiprintf_r+0x44>
 800efdc:	2300      	movs	r3, #0
 800efde:	9309      	str	r3, [sp, #36]	@ 0x24
 800efe0:	2320      	movs	r3, #32
 800efe2:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800efe6:	2330      	movs	r3, #48	@ 0x30
 800efe8:	f04f 0901 	mov.w	r9, #1
 800efec:	f8cd 800c 	str.w	r8, [sp, #12]
 800eff0:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 800f19c <_vfiprintf_r+0x21c>
 800eff4:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800eff8:	4623      	mov	r3, r4
 800effa:	469a      	mov	sl, r3
 800effc:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f000:	b10a      	cbz	r2, 800f006 <_vfiprintf_r+0x86>
 800f002:	2a25      	cmp	r2, #37	@ 0x25
 800f004:	d1f9      	bne.n	800effa <_vfiprintf_r+0x7a>
 800f006:	ebba 0b04 	subs.w	fp, sl, r4
 800f00a:	d00b      	beq.n	800f024 <_vfiprintf_r+0xa4>
 800f00c:	465b      	mov	r3, fp
 800f00e:	4622      	mov	r2, r4
 800f010:	4629      	mov	r1, r5
 800f012:	4630      	mov	r0, r6
 800f014:	f7ff ffa2 	bl	800ef5c <__sfputs_r>
 800f018:	3001      	adds	r0, #1
 800f01a:	f000 80a7 	beq.w	800f16c <_vfiprintf_r+0x1ec>
 800f01e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800f020:	445a      	add	r2, fp
 800f022:	9209      	str	r2, [sp, #36]	@ 0x24
 800f024:	f89a 3000 	ldrb.w	r3, [sl]
 800f028:	2b00      	cmp	r3, #0
 800f02a:	f000 809f 	beq.w	800f16c <_vfiprintf_r+0x1ec>
 800f02e:	2300      	movs	r3, #0
 800f030:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800f034:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800f038:	f10a 0a01 	add.w	sl, sl, #1
 800f03c:	9304      	str	r3, [sp, #16]
 800f03e:	9307      	str	r3, [sp, #28]
 800f040:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800f044:	931a      	str	r3, [sp, #104]	@ 0x68
 800f046:	4654      	mov	r4, sl
 800f048:	2205      	movs	r2, #5
 800f04a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f04e:	4853      	ldr	r0, [pc, #332]	@ (800f19c <_vfiprintf_r+0x21c>)
 800f050:	f7fd fcb9 	bl	800c9c6 <memchr>
 800f054:	9a04      	ldr	r2, [sp, #16]
 800f056:	b9d8      	cbnz	r0, 800f090 <_vfiprintf_r+0x110>
 800f058:	06d1      	lsls	r1, r2, #27
 800f05a:	bf44      	itt	mi
 800f05c:	2320      	movmi	r3, #32
 800f05e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800f062:	0713      	lsls	r3, r2, #28
 800f064:	bf44      	itt	mi
 800f066:	232b      	movmi	r3, #43	@ 0x2b
 800f068:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800f06c:	f89a 3000 	ldrb.w	r3, [sl]
 800f070:	2b2a      	cmp	r3, #42	@ 0x2a
 800f072:	d015      	beq.n	800f0a0 <_vfiprintf_r+0x120>
 800f074:	4654      	mov	r4, sl
 800f076:	2000      	movs	r0, #0
 800f078:	f04f 0c0a 	mov.w	ip, #10
 800f07c:	9a07      	ldr	r2, [sp, #28]
 800f07e:	4621      	mov	r1, r4
 800f080:	f811 3b01 	ldrb.w	r3, [r1], #1
 800f084:	3b30      	subs	r3, #48	@ 0x30
 800f086:	2b09      	cmp	r3, #9
 800f088:	d94b      	bls.n	800f122 <_vfiprintf_r+0x1a2>
 800f08a:	b1b0      	cbz	r0, 800f0ba <_vfiprintf_r+0x13a>
 800f08c:	9207      	str	r2, [sp, #28]
 800f08e:	e014      	b.n	800f0ba <_vfiprintf_r+0x13a>
 800f090:	eba0 0308 	sub.w	r3, r0, r8
 800f094:	fa09 f303 	lsl.w	r3, r9, r3
 800f098:	4313      	orrs	r3, r2
 800f09a:	46a2      	mov	sl, r4
 800f09c:	9304      	str	r3, [sp, #16]
 800f09e:	e7d2      	b.n	800f046 <_vfiprintf_r+0xc6>
 800f0a0:	9b03      	ldr	r3, [sp, #12]
 800f0a2:	1d19      	adds	r1, r3, #4
 800f0a4:	681b      	ldr	r3, [r3, #0]
 800f0a6:	9103      	str	r1, [sp, #12]
 800f0a8:	2b00      	cmp	r3, #0
 800f0aa:	bfbb      	ittet	lt
 800f0ac:	425b      	neglt	r3, r3
 800f0ae:	f042 0202 	orrlt.w	r2, r2, #2
 800f0b2:	9307      	strge	r3, [sp, #28]
 800f0b4:	9307      	strlt	r3, [sp, #28]
 800f0b6:	bfb8      	it	lt
 800f0b8:	9204      	strlt	r2, [sp, #16]
 800f0ba:	7823      	ldrb	r3, [r4, #0]
 800f0bc:	2b2e      	cmp	r3, #46	@ 0x2e
 800f0be:	d10a      	bne.n	800f0d6 <_vfiprintf_r+0x156>
 800f0c0:	7863      	ldrb	r3, [r4, #1]
 800f0c2:	2b2a      	cmp	r3, #42	@ 0x2a
 800f0c4:	d132      	bne.n	800f12c <_vfiprintf_r+0x1ac>
 800f0c6:	9b03      	ldr	r3, [sp, #12]
 800f0c8:	3402      	adds	r4, #2
 800f0ca:	1d1a      	adds	r2, r3, #4
 800f0cc:	681b      	ldr	r3, [r3, #0]
 800f0ce:	9203      	str	r2, [sp, #12]
 800f0d0:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800f0d4:	9305      	str	r3, [sp, #20]
 800f0d6:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 800f1a0 <_vfiprintf_r+0x220>
 800f0da:	2203      	movs	r2, #3
 800f0dc:	4650      	mov	r0, sl
 800f0de:	7821      	ldrb	r1, [r4, #0]
 800f0e0:	f7fd fc71 	bl	800c9c6 <memchr>
 800f0e4:	b138      	cbz	r0, 800f0f6 <_vfiprintf_r+0x176>
 800f0e6:	2240      	movs	r2, #64	@ 0x40
 800f0e8:	9b04      	ldr	r3, [sp, #16]
 800f0ea:	eba0 000a 	sub.w	r0, r0, sl
 800f0ee:	4082      	lsls	r2, r0
 800f0f0:	4313      	orrs	r3, r2
 800f0f2:	3401      	adds	r4, #1
 800f0f4:	9304      	str	r3, [sp, #16]
 800f0f6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f0fa:	2206      	movs	r2, #6
 800f0fc:	4829      	ldr	r0, [pc, #164]	@ (800f1a4 <_vfiprintf_r+0x224>)
 800f0fe:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800f102:	f7fd fc60 	bl	800c9c6 <memchr>
 800f106:	2800      	cmp	r0, #0
 800f108:	d03f      	beq.n	800f18a <_vfiprintf_r+0x20a>
 800f10a:	4b27      	ldr	r3, [pc, #156]	@ (800f1a8 <_vfiprintf_r+0x228>)
 800f10c:	bb1b      	cbnz	r3, 800f156 <_vfiprintf_r+0x1d6>
 800f10e:	9b03      	ldr	r3, [sp, #12]
 800f110:	3307      	adds	r3, #7
 800f112:	f023 0307 	bic.w	r3, r3, #7
 800f116:	3308      	adds	r3, #8
 800f118:	9303      	str	r3, [sp, #12]
 800f11a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f11c:	443b      	add	r3, r7
 800f11e:	9309      	str	r3, [sp, #36]	@ 0x24
 800f120:	e76a      	b.n	800eff8 <_vfiprintf_r+0x78>
 800f122:	460c      	mov	r4, r1
 800f124:	2001      	movs	r0, #1
 800f126:	fb0c 3202 	mla	r2, ip, r2, r3
 800f12a:	e7a8      	b.n	800f07e <_vfiprintf_r+0xfe>
 800f12c:	2300      	movs	r3, #0
 800f12e:	f04f 0c0a 	mov.w	ip, #10
 800f132:	4619      	mov	r1, r3
 800f134:	3401      	adds	r4, #1
 800f136:	9305      	str	r3, [sp, #20]
 800f138:	4620      	mov	r0, r4
 800f13a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f13e:	3a30      	subs	r2, #48	@ 0x30
 800f140:	2a09      	cmp	r2, #9
 800f142:	d903      	bls.n	800f14c <_vfiprintf_r+0x1cc>
 800f144:	2b00      	cmp	r3, #0
 800f146:	d0c6      	beq.n	800f0d6 <_vfiprintf_r+0x156>
 800f148:	9105      	str	r1, [sp, #20]
 800f14a:	e7c4      	b.n	800f0d6 <_vfiprintf_r+0x156>
 800f14c:	4604      	mov	r4, r0
 800f14e:	2301      	movs	r3, #1
 800f150:	fb0c 2101 	mla	r1, ip, r1, r2
 800f154:	e7f0      	b.n	800f138 <_vfiprintf_r+0x1b8>
 800f156:	ab03      	add	r3, sp, #12
 800f158:	9300      	str	r3, [sp, #0]
 800f15a:	462a      	mov	r2, r5
 800f15c:	4630      	mov	r0, r6
 800f15e:	4b13      	ldr	r3, [pc, #76]	@ (800f1ac <_vfiprintf_r+0x22c>)
 800f160:	a904      	add	r1, sp, #16
 800f162:	f7fc febb 	bl	800bedc <_printf_float>
 800f166:	4607      	mov	r7, r0
 800f168:	1c78      	adds	r0, r7, #1
 800f16a:	d1d6      	bne.n	800f11a <_vfiprintf_r+0x19a>
 800f16c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800f16e:	07d9      	lsls	r1, r3, #31
 800f170:	d405      	bmi.n	800f17e <_vfiprintf_r+0x1fe>
 800f172:	89ab      	ldrh	r3, [r5, #12]
 800f174:	059a      	lsls	r2, r3, #22
 800f176:	d402      	bmi.n	800f17e <_vfiprintf_r+0x1fe>
 800f178:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800f17a:	f7fd fc23 	bl	800c9c4 <__retarget_lock_release_recursive>
 800f17e:	89ab      	ldrh	r3, [r5, #12]
 800f180:	065b      	lsls	r3, r3, #25
 800f182:	f53f af1f 	bmi.w	800efc4 <_vfiprintf_r+0x44>
 800f186:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800f188:	e71e      	b.n	800efc8 <_vfiprintf_r+0x48>
 800f18a:	ab03      	add	r3, sp, #12
 800f18c:	9300      	str	r3, [sp, #0]
 800f18e:	462a      	mov	r2, r5
 800f190:	4630      	mov	r0, r6
 800f192:	4b06      	ldr	r3, [pc, #24]	@ (800f1ac <_vfiprintf_r+0x22c>)
 800f194:	a904      	add	r1, sp, #16
 800f196:	f7fd f93f 	bl	800c418 <_printf_i>
 800f19a:	e7e4      	b.n	800f166 <_vfiprintf_r+0x1e6>
 800f19c:	0800f9e9 	.word	0x0800f9e9
 800f1a0:	0800f9ef 	.word	0x0800f9ef
 800f1a4:	0800f9f3 	.word	0x0800f9f3
 800f1a8:	0800bedd 	.word	0x0800bedd
 800f1ac:	0800ef5d 	.word	0x0800ef5d

0800f1b0 <__swbuf_r>:
 800f1b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f1b2:	460e      	mov	r6, r1
 800f1b4:	4614      	mov	r4, r2
 800f1b6:	4605      	mov	r5, r0
 800f1b8:	b118      	cbz	r0, 800f1c2 <__swbuf_r+0x12>
 800f1ba:	6a03      	ldr	r3, [r0, #32]
 800f1bc:	b90b      	cbnz	r3, 800f1c2 <__swbuf_r+0x12>
 800f1be:	f7fd fad7 	bl	800c770 <__sinit>
 800f1c2:	69a3      	ldr	r3, [r4, #24]
 800f1c4:	60a3      	str	r3, [r4, #8]
 800f1c6:	89a3      	ldrh	r3, [r4, #12]
 800f1c8:	071a      	lsls	r2, r3, #28
 800f1ca:	d501      	bpl.n	800f1d0 <__swbuf_r+0x20>
 800f1cc:	6923      	ldr	r3, [r4, #16]
 800f1ce:	b943      	cbnz	r3, 800f1e2 <__swbuf_r+0x32>
 800f1d0:	4621      	mov	r1, r4
 800f1d2:	4628      	mov	r0, r5
 800f1d4:	f000 f82a 	bl	800f22c <__swsetup_r>
 800f1d8:	b118      	cbz	r0, 800f1e2 <__swbuf_r+0x32>
 800f1da:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 800f1de:	4638      	mov	r0, r7
 800f1e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f1e2:	6823      	ldr	r3, [r4, #0]
 800f1e4:	6922      	ldr	r2, [r4, #16]
 800f1e6:	b2f6      	uxtb	r6, r6
 800f1e8:	1a98      	subs	r0, r3, r2
 800f1ea:	6963      	ldr	r3, [r4, #20]
 800f1ec:	4637      	mov	r7, r6
 800f1ee:	4283      	cmp	r3, r0
 800f1f0:	dc05      	bgt.n	800f1fe <__swbuf_r+0x4e>
 800f1f2:	4621      	mov	r1, r4
 800f1f4:	4628      	mov	r0, r5
 800f1f6:	f7ff fdc9 	bl	800ed8c <_fflush_r>
 800f1fa:	2800      	cmp	r0, #0
 800f1fc:	d1ed      	bne.n	800f1da <__swbuf_r+0x2a>
 800f1fe:	68a3      	ldr	r3, [r4, #8]
 800f200:	3b01      	subs	r3, #1
 800f202:	60a3      	str	r3, [r4, #8]
 800f204:	6823      	ldr	r3, [r4, #0]
 800f206:	1c5a      	adds	r2, r3, #1
 800f208:	6022      	str	r2, [r4, #0]
 800f20a:	701e      	strb	r6, [r3, #0]
 800f20c:	6962      	ldr	r2, [r4, #20]
 800f20e:	1c43      	adds	r3, r0, #1
 800f210:	429a      	cmp	r2, r3
 800f212:	d004      	beq.n	800f21e <__swbuf_r+0x6e>
 800f214:	89a3      	ldrh	r3, [r4, #12]
 800f216:	07db      	lsls	r3, r3, #31
 800f218:	d5e1      	bpl.n	800f1de <__swbuf_r+0x2e>
 800f21a:	2e0a      	cmp	r6, #10
 800f21c:	d1df      	bne.n	800f1de <__swbuf_r+0x2e>
 800f21e:	4621      	mov	r1, r4
 800f220:	4628      	mov	r0, r5
 800f222:	f7ff fdb3 	bl	800ed8c <_fflush_r>
 800f226:	2800      	cmp	r0, #0
 800f228:	d0d9      	beq.n	800f1de <__swbuf_r+0x2e>
 800f22a:	e7d6      	b.n	800f1da <__swbuf_r+0x2a>

0800f22c <__swsetup_r>:
 800f22c:	b538      	push	{r3, r4, r5, lr}
 800f22e:	4b29      	ldr	r3, [pc, #164]	@ (800f2d4 <__swsetup_r+0xa8>)
 800f230:	4605      	mov	r5, r0
 800f232:	6818      	ldr	r0, [r3, #0]
 800f234:	460c      	mov	r4, r1
 800f236:	b118      	cbz	r0, 800f240 <__swsetup_r+0x14>
 800f238:	6a03      	ldr	r3, [r0, #32]
 800f23a:	b90b      	cbnz	r3, 800f240 <__swsetup_r+0x14>
 800f23c:	f7fd fa98 	bl	800c770 <__sinit>
 800f240:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f244:	0719      	lsls	r1, r3, #28
 800f246:	d422      	bmi.n	800f28e <__swsetup_r+0x62>
 800f248:	06da      	lsls	r2, r3, #27
 800f24a:	d407      	bmi.n	800f25c <__swsetup_r+0x30>
 800f24c:	2209      	movs	r2, #9
 800f24e:	602a      	str	r2, [r5, #0]
 800f250:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800f254:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800f258:	81a3      	strh	r3, [r4, #12]
 800f25a:	e033      	b.n	800f2c4 <__swsetup_r+0x98>
 800f25c:	0758      	lsls	r0, r3, #29
 800f25e:	d512      	bpl.n	800f286 <__swsetup_r+0x5a>
 800f260:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800f262:	b141      	cbz	r1, 800f276 <__swsetup_r+0x4a>
 800f264:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800f268:	4299      	cmp	r1, r3
 800f26a:	d002      	beq.n	800f272 <__swsetup_r+0x46>
 800f26c:	4628      	mov	r0, r5
 800f26e:	f7fe fa1f 	bl	800d6b0 <_free_r>
 800f272:	2300      	movs	r3, #0
 800f274:	6363      	str	r3, [r4, #52]	@ 0x34
 800f276:	89a3      	ldrh	r3, [r4, #12]
 800f278:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800f27c:	81a3      	strh	r3, [r4, #12]
 800f27e:	2300      	movs	r3, #0
 800f280:	6063      	str	r3, [r4, #4]
 800f282:	6923      	ldr	r3, [r4, #16]
 800f284:	6023      	str	r3, [r4, #0]
 800f286:	89a3      	ldrh	r3, [r4, #12]
 800f288:	f043 0308 	orr.w	r3, r3, #8
 800f28c:	81a3      	strh	r3, [r4, #12]
 800f28e:	6923      	ldr	r3, [r4, #16]
 800f290:	b94b      	cbnz	r3, 800f2a6 <__swsetup_r+0x7a>
 800f292:	89a3      	ldrh	r3, [r4, #12]
 800f294:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800f298:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800f29c:	d003      	beq.n	800f2a6 <__swsetup_r+0x7a>
 800f29e:	4621      	mov	r1, r4
 800f2a0:	4628      	mov	r0, r5
 800f2a2:	f000 f882 	bl	800f3aa <__smakebuf_r>
 800f2a6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f2aa:	f013 0201 	ands.w	r2, r3, #1
 800f2ae:	d00a      	beq.n	800f2c6 <__swsetup_r+0x9a>
 800f2b0:	2200      	movs	r2, #0
 800f2b2:	60a2      	str	r2, [r4, #8]
 800f2b4:	6962      	ldr	r2, [r4, #20]
 800f2b6:	4252      	negs	r2, r2
 800f2b8:	61a2      	str	r2, [r4, #24]
 800f2ba:	6922      	ldr	r2, [r4, #16]
 800f2bc:	b942      	cbnz	r2, 800f2d0 <__swsetup_r+0xa4>
 800f2be:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800f2c2:	d1c5      	bne.n	800f250 <__swsetup_r+0x24>
 800f2c4:	bd38      	pop	{r3, r4, r5, pc}
 800f2c6:	0799      	lsls	r1, r3, #30
 800f2c8:	bf58      	it	pl
 800f2ca:	6962      	ldrpl	r2, [r4, #20]
 800f2cc:	60a2      	str	r2, [r4, #8]
 800f2ce:	e7f4      	b.n	800f2ba <__swsetup_r+0x8e>
 800f2d0:	2000      	movs	r0, #0
 800f2d2:	e7f7      	b.n	800f2c4 <__swsetup_r+0x98>
 800f2d4:	20000308 	.word	0x20000308

0800f2d8 <_raise_r>:
 800f2d8:	291f      	cmp	r1, #31
 800f2da:	b538      	push	{r3, r4, r5, lr}
 800f2dc:	4605      	mov	r5, r0
 800f2de:	460c      	mov	r4, r1
 800f2e0:	d904      	bls.n	800f2ec <_raise_r+0x14>
 800f2e2:	2316      	movs	r3, #22
 800f2e4:	6003      	str	r3, [r0, #0]
 800f2e6:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800f2ea:	bd38      	pop	{r3, r4, r5, pc}
 800f2ec:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800f2ee:	b112      	cbz	r2, 800f2f6 <_raise_r+0x1e>
 800f2f0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800f2f4:	b94b      	cbnz	r3, 800f30a <_raise_r+0x32>
 800f2f6:	4628      	mov	r0, r5
 800f2f8:	f000 f830 	bl	800f35c <_getpid_r>
 800f2fc:	4622      	mov	r2, r4
 800f2fe:	4601      	mov	r1, r0
 800f300:	4628      	mov	r0, r5
 800f302:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f306:	f000 b817 	b.w	800f338 <_kill_r>
 800f30a:	2b01      	cmp	r3, #1
 800f30c:	d00a      	beq.n	800f324 <_raise_r+0x4c>
 800f30e:	1c59      	adds	r1, r3, #1
 800f310:	d103      	bne.n	800f31a <_raise_r+0x42>
 800f312:	2316      	movs	r3, #22
 800f314:	6003      	str	r3, [r0, #0]
 800f316:	2001      	movs	r0, #1
 800f318:	e7e7      	b.n	800f2ea <_raise_r+0x12>
 800f31a:	2100      	movs	r1, #0
 800f31c:	4620      	mov	r0, r4
 800f31e:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800f322:	4798      	blx	r3
 800f324:	2000      	movs	r0, #0
 800f326:	e7e0      	b.n	800f2ea <_raise_r+0x12>

0800f328 <raise>:
 800f328:	4b02      	ldr	r3, [pc, #8]	@ (800f334 <raise+0xc>)
 800f32a:	4601      	mov	r1, r0
 800f32c:	6818      	ldr	r0, [r3, #0]
 800f32e:	f7ff bfd3 	b.w	800f2d8 <_raise_r>
 800f332:	bf00      	nop
 800f334:	20000308 	.word	0x20000308

0800f338 <_kill_r>:
 800f338:	b538      	push	{r3, r4, r5, lr}
 800f33a:	2300      	movs	r3, #0
 800f33c:	4d06      	ldr	r5, [pc, #24]	@ (800f358 <_kill_r+0x20>)
 800f33e:	4604      	mov	r4, r0
 800f340:	4608      	mov	r0, r1
 800f342:	4611      	mov	r1, r2
 800f344:	602b      	str	r3, [r5, #0]
 800f346:	f7f2 fe1a 	bl	8001f7e <_kill>
 800f34a:	1c43      	adds	r3, r0, #1
 800f34c:	d102      	bne.n	800f354 <_kill_r+0x1c>
 800f34e:	682b      	ldr	r3, [r5, #0]
 800f350:	b103      	cbz	r3, 800f354 <_kill_r+0x1c>
 800f352:	6023      	str	r3, [r4, #0]
 800f354:	bd38      	pop	{r3, r4, r5, pc}
 800f356:	bf00      	nop
 800f358:	200016f8 	.word	0x200016f8

0800f35c <_getpid_r>:
 800f35c:	f7f2 be08 	b.w	8001f70 <_getpid>

0800f360 <__swhatbuf_r>:
 800f360:	b570      	push	{r4, r5, r6, lr}
 800f362:	460c      	mov	r4, r1
 800f364:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f368:	4615      	mov	r5, r2
 800f36a:	2900      	cmp	r1, #0
 800f36c:	461e      	mov	r6, r3
 800f36e:	b096      	sub	sp, #88	@ 0x58
 800f370:	da0c      	bge.n	800f38c <__swhatbuf_r+0x2c>
 800f372:	89a3      	ldrh	r3, [r4, #12]
 800f374:	2100      	movs	r1, #0
 800f376:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800f37a:	bf14      	ite	ne
 800f37c:	2340      	movne	r3, #64	@ 0x40
 800f37e:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800f382:	2000      	movs	r0, #0
 800f384:	6031      	str	r1, [r6, #0]
 800f386:	602b      	str	r3, [r5, #0]
 800f388:	b016      	add	sp, #88	@ 0x58
 800f38a:	bd70      	pop	{r4, r5, r6, pc}
 800f38c:	466a      	mov	r2, sp
 800f38e:	f000 f849 	bl	800f424 <_fstat_r>
 800f392:	2800      	cmp	r0, #0
 800f394:	dbed      	blt.n	800f372 <__swhatbuf_r+0x12>
 800f396:	9901      	ldr	r1, [sp, #4]
 800f398:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800f39c:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800f3a0:	4259      	negs	r1, r3
 800f3a2:	4159      	adcs	r1, r3
 800f3a4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800f3a8:	e7eb      	b.n	800f382 <__swhatbuf_r+0x22>

0800f3aa <__smakebuf_r>:
 800f3aa:	898b      	ldrh	r3, [r1, #12]
 800f3ac:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800f3ae:	079d      	lsls	r5, r3, #30
 800f3b0:	4606      	mov	r6, r0
 800f3b2:	460c      	mov	r4, r1
 800f3b4:	d507      	bpl.n	800f3c6 <__smakebuf_r+0x1c>
 800f3b6:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800f3ba:	6023      	str	r3, [r4, #0]
 800f3bc:	6123      	str	r3, [r4, #16]
 800f3be:	2301      	movs	r3, #1
 800f3c0:	6163      	str	r3, [r4, #20]
 800f3c2:	b003      	add	sp, #12
 800f3c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f3c6:	466a      	mov	r2, sp
 800f3c8:	ab01      	add	r3, sp, #4
 800f3ca:	f7ff ffc9 	bl	800f360 <__swhatbuf_r>
 800f3ce:	9f00      	ldr	r7, [sp, #0]
 800f3d0:	4605      	mov	r5, r0
 800f3d2:	4639      	mov	r1, r7
 800f3d4:	4630      	mov	r0, r6
 800f3d6:	f7fe fd17 	bl	800de08 <_malloc_r>
 800f3da:	b948      	cbnz	r0, 800f3f0 <__smakebuf_r+0x46>
 800f3dc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f3e0:	059a      	lsls	r2, r3, #22
 800f3e2:	d4ee      	bmi.n	800f3c2 <__smakebuf_r+0x18>
 800f3e4:	f023 0303 	bic.w	r3, r3, #3
 800f3e8:	f043 0302 	orr.w	r3, r3, #2
 800f3ec:	81a3      	strh	r3, [r4, #12]
 800f3ee:	e7e2      	b.n	800f3b6 <__smakebuf_r+0xc>
 800f3f0:	89a3      	ldrh	r3, [r4, #12]
 800f3f2:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800f3f6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800f3fa:	81a3      	strh	r3, [r4, #12]
 800f3fc:	9b01      	ldr	r3, [sp, #4]
 800f3fe:	6020      	str	r0, [r4, #0]
 800f400:	b15b      	cbz	r3, 800f41a <__smakebuf_r+0x70>
 800f402:	4630      	mov	r0, r6
 800f404:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f408:	f000 f81e 	bl	800f448 <_isatty_r>
 800f40c:	b128      	cbz	r0, 800f41a <__smakebuf_r+0x70>
 800f40e:	89a3      	ldrh	r3, [r4, #12]
 800f410:	f023 0303 	bic.w	r3, r3, #3
 800f414:	f043 0301 	orr.w	r3, r3, #1
 800f418:	81a3      	strh	r3, [r4, #12]
 800f41a:	89a3      	ldrh	r3, [r4, #12]
 800f41c:	431d      	orrs	r5, r3
 800f41e:	81a5      	strh	r5, [r4, #12]
 800f420:	e7cf      	b.n	800f3c2 <__smakebuf_r+0x18>
	...

0800f424 <_fstat_r>:
 800f424:	b538      	push	{r3, r4, r5, lr}
 800f426:	2300      	movs	r3, #0
 800f428:	4d06      	ldr	r5, [pc, #24]	@ (800f444 <_fstat_r+0x20>)
 800f42a:	4604      	mov	r4, r0
 800f42c:	4608      	mov	r0, r1
 800f42e:	4611      	mov	r1, r2
 800f430:	602b      	str	r3, [r5, #0]
 800f432:	f7f2 fe03 	bl	800203c <_fstat>
 800f436:	1c43      	adds	r3, r0, #1
 800f438:	d102      	bne.n	800f440 <_fstat_r+0x1c>
 800f43a:	682b      	ldr	r3, [r5, #0]
 800f43c:	b103      	cbz	r3, 800f440 <_fstat_r+0x1c>
 800f43e:	6023      	str	r3, [r4, #0]
 800f440:	bd38      	pop	{r3, r4, r5, pc}
 800f442:	bf00      	nop
 800f444:	200016f8 	.word	0x200016f8

0800f448 <_isatty_r>:
 800f448:	b538      	push	{r3, r4, r5, lr}
 800f44a:	2300      	movs	r3, #0
 800f44c:	4d05      	ldr	r5, [pc, #20]	@ (800f464 <_isatty_r+0x1c>)
 800f44e:	4604      	mov	r4, r0
 800f450:	4608      	mov	r0, r1
 800f452:	602b      	str	r3, [r5, #0]
 800f454:	f7f2 fe01 	bl	800205a <_isatty>
 800f458:	1c43      	adds	r3, r0, #1
 800f45a:	d102      	bne.n	800f462 <_isatty_r+0x1a>
 800f45c:	682b      	ldr	r3, [r5, #0]
 800f45e:	b103      	cbz	r3, 800f462 <_isatty_r+0x1a>
 800f460:	6023      	str	r3, [r4, #0]
 800f462:	bd38      	pop	{r3, r4, r5, pc}
 800f464:	200016f8 	.word	0x200016f8

0800f468 <_init>:
 800f468:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f46a:	bf00      	nop
 800f46c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f46e:	bc08      	pop	{r3}
 800f470:	469e      	mov	lr, r3
 800f472:	4770      	bx	lr

0800f474 <_fini>:
 800f474:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f476:	bf00      	nop
 800f478:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f47a:	bc08      	pop	{r3}
 800f47c:	469e      	mov	lr, r3
 800f47e:	4770      	bx	lr
