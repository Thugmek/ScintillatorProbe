
ScintilatorProbeSoftware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b200  08000110  08000110  00001110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000628  0800b310  0800b310  0000c310  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b938  0800b938  0000d358  2**0
                  CONTENTS
  4 .ARM          00000008  0800b938  0800b938  0000c938  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b940  0800b940  0000d358  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b940  0800b940  0000c940  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800b944  0800b944  0000c944  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000358  20000000  0800b948  0000d000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000fb8  20000358  0800bca0  0000d358  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001310  0800bca0  0000e310  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000d358  2**0
                  CONTENTS, READONLY
 12 .debug_info   00018043  00000000  00000000  0000d381  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003c43  00000000  00000000  000253c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loclists 0000a80a  00000000  00000000  00029007  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001200  00000000  00000000  00033818  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000f41  00000000  00000000  00034a18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001bbba  00000000  00000000  00035959  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001a992  00000000  00000000  00051513  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000946fd  00000000  00000000  0006bea5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  001005a2  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004764  00000000  00000000  001005e8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000071  00000000  00000000  00104d4c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000358 	.word	0x20000358
 800012c:	00000000 	.word	0x00000000
 8000130:	0800b2f8 	.word	0x0800b2f8

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	2000035c 	.word	0x2000035c
 800014c:	0800b2f8 	.word	0x0800b2f8

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_fmul>:
 8000160:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000164:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000168:	bf1e      	ittt	ne
 800016a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 800016e:	ea92 0f0c 	teqne	r2, ip
 8000172:	ea93 0f0c 	teqne	r3, ip
 8000176:	d06f      	beq.n	8000258 <__aeabi_fmul+0xf8>
 8000178:	441a      	add	r2, r3
 800017a:	ea80 0c01 	eor.w	ip, r0, r1
 800017e:	0240      	lsls	r0, r0, #9
 8000180:	bf18      	it	ne
 8000182:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000186:	d01e      	beq.n	80001c6 <__aeabi_fmul+0x66>
 8000188:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800018c:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000190:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000194:	fba0 3101 	umull	r3, r1, r0, r1
 8000198:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 800019c:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 80001a0:	bf3e      	ittt	cc
 80001a2:	0049      	lslcc	r1, r1, #1
 80001a4:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80001a8:	005b      	lslcc	r3, r3, #1
 80001aa:	ea40 0001 	orr.w	r0, r0, r1
 80001ae:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 80001b2:	2afd      	cmp	r2, #253	@ 0xfd
 80001b4:	d81d      	bhi.n	80001f2 <__aeabi_fmul+0x92>
 80001b6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80001ba:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80001be:	bf08      	it	eq
 80001c0:	f020 0001 	biceq.w	r0, r0, #1
 80001c4:	4770      	bx	lr
 80001c6:	f090 0f00 	teq	r0, #0
 80001ca:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 80001ce:	bf08      	it	eq
 80001d0:	0249      	lsleq	r1, r1, #9
 80001d2:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80001d6:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80001da:	3a7f      	subs	r2, #127	@ 0x7f
 80001dc:	bfc2      	ittt	gt
 80001de:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 80001e2:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80001e6:	4770      	bxgt	lr
 80001e8:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80001ec:	f04f 0300 	mov.w	r3, #0
 80001f0:	3a01      	subs	r2, #1
 80001f2:	dc5d      	bgt.n	80002b0 <__aeabi_fmul+0x150>
 80001f4:	f112 0f19 	cmn.w	r2, #25
 80001f8:	bfdc      	itt	le
 80001fa:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 80001fe:	4770      	bxle	lr
 8000200:	f1c2 0200 	rsb	r2, r2, #0
 8000204:	0041      	lsls	r1, r0, #1
 8000206:	fa21 f102 	lsr.w	r1, r1, r2
 800020a:	f1c2 0220 	rsb	r2, r2, #32
 800020e:	fa00 fc02 	lsl.w	ip, r0, r2
 8000212:	ea5f 0031 	movs.w	r0, r1, rrx
 8000216:	f140 0000 	adc.w	r0, r0, #0
 800021a:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 800021e:	bf08      	it	eq
 8000220:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000224:	4770      	bx	lr
 8000226:	f092 0f00 	teq	r2, #0
 800022a:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 800022e:	bf02      	ittt	eq
 8000230:	0040      	lsleq	r0, r0, #1
 8000232:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000236:	3a01      	subeq	r2, #1
 8000238:	d0f9      	beq.n	800022e <__aeabi_fmul+0xce>
 800023a:	ea40 000c 	orr.w	r0, r0, ip
 800023e:	f093 0f00 	teq	r3, #0
 8000242:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000246:	bf02      	ittt	eq
 8000248:	0049      	lsleq	r1, r1, #1
 800024a:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 800024e:	3b01      	subeq	r3, #1
 8000250:	d0f9      	beq.n	8000246 <__aeabi_fmul+0xe6>
 8000252:	ea41 010c 	orr.w	r1, r1, ip
 8000256:	e78f      	b.n	8000178 <__aeabi_fmul+0x18>
 8000258:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 800025c:	ea92 0f0c 	teq	r2, ip
 8000260:	bf18      	it	ne
 8000262:	ea93 0f0c 	teqne	r3, ip
 8000266:	d00a      	beq.n	800027e <__aeabi_fmul+0x11e>
 8000268:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 800026c:	bf18      	it	ne
 800026e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000272:	d1d8      	bne.n	8000226 <__aeabi_fmul+0xc6>
 8000274:	ea80 0001 	eor.w	r0, r0, r1
 8000278:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 800027c:	4770      	bx	lr
 800027e:	f090 0f00 	teq	r0, #0
 8000282:	bf17      	itett	ne
 8000284:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000288:	4608      	moveq	r0, r1
 800028a:	f091 0f00 	teqne	r1, #0
 800028e:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 8000292:	d014      	beq.n	80002be <__aeabi_fmul+0x15e>
 8000294:	ea92 0f0c 	teq	r2, ip
 8000298:	d101      	bne.n	800029e <__aeabi_fmul+0x13e>
 800029a:	0242      	lsls	r2, r0, #9
 800029c:	d10f      	bne.n	80002be <__aeabi_fmul+0x15e>
 800029e:	ea93 0f0c 	teq	r3, ip
 80002a2:	d103      	bne.n	80002ac <__aeabi_fmul+0x14c>
 80002a4:	024b      	lsls	r3, r1, #9
 80002a6:	bf18      	it	ne
 80002a8:	4608      	movne	r0, r1
 80002aa:	d108      	bne.n	80002be <__aeabi_fmul+0x15e>
 80002ac:	ea80 0001 	eor.w	r0, r0, r1
 80002b0:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 80002b4:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 80002b8:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80002bc:	4770      	bx	lr
 80002be:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 80002c2:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 80002c6:	4770      	bx	lr

080002c8 <__aeabi_drsub>:
 80002c8:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002cc:	e002      	b.n	80002d4 <__adddf3>
 80002ce:	bf00      	nop

080002d0 <__aeabi_dsub>:
 80002d0:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002d4 <__adddf3>:
 80002d4:	b530      	push	{r4, r5, lr}
 80002d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002de:	ea94 0f05 	teq	r4, r5
 80002e2:	bf08      	it	eq
 80002e4:	ea90 0f02 	teqeq	r0, r2
 80002e8:	bf1f      	itttt	ne
 80002ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002fa:	f000 80e2 	beq.w	80004c2 <__adddf3+0x1ee>
 80002fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000302:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000306:	bfb8      	it	lt
 8000308:	426d      	neglt	r5, r5
 800030a:	dd0c      	ble.n	8000326 <__adddf3+0x52>
 800030c:	442c      	add	r4, r5
 800030e:	ea80 0202 	eor.w	r2, r0, r2
 8000312:	ea81 0303 	eor.w	r3, r1, r3
 8000316:	ea82 0000 	eor.w	r0, r2, r0
 800031a:	ea83 0101 	eor.w	r1, r3, r1
 800031e:	ea80 0202 	eor.w	r2, r0, r2
 8000322:	ea81 0303 	eor.w	r3, r1, r3
 8000326:	2d36      	cmp	r5, #54	@ 0x36
 8000328:	bf88      	it	hi
 800032a:	bd30      	pophi	{r4, r5, pc}
 800032c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000330:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000334:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000338:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800033c:	d002      	beq.n	8000344 <__adddf3+0x70>
 800033e:	4240      	negs	r0, r0
 8000340:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000344:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000348:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800034c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000350:	d002      	beq.n	8000358 <__adddf3+0x84>
 8000352:	4252      	negs	r2, r2
 8000354:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000358:	ea94 0f05 	teq	r4, r5
 800035c:	f000 80a7 	beq.w	80004ae <__adddf3+0x1da>
 8000360:	f1a4 0401 	sub.w	r4, r4, #1
 8000364:	f1d5 0e20 	rsbs	lr, r5, #32
 8000368:	db0d      	blt.n	8000386 <__adddf3+0xb2>
 800036a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800036e:	fa22 f205 	lsr.w	r2, r2, r5
 8000372:	1880      	adds	r0, r0, r2
 8000374:	f141 0100 	adc.w	r1, r1, #0
 8000378:	fa03 f20e 	lsl.w	r2, r3, lr
 800037c:	1880      	adds	r0, r0, r2
 800037e:	fa43 f305 	asr.w	r3, r3, r5
 8000382:	4159      	adcs	r1, r3
 8000384:	e00e      	b.n	80003a4 <__adddf3+0xd0>
 8000386:	f1a5 0520 	sub.w	r5, r5, #32
 800038a:	f10e 0e20 	add.w	lr, lr, #32
 800038e:	2a01      	cmp	r2, #1
 8000390:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000394:	bf28      	it	cs
 8000396:	f04c 0c02 	orrcs.w	ip, ip, #2
 800039a:	fa43 f305 	asr.w	r3, r3, r5
 800039e:	18c0      	adds	r0, r0, r3
 80003a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003a4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003a8:	d507      	bpl.n	80003ba <__adddf3+0xe6>
 80003aa:	f04f 0e00 	mov.w	lr, #0
 80003ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80003b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80003ba:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003be:	d31b      	bcc.n	80003f8 <__adddf3+0x124>
 80003c0:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003c4:	d30c      	bcc.n	80003e0 <__adddf3+0x10c>
 80003c6:	0849      	lsrs	r1, r1, #1
 80003c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80003cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d0:	f104 0401 	add.w	r4, r4, #1
 80003d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d8:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003dc:	f080 809a 	bcs.w	8000514 <__adddf3+0x240>
 80003e0:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003e4:	bf08      	it	eq
 80003e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003ea:	f150 0000 	adcs.w	r0, r0, #0
 80003ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003f2:	ea41 0105 	orr.w	r1, r1, r5
 80003f6:	bd30      	pop	{r4, r5, pc}
 80003f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003fc:	4140      	adcs	r0, r0
 80003fe:	eb41 0101 	adc.w	r1, r1, r1
 8000402:	3c01      	subs	r4, #1
 8000404:	bf28      	it	cs
 8000406:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800040a:	d2e9      	bcs.n	80003e0 <__adddf3+0x10c>
 800040c:	f091 0f00 	teq	r1, #0
 8000410:	bf04      	itt	eq
 8000412:	4601      	moveq	r1, r0
 8000414:	2000      	moveq	r0, #0
 8000416:	fab1 f381 	clz	r3, r1
 800041a:	bf08      	it	eq
 800041c:	3320      	addeq	r3, #32
 800041e:	f1a3 030b 	sub.w	r3, r3, #11
 8000422:	f1b3 0220 	subs.w	r2, r3, #32
 8000426:	da0c      	bge.n	8000442 <__adddf3+0x16e>
 8000428:	320c      	adds	r2, #12
 800042a:	dd08      	ble.n	800043e <__adddf3+0x16a>
 800042c:	f102 0c14 	add.w	ip, r2, #20
 8000430:	f1c2 020c 	rsb	r2, r2, #12
 8000434:	fa01 f00c 	lsl.w	r0, r1, ip
 8000438:	fa21 f102 	lsr.w	r1, r1, r2
 800043c:	e00c      	b.n	8000458 <__adddf3+0x184>
 800043e:	f102 0214 	add.w	r2, r2, #20
 8000442:	bfd8      	it	le
 8000444:	f1c2 0c20 	rsble	ip, r2, #32
 8000448:	fa01 f102 	lsl.w	r1, r1, r2
 800044c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000450:	bfdc      	itt	le
 8000452:	ea41 010c 	orrle.w	r1, r1, ip
 8000456:	4090      	lslle	r0, r2
 8000458:	1ae4      	subs	r4, r4, r3
 800045a:	bfa2      	ittt	ge
 800045c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000460:	4329      	orrge	r1, r5
 8000462:	bd30      	popge	{r4, r5, pc}
 8000464:	ea6f 0404 	mvn.w	r4, r4
 8000468:	3c1f      	subs	r4, #31
 800046a:	da1c      	bge.n	80004a6 <__adddf3+0x1d2>
 800046c:	340c      	adds	r4, #12
 800046e:	dc0e      	bgt.n	800048e <__adddf3+0x1ba>
 8000470:	f104 0414 	add.w	r4, r4, #20
 8000474:	f1c4 0220 	rsb	r2, r4, #32
 8000478:	fa20 f004 	lsr.w	r0, r0, r4
 800047c:	fa01 f302 	lsl.w	r3, r1, r2
 8000480:	ea40 0003 	orr.w	r0, r0, r3
 8000484:	fa21 f304 	lsr.w	r3, r1, r4
 8000488:	ea45 0103 	orr.w	r1, r5, r3
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	f1c4 040c 	rsb	r4, r4, #12
 8000492:	f1c4 0220 	rsb	r2, r4, #32
 8000496:	fa20 f002 	lsr.w	r0, r0, r2
 800049a:	fa01 f304 	lsl.w	r3, r1, r4
 800049e:	ea40 0003 	orr.w	r0, r0, r3
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	fa21 f004 	lsr.w	r0, r1, r4
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	f094 0f00 	teq	r4, #0
 80004b2:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004b6:	bf06      	itte	eq
 80004b8:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004bc:	3401      	addeq	r4, #1
 80004be:	3d01      	subne	r5, #1
 80004c0:	e74e      	b.n	8000360 <__adddf3+0x8c>
 80004c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004c6:	bf18      	it	ne
 80004c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004cc:	d029      	beq.n	8000522 <__adddf3+0x24e>
 80004ce:	ea94 0f05 	teq	r4, r5
 80004d2:	bf08      	it	eq
 80004d4:	ea90 0f02 	teqeq	r0, r2
 80004d8:	d005      	beq.n	80004e6 <__adddf3+0x212>
 80004da:	ea54 0c00 	orrs.w	ip, r4, r0
 80004de:	bf04      	itt	eq
 80004e0:	4619      	moveq	r1, r3
 80004e2:	4610      	moveq	r0, r2
 80004e4:	bd30      	pop	{r4, r5, pc}
 80004e6:	ea91 0f03 	teq	r1, r3
 80004ea:	bf1e      	ittt	ne
 80004ec:	2100      	movne	r1, #0
 80004ee:	2000      	movne	r0, #0
 80004f0:	bd30      	popne	{r4, r5, pc}
 80004f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004f6:	d105      	bne.n	8000504 <__adddf3+0x230>
 80004f8:	0040      	lsls	r0, r0, #1
 80004fa:	4149      	adcs	r1, r1
 80004fc:	bf28      	it	cs
 80004fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000502:	bd30      	pop	{r4, r5, pc}
 8000504:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000508:	bf3c      	itt	cc
 800050a:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800050e:	bd30      	popcc	{r4, r5, pc}
 8000510:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000514:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000518:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800051c:	f04f 0000 	mov.w	r0, #0
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000526:	bf1a      	itte	ne
 8000528:	4619      	movne	r1, r3
 800052a:	4610      	movne	r0, r2
 800052c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000530:	bf1c      	itt	ne
 8000532:	460b      	movne	r3, r1
 8000534:	4602      	movne	r2, r0
 8000536:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800053a:	bf06      	itte	eq
 800053c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000540:	ea91 0f03 	teqeq	r1, r3
 8000544:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000548:	bd30      	pop	{r4, r5, pc}
 800054a:	bf00      	nop

0800054c <__aeabi_ui2d>:
 800054c:	f090 0f00 	teq	r0, #0
 8000550:	bf04      	itt	eq
 8000552:	2100      	moveq	r1, #0
 8000554:	4770      	bxeq	lr
 8000556:	b530      	push	{r4, r5, lr}
 8000558:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800055c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000560:	f04f 0500 	mov.w	r5, #0
 8000564:	f04f 0100 	mov.w	r1, #0
 8000568:	e750      	b.n	800040c <__adddf3+0x138>
 800056a:	bf00      	nop

0800056c <__aeabi_i2d>:
 800056c:	f090 0f00 	teq	r0, #0
 8000570:	bf04      	itt	eq
 8000572:	2100      	moveq	r1, #0
 8000574:	4770      	bxeq	lr
 8000576:	b530      	push	{r4, r5, lr}
 8000578:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800057c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000580:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000584:	bf48      	it	mi
 8000586:	4240      	negmi	r0, r0
 8000588:	f04f 0100 	mov.w	r1, #0
 800058c:	e73e      	b.n	800040c <__adddf3+0x138>
 800058e:	bf00      	nop

08000590 <__aeabi_f2d>:
 8000590:	0042      	lsls	r2, r0, #1
 8000592:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000596:	ea4f 0131 	mov.w	r1, r1, rrx
 800059a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800059e:	bf1f      	itttt	ne
 80005a0:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80005a4:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005a8:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005ac:	4770      	bxne	lr
 80005ae:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005b2:	bf08      	it	eq
 80005b4:	4770      	bxeq	lr
 80005b6:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005ba:	bf04      	itt	eq
 80005bc:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005c0:	4770      	bxeq	lr
 80005c2:	b530      	push	{r4, r5, lr}
 80005c4:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005cc:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005d0:	e71c      	b.n	800040c <__adddf3+0x138>
 80005d2:	bf00      	nop

080005d4 <__aeabi_ul2d>:
 80005d4:	ea50 0201 	orrs.w	r2, r0, r1
 80005d8:	bf08      	it	eq
 80005da:	4770      	bxeq	lr
 80005dc:	b530      	push	{r4, r5, lr}
 80005de:	f04f 0500 	mov.w	r5, #0
 80005e2:	e00a      	b.n	80005fa <__aeabi_l2d+0x16>

080005e4 <__aeabi_l2d>:
 80005e4:	ea50 0201 	orrs.w	r2, r0, r1
 80005e8:	bf08      	it	eq
 80005ea:	4770      	bxeq	lr
 80005ec:	b530      	push	{r4, r5, lr}
 80005ee:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005f2:	d502      	bpl.n	80005fa <__aeabi_l2d+0x16>
 80005f4:	4240      	negs	r0, r0
 80005f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005fa:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005fe:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000602:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000606:	f43f aed8 	beq.w	80003ba <__adddf3+0xe6>
 800060a:	f04f 0203 	mov.w	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000622:	f1c2 0320 	rsb	r3, r2, #32
 8000626:	fa00 fc03 	lsl.w	ip, r0, r3
 800062a:	fa20 f002 	lsr.w	r0, r0, r2
 800062e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000632:	ea40 000e 	orr.w	r0, r0, lr
 8000636:	fa21 f102 	lsr.w	r1, r1, r2
 800063a:	4414      	add	r4, r2
 800063c:	e6bd      	b.n	80003ba <__adddf3+0xe6>
 800063e:	bf00      	nop

08000640 <__aeabi_dmul>:
 8000640:	b570      	push	{r4, r5, r6, lr}
 8000642:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000646:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800064a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800064e:	bf1d      	ittte	ne
 8000650:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000654:	ea94 0f0c 	teqne	r4, ip
 8000658:	ea95 0f0c 	teqne	r5, ip
 800065c:	f000 f8de 	bleq	800081c <__aeabi_dmul+0x1dc>
 8000660:	442c      	add	r4, r5
 8000662:	ea81 0603 	eor.w	r6, r1, r3
 8000666:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800066a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800066e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000672:	bf18      	it	ne
 8000674:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000678:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800067c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000680:	d038      	beq.n	80006f4 <__aeabi_dmul+0xb4>
 8000682:	fba0 ce02 	umull	ip, lr, r0, r2
 8000686:	f04f 0500 	mov.w	r5, #0
 800068a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800068e:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 8000692:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000696:	f04f 0600 	mov.w	r6, #0
 800069a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800069e:	f09c 0f00 	teq	ip, #0
 80006a2:	bf18      	it	ne
 80006a4:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006ac:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006b0:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006b4:	d204      	bcs.n	80006c0 <__aeabi_dmul+0x80>
 80006b6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006ba:	416d      	adcs	r5, r5
 80006bc:	eb46 0606 	adc.w	r6, r6, r6
 80006c0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006c4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006cc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006d4:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006d8:	bf88      	it	hi
 80006da:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006de:	d81e      	bhi.n	800071e <__aeabi_dmul+0xde>
 80006e0:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006e4:	bf08      	it	eq
 80006e6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006ea:	f150 0000 	adcs.w	r0, r0, #0
 80006ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006f2:	bd70      	pop	{r4, r5, r6, pc}
 80006f4:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006f8:	ea46 0101 	orr.w	r1, r6, r1
 80006fc:	ea40 0002 	orr.w	r0, r0, r2
 8000700:	ea81 0103 	eor.w	r1, r1, r3
 8000704:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000708:	bfc2      	ittt	gt
 800070a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800070e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000712:	bd70      	popgt	{r4, r5, r6, pc}
 8000714:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000718:	f04f 0e00 	mov.w	lr, #0
 800071c:	3c01      	subs	r4, #1
 800071e:	f300 80ab 	bgt.w	8000878 <__aeabi_dmul+0x238>
 8000722:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000726:	bfde      	ittt	le
 8000728:	2000      	movle	r0, #0
 800072a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800072e:	bd70      	pople	{r4, r5, r6, pc}
 8000730:	f1c4 0400 	rsb	r4, r4, #0
 8000734:	3c20      	subs	r4, #32
 8000736:	da35      	bge.n	80007a4 <__aeabi_dmul+0x164>
 8000738:	340c      	adds	r4, #12
 800073a:	dc1b      	bgt.n	8000774 <__aeabi_dmul+0x134>
 800073c:	f104 0414 	add.w	r4, r4, #20
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f305 	lsl.w	r3, r0, r5
 8000748:	fa20 f004 	lsr.w	r0, r0, r4
 800074c:	fa01 f205 	lsl.w	r2, r1, r5
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000758:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800075c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000760:	fa21 f604 	lsr.w	r6, r1, r4
 8000764:	eb42 0106 	adc.w	r1, r2, r6
 8000768:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800076c:	bf08      	it	eq
 800076e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000772:	bd70      	pop	{r4, r5, r6, pc}
 8000774:	f1c4 040c 	rsb	r4, r4, #12
 8000778:	f1c4 0520 	rsb	r5, r4, #32
 800077c:	fa00 f304 	lsl.w	r3, r0, r4
 8000780:	fa20 f005 	lsr.w	r0, r0, r5
 8000784:	fa01 f204 	lsl.w	r2, r1, r4
 8000788:	ea40 0002 	orr.w	r0, r0, r2
 800078c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000790:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000794:	f141 0100 	adc.w	r1, r1, #0
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f1c4 0520 	rsb	r5, r4, #32
 80007a8:	fa00 f205 	lsl.w	r2, r0, r5
 80007ac:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b0:	fa20 f304 	lsr.w	r3, r0, r4
 80007b4:	fa01 f205 	lsl.w	r2, r1, r5
 80007b8:	ea43 0302 	orr.w	r3, r3, r2
 80007bc:	fa21 f004 	lsr.w	r0, r1, r4
 80007c0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007c4:	fa21 f204 	lsr.w	r2, r1, r4
 80007c8:	ea20 0002 	bic.w	r0, r0, r2
 80007cc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007d4:	bf08      	it	eq
 80007d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007da:	bd70      	pop	{r4, r5, r6, pc}
 80007dc:	f094 0f00 	teq	r4, #0
 80007e0:	d10f      	bne.n	8000802 <__aeabi_dmul+0x1c2>
 80007e2:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007e6:	0040      	lsls	r0, r0, #1
 80007e8:	eb41 0101 	adc.w	r1, r1, r1
 80007ec:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007f0:	bf08      	it	eq
 80007f2:	3c01      	subeq	r4, #1
 80007f4:	d0f7      	beq.n	80007e6 <__aeabi_dmul+0x1a6>
 80007f6:	ea41 0106 	orr.w	r1, r1, r6
 80007fa:	f095 0f00 	teq	r5, #0
 80007fe:	bf18      	it	ne
 8000800:	4770      	bxne	lr
 8000802:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000806:	0052      	lsls	r2, r2, #1
 8000808:	eb43 0303 	adc.w	r3, r3, r3
 800080c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000810:	bf08      	it	eq
 8000812:	3d01      	subeq	r5, #1
 8000814:	d0f7      	beq.n	8000806 <__aeabi_dmul+0x1c6>
 8000816:	ea43 0306 	orr.w	r3, r3, r6
 800081a:	4770      	bx	lr
 800081c:	ea94 0f0c 	teq	r4, ip
 8000820:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000824:	bf18      	it	ne
 8000826:	ea95 0f0c 	teqne	r5, ip
 800082a:	d00c      	beq.n	8000846 <__aeabi_dmul+0x206>
 800082c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000830:	bf18      	it	ne
 8000832:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000836:	d1d1      	bne.n	80007dc <__aeabi_dmul+0x19c>
 8000838:	ea81 0103 	eor.w	r1, r1, r3
 800083c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000840:	f04f 0000 	mov.w	r0, #0
 8000844:	bd70      	pop	{r4, r5, r6, pc}
 8000846:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800084a:	bf06      	itte	eq
 800084c:	4610      	moveq	r0, r2
 800084e:	4619      	moveq	r1, r3
 8000850:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000854:	d019      	beq.n	800088a <__aeabi_dmul+0x24a>
 8000856:	ea94 0f0c 	teq	r4, ip
 800085a:	d102      	bne.n	8000862 <__aeabi_dmul+0x222>
 800085c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000860:	d113      	bne.n	800088a <__aeabi_dmul+0x24a>
 8000862:	ea95 0f0c 	teq	r5, ip
 8000866:	d105      	bne.n	8000874 <__aeabi_dmul+0x234>
 8000868:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800086c:	bf1c      	itt	ne
 800086e:	4610      	movne	r0, r2
 8000870:	4619      	movne	r1, r3
 8000872:	d10a      	bne.n	800088a <__aeabi_dmul+0x24a>
 8000874:	ea81 0103 	eor.w	r1, r1, r3
 8000878:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800087c:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000880:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000884:	f04f 0000 	mov.w	r0, #0
 8000888:	bd70      	pop	{r4, r5, r6, pc}
 800088a:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 800088e:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 8000892:	bd70      	pop	{r4, r5, r6, pc}

08000894 <__aeabi_ddiv>:
 8000894:	b570      	push	{r4, r5, r6, lr}
 8000896:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800089a:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800089e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008a2:	bf1d      	ittte	ne
 80008a4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a8:	ea94 0f0c 	teqne	r4, ip
 80008ac:	ea95 0f0c 	teqne	r5, ip
 80008b0:	f000 f8a7 	bleq	8000a02 <__aeabi_ddiv+0x16e>
 80008b4:	eba4 0405 	sub.w	r4, r4, r5
 80008b8:	ea81 0e03 	eor.w	lr, r1, r3
 80008bc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008c4:	f000 8088 	beq.w	80009d8 <__aeabi_ddiv+0x144>
 80008c8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008cc:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008d0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008d4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008dc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008e4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e8:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008ec:	429d      	cmp	r5, r3
 80008ee:	bf08      	it	eq
 80008f0:	4296      	cmpeq	r6, r2
 80008f2:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008f6:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008fa:	d202      	bcs.n	8000902 <__aeabi_ddiv+0x6e>
 80008fc:	085b      	lsrs	r3, r3, #1
 80008fe:	ea4f 0232 	mov.w	r2, r2, rrx
 8000902:	1ab6      	subs	r6, r6, r2
 8000904:	eb65 0503 	sbc.w	r5, r5, r3
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000912:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 000c 	orrcs.w	r0, r0, ip
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000958:	085b      	lsrs	r3, r3, #1
 800095a:	ea4f 0232 	mov.w	r2, r2, rrx
 800095e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000962:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000966:	bf22      	ittt	cs
 8000968:	1ab6      	subcs	r6, r6, r2
 800096a:	4675      	movcs	r5, lr
 800096c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000970:	ea55 0e06 	orrs.w	lr, r5, r6
 8000974:	d018      	beq.n	80009a8 <__aeabi_ddiv+0x114>
 8000976:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800097a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800097e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000982:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000986:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800098a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800098e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000992:	d1c0      	bne.n	8000916 <__aeabi_ddiv+0x82>
 8000994:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000998:	d10b      	bne.n	80009b2 <__aeabi_ddiv+0x11e>
 800099a:	ea41 0100 	orr.w	r1, r1, r0
 800099e:	f04f 0000 	mov.w	r0, #0
 80009a2:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80009a6:	e7b6      	b.n	8000916 <__aeabi_ddiv+0x82>
 80009a8:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009ac:	bf04      	itt	eq
 80009ae:	4301      	orreq	r1, r0
 80009b0:	2000      	moveq	r0, #0
 80009b2:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009b6:	bf88      	it	hi
 80009b8:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009bc:	f63f aeaf 	bhi.w	800071e <__aeabi_dmul+0xde>
 80009c0:	ebb5 0c03 	subs.w	ip, r5, r3
 80009c4:	bf04      	itt	eq
 80009c6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009ca:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009ce:	f150 0000 	adcs.w	r0, r0, #0
 80009d2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	pop	{r4, r5, r6, pc}
 80009d8:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009dc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009e4:	bfc2      	ittt	gt
 80009e6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009ee:	bd70      	popgt	{r4, r5, r6, pc}
 80009f0:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009f4:	f04f 0e00 	mov.w	lr, #0
 80009f8:	3c01      	subs	r4, #1
 80009fa:	e690      	b.n	800071e <__aeabi_dmul+0xde>
 80009fc:	ea45 0e06 	orr.w	lr, r5, r6
 8000a00:	e68d      	b.n	800071e <__aeabi_dmul+0xde>
 8000a02:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a06:	ea94 0f0c 	teq	r4, ip
 8000a0a:	bf08      	it	eq
 8000a0c:	ea95 0f0c 	teqeq	r5, ip
 8000a10:	f43f af3b 	beq.w	800088a <__aeabi_dmul+0x24a>
 8000a14:	ea94 0f0c 	teq	r4, ip
 8000a18:	d10a      	bne.n	8000a30 <__aeabi_ddiv+0x19c>
 8000a1a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a1e:	f47f af34 	bne.w	800088a <__aeabi_dmul+0x24a>
 8000a22:	ea95 0f0c 	teq	r5, ip
 8000a26:	f47f af25 	bne.w	8000874 <__aeabi_dmul+0x234>
 8000a2a:	4610      	mov	r0, r2
 8000a2c:	4619      	mov	r1, r3
 8000a2e:	e72c      	b.n	800088a <__aeabi_dmul+0x24a>
 8000a30:	ea95 0f0c 	teq	r5, ip
 8000a34:	d106      	bne.n	8000a44 <__aeabi_ddiv+0x1b0>
 8000a36:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a3a:	f43f aefd 	beq.w	8000838 <__aeabi_dmul+0x1f8>
 8000a3e:	4610      	mov	r0, r2
 8000a40:	4619      	mov	r1, r3
 8000a42:	e722      	b.n	800088a <__aeabi_dmul+0x24a>
 8000a44:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a48:	bf18      	it	ne
 8000a4a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a4e:	f47f aec5 	bne.w	80007dc <__aeabi_dmul+0x19c>
 8000a52:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a56:	f47f af0d 	bne.w	8000874 <__aeabi_dmul+0x234>
 8000a5a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a5e:	f47f aeeb 	bne.w	8000838 <__aeabi_dmul+0x1f8>
 8000a62:	e712      	b.n	800088a <__aeabi_dmul+0x24a>

08000a64 <__gedf2>:
 8000a64:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8000a68:	e006      	b.n	8000a78 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__ledf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	e002      	b.n	8000a78 <__cmpdf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__cmpdf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a84:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a88:	bf18      	it	ne
 8000a8a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a8e:	d01b      	beq.n	8000ac8 <__cmpdf2+0x54>
 8000a90:	b001      	add	sp, #4
 8000a92:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a96:	bf0c      	ite	eq
 8000a98:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a9c:	ea91 0f03 	teqne	r1, r3
 8000aa0:	bf02      	ittt	eq
 8000aa2:	ea90 0f02 	teqeq	r0, r2
 8000aa6:	2000      	moveq	r0, #0
 8000aa8:	4770      	bxeq	lr
 8000aaa:	f110 0f00 	cmn.w	r0, #0
 8000aae:	ea91 0f03 	teq	r1, r3
 8000ab2:	bf58      	it	pl
 8000ab4:	4299      	cmppl	r1, r3
 8000ab6:	bf08      	it	eq
 8000ab8:	4290      	cmpeq	r0, r2
 8000aba:	bf2c      	ite	cs
 8000abc:	17d8      	asrcs	r0, r3, #31
 8000abe:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000ac2:	f040 0001 	orr.w	r0, r0, #1
 8000ac6:	4770      	bx	lr
 8000ac8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000acc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad0:	d102      	bne.n	8000ad8 <__cmpdf2+0x64>
 8000ad2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ad6:	d107      	bne.n	8000ae8 <__cmpdf2+0x74>
 8000ad8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000adc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae0:	d1d6      	bne.n	8000a90 <__cmpdf2+0x1c>
 8000ae2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ae6:	d0d3      	beq.n	8000a90 <__cmpdf2+0x1c>
 8000ae8:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aec:	4770      	bx	lr
 8000aee:	bf00      	nop

08000af0 <__aeabi_cdrcmple>:
 8000af0:	4684      	mov	ip, r0
 8000af2:	4610      	mov	r0, r2
 8000af4:	4662      	mov	r2, ip
 8000af6:	468c      	mov	ip, r1
 8000af8:	4619      	mov	r1, r3
 8000afa:	4663      	mov	r3, ip
 8000afc:	e000      	b.n	8000b00 <__aeabi_cdcmpeq>
 8000afe:	bf00      	nop

08000b00 <__aeabi_cdcmpeq>:
 8000b00:	b501      	push	{r0, lr}
 8000b02:	f7ff ffb7 	bl	8000a74 <__cmpdf2>
 8000b06:	2800      	cmp	r0, #0
 8000b08:	bf48      	it	mi
 8000b0a:	f110 0f00 	cmnmi.w	r0, #0
 8000b0e:	bd01      	pop	{r0, pc}

08000b10 <__aeabi_dcmpeq>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff fff4 	bl	8000b00 <__aeabi_cdcmpeq>
 8000b18:	bf0c      	ite	eq
 8000b1a:	2001      	moveq	r0, #1
 8000b1c:	2000      	movne	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmplt>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffea 	bl	8000b00 <__aeabi_cdcmpeq>
 8000b2c:	bf34      	ite	cc
 8000b2e:	2001      	movcc	r0, #1
 8000b30:	2000      	movcs	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmple>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffe0 	bl	8000b00 <__aeabi_cdcmpeq>
 8000b40:	bf94      	ite	ls
 8000b42:	2001      	movls	r0, #1
 8000b44:	2000      	movhi	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpge>:
 8000b4c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b50:	f7ff ffce 	bl	8000af0 <__aeabi_cdrcmple>
 8000b54:	bf94      	ite	ls
 8000b56:	2001      	movls	r0, #1
 8000b58:	2000      	movhi	r0, #0
 8000b5a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5e:	bf00      	nop

08000b60 <__aeabi_dcmpgt>:
 8000b60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b64:	f7ff ffc4 	bl	8000af0 <__aeabi_cdrcmple>
 8000b68:	bf34      	ite	cc
 8000b6a:	2001      	movcc	r0, #1
 8000b6c:	2000      	movcs	r0, #0
 8000b6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b72:	bf00      	nop

08000b74 <__aeabi_dcmpun>:
 8000b74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b7c:	d102      	bne.n	8000b84 <__aeabi_dcmpun+0x10>
 8000b7e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b82:	d10a      	bne.n	8000b9a <__aeabi_dcmpun+0x26>
 8000b84:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b8c:	d102      	bne.n	8000b94 <__aeabi_dcmpun+0x20>
 8000b8e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b92:	d102      	bne.n	8000b9a <__aeabi_dcmpun+0x26>
 8000b94:	f04f 0000 	mov.w	r0, #0
 8000b98:	4770      	bx	lr
 8000b9a:	f04f 0001 	mov.w	r0, #1
 8000b9e:	4770      	bx	lr

08000ba0 <__aeabi_d2iz>:
 8000ba0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ba4:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000ba8:	d215      	bcs.n	8000bd6 <__aeabi_d2iz+0x36>
 8000baa:	d511      	bpl.n	8000bd0 <__aeabi_d2iz+0x30>
 8000bac:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bb0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bb4:	d912      	bls.n	8000bdc <__aeabi_d2iz+0x3c>
 8000bb6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bba:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bbe:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bc2:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bc6:	fa23 f002 	lsr.w	r0, r3, r2
 8000bca:	bf18      	it	ne
 8000bcc:	4240      	negne	r0, r0
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d105      	bne.n	8000be8 <__aeabi_d2iz+0x48>
 8000bdc:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000be0:	bf08      	it	eq
 8000be2:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000be6:	4770      	bx	lr
 8000be8:	f04f 0000 	mov.w	r0, #0
 8000bec:	4770      	bx	lr
 8000bee:	bf00      	nop

08000bf0 <__aeabi_d2uiz>:
 8000bf0:	004a      	lsls	r2, r1, #1
 8000bf2:	d211      	bcs.n	8000c18 <__aeabi_d2uiz+0x28>
 8000bf4:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bf8:	d211      	bcs.n	8000c1e <__aeabi_d2uiz+0x2e>
 8000bfa:	d50d      	bpl.n	8000c18 <__aeabi_d2uiz+0x28>
 8000bfc:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000c00:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c04:	d40e      	bmi.n	8000c24 <__aeabi_d2uiz+0x34>
 8000c06:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c0a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000c0e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c12:	fa23 f002 	lsr.w	r0, r3, r2
 8000c16:	4770      	bx	lr
 8000c18:	f04f 0000 	mov.w	r0, #0
 8000c1c:	4770      	bx	lr
 8000c1e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c22:	d102      	bne.n	8000c2a <__aeabi_d2uiz+0x3a>
 8000c24:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000c28:	4770      	bx	lr
 8000c2a:	f04f 0000 	mov.w	r0, #0
 8000c2e:	4770      	bx	lr

08000c30 <__aeabi_d2f>:
 8000c30:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c34:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c38:	bf24      	itt	cs
 8000c3a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c3e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c42:	d90d      	bls.n	8000c60 <__aeabi_d2f+0x30>
 8000c44:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c48:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c4c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c50:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c54:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c58:	bf08      	it	eq
 8000c5a:	f020 0001 	biceq.w	r0, r0, #1
 8000c5e:	4770      	bx	lr
 8000c60:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c64:	d121      	bne.n	8000caa <__aeabi_d2f+0x7a>
 8000c66:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c6a:	bfbc      	itt	lt
 8000c6c:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c70:	4770      	bxlt	lr
 8000c72:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c76:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c7a:	f1c2 0218 	rsb	r2, r2, #24
 8000c7e:	f1c2 0c20 	rsb	ip, r2, #32
 8000c82:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c86:	fa20 f002 	lsr.w	r0, r0, r2
 8000c8a:	bf18      	it	ne
 8000c8c:	f040 0001 	orrne.w	r0, r0, #1
 8000c90:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c94:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c98:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c9c:	ea40 000c 	orr.w	r0, r0, ip
 8000ca0:	fa23 f302 	lsr.w	r3, r3, r2
 8000ca4:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ca8:	e7cc      	b.n	8000c44 <__aeabi_d2f+0x14>
 8000caa:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000cae:	d107      	bne.n	8000cc0 <__aeabi_d2f+0x90>
 8000cb0:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cb4:	bf1e      	ittt	ne
 8000cb6:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000cba:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000cbe:	4770      	bxne	lr
 8000cc0:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000cc4:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000cc8:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ccc:	4770      	bx	lr
 8000cce:	bf00      	nop

08000cd0 <__aeabi_frsub>:
 8000cd0:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000cd4:	e002      	b.n	8000cdc <__addsf3>
 8000cd6:	bf00      	nop

08000cd8 <__aeabi_fsub>:
 8000cd8:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000cdc <__addsf3>:
 8000cdc:	0042      	lsls	r2, r0, #1
 8000cde:	bf1f      	itttt	ne
 8000ce0:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000ce4:	ea92 0f03 	teqne	r2, r3
 8000ce8:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000cec:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000cf0:	d06a      	beq.n	8000dc8 <__addsf3+0xec>
 8000cf2:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000cf6:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000cfa:	bfc1      	itttt	gt
 8000cfc:	18d2      	addgt	r2, r2, r3
 8000cfe:	4041      	eorgt	r1, r0
 8000d00:	4048      	eorgt	r0, r1
 8000d02:	4041      	eorgt	r1, r0
 8000d04:	bfb8      	it	lt
 8000d06:	425b      	neglt	r3, r3
 8000d08:	2b19      	cmp	r3, #25
 8000d0a:	bf88      	it	hi
 8000d0c:	4770      	bxhi	lr
 8000d0e:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000d12:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000d16:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000d1a:	bf18      	it	ne
 8000d1c:	4240      	negne	r0, r0
 8000d1e:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000d22:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000d26:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000d2a:	bf18      	it	ne
 8000d2c:	4249      	negne	r1, r1
 8000d2e:	ea92 0f03 	teq	r2, r3
 8000d32:	d03f      	beq.n	8000db4 <__addsf3+0xd8>
 8000d34:	f1a2 0201 	sub.w	r2, r2, #1
 8000d38:	fa41 fc03 	asr.w	ip, r1, r3
 8000d3c:	eb10 000c 	adds.w	r0, r0, ip
 8000d40:	f1c3 0320 	rsb	r3, r3, #32
 8000d44:	fa01 f103 	lsl.w	r1, r1, r3
 8000d48:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000d4c:	d502      	bpl.n	8000d54 <__addsf3+0x78>
 8000d4e:	4249      	negs	r1, r1
 8000d50:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000d54:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000d58:	d313      	bcc.n	8000d82 <__addsf3+0xa6>
 8000d5a:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000d5e:	d306      	bcc.n	8000d6e <__addsf3+0x92>
 8000d60:	0840      	lsrs	r0, r0, #1
 8000d62:	ea4f 0131 	mov.w	r1, r1, rrx
 8000d66:	f102 0201 	add.w	r2, r2, #1
 8000d6a:	2afe      	cmp	r2, #254	@ 0xfe
 8000d6c:	d251      	bcs.n	8000e12 <__addsf3+0x136>
 8000d6e:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000d72:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d76:	bf08      	it	eq
 8000d78:	f020 0001 	biceq.w	r0, r0, #1
 8000d7c:	ea40 0003 	orr.w	r0, r0, r3
 8000d80:	4770      	bx	lr
 8000d82:	0049      	lsls	r1, r1, #1
 8000d84:	eb40 0000 	adc.w	r0, r0, r0
 8000d88:	3a01      	subs	r2, #1
 8000d8a:	bf28      	it	cs
 8000d8c:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000d90:	d2ed      	bcs.n	8000d6e <__addsf3+0x92>
 8000d92:	fab0 fc80 	clz	ip, r0
 8000d96:	f1ac 0c08 	sub.w	ip, ip, #8
 8000d9a:	ebb2 020c 	subs.w	r2, r2, ip
 8000d9e:	fa00 f00c 	lsl.w	r0, r0, ip
 8000da2:	bfaa      	itet	ge
 8000da4:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000da8:	4252      	neglt	r2, r2
 8000daa:	4318      	orrge	r0, r3
 8000dac:	bfbc      	itt	lt
 8000dae:	40d0      	lsrlt	r0, r2
 8000db0:	4318      	orrlt	r0, r3
 8000db2:	4770      	bx	lr
 8000db4:	f092 0f00 	teq	r2, #0
 8000db8:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000dbc:	bf06      	itte	eq
 8000dbe:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000dc2:	3201      	addeq	r2, #1
 8000dc4:	3b01      	subne	r3, #1
 8000dc6:	e7b5      	b.n	8000d34 <__addsf3+0x58>
 8000dc8:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000dcc:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000dd0:	bf18      	it	ne
 8000dd2:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000dd6:	d021      	beq.n	8000e1c <__addsf3+0x140>
 8000dd8:	ea92 0f03 	teq	r2, r3
 8000ddc:	d004      	beq.n	8000de8 <__addsf3+0x10c>
 8000dde:	f092 0f00 	teq	r2, #0
 8000de2:	bf08      	it	eq
 8000de4:	4608      	moveq	r0, r1
 8000de6:	4770      	bx	lr
 8000de8:	ea90 0f01 	teq	r0, r1
 8000dec:	bf1c      	itt	ne
 8000dee:	2000      	movne	r0, #0
 8000df0:	4770      	bxne	lr
 8000df2:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000df6:	d104      	bne.n	8000e02 <__addsf3+0x126>
 8000df8:	0040      	lsls	r0, r0, #1
 8000dfa:	bf28      	it	cs
 8000dfc:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000e00:	4770      	bx	lr
 8000e02:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000e06:	bf3c      	itt	cc
 8000e08:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000e0c:	4770      	bxcc	lr
 8000e0e:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000e12:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000e16:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000e1a:	4770      	bx	lr
 8000e1c:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000e20:	bf16      	itet	ne
 8000e22:	4608      	movne	r0, r1
 8000e24:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000e28:	4601      	movne	r1, r0
 8000e2a:	0242      	lsls	r2, r0, #9
 8000e2c:	bf06      	itte	eq
 8000e2e:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000e32:	ea90 0f01 	teqeq	r0, r1
 8000e36:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000e3a:	4770      	bx	lr

08000e3c <__aeabi_ui2f>:
 8000e3c:	f04f 0300 	mov.w	r3, #0
 8000e40:	e004      	b.n	8000e4c <__aeabi_i2f+0x8>
 8000e42:	bf00      	nop

08000e44 <__aeabi_i2f>:
 8000e44:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000e48:	bf48      	it	mi
 8000e4a:	4240      	negmi	r0, r0
 8000e4c:	ea5f 0c00 	movs.w	ip, r0
 8000e50:	bf08      	it	eq
 8000e52:	4770      	bxeq	lr
 8000e54:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000e58:	4601      	mov	r1, r0
 8000e5a:	f04f 0000 	mov.w	r0, #0
 8000e5e:	e01c      	b.n	8000e9a <__aeabi_l2f+0x2a>

08000e60 <__aeabi_ul2f>:
 8000e60:	ea50 0201 	orrs.w	r2, r0, r1
 8000e64:	bf08      	it	eq
 8000e66:	4770      	bxeq	lr
 8000e68:	f04f 0300 	mov.w	r3, #0
 8000e6c:	e00a      	b.n	8000e84 <__aeabi_l2f+0x14>
 8000e6e:	bf00      	nop

08000e70 <__aeabi_l2f>:
 8000e70:	ea50 0201 	orrs.w	r2, r0, r1
 8000e74:	bf08      	it	eq
 8000e76:	4770      	bxeq	lr
 8000e78:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000e7c:	d502      	bpl.n	8000e84 <__aeabi_l2f+0x14>
 8000e7e:	4240      	negs	r0, r0
 8000e80:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000e84:	ea5f 0c01 	movs.w	ip, r1
 8000e88:	bf02      	ittt	eq
 8000e8a:	4684      	moveq	ip, r0
 8000e8c:	4601      	moveq	r1, r0
 8000e8e:	2000      	moveq	r0, #0
 8000e90:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000e94:	bf08      	it	eq
 8000e96:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000e9a:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000e9e:	fabc f28c 	clz	r2, ip
 8000ea2:	3a08      	subs	r2, #8
 8000ea4:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000ea8:	db10      	blt.n	8000ecc <__aeabi_l2f+0x5c>
 8000eaa:	fa01 fc02 	lsl.w	ip, r1, r2
 8000eae:	4463      	add	r3, ip
 8000eb0:	fa00 fc02 	lsl.w	ip, r0, r2
 8000eb4:	f1c2 0220 	rsb	r2, r2, #32
 8000eb8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000ebc:	fa20 f202 	lsr.w	r2, r0, r2
 8000ec0:	eb43 0002 	adc.w	r0, r3, r2
 8000ec4:	bf08      	it	eq
 8000ec6:	f020 0001 	biceq.w	r0, r0, #1
 8000eca:	4770      	bx	lr
 8000ecc:	f102 0220 	add.w	r2, r2, #32
 8000ed0:	fa01 fc02 	lsl.w	ip, r1, r2
 8000ed4:	f1c2 0220 	rsb	r2, r2, #32
 8000ed8:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000edc:	fa21 f202 	lsr.w	r2, r1, r2
 8000ee0:	eb43 0002 	adc.w	r0, r3, r2
 8000ee4:	bf08      	it	eq
 8000ee6:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000eea:	4770      	bx	lr

08000eec <__gesf2>:
 8000eec:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8000ef0:	e006      	b.n	8000f00 <__cmpsf2+0x4>
 8000ef2:	bf00      	nop

08000ef4 <__lesf2>:
 8000ef4:	f04f 0c01 	mov.w	ip, #1
 8000ef8:	e002      	b.n	8000f00 <__cmpsf2+0x4>
 8000efa:	bf00      	nop

08000efc <__cmpsf2>:
 8000efc:	f04f 0c01 	mov.w	ip, #1
 8000f00:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000f04:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000f08:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000f0c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000f10:	bf18      	it	ne
 8000f12:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000f16:	d011      	beq.n	8000f3c <__cmpsf2+0x40>
 8000f18:	b001      	add	sp, #4
 8000f1a:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000f1e:	bf18      	it	ne
 8000f20:	ea90 0f01 	teqne	r0, r1
 8000f24:	bf58      	it	pl
 8000f26:	ebb2 0003 	subspl.w	r0, r2, r3
 8000f2a:	bf88      	it	hi
 8000f2c:	17c8      	asrhi	r0, r1, #31
 8000f2e:	bf38      	it	cc
 8000f30:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000f34:	bf18      	it	ne
 8000f36:	f040 0001 	orrne.w	r0, r0, #1
 8000f3a:	4770      	bx	lr
 8000f3c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000f40:	d102      	bne.n	8000f48 <__cmpsf2+0x4c>
 8000f42:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000f46:	d105      	bne.n	8000f54 <__cmpsf2+0x58>
 8000f48:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000f4c:	d1e4      	bne.n	8000f18 <__cmpsf2+0x1c>
 8000f4e:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000f52:	d0e1      	beq.n	8000f18 <__cmpsf2+0x1c>
 8000f54:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000f58:	4770      	bx	lr
 8000f5a:	bf00      	nop

08000f5c <__aeabi_cfrcmple>:
 8000f5c:	4684      	mov	ip, r0
 8000f5e:	4608      	mov	r0, r1
 8000f60:	4661      	mov	r1, ip
 8000f62:	e7ff      	b.n	8000f64 <__aeabi_cfcmpeq>

08000f64 <__aeabi_cfcmpeq>:
 8000f64:	b50f      	push	{r0, r1, r2, r3, lr}
 8000f66:	f7ff ffc9 	bl	8000efc <__cmpsf2>
 8000f6a:	2800      	cmp	r0, #0
 8000f6c:	bf48      	it	mi
 8000f6e:	f110 0f00 	cmnmi.w	r0, #0
 8000f72:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000f74 <__aeabi_fcmpeq>:
 8000f74:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000f78:	f7ff fff4 	bl	8000f64 <__aeabi_cfcmpeq>
 8000f7c:	bf0c      	ite	eq
 8000f7e:	2001      	moveq	r0, #1
 8000f80:	2000      	movne	r0, #0
 8000f82:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f86:	bf00      	nop

08000f88 <__aeabi_fcmplt>:
 8000f88:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000f8c:	f7ff ffea 	bl	8000f64 <__aeabi_cfcmpeq>
 8000f90:	bf34      	ite	cc
 8000f92:	2001      	movcc	r0, #1
 8000f94:	2000      	movcs	r0, #0
 8000f96:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f9a:	bf00      	nop

08000f9c <__aeabi_fcmple>:
 8000f9c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000fa0:	f7ff ffe0 	bl	8000f64 <__aeabi_cfcmpeq>
 8000fa4:	bf94      	ite	ls
 8000fa6:	2001      	movls	r0, #1
 8000fa8:	2000      	movhi	r0, #0
 8000faa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000fae:	bf00      	nop

08000fb0 <__aeabi_fcmpge>:
 8000fb0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000fb4:	f7ff ffd2 	bl	8000f5c <__aeabi_cfrcmple>
 8000fb8:	bf94      	ite	ls
 8000fba:	2001      	movls	r0, #1
 8000fbc:	2000      	movhi	r0, #0
 8000fbe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000fc2:	bf00      	nop

08000fc4 <__aeabi_fcmpgt>:
 8000fc4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000fc8:	f7ff ffc8 	bl	8000f5c <__aeabi_cfrcmple>
 8000fcc:	bf34      	ite	cc
 8000fce:	2001      	movcc	r0, #1
 8000fd0:	2000      	movcs	r0, #0
 8000fd2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000fd6:	bf00      	nop

08000fd8 <__aeabi_f2iz>:
 8000fd8:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000fdc:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 8000fe0:	d30f      	bcc.n	8001002 <__aeabi_f2iz+0x2a>
 8000fe2:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 8000fe6:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000fea:	d90d      	bls.n	8001008 <__aeabi_f2iz+0x30>
 8000fec:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000ff0:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000ff4:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000ff8:	fa23 f002 	lsr.w	r0, r3, r2
 8000ffc:	bf18      	it	ne
 8000ffe:	4240      	negne	r0, r0
 8001000:	4770      	bx	lr
 8001002:	f04f 0000 	mov.w	r0, #0
 8001006:	4770      	bx	lr
 8001008:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 800100c:	d101      	bne.n	8001012 <__aeabi_f2iz+0x3a>
 800100e:	0242      	lsls	r2, r0, #9
 8001010:	d105      	bne.n	800101e <__aeabi_f2iz+0x46>
 8001012:	f010 4000 	ands.w	r0, r0, #2147483648	@ 0x80000000
 8001016:	bf08      	it	eq
 8001018:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 800101c:	4770      	bx	lr
 800101e:	f04f 0000 	mov.w	r0, #0
 8001022:	4770      	bx	lr

08001024 <__aeabi_uldivmod>:
 8001024:	b953      	cbnz	r3, 800103c <__aeabi_uldivmod+0x18>
 8001026:	b94a      	cbnz	r2, 800103c <__aeabi_uldivmod+0x18>
 8001028:	2900      	cmp	r1, #0
 800102a:	bf08      	it	eq
 800102c:	2800      	cmpeq	r0, #0
 800102e:	bf1c      	itt	ne
 8001030:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8001034:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8001038:	f000 b99e 	b.w	8001378 <__aeabi_idiv0>
 800103c:	f1ad 0c08 	sub.w	ip, sp, #8
 8001040:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8001044:	f000 f83c 	bl	80010c0 <__udivmoddi4>
 8001048:	f8dd e004 	ldr.w	lr, [sp, #4]
 800104c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8001050:	b004      	add	sp, #16
 8001052:	4770      	bx	lr

08001054 <__aeabi_d2lz>:
 8001054:	b538      	push	{r3, r4, r5, lr}
 8001056:	2200      	movs	r2, #0
 8001058:	2300      	movs	r3, #0
 800105a:	4604      	mov	r4, r0
 800105c:	460d      	mov	r5, r1
 800105e:	f7ff fd61 	bl	8000b24 <__aeabi_dcmplt>
 8001062:	b928      	cbnz	r0, 8001070 <__aeabi_d2lz+0x1c>
 8001064:	4620      	mov	r0, r4
 8001066:	4629      	mov	r1, r5
 8001068:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800106c:	f000 b80a 	b.w	8001084 <__aeabi_d2ulz>
 8001070:	4620      	mov	r0, r4
 8001072:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8001076:	f000 f805 	bl	8001084 <__aeabi_d2ulz>
 800107a:	4240      	negs	r0, r0
 800107c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8001080:	bd38      	pop	{r3, r4, r5, pc}
 8001082:	bf00      	nop

08001084 <__aeabi_d2ulz>:
 8001084:	b5d0      	push	{r4, r6, r7, lr}
 8001086:	2200      	movs	r2, #0
 8001088:	4b0b      	ldr	r3, [pc, #44]	@ (80010b8 <__aeabi_d2ulz+0x34>)
 800108a:	4606      	mov	r6, r0
 800108c:	460f      	mov	r7, r1
 800108e:	f7ff fad7 	bl	8000640 <__aeabi_dmul>
 8001092:	f7ff fdad 	bl	8000bf0 <__aeabi_d2uiz>
 8001096:	4604      	mov	r4, r0
 8001098:	f7ff fa58 	bl	800054c <__aeabi_ui2d>
 800109c:	2200      	movs	r2, #0
 800109e:	4b07      	ldr	r3, [pc, #28]	@ (80010bc <__aeabi_d2ulz+0x38>)
 80010a0:	f7ff face 	bl	8000640 <__aeabi_dmul>
 80010a4:	4602      	mov	r2, r0
 80010a6:	460b      	mov	r3, r1
 80010a8:	4630      	mov	r0, r6
 80010aa:	4639      	mov	r1, r7
 80010ac:	f7ff f910 	bl	80002d0 <__aeabi_dsub>
 80010b0:	f7ff fd9e 	bl	8000bf0 <__aeabi_d2uiz>
 80010b4:	4621      	mov	r1, r4
 80010b6:	bdd0      	pop	{r4, r6, r7, pc}
 80010b8:	3df00000 	.word	0x3df00000
 80010bc:	41f00000 	.word	0x41f00000

080010c0 <__udivmoddi4>:
 80010c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80010c4:	9d08      	ldr	r5, [sp, #32]
 80010c6:	460c      	mov	r4, r1
 80010c8:	2b00      	cmp	r3, #0
 80010ca:	d14e      	bne.n	800116a <__udivmoddi4+0xaa>
 80010cc:	4694      	mov	ip, r2
 80010ce:	458c      	cmp	ip, r1
 80010d0:	4686      	mov	lr, r0
 80010d2:	fab2 f282 	clz	r2, r2
 80010d6:	d962      	bls.n	800119e <__udivmoddi4+0xde>
 80010d8:	b14a      	cbz	r2, 80010ee <__udivmoddi4+0x2e>
 80010da:	f1c2 0320 	rsb	r3, r2, #32
 80010de:	4091      	lsls	r1, r2
 80010e0:	fa20 f303 	lsr.w	r3, r0, r3
 80010e4:	fa0c fc02 	lsl.w	ip, ip, r2
 80010e8:	4319      	orrs	r1, r3
 80010ea:	fa00 fe02 	lsl.w	lr, r0, r2
 80010ee:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80010f2:	fbb1 f4f7 	udiv	r4, r1, r7
 80010f6:	fb07 1114 	mls	r1, r7, r4, r1
 80010fa:	fa1f f68c 	uxth.w	r6, ip
 80010fe:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8001102:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8001106:	fb04 f106 	mul.w	r1, r4, r6
 800110a:	4299      	cmp	r1, r3
 800110c:	d90a      	bls.n	8001124 <__udivmoddi4+0x64>
 800110e:	eb1c 0303 	adds.w	r3, ip, r3
 8001112:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8001116:	f080 8110 	bcs.w	800133a <__udivmoddi4+0x27a>
 800111a:	4299      	cmp	r1, r3
 800111c:	f240 810d 	bls.w	800133a <__udivmoddi4+0x27a>
 8001120:	3c02      	subs	r4, #2
 8001122:	4463      	add	r3, ip
 8001124:	1a59      	subs	r1, r3, r1
 8001126:	fbb1 f0f7 	udiv	r0, r1, r7
 800112a:	fb07 1110 	mls	r1, r7, r0, r1
 800112e:	fb00 f606 	mul.w	r6, r0, r6
 8001132:	fa1f f38e 	uxth.w	r3, lr
 8001136:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800113a:	429e      	cmp	r6, r3
 800113c:	d90a      	bls.n	8001154 <__udivmoddi4+0x94>
 800113e:	eb1c 0303 	adds.w	r3, ip, r3
 8001142:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8001146:	f080 80fa 	bcs.w	800133e <__udivmoddi4+0x27e>
 800114a:	429e      	cmp	r6, r3
 800114c:	f240 80f7 	bls.w	800133e <__udivmoddi4+0x27e>
 8001150:	4463      	add	r3, ip
 8001152:	3802      	subs	r0, #2
 8001154:	2100      	movs	r1, #0
 8001156:	1b9b      	subs	r3, r3, r6
 8001158:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800115c:	b11d      	cbz	r5, 8001166 <__udivmoddi4+0xa6>
 800115e:	40d3      	lsrs	r3, r2
 8001160:	2200      	movs	r2, #0
 8001162:	e9c5 3200 	strd	r3, r2, [r5]
 8001166:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800116a:	428b      	cmp	r3, r1
 800116c:	d905      	bls.n	800117a <__udivmoddi4+0xba>
 800116e:	b10d      	cbz	r5, 8001174 <__udivmoddi4+0xb4>
 8001170:	e9c5 0100 	strd	r0, r1, [r5]
 8001174:	2100      	movs	r1, #0
 8001176:	4608      	mov	r0, r1
 8001178:	e7f5      	b.n	8001166 <__udivmoddi4+0xa6>
 800117a:	fab3 f183 	clz	r1, r3
 800117e:	2900      	cmp	r1, #0
 8001180:	d146      	bne.n	8001210 <__udivmoddi4+0x150>
 8001182:	42a3      	cmp	r3, r4
 8001184:	d302      	bcc.n	800118c <__udivmoddi4+0xcc>
 8001186:	4290      	cmp	r0, r2
 8001188:	f0c0 80ee 	bcc.w	8001368 <__udivmoddi4+0x2a8>
 800118c:	1a86      	subs	r6, r0, r2
 800118e:	eb64 0303 	sbc.w	r3, r4, r3
 8001192:	2001      	movs	r0, #1
 8001194:	2d00      	cmp	r5, #0
 8001196:	d0e6      	beq.n	8001166 <__udivmoddi4+0xa6>
 8001198:	e9c5 6300 	strd	r6, r3, [r5]
 800119c:	e7e3      	b.n	8001166 <__udivmoddi4+0xa6>
 800119e:	2a00      	cmp	r2, #0
 80011a0:	f040 808f 	bne.w	80012c2 <__udivmoddi4+0x202>
 80011a4:	eba1 040c 	sub.w	r4, r1, ip
 80011a8:	2101      	movs	r1, #1
 80011aa:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80011ae:	fa1f f78c 	uxth.w	r7, ip
 80011b2:	fbb4 f6f8 	udiv	r6, r4, r8
 80011b6:	fb08 4416 	mls	r4, r8, r6, r4
 80011ba:	fb07 f006 	mul.w	r0, r7, r6
 80011be:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80011c2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80011c6:	4298      	cmp	r0, r3
 80011c8:	d908      	bls.n	80011dc <__udivmoddi4+0x11c>
 80011ca:	eb1c 0303 	adds.w	r3, ip, r3
 80011ce:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 80011d2:	d202      	bcs.n	80011da <__udivmoddi4+0x11a>
 80011d4:	4298      	cmp	r0, r3
 80011d6:	f200 80cb 	bhi.w	8001370 <__udivmoddi4+0x2b0>
 80011da:	4626      	mov	r6, r4
 80011dc:	1a1c      	subs	r4, r3, r0
 80011de:	fbb4 f0f8 	udiv	r0, r4, r8
 80011e2:	fb08 4410 	mls	r4, r8, r0, r4
 80011e6:	fb00 f707 	mul.w	r7, r0, r7
 80011ea:	fa1f f38e 	uxth.w	r3, lr
 80011ee:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80011f2:	429f      	cmp	r7, r3
 80011f4:	d908      	bls.n	8001208 <__udivmoddi4+0x148>
 80011f6:	eb1c 0303 	adds.w	r3, ip, r3
 80011fa:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 80011fe:	d202      	bcs.n	8001206 <__udivmoddi4+0x146>
 8001200:	429f      	cmp	r7, r3
 8001202:	f200 80ae 	bhi.w	8001362 <__udivmoddi4+0x2a2>
 8001206:	4620      	mov	r0, r4
 8001208:	1bdb      	subs	r3, r3, r7
 800120a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800120e:	e7a5      	b.n	800115c <__udivmoddi4+0x9c>
 8001210:	f1c1 0720 	rsb	r7, r1, #32
 8001214:	408b      	lsls	r3, r1
 8001216:	fa22 fc07 	lsr.w	ip, r2, r7
 800121a:	ea4c 0c03 	orr.w	ip, ip, r3
 800121e:	fa24 f607 	lsr.w	r6, r4, r7
 8001222:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8001226:	fbb6 f8f9 	udiv	r8, r6, r9
 800122a:	fa1f fe8c 	uxth.w	lr, ip
 800122e:	fb09 6618 	mls	r6, r9, r8, r6
 8001232:	fa20 f307 	lsr.w	r3, r0, r7
 8001236:	408c      	lsls	r4, r1
 8001238:	fa00 fa01 	lsl.w	sl, r0, r1
 800123c:	fb08 f00e 	mul.w	r0, r8, lr
 8001240:	431c      	orrs	r4, r3
 8001242:	0c23      	lsrs	r3, r4, #16
 8001244:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8001248:	4298      	cmp	r0, r3
 800124a:	fa02 f201 	lsl.w	r2, r2, r1
 800124e:	d90a      	bls.n	8001266 <__udivmoddi4+0x1a6>
 8001250:	eb1c 0303 	adds.w	r3, ip, r3
 8001254:	f108 36ff 	add.w	r6, r8, #4294967295	@ 0xffffffff
 8001258:	f080 8081 	bcs.w	800135e <__udivmoddi4+0x29e>
 800125c:	4298      	cmp	r0, r3
 800125e:	d97e      	bls.n	800135e <__udivmoddi4+0x29e>
 8001260:	f1a8 0802 	sub.w	r8, r8, #2
 8001264:	4463      	add	r3, ip
 8001266:	1a1e      	subs	r6, r3, r0
 8001268:	fbb6 f3f9 	udiv	r3, r6, r9
 800126c:	fb09 6613 	mls	r6, r9, r3, r6
 8001270:	fb03 fe0e 	mul.w	lr, r3, lr
 8001274:	b2a4      	uxth	r4, r4
 8001276:	ea44 4406 	orr.w	r4, r4, r6, lsl #16
 800127a:	45a6      	cmp	lr, r4
 800127c:	d908      	bls.n	8001290 <__udivmoddi4+0x1d0>
 800127e:	eb1c 0404 	adds.w	r4, ip, r4
 8001282:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8001286:	d266      	bcs.n	8001356 <__udivmoddi4+0x296>
 8001288:	45a6      	cmp	lr, r4
 800128a:	d964      	bls.n	8001356 <__udivmoddi4+0x296>
 800128c:	3b02      	subs	r3, #2
 800128e:	4464      	add	r4, ip
 8001290:	ea43 4008 	orr.w	r0, r3, r8, lsl #16
 8001294:	fba0 8302 	umull	r8, r3, r0, r2
 8001298:	eba4 040e 	sub.w	r4, r4, lr
 800129c:	429c      	cmp	r4, r3
 800129e:	46c6      	mov	lr, r8
 80012a0:	461e      	mov	r6, r3
 80012a2:	d350      	bcc.n	8001346 <__udivmoddi4+0x286>
 80012a4:	d04d      	beq.n	8001342 <__udivmoddi4+0x282>
 80012a6:	b155      	cbz	r5, 80012be <__udivmoddi4+0x1fe>
 80012a8:	ebba 030e 	subs.w	r3, sl, lr
 80012ac:	eb64 0406 	sbc.w	r4, r4, r6
 80012b0:	fa04 f707 	lsl.w	r7, r4, r7
 80012b4:	40cb      	lsrs	r3, r1
 80012b6:	431f      	orrs	r7, r3
 80012b8:	40cc      	lsrs	r4, r1
 80012ba:	e9c5 7400 	strd	r7, r4, [r5]
 80012be:	2100      	movs	r1, #0
 80012c0:	e751      	b.n	8001166 <__udivmoddi4+0xa6>
 80012c2:	fa0c fc02 	lsl.w	ip, ip, r2
 80012c6:	f1c2 0320 	rsb	r3, r2, #32
 80012ca:	40d9      	lsrs	r1, r3
 80012cc:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80012d0:	fa20 f303 	lsr.w	r3, r0, r3
 80012d4:	fa00 fe02 	lsl.w	lr, r0, r2
 80012d8:	fbb1 f0f8 	udiv	r0, r1, r8
 80012dc:	fb08 1110 	mls	r1, r8, r0, r1
 80012e0:	4094      	lsls	r4, r2
 80012e2:	431c      	orrs	r4, r3
 80012e4:	fa1f f78c 	uxth.w	r7, ip
 80012e8:	0c23      	lsrs	r3, r4, #16
 80012ea:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80012ee:	fb00 f107 	mul.w	r1, r0, r7
 80012f2:	4299      	cmp	r1, r3
 80012f4:	d908      	bls.n	8001308 <__udivmoddi4+0x248>
 80012f6:	eb1c 0303 	adds.w	r3, ip, r3
 80012fa:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 80012fe:	d22c      	bcs.n	800135a <__udivmoddi4+0x29a>
 8001300:	4299      	cmp	r1, r3
 8001302:	d92a      	bls.n	800135a <__udivmoddi4+0x29a>
 8001304:	3802      	subs	r0, #2
 8001306:	4463      	add	r3, ip
 8001308:	1a5b      	subs	r3, r3, r1
 800130a:	fbb3 f1f8 	udiv	r1, r3, r8
 800130e:	fb08 3311 	mls	r3, r8, r1, r3
 8001312:	b2a4      	uxth	r4, r4
 8001314:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8001318:	fb01 f307 	mul.w	r3, r1, r7
 800131c:	42a3      	cmp	r3, r4
 800131e:	d908      	bls.n	8001332 <__udivmoddi4+0x272>
 8001320:	eb1c 0404 	adds.w	r4, ip, r4
 8001324:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 8001328:	d213      	bcs.n	8001352 <__udivmoddi4+0x292>
 800132a:	42a3      	cmp	r3, r4
 800132c:	d911      	bls.n	8001352 <__udivmoddi4+0x292>
 800132e:	3902      	subs	r1, #2
 8001330:	4464      	add	r4, ip
 8001332:	1ae4      	subs	r4, r4, r3
 8001334:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8001338:	e73b      	b.n	80011b2 <__udivmoddi4+0xf2>
 800133a:	4604      	mov	r4, r0
 800133c:	e6f2      	b.n	8001124 <__udivmoddi4+0x64>
 800133e:	4608      	mov	r0, r1
 8001340:	e708      	b.n	8001154 <__udivmoddi4+0x94>
 8001342:	45c2      	cmp	sl, r8
 8001344:	d2af      	bcs.n	80012a6 <__udivmoddi4+0x1e6>
 8001346:	ebb8 0e02 	subs.w	lr, r8, r2
 800134a:	eb63 060c 	sbc.w	r6, r3, ip
 800134e:	3801      	subs	r0, #1
 8001350:	e7a9      	b.n	80012a6 <__udivmoddi4+0x1e6>
 8001352:	4631      	mov	r1, r6
 8001354:	e7ed      	b.n	8001332 <__udivmoddi4+0x272>
 8001356:	4603      	mov	r3, r0
 8001358:	e79a      	b.n	8001290 <__udivmoddi4+0x1d0>
 800135a:	4630      	mov	r0, r6
 800135c:	e7d4      	b.n	8001308 <__udivmoddi4+0x248>
 800135e:	46b0      	mov	r8, r6
 8001360:	e781      	b.n	8001266 <__udivmoddi4+0x1a6>
 8001362:	4463      	add	r3, ip
 8001364:	3802      	subs	r0, #2
 8001366:	e74f      	b.n	8001208 <__udivmoddi4+0x148>
 8001368:	4606      	mov	r6, r0
 800136a:	4623      	mov	r3, r4
 800136c:	4608      	mov	r0, r1
 800136e:	e711      	b.n	8001194 <__udivmoddi4+0xd4>
 8001370:	3e02      	subs	r6, #2
 8001372:	4463      	add	r3, ip
 8001374:	e732      	b.n	80011dc <__udivmoddi4+0x11c>
 8001376:	bf00      	nop

08001378 <__aeabi_idiv0>:
 8001378:	4770      	bx	lr
 800137a:	bf00      	nop

0800137c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800137c:	b084      	sub	sp, #16
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800137e:	4b0f      	ldr	r3, [pc, #60]	@ (80013bc <MX_GPIO_Init+0x40>)
 8001380:	699a      	ldr	r2, [r3, #24]
 8001382:	f042 0210 	orr.w	r2, r2, #16
 8001386:	619a      	str	r2, [r3, #24]
 8001388:	699a      	ldr	r2, [r3, #24]
 800138a:	f002 0210 	and.w	r2, r2, #16
 800138e:	9201      	str	r2, [sp, #4]
 8001390:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001392:	699a      	ldr	r2, [r3, #24]
 8001394:	f042 0220 	orr.w	r2, r2, #32
 8001398:	619a      	str	r2, [r3, #24]
 800139a:	699a      	ldr	r2, [r3, #24]
 800139c:	f002 0220 	and.w	r2, r2, #32
 80013a0:	9202      	str	r2, [sp, #8]
 80013a2:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80013a4:	699a      	ldr	r2, [r3, #24]
 80013a6:	f042 0204 	orr.w	r2, r2, #4
 80013aa:	619a      	str	r2, [r3, #24]
 80013ac:	699b      	ldr	r3, [r3, #24]
 80013ae:	f003 0304 	and.w	r3, r3, #4
 80013b2:	9303      	str	r3, [sp, #12]
 80013b4:	9b03      	ldr	r3, [sp, #12]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80013b6:	b004      	add	sp, #16
 80013b8:	4770      	bx	lr
 80013ba:	bf00      	nop
 80013bc:	40021000 	.word	0x40021000

080013c0 <parse_gcode>:

/* USER CODE BEGIN 4 */

Gcode parse_gcode(char* buff, int len){
 80013c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80013c4:	b085      	sub	sp, #20
 80013c6:	4605      	mov	r5, r0
    Gcode gcode;
    gcode.valid = 1;
 80013c8:	2301      	movs	r3, #1
 80013ca:	6003      	str	r3, [r0, #0]
    gcode.arg_len = 0;
 80013cc:	2300      	movs	r3, #0
 80013ce:	60c3      	str	r3, [r0, #12]
    char* index = buff;

    if(buff[0] >= 'A' && buff[0] <= 'Z'){
 80013d0:	7808      	ldrb	r0, [r1, #0]
 80013d2:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 80013d6:	b2db      	uxtb	r3, r3
 80013d8:	2b19      	cmp	r3, #25
 80013da:	d815      	bhi.n	8001408 <parse_gcode+0x48>
        gcode.letter = buff[0];
 80013dc:	7128      	strb	r0, [r5, #4]
        gcode.letter = buff[0] - ('a'-'A');
    }else{
        gcode.valid = 0;
        return gcode;
    }
    index++;
 80013de:	1c4c      	adds	r4, r1, #1

    gcode.number = 0;
 80013e0:	2300      	movs	r3, #0
 80013e2:	60ab      	str	r3, [r5, #8]
    while(index < buff+len){
 80013e4:	188e      	adds	r6, r1, r2
 80013e6:	42a6      	cmp	r6, r4
 80013e8:	d921      	bls.n	800142e <parse_gcode+0x6e>
        if(*index >= '0' && *index <= '9'){
 80013ea:	7823      	ldrb	r3, [r4, #0]
 80013ec:	f1a3 0030 	sub.w	r0, r3, #48	@ 0x30
 80013f0:	b2c0      	uxtb	r0, r0
 80013f2:	2809      	cmp	r0, #9
 80013f4:	d816      	bhi.n	8001424 <parse_gcode+0x64>
            gcode.number = gcode.number*10 + (*index - '0');
 80013f6:	68a8      	ldr	r0, [r5, #8]
 80013f8:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80013fc:	3b30      	subs	r3, #48	@ 0x30
 80013fe:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 8001402:	60ab      	str	r3, [r5, #8]
            break;
        }else{
            gcode.valid = 0;
            return gcode;
        }
        index++;
 8001404:	3401      	adds	r4, #1
 8001406:	e7ed      	b.n	80013e4 <parse_gcode+0x24>
    }else if(buff[0] >= 'a' && buff[0] <= 'z'){
 8001408:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800140c:	b2db      	uxtb	r3, r3
 800140e:	2b19      	cmp	r3, #25
 8001410:	d802      	bhi.n	8001418 <parse_gcode+0x58>
        gcode.letter = buff[0] - ('a'-'A');
 8001412:	3820      	subs	r0, #32
 8001414:	7128      	strb	r0, [r5, #4]
 8001416:	e7e2      	b.n	80013de <parse_gcode+0x1e>
        gcode.valid = 0;
 8001418:	2300      	movs	r3, #0
 800141a:	602b      	str	r3, [r5, #0]
        }
        index++;
    }

    return gcode;
}
 800141c:	4628      	mov	r0, r5
 800141e:	b005      	add	sp, #20
 8001420:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        }else if (*index == ' ' || *index == '\n'){
 8001424:	2b20      	cmp	r3, #32
 8001426:	d001      	beq.n	800142c <parse_gcode+0x6c>
 8001428:	2b0a      	cmp	r3, #10
 800142a:	d107      	bne.n	800143c <parse_gcode+0x7c>
            index++;
 800142c:	3401      	adds	r4, #1
                inside_arg = 0;
 800142e:	f04f 0b00 	mov.w	fp, #0
 8001432:	f04f 38ff 	mov.w	r8, #4294967295	@ 0xffffffff
 8001436:	46b1      	mov	r9, r6
 8001438:	465e      	mov	r6, fp
 800143a:	e05b      	b.n	80014f4 <parse_gcode+0x134>
            gcode.valid = 0;
 800143c:	2300      	movs	r3, #0
 800143e:	602b      	str	r3, [r5, #0]
            return gcode;
 8001440:	e7ec      	b.n	800141c <parse_gcode+0x5c>
                    gcode.arguments[arg_index].value = gcode.arguments[arg_index].value + ((float)(*index - '0') * pow(0.1,decimals));
 8001442:	f108 0a02 	add.w	sl, r8, #2
 8001446:	eb05 0aca 	add.w	sl, r5, sl, lsl #3
 800144a:	f8da 0004 	ldr.w	r0, [sl, #4]
 800144e:	f7ff f89f 	bl	8000590 <__aeabi_f2d>
 8001452:	e9cd 0100 	strd	r0, r1, [sp]
 8001456:	f1a7 0030 	sub.w	r0, r7, #48	@ 0x30
 800145a:	f7ff fcf3 	bl	8000e44 <__aeabi_i2f>
 800145e:	f7ff f897 	bl	8000590 <__aeabi_f2d>
 8001462:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8001466:	4658      	mov	r0, fp
 8001468:	f7ff f880 	bl	800056c <__aeabi_i2d>
 800146c:	4602      	mov	r2, r0
 800146e:	460b      	mov	r3, r1
 8001470:	a13f      	add	r1, pc, #252	@ (adr r1, 8001570 <parse_gcode+0x1b0>)
 8001472:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001476:	f004 fec1 	bl	80061fc <pow>
 800147a:	4602      	mov	r2, r0
 800147c:	460b      	mov	r3, r1
 800147e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8001482:	f7ff f8dd 	bl	8000640 <__aeabi_dmul>
 8001486:	4602      	mov	r2, r0
 8001488:	460b      	mov	r3, r1
 800148a:	e9dd 0100 	ldrd	r0, r1, [sp]
 800148e:	f7fe ff21 	bl	80002d4 <__adddf3>
 8001492:	f7ff fbcd 	bl	8000c30 <__aeabi_d2f>
 8001496:	f8ca 0004 	str.w	r0, [sl, #4]
                    decimals++;
 800149a:	f10b 0b01 	add.w	fp, fp, #1
 800149e:	e028      	b.n	80014f2 <parse_gcode+0x132>
            }else if(*index == '.'){
 80014a0:	2f2e      	cmp	r7, #46	@ 0x2e
 80014a2:	d005      	beq.n	80014b0 <parse_gcode+0xf0>
            }else if (*index == ' '){
 80014a4:	2f20      	cmp	r7, #32
 80014a6:	d10b      	bne.n	80014c0 <parse_gcode+0x100>
                decimals = 0;
 80014a8:	f04f 0b00 	mov.w	fp, #0
                inside_arg = 0;
 80014ac:	465e      	mov	r6, fp
 80014ae:	e020      	b.n	80014f2 <parse_gcode+0x132>
                if(decimals > 0){
 80014b0:	f1bb 0f00 	cmp.w	fp, #0
 80014b4:	dc01      	bgt.n	80014ba <parse_gcode+0xfa>
                decimals = 1;
 80014b6:	46b3      	mov	fp, r6
 80014b8:	e01b      	b.n	80014f2 <parse_gcode+0x132>
                    gcode.valid = 0;
 80014ba:	2300      	movs	r3, #0
 80014bc:	602b      	str	r3, [r5, #0]
                    return gcode;
 80014be:	e7ad      	b.n	800141c <parse_gcode+0x5c>
            }else if(*index == '\n'){
 80014c0:	2f0a      	cmp	r7, #10
 80014c2:	d0ab      	beq.n	800141c <parse_gcode+0x5c>
                gcode.valid = 0;
 80014c4:	2300      	movs	r3, #0
 80014c6:	602b      	str	r3, [r5, #0]
                return gcode;
 80014c8:	e7a8      	b.n	800141c <parse_gcode+0x5c>
            if(*index >= 'A' && *index <= 'Z'){
 80014ca:	7823      	ldrb	r3, [r4, #0]
 80014cc:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 80014d0:	b2d2      	uxtb	r2, r2
 80014d2:	2a19      	cmp	r2, #25
 80014d4:	d82f      	bhi.n	8001536 <parse_gcode+0x176>
                gcode.arguments[arg_index].name = *index;
 80014d6:	f108 0203 	add.w	r2, r8, #3
 80014da:	f805 3032 	strb.w	r3, [r5, r2, lsl #3]
                gcode.arguments[arg_index].value = 0;
 80014de:	eb05 02c2 	add.w	r2, r5, r2, lsl #3
 80014e2:	2300      	movs	r3, #0
 80014e4:	6053      	str	r3, [r2, #4]
                gcode.arg_len = arg_index+1;
 80014e6:	f108 0302 	add.w	r3, r8, #2
 80014ea:	60eb      	str	r3, [r5, #12]
                arg_index++;
 80014ec:	f108 0801 	add.w	r8, r8, #1
                inside_arg = 1;
 80014f0:	2601      	movs	r6, #1
        index++;
 80014f2:	3401      	adds	r4, #1
    while(index < buff+len){
 80014f4:	45a1      	cmp	r9, r4
 80014f6:	d991      	bls.n	800141c <parse_gcode+0x5c>
        if(inside_arg){
 80014f8:	2e00      	cmp	r6, #0
 80014fa:	d0e6      	beq.n	80014ca <parse_gcode+0x10a>
            if(*index >= '0' && *index <= '9'){
 80014fc:	7827      	ldrb	r7, [r4, #0]
 80014fe:	f1a7 0330 	sub.w	r3, r7, #48	@ 0x30
 8001502:	b2db      	uxtb	r3, r3
 8001504:	2b09      	cmp	r3, #9
 8001506:	d8cb      	bhi.n	80014a0 <parse_gcode+0xe0>
                if(decimals == 0){
 8001508:	f1bb 0f00 	cmp.w	fp, #0
 800150c:	d199      	bne.n	8001442 <parse_gcode+0x82>
                    gcode.arguments[arg_index].value = gcode.arguments[arg_index].value*10 + (*index - '0');
 800150e:	f108 0a02 	add.w	sl, r8, #2
 8001512:	eb05 0aca 	add.w	sl, r5, sl, lsl #3
 8001516:	4918      	ldr	r1, [pc, #96]	@ (8001578 <parse_gcode+0x1b8>)
 8001518:	f8da 0004 	ldr.w	r0, [sl, #4]
 800151c:	f7fe fe20 	bl	8000160 <__aeabi_fmul>
 8001520:	9000      	str	r0, [sp, #0]
 8001522:	f1a7 0030 	sub.w	r0, r7, #48	@ 0x30
 8001526:	f7ff fc8d 	bl	8000e44 <__aeabi_i2f>
 800152a:	9900      	ldr	r1, [sp, #0]
 800152c:	f7ff fbd6 	bl	8000cdc <__addsf3>
 8001530:	f8ca 0004 	str.w	r0, [sl, #4]
 8001534:	e7dd      	b.n	80014f2 <parse_gcode+0x132>
            }else if(*index >= 'a' && *index <= 'z'){
 8001536:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 800153a:	b2d2      	uxtb	r2, r2
 800153c:	2a19      	cmp	r2, #25
 800153e:	d80c      	bhi.n	800155a <parse_gcode+0x19a>
                arg_index++;
 8001540:	f108 0801 	add.w	r8, r8, #1
                gcode.arguments[arg_index].name = *index - ('a' - 'A');
 8001544:	3b20      	subs	r3, #32
 8001546:	f108 0202 	add.w	r2, r8, #2
 800154a:	f805 3032 	strb.w	r3, [r5, r2, lsl #3]
                gcode.arguments[arg_index].value = 0;
 800154e:	eb05 02c2 	add.w	r2, r5, r2, lsl #3
 8001552:	2300      	movs	r3, #0
 8001554:	6053      	str	r3, [r2, #4]
                inside_arg = 1;
 8001556:	2601      	movs	r6, #1
 8001558:	e7cb      	b.n	80014f2 <parse_gcode+0x132>
            }else if (*index == ' '){
 800155a:	2b20      	cmp	r3, #32
 800155c:	d0c9      	beq.n	80014f2 <parse_gcode+0x132>
            }else if (*index == '\n'){
 800155e:	2b0a      	cmp	r3, #10
 8001560:	f43f af5c 	beq.w	800141c <parse_gcode+0x5c>
                gcode.valid = 0;
 8001564:	2300      	movs	r3, #0
 8001566:	602b      	str	r3, [r5, #0]
                return gcode;
 8001568:	e758      	b.n	800141c <parse_gcode+0x5c>
 800156a:	bf00      	nop
 800156c:	f3af 8000 	nop.w
 8001570:	9999999a 	.word	0x9999999a
 8001574:	3fb99999 	.word	0x3fb99999
 8001578:	41200000 	.word	0x41200000

0800157c <get_gcode_arg>:

int get_gcode_arg(Gcode* gcode, char arg_name, float* out){
	int i = 0;
 800157c:	2300      	movs	r3, #0
	while(i<gcode->arg_len){
 800157e:	e000      	b.n	8001582 <get_gcode_arg+0x6>
		if(gcode->arguments[i].name == arg_name){
			*out = gcode->arguments[i].value;
			return 1;
		}
		i++;
 8001580:	3301      	adds	r3, #1
	while(i<gcode->arg_len){
 8001582:	f8d0 c00c 	ldr.w	ip, [r0, #12]
 8001586:	459c      	cmp	ip, r3
 8001588:	dd0c      	ble.n	80015a4 <get_gcode_arg+0x28>
		if(gcode->arguments[i].name == arg_name){
 800158a:	f103 0c02 	add.w	ip, r3, #2
 800158e:	f810 c03c 	ldrb.w	ip, [r0, ip, lsl #3]
 8001592:	458c      	cmp	ip, r1
 8001594:	d1f4      	bne.n	8001580 <get_gcode_arg+0x4>
			*out = gcode->arguments[i].value;
 8001596:	3302      	adds	r3, #2
 8001598:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
 800159c:	6843      	ldr	r3, [r0, #4]
 800159e:	6013      	str	r3, [r2, #0]
			return 1;
 80015a0:	2001      	movs	r0, #1
 80015a2:	4770      	bx	lr
	}
	return 0;
 80015a4:	2000      	movs	r0, #0
}
 80015a6:	4770      	bx	lr

080015a8 <USB_CDC_RxHandler>:

void USB_CDC_RxHandler(uint8_t* Buf, uint32_t Len)
{
 80015a8:	b530      	push	{r4, r5, lr}
 80015aa:	f2ad 5d1c 	subw	sp, sp, #1308	@ 0x51c
 80015ae:	4604      	mov	r4, r0
 80015b0:	460d      	mov	r5, r1
	Gcode gcode = parse_gcode((char*)Buf, Len);
 80015b2:	460a      	mov	r2, r1
 80015b4:	4601      	mov	r1, r0
 80015b6:	f50d 6081 	add.w	r0, sp, #1032	@ 0x408
 80015ba:	f7ff ff01 	bl	80013c0 <parse_gcode>

	char TxBuffer[1024];
	if(Buf[0] == 'A'){
 80015be:	7823      	ldrb	r3, [r4, #0]
 80015c0:	2b41      	cmp	r3, #65	@ 0x41
 80015c2:	d015      	beq.n	80015f0 <USB_CDC_RxHandler+0x48>
		float value = atof((char*)(Buf+1));
		sprintf(TxBuffer, "Received data starting with A and value %f\n", value);
	}else if (Buf[0] == 'B'){
 80015c4:	2b42      	cmp	r3, #66	@ 0x42
 80015c6:	d021      	beq.n	800160c <USB_CDC_RxHandler+0x64>
		int value = atoll((char*)(Buf+1));
		sprintf(TxBuffer, "Received data starting with B and value %i\n", value);
	}else{
		sprintf(TxBuffer, "Received data not starting with A or B '%s' with len %i\n", Buf, (int)Len);
 80015c8:	462b      	mov	r3, r5
 80015ca:	4622      	mov	r2, r4
 80015cc:	4936      	ldr	r1, [pc, #216]	@ (80016a8 <USB_CDC_RxHandler+0x100>)
 80015ce:	a802      	add	r0, sp, #8
 80015d0:	f007 f84c 	bl	800866c <siprintf>
	}

	if(gcode.letter == 'P'){
 80015d4:	f89d 340c 	ldrb.w	r3, [sp, #1036]	@ 0x40c
 80015d8:	2b50      	cmp	r3, #80	@ 0x50
 80015da:	d020      	beq.n	800161e <USB_CDC_RxHandler+0x76>
				}
				break;
		}
	}

	uint32_t l = strlen(TxBuffer);
 80015dc:	a802      	add	r0, sp, #8
 80015de:	f7fe fdb7 	bl	8000150 <strlen>
    CDC_Transmit_FS((uint8_t*)TxBuffer, l);
 80015e2:	b281      	uxth	r1, r0
 80015e4:	a802      	add	r0, sp, #8
 80015e6:	f004 fc39 	bl	8005e5c <CDC_Transmit_FS>
}
 80015ea:	f20d 5d1c 	addw	sp, sp, #1308	@ 0x51c
 80015ee:	bd30      	pop	{r4, r5, pc}
		float value = atof((char*)(Buf+1));
 80015f0:	1c60      	adds	r0, r4, #1
 80015f2:	f005 fd11 	bl	8007018 <atof>
 80015f6:	f7ff fb1b 	bl	8000c30 <__aeabi_d2f>
		sprintf(TxBuffer, "Received data starting with A and value %f\n", value);
 80015fa:	f7fe ffc9 	bl	8000590 <__aeabi_f2d>
 80015fe:	4602      	mov	r2, r0
 8001600:	460b      	mov	r3, r1
 8001602:	492a      	ldr	r1, [pc, #168]	@ (80016ac <USB_CDC_RxHandler+0x104>)
 8001604:	a802      	add	r0, sp, #8
 8001606:	f007 f831 	bl	800866c <siprintf>
 800160a:	e7e3      	b.n	80015d4 <USB_CDC_RxHandler+0x2c>
		int value = atoll((char*)(Buf+1));
 800160c:	1c60      	adds	r0, r4, #1
 800160e:	f006 fb0b 	bl	8007c28 <atoll>
 8001612:	4602      	mov	r2, r0
		sprintf(TxBuffer, "Received data starting with B and value %i\n", value);
 8001614:	4926      	ldr	r1, [pc, #152]	@ (80016b0 <USB_CDC_RxHandler+0x108>)
 8001616:	a802      	add	r0, sp, #8
 8001618:	f007 f828 	bl	800866c <siprintf>
 800161c:	e7da      	b.n	80015d4 <USB_CDC_RxHandler+0x2c>
		switch(gcode.number){
 800161e:	f8dd 3410 	ldr.w	r3, [sp, #1040]	@ 0x410
 8001622:	2b01      	cmp	r3, #1
 8001624:	d013      	beq.n	800164e <USB_CDC_RxHandler+0xa6>
 8001626:	2b02      	cmp	r3, #2
 8001628:	d1d8      	bne.n	80015dc <USB_CDC_RxHandler+0x34>
				if(get_gcode_arg(&gcode,'V', &target_voltage)){
 800162a:	4a22      	ldr	r2, [pc, #136]	@ (80016b4 <USB_CDC_RxHandler+0x10c>)
 800162c:	2156      	movs	r1, #86	@ 0x56
 800162e:	f50d 6081 	add.w	r0, sp, #1032	@ 0x408
 8001632:	f7ff ffa3 	bl	800157c <get_gcode_arg>
 8001636:	b358      	cbz	r0, 8001690 <USB_CDC_RxHandler+0xe8>
					sprintf(TxBuffer, "Called P1 - set voltage to %4.2f\n", target_voltage);
 8001638:	4b1e      	ldr	r3, [pc, #120]	@ (80016b4 <USB_CDC_RxHandler+0x10c>)
 800163a:	6818      	ldr	r0, [r3, #0]
 800163c:	f7fe ffa8 	bl	8000590 <__aeabi_f2d>
 8001640:	4602      	mov	r2, r0
 8001642:	460b      	mov	r3, r1
 8001644:	491c      	ldr	r1, [pc, #112]	@ (80016b8 <USB_CDC_RxHandler+0x110>)
 8001646:	a802      	add	r0, sp, #8
 8001648:	f007 f810 	bl	800866c <siprintf>
 800164c:	e7c6      	b.n	80015dc <USB_CDC_RxHandler+0x34>
				float val = 0;
 800164e:	2300      	movs	r3, #0
 8001650:	9301      	str	r3, [sp, #4]
				if(get_gcode_arg(&gcode,'A', &val)){
 8001652:	aa01      	add	r2, sp, #4
 8001654:	2141      	movs	r1, #65	@ 0x41
 8001656:	f50d 6081 	add.w	r0, sp, #1032	@ 0x408
 800165a:	f7ff ff8f 	bl	800157c <get_gcode_arg>
 800165e:	b170      	cbz	r0, 800167e <USB_CDC_RxHandler+0xd6>
					TIM1->CCR1 = 1400-(int)val;
 8001660:	9801      	ldr	r0, [sp, #4]
 8001662:	f7ff fcb9 	bl	8000fd8 <__aeabi_f2iz>
 8001666:	f5c0 60af 	rsb	r0, r0, #1400	@ 0x578
 800166a:	4b14      	ldr	r3, [pc, #80]	@ (80016bc <USB_CDC_RxHandler+0x114>)
 800166c:	6358      	str	r0, [r3, #52]	@ 0x34
					sprintf(TxBuffer, "Called P1 - set pwm to %ld\n", 1400-TIM1->CCR1);
 800166e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001670:	f5c2 62af 	rsb	r2, r2, #1400	@ 0x578
 8001674:	4912      	ldr	r1, [pc, #72]	@ (80016c0 <USB_CDC_RxHandler+0x118>)
 8001676:	a802      	add	r0, sp, #8
 8001678:	f006 fff8 	bl	800866c <siprintf>
 800167c:	e7ae      	b.n	80015dc <USB_CDC_RxHandler+0x34>
					sprintf(TxBuffer, "Called P1 - actual pwm: %ld\n",1400-TIM1->CCR1);
 800167e:	4b0f      	ldr	r3, [pc, #60]	@ (80016bc <USB_CDC_RxHandler+0x114>)
 8001680:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001682:	f5c2 62af 	rsb	r2, r2, #1400	@ 0x578
 8001686:	490f      	ldr	r1, [pc, #60]	@ (80016c4 <USB_CDC_RxHandler+0x11c>)
 8001688:	a802      	add	r0, sp, #8
 800168a:	f006 ffef 	bl	800866c <siprintf>
 800168e:	e7a5      	b.n	80015dc <USB_CDC_RxHandler+0x34>
					sprintf(TxBuffer, "Called P1 - actual voltage: %4.2f\n",target_voltage);
 8001690:	4b08      	ldr	r3, [pc, #32]	@ (80016b4 <USB_CDC_RxHandler+0x10c>)
 8001692:	6818      	ldr	r0, [r3, #0]
 8001694:	f7fe ff7c 	bl	8000590 <__aeabi_f2d>
 8001698:	4602      	mov	r2, r0
 800169a:	460b      	mov	r3, r1
 800169c:	490a      	ldr	r1, [pc, #40]	@ (80016c8 <USB_CDC_RxHandler+0x120>)
 800169e:	a802      	add	r0, sp, #8
 80016a0:	f006 ffe4 	bl	800866c <siprintf>
 80016a4:	e79a      	b.n	80015dc <USB_CDC_RxHandler+0x34>
 80016a6:	bf00      	nop
 80016a8:	0800b368 	.word	0x0800b368
 80016ac:	0800b310 	.word	0x0800b310
 80016b0:	0800b33c 	.word	0x0800b33c
 80016b4:	2000037c 	.word	0x2000037c
 80016b8:	0800b3e0 	.word	0x0800b3e0
 80016bc:	40012c00 	.word	0x40012c00
 80016c0:	0800b3a4 	.word	0x0800b3a4
 80016c4:	0800b3c0 	.word	0x0800b3c0
 80016c8:	0800b404 	.word	0x0800b404
 80016cc:	00000000 	.word	0x00000000

080016d0 <HAL_ADC_ConvCpltCallback>:

//Sample rate 55_555kHz
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80016d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80016d4:	f5ad 6d87 	sub.w	sp, sp, #1080	@ 0x438
    // Read & Update The ADC Result
	uint32_t raw_adc = HAL_ADC_GetValue(&hadc1);
 80016d8:	485f      	ldr	r0, [pc, #380]	@ (8001858 <HAL_ADC_ConvCpltCallback+0x188>)
 80016da:	f000 fb3f 	bl	8001d5c <HAL_ADC_GetValue>

	float voltage = raw_adc*ADC_TO_VOLTAGE;
 80016de:	f7fe ff35 	bl	800054c <__aeabi_ui2d>
 80016e2:	a357      	add	r3, pc, #348	@ (adr r3, 8001840 <HAL_ADC_ConvCpltCallback+0x170>)
 80016e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016e8:	f7fe ffaa 	bl	8000640 <__aeabi_dmul>
 80016ec:	f7ff faa0 	bl	8000c30 <__aeabi_d2f>
 80016f0:	4605      	mov	r5, r0

	float err = target_voltage-voltage;
 80016f2:	4601      	mov	r1, r0
 80016f4:	4b59      	ldr	r3, [pc, #356]	@ (800185c <HAL_ADC_ConvCpltCallback+0x18c>)
 80016f6:	6818      	ldr	r0, [r3, #0]
 80016f8:	f7ff faee 	bl	8000cd8 <__aeabi_fsub>
 80016fc:	4606      	mov	r6, r0
	float delta_err = err-pid_last_err;
 80016fe:	4f58      	ldr	r7, [pc, #352]	@ (8001860 <HAL_ADC_ConvCpltCallback+0x190>)
 8001700:	6839      	ldr	r1, [r7, #0]
 8001702:	f7ff fae9 	bl	8000cd8 <__aeabi_fsub>
 8001706:	4604      	mov	r4, r0
	pid_last_err = err;
 8001708:	603e      	str	r6, [r7, #0]
	pid_integrator += err;
 800170a:	4f56      	ldr	r7, [pc, #344]	@ (8001864 <HAL_ADC_ConvCpltCallback+0x194>)
 800170c:	6839      	ldr	r1, [r7, #0]
 800170e:	4630      	mov	r0, r6
 8001710:	f7ff fae4 	bl	8000cdc <__addsf3>
 8001714:	6038      	str	r0, [r7, #0]
	if(pid_integrator > 1666666.0) pid_integrator = 1666666.0;
 8001716:	4954      	ldr	r1, [pc, #336]	@ (8001868 <HAL_ADC_ConvCpltCallback+0x198>)
 8001718:	f7ff fc54 	bl	8000fc4 <__aeabi_fcmpgt>
 800171c:	b108      	cbz	r0, 8001722 <HAL_ADC_ConvCpltCallback+0x52>
 800171e:	4a52      	ldr	r2, [pc, #328]	@ (8001868 <HAL_ADC_ConvCpltCallback+0x198>)
 8001720:	603a      	str	r2, [r7, #0]
	if(pid_integrator < -1666666.0) pid_integrator = 1666666.0;
 8001722:	4952      	ldr	r1, [pc, #328]	@ (800186c <HAL_ADC_ConvCpltCallback+0x19c>)
 8001724:	4b4f      	ldr	r3, [pc, #316]	@ (8001864 <HAL_ADC_ConvCpltCallback+0x194>)
 8001726:	6818      	ldr	r0, [r3, #0]
 8001728:	f7ff fc2e 	bl	8000f88 <__aeabi_fcmplt>
 800172c:	b110      	cbz	r0, 8001734 <HAL_ADC_ConvCpltCallback+0x64>
 800172e:	4b4d      	ldr	r3, [pc, #308]	@ (8001864 <HAL_ADC_ConvCpltCallback+0x194>)
 8001730:	4a4d      	ldr	r2, [pc, #308]	@ (8001868 <HAL_ADC_ConvCpltCallback+0x198>)
 8001732:	601a      	str	r2, [r3, #0]

	float pid_output = (err*PID_P) + (pid_integrator*PID_I) + (delta_err*PID_D);
 8001734:	4630      	mov	r0, r6
 8001736:	f7fe ff2b 	bl	8000590 <__aeabi_f2d>
 800173a:	4602      	mov	r2, r0
 800173c:	460b      	mov	r3, r1
 800173e:	e9cd 230a 	strd	r2, r3, [sp, #40]	@ 0x28
 8001742:	2200      	movs	r2, #0
 8001744:	2300      	movs	r3, #0
 8001746:	f7fe ff7b 	bl	8000640 <__aeabi_dmul>
 800174a:	4680      	mov	r8, r0
 800174c:	4689      	mov	r9, r1
 800174e:	4b45      	ldr	r3, [pc, #276]	@ (8001864 <HAL_ADC_ConvCpltCallback+0x194>)
 8001750:	6818      	ldr	r0, [r3, #0]
 8001752:	f7fe ff1d 	bl	8000590 <__aeabi_f2d>
 8001756:	4606      	mov	r6, r0
 8001758:	460f      	mov	r7, r1
 800175a:	a33b      	add	r3, pc, #236	@ (adr r3, 8001848 <HAL_ADC_ConvCpltCallback+0x178>)
 800175c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001760:	f7fe ff6e 	bl	8000640 <__aeabi_dmul>
 8001764:	4602      	mov	r2, r0
 8001766:	460b      	mov	r3, r1
 8001768:	4640      	mov	r0, r8
 800176a:	4649      	mov	r1, r9
 800176c:	f7fe fdb2 	bl	80002d4 <__adddf3>
 8001770:	4680      	mov	r8, r0
 8001772:	4689      	mov	r9, r1
 8001774:	4620      	mov	r0, r4
 8001776:	f7fe ff0b 	bl	8000590 <__aeabi_f2d>
 800177a:	4602      	mov	r2, r0
 800177c:	460b      	mov	r3, r1
 800177e:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8001782:	a333      	add	r3, pc, #204	@ (adr r3, 8001850 <HAL_ADC_ConvCpltCallback+0x180>)
 8001784:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001788:	f7fe ff5a 	bl	8000640 <__aeabi_dmul>
 800178c:	4602      	mov	r2, r0
 800178e:	460b      	mov	r3, r1
 8001790:	4640      	mov	r0, r8
 8001792:	4649      	mov	r1, r9
 8001794:	f7fe fd9e 	bl	80002d4 <__adddf3>
 8001798:	f7ff fa4a 	bl	8000c30 <__aeabi_d2f>
 800179c:	4604      	mov	r4, r0
	if(pid_output > 1.0) pid_output = 1.0;
 800179e:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 80017a2:	f7ff fc0f 	bl	8000fc4 <__aeabi_fcmpgt>
 80017a6:	b108      	cbz	r0, 80017ac <HAL_ADC_ConvCpltCallback+0xdc>
 80017a8:	f04f 547e 	mov.w	r4, #1065353216	@ 0x3f800000
	if(pid_output < 0.0) pid_output = 0.0;
 80017ac:	2100      	movs	r1, #0
 80017ae:	4620      	mov	r0, r4
 80017b0:	f7ff fbea 	bl	8000f88 <__aeabi_fcmplt>
 80017b4:	b9b8      	cbnz	r0, 80017e6 <HAL_ADC_ConvCpltCallback+0x116>

	TIM1->CCR1 = 1400-(int)(pid_output*MAX_PWM);
 80017b6:	492e      	ldr	r1, [pc, #184]	@ (8001870 <HAL_ADC_ConvCpltCallback+0x1a0>)
 80017b8:	4620      	mov	r0, r4
 80017ba:	f7fe fcd1 	bl	8000160 <__aeabi_fmul>
 80017be:	f7ff fc0b 	bl	8000fd8 <__aeabi_f2iz>
 80017c2:	f5c0 60af 	rsb	r0, r0, #1400	@ 0x578
 80017c6:	4b2b      	ldr	r3, [pc, #172]	@ (8001874 <HAL_ADC_ConvCpltCallback+0x1a4>)
 80017c8:	6358      	str	r0, [r3, #52]	@ 0x34

	if(report_decimator_counter > 15000){
 80017ca:	4b2b      	ldr	r3, [pc, #172]	@ (8001878 <HAL_ADC_ConvCpltCallback+0x1a8>)
 80017cc:	681a      	ldr	r2, [r3, #0]
 80017ce:	f643 2398 	movw	r3, #15000	@ 0x3a98
 80017d2:	429a      	cmp	r2, r3
 80017d4:	dc09      	bgt.n	80017ea <HAL_ADC_ConvCpltCallback+0x11a>
		char TxBuffer[1024];
		sprintf(TxBuffer, "Voltage: %04.2fV, PWM: %04ld, PID_O: %01.4f, err: %f, d_err: %f, int: %f\n", voltage, 1400-TIM1->CCR1, pid_output, err, delta_err, pid_integrator);
		uint32_t l = strlen(TxBuffer);
		CDC_Transmit_FS((uint8_t*)TxBuffer, l);
	}
	report_decimator_counter++;
 80017d6:	4a28      	ldr	r2, [pc, #160]	@ (8001878 <HAL_ADC_ConvCpltCallback+0x1a8>)
 80017d8:	6813      	ldr	r3, [r2, #0]
 80017da:	3301      	adds	r3, #1
 80017dc:	6013      	str	r3, [r2, #0]
}
 80017de:	f50d 6d87 	add.w	sp, sp, #1080	@ 0x438
 80017e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	if(pid_output < 0.0) pid_output = 0.0;
 80017e6:	2400      	movs	r4, #0
 80017e8:	e7e5      	b.n	80017b6 <HAL_ADC_ConvCpltCallback+0xe6>
		report_decimator_counter = 0;
 80017ea:	4b23      	ldr	r3, [pc, #140]	@ (8001878 <HAL_ADC_ConvCpltCallback+0x1a8>)
 80017ec:	2200      	movs	r2, #0
 80017ee:	601a      	str	r2, [r3, #0]
		sprintf(TxBuffer, "Voltage: %04.2fV, PWM: %04ld, PID_O: %01.4f, err: %f, d_err: %f, int: %f\n", voltage, 1400-TIM1->CCR1, pid_output, err, delta_err, pid_integrator);
 80017f0:	4b20      	ldr	r3, [pc, #128]	@ (8001874 <HAL_ADC_ConvCpltCallback+0x1a4>)
 80017f2:	f8d3 a034 	ldr.w	sl, [r3, #52]	@ 0x34
 80017f6:	4628      	mov	r0, r5
 80017f8:	f7fe feca 	bl	8000590 <__aeabi_f2d>
 80017fc:	4680      	mov	r8, r0
 80017fe:	4689      	mov	r9, r1
 8001800:	e9cd 6708 	strd	r6, r7, [sp, #32]
 8001804:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8001808:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800180c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	@ 0x28
 8001810:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8001814:	4620      	mov	r0, r4
 8001816:	f7fe febb 	bl	8000590 <__aeabi_f2d>
 800181a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800181e:	f5ca 63af 	rsb	r3, sl, #1400	@ 0x578
 8001822:	9300      	str	r3, [sp, #0]
 8001824:	4642      	mov	r2, r8
 8001826:	464b      	mov	r3, r9
 8001828:	4914      	ldr	r1, [pc, #80]	@ (800187c <HAL_ADC_ConvCpltCallback+0x1ac>)
 800182a:	a80e      	add	r0, sp, #56	@ 0x38
 800182c:	f006 ff1e 	bl	800866c <siprintf>
		uint32_t l = strlen(TxBuffer);
 8001830:	a80e      	add	r0, sp, #56	@ 0x38
 8001832:	f7fe fc8d 	bl	8000150 <strlen>
		CDC_Transmit_FS((uint8_t*)TxBuffer, l);
 8001836:	b281      	uxth	r1, r0
 8001838:	a80e      	add	r0, sp, #56	@ 0x38
 800183a:	f004 fb0f 	bl	8005e5c <CDC_Transmit_FS>
 800183e:	e7ca      	b.n	80017d6 <HAL_ADC_ConvCpltCallback+0x106>
 8001840:	2e8a630d 	.word	0x2e8a630d
 8001844:	3fe808ba 	.word	0x3fe808ba
 8001848:	f40d8376 	.word	0xf40d8376
 800184c:	3ea421f5 	.word	0x3ea421f5
 8001850:	66666666 	.word	0x66666666
 8001854:	40815c66 	.word	0x40815c66
 8001858:	200003cc 	.word	0x200003cc
 800185c:	2000037c 	.word	0x2000037c
 8001860:	20000378 	.word	0x20000378
 8001864:	20000374 	.word	0x20000374
 8001868:	49cb7350 	.word	0x49cb7350
 800186c:	c9cb7350 	.word	0xc9cb7350
 8001870:	44960000 	.word	0x44960000
 8001874:	40012c00 	.word	0x40012c00
 8001878:	20000380 	.word	0x20000380
 800187c:	0800b428 	.word	0x0800b428

08001880 <Error_Handler>:
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001880:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001882:	e7fe      	b.n	8001882 <Error_Handler+0x2>

08001884 <MX_TIM1_Init>:
{
 8001884:	b510      	push	{r4, lr}
 8001886:	b092      	sub	sp, #72	@ 0x48
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001888:	2400      	movs	r4, #0
 800188a:	9410      	str	r4, [sp, #64]	@ 0x40
 800188c:	9411      	str	r4, [sp, #68]	@ 0x44
  TIM_OC_InitTypeDef sConfigOC = {0};
 800188e:	9409      	str	r4, [sp, #36]	@ 0x24
 8001890:	940a      	str	r4, [sp, #40]	@ 0x28
 8001892:	940b      	str	r4, [sp, #44]	@ 0x2c
 8001894:	940c      	str	r4, [sp, #48]	@ 0x30
 8001896:	940d      	str	r4, [sp, #52]	@ 0x34
 8001898:	940e      	str	r4, [sp, #56]	@ 0x38
 800189a:	940f      	str	r4, [sp, #60]	@ 0x3c
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800189c:	2220      	movs	r2, #32
 800189e:	4621      	mov	r1, r4
 80018a0:	a801      	add	r0, sp, #4
 80018a2:	f006 ff46 	bl	8008732 <memset>
  htim1.Instance = TIM1;
 80018a6:	4821      	ldr	r0, [pc, #132]	@ (800192c <MX_TIM1_Init+0xa8>)
 80018a8:	4b21      	ldr	r3, [pc, #132]	@ (8001930 <MX_TIM1_Init+0xac>)
 80018aa:	6003      	str	r3, [r0, #0]
  htim1.Init.Prescaler = 0;
 80018ac:	6044      	str	r4, [r0, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80018ae:	6084      	str	r4, [r0, #8]
  htim1.Init.Period = 1400;
 80018b0:	f44f 63af 	mov.w	r3, #1400	@ 0x578
 80018b4:	60c3      	str	r3, [r0, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80018b6:	6104      	str	r4, [r0, #16]
  htim1.Init.RepetitionCounter = 0;
 80018b8:	6144      	str	r4, [r0, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80018ba:	2380      	movs	r3, #128	@ 0x80
 80018bc:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80018be:	f002 fad1 	bl	8003e64 <HAL_TIM_PWM_Init>
 80018c2:	2800      	cmp	r0, #0
 80018c4:	d129      	bne.n	800191a <MX_TIM1_Init+0x96>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80018c6:	2300      	movs	r3, #0
 80018c8:	9310      	str	r3, [sp, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80018ca:	9311      	str	r3, [sp, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80018cc:	a910      	add	r1, sp, #64	@ 0x40
 80018ce:	4817      	ldr	r0, [pc, #92]	@ (800192c <MX_TIM1_Init+0xa8>)
 80018d0:	f002 fc0e 	bl	80040f0 <HAL_TIMEx_MasterConfigSynchronization>
 80018d4:	bb18      	cbnz	r0, 800191e <MX_TIM1_Init+0x9a>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80018d6:	2360      	movs	r3, #96	@ 0x60
 80018d8:	9309      	str	r3, [sp, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 80018da:	2200      	movs	r2, #0
 80018dc:	920a      	str	r2, [sp, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80018de:	920b      	str	r2, [sp, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80018e0:	920c      	str	r2, [sp, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80018e2:	920d      	str	r2, [sp, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80018e4:	920e      	str	r2, [sp, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80018e6:	920f      	str	r2, [sp, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80018e8:	a909      	add	r1, sp, #36	@ 0x24
 80018ea:	4810      	ldr	r0, [pc, #64]	@ (800192c <MX_TIM1_Init+0xa8>)
 80018ec:	f002 fb14 	bl	8003f18 <HAL_TIM_PWM_ConfigChannel>
 80018f0:	b9b8      	cbnz	r0, 8001922 <MX_TIM1_Init+0x9e>
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80018f2:	2300      	movs	r3, #0
 80018f4:	9301      	str	r3, [sp, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80018f6:	9302      	str	r3, [sp, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80018f8:	9303      	str	r3, [sp, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80018fa:	9304      	str	r3, [sp, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80018fc:	9305      	str	r3, [sp, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80018fe:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001902:	9206      	str	r2, [sp, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001904:	9308      	str	r3, [sp, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001906:	a901      	add	r1, sp, #4
 8001908:	4808      	ldr	r0, [pc, #32]	@ (800192c <MX_TIM1_Init+0xa8>)
 800190a:	f002 fc27 	bl	800415c <HAL_TIMEx_ConfigBreakDeadTime>
 800190e:	b950      	cbnz	r0, 8001926 <MX_TIM1_Init+0xa2>
  HAL_TIM_MspPostInit(&htim1);
 8001910:	4806      	ldr	r0, [pc, #24]	@ (800192c <MX_TIM1_Init+0xa8>)
 8001912:	f000 f90f 	bl	8001b34 <HAL_TIM_MspPostInit>
}
 8001916:	b012      	add	sp, #72	@ 0x48
 8001918:	bd10      	pop	{r4, pc}
    Error_Handler();
 800191a:	f7ff ffb1 	bl	8001880 <Error_Handler>
    Error_Handler();
 800191e:	f7ff ffaf 	bl	8001880 <Error_Handler>
    Error_Handler();
 8001922:	f7ff ffad 	bl	8001880 <Error_Handler>
    Error_Handler();
 8001926:	f7ff ffab 	bl	8001880 <Error_Handler>
 800192a:	bf00      	nop
 800192c:	20000384 	.word	0x20000384
 8001930:	40012c00 	.word	0x40012c00

08001934 <MX_ADC1_Init>:
{
 8001934:	b500      	push	{lr}
 8001936:	b085      	sub	sp, #20
  ADC_ChannelConfTypeDef sConfig = {0};
 8001938:	2300      	movs	r3, #0
 800193a:	9301      	str	r3, [sp, #4]
 800193c:	9302      	str	r3, [sp, #8]
 800193e:	9303      	str	r3, [sp, #12]
  hadc1.Instance = ADC1;
 8001940:	4810      	ldr	r0, [pc, #64]	@ (8001984 <MX_ADC1_Init+0x50>)
 8001942:	4a11      	ldr	r2, [pc, #68]	@ (8001988 <MX_ADC1_Init+0x54>)
 8001944:	6002      	str	r2, [r0, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001946:	6083      	str	r3, [r0, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001948:	2201      	movs	r2, #1
 800194a:	7302      	strb	r2, [r0, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800194c:	7503      	strb	r3, [r0, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800194e:	f44f 2160 	mov.w	r1, #917504	@ 0xe0000
 8001952:	61c1      	str	r1, [r0, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001954:	6043      	str	r3, [r0, #4]
  hadc1.Init.NbrOfConversion = 1;
 8001956:	6102      	str	r2, [r0, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001958:	f000 fc0e 	bl	8002178 <HAL_ADC_Init>
 800195c:	b968      	cbnz	r0, 800197a <MX_ADC1_Init+0x46>
  sConfig.Channel = ADC_CHANNEL_0;
 800195e:	2300      	movs	r3, #0
 8001960:	9301      	str	r3, [sp, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001962:	2301      	movs	r3, #1
 8001964:	9302      	str	r3, [sp, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 8001966:	2307      	movs	r3, #7
 8001968:	9303      	str	r3, [sp, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800196a:	a901      	add	r1, sp, #4
 800196c:	4805      	ldr	r0, [pc, #20]	@ (8001984 <MX_ADC1_Init+0x50>)
 800196e:	f000 fa7b 	bl	8001e68 <HAL_ADC_ConfigChannel>
 8001972:	b920      	cbnz	r0, 800197e <MX_ADC1_Init+0x4a>
}
 8001974:	b005      	add	sp, #20
 8001976:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 800197a:	f7ff ff81 	bl	8001880 <Error_Handler>
    Error_Handler();
 800197e:	f7ff ff7f 	bl	8001880 <Error_Handler>
 8001982:	bf00      	nop
 8001984:	200003cc 	.word	0x200003cc
 8001988:	40012400 	.word	0x40012400

0800198c <SystemClock_Config>:
{
 800198c:	b500      	push	{lr}
 800198e:	b095      	sub	sp, #84	@ 0x54
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001990:	2228      	movs	r2, #40	@ 0x28
 8001992:	2100      	movs	r1, #0
 8001994:	eb0d 0002 	add.w	r0, sp, r2
 8001998:	f006 fecb 	bl	8008732 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800199c:	2300      	movs	r3, #0
 800199e:	9305      	str	r3, [sp, #20]
 80019a0:	9306      	str	r3, [sp, #24]
 80019a2:	9307      	str	r3, [sp, #28]
 80019a4:	9308      	str	r3, [sp, #32]
 80019a6:	9309      	str	r3, [sp, #36]	@ 0x24
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80019a8:	9301      	str	r3, [sp, #4]
 80019aa:	9302      	str	r3, [sp, #8]
 80019ac:	9303      	str	r3, [sp, #12]
 80019ae:	9304      	str	r3, [sp, #16]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80019b0:	2201      	movs	r2, #1
 80019b2:	920a      	str	r2, [sp, #40]	@ 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80019b4:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80019b8:	930b      	str	r3, [sp, #44]	@ 0x2c
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80019ba:	920e      	str	r2, [sp, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80019bc:	2202      	movs	r2, #2
 80019be:	9211      	str	r2, [sp, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80019c0:	9312      	str	r3, [sp, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80019c2:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 80019c6:	9313      	str	r3, [sp, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80019c8:	a80a      	add	r0, sp, #40	@ 0x28
 80019ca:	f001 fe19 	bl	8003600 <HAL_RCC_OscConfig>
 80019ce:	b9d8      	cbnz	r0, 8001a08 <SystemClock_Config+0x7c>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80019d0:	230f      	movs	r3, #15
 80019d2:	9305      	str	r3, [sp, #20]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80019d4:	2102      	movs	r1, #2
 80019d6:	9106      	str	r1, [sp, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80019d8:	2300      	movs	r3, #0
 80019da:	9307      	str	r3, [sp, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80019dc:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80019e0:	9208      	str	r2, [sp, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80019e2:	9309      	str	r3, [sp, #36]	@ 0x24
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80019e4:	a805      	add	r0, sp, #20
 80019e6:	f002 f83d 	bl	8003a64 <HAL_RCC_ClockConfig>
 80019ea:	b978      	cbnz	r0, 8001a0c <SystemClock_Config+0x80>
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC|RCC_PERIPHCLK_USB;
 80019ec:	2312      	movs	r3, #18
 80019ee:	9301      	str	r3, [sp, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 80019f0:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80019f4:	9303      	str	r3, [sp, #12]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 80019f6:	2300      	movs	r3, #0
 80019f8:	9304      	str	r3, [sp, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80019fa:	a801      	add	r0, sp, #4
 80019fc:	f002 f8e8 	bl	8003bd0 <HAL_RCCEx_PeriphCLKConfig>
 8001a00:	b930      	cbnz	r0, 8001a10 <SystemClock_Config+0x84>
}
 8001a02:	b015      	add	sp, #84	@ 0x54
 8001a04:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 8001a08:	f7ff ff3a 	bl	8001880 <Error_Handler>
    Error_Handler();
 8001a0c:	f7ff ff38 	bl	8001880 <Error_Handler>
    Error_Handler();
 8001a10:	f7ff ff36 	bl	8001880 <Error_Handler>

08001a14 <main>:
{
 8001a14:	b508      	push	{r3, lr}
  HAL_Init();
 8001a16:	f000 f97d 	bl	8001d14 <HAL_Init>
  SystemClock_Config();
 8001a1a:	f7ff ffb7 	bl	800198c <SystemClock_Config>
  MX_GPIO_Init();
 8001a1e:	f7ff fcad 	bl	800137c <MX_GPIO_Init>
  MX_USB_DEVICE_Init();
 8001a22:	f004 f9bf 	bl	8005da4 <MX_USB_DEVICE_Init>
  MX_TIM1_Init();
 8001a26:	f7ff ff2d 	bl	8001884 <MX_TIM1_Init>
  MX_ADC1_Init();
 8001a2a:	f7ff ff83 	bl	8001934 <MX_ADC1_Init>
  TIM1->CCR1 = 1400;
 8001a2e:	4b06      	ldr	r3, [pc, #24]	@ (8001a48 <main+0x34>)
 8001a30:	f44f 62af 	mov.w	r2, #1400	@ 0x578
 8001a34:	635a      	str	r2, [r3, #52]	@ 0x34
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8001a36:	2100      	movs	r1, #0
 8001a38:	4804      	ldr	r0, [pc, #16]	@ (8001a4c <main+0x38>)
 8001a3a:	f002 faeb 	bl	8004014 <HAL_TIM_PWM_Start>
  HAL_ADC_Start_IT(&hadc1);
 8001a3e:	4804      	ldr	r0, [pc, #16]	@ (8001a50 <main+0x3c>)
 8001a40:	f000 faf6 	bl	8002030 <HAL_ADC_Start_IT>
  while (1)
 8001a44:	e7fe      	b.n	8001a44 <main+0x30>
 8001a46:	bf00      	nop
 8001a48:	40012c00 	.word	0x40012c00
 8001a4c:	20000384 	.word	0x20000384
 8001a50:	200003cc 	.word	0x200003cc

08001a54 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001a54:	b082      	sub	sp, #8

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001a56:	4b0e      	ldr	r3, [pc, #56]	@ (8001a90 <HAL_MspInit+0x3c>)
 8001a58:	699a      	ldr	r2, [r3, #24]
 8001a5a:	f042 0201 	orr.w	r2, r2, #1
 8001a5e:	619a      	str	r2, [r3, #24]
 8001a60:	699a      	ldr	r2, [r3, #24]
 8001a62:	f002 0201 	and.w	r2, r2, #1
 8001a66:	9200      	str	r2, [sp, #0]
 8001a68:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001a6a:	69da      	ldr	r2, [r3, #28]
 8001a6c:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8001a70:	61da      	str	r2, [r3, #28]
 8001a72:	69db      	ldr	r3, [r3, #28]
 8001a74:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001a78:	9301      	str	r3, [sp, #4]
 8001a7a:	9b01      	ldr	r3, [sp, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001a7c:	4a05      	ldr	r2, [pc, #20]	@ (8001a94 <HAL_MspInit+0x40>)
 8001a7e:	6853      	ldr	r3, [r2, #4]
 8001a80:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8001a84:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001a88:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001a8a:	b002      	add	sp, #8
 8001a8c:	4770      	bx	lr
 8001a8e:	bf00      	nop
 8001a90:	40021000 	.word	0x40021000
 8001a94:	40010000 	.word	0x40010000

08001a98 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001a98:	b500      	push	{lr}
 8001a9a:	b087      	sub	sp, #28
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a9c:	2300      	movs	r3, #0
 8001a9e:	9302      	str	r3, [sp, #8]
 8001aa0:	9303      	str	r3, [sp, #12]
 8001aa2:	9304      	str	r3, [sp, #16]
 8001aa4:	9305      	str	r3, [sp, #20]
  if(hadc->Instance==ADC1)
 8001aa6:	6802      	ldr	r2, [r0, #0]
 8001aa8:	4b15      	ldr	r3, [pc, #84]	@ (8001b00 <HAL_ADC_MspInit+0x68>)
 8001aaa:	429a      	cmp	r2, r3
 8001aac:	d002      	beq.n	8001ab4 <HAL_ADC_MspInit+0x1c>

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 8001aae:	b007      	add	sp, #28
 8001ab0:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001ab4:	f503 436c 	add.w	r3, r3, #60416	@ 0xec00
 8001ab8:	699a      	ldr	r2, [r3, #24]
 8001aba:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001abe:	619a      	str	r2, [r3, #24]
 8001ac0:	699a      	ldr	r2, [r3, #24]
 8001ac2:	f402 7200 	and.w	r2, r2, #512	@ 0x200
 8001ac6:	9200      	str	r2, [sp, #0]
 8001ac8:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001aca:	699a      	ldr	r2, [r3, #24]
 8001acc:	f042 0204 	orr.w	r2, r2, #4
 8001ad0:	619a      	str	r2, [r3, #24]
 8001ad2:	699b      	ldr	r3, [r3, #24]
 8001ad4:	f003 0304 	and.w	r3, r3, #4
 8001ad8:	9301      	str	r3, [sp, #4]
 8001ada:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001adc:	2301      	movs	r3, #1
 8001ade:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001ae0:	2303      	movs	r3, #3
 8001ae2:	9303      	str	r3, [sp, #12]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ae4:	a902      	add	r1, sp, #8
 8001ae6:	4807      	ldr	r0, [pc, #28]	@ (8001b04 <HAL_ADC_MspInit+0x6c>)
 8001ae8:	f000 fc44 	bl	8002374 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 8001aec:	2200      	movs	r2, #0
 8001aee:	4611      	mov	r1, r2
 8001af0:	2012      	movs	r0, #18
 8001af2:	f000 fc0d 	bl	8002310 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8001af6:	2012      	movs	r0, #18
 8001af8:	f000 fc1a 	bl	8002330 <HAL_NVIC_EnableIRQ>
}
 8001afc:	e7d7      	b.n	8001aae <HAL_ADC_MspInit+0x16>
 8001afe:	bf00      	nop
 8001b00:	40012400 	.word	0x40012400
 8001b04:	40010800 	.word	0x40010800

08001b08 <HAL_TIM_PWM_MspInit>:
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
  if(htim_pwm->Instance==TIM1)
 8001b08:	6802      	ldr	r2, [r0, #0]
 8001b0a:	4b09      	ldr	r3, [pc, #36]	@ (8001b30 <HAL_TIM_PWM_MspInit+0x28>)
 8001b0c:	429a      	cmp	r2, r3
 8001b0e:	d000      	beq.n	8001b12 <HAL_TIM_PWM_MspInit+0xa>
 8001b10:	4770      	bx	lr
{
 8001b12:	b082      	sub	sp, #8
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001b14:	f503 4364 	add.w	r3, r3, #58368	@ 0xe400
 8001b18:	699a      	ldr	r2, [r3, #24]
 8001b1a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001b1e:	619a      	str	r2, [r3, #24]
 8001b20:	699b      	ldr	r3, [r3, #24]
 8001b22:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001b26:	9301      	str	r3, [sp, #4]
 8001b28:	9b01      	ldr	r3, [sp, #4]

  /* USER CODE END TIM1_MspInit 1 */

  }

}
 8001b2a:	b002      	add	sp, #8
 8001b2c:	4770      	bx	lr
 8001b2e:	bf00      	nop
 8001b30:	40012c00 	.word	0x40012c00

08001b34 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001b34:	b500      	push	{lr}
 8001b36:	b087      	sub	sp, #28
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b38:	2300      	movs	r3, #0
 8001b3a:	9302      	str	r3, [sp, #8]
 8001b3c:	9303      	str	r3, [sp, #12]
 8001b3e:	9304      	str	r3, [sp, #16]
 8001b40:	9305      	str	r3, [sp, #20]
  if(htim->Instance==TIM1)
 8001b42:	6802      	ldr	r2, [r0, #0]
 8001b44:	4b0d      	ldr	r3, [pc, #52]	@ (8001b7c <HAL_TIM_MspPostInit+0x48>)
 8001b46:	429a      	cmp	r2, r3
 8001b48:	d002      	beq.n	8001b50 <HAL_TIM_MspPostInit+0x1c>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8001b4a:	b007      	add	sp, #28
 8001b4c:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b50:	f503 4364 	add.w	r3, r3, #58368	@ 0xe400
 8001b54:	699a      	ldr	r2, [r3, #24]
 8001b56:	f042 0204 	orr.w	r2, r2, #4
 8001b5a:	619a      	str	r2, [r3, #24]
 8001b5c:	699b      	ldr	r3, [r3, #24]
 8001b5e:	f003 0304 	and.w	r3, r3, #4
 8001b62:	9301      	str	r3, [sp, #4]
 8001b64:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001b66:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001b6a:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b6c:	2302      	movs	r3, #2
 8001b6e:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b70:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b72:	a902      	add	r1, sp, #8
 8001b74:	4802      	ldr	r0, [pc, #8]	@ (8001b80 <HAL_TIM_MspPostInit+0x4c>)
 8001b76:	f000 fbfd 	bl	8002374 <HAL_GPIO_Init>
}
 8001b7a:	e7e6      	b.n	8001b4a <HAL_TIM_MspPostInit+0x16>
 8001b7c:	40012c00 	.word	0x40012c00
 8001b80:	40010800 	.word	0x40010800

08001b84 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001b84:	e7fe      	b.n	8001b84 <NMI_Handler>

08001b86 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001b86:	e7fe      	b.n	8001b86 <HardFault_Handler>

08001b88 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001b88:	e7fe      	b.n	8001b88 <MemManage_Handler>

08001b8a <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001b8a:	e7fe      	b.n	8001b8a <BusFault_Handler>

08001b8c <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001b8c:	e7fe      	b.n	8001b8c <UsageFault_Handler>

08001b8e <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001b8e:	4770      	bx	lr

08001b90 <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001b90:	4770      	bx	lr

08001b92 <PendSV_Handler>:

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001b92:	4770      	bx	lr

08001b94 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001b94:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001b96:	f000 f8cf 	bl	8001d38 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001b9a:	bd08      	pop	{r3, pc}

08001b9c <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 8001b9c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8001b9e:	4802      	ldr	r0, [pc, #8]	@ (8001ba8 <ADC1_2_IRQHandler+0xc>)
 8001ba0:	f000 f8e0 	bl	8001d64 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 8001ba4:	bd08      	pop	{r3, pc}
 8001ba6:	bf00      	nop
 8001ba8:	200003cc 	.word	0x200003cc

08001bac <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8001bac:	b508      	push	{r3, lr}
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8001bae:	4802      	ldr	r0, [pc, #8]	@ (8001bb8 <USB_LP_CAN1_RX0_IRQHandler+0xc>)
 8001bb0:	f001 fad8 	bl	8003164 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 8001bb4:	bd08      	pop	{r3, pc}
 8001bb6:	bf00      	nop
 8001bb8:	20000eec 	.word	0x20000eec

08001bbc <_getpid>:
}

int _getpid(void)
{
  return 1;
}
 8001bbc:	2001      	movs	r0, #1
 8001bbe:	4770      	bx	lr

08001bc0 <_kill>:

int _kill(int pid, int sig)
{
 8001bc0:	b508      	push	{r3, lr}
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001bc2:	f006 fe1b 	bl	80087fc <__errno>
 8001bc6:	2316      	movs	r3, #22
 8001bc8:	6003      	str	r3, [r0, #0]
  return -1;
}
 8001bca:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001bce:	bd08      	pop	{r3, pc}

08001bd0 <_exit>:

void _exit (int status)
{
 8001bd0:	b508      	push	{r3, lr}
  _kill(status, -1);
 8001bd2:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001bd6:	f7ff fff3 	bl	8001bc0 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001bda:	e7fe      	b.n	8001bda <_exit+0xa>

08001bdc <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001bdc:	b570      	push	{r4, r5, r6, lr}
 8001bde:	460c      	mov	r4, r1
 8001be0:	4616      	mov	r6, r2
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001be2:	2500      	movs	r5, #0
 8001be4:	e006      	b.n	8001bf4 <_read+0x18>
  {
    *ptr++ = __io_getchar();
 8001be6:	f3af 8000 	nop.w
 8001bea:	4621      	mov	r1, r4
 8001bec:	f801 0b01 	strb.w	r0, [r1], #1
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001bf0:	3501      	adds	r5, #1
    *ptr++ = __io_getchar();
 8001bf2:	460c      	mov	r4, r1
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001bf4:	42b5      	cmp	r5, r6
 8001bf6:	dbf6      	blt.n	8001be6 <_read+0xa>
  }

  return len;
}
 8001bf8:	4630      	mov	r0, r6
 8001bfa:	bd70      	pop	{r4, r5, r6, pc}

08001bfc <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001bfc:	b570      	push	{r4, r5, r6, lr}
 8001bfe:	460c      	mov	r4, r1
 8001c00:	4616      	mov	r6, r2
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c02:	2500      	movs	r5, #0
 8001c04:	e004      	b.n	8001c10 <_write+0x14>
  {
    __io_putchar(*ptr++);
 8001c06:	f814 0b01 	ldrb.w	r0, [r4], #1
 8001c0a:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c0e:	3501      	adds	r5, #1
 8001c10:	42b5      	cmp	r5, r6
 8001c12:	dbf8      	blt.n	8001c06 <_write+0xa>
  }
  return len;
}
 8001c14:	4630      	mov	r0, r6
 8001c16:	bd70      	pop	{r4, r5, r6, pc}

08001c18 <_close>:

int _close(int file)
{
  (void)file;
  return -1;
}
 8001c18:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001c1c:	4770      	bx	lr

08001c1e <_fstat>:


int _fstat(int file, struct stat *st)
{
  (void)file;
  st->st_mode = S_IFCHR;
 8001c1e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001c22:	604b      	str	r3, [r1, #4]
  return 0;
}
 8001c24:	2000      	movs	r0, #0
 8001c26:	4770      	bx	lr

08001c28 <_isatty>:

int _isatty(int file)
{
  (void)file;
  return 1;
}
 8001c28:	2001      	movs	r0, #1
 8001c2a:	4770      	bx	lr

08001c2c <_lseek>:
{
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
}
 8001c2c:	2000      	movs	r0, #0
 8001c2e:	4770      	bx	lr

08001c30 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001c30:	b510      	push	{r4, lr}
 8001c32:	4603      	mov	r3, r0
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001c34:	4a0c      	ldr	r2, [pc, #48]	@ (8001c68 <_sbrk+0x38>)
 8001c36:	490d      	ldr	r1, [pc, #52]	@ (8001c6c <_sbrk+0x3c>)
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001c38:	480d      	ldr	r0, [pc, #52]	@ (8001c70 <_sbrk+0x40>)
 8001c3a:	6800      	ldr	r0, [r0, #0]
 8001c3c:	b140      	cbz	r0, 8001c50 <_sbrk+0x20>
  {
    __sbrk_heap_end = &_end;
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001c3e:	480c      	ldr	r0, [pc, #48]	@ (8001c70 <_sbrk+0x40>)
 8001c40:	6800      	ldr	r0, [r0, #0]
 8001c42:	4403      	add	r3, r0
 8001c44:	1a52      	subs	r2, r2, r1
 8001c46:	4293      	cmp	r3, r2
 8001c48:	d806      	bhi.n	8001c58 <_sbrk+0x28>
    errno = ENOMEM;
    return (void *)-1;
  }

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;
 8001c4a:	4a09      	ldr	r2, [pc, #36]	@ (8001c70 <_sbrk+0x40>)
 8001c4c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
}
 8001c4e:	bd10      	pop	{r4, pc}
    __sbrk_heap_end = &_end;
 8001c50:	4807      	ldr	r0, [pc, #28]	@ (8001c70 <_sbrk+0x40>)
 8001c52:	4c08      	ldr	r4, [pc, #32]	@ (8001c74 <_sbrk+0x44>)
 8001c54:	6004      	str	r4, [r0, #0]
 8001c56:	e7f2      	b.n	8001c3e <_sbrk+0xe>
    errno = ENOMEM;
 8001c58:	f006 fdd0 	bl	80087fc <__errno>
 8001c5c:	230c      	movs	r3, #12
 8001c5e:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 8001c60:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001c64:	e7f3      	b.n	8001c4e <_sbrk+0x1e>
 8001c66:	bf00      	nop
 8001c68:	20005000 	.word	0x20005000
 8001c6c:	00000400 	.word	0x00000400
 8001c70:	200003fc 	.word	0x200003fc
 8001c74:	20001310 	.word	0x20001310

08001c78 <SystemInit>:

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001c78:	4770      	bx	lr
	...

08001c7c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001c7c:	f7ff fffc 	bl	8001c78 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001c80:	480b      	ldr	r0, [pc, #44]	@ (8001cb0 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001c82:	490c      	ldr	r1, [pc, #48]	@ (8001cb4 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001c84:	4a0c      	ldr	r2, [pc, #48]	@ (8001cb8 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001c86:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001c88:	e002      	b.n	8001c90 <LoopCopyDataInit>

08001c8a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001c8a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001c8c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001c8e:	3304      	adds	r3, #4

08001c90 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001c90:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001c92:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001c94:	d3f9      	bcc.n	8001c8a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001c96:	4a09      	ldr	r2, [pc, #36]	@ (8001cbc <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001c98:	4c09      	ldr	r4, [pc, #36]	@ (8001cc0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001c9a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001c9c:	e001      	b.n	8001ca2 <LoopFillZerobss>

08001c9e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001c9e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001ca0:	3204      	adds	r2, #4

08001ca2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001ca2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001ca4:	d3fb      	bcc.n	8001c9e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001ca6:	f006 fdaf 	bl	8008808 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001caa:	f7ff feb3 	bl	8001a14 <main>
  bx lr
 8001cae:	4770      	bx	lr
  ldr r0, =_sdata
 8001cb0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001cb4:	20000358 	.word	0x20000358
  ldr r2, =_sidata
 8001cb8:	0800b948 	.word	0x0800b948
  ldr r2, =_sbss
 8001cbc:	20000358 	.word	0x20000358
  ldr r4, =_ebss
 8001cc0:	20001310 	.word	0x20001310

08001cc4 <CAN1_RX1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001cc4:	e7fe      	b.n	8001cc4 <CAN1_RX1_IRQHandler>
	...

08001cc8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001cc8:	b510      	push	{r4, lr}
 8001cca:	4604      	mov	r4, r0
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001ccc:	4b0e      	ldr	r3, [pc, #56]	@ (8001d08 <HAL_InitTick+0x40>)
 8001cce:	781a      	ldrb	r2, [r3, #0]
 8001cd0:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001cd4:	fbb3 f3f2 	udiv	r3, r3, r2
 8001cd8:	4a0c      	ldr	r2, [pc, #48]	@ (8001d0c <HAL_InitTick+0x44>)
 8001cda:	6810      	ldr	r0, [r2, #0]
 8001cdc:	fbb0 f0f3 	udiv	r0, r0, r3
 8001ce0:	f000 fb34 	bl	800234c <HAL_SYSTICK_Config>
 8001ce4:	b968      	cbnz	r0, 8001d02 <HAL_InitTick+0x3a>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001ce6:	2c0f      	cmp	r4, #15
 8001ce8:	d901      	bls.n	8001cee <HAL_InitTick+0x26>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
    uwTickPrio = TickPriority;
  }
  else
  {
    return HAL_ERROR;
 8001cea:	2001      	movs	r0, #1
 8001cec:	e00a      	b.n	8001d04 <HAL_InitTick+0x3c>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001cee:	2200      	movs	r2, #0
 8001cf0:	4621      	mov	r1, r4
 8001cf2:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001cf6:	f000 fb0b 	bl	8002310 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001cfa:	4b05      	ldr	r3, [pc, #20]	@ (8001d10 <HAL_InitTick+0x48>)
 8001cfc:	601c      	str	r4, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001cfe:	2000      	movs	r0, #0
 8001d00:	e000      	b.n	8001d04 <HAL_InitTick+0x3c>
    return HAL_ERROR;
 8001d02:	2001      	movs	r0, #1
}
 8001d04:	bd10      	pop	{r4, pc}
 8001d06:	bf00      	nop
 8001d08:	20000004 	.word	0x20000004
 8001d0c:	20000000 	.word	0x20000000
 8001d10:	20000008 	.word	0x20000008

08001d14 <HAL_Init>:
{
 8001d14:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001d16:	4a07      	ldr	r2, [pc, #28]	@ (8001d34 <HAL_Init+0x20>)
 8001d18:	6813      	ldr	r3, [r2, #0]
 8001d1a:	f043 0310 	orr.w	r3, r3, #16
 8001d1e:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001d20:	2003      	movs	r0, #3
 8001d22:	f000 fae3 	bl	80022ec <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8001d26:	200f      	movs	r0, #15
 8001d28:	f7ff ffce 	bl	8001cc8 <HAL_InitTick>
  HAL_MspInit();
 8001d2c:	f7ff fe92 	bl	8001a54 <HAL_MspInit>
}
 8001d30:	2000      	movs	r0, #0
 8001d32:	bd08      	pop	{r3, pc}
 8001d34:	40022000 	.word	0x40022000

08001d38 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8001d38:	4a03      	ldr	r2, [pc, #12]	@ (8001d48 <HAL_IncTick+0x10>)
 8001d3a:	6811      	ldr	r1, [r2, #0]
 8001d3c:	4b03      	ldr	r3, [pc, #12]	@ (8001d4c <HAL_IncTick+0x14>)
 8001d3e:	781b      	ldrb	r3, [r3, #0]
 8001d40:	440b      	add	r3, r1
 8001d42:	6013      	str	r3, [r2, #0]
}
 8001d44:	4770      	bx	lr
 8001d46:	bf00      	nop
 8001d48:	20000400 	.word	0x20000400
 8001d4c:	20000004 	.word	0x20000004

08001d50 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8001d50:	4b01      	ldr	r3, [pc, #4]	@ (8001d58 <HAL_GetTick+0x8>)
 8001d52:	6818      	ldr	r0, [r3, #0]
}
 8001d54:	4770      	bx	lr
 8001d56:	bf00      	nop
 8001d58:	20000400 	.word	0x20000400

08001d5c <HAL_ADC_GetValue>:

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8001d5c:	6803      	ldr	r3, [r0, #0]
 8001d5e:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
}
 8001d60:	4770      	bx	lr

08001d62 <HAL_ADC_LevelOutOfWindowCallback>:
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8001d62:	4770      	bx	lr

08001d64 <HAL_ADC_IRQHandler>:
{
 8001d64:	b570      	push	{r4, r5, r6, lr}
 8001d66:	4604      	mov	r4, r0
  uint32_t tmp_sr = hadc->Instance->SR;
 8001d68:	6803      	ldr	r3, [r0, #0]
 8001d6a:	681e      	ldr	r6, [r3, #0]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 8001d6c:	685d      	ldr	r5, [r3, #4]
  if((tmp_cr1 & ADC_IT_EOC) == ADC_IT_EOC)
 8001d6e:	f015 0f20 	tst.w	r5, #32
 8001d72:	d017      	beq.n	8001da4 <HAL_ADC_IRQHandler+0x40>
    if((tmp_sr & ADC_FLAG_EOC) == ADC_FLAG_EOC)
 8001d74:	f016 0f02 	tst.w	r6, #2
 8001d78:	d014      	beq.n	8001da4 <HAL_ADC_IRQHandler+0x40>
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001d7a:	6a82      	ldr	r2, [r0, #40]	@ 0x28
 8001d7c:	f012 0f10 	tst.w	r2, #16
 8001d80:	d103      	bne.n	8001d8a <HAL_ADC_IRQHandler+0x26>
        SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8001d82:	6a82      	ldr	r2, [r0, #40]	@ 0x28
 8001d84:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001d88:	6282      	str	r2, [r0, #40]	@ 0x28
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001d8a:	689a      	ldr	r2, [r3, #8]
 8001d8c:	f402 2260 	and.w	r2, r2, #917504	@ 0xe0000
 8001d90:	f5b2 2f60 	cmp.w	r2, #917504	@ 0xe0000
 8001d94:	d033      	beq.n	8001dfe <HAL_ADC_IRQHandler+0x9a>
      HAL_ADC_ConvCpltCallback(hadc);
 8001d96:	4620      	mov	r0, r4
 8001d98:	f7ff fc9a 	bl	80016d0 <HAL_ADC_ConvCpltCallback>
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001d9c:	6823      	ldr	r3, [r4, #0]
 8001d9e:	f06f 0212 	mvn.w	r2, #18
 8001da2:	601a      	str	r2, [r3, #0]
  if((tmp_cr1 & ADC_IT_JEOC) == ADC_IT_JEOC)
 8001da4:	f015 0f80 	tst.w	r5, #128	@ 0x80
 8001da8:	d022      	beq.n	8001df0 <HAL_ADC_IRQHandler+0x8c>
    if((tmp_sr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC)
 8001daa:	f016 0f04 	tst.w	r6, #4
 8001dae:	d01f      	beq.n	8001df0 <HAL_ADC_IRQHandler+0x8c>
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001db0:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8001db2:	f013 0f10 	tst.w	r3, #16
 8001db6:	d103      	bne.n	8001dc0 <HAL_ADC_IRQHandler+0x5c>
        SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8001db8:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8001dba:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001dbe:	62a3      	str	r3, [r4, #40]	@ 0x28
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 8001dc0:	6822      	ldr	r2, [r4, #0]
 8001dc2:	6893      	ldr	r3, [r2, #8]
 8001dc4:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 8001dc8:	f5b3 4fe0 	cmp.w	r3, #28672	@ 0x7000
 8001dcc:	d02e      	beq.n	8001e2c <HAL_ADC_IRQHandler+0xc8>
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 8001dce:	6853      	ldr	r3, [r2, #4]
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 8001dd0:	f413 6f80 	tst.w	r3, #1024	@ 0x400
 8001dd4:	d105      	bne.n	8001de2 <HAL_ADC_IRQHandler+0x7e>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8001dd6:	6893      	ldr	r3, [r2, #8]
 8001dd8:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 8001ddc:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 8001de0:	d021      	beq.n	8001e26 <HAL_ADC_IRQHandler+0xc2>
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8001de2:	4620      	mov	r0, r4
 8001de4:	f000 fa4c 	bl	8002280 <HAL_ADCEx_InjectedConvCpltCallback>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8001de8:	6823      	ldr	r3, [r4, #0]
 8001dea:	f06f 020c 	mvn.w	r2, #12
 8001dee:	601a      	str	r2, [r3, #0]
  if((tmp_cr1 & ADC_IT_AWD) == ADC_IT_AWD)
 8001df0:	f015 0f40 	tst.w	r5, #64	@ 0x40
 8001df4:	d002      	beq.n	8001dfc <HAL_ADC_IRQHandler+0x98>
    if((tmp_sr & ADC_FLAG_AWD) == ADC_FLAG_AWD)
 8001df6:	f016 0f01 	tst.w	r6, #1
 8001dfa:	d128      	bne.n	8001e4e <HAL_ADC_IRQHandler+0xea>
}
 8001dfc:	bd70      	pop	{r4, r5, r6, pc}
         (hadc->Init.ContinuousConvMode == DISABLE)   )
 8001dfe:	7b22      	ldrb	r2, [r4, #12]
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001e00:	2a00      	cmp	r2, #0
 8001e02:	d1c8      	bne.n	8001d96 <HAL_ADC_IRQHandler+0x32>
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8001e04:	685a      	ldr	r2, [r3, #4]
 8001e06:	f022 0220 	bic.w	r2, r2, #32
 8001e0a:	605a      	str	r2, [r3, #4]
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001e0c:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8001e0e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001e12:	62a3      	str	r3, [r4, #40]	@ 0x28
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001e14:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8001e16:	f413 5f80 	tst.w	r3, #4096	@ 0x1000
 8001e1a:	d1bc      	bne.n	8001d96 <HAL_ADC_IRQHandler+0x32>
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001e1c:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8001e1e:	f043 0301 	orr.w	r3, r3, #1
 8001e22:	62a3      	str	r3, [r4, #40]	@ 0x28
 8001e24:	e7b7      	b.n	8001d96 <HAL_ADC_IRQHandler+0x32>
          (hadc->Init.ContinuousConvMode == DISABLE)   )        )   )
 8001e26:	7b23      	ldrb	r3, [r4, #12]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d1da      	bne.n	8001de2 <HAL_ADC_IRQHandler+0x7e>
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8001e2c:	6853      	ldr	r3, [r2, #4]
 8001e2e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8001e32:	6053      	str	r3, [r2, #4]
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8001e34:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8001e36:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8001e3a:	62a3      	str	r3, [r4, #40]	@ 0x28
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8001e3c:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8001e3e:	f413 7f80 	tst.w	r3, #256	@ 0x100
 8001e42:	d1ce      	bne.n	8001de2 <HAL_ADC_IRQHandler+0x7e>
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001e44:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8001e46:	f043 0301 	orr.w	r3, r3, #1
 8001e4a:	62a3      	str	r3, [r4, #40]	@ 0x28
 8001e4c:	e7c9      	b.n	8001de2 <HAL_ADC_IRQHandler+0x7e>
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8001e4e:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8001e50:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001e54:	62a3      	str	r3, [r4, #40]	@ 0x28
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8001e56:	4620      	mov	r0, r4
 8001e58:	f7ff ff83 	bl	8001d62 <HAL_ADC_LevelOutOfWindowCallback>
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8001e5c:	6823      	ldr	r3, [r4, #0]
 8001e5e:	f06f 0201 	mvn.w	r2, #1
 8001e62:	601a      	str	r2, [r3, #0]
}
 8001e64:	e7ca      	b.n	8001dfc <HAL_ADC_IRQHandler+0x98>
	...

08001e68 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8001e68:	b430      	push	{r4, r5}
 8001e6a:	b082      	sub	sp, #8
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  __IO uint32_t wait_loop_index = 0U;
 8001e6c:	2200      	movs	r2, #0
 8001e6e:	9201      	str	r2, [sp, #4]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001e70:	f890 2024 	ldrb.w	r2, [r0, #36]	@ 0x24
 8001e74:	2a01      	cmp	r2, #1
 8001e76:	f000 808f 	beq.w	8001f98 <HAL_ADC_ConfigChannel+0x130>
 8001e7a:	4603      	mov	r3, r0
 8001e7c:	2201      	movs	r2, #1
 8001e7e:	f880 2024 	strb.w	r2, [r0, #36]	@ 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001e82:	684a      	ldr	r2, [r1, #4]
 8001e84:	2a06      	cmp	r2, #6
 8001e86:	d82d      	bhi.n	8001ee4 <HAL_ADC_ConfigChannel+0x7c>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8001e88:	6804      	ldr	r4, [r0, #0]
 8001e8a:	6b60      	ldr	r0, [r4, #52]	@ 0x34
 8001e8c:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8001e90:	3a05      	subs	r2, #5
 8001e92:	f04f 0c1f 	mov.w	ip, #31
 8001e96:	fa0c fc02 	lsl.w	ip, ip, r2
 8001e9a:	ea20 000c 	bic.w	r0, r0, ip
 8001e9e:	680d      	ldr	r5, [r1, #0]
 8001ea0:	fa05 f202 	lsl.w	r2, r5, r2
 8001ea4:	4302      	orrs	r2, r0
 8001ea6:	6362      	str	r2, [r4, #52]	@ 0x34
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8001ea8:	680a      	ldr	r2, [r1, #0]
 8001eaa:	2a09      	cmp	r2, #9
 8001eac:	d938      	bls.n	8001f20 <HAL_ADC_ConfigChannel+0xb8>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8001eae:	681c      	ldr	r4, [r3, #0]
 8001eb0:	68e0      	ldr	r0, [r4, #12]
 8001eb2:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8001eb6:	3a1e      	subs	r2, #30
 8001eb8:	f04f 0c07 	mov.w	ip, #7
 8001ebc:	fa0c fc02 	lsl.w	ip, ip, r2
 8001ec0:	ea20 000c 	bic.w	r0, r0, ip
 8001ec4:	688d      	ldr	r5, [r1, #8]
 8001ec6:	fa05 f202 	lsl.w	r2, r5, r2
 8001eca:	4302      	orrs	r2, r0
 8001ecc:	60e2      	str	r2, [r4, #12]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001ece:	680a      	ldr	r2, [r1, #0]
 8001ed0:	3a10      	subs	r2, #16
 8001ed2:	2a01      	cmp	r2, #1
 8001ed4:	d934      	bls.n	8001f40 <HAL_ADC_ConfigChannel+0xd8>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001ed6:	2000      	movs	r0, #0
      tmp_hal_status = HAL_ERROR;
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001ed8:	2200      	movs	r2, #0
 8001eda:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
}
 8001ede:	b002      	add	sp, #8
 8001ee0:	bc30      	pop	{r4, r5}
 8001ee2:	4770      	bx	lr
  else if (sConfig->Rank < 13U)
 8001ee4:	2a0c      	cmp	r2, #12
 8001ee6:	d80d      	bhi.n	8001f04 <HAL_ADC_ConfigChannel+0x9c>
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8001ee8:	6805      	ldr	r5, [r0, #0]
 8001eea:	6b28      	ldr	r0, [r5, #48]	@ 0x30
 8001eec:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8001ef0:	3a23      	subs	r2, #35	@ 0x23
 8001ef2:	241f      	movs	r4, #31
 8001ef4:	4094      	lsls	r4, r2
 8001ef6:	ea20 0004 	bic.w	r0, r0, r4
 8001efa:	680c      	ldr	r4, [r1, #0]
 8001efc:	4094      	lsls	r4, r2
 8001efe:	4320      	orrs	r0, r4
 8001f00:	6328      	str	r0, [r5, #48]	@ 0x30
 8001f02:	e7d1      	b.n	8001ea8 <HAL_ADC_ConfigChannel+0x40>
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8001f04:	6805      	ldr	r5, [r0, #0]
 8001f06:	6ae8      	ldr	r0, [r5, #44]	@ 0x2c
 8001f08:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8001f0c:	3a41      	subs	r2, #65	@ 0x41
 8001f0e:	241f      	movs	r4, #31
 8001f10:	4094      	lsls	r4, r2
 8001f12:	ea20 0004 	bic.w	r0, r0, r4
 8001f16:	680c      	ldr	r4, [r1, #0]
 8001f18:	4094      	lsls	r4, r2
 8001f1a:	4320      	orrs	r0, r4
 8001f1c:	62e8      	str	r0, [r5, #44]	@ 0x2c
 8001f1e:	e7c3      	b.n	8001ea8 <HAL_ADC_ConfigChannel+0x40>
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8001f20:	681c      	ldr	r4, [r3, #0]
 8001f22:	6920      	ldr	r0, [r4, #16]
 8001f24:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8001f28:	f04f 0c07 	mov.w	ip, #7
 8001f2c:	fa0c fc02 	lsl.w	ip, ip, r2
 8001f30:	ea20 000c 	bic.w	r0, r0, ip
 8001f34:	688d      	ldr	r5, [r1, #8]
 8001f36:	fa05 f202 	lsl.w	r2, r5, r2
 8001f3a:	4302      	orrs	r2, r0
 8001f3c:	6122      	str	r2, [r4, #16]
 8001f3e:	e7c6      	b.n	8001ece <HAL_ADC_ConfigChannel+0x66>
    if (hadc->Instance == ADC1)
 8001f40:	681a      	ldr	r2, [r3, #0]
 8001f42:	4816      	ldr	r0, [pc, #88]	@ (8001f9c <HAL_ADC_ConfigChannel+0x134>)
 8001f44:	4282      	cmp	r2, r0
 8001f46:	d005      	beq.n	8001f54 <HAL_ADC_ConfigChannel+0xec>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001f48:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001f4a:	f042 0220 	orr.w	r2, r2, #32
 8001f4e:	629a      	str	r2, [r3, #40]	@ 0x28
      tmp_hal_status = HAL_ERROR;
 8001f50:	2001      	movs	r0, #1
 8001f52:	e7c1      	b.n	8001ed8 <HAL_ADC_ConfigChannel+0x70>
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8001f54:	6890      	ldr	r0, [r2, #8]
 8001f56:	f410 0f00 	tst.w	r0, #8388608	@ 0x800000
 8001f5a:	d11b      	bne.n	8001f94 <HAL_ADC_ConfigChannel+0x12c>
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8001f5c:	6890      	ldr	r0, [r2, #8]
 8001f5e:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8001f62:	6090      	str	r0, [r2, #8]
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001f64:	680a      	ldr	r2, [r1, #0]
 8001f66:	2a10      	cmp	r2, #16
 8001f68:	d001      	beq.n	8001f6e <HAL_ADC_ConfigChannel+0x106>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001f6a:	2000      	movs	r0, #0
 8001f6c:	e7b4      	b.n	8001ed8 <HAL_ADC_ConfigChannel+0x70>
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001f6e:	4a0c      	ldr	r2, [pc, #48]	@ (8001fa0 <HAL_ADC_ConfigChannel+0x138>)
 8001f70:	6812      	ldr	r2, [r2, #0]
 8001f72:	490c      	ldr	r1, [pc, #48]	@ (8001fa4 <HAL_ADC_ConfigChannel+0x13c>)
 8001f74:	fba1 1202 	umull	r1, r2, r1, r2
 8001f78:	0c92      	lsrs	r2, r2, #18
 8001f7a:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8001f7e:	0052      	lsls	r2, r2, #1
 8001f80:	9201      	str	r2, [sp, #4]
          while(wait_loop_index != 0U)
 8001f82:	e002      	b.n	8001f8a <HAL_ADC_ConfigChannel+0x122>
            wait_loop_index--;
 8001f84:	9a01      	ldr	r2, [sp, #4]
 8001f86:	3a01      	subs	r2, #1
 8001f88:	9201      	str	r2, [sp, #4]
          while(wait_loop_index != 0U)
 8001f8a:	9a01      	ldr	r2, [sp, #4]
 8001f8c:	2a00      	cmp	r2, #0
 8001f8e:	d1f9      	bne.n	8001f84 <HAL_ADC_ConfigChannel+0x11c>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001f90:	2000      	movs	r0, #0
 8001f92:	e7a1      	b.n	8001ed8 <HAL_ADC_ConfigChannel+0x70>
 8001f94:	2000      	movs	r0, #0
 8001f96:	e79f      	b.n	8001ed8 <HAL_ADC_ConfigChannel+0x70>
  __HAL_LOCK(hadc);
 8001f98:	2002      	movs	r0, #2
 8001f9a:	e7a0      	b.n	8001ede <HAL_ADC_ConfigChannel+0x76>
 8001f9c:	40012400 	.word	0x40012400
 8001fa0:	20000000 	.word	0x20000000
 8001fa4:	431bde83 	.word	0x431bde83

08001fa8 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8001fa8:	b530      	push	{r4, r5, lr}
 8001faa:	b083      	sub	sp, #12
  uint32_t tickstart = 0U;
  __IO uint32_t wait_loop_index = 0U;
 8001fac:	2300      	movs	r3, #0
 8001fae:	9301      	str	r3, [sp, #4]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001fb0:	6803      	ldr	r3, [r0, #0]
 8001fb2:	689a      	ldr	r2, [r3, #8]
 8001fb4:	f012 0f01 	tst.w	r2, #1
 8001fb8:	d133      	bne.n	8002022 <ADC_Enable+0x7a>
 8001fba:	4604      	mov	r4, r0
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001fbc:	689a      	ldr	r2, [r3, #8]
 8001fbe:	f042 0201 	orr.w	r2, r2, #1
 8001fc2:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001fc4:	4b18      	ldr	r3, [pc, #96]	@ (8002028 <ADC_Enable+0x80>)
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	4a18      	ldr	r2, [pc, #96]	@ (800202c <ADC_Enable+0x84>)
 8001fca:	fba2 2303 	umull	r2, r3, r2, r3
 8001fce:	0c9b      	lsrs	r3, r3, #18
 8001fd0:	9301      	str	r3, [sp, #4]
    while(wait_loop_index != 0U)
 8001fd2:	e002      	b.n	8001fda <ADC_Enable+0x32>
    {
      wait_loop_index--;
 8001fd4:	9b01      	ldr	r3, [sp, #4]
 8001fd6:	3b01      	subs	r3, #1
 8001fd8:	9301      	str	r3, [sp, #4]
    while(wait_loop_index != 0U)
 8001fda:	9b01      	ldr	r3, [sp, #4]
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d1f9      	bne.n	8001fd4 <ADC_Enable+0x2c>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001fe0:	f7ff feb6 	bl	8001d50 <HAL_GetTick>
 8001fe4:	4605      	mov	r5, r0

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001fe6:	6823      	ldr	r3, [r4, #0]
 8001fe8:	689b      	ldr	r3, [r3, #8]
 8001fea:	f013 0f01 	tst.w	r3, #1
 8001fee:	d116      	bne.n	800201e <ADC_Enable+0x76>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001ff0:	f7ff feae 	bl	8001d50 <HAL_GetTick>
 8001ff4:	1b43      	subs	r3, r0, r5
 8001ff6:	2b02      	cmp	r3, #2
 8001ff8:	d9f5      	bls.n	8001fe6 <ADC_Enable+0x3e>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8001ffa:	6823      	ldr	r3, [r4, #0]
 8001ffc:	689b      	ldr	r3, [r3, #8]
 8001ffe:	f013 0f01 	tst.w	r3, #1
 8002002:	d1f0      	bne.n	8001fe6 <ADC_Enable+0x3e>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002004:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8002006:	f043 0310 	orr.w	r3, r3, #16
 800200a:	62a3      	str	r3, [r4, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800200c:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 800200e:	f043 0301 	orr.w	r3, r3, #1
 8002012:	62e3      	str	r3, [r4, #44]	@ 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002014:	2300      	movs	r3, #0
 8002016:	f884 3024 	strb.w	r3, [r4, #36]	@ 0x24

          return HAL_ERROR;
 800201a:	2001      	movs	r0, #1
 800201c:	e002      	b.n	8002024 <ADC_Enable+0x7c>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 800201e:	2000      	movs	r0, #0
 8002020:	e000      	b.n	8002024 <ADC_Enable+0x7c>
 8002022:	2000      	movs	r0, #0
}
 8002024:	b003      	add	sp, #12
 8002026:	bd30      	pop	{r4, r5, pc}
 8002028:	20000000 	.word	0x20000000
 800202c:	431bde83 	.word	0x431bde83

08002030 <HAL_ADC_Start_IT>:
  __HAL_LOCK(hadc);
 8002030:	f890 3024 	ldrb.w	r3, [r0, #36]	@ 0x24
 8002034:	2b01      	cmp	r3, #1
 8002036:	d06d      	beq.n	8002114 <HAL_ADC_Start_IT+0xe4>
{
 8002038:	b510      	push	{r4, lr}
 800203a:	4604      	mov	r4, r0
  __HAL_LOCK(hadc);
 800203c:	2301      	movs	r3, #1
 800203e:	f880 3024 	strb.w	r3, [r0, #36]	@ 0x24
  tmp_hal_status = ADC_Enable(hadc);
 8002042:	f7ff ffb1 	bl	8001fa8 <ADC_Enable>
  if (tmp_hal_status == HAL_OK)
 8002046:	2800      	cmp	r0, #0
 8002048:	d160      	bne.n	800210c <HAL_ADC_Start_IT+0xdc>
    ADC_STATE_CLR_SET(hadc->State,
 800204a:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 800204c:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8002050:	f023 0301 	bic.w	r3, r3, #1
 8002054:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002058:	62a3      	str	r3, [r4, #40]	@ 0x28
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 800205a:	6823      	ldr	r3, [r4, #0]
 800205c:	4a2e      	ldr	r2, [pc, #184]	@ (8002118 <HAL_ADC_Start_IT+0xe8>)
 800205e:	4293      	cmp	r3, r2
 8002060:	d02c      	beq.n	80020bc <HAL_ADC_Start_IT+0x8c>
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002062:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 8002064:	f422 1280 	bic.w	r2, r2, #1048576	@ 0x100000
 8002068:	62a2      	str	r2, [r4, #40]	@ 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800206a:	685a      	ldr	r2, [r3, #4]
 800206c:	f412 6f80 	tst.w	r2, #1024	@ 0x400
 8002070:	d005      	beq.n	800207e <HAL_ADC_Start_IT+0x4e>
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002072:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 8002074:	f422 5240 	bic.w	r2, r2, #12288	@ 0x3000
 8002078:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800207c:	62a2      	str	r2, [r4, #40]	@ 0x28
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800207e:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 8002080:	f412 5f80 	tst.w	r2, #4096	@ 0x1000
 8002084:	d030      	beq.n	80020e8 <HAL_ADC_Start_IT+0xb8>
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002086:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8002088:	f022 0206 	bic.w	r2, r2, #6
 800208c:	62e2      	str	r2, [r4, #44]	@ 0x2c
    __HAL_UNLOCK(hadc);
 800208e:	2200      	movs	r2, #0
 8002090:	f884 2024 	strb.w	r2, [r4, #36]	@ 0x24
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8002094:	f06f 0202 	mvn.w	r2, #2
 8002098:	601a      	str	r2, [r3, #0]
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOC);
 800209a:	6822      	ldr	r2, [r4, #0]
 800209c:	6853      	ldr	r3, [r2, #4]
 800209e:	f043 0320 	orr.w	r3, r3, #32
 80020a2:	6053      	str	r3, [r2, #4]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 80020a4:	6823      	ldr	r3, [r4, #0]
 80020a6:	689a      	ldr	r2, [r3, #8]
 80020a8:	f402 2260 	and.w	r2, r2, #917504	@ 0xe0000
 80020ac:	f5b2 2f60 	cmp.w	r2, #917504	@ 0xe0000
 80020b0:	d01d      	beq.n	80020ee <HAL_ADC_Start_IT+0xbe>
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 80020b2:	689a      	ldr	r2, [r3, #8]
 80020b4:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 80020b8:	609a      	str	r2, [r3, #8]
 80020ba:	e02a      	b.n	8002112 <HAL_ADC_Start_IT+0xe2>
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 80020bc:	f5a2 6280 	sub.w	r2, r2, #1024	@ 0x400
 80020c0:	6852      	ldr	r2, [r2, #4]
 80020c2:	f412 2f70 	tst.w	r2, #983040	@ 0xf0000
 80020c6:	d0cc      	beq.n	8002062 <HAL_ADC_Start_IT+0x32>
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80020c8:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 80020ca:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 80020ce:	62a2      	str	r2, [r4, #40]	@ 0x28
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 80020d0:	4a12      	ldr	r2, [pc, #72]	@ (800211c <HAL_ADC_Start_IT+0xec>)
 80020d2:	6852      	ldr	r2, [r2, #4]
 80020d4:	f412 6f80 	tst.w	r2, #1024	@ 0x400
 80020d8:	d0d1      	beq.n	800207e <HAL_ADC_Start_IT+0x4e>
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80020da:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 80020dc:	f422 5240 	bic.w	r2, r2, #12288	@ 0x3000
 80020e0:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80020e4:	62a2      	str	r2, [r4, #40]	@ 0x28
 80020e6:	e7ca      	b.n	800207e <HAL_ADC_Start_IT+0x4e>
      ADC_CLEAR_ERRORCODE(hadc);
 80020e8:	2200      	movs	r2, #0
 80020ea:	62e2      	str	r2, [r4, #44]	@ 0x2c
 80020ec:	e7cf      	b.n	800208e <HAL_ADC_Start_IT+0x5e>
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 80020ee:	4a0a      	ldr	r2, [pc, #40]	@ (8002118 <HAL_ADC_Start_IT+0xe8>)
 80020f0:	4293      	cmp	r3, r2
 80020f2:	d004      	beq.n	80020fe <HAL_ADC_Start_IT+0xce>
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 80020f4:	689a      	ldr	r2, [r3, #8]
 80020f6:	f442 02a0 	orr.w	r2, r2, #5242880	@ 0x500000
 80020fa:	609a      	str	r2, [r3, #8]
 80020fc:	e009      	b.n	8002112 <HAL_ADC_Start_IT+0xe2>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 80020fe:	f5a2 6280 	sub.w	r2, r2, #1024	@ 0x400
 8002102:	6852      	ldr	r2, [r2, #4]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8002104:	f412 2f70 	tst.w	r2, #983040	@ 0xf0000
 8002108:	d1d3      	bne.n	80020b2 <HAL_ADC_Start_IT+0x82>
 800210a:	e7f3      	b.n	80020f4 <HAL_ADC_Start_IT+0xc4>
    __HAL_UNLOCK(hadc);
 800210c:	2300      	movs	r3, #0
 800210e:	f884 3024 	strb.w	r3, [r4, #36]	@ 0x24
}
 8002112:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hadc);
 8002114:	2002      	movs	r0, #2
}
 8002116:	4770      	bx	lr
 8002118:	40012800 	.word	0x40012800
 800211c:	40012400 	.word	0x40012400

08002120 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8002120:	b538      	push	{r3, r4, r5, lr}
  uint32_t tickstart = 0U;
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8002122:	6803      	ldr	r3, [r0, #0]
 8002124:	689a      	ldr	r2, [r3, #8]
 8002126:	f012 0f01 	tst.w	r2, #1
 800212a:	d101      	bne.n	8002130 <ADC_ConversionStop_Disable+0x10>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 800212c:	2000      	movs	r0, #0
}
 800212e:	bd38      	pop	{r3, r4, r5, pc}
 8002130:	4604      	mov	r4, r0
    __HAL_ADC_DISABLE(hadc);
 8002132:	689a      	ldr	r2, [r3, #8]
 8002134:	f022 0201 	bic.w	r2, r2, #1
 8002138:	609a      	str	r2, [r3, #8]
    tickstart = HAL_GetTick();
 800213a:	f7ff fe09 	bl	8001d50 <HAL_GetTick>
 800213e:	4605      	mov	r5, r0
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002140:	6823      	ldr	r3, [r4, #0]
 8002142:	689b      	ldr	r3, [r3, #8]
 8002144:	f013 0f01 	tst.w	r3, #1
 8002148:	d013      	beq.n	8002172 <ADC_ConversionStop_Disable+0x52>
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800214a:	f7ff fe01 	bl	8001d50 <HAL_GetTick>
 800214e:	1b43      	subs	r3, r0, r5
 8002150:	2b02      	cmp	r3, #2
 8002152:	d9f5      	bls.n	8002140 <ADC_ConversionStop_Disable+0x20>
        if(ADC_IS_ENABLE(hadc) != RESET)
 8002154:	6823      	ldr	r3, [r4, #0]
 8002156:	689b      	ldr	r3, [r3, #8]
 8002158:	f013 0f01 	tst.w	r3, #1
 800215c:	d0f0      	beq.n	8002140 <ADC_ConversionStop_Disable+0x20>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800215e:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8002160:	f043 0310 	orr.w	r3, r3, #16
 8002164:	62a3      	str	r3, [r4, #40]	@ 0x28
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002166:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8002168:	f043 0301 	orr.w	r3, r3, #1
 800216c:	62e3      	str	r3, [r4, #44]	@ 0x2c
          return HAL_ERROR;
 800216e:	2001      	movs	r0, #1
 8002170:	e7dd      	b.n	800212e <ADC_ConversionStop_Disable+0xe>
  return HAL_OK;
 8002172:	2000      	movs	r0, #0
 8002174:	e7db      	b.n	800212e <ADC_ConversionStop_Disable+0xe>
	...

08002178 <HAL_ADC_Init>:
  if(hadc == NULL)
 8002178:	2800      	cmp	r0, #0
 800217a:	d07b      	beq.n	8002274 <HAL_ADC_Init+0xfc>
{
 800217c:	b570      	push	{r4, r5, r6, lr}
 800217e:	4604      	mov	r4, r0
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002180:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 8002182:	2b00      	cmp	r3, #0
 8002184:	d04d      	beq.n	8002222 <HAL_ADC_Init+0xaa>
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8002186:	4620      	mov	r0, r4
 8002188:	f7ff ffca 	bl	8002120 <ADC_ConversionStop_Disable>
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 800218c:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 800218e:	f013 0310 	ands.w	r3, r3, #16
 8002192:	d169      	bne.n	8002268 <HAL_ADC_Init+0xf0>
 8002194:	2800      	cmp	r0, #0
 8002196:	d167      	bne.n	8002268 <HAL_ADC_Init+0xf0>
    ADC_STATE_CLR_SET(hadc->State,
 8002198:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 800219a:	f422 5288 	bic.w	r2, r2, #4352	@ 0x1100
 800219e:	f022 0202 	bic.w	r2, r2, #2
 80021a2:	f042 0202 	orr.w	r2, r2, #2
 80021a6:	62a2      	str	r2, [r4, #40]	@ 0x28
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80021a8:	6862      	ldr	r2, [r4, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80021aa:	69e1      	ldr	r1, [r4, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80021ac:	430a      	orrs	r2, r1
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 80021ae:	7b21      	ldrb	r1, [r4, #12]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80021b0:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 80021b4:	68a5      	ldr	r5, [r4, #8]
 80021b6:	f5b5 7f80 	cmp.w	r5, #256	@ 0x100
 80021ba:	d002      	beq.n	80021c2 <HAL_ADC_Init+0x4a>
 80021bc:	2d01      	cmp	r5, #1
 80021be:	d036      	beq.n	800222e <HAL_ADC_Init+0xb6>
 80021c0:	461d      	mov	r5, r3
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80021c2:	7d26      	ldrb	r6, [r4, #20]
 80021c4:	2e01      	cmp	r6, #1
 80021c6:	d035      	beq.n	8002234 <HAL_ADC_Init+0xbc>
      MODIFY_REG(hadc->Instance->CR1,
 80021c8:	6826      	ldr	r6, [r4, #0]
 80021ca:	6871      	ldr	r1, [r6, #4]
 80021cc:	f421 4169 	bic.w	r1, r1, #59648	@ 0xe900
 80021d0:	4329      	orrs	r1, r5
 80021d2:	6071      	str	r1, [r6, #4]
      MODIFY_REG(hadc->Instance->CR2,
 80021d4:	6825      	ldr	r5, [r4, #0]
 80021d6:	68ae      	ldr	r6, [r5, #8]
 80021d8:	4927      	ldr	r1, [pc, #156]	@ (8002278 <HAL_ADC_Init+0x100>)
 80021da:	4031      	ands	r1, r6
 80021dc:	4311      	orrs	r1, r2
 80021de:	60a9      	str	r1, [r5, #8]
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 80021e0:	68a1      	ldr	r1, [r4, #8]
 80021e2:	f5b1 7f80 	cmp.w	r1, #256	@ 0x100
 80021e6:	d001      	beq.n	80021ec <HAL_ADC_Init+0x74>
 80021e8:	2901      	cmp	r1, #1
 80021ea:	d102      	bne.n	80021f2 <HAL_ADC_Init+0x7a>
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 80021ec:	6923      	ldr	r3, [r4, #16]
 80021ee:	3b01      	subs	r3, #1
 80021f0:	051b      	lsls	r3, r3, #20
    MODIFY_REG(hadc->Instance->SQR1,
 80021f2:	6825      	ldr	r5, [r4, #0]
 80021f4:	6ae9      	ldr	r1, [r5, #44]	@ 0x2c
 80021f6:	f421 0170 	bic.w	r1, r1, #15728640	@ 0xf00000
 80021fa:	430b      	orrs	r3, r1
 80021fc:	62eb      	str	r3, [r5, #44]	@ 0x2c
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80021fe:	6823      	ldr	r3, [r4, #0]
 8002200:	6899      	ldr	r1, [r3, #8]
 8002202:	4b1e      	ldr	r3, [pc, #120]	@ (800227c <HAL_ADC_Init+0x104>)
 8002204:	400b      	ands	r3, r1
 8002206:	429a      	cmp	r2, r3
 8002208:	d025      	beq.n	8002256 <HAL_ADC_Init+0xde>
      ADC_STATE_CLR_SET(hadc->State,
 800220a:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 800220c:	f023 0312 	bic.w	r3, r3, #18
 8002210:	f043 0310 	orr.w	r3, r3, #16
 8002214:	62a3      	str	r3, [r4, #40]	@ 0x28
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002216:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8002218:	f043 0301 	orr.w	r3, r3, #1
 800221c:	62e3      	str	r3, [r4, #44]	@ 0x2c
      tmp_hal_status = HAL_ERROR;
 800221e:	2001      	movs	r0, #1
 8002220:	e027      	b.n	8002272 <HAL_ADC_Init+0xfa>
    ADC_CLEAR_ERRORCODE(hadc);
 8002222:	62c3      	str	r3, [r0, #44]	@ 0x2c
    hadc->Lock = HAL_UNLOCKED;
 8002224:	f880 3024 	strb.w	r3, [r0, #36]	@ 0x24
    HAL_ADC_MspInit(hadc);
 8002228:	f7ff fc36 	bl	8001a98 <HAL_ADC_MspInit>
 800222c:	e7ab      	b.n	8002186 <HAL_ADC_Init+0xe>
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 800222e:	f44f 7580 	mov.w	r5, #256	@ 0x100
 8002232:	e7c6      	b.n	80021c2 <HAL_ADC_Init+0x4a>
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8002234:	b931      	cbnz	r1, 8002244 <HAL_ADC_Init+0xcc>
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8002236:	69a1      	ldr	r1, [r4, #24]
 8002238:	3901      	subs	r1, #1
 800223a:	ea45 3141 	orr.w	r1, r5, r1, lsl #13
 800223e:	f441 6500 	orr.w	r5, r1, #2048	@ 0x800
 8002242:	e7c1      	b.n	80021c8 <HAL_ADC_Init+0x50>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002244:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 8002246:	f041 0120 	orr.w	r1, r1, #32
 800224a:	62a1      	str	r1, [r4, #40]	@ 0x28
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800224c:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800224e:	f041 0101 	orr.w	r1, r1, #1
 8002252:	62e1      	str	r1, [r4, #44]	@ 0x2c
 8002254:	e7b8      	b.n	80021c8 <HAL_ADC_Init+0x50>
      ADC_CLEAR_ERRORCODE(hadc);
 8002256:	2300      	movs	r3, #0
 8002258:	62e3      	str	r3, [r4, #44]	@ 0x2c
      ADC_STATE_CLR_SET(hadc->State,
 800225a:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 800225c:	f023 0303 	bic.w	r3, r3, #3
 8002260:	f043 0301 	orr.w	r3, r3, #1
 8002264:	62a3      	str	r3, [r4, #40]	@ 0x28
 8002266:	e004      	b.n	8002272 <HAL_ADC_Init+0xfa>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002268:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 800226a:	f043 0310 	orr.w	r3, r3, #16
 800226e:	62a3      	str	r3, [r4, #40]	@ 0x28
    tmp_hal_status = HAL_ERROR;
 8002270:	2001      	movs	r0, #1
}
 8002272:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 8002274:	2001      	movs	r0, #1
}
 8002276:	4770      	bx	lr
 8002278:	ffe1f7fd 	.word	0xffe1f7fd
 800227c:	ff1f0efe 	.word	0xff1f0efe

08002280 <HAL_ADCEx_InjectedConvCpltCallback>:
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADCEx_InjectedConvCpltCallback could be implemented in the user file
  */
}
 8002280:	4770      	bx	lr
	...

08002284 <__NVIC_SetPriority>:
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
 8002284:	2800      	cmp	r0, #0
 8002286:	db08      	blt.n	800229a <__NVIC_SetPriority+0x16>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002288:	0109      	lsls	r1, r1, #4
 800228a:	b2c9      	uxtb	r1, r1
 800228c:	f100 4060 	add.w	r0, r0, #3758096384	@ 0xe0000000
 8002290:	f500 4061 	add.w	r0, r0, #57600	@ 0xe100
 8002294:	f880 1300 	strb.w	r1, [r0, #768]	@ 0x300
 8002298:	4770      	bx	lr
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800229a:	f000 000f 	and.w	r0, r0, #15
 800229e:	0109      	lsls	r1, r1, #4
 80022a0:	b2c9      	uxtb	r1, r1
 80022a2:	4b01      	ldr	r3, [pc, #4]	@ (80022a8 <__NVIC_SetPriority+0x24>)
 80022a4:	5419      	strb	r1, [r3, r0]
  }
}
 80022a6:	4770      	bx	lr
 80022a8:	e000ed14 	.word	0xe000ed14

080022ac <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80022ac:	b500      	push	{lr}
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80022ae:	f000 0007 	and.w	r0, r0, #7
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80022b2:	f1c0 0c07 	rsb	ip, r0, #7
 80022b6:	f1bc 0f04 	cmp.w	ip, #4
 80022ba:	bf28      	it	cs
 80022bc:	f04f 0c04 	movcs.w	ip, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80022c0:	1d03      	adds	r3, r0, #4
 80022c2:	2b06      	cmp	r3, #6
 80022c4:	d90f      	bls.n	80022e6 <NVIC_EncodePriority+0x3a>
 80022c6:	1ec3      	subs	r3, r0, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80022c8:	f04f 3eff 	mov.w	lr, #4294967295	@ 0xffffffff
 80022cc:	fa0e f00c 	lsl.w	r0, lr, ip
 80022d0:	ea21 0100 	bic.w	r1, r1, r0
 80022d4:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80022d6:	fa0e fe03 	lsl.w	lr, lr, r3
 80022da:	ea22 020e 	bic.w	r2, r2, lr
         );
}
 80022de:	ea41 0002 	orr.w	r0, r1, r2
 80022e2:	f85d fb04 	ldr.w	pc, [sp], #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80022e6:	2300      	movs	r3, #0
 80022e8:	e7ee      	b.n	80022c8 <NVIC_EncodePriority+0x1c>
	...

080022ec <HAL_NVIC_SetPriorityGrouping>:
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80022ec:	4a07      	ldr	r2, [pc, #28]	@ (800230c <HAL_NVIC_SetPriorityGrouping+0x20>)
 80022ee:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80022f0:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 80022f4:	041b      	lsls	r3, r3, #16
 80022f6:	0c1b      	lsrs	r3, r3, #16
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80022f8:	0200      	lsls	r0, r0, #8
 80022fa:	f400 60e0 	and.w	r0, r0, #1792	@ 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80022fe:	4303      	orrs	r3, r0
  reg_value  =  (reg_value                                   |
 8002300:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002304:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
  SCB->AIRCR =  reg_value;
 8002308:	60d3      	str	r3, [r2, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 800230a:	4770      	bx	lr
 800230c:	e000ed00 	.word	0xe000ed00

08002310 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002310:	b510      	push	{r4, lr}
 8002312:	4604      	mov	r4, r0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002314:	4b05      	ldr	r3, [pc, #20]	@ (800232c <HAL_NVIC_SetPriority+0x1c>)
 8002316:	68d8      	ldr	r0, [r3, #12]
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002318:	f3c0 2002 	ubfx	r0, r0, #8, #3
 800231c:	f7ff ffc6 	bl	80022ac <NVIC_EncodePriority>
 8002320:	4601      	mov	r1, r0
 8002322:	4620      	mov	r0, r4
 8002324:	f7ff ffae 	bl	8002284 <__NVIC_SetPriority>
}
 8002328:	bd10      	pop	{r4, pc}
 800232a:	bf00      	nop
 800232c:	e000ed00 	.word	0xe000ed00

08002330 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8002330:	2800      	cmp	r0, #0
 8002332:	db07      	blt.n	8002344 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002334:	f000 021f 	and.w	r2, r0, #31
 8002338:	0940      	lsrs	r0, r0, #5
 800233a:	2301      	movs	r3, #1
 800233c:	4093      	lsls	r3, r2
 800233e:	4a02      	ldr	r2, [pc, #8]	@ (8002348 <HAL_NVIC_EnableIRQ+0x18>)
 8002340:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8002344:	4770      	bx	lr
 8002346:	bf00      	nop
 8002348:	e000e100 	.word	0xe000e100

0800234c <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800234c:	3801      	subs	r0, #1
 800234e:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8002352:	d20b      	bcs.n	800236c <HAL_SYSTICK_Config+0x20>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002354:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8002358:	6158      	str	r0, [r3, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800235a:	4a05      	ldr	r2, [pc, #20]	@ (8002370 <HAL_SYSTICK_Config+0x24>)
 800235c:	21f0      	movs	r1, #240	@ 0xf0
 800235e:	f882 1023 	strb.w	r1, [r2, #35]	@ 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002362:	2000      	movs	r0, #0
 8002364:	6198      	str	r0, [r3, #24]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002366:	2207      	movs	r2, #7
 8002368:	611a      	str	r2, [r3, #16]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800236a:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 800236c:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 800236e:	4770      	bx	lr
 8002370:	e000ed00 	.word	0xe000ed00

08002374 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002374:	b570      	push	{r4, r5, r6, lr}
 8002376:	b082      	sub	sp, #8
  uint32_t position = 0x00u;
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002378:	2400      	movs	r4, #0
  uint32_t position = 0x00u;
 800237a:	46a4      	mov	ip, r4
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800237c:	e0a2      	b.n	80024c4 <HAL_GPIO_Init+0x150>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800237e:	4d7e      	ldr	r5, [pc, #504]	@ (8002578 <HAL_GPIO_Init+0x204>)
 8002380:	42ab      	cmp	r3, r5
 8002382:	d010      	beq.n	80023a6 <HAL_GPIO_Init+0x32>
 8002384:	d907      	bls.n	8002396 <HAL_GPIO_Init+0x22>
 8002386:	4d7d      	ldr	r5, [pc, #500]	@ (800257c <HAL_GPIO_Init+0x208>)
 8002388:	42ab      	cmp	r3, r5
 800238a:	d00c      	beq.n	80023a6 <HAL_GPIO_Init+0x32>
 800238c:	f505 3580 	add.w	r5, r5, #65536	@ 0x10000
 8002390:	42ab      	cmp	r3, r5
 8002392:	d008      	beq.n	80023a6 <HAL_GPIO_Init+0x32>
 8002394:	e013      	b.n	80023be <HAL_GPIO_Init+0x4a>
 8002396:	f5a5 1580 	sub.w	r5, r5, #1048576	@ 0x100000
 800239a:	42ab      	cmp	r3, r5
 800239c:	d003      	beq.n	80023a6 <HAL_GPIO_Init+0x32>
 800239e:	f505 2570 	add.w	r5, r5, #983040	@ 0xf0000
 80023a2:	42ab      	cmp	r3, r5
 80023a4:	d107      	bne.n	80023b6 <HAL_GPIO_Init+0x42>
        case GPIO_MODE_EVT_RISING:
        case GPIO_MODE_EVT_FALLING:
        case GPIO_MODE_EVT_RISING_FALLING:
          /* Check the GPIO pull parameter */
          assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80023a6:	688b      	ldr	r3, [r1, #8]
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d055      	beq.n	8002458 <HAL_GPIO_Init+0xe4>
          {
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
          }
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80023ac:	2b01      	cmp	r3, #1
 80023ae:	d04e      	beq.n	800244e <HAL_GPIO_Init+0xda>
          else /* GPIO_PULLDOWN */
          {
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;

            /* Reset the corresponding ODR bit */
            GPIOx->BRR = ioposition;
 80023b0:	6142      	str	r2, [r0, #20]
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80023b2:	2408      	movs	r4, #8
 80023b4:	e003      	b.n	80023be <HAL_GPIO_Init+0x4a>
      switch (GPIO_Init->Mode)
 80023b6:	f5a5 1580 	sub.w	r5, r5, #1048576	@ 0x100000
 80023ba:	42ab      	cmp	r3, r5
 80023bc:	d0f3      	beq.n	80023a6 <HAL_GPIO_Init+0x32>
          break;
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80023be:	f1be 0fff 	cmp.w	lr, #255	@ 0xff
 80023c2:	d84b      	bhi.n	800245c <HAL_GPIO_Init+0xe8>
 80023c4:	4606      	mov	r6, r0
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80023c6:	ea4f 028c 	mov.w	r2, ip, lsl #2

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80023ca:	6833      	ldr	r3, [r6, #0]
 80023cc:	250f      	movs	r5, #15
 80023ce:	4095      	lsls	r5, r2
 80023d0:	ea23 0305 	bic.w	r3, r3, r5
 80023d4:	fa04 f202 	lsl.w	r2, r4, r2
 80023d8:	4313      	orrs	r3, r2
 80023da:	6033      	str	r3, [r6, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80023dc:	684b      	ldr	r3, [r1, #4]
 80023de:	f013 5f80 	tst.w	r3, #268435456	@ 0x10000000
 80023e2:	d06d      	beq.n	80024c0 <HAL_GPIO_Init+0x14c>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80023e4:	4b66      	ldr	r3, [pc, #408]	@ (8002580 <HAL_GPIO_Init+0x20c>)
 80023e6:	699a      	ldr	r2, [r3, #24]
 80023e8:	f042 0201 	orr.w	r2, r2, #1
 80023ec:	619a      	str	r2, [r3, #24]
 80023ee:	699b      	ldr	r3, [r3, #24]
 80023f0:	f003 0301 	and.w	r3, r3, #1
 80023f4:	9301      	str	r3, [sp, #4]
 80023f6:	9b01      	ldr	r3, [sp, #4]
        temp = AFIO->EXTICR[position >> 2u];
 80023f8:	ea4f 029c 	mov.w	r2, ip, lsr #2
 80023fc:	1c95      	adds	r5, r2, #2
 80023fe:	4b61      	ldr	r3, [pc, #388]	@ (8002584 <HAL_GPIO_Init+0x210>)
 8002400:	f853 6025 	ldr.w	r6, [r3, r5, lsl #2]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002404:	f00c 0503 	and.w	r5, ip, #3
 8002408:	00ad      	lsls	r5, r5, #2
 800240a:	230f      	movs	r3, #15
 800240c:	40ab      	lsls	r3, r5
 800240e:	ea26 0603 	bic.w	r6, r6, r3
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002412:	4b5d      	ldr	r3, [pc, #372]	@ (8002588 <HAL_GPIO_Init+0x214>)
 8002414:	4298      	cmp	r0, r3
 8002416:	d028      	beq.n	800246a <HAL_GPIO_Init+0xf6>
 8002418:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800241c:	4298      	cmp	r0, r3
 800241e:	f000 808d 	beq.w	800253c <HAL_GPIO_Init+0x1c8>
 8002422:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8002426:	4298      	cmp	r0, r3
 8002428:	f000 808a 	beq.w	8002540 <HAL_GPIO_Init+0x1cc>
 800242c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8002430:	4298      	cmp	r0, r3
 8002432:	d018      	beq.n	8002466 <HAL_GPIO_Init+0xf2>
 8002434:	2304      	movs	r3, #4
 8002436:	e019      	b.n	800246c <HAL_GPIO_Init+0xf8>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002438:	68cc      	ldr	r4, [r1, #12]
          break;
 800243a:	e7c0      	b.n	80023be <HAL_GPIO_Init+0x4a>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800243c:	68cc      	ldr	r4, [r1, #12]
 800243e:	3404      	adds	r4, #4
          break;
 8002440:	e7bd      	b.n	80023be <HAL_GPIO_Init+0x4a>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002442:	68cc      	ldr	r4, [r1, #12]
 8002444:	3408      	adds	r4, #8
          break;
 8002446:	e7ba      	b.n	80023be <HAL_GPIO_Init+0x4a>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002448:	68cc      	ldr	r4, [r1, #12]
 800244a:	340c      	adds	r4, #12
          break;
 800244c:	e7b7      	b.n	80023be <HAL_GPIO_Init+0x4a>
            GPIOx->BSRR = ioposition;
 800244e:	6102      	str	r2, [r0, #16]
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002450:	2408      	movs	r4, #8
 8002452:	e7b4      	b.n	80023be <HAL_GPIO_Init+0x4a>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002454:	2400      	movs	r4, #0
 8002456:	e7b2      	b.n	80023be <HAL_GPIO_Init+0x4a>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002458:	2404      	movs	r4, #4
 800245a:	e7b0      	b.n	80023be <HAL_GPIO_Init+0x4a>
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800245c:	1d06      	adds	r6, r0, #4
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800245e:	f1ac 0208 	sub.w	r2, ip, #8
 8002462:	0092      	lsls	r2, r2, #2
 8002464:	e7b1      	b.n	80023ca <HAL_GPIO_Init+0x56>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002466:	2303      	movs	r3, #3
 8002468:	e000      	b.n	800246c <HAL_GPIO_Init+0xf8>
 800246a:	2300      	movs	r3, #0
 800246c:	40ab      	lsls	r3, r5
 800246e:	4333      	orrs	r3, r6
        AFIO->EXTICR[position >> 2u] = temp;
 8002470:	3202      	adds	r2, #2
 8002472:	4d44      	ldr	r5, [pc, #272]	@ (8002584 <HAL_GPIO_Init+0x210>)
 8002474:	f845 3022 	str.w	r3, [r5, r2, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002478:	684b      	ldr	r3, [r1, #4]
 800247a:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 800247e:	d061      	beq.n	8002544 <HAL_GPIO_Init+0x1d0>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002480:	4a42      	ldr	r2, [pc, #264]	@ (800258c <HAL_GPIO_Init+0x218>)
 8002482:	6893      	ldr	r3, [r2, #8]
 8002484:	ea43 030e 	orr.w	r3, r3, lr
 8002488:	6093      	str	r3, [r2, #8]
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800248a:	684b      	ldr	r3, [r1, #4]
 800248c:	f413 1f00 	tst.w	r3, #2097152	@ 0x200000
 8002490:	d05e      	beq.n	8002550 <HAL_GPIO_Init+0x1dc>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002492:	4a3e      	ldr	r2, [pc, #248]	@ (800258c <HAL_GPIO_Init+0x218>)
 8002494:	68d3      	ldr	r3, [r2, #12]
 8002496:	ea43 030e 	orr.w	r3, r3, lr
 800249a:	60d3      	str	r3, [r2, #12]
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800249c:	684b      	ldr	r3, [r1, #4]
 800249e:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 80024a2:	d05b      	beq.n	800255c <HAL_GPIO_Init+0x1e8>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80024a4:	4a39      	ldr	r2, [pc, #228]	@ (800258c <HAL_GPIO_Init+0x218>)
 80024a6:	6853      	ldr	r3, [r2, #4]
 80024a8:	ea43 030e 	orr.w	r3, r3, lr
 80024ac:	6053      	str	r3, [r2, #4]
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80024ae:	684b      	ldr	r3, [r1, #4]
 80024b0:	f413 3f80 	tst.w	r3, #65536	@ 0x10000
 80024b4:	d058      	beq.n	8002568 <HAL_GPIO_Init+0x1f4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80024b6:	4a35      	ldr	r2, [pc, #212]	@ (800258c <HAL_GPIO_Init+0x218>)
 80024b8:	6813      	ldr	r3, [r2, #0]
 80024ba:	ea43 030e 	orr.w	r3, r3, lr
 80024be:	6013      	str	r3, [r2, #0]
          CLEAR_BIT(EXTI->IMR, iocurrent);
        }
      }
    }

	position++;
 80024c0:	f10c 0c01 	add.w	ip, ip, #1
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80024c4:	680b      	ldr	r3, [r1, #0]
 80024c6:	fa33 f20c 	lsrs.w	r2, r3, ip
 80024ca:	d053      	beq.n	8002574 <HAL_GPIO_Init+0x200>
    ioposition = (0x01uL << position);
 80024cc:	2201      	movs	r2, #1
 80024ce:	fa02 f20c 	lsl.w	r2, r2, ip
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80024d2:	ea03 0e02 	and.w	lr, r3, r2
    if (iocurrent == ioposition)
 80024d6:	ea32 0303 	bics.w	r3, r2, r3
 80024da:	d1f1      	bne.n	80024c0 <HAL_GPIO_Init+0x14c>
      switch (GPIO_Init->Mode)
 80024dc:	684b      	ldr	r3, [r1, #4]
 80024de:	2b12      	cmp	r3, #18
 80024e0:	f63f af4d 	bhi.w	800237e <HAL_GPIO_Init+0xa>
 80024e4:	2b12      	cmp	r3, #18
 80024e6:	f63f af6a 	bhi.w	80023be <HAL_GPIO_Init+0x4a>
 80024ea:	a501      	add	r5, pc, #4	@ (adr r5, 80024f0 <HAL_GPIO_Init+0x17c>)
 80024ec:	f855 f023 	ldr.w	pc, [r5, r3, lsl #2]
 80024f0:	080023a7 	.word	0x080023a7
 80024f4:	08002439 	.word	0x08002439
 80024f8:	08002443 	.word	0x08002443
 80024fc:	08002455 	.word	0x08002455
 8002500:	080023bf 	.word	0x080023bf
 8002504:	080023bf 	.word	0x080023bf
 8002508:	080023bf 	.word	0x080023bf
 800250c:	080023bf 	.word	0x080023bf
 8002510:	080023bf 	.word	0x080023bf
 8002514:	080023bf 	.word	0x080023bf
 8002518:	080023bf 	.word	0x080023bf
 800251c:	080023bf 	.word	0x080023bf
 8002520:	080023bf 	.word	0x080023bf
 8002524:	080023bf 	.word	0x080023bf
 8002528:	080023bf 	.word	0x080023bf
 800252c:	080023bf 	.word	0x080023bf
 8002530:	080023bf 	.word	0x080023bf
 8002534:	0800243d 	.word	0x0800243d
 8002538:	08002449 	.word	0x08002449
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800253c:	2301      	movs	r3, #1
 800253e:	e795      	b.n	800246c <HAL_GPIO_Init+0xf8>
 8002540:	2302      	movs	r3, #2
 8002542:	e793      	b.n	800246c <HAL_GPIO_Init+0xf8>
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002544:	4a11      	ldr	r2, [pc, #68]	@ (800258c <HAL_GPIO_Init+0x218>)
 8002546:	6893      	ldr	r3, [r2, #8]
 8002548:	ea23 030e 	bic.w	r3, r3, lr
 800254c:	6093      	str	r3, [r2, #8]
 800254e:	e79c      	b.n	800248a <HAL_GPIO_Init+0x116>
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002550:	4a0e      	ldr	r2, [pc, #56]	@ (800258c <HAL_GPIO_Init+0x218>)
 8002552:	68d3      	ldr	r3, [r2, #12]
 8002554:	ea23 030e 	bic.w	r3, r3, lr
 8002558:	60d3      	str	r3, [r2, #12]
 800255a:	e79f      	b.n	800249c <HAL_GPIO_Init+0x128>
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800255c:	4a0b      	ldr	r2, [pc, #44]	@ (800258c <HAL_GPIO_Init+0x218>)
 800255e:	6853      	ldr	r3, [r2, #4]
 8002560:	ea23 030e 	bic.w	r3, r3, lr
 8002564:	6053      	str	r3, [r2, #4]
 8002566:	e7a2      	b.n	80024ae <HAL_GPIO_Init+0x13a>
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002568:	4a08      	ldr	r2, [pc, #32]	@ (800258c <HAL_GPIO_Init+0x218>)
 800256a:	6813      	ldr	r3, [r2, #0]
 800256c:	ea23 030e 	bic.w	r3, r3, lr
 8002570:	6013      	str	r3, [r2, #0]
 8002572:	e7a5      	b.n	80024c0 <HAL_GPIO_Init+0x14c>
  }
}
 8002574:	b002      	add	sp, #8
 8002576:	bd70      	pop	{r4, r5, r6, pc}
 8002578:	10220000 	.word	0x10220000
 800257c:	10310000 	.word	0x10310000
 8002580:	40021000 	.word	0x40021000
 8002584:	40010000 	.word	0x40010000
 8002588:	40010800 	.word	0x40010800
 800258c:	40010400 	.word	0x40010400

08002590 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8002590:	b538      	push	{r3, r4, r5, lr}
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002592:	f412 4f80 	tst.w	r2, #16384	@ 0x4000
 8002596:	d044      	beq.n	8002622 <HAL_PCD_EP_DB_Receive+0x92>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002598:	6804      	ldr	r4, [r0, #0]
 800259a:	f8b4 3050 	ldrh.w	r3, [r4, #80]	@ 0x50
 800259e:	b29b      	uxth	r3, r3
 80025a0:	f891 c000 	ldrb.w	ip, [r1]
 80025a4:	eb03 03cc 	add.w	r3, r3, ip, lsl #3
 80025a8:	3302      	adds	r3, #2
 80025aa:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 80025ae:	f8b4 4400 	ldrh.w	r4, [r4, #1024]	@ 0x400
 80025b2:	f3c4 0409 	ubfx	r4, r4, #0, #10

    if (ep->xfer_len >= count)
 80025b6:	698b      	ldr	r3, [r1, #24]
 80025b8:	42a3      	cmp	r3, r4
 80025ba:	d328      	bcc.n	800260e <HAL_PCD_EP_DB_Receive+0x7e>
    {
      ep->xfer_len -= count;
 80025bc:	1b1b      	subs	r3, r3, r4
 80025be:	618b      	str	r3, [r1, #24]
    else
    {
      ep->xfer_len = 0U;
    }

    if (ep->xfer_len == 0U)
 80025c0:	698b      	ldr	r3, [r1, #24]
 80025c2:	b97b      	cbnz	r3, 80025e4 <HAL_PCD_EP_DB_Receive+0x54>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80025c4:	6805      	ldr	r5, [r0, #0]
 80025c6:	f835 302c 	ldrh.w	r3, [r5, ip, lsl #2]
 80025ca:	b29b      	uxth	r3, r3
 80025cc:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80025d0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80025d4:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 80025d8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80025dc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80025e0:	f825 302c 	strh.w	r3, [r5, ip, lsl #2]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80025e4:	f012 0f40 	tst.w	r2, #64	@ 0x40
 80025e8:	d00e      	beq.n	8002608 <HAL_PCD_EP_DB_Receive+0x78>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 80025ea:	6802      	ldr	r2, [r0, #0]
 80025ec:	780d      	ldrb	r5, [r1, #0]
 80025ee:	f832 3025 	ldrh.w	r3, [r2, r5, lsl #2]
 80025f2:	b29b      	uxth	r3, r3
 80025f4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80025f8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80025fc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002600:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8002604:	f822 3025 	strh.w	r3, [r2, r5, lsl #2]
    }

    if (count != 0U)
 8002608:	b924      	cbnz	r4, 8002614 <HAL_PCD_EP_DB_Receive+0x84>
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
    }
  }

  return count;
}
 800260a:	4620      	mov	r0, r4
 800260c:	bd38      	pop	{r3, r4, r5, pc}
      ep->xfer_len = 0U;
 800260e:	2300      	movs	r3, #0
 8002610:	618b      	str	r3, [r1, #24]
 8002612:	e7d5      	b.n	80025c0 <HAL_PCD_EP_DB_Receive+0x30>
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8002614:	4623      	mov	r3, r4
 8002616:	890a      	ldrh	r2, [r1, #8]
 8002618:	6949      	ldr	r1, [r1, #20]
 800261a:	6800      	ldr	r0, [r0, #0]
 800261c:	f002 fd44 	bl	80050a8 <USB_ReadPMA>
 8002620:	e7f3      	b.n	800260a <HAL_PCD_EP_DB_Receive+0x7a>
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002622:	6804      	ldr	r4, [r0, #0]
 8002624:	f8b4 3050 	ldrh.w	r3, [r4, #80]	@ 0x50
 8002628:	b29b      	uxth	r3, r3
 800262a:	f891 c000 	ldrb.w	ip, [r1]
 800262e:	eb03 03cc 	add.w	r3, r3, ip, lsl #3
 8002632:	3306      	adds	r3, #6
 8002634:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 8002638:	f8b4 4400 	ldrh.w	r4, [r4, #1024]	@ 0x400
 800263c:	f3c4 0409 	ubfx	r4, r4, #0, #10
    if (ep->xfer_len >= count)
 8002640:	698b      	ldr	r3, [r1, #24]
 8002642:	42a3      	cmp	r3, r4
 8002644:	d32f      	bcc.n	80026a6 <HAL_PCD_EP_DB_Receive+0x116>
      ep->xfer_len -= count;
 8002646:	1b1b      	subs	r3, r3, r4
 8002648:	618b      	str	r3, [r1, #24]
    if (ep->xfer_len == 0U)
 800264a:	698b      	ldr	r3, [r1, #24]
 800264c:	b97b      	cbnz	r3, 800266e <HAL_PCD_EP_DB_Receive+0xde>
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 800264e:	6805      	ldr	r5, [r0, #0]
 8002650:	f835 302c 	ldrh.w	r3, [r5, ip, lsl #2]
 8002654:	b29b      	uxth	r3, r3
 8002656:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800265a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800265e:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8002662:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002666:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800266a:	f825 302c 	strh.w	r3, [r5, ip, lsl #2]
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 800266e:	f012 0f40 	tst.w	r2, #64	@ 0x40
 8002672:	d10f      	bne.n	8002694 <HAL_PCD_EP_DB_Receive+0x104>
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8002674:	6802      	ldr	r2, [r0, #0]
 8002676:	f891 c000 	ldrb.w	ip, [r1]
 800267a:	f832 302c 	ldrh.w	r3, [r2, ip, lsl #2]
 800267e:	b29b      	uxth	r3, r3
 8002680:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002684:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002688:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800268c:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8002690:	f822 302c 	strh.w	r3, [r2, ip, lsl #2]
    if (count != 0U)
 8002694:	2c00      	cmp	r4, #0
 8002696:	d0b8      	beq.n	800260a <HAL_PCD_EP_DB_Receive+0x7a>
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8002698:	4623      	mov	r3, r4
 800269a:	894a      	ldrh	r2, [r1, #10]
 800269c:	6949      	ldr	r1, [r1, #20]
 800269e:	6800      	ldr	r0, [r0, #0]
 80026a0:	f002 fd02 	bl	80050a8 <USB_ReadPMA>
 80026a4:	e7b1      	b.n	800260a <HAL_PCD_EP_DB_Receive+0x7a>
      ep->xfer_len = 0U;
 80026a6:	2300      	movs	r3, #0
 80026a8:	618b      	str	r3, [r1, #24]
 80026aa:	e7ce      	b.n	800264a <HAL_PCD_EP_DB_Receive+0xba>

080026ac <HAL_PCD_Init>:
{
 80026ac:	b538      	push	{r3, r4, r5, lr}
  if (hpcd == NULL)
 80026ae:	2800      	cmp	r0, #0
 80026b0:	d06e      	beq.n	8002790 <HAL_PCD_Init+0xe4>
 80026b2:	4604      	mov	r4, r0
  if (hpcd->State == HAL_PCD_STATE_RESET)
 80026b4:	f890 3291 	ldrb.w	r3, [r0, #657]	@ 0x291
 80026b8:	b1a3      	cbz	r3, 80026e4 <HAL_PCD_Init+0x38>
  hpcd->State = HAL_PCD_STATE_BUSY;
 80026ba:	2303      	movs	r3, #3
 80026bc:	f884 3291 	strb.w	r3, [r4, #657]	@ 0x291
  hpcd->Init.dma_enable = 0U;
 80026c0:	2300      	movs	r3, #0
 80026c2:	7163      	strb	r3, [r4, #5]
  __HAL_PCD_DISABLE(hpcd);
 80026c4:	6820      	ldr	r0, [r4, #0]
 80026c6:	f001 fd82 	bl	80041ce <USB_DisableGlobalInt>
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80026ca:	4623      	mov	r3, r4
 80026cc:	f853 0b04 	ldr.w	r0, [r3], #4
 80026d0:	cb0e      	ldmia	r3, {r1, r2, r3}
 80026d2:	f001 fd6c 	bl	80041ae <USB_CoreInit>
 80026d6:	b150      	cbz	r0, 80026ee <HAL_PCD_Init+0x42>
    hpcd->State = HAL_PCD_STATE_ERROR;
 80026d8:	2302      	movs	r3, #2
 80026da:	f884 3291 	strb.w	r3, [r4, #657]	@ 0x291
    return HAL_ERROR;
 80026de:	2501      	movs	r5, #1
}
 80026e0:	4628      	mov	r0, r5
 80026e2:	bd38      	pop	{r3, r4, r5, pc}
    hpcd->Lock = HAL_UNLOCKED;
 80026e4:	f880 3290 	strb.w	r3, [r0, #656]	@ 0x290
    HAL_PCD_MspInit(hpcd);
 80026e8:	f003 fc72 	bl	8005fd0 <HAL_PCD_MspInit>
 80026ec:	e7e5      	b.n	80026ba <HAL_PCD_Init+0xe>
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 80026ee:	2100      	movs	r1, #0
 80026f0:	6820      	ldr	r0, [r4, #0]
 80026f2:	f001 fd76 	bl	80041e2 <USB_SetCurrentMode>
 80026f6:	4603      	mov	r3, r0
 80026f8:	b908      	cbnz	r0, 80026fe <HAL_PCD_Init+0x52>
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80026fa:	4602      	mov	r2, r0
 80026fc:	e015      	b.n	800272a <HAL_PCD_Init+0x7e>
    hpcd->State = HAL_PCD_STATE_ERROR;
 80026fe:	2302      	movs	r3, #2
 8002700:	f884 3291 	strb.w	r3, [r4, #657]	@ 0x291
    return HAL_ERROR;
 8002704:	2501      	movs	r5, #1
 8002706:	e7eb      	b.n	80026e0 <HAL_PCD_Init+0x34>
    hpcd->IN_ep[i].is_in = 1U;
 8002708:	eb02 0182 	add.w	r1, r2, r2, lsl #2
 800270c:	eb04 01c1 	add.w	r1, r4, r1, lsl #3
 8002710:	2001      	movs	r0, #1
 8002712:	7448      	strb	r0, [r1, #17]
    hpcd->IN_ep[i].num = i;
 8002714:	740a      	strb	r2, [r1, #16]
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002716:	2000      	movs	r0, #0
 8002718:	74c8      	strb	r0, [r1, #19]
    hpcd->IN_ep[i].maxpacket = 0U;
 800271a:	6208      	str	r0, [r1, #32]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800271c:	6248      	str	r0, [r1, #36]	@ 0x24
    hpcd->IN_ep[i].xfer_len = 0U;
 800271e:	3201      	adds	r2, #1
 8002720:	eb02 0182 	add.w	r1, r2, r2, lsl #2
 8002724:	00c9      	lsls	r1, r1, #3
 8002726:	5060      	str	r0, [r4, r1]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002728:	b2d2      	uxtb	r2, r2
 800272a:	7920      	ldrb	r0, [r4, #4]
 800272c:	4290      	cmp	r0, r2
 800272e:	d8eb      	bhi.n	8002708 <HAL_PCD_Init+0x5c>
 8002730:	e016      	b.n	8002760 <HAL_PCD_Init+0xb4>
    hpcd->OUT_ep[i].is_in = 0U;
 8002732:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 8002736:	eb04 02c2 	add.w	r2, r4, r2, lsl #3
 800273a:	2100      	movs	r1, #0
 800273c:	f882 1151 	strb.w	r1, [r2, #337]	@ 0x151
    hpcd->OUT_ep[i].num = i;
 8002740:	f882 3150 	strb.w	r3, [r2, #336]	@ 0x150
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002744:	f882 1153 	strb.w	r1, [r2, #339]	@ 0x153
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002748:	f8c2 1160 	str.w	r1, [r2, #352]	@ 0x160
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800274c:	f8c2 1164 	str.w	r1, [r2, #356]	@ 0x164
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002750:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 8002754:	eb04 02c2 	add.w	r2, r4, r2, lsl #3
 8002758:	f8c2 1168 	str.w	r1, [r2, #360]	@ 0x168
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800275c:	3301      	adds	r3, #1
 800275e:	b2db      	uxtb	r3, r3
 8002760:	4298      	cmp	r0, r3
 8002762:	d8e6      	bhi.n	8002732 <HAL_PCD_Init+0x86>
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002764:	4623      	mov	r3, r4
 8002766:	f853 0b04 	ldr.w	r0, [r3], #4
 800276a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800276c:	f001 fd3b 	bl	80041e6 <USB_DevInit>
 8002770:	4605      	mov	r5, r0
 8002772:	b120      	cbz	r0, 800277e <HAL_PCD_Init+0xd2>
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002774:	2302      	movs	r3, #2
 8002776:	f884 3291 	strb.w	r3, [r4, #657]	@ 0x291
    return HAL_ERROR;
 800277a:	2501      	movs	r5, #1
 800277c:	e7b0      	b.n	80026e0 <HAL_PCD_Init+0x34>
  hpcd->USB_Address = 0U;
 800277e:	2300      	movs	r3, #0
 8002780:	7363      	strb	r3, [r4, #13]
  hpcd->State = HAL_PCD_STATE_READY;
 8002782:	2301      	movs	r3, #1
 8002784:	f884 3291 	strb.w	r3, [r4, #657]	@ 0x291
  (void)USB_DevDisconnect(hpcd->Instance);
 8002788:	6820      	ldr	r0, [r4, #0]
 800278a:	f002 f88b 	bl	80048a4 <USB_DevDisconnect>
  return HAL_OK;
 800278e:	e7a7      	b.n	80026e0 <HAL_PCD_Init+0x34>
    return HAL_ERROR;
 8002790:	2501      	movs	r5, #1
 8002792:	e7a5      	b.n	80026e0 <HAL_PCD_Init+0x34>

08002794 <HAL_PCD_Start>:
{
 8002794:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(hpcd);
 8002796:	f890 3290 	ldrb.w	r3, [r0, #656]	@ 0x290
 800279a:	2b01      	cmp	r3, #1
 800279c:	d011      	beq.n	80027c2 <HAL_PCD_Start+0x2e>
 800279e:	4604      	mov	r4, r0
 80027a0:	2501      	movs	r5, #1
 80027a2:	f880 5290 	strb.w	r5, [r0, #656]	@ 0x290
  __HAL_PCD_ENABLE(hpcd);
 80027a6:	6800      	ldr	r0, [r0, #0]
 80027a8:	f001 fd08 	bl	80041bc <USB_EnableGlobalInt>
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 80027ac:	4629      	mov	r1, r5
 80027ae:	4620      	mov	r0, r4
 80027b0:	f003 fd23 	bl	80061fa <HAL_PCDEx_SetConnectionState>
  (void)USB_DevConnect(hpcd->Instance);
 80027b4:	6820      	ldr	r0, [r4, #0]
 80027b6:	f002 f873 	bl	80048a0 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80027ba:	2000      	movs	r0, #0
 80027bc:	f884 0290 	strb.w	r0, [r4, #656]	@ 0x290
}
 80027c0:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(hpcd);
 80027c2:	2002      	movs	r0, #2
 80027c4:	e7fc      	b.n	80027c0 <HAL_PCD_Start+0x2c>

080027c6 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 80027c6:	b570      	push	{r4, r5, r6, lr}
 80027c8:	4605      	mov	r5, r0
 80027ca:	460c      	mov	r4, r1
 80027cc:	4616      	mov	r6, r2
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80027ce:	f012 0f40 	tst.w	r2, #64	@ 0x40
 80027d2:	f000 810e 	beq.w	80029f2 <HAL_PCD_EP_DB_Transmit+0x22c>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80027d6:	6802      	ldr	r2, [r0, #0]
 80027d8:	f8b2 3050 	ldrh.w	r3, [r2, #80]	@ 0x50
 80027dc:	b29b      	uxth	r3, r3
 80027de:	7809      	ldrb	r1, [r1, #0]
 80027e0:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 80027e4:	3302      	adds	r3, #2
 80027e6:	eb02 0243 	add.w	r2, r2, r3, lsl #1
 80027ea:	f8b2 2400 	ldrh.w	r2, [r2, #1024]	@ 0x400
 80027ee:	f3c2 0209 	ubfx	r2, r2, #0, #10

    if (ep->xfer_len > TxPctSize)
 80027f2:	69a3      	ldr	r3, [r4, #24]
 80027f4:	4293      	cmp	r3, r2
 80027f6:	d94e      	bls.n	8002896 <HAL_PCD_EP_DB_Transmit+0xd0>
    {
      ep->xfer_len -= TxPctSize;
 80027f8:	1a9b      	subs	r3, r3, r2
 80027fa:	61a3      	str	r3, [r4, #24]
    {
      ep->xfer_len = 0U;
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 80027fc:	69a3      	ldr	r3, [r4, #24]
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d166      	bne.n	80028d0 <HAL_PCD_EP_DB_Transmit+0x10a>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002802:	7863      	ldrb	r3, [r4, #1]
 8002804:	2b00      	cmp	r3, #0
 8002806:	d149      	bne.n	800289c <HAL_PCD_EP_DB_Transmit+0xd6>
 8002808:	682b      	ldr	r3, [r5, #0]
 800280a:	f8b3 2050 	ldrh.w	r2, [r3, #80]	@ 0x50
 800280e:	b292      	uxth	r2, r2
 8002810:	4413      	add	r3, r2
 8002812:	eb03 1301 	add.w	r3, r3, r1, lsl #4
 8002816:	f8b3 2404 	ldrh.w	r2, [r3, #1028]	@ 0x404
 800281a:	f3c2 0209 	ubfx	r2, r2, #0, #10
 800281e:	f8a3 2404 	strh.w	r2, [r3, #1028]	@ 0x404
 8002822:	f8b3 2404 	ldrh.w	r2, [r3, #1028]	@ 0x404
 8002826:	ea6f 4242 	mvn.w	r2, r2, lsl #17
 800282a:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 800282e:	b292      	uxth	r2, r2
 8002830:	f8a3 2404 	strh.w	r2, [r3, #1028]	@ 0x404
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002834:	682b      	ldr	r3, [r5, #0]
 8002836:	7862      	ldrb	r2, [r4, #1]
 8002838:	2a00      	cmp	r2, #0
 800283a:	d13c      	bne.n	80028b6 <HAL_PCD_EP_DB_Transmit+0xf0>
 800283c:	f8b3 2050 	ldrh.w	r2, [r3, #80]	@ 0x50
 8002840:	b292      	uxth	r2, r2
 8002842:	4413      	add	r3, r2
 8002844:	7822      	ldrb	r2, [r4, #0]
 8002846:	eb03 1302 	add.w	r3, r3, r2, lsl #4
 800284a:	f8b3 240c 	ldrh.w	r2, [r3, #1036]	@ 0x40c
 800284e:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8002852:	f8a3 240c 	strh.w	r2, [r3, #1036]	@ 0x40c
 8002856:	f8b3 240c 	ldrh.w	r2, [r3, #1036]	@ 0x40c
 800285a:	ea6f 4242 	mvn.w	r2, r2, lsl #17
 800285e:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 8002862:	b292      	uxth	r2, r2
 8002864:	f8a3 240c 	strh.w	r2, [r3, #1036]	@ 0x40c

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002868:	7821      	ldrb	r1, [r4, #0]
 800286a:	4628      	mov	r0, r5
 800286c:	f003 fbe4 	bl	8006038 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002870:	f416 4f80 	tst.w	r6, #16384	@ 0x4000
 8002874:	d041      	beq.n	80028fa <HAL_PCD_EP_DB_Transmit+0x134>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8002876:	682a      	ldr	r2, [r5, #0]
 8002878:	7821      	ldrb	r1, [r4, #0]
 800287a:	f832 3021 	ldrh.w	r3, [r2, r1, lsl #2]
 800287e:	b29b      	uxth	r3, r3
 8002880:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002884:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002888:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800288c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002890:	f822 3021 	strh.w	r3, [r2, r1, lsl #2]
 8002894:	e031      	b.n	80028fa <HAL_PCD_EP_DB_Transmit+0x134>
      ep->xfer_len = 0U;
 8002896:	2300      	movs	r3, #0
 8002898:	61a3      	str	r3, [r4, #24]
 800289a:	e7af      	b.n	80027fc <HAL_PCD_EP_DB_Transmit+0x36>
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800289c:	2b01      	cmp	r3, #1
 800289e:	d1c9      	bne.n	8002834 <HAL_PCD_EP_DB_Transmit+0x6e>
 80028a0:	682b      	ldr	r3, [r5, #0]
 80028a2:	f8b3 2050 	ldrh.w	r2, [r3, #80]	@ 0x50
 80028a6:	b292      	uxth	r2, r2
 80028a8:	4413      	add	r3, r2
 80028aa:	eb03 1301 	add.w	r3, r3, r1, lsl #4
 80028ae:	2200      	movs	r2, #0
 80028b0:	f8a3 2404 	strh.w	r2, [r3, #1028]	@ 0x404
 80028b4:	e7be      	b.n	8002834 <HAL_PCD_EP_DB_Transmit+0x6e>
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80028b6:	2a01      	cmp	r2, #1
 80028b8:	d1d6      	bne.n	8002868 <HAL_PCD_EP_DB_Transmit+0xa2>
 80028ba:	f8b3 2050 	ldrh.w	r2, [r3, #80]	@ 0x50
 80028be:	b292      	uxth	r2, r2
 80028c0:	4413      	add	r3, r2
 80028c2:	7822      	ldrb	r2, [r4, #0]
 80028c4:	eb03 1302 	add.w	r3, r3, r2, lsl #4
 80028c8:	2200      	movs	r2, #0
 80028ca:	f8a3 240c 	strh.w	r2, [r3, #1036]	@ 0x40c
 80028ce:	e7cb      	b.n	8002868 <HAL_PCD_EP_DB_Transmit+0xa2>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80028d0:	f416 4f80 	tst.w	r6, #16384	@ 0x4000
 80028d4:	d00d      	beq.n	80028f2 <HAL_PCD_EP_DB_Transmit+0x12c>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80028d6:	6828      	ldr	r0, [r5, #0]
 80028d8:	f830 3021 	ldrh.w	r3, [r0, r1, lsl #2]
 80028dc:	b29b      	uxth	r3, r3
 80028de:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80028e2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80028e6:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80028ea:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80028ee:	f820 3021 	strh.w	r3, [r0, r1, lsl #2]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 80028f2:	f894 3024 	ldrb.w	r3, [r4, #36]	@ 0x24
 80028f6:	2b01      	cmp	r3, #1
 80028f8:	d012      	beq.n	8002920 <HAL_PCD_EP_DB_Transmit+0x15a>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 80028fa:	682a      	ldr	r2, [r5, #0]
 80028fc:	7821      	ldrb	r1, [r4, #0]
 80028fe:	f832 3021 	ldrh.w	r3, [r2, r1, lsl #2]
 8002902:	b29b      	uxth	r3, r3
 8002904:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002908:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800290c:	f083 0330 	eor.w	r3, r3, #48	@ 0x30
 8002910:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002914:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002918:	f822 3021 	strh.w	r3, [r2, r1, lsl #2]

  return HAL_OK;
}
 800291c:	2000      	movs	r0, #0
 800291e:	bd70      	pop	{r4, r5, r6, pc}
        ep->xfer_buff += TxPctSize;
 8002920:	6963      	ldr	r3, [r4, #20]
 8002922:	4413      	add	r3, r2
 8002924:	6163      	str	r3, [r4, #20]
        ep->xfer_count += TxPctSize;
 8002926:	69e3      	ldr	r3, [r4, #28]
 8002928:	4413      	add	r3, r2
 800292a:	61e3      	str	r3, [r4, #28]
        if (ep->xfer_len_db >= ep->maxpacket)
 800292c:	6a21      	ldr	r1, [r4, #32]
 800292e:	6923      	ldr	r3, [r4, #16]
 8002930:	4299      	cmp	r1, r3
 8002932:	d324      	bcc.n	800297e <HAL_PCD_EP_DB_Transmit+0x1b8>
          ep->xfer_len_db -= len;
 8002934:	1ac9      	subs	r1, r1, r3
 8002936:	6221      	str	r1, [r4, #32]
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8002938:	7862      	ldrb	r2, [r4, #1]
 800293a:	2a00      	cmp	r2, #0
 800293c:	d144      	bne.n	80029c8 <HAL_PCD_EP_DB_Transmit+0x202>
 800293e:	682a      	ldr	r2, [r5, #0]
 8002940:	f8b2 1050 	ldrh.w	r1, [r2, #80]	@ 0x50
 8002944:	b289      	uxth	r1, r1
 8002946:	440a      	add	r2, r1
 8002948:	7821      	ldrb	r1, [r4, #0]
 800294a:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 800294e:	f8b2 1404 	ldrh.w	r1, [r2, #1028]	@ 0x404
 8002952:	f3c1 0109 	ubfx	r1, r1, #0, #10
 8002956:	f8a2 1404 	strh.w	r1, [r2, #1028]	@ 0x404
 800295a:	2b3e      	cmp	r3, #62	@ 0x3e
 800295c:	d91b      	bls.n	8002996 <HAL_PCD_EP_DB_Transmit+0x1d0>
 800295e:	0958      	lsrs	r0, r3, #5
 8002960:	f013 0f1f 	tst.w	r3, #31
 8002964:	d100      	bne.n	8002968 <HAL_PCD_EP_DB_Transmit+0x1a2>
 8002966:	3801      	subs	r0, #1
 8002968:	f8b2 1404 	ldrh.w	r1, [r2, #1028]	@ 0x404
 800296c:	b289      	uxth	r1, r1
 800296e:	0280      	lsls	r0, r0, #10
 8002970:	b280      	uxth	r0, r0
 8002972:	4301      	orrs	r1, r0
 8002974:	f441 4100 	orr.w	r1, r1, #32768	@ 0x8000
 8002978:	f8a2 1404 	strh.w	r1, [r2, #1028]	@ 0x404
 800297c:	e026      	b.n	80029cc <HAL_PCD_EP_DB_Transmit+0x206>
        else if (ep->xfer_len_db == 0U)
 800297e:	b921      	cbnz	r1, 800298a <HAL_PCD_EP_DB_Transmit+0x1c4>
          ep->xfer_fill_db = 0U;
 8002980:	2300      	movs	r3, #0
 8002982:	f884 3024 	strb.w	r3, [r4, #36]	@ 0x24
          len = TxPctSize;
 8002986:	4613      	mov	r3, r2
 8002988:	e7d6      	b.n	8002938 <HAL_PCD_EP_DB_Transmit+0x172>
          ep->xfer_fill_db = 0U;
 800298a:	2300      	movs	r3, #0
 800298c:	f884 3024 	strb.w	r3, [r4, #36]	@ 0x24
          ep->xfer_len_db = 0U;
 8002990:	6223      	str	r3, [r4, #32]
          len = ep->xfer_len_db;
 8002992:	460b      	mov	r3, r1
 8002994:	e7d0      	b.n	8002938 <HAL_PCD_EP_DB_Transmit+0x172>
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8002996:	b94b      	cbnz	r3, 80029ac <HAL_PCD_EP_DB_Transmit+0x1e6>
 8002998:	f8b2 1404 	ldrh.w	r1, [r2, #1028]	@ 0x404
 800299c:	ea6f 4141 	mvn.w	r1, r1, lsl #17
 80029a0:	ea6f 4151 	mvn.w	r1, r1, lsr #17
 80029a4:	b289      	uxth	r1, r1
 80029a6:	f8a2 1404 	strh.w	r1, [r2, #1028]	@ 0x404
 80029aa:	e00f      	b.n	80029cc <HAL_PCD_EP_DB_Transmit+0x206>
 80029ac:	0859      	lsrs	r1, r3, #1
 80029ae:	f013 0f01 	tst.w	r3, #1
 80029b2:	d000      	beq.n	80029b6 <HAL_PCD_EP_DB_Transmit+0x1f0>
 80029b4:	3101      	adds	r1, #1
 80029b6:	f8b2 0404 	ldrh.w	r0, [r2, #1028]	@ 0x404
 80029ba:	b280      	uxth	r0, r0
 80029bc:	0289      	lsls	r1, r1, #10
 80029be:	b289      	uxth	r1, r1
 80029c0:	4301      	orrs	r1, r0
 80029c2:	f8a2 1404 	strh.w	r1, [r2, #1028]	@ 0x404
 80029c6:	e001      	b.n	80029cc <HAL_PCD_EP_DB_Transmit+0x206>
 80029c8:	2a01      	cmp	r2, #1
 80029ca:	d006      	beq.n	80029da <HAL_PCD_EP_DB_Transmit+0x214>
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 80029cc:	b29b      	uxth	r3, r3
 80029ce:	8922      	ldrh	r2, [r4, #8]
 80029d0:	6961      	ldr	r1, [r4, #20]
 80029d2:	6828      	ldr	r0, [r5, #0]
 80029d4:	f001 ff6e 	bl	80048b4 <USB_WritePMA>
 80029d8:	e78f      	b.n	80028fa <HAL_PCD_EP_DB_Transmit+0x134>
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80029da:	682a      	ldr	r2, [r5, #0]
 80029dc:	f8b2 1050 	ldrh.w	r1, [r2, #80]	@ 0x50
 80029e0:	b289      	uxth	r1, r1
 80029e2:	440a      	add	r2, r1
 80029e4:	7821      	ldrb	r1, [r4, #0]
 80029e6:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 80029ea:	b299      	uxth	r1, r3
 80029ec:	f8a2 1404 	strh.w	r1, [r2, #1028]	@ 0x404
 80029f0:	e7ec      	b.n	80029cc <HAL_PCD_EP_DB_Transmit+0x206>
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80029f2:	6802      	ldr	r2, [r0, #0]
 80029f4:	f8b2 3050 	ldrh.w	r3, [r2, #80]	@ 0x50
 80029f8:	b29b      	uxth	r3, r3
 80029fa:	7809      	ldrb	r1, [r1, #0]
 80029fc:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 8002a00:	3306      	adds	r3, #6
 8002a02:	eb02 0243 	add.w	r2, r2, r3, lsl #1
 8002a06:	f8b2 2400 	ldrh.w	r2, [r2, #1024]	@ 0x400
 8002a0a:	f3c2 0209 	ubfx	r2, r2, #0, #10
    if (ep->xfer_len >= TxPctSize)
 8002a0e:	69a3      	ldr	r3, [r4, #24]
 8002a10:	4293      	cmp	r3, r2
 8002a12:	d34f      	bcc.n	8002ab4 <HAL_PCD_EP_DB_Transmit+0x2ee>
      ep->xfer_len -= TxPctSize;
 8002a14:	1a9b      	subs	r3, r3, r2
 8002a16:	61a3      	str	r3, [r4, #24]
    if (ep->xfer_len == 0U)
 8002a18:	69a3      	ldr	r3, [r4, #24]
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d167      	bne.n	8002aee <HAL_PCD_EP_DB_Transmit+0x328>
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002a1e:	7863      	ldrb	r3, [r4, #1]
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d14a      	bne.n	8002aba <HAL_PCD_EP_DB_Transmit+0x2f4>
 8002a24:	682b      	ldr	r3, [r5, #0]
 8002a26:	f8b3 2050 	ldrh.w	r2, [r3, #80]	@ 0x50
 8002a2a:	b292      	uxth	r2, r2
 8002a2c:	4413      	add	r3, r2
 8002a2e:	eb03 1301 	add.w	r3, r3, r1, lsl #4
 8002a32:	f8b3 2404 	ldrh.w	r2, [r3, #1028]	@ 0x404
 8002a36:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8002a3a:	f8a3 2404 	strh.w	r2, [r3, #1028]	@ 0x404
 8002a3e:	f8b3 2404 	ldrh.w	r2, [r3, #1028]	@ 0x404
 8002a42:	ea6f 4242 	mvn.w	r2, r2, lsl #17
 8002a46:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 8002a4a:	b292      	uxth	r2, r2
 8002a4c:	f8a3 2404 	strh.w	r2, [r3, #1028]	@ 0x404
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002a50:	682b      	ldr	r3, [r5, #0]
 8002a52:	7862      	ldrb	r2, [r4, #1]
 8002a54:	2a00      	cmp	r2, #0
 8002a56:	d13d      	bne.n	8002ad4 <HAL_PCD_EP_DB_Transmit+0x30e>
 8002a58:	f8b3 2050 	ldrh.w	r2, [r3, #80]	@ 0x50
 8002a5c:	b292      	uxth	r2, r2
 8002a5e:	4413      	add	r3, r2
 8002a60:	7822      	ldrb	r2, [r4, #0]
 8002a62:	eb03 1302 	add.w	r3, r3, r2, lsl #4
 8002a66:	f8b3 240c 	ldrh.w	r2, [r3, #1036]	@ 0x40c
 8002a6a:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8002a6e:	f8a3 240c 	strh.w	r2, [r3, #1036]	@ 0x40c
 8002a72:	f8b3 240c 	ldrh.w	r2, [r3, #1036]	@ 0x40c
 8002a76:	ea6f 4242 	mvn.w	r2, r2, lsl #17
 8002a7a:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 8002a7e:	b292      	uxth	r2, r2
 8002a80:	f8a3 240c 	strh.w	r2, [r3, #1036]	@ 0x40c
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002a84:	7821      	ldrb	r1, [r4, #0]
 8002a86:	4628      	mov	r0, r5
 8002a88:	f003 fad6 	bl	8006038 <HAL_PCD_DataInStageCallback>
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8002a8c:	f416 4f80 	tst.w	r6, #16384	@ 0x4000
 8002a90:	f47f af33 	bne.w	80028fa <HAL_PCD_EP_DB_Transmit+0x134>
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8002a94:	682a      	ldr	r2, [r5, #0]
 8002a96:	7821      	ldrb	r1, [r4, #0]
 8002a98:	f832 3021 	ldrh.w	r3, [r2, r1, lsl #2]
 8002a9c:	b29b      	uxth	r3, r3
 8002a9e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002aa2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002aa6:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002aaa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002aae:	f822 3021 	strh.w	r3, [r2, r1, lsl #2]
 8002ab2:	e722      	b.n	80028fa <HAL_PCD_EP_DB_Transmit+0x134>
      ep->xfer_len = 0U;
 8002ab4:	2300      	movs	r3, #0
 8002ab6:	61a3      	str	r3, [r4, #24]
 8002ab8:	e7ae      	b.n	8002a18 <HAL_PCD_EP_DB_Transmit+0x252>
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002aba:	2b01      	cmp	r3, #1
 8002abc:	d1c8      	bne.n	8002a50 <HAL_PCD_EP_DB_Transmit+0x28a>
 8002abe:	682b      	ldr	r3, [r5, #0]
 8002ac0:	f8b3 2050 	ldrh.w	r2, [r3, #80]	@ 0x50
 8002ac4:	b292      	uxth	r2, r2
 8002ac6:	4413      	add	r3, r2
 8002ac8:	eb03 1301 	add.w	r3, r3, r1, lsl #4
 8002acc:	2200      	movs	r2, #0
 8002ace:	f8a3 2404 	strh.w	r2, [r3, #1028]	@ 0x404
 8002ad2:	e7bd      	b.n	8002a50 <HAL_PCD_EP_DB_Transmit+0x28a>
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002ad4:	2a01      	cmp	r2, #1
 8002ad6:	d1d5      	bne.n	8002a84 <HAL_PCD_EP_DB_Transmit+0x2be>
 8002ad8:	f8b3 2050 	ldrh.w	r2, [r3, #80]	@ 0x50
 8002adc:	b292      	uxth	r2, r2
 8002ade:	4413      	add	r3, r2
 8002ae0:	7822      	ldrb	r2, [r4, #0]
 8002ae2:	eb03 1302 	add.w	r3, r3, r2, lsl #4
 8002ae6:	2200      	movs	r2, #0
 8002ae8:	f8a3 240c 	strh.w	r2, [r3, #1036]	@ 0x40c
 8002aec:	e7ca      	b.n	8002a84 <HAL_PCD_EP_DB_Transmit+0x2be>
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8002aee:	f416 4f80 	tst.w	r6, #16384	@ 0x4000
 8002af2:	d10d      	bne.n	8002b10 <HAL_PCD_EP_DB_Transmit+0x34a>
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8002af4:	6828      	ldr	r0, [r5, #0]
 8002af6:	f830 3021 	ldrh.w	r3, [r0, r1, lsl #2]
 8002afa:	b29b      	uxth	r3, r3
 8002afc:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002b00:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002b04:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002b08:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002b0c:	f820 3021 	strh.w	r3, [r0, r1, lsl #2]
      if (ep->xfer_fill_db == 1U)
 8002b10:	f894 3024 	ldrb.w	r3, [r4, #36]	@ 0x24
 8002b14:	2b01      	cmp	r3, #1
 8002b16:	f47f aef0 	bne.w	80028fa <HAL_PCD_EP_DB_Transmit+0x134>
        ep->xfer_buff += TxPctSize;
 8002b1a:	6963      	ldr	r3, [r4, #20]
 8002b1c:	4413      	add	r3, r2
 8002b1e:	6163      	str	r3, [r4, #20]
        ep->xfer_count += TxPctSize;
 8002b20:	69e3      	ldr	r3, [r4, #28]
 8002b22:	4413      	add	r3, r2
 8002b24:	61e3      	str	r3, [r4, #28]
        if (ep->xfer_len_db >= ep->maxpacket)
 8002b26:	6a21      	ldr	r1, [r4, #32]
 8002b28:	6923      	ldr	r3, [r4, #16]
 8002b2a:	4299      	cmp	r1, r3
 8002b2c:	d324      	bcc.n	8002b78 <HAL_PCD_EP_DB_Transmit+0x3b2>
          ep->xfer_len_db -= len;
 8002b2e:	1ac9      	subs	r1, r1, r3
 8002b30:	6221      	str	r1, [r4, #32]
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8002b32:	682a      	ldr	r2, [r5, #0]
 8002b34:	7861      	ldrb	r1, [r4, #1]
 8002b36:	2900      	cmp	r1, #0
 8002b38:	d143      	bne.n	8002bc2 <HAL_PCD_EP_DB_Transmit+0x3fc>
 8002b3a:	f8b2 1050 	ldrh.w	r1, [r2, #80]	@ 0x50
 8002b3e:	b289      	uxth	r1, r1
 8002b40:	440a      	add	r2, r1
 8002b42:	7821      	ldrb	r1, [r4, #0]
 8002b44:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 8002b48:	f8b2 140c 	ldrh.w	r1, [r2, #1036]	@ 0x40c
 8002b4c:	f3c1 0109 	ubfx	r1, r1, #0, #10
 8002b50:	f8a2 140c 	strh.w	r1, [r2, #1036]	@ 0x40c
 8002b54:	2b3e      	cmp	r3, #62	@ 0x3e
 8002b56:	d91b      	bls.n	8002b90 <HAL_PCD_EP_DB_Transmit+0x3ca>
 8002b58:	0958      	lsrs	r0, r3, #5
 8002b5a:	f013 0f1f 	tst.w	r3, #31
 8002b5e:	d100      	bne.n	8002b62 <HAL_PCD_EP_DB_Transmit+0x39c>
 8002b60:	3801      	subs	r0, #1
 8002b62:	f8b2 140c 	ldrh.w	r1, [r2, #1036]	@ 0x40c
 8002b66:	b289      	uxth	r1, r1
 8002b68:	0280      	lsls	r0, r0, #10
 8002b6a:	b280      	uxth	r0, r0
 8002b6c:	4301      	orrs	r1, r0
 8002b6e:	f441 4100 	orr.w	r1, r1, #32768	@ 0x8000
 8002b72:	f8a2 140c 	strh.w	r1, [r2, #1036]	@ 0x40c
 8002b76:	e026      	b.n	8002bc6 <HAL_PCD_EP_DB_Transmit+0x400>
        else if (ep->xfer_len_db == 0U)
 8002b78:	b921      	cbnz	r1, 8002b84 <HAL_PCD_EP_DB_Transmit+0x3be>
          ep->xfer_fill_db = 0U;
 8002b7a:	2300      	movs	r3, #0
 8002b7c:	f884 3024 	strb.w	r3, [r4, #36]	@ 0x24
          len = TxPctSize;
 8002b80:	4613      	mov	r3, r2
 8002b82:	e7d6      	b.n	8002b32 <HAL_PCD_EP_DB_Transmit+0x36c>
          ep->xfer_len_db = 0U;
 8002b84:	2300      	movs	r3, #0
 8002b86:	6223      	str	r3, [r4, #32]
          ep->xfer_fill_db = 0;
 8002b88:	f884 3024 	strb.w	r3, [r4, #36]	@ 0x24
          len = ep->xfer_len_db;
 8002b8c:	460b      	mov	r3, r1
 8002b8e:	e7d0      	b.n	8002b32 <HAL_PCD_EP_DB_Transmit+0x36c>
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8002b90:	b94b      	cbnz	r3, 8002ba6 <HAL_PCD_EP_DB_Transmit+0x3e0>
 8002b92:	f8b2 140c 	ldrh.w	r1, [r2, #1036]	@ 0x40c
 8002b96:	ea6f 4141 	mvn.w	r1, r1, lsl #17
 8002b9a:	ea6f 4151 	mvn.w	r1, r1, lsr #17
 8002b9e:	b289      	uxth	r1, r1
 8002ba0:	f8a2 140c 	strh.w	r1, [r2, #1036]	@ 0x40c
 8002ba4:	e00f      	b.n	8002bc6 <HAL_PCD_EP_DB_Transmit+0x400>
 8002ba6:	0859      	lsrs	r1, r3, #1
 8002ba8:	f013 0f01 	tst.w	r3, #1
 8002bac:	d000      	beq.n	8002bb0 <HAL_PCD_EP_DB_Transmit+0x3ea>
 8002bae:	3101      	adds	r1, #1
 8002bb0:	f8b2 040c 	ldrh.w	r0, [r2, #1036]	@ 0x40c
 8002bb4:	b280      	uxth	r0, r0
 8002bb6:	0289      	lsls	r1, r1, #10
 8002bb8:	b289      	uxth	r1, r1
 8002bba:	4301      	orrs	r1, r0
 8002bbc:	f8a2 140c 	strh.w	r1, [r2, #1036]	@ 0x40c
 8002bc0:	e001      	b.n	8002bc6 <HAL_PCD_EP_DB_Transmit+0x400>
 8002bc2:	2901      	cmp	r1, #1
 8002bc4:	d006      	beq.n	8002bd4 <HAL_PCD_EP_DB_Transmit+0x40e>
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8002bc6:	b29b      	uxth	r3, r3
 8002bc8:	8962      	ldrh	r2, [r4, #10]
 8002bca:	6961      	ldr	r1, [r4, #20]
 8002bcc:	6828      	ldr	r0, [r5, #0]
 8002bce:	f001 fe71 	bl	80048b4 <USB_WritePMA>
 8002bd2:	e692      	b.n	80028fa <HAL_PCD_EP_DB_Transmit+0x134>
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8002bd4:	f8b2 1050 	ldrh.w	r1, [r2, #80]	@ 0x50
 8002bd8:	b289      	uxth	r1, r1
 8002bda:	440a      	add	r2, r1
 8002bdc:	7821      	ldrb	r1, [r4, #0]
 8002bde:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 8002be2:	b299      	uxth	r1, r3
 8002be4:	f8a2 140c 	strh.w	r1, [r2, #1036]	@ 0x40c
 8002be8:	e7ed      	b.n	8002bc6 <HAL_PCD_EP_DB_Transmit+0x400>

08002bea <PCD_EP_ISR_Handler>:
{
 8002bea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002bee:	4605      	mov	r5, r0
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8002bf0:	6828      	ldr	r0, [r5, #0]
 8002bf2:	f8b0 3044 	ldrh.w	r3, [r0, #68]	@ 0x44
 8002bf6:	f413 4f00 	tst.w	r3, #32768	@ 0x8000
 8002bfa:	f000 829d 	beq.w	8003138 <PCD_EP_ISR_Handler+0x54e>
    wIstr = hpcd->Instance->ISTR;
 8002bfe:	f8b0 4044 	ldrh.w	r4, [r0, #68]	@ 0x44
 8002c02:	b2a3      	uxth	r3, r4
    if (epindex == 0U)
 8002c04:	f014 040f 	ands.w	r4, r4, #15
 8002c08:	f040 80de 	bne.w	8002dc8 <PCD_EP_ISR_Handler+0x1de>
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8002c0c:	f013 0f10 	tst.w	r3, #16
 8002c10:	d06b      	beq.n	8002cea <PCD_EP_ISR_Handler+0x100>
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8002c12:	8803      	ldrh	r3, [r0, #0]
 8002c14:	b29a      	uxth	r2, r3
        if ((wEPVal & USB_EP_SETUP) != 0U)
 8002c16:	f413 6f00 	tst.w	r3, #2048	@ 0x800
 8002c1a:	f040 8099 	bne.w	8002d50 <PCD_EP_ISR_Handler+0x166>
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8002c1e:	f412 4f00 	tst.w	r2, #32768	@ 0x8000
 8002c22:	d0e5      	beq.n	8002bf0 <PCD_EP_ISR_Handler+0x6>
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002c24:	8803      	ldrh	r3, [r0, #0]
 8002c26:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002c2a:	051b      	lsls	r3, r3, #20
 8002c2c:	0d1b      	lsrs	r3, r3, #20
 8002c2e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002c32:	8003      	strh	r3, [r0, #0]
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002c34:	6828      	ldr	r0, [r5, #0]
 8002c36:	f8b0 3050 	ldrh.w	r3, [r0, #80]	@ 0x50
 8002c3a:	b29b      	uxth	r3, r3
 8002c3c:	f895 2150 	ldrb.w	r2, [r5, #336]	@ 0x150
 8002c40:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8002c44:	3306      	adds	r3, #6
 8002c46:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8002c4a:	f8b3 3400 	ldrh.w	r3, [r3, #1024]	@ 0x400
 8002c4e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002c52:	f8c5 316c 	str.w	r3, [r5, #364]	@ 0x16c
          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8002c56:	b18b      	cbz	r3, 8002c7c <PCD_EP_ISR_Handler+0x92>
 8002c58:	f8d5 1164 	ldr.w	r1, [r5, #356]	@ 0x164
 8002c5c:	b171      	cbz	r1, 8002c7c <PCD_EP_ISR_Handler+0x92>
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8002c5e:	f8b5 2156 	ldrh.w	r2, [r5, #342]	@ 0x156
 8002c62:	f002 fa21 	bl	80050a8 <USB_ReadPMA>
            ep->xfer_buff += ep->xfer_count;
 8002c66:	f8d5 3164 	ldr.w	r3, [r5, #356]	@ 0x164
 8002c6a:	f8d5 216c 	ldr.w	r2, [r5, #364]	@ 0x16c
 8002c6e:	4413      	add	r3, r2
 8002c70:	f8c5 3164 	str.w	r3, [r5, #356]	@ 0x164
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8002c74:	2100      	movs	r1, #0
 8002c76:	4628      	mov	r0, r5
 8002c78:	f003 f9d2 	bl	8006020 <HAL_PCD_DataOutStageCallback>
          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8002c7c:	682a      	ldr	r2, [r5, #0]
 8002c7e:	8813      	ldrh	r3, [r2, #0]
 8002c80:	b299      	uxth	r1, r3
          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 8002c82:	f413 6f00 	tst.w	r3, #2048	@ 0x800
 8002c86:	d1b3      	bne.n	8002bf0 <PCD_EP_ISR_Handler+0x6>
 8002c88:	f401 5140 	and.w	r1, r1, #12288	@ 0x3000
 8002c8c:	f5b1 5f40 	cmp.w	r1, #12288	@ 0x3000
 8002c90:	d0ae      	beq.n	8002bf0 <PCD_EP_ISR_Handler+0x6>
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8002c92:	f8b2 3050 	ldrh.w	r3, [r2, #80]	@ 0x50
 8002c96:	b29b      	uxth	r3, r3
 8002c98:	441a      	add	r2, r3
 8002c9a:	f8b2 340c 	ldrh.w	r3, [r2, #1036]	@ 0x40c
 8002c9e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002ca2:	f8a2 340c 	strh.w	r3, [r2, #1036]	@ 0x40c
 8002ca6:	f8d5 3160 	ldr.w	r3, [r5, #352]	@ 0x160
 8002caa:	2b3e      	cmp	r3, #62	@ 0x3e
 8002cac:	d973      	bls.n	8002d96 <PCD_EP_ISR_Handler+0x1ac>
 8002cae:	0959      	lsrs	r1, r3, #5
 8002cb0:	f013 0f1f 	tst.w	r3, #31
 8002cb4:	d100      	bne.n	8002cb8 <PCD_EP_ISR_Handler+0xce>
 8002cb6:	3901      	subs	r1, #1
 8002cb8:	f8b2 340c 	ldrh.w	r3, [r2, #1036]	@ 0x40c
 8002cbc:	b29b      	uxth	r3, r3
 8002cbe:	0289      	lsls	r1, r1, #10
 8002cc0:	b289      	uxth	r1, r1
 8002cc2:	430b      	orrs	r3, r1
 8002cc4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002cc8:	f8a2 340c 	strh.w	r3, [r2, #1036]	@ 0x40c
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8002ccc:	682a      	ldr	r2, [r5, #0]
 8002cce:	8813      	ldrh	r3, [r2, #0]
 8002cd0:	b29b      	uxth	r3, r3
 8002cd2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8002cd6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002cda:	f483 5340 	eor.w	r3, r3, #12288	@ 0x3000
 8002cde:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002ce2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002ce6:	8013      	strh	r3, [r2, #0]
 8002ce8:	e782      	b.n	8002bf0 <PCD_EP_ISR_Handler+0x6>
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002cea:	8803      	ldrh	r3, [r0, #0]
 8002cec:	b29b      	uxth	r3, r3
 8002cee:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 8002cf2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002cf6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002cfa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002cfe:	b29b      	uxth	r3, r3
 8002d00:	8003      	strh	r3, [r0, #0]
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8002d02:	682a      	ldr	r2, [r5, #0]
 8002d04:	f8b2 3050 	ldrh.w	r3, [r2, #80]	@ 0x50
 8002d08:	b29b      	uxth	r3, r3
 8002d0a:	7c29      	ldrb	r1, [r5, #16]
 8002d0c:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 8002d10:	3302      	adds	r3, #2
 8002d12:	eb02 0243 	add.w	r2, r2, r3, lsl #1
 8002d16:	f8b2 3400 	ldrh.w	r3, [r2, #1024]	@ 0x400
 8002d1a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002d1e:	62eb      	str	r3, [r5, #44]	@ 0x2c
        ep->xfer_buff += ep->xfer_count;
 8002d20:	6a6a      	ldr	r2, [r5, #36]	@ 0x24
 8002d22:	441a      	add	r2, r3
 8002d24:	626a      	str	r2, [r5, #36]	@ 0x24
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8002d26:	2100      	movs	r1, #0
 8002d28:	4628      	mov	r0, r5
 8002d2a:	f003 f985 	bl	8006038 <HAL_PCD_DataInStageCallback>
        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8002d2e:	7b6b      	ldrb	r3, [r5, #13]
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	f43f af5d 	beq.w	8002bf0 <PCD_EP_ISR_Handler+0x6>
 8002d36:	6aab      	ldr	r3, [r5, #40]	@ 0x28
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	f47f af59 	bne.w	8002bf0 <PCD_EP_ISR_Handler+0x6>
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8002d3e:	7b6b      	ldrb	r3, [r5, #13]
 8002d40:	682a      	ldr	r2, [r5, #0]
 8002d42:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002d46:	f8a2 304c 	strh.w	r3, [r2, #76]	@ 0x4c
          hpcd->USB_Address = 0U;
 8002d4a:	2300      	movs	r3, #0
 8002d4c:	736b      	strb	r3, [r5, #13]
 8002d4e:	e74f      	b.n	8002bf0 <PCD_EP_ISR_Handler+0x6>
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002d50:	f8b0 3050 	ldrh.w	r3, [r0, #80]	@ 0x50
 8002d54:	b29b      	uxth	r3, r3
 8002d56:	f895 2150 	ldrb.w	r2, [r5, #336]	@ 0x150
 8002d5a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8002d5e:	3306      	adds	r3, #6
 8002d60:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8002d64:	f8b3 3400 	ldrh.w	r3, [r3, #1024]	@ 0x400
 8002d68:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002d6c:	f8c5 316c 	str.w	r3, [r5, #364]	@ 0x16c
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8002d70:	f8b5 2156 	ldrh.w	r2, [r5, #342]	@ 0x156
 8002d74:	f505 7126 	add.w	r1, r5, #664	@ 0x298
 8002d78:	f002 f996 	bl	80050a8 <USB_ReadPMA>
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002d7c:	682a      	ldr	r2, [r5, #0]
 8002d7e:	8813      	ldrh	r3, [r2, #0]
 8002d80:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002d84:	051b      	lsls	r3, r3, #20
 8002d86:	0d1b      	lsrs	r3, r3, #20
 8002d88:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002d8c:	8013      	strh	r3, [r2, #0]
          HAL_PCD_SetupStageCallback(hpcd);
 8002d8e:	4628      	mov	r0, r5
 8002d90:	f003 f93e 	bl	8006010 <HAL_PCD_SetupStageCallback>
 8002d94:	e72c      	b.n	8002bf0 <PCD_EP_ISR_Handler+0x6>
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8002d96:	b94b      	cbnz	r3, 8002dac <PCD_EP_ISR_Handler+0x1c2>
 8002d98:	f8b2 340c 	ldrh.w	r3, [r2, #1036]	@ 0x40c
 8002d9c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002da0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002da4:	b29b      	uxth	r3, r3
 8002da6:	f8a2 340c 	strh.w	r3, [r2, #1036]	@ 0x40c
 8002daa:	e78f      	b.n	8002ccc <PCD_EP_ISR_Handler+0xe2>
 8002dac:	0859      	lsrs	r1, r3, #1
 8002dae:	f013 0f01 	tst.w	r3, #1
 8002db2:	d000      	beq.n	8002db6 <PCD_EP_ISR_Handler+0x1cc>
 8002db4:	3101      	adds	r1, #1
 8002db6:	f8b2 340c 	ldrh.w	r3, [r2, #1036]	@ 0x40c
 8002dba:	b298      	uxth	r0, r3
 8002dbc:	028b      	lsls	r3, r1, #10
 8002dbe:	b29b      	uxth	r3, r3
 8002dc0:	4303      	orrs	r3, r0
 8002dc2:	f8a2 340c 	strh.w	r3, [r2, #1036]	@ 0x40c
 8002dc6:	e781      	b.n	8002ccc <PCD_EP_ISR_Handler+0xe2>
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8002dc8:	f830 3024 	ldrh.w	r3, [r0, r4, lsl #2]
 8002dcc:	b29e      	uxth	r6, r3
      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8002dce:	f413 4f00 	tst.w	r3, #32768	@ 0x8000
 8002dd2:	d150      	bne.n	8002e76 <PCD_EP_ISR_Handler+0x28c>
      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8002dd4:	f016 0f80 	tst.w	r6, #128	@ 0x80
 8002dd8:	f43f af0a 	beq.w	8002bf0 <PCD_EP_ISR_Handler+0x6>
        ep = &hpcd->IN_ep[epindex];
 8002ddc:	eb04 0184 	add.w	r1, r4, r4, lsl #2
 8002de0:	00c9      	lsls	r1, r1, #3
 8002de2:	3110      	adds	r1, #16
 8002de4:	4429      	add	r1, r5
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8002de6:	682a      	ldr	r2, [r5, #0]
 8002de8:	f832 3024 	ldrh.w	r3, [r2, r4, lsl #2]
 8002dec:	b29b      	uxth	r3, r3
 8002dee:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 8002df2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002df6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002dfa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002dfe:	b29b      	uxth	r3, r3
 8002e00:	f822 3024 	strh.w	r3, [r2, r4, lsl #2]
        if (ep->type == EP_TYPE_ISOC)
 8002e04:	eb04 0384 	add.w	r3, r4, r4, lsl #2
 8002e08:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
 8002e0c:	7cdb      	ldrb	r3, [r3, #19]
 8002e0e:	2b01      	cmp	r3, #1
 8002e10:	f000 80f2 	beq.w	8002ff8 <PCD_EP_ISR_Handler+0x40e>
          if ((wEPVal & USB_EP_KIND) == 0U)
 8002e14:	f416 7f80 	tst.w	r6, #256	@ 0x100
 8002e18:	f040 8189 	bne.w	800312e <PCD_EP_ISR_Handler+0x544>
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8002e1c:	6828      	ldr	r0, [r5, #0]
 8002e1e:	f8b0 3050 	ldrh.w	r3, [r0, #80]	@ 0x50
 8002e22:	b29b      	uxth	r3, r3
 8002e24:	eb04 0284 	add.w	r2, r4, r4, lsl #2
 8002e28:	eb05 02c2 	add.w	r2, r5, r2, lsl #3
 8002e2c:	7c16      	ldrb	r6, [r2, #16]
 8002e2e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8002e32:	3302      	adds	r3, #2
 8002e34:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8002e38:	f8b3 3400 	ldrh.w	r3, [r3, #1024]	@ 0x400
 8002e3c:	f3c3 0309 	ubfx	r3, r3, #0, #10
            if (ep->xfer_len > TxPctSize)
 8002e40:	1c62      	adds	r2, r4, #1
 8002e42:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8002e46:	f855 2032 	ldr.w	r2, [r5, r2, lsl #3]
 8002e4a:	429a      	cmp	r2, r3
 8002e4c:	f240 8152 	bls.w	80030f4 <PCD_EP_ISR_Handler+0x50a>
              ep->xfer_len -= TxPctSize;
 8002e50:	1c67      	adds	r7, r4, #1
 8002e52:	eb07 0787 	add.w	r7, r7, r7, lsl #2
 8002e56:	1ad2      	subs	r2, r2, r3
 8002e58:	f845 2037 	str.w	r2, [r5, r7, lsl #3]
            if (ep->xfer_len == 0U)
 8002e5c:	1c62      	adds	r2, r4, #1
 8002e5e:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8002e62:	f855 2032 	ldr.w	r2, [r5, r2, lsl #3]
 8002e66:	2a00      	cmp	r2, #0
 8002e68:	f040 814b 	bne.w	8003102 <PCD_EP_ISR_Handler+0x518>
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002e6c:	4631      	mov	r1, r6
 8002e6e:	4628      	mov	r0, r5
 8002e70:	f003 f8e2 	bl	8006038 <HAL_PCD_DataInStageCallback>
 8002e74:	e6bc      	b.n	8002bf0 <PCD_EP_ISR_Handler+0x6>
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8002e76:	f830 3024 	ldrh.w	r3, [r0, r4, lsl #2]
 8002e7a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002e7e:	051b      	lsls	r3, r3, #20
 8002e80:	0d1b      	lsrs	r3, r3, #20
 8002e82:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002e86:	f820 3024 	strh.w	r3, [r0, r4, lsl #2]
        ep = &hpcd->OUT_ep[epindex];
 8002e8a:	eb04 0184 	add.w	r1, r4, r4, lsl #2
 8002e8e:	00c9      	lsls	r1, r1, #3
 8002e90:	f501 71a8 	add.w	r1, r1, #336	@ 0x150
 8002e94:	eb05 0801 	add.w	r8, r5, r1
        if (ep->doublebuffer == 0U)
 8002e98:	eb04 0384 	add.w	r3, r4, r4, lsl #2
 8002e9c:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
 8002ea0:	f893 315c 	ldrb.w	r3, [r3, #348]	@ 0x15c
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d142      	bne.n	8002f2e <PCD_EP_ISR_Handler+0x344>
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002ea8:	6828      	ldr	r0, [r5, #0]
 8002eaa:	f8b0 3050 	ldrh.w	r3, [r0, #80]	@ 0x50
 8002eae:	b29b      	uxth	r3, r3
 8002eb0:	eb04 0284 	add.w	r2, r4, r4, lsl #2
 8002eb4:	eb05 02c2 	add.w	r2, r5, r2, lsl #3
 8002eb8:	f892 2150 	ldrb.w	r2, [r2, #336]	@ 0x150
 8002ebc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8002ec0:	3306      	adds	r3, #6
 8002ec2:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8002ec6:	f8b3 7400 	ldrh.w	r7, [r3, #1024]	@ 0x400
 8002eca:	f3c7 0709 	ubfx	r7, r7, #0, #10
          if (count != 0U)
 8002ece:	bb17      	cbnz	r7, 8002f16 <PCD_EP_ISR_Handler+0x32c>
        ep->xfer_count += count;
 8002ed0:	eb04 0384 	add.w	r3, r4, r4, lsl #2
 8002ed4:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
 8002ed8:	f8d3 216c 	ldr.w	r2, [r3, #364]	@ 0x16c
 8002edc:	443a      	add	r2, r7
 8002ede:	f8c3 216c 	str.w	r2, [r3, #364]	@ 0x16c
        ep->xfer_buff += count;
 8002ee2:	f8d3 2164 	ldr.w	r2, [r3, #356]	@ 0x164
 8002ee6:	443a      	add	r2, r7
 8002ee8:	f8c3 2164 	str.w	r2, [r3, #356]	@ 0x164
        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8002eec:	f8d3 3168 	ldr.w	r3, [r3, #360]	@ 0x168
 8002ef0:	b13b      	cbz	r3, 8002f02 <PCD_EP_ISR_Handler+0x318>
 8002ef2:	eb04 0384 	add.w	r3, r4, r4, lsl #2
 8002ef6:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
 8002efa:	f8d3 3160 	ldr.w	r3, [r3, #352]	@ 0x160
 8002efe:	429f      	cmp	r7, r3
 8002f00:	d275      	bcs.n	8002fee <PCD_EP_ISR_Handler+0x404>
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8002f02:	eb04 0384 	add.w	r3, r4, r4, lsl #2
 8002f06:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
 8002f0a:	f893 1150 	ldrb.w	r1, [r3, #336]	@ 0x150
 8002f0e:	4628      	mov	r0, r5
 8002f10:	f003 f886 	bl	8006020 <HAL_PCD_DataOutStageCallback>
 8002f14:	e75e      	b.n	8002dd4 <PCD_EP_ISR_Handler+0x1ea>
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8002f16:	eb04 0184 	add.w	r1, r4, r4, lsl #2
 8002f1a:	eb05 01c1 	add.w	r1, r5, r1, lsl #3
 8002f1e:	463b      	mov	r3, r7
 8002f20:	f8b1 2156 	ldrh.w	r2, [r1, #342]	@ 0x156
 8002f24:	f8d1 1164 	ldr.w	r1, [r1, #356]	@ 0x164
 8002f28:	f002 f8be 	bl	80050a8 <USB_ReadPMA>
 8002f2c:	e7d0      	b.n	8002ed0 <PCD_EP_ISR_Handler+0x2e6>
          if (ep->type == EP_TYPE_BULK)
 8002f2e:	eb04 0384 	add.w	r3, r4, r4, lsl #2
 8002f32:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
 8002f36:	f893 3153 	ldrb.w	r3, [r3, #339]	@ 0x153
 8002f3a:	2b02      	cmp	r3, #2
 8002f3c:	d035      	beq.n	8002faa <PCD_EP_ISR_Handler+0x3c0>
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8002f3e:	6829      	ldr	r1, [r5, #0]
 8002f40:	eb04 0284 	add.w	r2, r4, r4, lsl #2
 8002f44:	eb05 02c2 	add.w	r2, r5, r2, lsl #3
 8002f48:	f892 0150 	ldrb.w	r0, [r2, #336]	@ 0x150
 8002f4c:	f831 3020 	ldrh.w	r3, [r1, r0, lsl #2]
 8002f50:	b29b      	uxth	r3, r3
 8002f52:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002f56:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002f5a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002f5e:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8002f62:	f821 3020 	strh.w	r3, [r1, r0, lsl #2]
            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8002f66:	6828      	ldr	r0, [r5, #0]
 8002f68:	f892 2150 	ldrb.w	r2, [r2, #336]	@ 0x150
 8002f6c:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8002f70:	f413 4f80 	tst.w	r3, #16384	@ 0x4000
 8002f74:	d020      	beq.n	8002fb8 <PCD_EP_ISR_Handler+0x3ce>
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002f76:	f8b0 3050 	ldrh.w	r3, [r0, #80]	@ 0x50
 8002f7a:	b29b      	uxth	r3, r3
 8002f7c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8002f80:	3302      	adds	r3, #2
 8002f82:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8002f86:	f8b3 7400 	ldrh.w	r7, [r3, #1024]	@ 0x400
 8002f8a:	f3c7 0709 	ubfx	r7, r7, #0, #10
              if (count != 0U)
 8002f8e:	2f00      	cmp	r7, #0
 8002f90:	d09e      	beq.n	8002ed0 <PCD_EP_ISR_Handler+0x2e6>
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8002f92:	eb04 0184 	add.w	r1, r4, r4, lsl #2
 8002f96:	eb05 01c1 	add.w	r1, r5, r1, lsl #3
 8002f9a:	463b      	mov	r3, r7
 8002f9c:	f8b1 2158 	ldrh.w	r2, [r1, #344]	@ 0x158
 8002fa0:	f8d1 1164 	ldr.w	r1, [r1, #356]	@ 0x164
 8002fa4:	f002 f880 	bl	80050a8 <USB_ReadPMA>
 8002fa8:	e792      	b.n	8002ed0 <PCD_EP_ISR_Handler+0x2e6>
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8002faa:	4632      	mov	r2, r6
 8002fac:	4641      	mov	r1, r8
 8002fae:	4628      	mov	r0, r5
 8002fb0:	f7ff faee 	bl	8002590 <HAL_PCD_EP_DB_Receive>
 8002fb4:	4607      	mov	r7, r0
 8002fb6:	e78b      	b.n	8002ed0 <PCD_EP_ISR_Handler+0x2e6>
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002fb8:	f8b0 3050 	ldrh.w	r3, [r0, #80]	@ 0x50
 8002fbc:	b29b      	uxth	r3, r3
 8002fbe:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8002fc2:	3306      	adds	r3, #6
 8002fc4:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8002fc8:	f8b3 7400 	ldrh.w	r7, [r3, #1024]	@ 0x400
 8002fcc:	f3c7 0709 	ubfx	r7, r7, #0, #10
              if (count != 0U)
 8002fd0:	2f00      	cmp	r7, #0
 8002fd2:	f43f af7d 	beq.w	8002ed0 <PCD_EP_ISR_Handler+0x2e6>
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8002fd6:	eb04 0184 	add.w	r1, r4, r4, lsl #2
 8002fda:	eb05 01c1 	add.w	r1, r5, r1, lsl #3
 8002fde:	463b      	mov	r3, r7
 8002fe0:	f8b1 215a 	ldrh.w	r2, [r1, #346]	@ 0x15a
 8002fe4:	f8d1 1164 	ldr.w	r1, [r1, #356]	@ 0x164
 8002fe8:	f002 f85e 	bl	80050a8 <USB_ReadPMA>
 8002fec:	e770      	b.n	8002ed0 <PCD_EP_ISR_Handler+0x2e6>
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002fee:	4641      	mov	r1, r8
 8002ff0:	6828      	ldr	r0, [r5, #0]
 8002ff2:	f001 fc72 	bl	80048da <USB_EPStartXfer>
 8002ff6:	e6ed      	b.n	8002dd4 <PCD_EP_ISR_Handler+0x1ea>
          ep->xfer_len = 0U;
 8002ff8:	1c63      	adds	r3, r4, #1
 8002ffa:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8002ffe:	00db      	lsls	r3, r3, #3
 8003000:	2200      	movs	r2, #0
 8003002:	50ea      	str	r2, [r5, r3]
          if (ep->doublebuffer != 0U)
 8003004:	eb04 0384 	add.w	r3, r4, r4, lsl #2
 8003008:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
 800300c:	7f1b      	ldrb	r3, [r3, #28]
 800300e:	b31b      	cbz	r3, 8003058 <PCD_EP_ISR_Handler+0x46e>
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8003010:	f016 0f40 	tst.w	r6, #64	@ 0x40
 8003014:	d03b      	beq.n	800308e <PCD_EP_ISR_Handler+0x4a4>
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003016:	eb04 0384 	add.w	r3, r4, r4, lsl #2
 800301a:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
 800301e:	7c5b      	ldrb	r3, [r3, #17]
 8003020:	bb1b      	cbnz	r3, 800306a <PCD_EP_ISR_Handler+0x480>
 8003022:	682b      	ldr	r3, [r5, #0]
 8003024:	f8b3 2050 	ldrh.w	r2, [r3, #80]	@ 0x50
 8003028:	b292      	uxth	r2, r2
 800302a:	4413      	add	r3, r2
 800302c:	eb04 0284 	add.w	r2, r4, r4, lsl #2
 8003030:	eb05 02c2 	add.w	r2, r5, r2, lsl #3
 8003034:	7c12      	ldrb	r2, [r2, #16]
 8003036:	eb03 1302 	add.w	r3, r3, r2, lsl #4
 800303a:	f8b3 2404 	ldrh.w	r2, [r3, #1028]	@ 0x404
 800303e:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8003042:	f8a3 2404 	strh.w	r2, [r3, #1028]	@ 0x404
 8003046:	f8b3 2404 	ldrh.w	r2, [r3, #1028]	@ 0x404
 800304a:	ea6f 4242 	mvn.w	r2, r2, lsl #17
 800304e:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 8003052:	b292      	uxth	r2, r2
 8003054:	f8a3 2404 	strh.w	r2, [r3, #1028]	@ 0x404
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003058:	eb04 0484 	add.w	r4, r4, r4, lsl #2
 800305c:	eb05 04c4 	add.w	r4, r5, r4, lsl #3
 8003060:	7c21      	ldrb	r1, [r4, #16]
 8003062:	4628      	mov	r0, r5
 8003064:	f002 ffe8 	bl	8006038 <HAL_PCD_DataInStageCallback>
 8003068:	e5c2      	b.n	8002bf0 <PCD_EP_ISR_Handler+0x6>
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800306a:	2b01      	cmp	r3, #1
 800306c:	d1f4      	bne.n	8003058 <PCD_EP_ISR_Handler+0x46e>
 800306e:	682b      	ldr	r3, [r5, #0]
 8003070:	f8b3 2050 	ldrh.w	r2, [r3, #80]	@ 0x50
 8003074:	b292      	uxth	r2, r2
 8003076:	4413      	add	r3, r2
 8003078:	eb04 0284 	add.w	r2, r4, r4, lsl #2
 800307c:	eb05 02c2 	add.w	r2, r5, r2, lsl #3
 8003080:	7c12      	ldrb	r2, [r2, #16]
 8003082:	eb03 1302 	add.w	r3, r3, r2, lsl #4
 8003086:	2200      	movs	r2, #0
 8003088:	f8a3 2404 	strh.w	r2, [r3, #1028]	@ 0x404
 800308c:	e7e4      	b.n	8003058 <PCD_EP_ISR_Handler+0x46e>
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800308e:	682b      	ldr	r3, [r5, #0]
 8003090:	eb04 0284 	add.w	r2, r4, r4, lsl #2
 8003094:	eb05 02c2 	add.w	r2, r5, r2, lsl #3
 8003098:	7c52      	ldrb	r2, [r2, #17]
 800309a:	b9d2      	cbnz	r2, 80030d2 <PCD_EP_ISR_Handler+0x4e8>
 800309c:	f8b3 2050 	ldrh.w	r2, [r3, #80]	@ 0x50
 80030a0:	b292      	uxth	r2, r2
 80030a2:	4413      	add	r3, r2
 80030a4:	eb04 0284 	add.w	r2, r4, r4, lsl #2
 80030a8:	eb05 02c2 	add.w	r2, r5, r2, lsl #3
 80030ac:	7c12      	ldrb	r2, [r2, #16]
 80030ae:	eb03 1302 	add.w	r3, r3, r2, lsl #4
 80030b2:	f8b3 240c 	ldrh.w	r2, [r3, #1036]	@ 0x40c
 80030b6:	f3c2 0209 	ubfx	r2, r2, #0, #10
 80030ba:	f8a3 240c 	strh.w	r2, [r3, #1036]	@ 0x40c
 80030be:	f8b3 240c 	ldrh.w	r2, [r3, #1036]	@ 0x40c
 80030c2:	ea6f 4242 	mvn.w	r2, r2, lsl #17
 80030c6:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 80030ca:	b292      	uxth	r2, r2
 80030cc:	f8a3 240c 	strh.w	r2, [r3, #1036]	@ 0x40c
 80030d0:	e7c2      	b.n	8003058 <PCD_EP_ISR_Handler+0x46e>
 80030d2:	2a01      	cmp	r2, #1
 80030d4:	d1c0      	bne.n	8003058 <PCD_EP_ISR_Handler+0x46e>
 80030d6:	f8b3 2050 	ldrh.w	r2, [r3, #80]	@ 0x50
 80030da:	b292      	uxth	r2, r2
 80030dc:	4413      	add	r3, r2
 80030de:	eb04 0284 	add.w	r2, r4, r4, lsl #2
 80030e2:	eb05 02c2 	add.w	r2, r5, r2, lsl #3
 80030e6:	7c12      	ldrb	r2, [r2, #16]
 80030e8:	eb03 1302 	add.w	r3, r3, r2, lsl #4
 80030ec:	2200      	movs	r2, #0
 80030ee:	f8a3 240c 	strh.w	r2, [r3, #1036]	@ 0x40c
 80030f2:	e7b1      	b.n	8003058 <PCD_EP_ISR_Handler+0x46e>
              ep->xfer_len = 0U;
 80030f4:	1c62      	adds	r2, r4, #1
 80030f6:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 80030fa:	00d2      	lsls	r2, r2, #3
 80030fc:	2700      	movs	r7, #0
 80030fe:	50af      	str	r7, [r5, r2]
 8003100:	e6ac      	b.n	8002e5c <PCD_EP_ISR_Handler+0x272>
              ep->xfer_buff += TxPctSize;
 8003102:	eb04 0284 	add.w	r2, r4, r4, lsl #2
 8003106:	eb05 02c2 	add.w	r2, r5, r2, lsl #3
 800310a:	6a56      	ldr	r6, [r2, #36]	@ 0x24
 800310c:	441e      	add	r6, r3
 800310e:	6256      	str	r6, [r2, #36]	@ 0x24
              ep->xfer_count += TxPctSize;
 8003110:	3401      	adds	r4, #1
 8003112:	eb04 0284 	add.w	r2, r4, r4, lsl #2
 8003116:	eb05 02c2 	add.w	r2, r5, r2, lsl #3
 800311a:	6852      	ldr	r2, [r2, #4]
 800311c:	eb04 0484 	add.w	r4, r4, r4, lsl #2
 8003120:	eb05 04c4 	add.w	r4, r5, r4, lsl #3
 8003124:	4413      	add	r3, r2
 8003126:	6063      	str	r3, [r4, #4]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003128:	f001 fbd7 	bl	80048da <USB_EPStartXfer>
 800312c:	e560      	b.n	8002bf0 <PCD_EP_ISR_Handler+0x6>
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 800312e:	4632      	mov	r2, r6
 8003130:	4628      	mov	r0, r5
 8003132:	f7ff fb48 	bl	80027c6 <HAL_PCD_EP_DB_Transmit>
 8003136:	e55b      	b.n	8002bf0 <PCD_EP_ISR_Handler+0x6>
}
 8003138:	2000      	movs	r0, #0
 800313a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800313e <HAL_PCD_SetAddress>:
  __HAL_LOCK(hpcd);
 800313e:	f890 3290 	ldrb.w	r3, [r0, #656]	@ 0x290
 8003142:	2b01      	cmp	r3, #1
 8003144:	d00c      	beq.n	8003160 <HAL_PCD_SetAddress+0x22>
{
 8003146:	b510      	push	{r4, lr}
 8003148:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd);
 800314a:	2301      	movs	r3, #1
 800314c:	f880 3290 	strb.w	r3, [r0, #656]	@ 0x290
  hpcd->USB_Address = address;
 8003150:	7341      	strb	r1, [r0, #13]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8003152:	6800      	ldr	r0, [r0, #0]
 8003154:	f001 fb9e 	bl	8004894 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8003158:	2000      	movs	r0, #0
 800315a:	f884 0290 	strb.w	r0, [r4, #656]	@ 0x290
}
 800315e:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hpcd);
 8003160:	2002      	movs	r0, #2
}
 8003162:	4770      	bx	lr

08003164 <HAL_PCD_IRQHandler>:
{
 8003164:	b510      	push	{r4, lr}
 8003166:	b084      	sub	sp, #16
 8003168:	4604      	mov	r4, r0
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 800316a:	6800      	ldr	r0, [r0, #0]
 800316c:	f001 fb9c 	bl	80048a8 <USB_ReadInterrupts>
  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 8003170:	f410 4f00 	tst.w	r0, #32768	@ 0x8000
 8003174:	d120      	bne.n	80031b8 <HAL_PCD_IRQHandler+0x54>
  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 8003176:	f410 6f80 	tst.w	r0, #1024	@ 0x400
 800317a:	d121      	bne.n	80031c0 <HAL_PCD_IRQHandler+0x5c>
  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 800317c:	f410 4f80 	tst.w	r0, #16384	@ 0x4000
 8003180:	d12f      	bne.n	80031e2 <HAL_PCD_IRQHandler+0x7e>
  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 8003182:	f410 5f00 	tst.w	r0, #8192	@ 0x2000
 8003186:	d137      	bne.n	80031f8 <HAL_PCD_IRQHandler+0x94>
  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 8003188:	f410 5f80 	tst.w	r0, #4096	@ 0x1000
 800318c:	d13e      	bne.n	800320c <HAL_PCD_IRQHandler+0xa8>
  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 800318e:	f410 6f00 	tst.w	r0, #2048	@ 0x800
 8003192:	f040 8087 	bne.w	80032a4 <HAL_PCD_IRQHandler+0x140>
  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 8003196:	f410 7f00 	tst.w	r0, #512	@ 0x200
 800319a:	f040 80ae 	bne.w	80032fa <HAL_PCD_IRQHandler+0x196>
  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 800319e:	f410 7f80 	tst.w	r0, #256	@ 0x100
 80031a2:	d027      	beq.n	80031f4 <HAL_PCD_IRQHandler+0x90>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 80031a4:	6822      	ldr	r2, [r4, #0]
 80031a6:	f8b2 3044 	ldrh.w	r3, [r2, #68]	@ 0x44
 80031aa:	b29b      	uxth	r3, r3
 80031ac:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80031b0:	b29b      	uxth	r3, r3
 80031b2:	f8a2 3044 	strh.w	r3, [r2, #68]	@ 0x44
    return;
 80031b6:	e01d      	b.n	80031f4 <HAL_PCD_IRQHandler+0x90>
    (void)PCD_EP_ISR_Handler(hpcd);
 80031b8:	4620      	mov	r0, r4
 80031ba:	f7ff fd16 	bl	8002bea <PCD_EP_ISR_Handler>
    return;
 80031be:	e019      	b.n	80031f4 <HAL_PCD_IRQHandler+0x90>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 80031c0:	6822      	ldr	r2, [r4, #0]
 80031c2:	f8b2 3044 	ldrh.w	r3, [r2, #68]	@ 0x44
 80031c6:	b29b      	uxth	r3, r3
 80031c8:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80031cc:	b29b      	uxth	r3, r3
 80031ce:	f8a2 3044 	strh.w	r3, [r2, #68]	@ 0x44
    HAL_PCD_ResetCallback(hpcd);
 80031d2:	4620      	mov	r0, r4
 80031d4:	f002 ff41 	bl	800605a <HAL_PCD_ResetCallback>
    (void)HAL_PCD_SetAddress(hpcd, 0U);
 80031d8:	2100      	movs	r1, #0
 80031da:	4620      	mov	r0, r4
 80031dc:	f7ff ffaf 	bl	800313e <HAL_PCD_SetAddress>
    return;
 80031e0:	e008      	b.n	80031f4 <HAL_PCD_IRQHandler+0x90>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 80031e2:	6822      	ldr	r2, [r4, #0]
 80031e4:	f8b2 3044 	ldrh.w	r3, [r2, #68]	@ 0x44
 80031e8:	b29b      	uxth	r3, r3
 80031ea:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80031ee:	b29b      	uxth	r3, r3
 80031f0:	f8a2 3044 	strh.w	r3, [r2, #68]	@ 0x44
}
 80031f4:	b004      	add	sp, #16
 80031f6:	bd10      	pop	{r4, pc}
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 80031f8:	6822      	ldr	r2, [r4, #0]
 80031fa:	f8b2 3044 	ldrh.w	r3, [r2, #68]	@ 0x44
 80031fe:	b29b      	uxth	r3, r3
 8003200:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003204:	b29b      	uxth	r3, r3
 8003206:	f8a2 3044 	strh.w	r3, [r2, #68]	@ 0x44
    return;
 800320a:	e7f3      	b.n	80031f4 <HAL_PCD_IRQHandler+0x90>
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 800320c:	6822      	ldr	r2, [r4, #0]
 800320e:	f8b2 3040 	ldrh.w	r3, [r2, #64]	@ 0x40
 8003212:	b29b      	uxth	r3, r3
 8003214:	f023 0304 	bic.w	r3, r3, #4
 8003218:	b29b      	uxth	r3, r3
 800321a:	f8a2 3040 	strh.w	r3, [r2, #64]	@ 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 800321e:	6822      	ldr	r2, [r4, #0]
 8003220:	f8b2 3040 	ldrh.w	r3, [r2, #64]	@ 0x40
 8003224:	b29b      	uxth	r3, r3
 8003226:	f023 0308 	bic.w	r3, r3, #8
 800322a:	b29b      	uxth	r3, r3
 800322c:	f8a2 3040 	strh.w	r3, [r2, #64]	@ 0x40
    HAL_PCD_ResumeCallback(hpcd);
 8003230:	4620      	mov	r0, r4
 8003232:	f002 ff35 	bl	80060a0 <HAL_PCD_ResumeCallback>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8003236:	6822      	ldr	r2, [r4, #0]
 8003238:	f8b2 3044 	ldrh.w	r3, [r2, #68]	@ 0x44
 800323c:	b29b      	uxth	r3, r3
 800323e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003242:	b29b      	uxth	r3, r3
 8003244:	f8a2 3044 	strh.w	r3, [r2, #68]	@ 0x44
    return;
 8003248:	e7d4      	b.n	80031f4 <HAL_PCD_IRQHandler+0x90>
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 800324a:	6822      	ldr	r2, [r4, #0]
 800324c:	f832 1023 	ldrh.w	r1, [r2, r3, lsl #2]
 8003250:	aa04      	add	r2, sp, #16
 8003252:	eb02 0243 	add.w	r2, r2, r3, lsl #1
 8003256:	f822 1c10 	strh.w	r1, [r2, #-16]
    for (i = 0U; i < 8U; i++)
 800325a:	3301      	adds	r3, #1
 800325c:	b2db      	uxtb	r3, r3
 800325e:	2b07      	cmp	r3, #7
 8003260:	d9f3      	bls.n	800324a <HAL_PCD_IRQHandler+0xe6>
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 8003262:	6822      	ldr	r2, [r4, #0]
 8003264:	f8b2 3040 	ldrh.w	r3, [r2, #64]	@ 0x40
 8003268:	b29b      	uxth	r3, r3
 800326a:	f043 0301 	orr.w	r3, r3, #1
 800326e:	f8a2 3040 	strh.w	r3, [r2, #64]	@ 0x40
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 8003272:	6822      	ldr	r2, [r4, #0]
 8003274:	f8b2 3040 	ldrh.w	r3, [r2, #64]	@ 0x40
 8003278:	b29b      	uxth	r3, r3
 800327a:	f023 0301 	bic.w	r3, r3, #1
 800327e:	b29b      	uxth	r3, r3
 8003280:	f8a2 3040 	strh.w	r3, [r2, #64]	@ 0x40
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 8003284:	6823      	ldr	r3, [r4, #0]
 8003286:	f8b3 2044 	ldrh.w	r2, [r3, #68]	@ 0x44
 800328a:	f412 6f80 	tst.w	r2, #1024	@ 0x400
 800328e:	d0f9      	beq.n	8003284 <HAL_PCD_IRQHandler+0x120>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8003290:	f8b3 2044 	ldrh.w	r2, [r3, #68]	@ 0x44
 8003294:	b292      	uxth	r2, r2
 8003296:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800329a:	b292      	uxth	r2, r2
 800329c:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
    for (i = 0U; i < 8U; i++)
 80032a0:	2300      	movs	r3, #0
 80032a2:	e00b      	b.n	80032bc <HAL_PCD_IRQHandler+0x158>
    for (i = 0U; i < 8U; i++)
 80032a4:	2300      	movs	r3, #0
 80032a6:	e7da      	b.n	800325e <HAL_PCD_IRQHandler+0xfa>
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 80032a8:	6822      	ldr	r2, [r4, #0]
 80032aa:	a904      	add	r1, sp, #16
 80032ac:	eb01 0143 	add.w	r1, r1, r3, lsl #1
 80032b0:	f831 1c10 	ldrh.w	r1, [r1, #-16]
 80032b4:	f822 1023 	strh.w	r1, [r2, r3, lsl #2]
    for (i = 0U; i < 8U; i++)
 80032b8:	3301      	adds	r3, #1
 80032ba:	b2db      	uxtb	r3, r3
 80032bc:	2b07      	cmp	r3, #7
 80032be:	d9f3      	bls.n	80032a8 <HAL_PCD_IRQHandler+0x144>
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 80032c0:	6822      	ldr	r2, [r4, #0]
 80032c2:	f8b2 3040 	ldrh.w	r3, [r2, #64]	@ 0x40
 80032c6:	b29b      	uxth	r3, r3
 80032c8:	f043 0308 	orr.w	r3, r3, #8
 80032cc:	f8a2 3040 	strh.w	r3, [r2, #64]	@ 0x40
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 80032d0:	6822      	ldr	r2, [r4, #0]
 80032d2:	f8b2 3044 	ldrh.w	r3, [r2, #68]	@ 0x44
 80032d6:	b29b      	uxth	r3, r3
 80032d8:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80032dc:	b29b      	uxth	r3, r3
 80032de:	f8a2 3044 	strh.w	r3, [r2, #68]	@ 0x44
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 80032e2:	6822      	ldr	r2, [r4, #0]
 80032e4:	f8b2 3040 	ldrh.w	r3, [r2, #64]	@ 0x40
 80032e8:	b29b      	uxth	r3, r3
 80032ea:	f043 0304 	orr.w	r3, r3, #4
 80032ee:	f8a2 3040 	strh.w	r3, [r2, #64]	@ 0x40
    HAL_PCD_SuspendCallback(hpcd);
 80032f2:	4620      	mov	r0, r4
 80032f4:	f002 fec4 	bl	8006080 <HAL_PCD_SuspendCallback>
    return;
 80032f8:	e77c      	b.n	80031f4 <HAL_PCD_IRQHandler+0x90>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 80032fa:	6822      	ldr	r2, [r4, #0]
 80032fc:	f8b2 3044 	ldrh.w	r3, [r2, #68]	@ 0x44
 8003300:	b29b      	uxth	r3, r3
 8003302:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003306:	b29b      	uxth	r3, r3
 8003308:	f8a2 3044 	strh.w	r3, [r2, #68]	@ 0x44
    HAL_PCD_SOFCallback(hpcd);
 800330c:	4620      	mov	r0, r4
 800330e:	f002 fe9e 	bl	800604e <HAL_PCD_SOFCallback>
    return;
 8003312:	e76f      	b.n	80031f4 <HAL_PCD_IRQHandler+0x90>

08003314 <HAL_PCD_EP_Open>:
{
 8003314:	b510      	push	{r4, lr}
 8003316:	4604      	mov	r4, r0
 8003318:	4608      	mov	r0, r1
  if ((ep_addr & 0x80U) == 0x80U)
 800331a:	f011 0f80 	tst.w	r1, #128	@ 0x80
 800331e:	d126      	bne.n	800336e <HAL_PCD_EP_Open+0x5a>
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003320:	f001 0c07 	and.w	ip, r1, #7
 8003324:	eb0c 0e8c 	add.w	lr, ip, ip, lsl #2
 8003328:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 800332c:	f50e 7ea8 	add.w	lr, lr, #336	@ 0x150
 8003330:	eb04 010e 	add.w	r1, r4, lr
    ep->is_in = 0U;
 8003334:	eb0c 0c8c 	add.w	ip, ip, ip, lsl #2
 8003338:	eb04 0ccc 	add.w	ip, r4, ip, lsl #3
 800333c:	f04f 0e00 	mov.w	lr, #0
 8003340:	f88c e151 	strb.w	lr, [ip, #337]	@ 0x151
  ep->num = ep_addr & EP_ADDR_MSK;
 8003344:	f000 0007 	and.w	r0, r0, #7
 8003348:	7008      	strb	r0, [r1, #0]
  ep->maxpacket = ep_mps;
 800334a:	610a      	str	r2, [r1, #16]
  ep->type = ep_type;
 800334c:	70cb      	strb	r3, [r1, #3]
  if (ep_type == EP_TYPE_BULK)
 800334e:	2b02      	cmp	r3, #2
 8003350:	d01d      	beq.n	800338e <HAL_PCD_EP_Open+0x7a>
  __HAL_LOCK(hpcd);
 8003352:	f894 3290 	ldrb.w	r3, [r4, #656]	@ 0x290
 8003356:	2b01      	cmp	r3, #1
 8003358:	d01c      	beq.n	8003394 <HAL_PCD_EP_Open+0x80>
 800335a:	2301      	movs	r3, #1
 800335c:	f884 3290 	strb.w	r3, [r4, #656]	@ 0x290
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8003360:	6820      	ldr	r0, [r4, #0]
 8003362:	f000 ff51 	bl	8004208 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003366:	2000      	movs	r0, #0
 8003368:	f884 0290 	strb.w	r0, [r4, #656]	@ 0x290
}
 800336c:	bd10      	pop	{r4, pc}
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800336e:	f001 0c07 	and.w	ip, r1, #7
 8003372:	eb0c 018c 	add.w	r1, ip, ip, lsl #2
 8003376:	00c9      	lsls	r1, r1, #3
 8003378:	3110      	adds	r1, #16
 800337a:	4421      	add	r1, r4
    ep->is_in = 1U;
 800337c:	eb0c 0c8c 	add.w	ip, ip, ip, lsl #2
 8003380:	eb04 0ccc 	add.w	ip, r4, ip, lsl #3
 8003384:	f04f 0e01 	mov.w	lr, #1
 8003388:	f88c e011 	strb.w	lr, [ip, #17]
 800338c:	e7da      	b.n	8003344 <HAL_PCD_EP_Open+0x30>
    ep->data_pid_start = 0U;
 800338e:	2300      	movs	r3, #0
 8003390:	710b      	strb	r3, [r1, #4]
 8003392:	e7de      	b.n	8003352 <HAL_PCD_EP_Open+0x3e>
  __HAL_LOCK(hpcd);
 8003394:	2002      	movs	r0, #2
 8003396:	e7e9      	b.n	800336c <HAL_PCD_EP_Open+0x58>

08003398 <HAL_PCD_EP_Close>:
{
 8003398:	b510      	push	{r4, lr}
 800339a:	4604      	mov	r4, r0
 800339c:	460a      	mov	r2, r1
  if ((ep_addr & 0x80U) == 0x80U)
 800339e:	f011 0f80 	tst.w	r1, #128	@ 0x80
 80033a2:	d11f      	bne.n	80033e4 <HAL_PCD_EP_Close+0x4c>
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80033a4:	f001 0007 	and.w	r0, r1, #7
 80033a8:	eb00 0380 	add.w	r3, r0, r0, lsl #2
 80033ac:	00db      	lsls	r3, r3, #3
 80033ae:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80033b2:	18e1      	adds	r1, r4, r3
    ep->is_in = 0U;
 80033b4:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80033b8:	eb04 00c0 	add.w	r0, r4, r0, lsl #3
 80033bc:	2300      	movs	r3, #0
 80033be:	f880 3151 	strb.w	r3, [r0, #337]	@ 0x151
  ep->num = ep_addr & EP_ADDR_MSK;
 80033c2:	f002 0207 	and.w	r2, r2, #7
 80033c6:	700a      	strb	r2, [r1, #0]
  __HAL_LOCK(hpcd);
 80033c8:	f894 3290 	ldrb.w	r3, [r4, #656]	@ 0x290
 80033cc:	2b01      	cmp	r3, #1
 80033ce:	d017      	beq.n	8003400 <HAL_PCD_EP_Close+0x68>
 80033d0:	2301      	movs	r3, #1
 80033d2:	f884 3290 	strb.w	r3, [r4, #656]	@ 0x290
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80033d6:	6820      	ldr	r0, [r4, #0]
 80033d8:	f001 f8fb 	bl	80045d2 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80033dc:	2000      	movs	r0, #0
 80033de:	f884 0290 	strb.w	r0, [r4, #656]	@ 0x290
}
 80033e2:	bd10      	pop	{r4, pc}
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80033e4:	f001 0007 	and.w	r0, r1, #7
 80033e8:	eb00 0380 	add.w	r3, r0, r0, lsl #2
 80033ec:	00db      	lsls	r3, r3, #3
 80033ee:	3310      	adds	r3, #16
 80033f0:	18e1      	adds	r1, r4, r3
    ep->is_in = 1U;
 80033f2:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80033f6:	eb04 00c0 	add.w	r0, r4, r0, lsl #3
 80033fa:	2301      	movs	r3, #1
 80033fc:	7443      	strb	r3, [r0, #17]
 80033fe:	e7e0      	b.n	80033c2 <HAL_PCD_EP_Close+0x2a>
  __HAL_LOCK(hpcd);
 8003400:	2002      	movs	r0, #2
 8003402:	e7ee      	b.n	80033e2 <HAL_PCD_EP_Close+0x4a>

08003404 <HAL_PCD_EP_Receive>:
{
 8003404:	b510      	push	{r4, lr}
  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003406:	f001 0c07 	and.w	ip, r1, #7
 800340a:	eb0c 018c 	add.w	r1, ip, ip, lsl #2
 800340e:	00c9      	lsls	r1, r1, #3
 8003410:	f501 71a8 	add.w	r1, r1, #336	@ 0x150
  ep->xfer_buff = pBuf;
 8003414:	eb0c 0e8c 	add.w	lr, ip, ip, lsl #2
 8003418:	eb00 0ece 	add.w	lr, r0, lr, lsl #3
 800341c:	f8ce 2164 	str.w	r2, [lr, #356]	@ 0x164
  ep->xfer_len = len;
 8003420:	f8ce 3168 	str.w	r3, [lr, #360]	@ 0x168
  ep->xfer_count = 0U;
 8003424:	2400      	movs	r4, #0
 8003426:	f8ce 416c 	str.w	r4, [lr, #364]	@ 0x16c
  ep->is_in = 0U;
 800342a:	f88e 4151 	strb.w	r4, [lr, #337]	@ 0x151
  ep->num = ep_addr & EP_ADDR_MSK;
 800342e:	f88e c150 	strb.w	ip, [lr, #336]	@ 0x150
  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003432:	4401      	add	r1, r0
 8003434:	6800      	ldr	r0, [r0, #0]
 8003436:	f001 fa50 	bl	80048da <USB_EPStartXfer>
}
 800343a:	4620      	mov	r0, r4
 800343c:	bd10      	pop	{r4, pc}

0800343e <HAL_PCD_EP_GetRxCount>:
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800343e:	f001 0107 	and.w	r1, r1, #7
 8003442:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 8003446:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
}
 800344a:	f8d0 016c 	ldr.w	r0, [r0, #364]	@ 0x16c
 800344e:	4770      	bx	lr

08003450 <HAL_PCD_EP_Transmit>:
{
 8003450:	b538      	push	{r3, r4, r5, lr}
  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003452:	f001 0c07 	and.w	ip, r1, #7
 8003456:	eb0c 018c 	add.w	r1, ip, ip, lsl #2
 800345a:	00c9      	lsls	r1, r1, #3
 800345c:	3110      	adds	r1, #16
  ep->xfer_buff = pBuf;
 800345e:	eb0c 0e8c 	add.w	lr, ip, ip, lsl #2
 8003462:	eb00 0ece 	add.w	lr, r0, lr, lsl #3
 8003466:	f8ce 2024 	str.w	r2, [lr, #36]	@ 0x24
  ep->xfer_len = len;
 800346a:	f10c 0201 	add.w	r2, ip, #1
 800346e:	eb02 0482 	add.w	r4, r2, r2, lsl #2
 8003472:	f840 3034 	str.w	r3, [r0, r4, lsl #3]
  ep->xfer_fill_db = 1U;
 8003476:	2501      	movs	r5, #1
 8003478:	f88e 5034 	strb.w	r5, [lr, #52]	@ 0x34
  ep->xfer_len_db = len;
 800347c:	f8ce 3030 	str.w	r3, [lr, #48]	@ 0x30
  ep->xfer_count = 0U;
 8003480:	eb00 02c4 	add.w	r2, r0, r4, lsl #3
 8003484:	2400      	movs	r4, #0
 8003486:	6054      	str	r4, [r2, #4]
  ep->is_in = 1U;
 8003488:	f88e 5011 	strb.w	r5, [lr, #17]
  ep->num = ep_addr & EP_ADDR_MSK;
 800348c:	f88e c010 	strb.w	ip, [lr, #16]
  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003490:	4401      	add	r1, r0
 8003492:	6800      	ldr	r0, [r0, #0]
 8003494:	f001 fa21 	bl	80048da <USB_EPStartXfer>
}
 8003498:	4620      	mov	r0, r4
 800349a:	bd38      	pop	{r3, r4, r5, pc}

0800349c <HAL_PCD_EP_SetStall>:
{
 800349c:	b538      	push	{r3, r4, r5, lr}
  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800349e:	f001 0507 	and.w	r5, r1, #7
 80034a2:	7902      	ldrb	r2, [r0, #4]
 80034a4:	42aa      	cmp	r2, r5
 80034a6:	d335      	bcc.n	8003514 <HAL_PCD_EP_SetStall+0x78>
 80034a8:	4604      	mov	r4, r0
 80034aa:	460b      	mov	r3, r1
  if ((0x80U & ep_addr) == 0x80U)
 80034ac:	f011 0f80 	tst.w	r1, #128	@ 0x80
 80034b0:	d11e      	bne.n	80034f0 <HAL_PCD_EP_SetStall+0x54>
    ep = &hpcd->OUT_ep[ep_addr];
 80034b2:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 80034b6:	00c9      	lsls	r1, r1, #3
 80034b8:	f501 71a8 	add.w	r1, r1, #336	@ 0x150
 80034bc:	4401      	add	r1, r0
    ep->is_in = 0U;
 80034be:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80034c2:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
 80034c6:	2200      	movs	r2, #0
 80034c8:	f883 2151 	strb.w	r2, [r3, #337]	@ 0x151
  ep->is_stall = 1U;
 80034cc:	2301      	movs	r3, #1
 80034ce:	708b      	strb	r3, [r1, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80034d0:	700d      	strb	r5, [r1, #0]
  __HAL_LOCK(hpcd);
 80034d2:	f894 3290 	ldrb.w	r3, [r4, #656]	@ 0x290
 80034d6:	2b01      	cmp	r3, #1
 80034d8:	d01e      	beq.n	8003518 <HAL_PCD_EP_SetStall+0x7c>
 80034da:	2301      	movs	r3, #1
 80034dc:	f884 3290 	strb.w	r3, [r4, #656]	@ 0x290
  (void)USB_EPSetStall(hpcd->Instance, ep);
 80034e0:	6820      	ldr	r0, [r4, #0]
 80034e2:	f001 f961 	bl	80047a8 <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80034e6:	b17d      	cbz	r5, 8003508 <HAL_PCD_EP_SetStall+0x6c>
  __HAL_UNLOCK(hpcd);
 80034e8:	2000      	movs	r0, #0
 80034ea:	f884 0290 	strb.w	r0, [r4, #656]	@ 0x290
}
 80034ee:	bd38      	pop	{r3, r4, r5, pc}
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80034f0:	eb05 0185 	add.w	r1, r5, r5, lsl #2
 80034f4:	00c9      	lsls	r1, r1, #3
 80034f6:	3110      	adds	r1, #16
 80034f8:	4401      	add	r1, r0
    ep->is_in = 1U;
 80034fa:	eb05 0385 	add.w	r3, r5, r5, lsl #2
 80034fe:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
 8003502:	2201      	movs	r2, #1
 8003504:	745a      	strb	r2, [r3, #17]
 8003506:	e7e1      	b.n	80034cc <HAL_PCD_EP_SetStall+0x30>
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8003508:	f504 7126 	add.w	r1, r4, #664	@ 0x298
 800350c:	6820      	ldr	r0, [r4, #0]
 800350e:	f001 f9cf 	bl	80048b0 <USB_EP0_OutStart>
 8003512:	e7e9      	b.n	80034e8 <HAL_PCD_EP_SetStall+0x4c>
    return HAL_ERROR;
 8003514:	2001      	movs	r0, #1
 8003516:	e7ea      	b.n	80034ee <HAL_PCD_EP_SetStall+0x52>
  __HAL_LOCK(hpcd);
 8003518:	2002      	movs	r0, #2
 800351a:	e7e8      	b.n	80034ee <HAL_PCD_EP_SetStall+0x52>

0800351c <HAL_PCD_EP_ClrStall>:
{
 800351c:	460b      	mov	r3, r1
  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800351e:	7901      	ldrb	r1, [r0, #4]
 8003520:	f003 020f 	and.w	r2, r3, #15
 8003524:	4291      	cmp	r1, r2
 8003526:	d334      	bcc.n	8003592 <HAL_PCD_EP_ClrStall+0x76>
{
 8003528:	b510      	push	{r4, lr}
 800352a:	4604      	mov	r4, r0
  if ((0x80U & ep_addr) == 0x80U)
 800352c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8003530:	d121      	bne.n	8003576 <HAL_PCD_EP_ClrStall+0x5a>
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003532:	f003 0207 	and.w	r2, r3, #7
 8003536:	eb02 0182 	add.w	r1, r2, r2, lsl #2
 800353a:	00c9      	lsls	r1, r1, #3
 800353c:	f501 71a8 	add.w	r1, r1, #336	@ 0x150
 8003540:	4401      	add	r1, r0
    ep->is_in = 0U;
 8003542:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8003546:	eb00 02c2 	add.w	r2, r0, r2, lsl #3
 800354a:	2000      	movs	r0, #0
 800354c:	f882 0151 	strb.w	r0, [r2, #337]	@ 0x151
  ep->is_stall = 0U;
 8003550:	2200      	movs	r2, #0
 8003552:	708a      	strb	r2, [r1, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003554:	f003 0307 	and.w	r3, r3, #7
 8003558:	700b      	strb	r3, [r1, #0]
  __HAL_LOCK(hpcd);
 800355a:	f894 3290 	ldrb.w	r3, [r4, #656]	@ 0x290
 800355e:	2b01      	cmp	r3, #1
 8003560:	d019      	beq.n	8003596 <HAL_PCD_EP_ClrStall+0x7a>
 8003562:	2301      	movs	r3, #1
 8003564:	f884 3290 	strb.w	r3, [r4, #656]	@ 0x290
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8003568:	6820      	ldr	r0, [r4, #0]
 800356a:	f001 f942 	bl	80047f2 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800356e:	2000      	movs	r0, #0
 8003570:	f884 0290 	strb.w	r0, [r4, #656]	@ 0x290
}
 8003574:	bd10      	pop	{r4, pc}
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003576:	f003 0207 	and.w	r2, r3, #7
 800357a:	eb02 0182 	add.w	r1, r2, r2, lsl #2
 800357e:	00c9      	lsls	r1, r1, #3
 8003580:	3110      	adds	r1, #16
 8003582:	4401      	add	r1, r0
    ep->is_in = 1U;
 8003584:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8003588:	eb00 02c2 	add.w	r2, r0, r2, lsl #3
 800358c:	2001      	movs	r0, #1
 800358e:	7450      	strb	r0, [r2, #17]
 8003590:	e7de      	b.n	8003550 <HAL_PCD_EP_ClrStall+0x34>
    return HAL_ERROR;
 8003592:	2001      	movs	r0, #1
}
 8003594:	4770      	bx	lr
  __HAL_LOCK(hpcd);
 8003596:	2002      	movs	r0, #2
 8003598:	e7ec      	b.n	8003574 <HAL_PCD_EP_ClrStall+0x58>

0800359a <HAL_PCDEx_PMAConfig>:
                                       uint16_t ep_kind, uint32_t pmaadress)
{
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 800359a:	f011 0f80 	tst.w	r1, #128	@ 0x80
 800359e:	d00b      	beq.n	80035b8 <HAL_PCDEx_PMAConfig+0x1e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80035a0:	f001 0107 	and.w	r1, r1, #7
 80035a4:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 80035a8:	00c9      	lsls	r1, r1, #3
 80035aa:	3110      	adds	r1, #16
 80035ac:	4408      	add	r0, r1
  {
    ep = &hpcd->OUT_ep[ep_addr];
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 80035ae:	b952      	cbnz	r2, 80035c6 <HAL_PCDEx_PMAConfig+0x2c>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 80035b0:	7302      	strb	r2, [r0, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 80035b2:	80c3      	strh	r3, [r0, #6]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
}
 80035b4:	2000      	movs	r0, #0
 80035b6:	4770      	bx	lr
    ep = &hpcd->OUT_ep[ep_addr];
 80035b8:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 80035bc:	00c9      	lsls	r1, r1, #3
 80035be:	f501 71a8 	add.w	r1, r1, #336	@ 0x150
 80035c2:	4408      	add	r0, r1
 80035c4:	e7f3      	b.n	80035ae <HAL_PCDEx_PMAConfig+0x14>
    ep->doublebuffer = 1U;
 80035c6:	2201      	movs	r2, #1
 80035c8:	7302      	strb	r2, [r0, #12]
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 80035ca:	8103      	strh	r3, [r0, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 80035cc:	0c1b      	lsrs	r3, r3, #16
 80035ce:	8143      	strh	r3, [r0, #10]
 80035d0:	e7f0      	b.n	80035b4 <HAL_PCDEx_PMAConfig+0x1a>
	...

080035d4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80035d4:	b082      	sub	sp, #8
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80035d6:	4b08      	ldr	r3, [pc, #32]	@ (80035f8 <RCC_Delay+0x24>)
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	4a08      	ldr	r2, [pc, #32]	@ (80035fc <RCC_Delay+0x28>)
 80035dc:	fba2 2303 	umull	r2, r3, r2, r3
 80035e0:	0a5b      	lsrs	r3, r3, #9
 80035e2:	fb00 f303 	mul.w	r3, r0, r3
 80035e6:	9301      	str	r3, [sp, #4]
  do
  {
    __NOP();
 80035e8:	bf00      	nop
  }
  while (Delay --);
 80035ea:	9b01      	ldr	r3, [sp, #4]
 80035ec:	1e5a      	subs	r2, r3, #1
 80035ee:	9201      	str	r2, [sp, #4]
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d1f9      	bne.n	80035e8 <RCC_Delay+0x14>
}
 80035f4:	b002      	add	sp, #8
 80035f6:	4770      	bx	lr
 80035f8:	20000000 	.word	0x20000000
 80035fc:	10624dd3 	.word	0x10624dd3

08003600 <HAL_RCC_OscConfig>:
  if (RCC_OscInitStruct == NULL)
 8003600:	2800      	cmp	r0, #0
 8003602:	f000 81f1 	beq.w	80039e8 <HAL_RCC_OscConfig+0x3e8>
{
 8003606:	b570      	push	{r4, r5, r6, lr}
 8003608:	b082      	sub	sp, #8
 800360a:	4604      	mov	r4, r0
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800360c:	6803      	ldr	r3, [r0, #0]
 800360e:	f013 0f01 	tst.w	r3, #1
 8003612:	d02c      	beq.n	800366e <HAL_RCC_OscConfig+0x6e>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003614:	4b99      	ldr	r3, [pc, #612]	@ (800387c <HAL_RCC_OscConfig+0x27c>)
 8003616:	685b      	ldr	r3, [r3, #4]
 8003618:	f003 030c 	and.w	r3, r3, #12
 800361c:	2b04      	cmp	r3, #4
 800361e:	d01d      	beq.n	800365c <HAL_RCC_OscConfig+0x5c>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003620:	4b96      	ldr	r3, [pc, #600]	@ (800387c <HAL_RCC_OscConfig+0x27c>)
 8003622:	685b      	ldr	r3, [r3, #4]
 8003624:	f003 030c 	and.w	r3, r3, #12
 8003628:	2b08      	cmp	r3, #8
 800362a:	d012      	beq.n	8003652 <HAL_RCC_OscConfig+0x52>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800362c:	6863      	ldr	r3, [r4, #4]
 800362e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003632:	d041      	beq.n	80036b8 <HAL_RCC_OscConfig+0xb8>
 8003634:	2b00      	cmp	r3, #0
 8003636:	d155      	bne.n	80036e4 <HAL_RCC_OscConfig+0xe4>
 8003638:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800363c:	f503 3304 	add.w	r3, r3, #135168	@ 0x21000
 8003640:	681a      	ldr	r2, [r3, #0]
 8003642:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8003646:	601a      	str	r2, [r3, #0]
 8003648:	681a      	ldr	r2, [r3, #0]
 800364a:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 800364e:	601a      	str	r2, [r3, #0]
 8003650:	e037      	b.n	80036c2 <HAL_RCC_OscConfig+0xc2>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003652:	4b8a      	ldr	r3, [pc, #552]	@ (800387c <HAL_RCC_OscConfig+0x27c>)
 8003654:	685b      	ldr	r3, [r3, #4]
 8003656:	f413 3f80 	tst.w	r3, #65536	@ 0x10000
 800365a:	d0e7      	beq.n	800362c <HAL_RCC_OscConfig+0x2c>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800365c:	4b87      	ldr	r3, [pc, #540]	@ (800387c <HAL_RCC_OscConfig+0x27c>)
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 8003664:	d003      	beq.n	800366e <HAL_RCC_OscConfig+0x6e>
 8003666:	6863      	ldr	r3, [r4, #4]
 8003668:	2b00      	cmp	r3, #0
 800366a:	f000 81bf 	beq.w	80039ec <HAL_RCC_OscConfig+0x3ec>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800366e:	6823      	ldr	r3, [r4, #0]
 8003670:	f013 0f02 	tst.w	r3, #2
 8003674:	d075      	beq.n	8003762 <HAL_RCC_OscConfig+0x162>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003676:	4b81      	ldr	r3, [pc, #516]	@ (800387c <HAL_RCC_OscConfig+0x27c>)
 8003678:	685b      	ldr	r3, [r3, #4]
 800367a:	f013 0f0c 	tst.w	r3, #12
 800367e:	d05f      	beq.n	8003740 <HAL_RCC_OscConfig+0x140>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8003680:	4b7e      	ldr	r3, [pc, #504]	@ (800387c <HAL_RCC_OscConfig+0x27c>)
 8003682:	685b      	ldr	r3, [r3, #4]
 8003684:	f003 030c 	and.w	r3, r3, #12
 8003688:	2b08      	cmp	r3, #8
 800368a:	d054      	beq.n	8003736 <HAL_RCC_OscConfig+0x136>
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800368c:	6923      	ldr	r3, [r4, #16]
 800368e:	2b00      	cmp	r3, #0
 8003690:	f000 808a 	beq.w	80037a8 <HAL_RCC_OscConfig+0x1a8>
        __HAL_RCC_HSI_ENABLE();
 8003694:	4b7a      	ldr	r3, [pc, #488]	@ (8003880 <HAL_RCC_OscConfig+0x280>)
 8003696:	2201      	movs	r2, #1
 8003698:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800369a:	f7fe fb59 	bl	8001d50 <HAL_GetTick>
 800369e:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80036a0:	4b76      	ldr	r3, [pc, #472]	@ (800387c <HAL_RCC_OscConfig+0x27c>)
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	f013 0f02 	tst.w	r3, #2
 80036a8:	d175      	bne.n	8003796 <HAL_RCC_OscConfig+0x196>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80036aa:	f7fe fb51 	bl	8001d50 <HAL_GetTick>
 80036ae:	1b40      	subs	r0, r0, r5
 80036b0:	2802      	cmp	r0, #2
 80036b2:	d9f5      	bls.n	80036a0 <HAL_RCC_OscConfig+0xa0>
            return HAL_TIMEOUT;
 80036b4:	2003      	movs	r0, #3
 80036b6:	e19e      	b.n	80039f6 <HAL_RCC_OscConfig+0x3f6>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80036b8:	4a70      	ldr	r2, [pc, #448]	@ (800387c <HAL_RCC_OscConfig+0x27c>)
 80036ba:	6813      	ldr	r3, [r2, #0]
 80036bc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80036c0:	6013      	str	r3, [r2, #0]
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80036c2:	6863      	ldr	r3, [r4, #4]
 80036c4:	b343      	cbz	r3, 8003718 <HAL_RCC_OscConfig+0x118>
        tickstart = HAL_GetTick();
 80036c6:	f7fe fb43 	bl	8001d50 <HAL_GetTick>
 80036ca:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80036cc:	4b6b      	ldr	r3, [pc, #428]	@ (800387c <HAL_RCC_OscConfig+0x27c>)
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 80036d4:	d1cb      	bne.n	800366e <HAL_RCC_OscConfig+0x6e>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80036d6:	f7fe fb3b 	bl	8001d50 <HAL_GetTick>
 80036da:	1b40      	subs	r0, r0, r5
 80036dc:	2864      	cmp	r0, #100	@ 0x64
 80036de:	d9f5      	bls.n	80036cc <HAL_RCC_OscConfig+0xcc>
            return HAL_TIMEOUT;
 80036e0:	2003      	movs	r0, #3
 80036e2:	e188      	b.n	80039f6 <HAL_RCC_OscConfig+0x3f6>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80036e4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80036e8:	d009      	beq.n	80036fe <HAL_RCC_OscConfig+0xfe>
 80036ea:	4b64      	ldr	r3, [pc, #400]	@ (800387c <HAL_RCC_OscConfig+0x27c>)
 80036ec:	681a      	ldr	r2, [r3, #0]
 80036ee:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 80036f2:	601a      	str	r2, [r3, #0]
 80036f4:	681a      	ldr	r2, [r3, #0]
 80036f6:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 80036fa:	601a      	str	r2, [r3, #0]
 80036fc:	e7e1      	b.n	80036c2 <HAL_RCC_OscConfig+0xc2>
 80036fe:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003702:	f5a3 333c 	sub.w	r3, r3, #192512	@ 0x2f000
 8003706:	681a      	ldr	r2, [r3, #0]
 8003708:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 800370c:	601a      	str	r2, [r3, #0]
 800370e:	681a      	ldr	r2, [r3, #0]
 8003710:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8003714:	601a      	str	r2, [r3, #0]
 8003716:	e7d4      	b.n	80036c2 <HAL_RCC_OscConfig+0xc2>
        tickstart = HAL_GetTick();
 8003718:	f7fe fb1a 	bl	8001d50 <HAL_GetTick>
 800371c:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800371e:	4b57      	ldr	r3, [pc, #348]	@ (800387c <HAL_RCC_OscConfig+0x27c>)
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 8003726:	d0a2      	beq.n	800366e <HAL_RCC_OscConfig+0x6e>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003728:	f7fe fb12 	bl	8001d50 <HAL_GetTick>
 800372c:	1b40      	subs	r0, r0, r5
 800372e:	2864      	cmp	r0, #100	@ 0x64
 8003730:	d9f5      	bls.n	800371e <HAL_RCC_OscConfig+0x11e>
            return HAL_TIMEOUT;
 8003732:	2003      	movs	r0, #3
 8003734:	e15f      	b.n	80039f6 <HAL_RCC_OscConfig+0x3f6>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8003736:	4b51      	ldr	r3, [pc, #324]	@ (800387c <HAL_RCC_OscConfig+0x27c>)
 8003738:	685b      	ldr	r3, [r3, #4]
 800373a:	f413 3f80 	tst.w	r3, #65536	@ 0x10000
 800373e:	d1a5      	bne.n	800368c <HAL_RCC_OscConfig+0x8c>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003740:	4b4e      	ldr	r3, [pc, #312]	@ (800387c <HAL_RCC_OscConfig+0x27c>)
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	f013 0f02 	tst.w	r3, #2
 8003748:	d003      	beq.n	8003752 <HAL_RCC_OscConfig+0x152>
 800374a:	6923      	ldr	r3, [r4, #16]
 800374c:	2b01      	cmp	r3, #1
 800374e:	f040 814f 	bne.w	80039f0 <HAL_RCC_OscConfig+0x3f0>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003752:	4a4a      	ldr	r2, [pc, #296]	@ (800387c <HAL_RCC_OscConfig+0x27c>)
 8003754:	6813      	ldr	r3, [r2, #0]
 8003756:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 800375a:	6961      	ldr	r1, [r4, #20]
 800375c:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8003760:	6013      	str	r3, [r2, #0]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003762:	6823      	ldr	r3, [r4, #0]
 8003764:	f013 0f08 	tst.w	r3, #8
 8003768:	d033      	beq.n	80037d2 <HAL_RCC_OscConfig+0x1d2>
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800376a:	69a3      	ldr	r3, [r4, #24]
 800376c:	2b00      	cmp	r3, #0
 800376e:	d05c      	beq.n	800382a <HAL_RCC_OscConfig+0x22a>
      __HAL_RCC_LSI_ENABLE();
 8003770:	4b43      	ldr	r3, [pc, #268]	@ (8003880 <HAL_RCC_OscConfig+0x280>)
 8003772:	2201      	movs	r2, #1
 8003774:	f8c3 2480 	str.w	r2, [r3, #1152]	@ 0x480
      tickstart = HAL_GetTick();
 8003778:	f7fe faea 	bl	8001d50 <HAL_GetTick>
 800377c:	4605      	mov	r5, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800377e:	4b3f      	ldr	r3, [pc, #252]	@ (800387c <HAL_RCC_OscConfig+0x27c>)
 8003780:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003782:	f013 0f02 	tst.w	r3, #2
 8003786:	d121      	bne.n	80037cc <HAL_RCC_OscConfig+0x1cc>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003788:	f7fe fae2 	bl	8001d50 <HAL_GetTick>
 800378c:	1b40      	subs	r0, r0, r5
 800378e:	2802      	cmp	r0, #2
 8003790:	d9f5      	bls.n	800377e <HAL_RCC_OscConfig+0x17e>
          return HAL_TIMEOUT;
 8003792:	2003      	movs	r0, #3
 8003794:	e12f      	b.n	80039f6 <HAL_RCC_OscConfig+0x3f6>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003796:	4a39      	ldr	r2, [pc, #228]	@ (800387c <HAL_RCC_OscConfig+0x27c>)
 8003798:	6813      	ldr	r3, [r2, #0]
 800379a:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 800379e:	6961      	ldr	r1, [r4, #20]
 80037a0:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 80037a4:	6013      	str	r3, [r2, #0]
 80037a6:	e7dc      	b.n	8003762 <HAL_RCC_OscConfig+0x162>
        __HAL_RCC_HSI_DISABLE();
 80037a8:	4b35      	ldr	r3, [pc, #212]	@ (8003880 <HAL_RCC_OscConfig+0x280>)
 80037aa:	2200      	movs	r2, #0
 80037ac:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80037ae:	f7fe facf 	bl	8001d50 <HAL_GetTick>
 80037b2:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80037b4:	4b31      	ldr	r3, [pc, #196]	@ (800387c <HAL_RCC_OscConfig+0x27c>)
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	f013 0f02 	tst.w	r3, #2
 80037bc:	d0d1      	beq.n	8003762 <HAL_RCC_OscConfig+0x162>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80037be:	f7fe fac7 	bl	8001d50 <HAL_GetTick>
 80037c2:	1b40      	subs	r0, r0, r5
 80037c4:	2802      	cmp	r0, #2
 80037c6:	d9f5      	bls.n	80037b4 <HAL_RCC_OscConfig+0x1b4>
            return HAL_TIMEOUT;
 80037c8:	2003      	movs	r0, #3
 80037ca:	e114      	b.n	80039f6 <HAL_RCC_OscConfig+0x3f6>
      RCC_Delay(1);
 80037cc:	2001      	movs	r0, #1
 80037ce:	f7ff ff01 	bl	80035d4 <RCC_Delay>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80037d2:	6823      	ldr	r3, [r4, #0]
 80037d4:	f013 0f04 	tst.w	r3, #4
 80037d8:	f000 8096 	beq.w	8003908 <HAL_RCC_OscConfig+0x308>
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80037dc:	4b27      	ldr	r3, [pc, #156]	@ (800387c <HAL_RCC_OscConfig+0x27c>)
 80037de:	69db      	ldr	r3, [r3, #28]
 80037e0:	f013 5f80 	tst.w	r3, #268435456	@ 0x10000000
 80037e4:	d134      	bne.n	8003850 <HAL_RCC_OscConfig+0x250>
      __HAL_RCC_PWR_CLK_ENABLE();
 80037e6:	4b25      	ldr	r3, [pc, #148]	@ (800387c <HAL_RCC_OscConfig+0x27c>)
 80037e8:	69da      	ldr	r2, [r3, #28]
 80037ea:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 80037ee:	61da      	str	r2, [r3, #28]
 80037f0:	69db      	ldr	r3, [r3, #28]
 80037f2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80037f6:	9301      	str	r3, [sp, #4]
 80037f8:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 80037fa:	2501      	movs	r5, #1
    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80037fc:	4b21      	ldr	r3, [pc, #132]	@ (8003884 <HAL_RCC_OscConfig+0x284>)
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	f413 7f80 	tst.w	r3, #256	@ 0x100
 8003804:	d026      	beq.n	8003854 <HAL_RCC_OscConfig+0x254>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003806:	68e3      	ldr	r3, [r4, #12]
 8003808:	2b01      	cmp	r3, #1
 800380a:	d03d      	beq.n	8003888 <HAL_RCC_OscConfig+0x288>
 800380c:	2b00      	cmp	r3, #0
 800380e:	d153      	bne.n	80038b8 <HAL_RCC_OscConfig+0x2b8>
 8003810:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003814:	f503 3304 	add.w	r3, r3, #135168	@ 0x21000
 8003818:	6a1a      	ldr	r2, [r3, #32]
 800381a:	f022 0201 	bic.w	r2, r2, #1
 800381e:	621a      	str	r2, [r3, #32]
 8003820:	6a1a      	ldr	r2, [r3, #32]
 8003822:	f022 0204 	bic.w	r2, r2, #4
 8003826:	621a      	str	r2, [r3, #32]
 8003828:	e033      	b.n	8003892 <HAL_RCC_OscConfig+0x292>
      __HAL_RCC_LSI_DISABLE();
 800382a:	4b15      	ldr	r3, [pc, #84]	@ (8003880 <HAL_RCC_OscConfig+0x280>)
 800382c:	2200      	movs	r2, #0
 800382e:	f8c3 2480 	str.w	r2, [r3, #1152]	@ 0x480
      tickstart = HAL_GetTick();
 8003832:	f7fe fa8d 	bl	8001d50 <HAL_GetTick>
 8003836:	4605      	mov	r5, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003838:	4b10      	ldr	r3, [pc, #64]	@ (800387c <HAL_RCC_OscConfig+0x27c>)
 800383a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800383c:	f013 0f02 	tst.w	r3, #2
 8003840:	d0c7      	beq.n	80037d2 <HAL_RCC_OscConfig+0x1d2>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003842:	f7fe fa85 	bl	8001d50 <HAL_GetTick>
 8003846:	1b40      	subs	r0, r0, r5
 8003848:	2802      	cmp	r0, #2
 800384a:	d9f5      	bls.n	8003838 <HAL_RCC_OscConfig+0x238>
          return HAL_TIMEOUT;
 800384c:	2003      	movs	r0, #3
 800384e:	e0d2      	b.n	80039f6 <HAL_RCC_OscConfig+0x3f6>
    FlagStatus       pwrclkchanged = RESET;
 8003850:	2500      	movs	r5, #0
 8003852:	e7d3      	b.n	80037fc <HAL_RCC_OscConfig+0x1fc>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003854:	4a0b      	ldr	r2, [pc, #44]	@ (8003884 <HAL_RCC_OscConfig+0x284>)
 8003856:	6813      	ldr	r3, [r2, #0]
 8003858:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800385c:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 800385e:	f7fe fa77 	bl	8001d50 <HAL_GetTick>
 8003862:	4606      	mov	r6, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003864:	4b07      	ldr	r3, [pc, #28]	@ (8003884 <HAL_RCC_OscConfig+0x284>)
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	f413 7f80 	tst.w	r3, #256	@ 0x100
 800386c:	d1cb      	bne.n	8003806 <HAL_RCC_OscConfig+0x206>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800386e:	f7fe fa6f 	bl	8001d50 <HAL_GetTick>
 8003872:	1b80      	subs	r0, r0, r6
 8003874:	2864      	cmp	r0, #100	@ 0x64
 8003876:	d9f5      	bls.n	8003864 <HAL_RCC_OscConfig+0x264>
          return HAL_TIMEOUT;
 8003878:	2003      	movs	r0, #3
 800387a:	e0bc      	b.n	80039f6 <HAL_RCC_OscConfig+0x3f6>
 800387c:	40021000 	.word	0x40021000
 8003880:	42420000 	.word	0x42420000
 8003884:	40007000 	.word	0x40007000
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003888:	4a5f      	ldr	r2, [pc, #380]	@ (8003a08 <HAL_RCC_OscConfig+0x408>)
 800388a:	6a13      	ldr	r3, [r2, #32]
 800388c:	f043 0301 	orr.w	r3, r3, #1
 8003890:	6213      	str	r3, [r2, #32]
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003892:	68e3      	ldr	r3, [r4, #12]
 8003894:	b333      	cbz	r3, 80038e4 <HAL_RCC_OscConfig+0x2e4>
      tickstart = HAL_GetTick();
 8003896:	f7fe fa5b 	bl	8001d50 <HAL_GetTick>
 800389a:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800389c:	4b5a      	ldr	r3, [pc, #360]	@ (8003a08 <HAL_RCC_OscConfig+0x408>)
 800389e:	6a1b      	ldr	r3, [r3, #32]
 80038a0:	f013 0f02 	tst.w	r3, #2
 80038a4:	d12f      	bne.n	8003906 <HAL_RCC_OscConfig+0x306>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80038a6:	f7fe fa53 	bl	8001d50 <HAL_GetTick>
 80038aa:	1b80      	subs	r0, r0, r6
 80038ac:	f241 3388 	movw	r3, #5000	@ 0x1388
 80038b0:	4298      	cmp	r0, r3
 80038b2:	d9f3      	bls.n	800389c <HAL_RCC_OscConfig+0x29c>
          return HAL_TIMEOUT;
 80038b4:	2003      	movs	r0, #3
 80038b6:	e09e      	b.n	80039f6 <HAL_RCC_OscConfig+0x3f6>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80038b8:	2b05      	cmp	r3, #5
 80038ba:	d009      	beq.n	80038d0 <HAL_RCC_OscConfig+0x2d0>
 80038bc:	4b52      	ldr	r3, [pc, #328]	@ (8003a08 <HAL_RCC_OscConfig+0x408>)
 80038be:	6a1a      	ldr	r2, [r3, #32]
 80038c0:	f022 0201 	bic.w	r2, r2, #1
 80038c4:	621a      	str	r2, [r3, #32]
 80038c6:	6a1a      	ldr	r2, [r3, #32]
 80038c8:	f022 0204 	bic.w	r2, r2, #4
 80038cc:	621a      	str	r2, [r3, #32]
 80038ce:	e7e0      	b.n	8003892 <HAL_RCC_OscConfig+0x292>
 80038d0:	4b4d      	ldr	r3, [pc, #308]	@ (8003a08 <HAL_RCC_OscConfig+0x408>)
 80038d2:	6a1a      	ldr	r2, [r3, #32]
 80038d4:	f042 0204 	orr.w	r2, r2, #4
 80038d8:	621a      	str	r2, [r3, #32]
 80038da:	6a1a      	ldr	r2, [r3, #32]
 80038dc:	f042 0201 	orr.w	r2, r2, #1
 80038e0:	621a      	str	r2, [r3, #32]
 80038e2:	e7d6      	b.n	8003892 <HAL_RCC_OscConfig+0x292>
      tickstart = HAL_GetTick();
 80038e4:	f7fe fa34 	bl	8001d50 <HAL_GetTick>
 80038e8:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80038ea:	4b47      	ldr	r3, [pc, #284]	@ (8003a08 <HAL_RCC_OscConfig+0x408>)
 80038ec:	6a1b      	ldr	r3, [r3, #32]
 80038ee:	f013 0f02 	tst.w	r3, #2
 80038f2:	d008      	beq.n	8003906 <HAL_RCC_OscConfig+0x306>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80038f4:	f7fe fa2c 	bl	8001d50 <HAL_GetTick>
 80038f8:	1b80      	subs	r0, r0, r6
 80038fa:	f241 3388 	movw	r3, #5000	@ 0x1388
 80038fe:	4298      	cmp	r0, r3
 8003900:	d9f3      	bls.n	80038ea <HAL_RCC_OscConfig+0x2ea>
          return HAL_TIMEOUT;
 8003902:	2003      	movs	r0, #3
 8003904:	e077      	b.n	80039f6 <HAL_RCC_OscConfig+0x3f6>
    if (pwrclkchanged == SET)
 8003906:	b9e5      	cbnz	r5, 8003942 <HAL_RCC_OscConfig+0x342>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003908:	69e3      	ldr	r3, [r4, #28]
 800390a:	2b00      	cmp	r3, #0
 800390c:	d072      	beq.n	80039f4 <HAL_RCC_OscConfig+0x3f4>
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800390e:	4a3e      	ldr	r2, [pc, #248]	@ (8003a08 <HAL_RCC_OscConfig+0x408>)
 8003910:	6852      	ldr	r2, [r2, #4]
 8003912:	f002 020c 	and.w	r2, r2, #12
 8003916:	2a08      	cmp	r2, #8
 8003918:	d056      	beq.n	80039c8 <HAL_RCC_OscConfig+0x3c8>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800391a:	2b02      	cmp	r3, #2
 800391c:	d017      	beq.n	800394e <HAL_RCC_OscConfig+0x34e>
        __HAL_RCC_PLL_DISABLE();
 800391e:	4b3b      	ldr	r3, [pc, #236]	@ (8003a0c <HAL_RCC_OscConfig+0x40c>)
 8003920:	2200      	movs	r2, #0
 8003922:	661a      	str	r2, [r3, #96]	@ 0x60
        tickstart = HAL_GetTick();
 8003924:	f7fe fa14 	bl	8001d50 <HAL_GetTick>
 8003928:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800392a:	4b37      	ldr	r3, [pc, #220]	@ (8003a08 <HAL_RCC_OscConfig+0x408>)
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 8003932:	d047      	beq.n	80039c4 <HAL_RCC_OscConfig+0x3c4>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003934:	f7fe fa0c 	bl	8001d50 <HAL_GetTick>
 8003938:	1b00      	subs	r0, r0, r4
 800393a:	2802      	cmp	r0, #2
 800393c:	d9f5      	bls.n	800392a <HAL_RCC_OscConfig+0x32a>
            return HAL_TIMEOUT;
 800393e:	2003      	movs	r0, #3
 8003940:	e059      	b.n	80039f6 <HAL_RCC_OscConfig+0x3f6>
      __HAL_RCC_PWR_CLK_DISABLE();
 8003942:	4a31      	ldr	r2, [pc, #196]	@ (8003a08 <HAL_RCC_OscConfig+0x408>)
 8003944:	69d3      	ldr	r3, [r2, #28]
 8003946:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800394a:	61d3      	str	r3, [r2, #28]
 800394c:	e7dc      	b.n	8003908 <HAL_RCC_OscConfig+0x308>
        __HAL_RCC_PLL_DISABLE();
 800394e:	4b2f      	ldr	r3, [pc, #188]	@ (8003a0c <HAL_RCC_OscConfig+0x40c>)
 8003950:	2200      	movs	r2, #0
 8003952:	661a      	str	r2, [r3, #96]	@ 0x60
        tickstart = HAL_GetTick();
 8003954:	f7fe f9fc 	bl	8001d50 <HAL_GetTick>
 8003958:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800395a:	4b2b      	ldr	r3, [pc, #172]	@ (8003a08 <HAL_RCC_OscConfig+0x408>)
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 8003962:	d006      	beq.n	8003972 <HAL_RCC_OscConfig+0x372>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003964:	f7fe f9f4 	bl	8001d50 <HAL_GetTick>
 8003968:	1b40      	subs	r0, r0, r5
 800396a:	2802      	cmp	r0, #2
 800396c:	d9f5      	bls.n	800395a <HAL_RCC_OscConfig+0x35a>
            return HAL_TIMEOUT;
 800396e:	2003      	movs	r0, #3
 8003970:	e041      	b.n	80039f6 <HAL_RCC_OscConfig+0x3f6>
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003972:	6a23      	ldr	r3, [r4, #32]
 8003974:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003978:	d01a      	beq.n	80039b0 <HAL_RCC_OscConfig+0x3b0>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800397a:	4923      	ldr	r1, [pc, #140]	@ (8003a08 <HAL_RCC_OscConfig+0x408>)
 800397c:	684b      	ldr	r3, [r1, #4]
 800397e:	f423 1374 	bic.w	r3, r3, #3997696	@ 0x3d0000
 8003982:	6a22      	ldr	r2, [r4, #32]
 8003984:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 8003986:	4302      	orrs	r2, r0
 8003988:	4313      	orrs	r3, r2
 800398a:	604b      	str	r3, [r1, #4]
        __HAL_RCC_PLL_ENABLE();
 800398c:	4b1f      	ldr	r3, [pc, #124]	@ (8003a0c <HAL_RCC_OscConfig+0x40c>)
 800398e:	2201      	movs	r2, #1
 8003990:	661a      	str	r2, [r3, #96]	@ 0x60
        tickstart = HAL_GetTick();
 8003992:	f7fe f9dd 	bl	8001d50 <HAL_GetTick>
 8003996:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003998:	4b1b      	ldr	r3, [pc, #108]	@ (8003a08 <HAL_RCC_OscConfig+0x408>)
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 80039a0:	d10e      	bne.n	80039c0 <HAL_RCC_OscConfig+0x3c0>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80039a2:	f7fe f9d5 	bl	8001d50 <HAL_GetTick>
 80039a6:	1b00      	subs	r0, r0, r4
 80039a8:	2802      	cmp	r0, #2
 80039aa:	d9f5      	bls.n	8003998 <HAL_RCC_OscConfig+0x398>
            return HAL_TIMEOUT;
 80039ac:	2003      	movs	r0, #3
 80039ae:	e022      	b.n	80039f6 <HAL_RCC_OscConfig+0x3f6>
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80039b0:	4a15      	ldr	r2, [pc, #84]	@ (8003a08 <HAL_RCC_OscConfig+0x408>)
 80039b2:	6853      	ldr	r3, [r2, #4]
 80039b4:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 80039b8:	68a1      	ldr	r1, [r4, #8]
 80039ba:	430b      	orrs	r3, r1
 80039bc:	6053      	str	r3, [r2, #4]
 80039be:	e7dc      	b.n	800397a <HAL_RCC_OscConfig+0x37a>
  return HAL_OK;
 80039c0:	2000      	movs	r0, #0
 80039c2:	e018      	b.n	80039f6 <HAL_RCC_OscConfig+0x3f6>
 80039c4:	2000      	movs	r0, #0
 80039c6:	e016      	b.n	80039f6 <HAL_RCC_OscConfig+0x3f6>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80039c8:	2b01      	cmp	r3, #1
 80039ca:	d016      	beq.n	80039fa <HAL_RCC_OscConfig+0x3fa>
        pll_config = RCC->CFGR;
 80039cc:	4b0e      	ldr	r3, [pc, #56]	@ (8003a08 <HAL_RCC_OscConfig+0x408>)
 80039ce:	685b      	ldr	r3, [r3, #4]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80039d0:	f403 3180 	and.w	r1, r3, #65536	@ 0x10000
 80039d4:	6a22      	ldr	r2, [r4, #32]
 80039d6:	4291      	cmp	r1, r2
 80039d8:	d111      	bne.n	80039fe <HAL_RCC_OscConfig+0x3fe>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80039da:	f403 1370 	and.w	r3, r3, #3932160	@ 0x3c0000
 80039de:	6a62      	ldr	r2, [r4, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80039e0:	4293      	cmp	r3, r2
 80039e2:	d10e      	bne.n	8003a02 <HAL_RCC_OscConfig+0x402>
  return HAL_OK;
 80039e4:	2000      	movs	r0, #0
 80039e6:	e006      	b.n	80039f6 <HAL_RCC_OscConfig+0x3f6>
    return HAL_ERROR;
 80039e8:	2001      	movs	r0, #1
}
 80039ea:	4770      	bx	lr
        return HAL_ERROR;
 80039ec:	2001      	movs	r0, #1
 80039ee:	e002      	b.n	80039f6 <HAL_RCC_OscConfig+0x3f6>
        return HAL_ERROR;
 80039f0:	2001      	movs	r0, #1
 80039f2:	e000      	b.n	80039f6 <HAL_RCC_OscConfig+0x3f6>
  return HAL_OK;
 80039f4:	2000      	movs	r0, #0
}
 80039f6:	b002      	add	sp, #8
 80039f8:	bd70      	pop	{r4, r5, r6, pc}
        return HAL_ERROR;
 80039fa:	2001      	movs	r0, #1
 80039fc:	e7fb      	b.n	80039f6 <HAL_RCC_OscConfig+0x3f6>
          return HAL_ERROR;
 80039fe:	2001      	movs	r0, #1
 8003a00:	e7f9      	b.n	80039f6 <HAL_RCC_OscConfig+0x3f6>
 8003a02:	2001      	movs	r0, #1
 8003a04:	e7f7      	b.n	80039f6 <HAL_RCC_OscConfig+0x3f6>
 8003a06:	bf00      	nop
 8003a08:	40021000 	.word	0x40021000
 8003a0c:	42420000 	.word	0x42420000

08003a10 <HAL_RCC_GetSysClockFreq>:
  tmpreg = RCC->CFGR;
 8003a10:	4b0f      	ldr	r3, [pc, #60]	@ (8003a50 <HAL_RCC_GetSysClockFreq+0x40>)
 8003a12:	685b      	ldr	r3, [r3, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 8003a14:	f003 020c 	and.w	r2, r3, #12
 8003a18:	2a08      	cmp	r2, #8
 8003a1a:	d001      	beq.n	8003a20 <HAL_RCC_GetSysClockFreq+0x10>
      sysclockfreq = HSE_VALUE;
 8003a1c:	480d      	ldr	r0, [pc, #52]	@ (8003a54 <HAL_RCC_GetSysClockFreq+0x44>)
}
 8003a1e:	4770      	bx	lr
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003a20:	f3c3 4283 	ubfx	r2, r3, #18, #4
 8003a24:	490c      	ldr	r1, [pc, #48]	@ (8003a58 <HAL_RCC_GetSysClockFreq+0x48>)
 8003a26:	5c88      	ldrb	r0, [r1, r2]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003a28:	f413 3f80 	tst.w	r3, #65536	@ 0x10000
 8003a2c:	d00b      	beq.n	8003a46 <HAL_RCC_GetSysClockFreq+0x36>
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003a2e:	4b08      	ldr	r3, [pc, #32]	@ (8003a50 <HAL_RCC_GetSysClockFreq+0x40>)
 8003a30:	685b      	ldr	r3, [r3, #4]
 8003a32:	f3c3 4340 	ubfx	r3, r3, #17, #1
 8003a36:	4a09      	ldr	r2, [pc, #36]	@ (8003a5c <HAL_RCC_GetSysClockFreq+0x4c>)
 8003a38:	5cd3      	ldrb	r3, [r2, r3]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003a3a:	4a06      	ldr	r2, [pc, #24]	@ (8003a54 <HAL_RCC_GetSysClockFreq+0x44>)
 8003a3c:	fb02 f000 	mul.w	r0, r2, r0
 8003a40:	fbb0 f0f3 	udiv	r0, r0, r3
 8003a44:	4770      	bx	lr
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003a46:	4b06      	ldr	r3, [pc, #24]	@ (8003a60 <HAL_RCC_GetSysClockFreq+0x50>)
 8003a48:	fb03 f000 	mul.w	r0, r3, r0
 8003a4c:	4770      	bx	lr
 8003a4e:	bf00      	nop
 8003a50:	40021000 	.word	0x40021000
 8003a54:	007a1200 	.word	0x007a1200
 8003a58:	0800b488 	.word	0x0800b488
 8003a5c:	0800b484 	.word	0x0800b484
 8003a60:	003d0900 	.word	0x003d0900

08003a64 <HAL_RCC_ClockConfig>:
  if (RCC_ClkInitStruct == NULL)
 8003a64:	2800      	cmp	r0, #0
 8003a66:	f000 80a0 	beq.w	8003baa <HAL_RCC_ClockConfig+0x146>
{
 8003a6a:	b570      	push	{r4, r5, r6, lr}
 8003a6c:	460d      	mov	r5, r1
 8003a6e:	4604      	mov	r4, r0
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003a70:	4b52      	ldr	r3, [pc, #328]	@ (8003bbc <HAL_RCC_ClockConfig+0x158>)
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	f003 0307 	and.w	r3, r3, #7
 8003a78:	428b      	cmp	r3, r1
 8003a7a:	d20b      	bcs.n	8003a94 <HAL_RCC_ClockConfig+0x30>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003a7c:	4a4f      	ldr	r2, [pc, #316]	@ (8003bbc <HAL_RCC_ClockConfig+0x158>)
 8003a7e:	6813      	ldr	r3, [r2, #0]
 8003a80:	f023 0307 	bic.w	r3, r3, #7
 8003a84:	430b      	orrs	r3, r1
 8003a86:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003a88:	6813      	ldr	r3, [r2, #0]
 8003a8a:	f003 0307 	and.w	r3, r3, #7
 8003a8e:	428b      	cmp	r3, r1
 8003a90:	f040 808d 	bne.w	8003bae <HAL_RCC_ClockConfig+0x14a>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003a94:	6823      	ldr	r3, [r4, #0]
 8003a96:	f013 0f02 	tst.w	r3, #2
 8003a9a:	d017      	beq.n	8003acc <HAL_RCC_ClockConfig+0x68>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003a9c:	f013 0f04 	tst.w	r3, #4
 8003aa0:	d004      	beq.n	8003aac <HAL_RCC_ClockConfig+0x48>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003aa2:	4a47      	ldr	r2, [pc, #284]	@ (8003bc0 <HAL_RCC_ClockConfig+0x15c>)
 8003aa4:	6853      	ldr	r3, [r2, #4]
 8003aa6:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8003aaa:	6053      	str	r3, [r2, #4]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003aac:	6823      	ldr	r3, [r4, #0]
 8003aae:	f013 0f08 	tst.w	r3, #8
 8003ab2:	d004      	beq.n	8003abe <HAL_RCC_ClockConfig+0x5a>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003ab4:	4a42      	ldr	r2, [pc, #264]	@ (8003bc0 <HAL_RCC_ClockConfig+0x15c>)
 8003ab6:	6853      	ldr	r3, [r2, #4]
 8003ab8:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8003abc:	6053      	str	r3, [r2, #4]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003abe:	4a40      	ldr	r2, [pc, #256]	@ (8003bc0 <HAL_RCC_ClockConfig+0x15c>)
 8003ac0:	6853      	ldr	r3, [r2, #4]
 8003ac2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003ac6:	68a1      	ldr	r1, [r4, #8]
 8003ac8:	430b      	orrs	r3, r1
 8003aca:	6053      	str	r3, [r2, #4]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003acc:	6823      	ldr	r3, [r4, #0]
 8003ace:	f013 0f01 	tst.w	r3, #1
 8003ad2:	d031      	beq.n	8003b38 <HAL_RCC_ClockConfig+0xd4>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003ad4:	6863      	ldr	r3, [r4, #4]
 8003ad6:	2b01      	cmp	r3, #1
 8003ad8:	d020      	beq.n	8003b1c <HAL_RCC_ClockConfig+0xb8>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003ada:	2b02      	cmp	r3, #2
 8003adc:	d025      	beq.n	8003b2a <HAL_RCC_ClockConfig+0xc6>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003ade:	4a38      	ldr	r2, [pc, #224]	@ (8003bc0 <HAL_RCC_ClockConfig+0x15c>)
 8003ae0:	6812      	ldr	r2, [r2, #0]
 8003ae2:	f012 0f02 	tst.w	r2, #2
 8003ae6:	d064      	beq.n	8003bb2 <HAL_RCC_ClockConfig+0x14e>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003ae8:	4935      	ldr	r1, [pc, #212]	@ (8003bc0 <HAL_RCC_ClockConfig+0x15c>)
 8003aea:	684a      	ldr	r2, [r1, #4]
 8003aec:	f022 0203 	bic.w	r2, r2, #3
 8003af0:	4313      	orrs	r3, r2
 8003af2:	604b      	str	r3, [r1, #4]
    tickstart = HAL_GetTick();
 8003af4:	f7fe f92c 	bl	8001d50 <HAL_GetTick>
 8003af8:	4606      	mov	r6, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003afa:	4b31      	ldr	r3, [pc, #196]	@ (8003bc0 <HAL_RCC_ClockConfig+0x15c>)
 8003afc:	685b      	ldr	r3, [r3, #4]
 8003afe:	f003 030c 	and.w	r3, r3, #12
 8003b02:	6862      	ldr	r2, [r4, #4]
 8003b04:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8003b08:	d016      	beq.n	8003b38 <HAL_RCC_ClockConfig+0xd4>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003b0a:	f7fe f921 	bl	8001d50 <HAL_GetTick>
 8003b0e:	1b80      	subs	r0, r0, r6
 8003b10:	f241 3388 	movw	r3, #5000	@ 0x1388
 8003b14:	4298      	cmp	r0, r3
 8003b16:	d9f0      	bls.n	8003afa <HAL_RCC_ClockConfig+0x96>
        return HAL_TIMEOUT;
 8003b18:	2003      	movs	r0, #3
 8003b1a:	e045      	b.n	8003ba8 <HAL_RCC_ClockConfig+0x144>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003b1c:	4a28      	ldr	r2, [pc, #160]	@ (8003bc0 <HAL_RCC_ClockConfig+0x15c>)
 8003b1e:	6812      	ldr	r2, [r2, #0]
 8003b20:	f412 3f00 	tst.w	r2, #131072	@ 0x20000
 8003b24:	d1e0      	bne.n	8003ae8 <HAL_RCC_ClockConfig+0x84>
        return HAL_ERROR;
 8003b26:	2001      	movs	r0, #1
 8003b28:	e03e      	b.n	8003ba8 <HAL_RCC_ClockConfig+0x144>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003b2a:	4a25      	ldr	r2, [pc, #148]	@ (8003bc0 <HAL_RCC_ClockConfig+0x15c>)
 8003b2c:	6812      	ldr	r2, [r2, #0]
 8003b2e:	f012 7f00 	tst.w	r2, #33554432	@ 0x2000000
 8003b32:	d1d9      	bne.n	8003ae8 <HAL_RCC_ClockConfig+0x84>
        return HAL_ERROR;
 8003b34:	2001      	movs	r0, #1
 8003b36:	e037      	b.n	8003ba8 <HAL_RCC_ClockConfig+0x144>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003b38:	4b20      	ldr	r3, [pc, #128]	@ (8003bbc <HAL_RCC_ClockConfig+0x158>)
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	f003 0307 	and.w	r3, r3, #7
 8003b40:	42ab      	cmp	r3, r5
 8003b42:	d90a      	bls.n	8003b5a <HAL_RCC_ClockConfig+0xf6>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003b44:	4a1d      	ldr	r2, [pc, #116]	@ (8003bbc <HAL_RCC_ClockConfig+0x158>)
 8003b46:	6813      	ldr	r3, [r2, #0]
 8003b48:	f023 0307 	bic.w	r3, r3, #7
 8003b4c:	432b      	orrs	r3, r5
 8003b4e:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003b50:	6813      	ldr	r3, [r2, #0]
 8003b52:	f003 0307 	and.w	r3, r3, #7
 8003b56:	42ab      	cmp	r3, r5
 8003b58:	d12d      	bne.n	8003bb6 <HAL_RCC_ClockConfig+0x152>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003b5a:	6823      	ldr	r3, [r4, #0]
 8003b5c:	f013 0f04 	tst.w	r3, #4
 8003b60:	d006      	beq.n	8003b70 <HAL_RCC_ClockConfig+0x10c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003b62:	4a17      	ldr	r2, [pc, #92]	@ (8003bc0 <HAL_RCC_ClockConfig+0x15c>)
 8003b64:	6853      	ldr	r3, [r2, #4]
 8003b66:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8003b6a:	68e1      	ldr	r1, [r4, #12]
 8003b6c:	430b      	orrs	r3, r1
 8003b6e:	6053      	str	r3, [r2, #4]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003b70:	6823      	ldr	r3, [r4, #0]
 8003b72:	f013 0f08 	tst.w	r3, #8
 8003b76:	d007      	beq.n	8003b88 <HAL_RCC_ClockConfig+0x124>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003b78:	4a11      	ldr	r2, [pc, #68]	@ (8003bc0 <HAL_RCC_ClockConfig+0x15c>)
 8003b7a:	6853      	ldr	r3, [r2, #4]
 8003b7c:	f423 5360 	bic.w	r3, r3, #14336	@ 0x3800
 8003b80:	6921      	ldr	r1, [r4, #16]
 8003b82:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8003b86:	6053      	str	r3, [r2, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003b88:	f7ff ff42 	bl	8003a10 <HAL_RCC_GetSysClockFreq>
 8003b8c:	4b0c      	ldr	r3, [pc, #48]	@ (8003bc0 <HAL_RCC_ClockConfig+0x15c>)
 8003b8e:	685b      	ldr	r3, [r3, #4]
 8003b90:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8003b94:	4a0b      	ldr	r2, [pc, #44]	@ (8003bc4 <HAL_RCC_ClockConfig+0x160>)
 8003b96:	5cd3      	ldrb	r3, [r2, r3]
 8003b98:	40d8      	lsrs	r0, r3
 8003b9a:	4b0b      	ldr	r3, [pc, #44]	@ (8003bc8 <HAL_RCC_ClockConfig+0x164>)
 8003b9c:	6018      	str	r0, [r3, #0]
  HAL_InitTick(uwTickPrio);
 8003b9e:	4b0b      	ldr	r3, [pc, #44]	@ (8003bcc <HAL_RCC_ClockConfig+0x168>)
 8003ba0:	6818      	ldr	r0, [r3, #0]
 8003ba2:	f7fe f891 	bl	8001cc8 <HAL_InitTick>
  return HAL_OK;
 8003ba6:	2000      	movs	r0, #0
}
 8003ba8:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 8003baa:	2001      	movs	r0, #1
}
 8003bac:	4770      	bx	lr
    return HAL_ERROR;
 8003bae:	2001      	movs	r0, #1
 8003bb0:	e7fa      	b.n	8003ba8 <HAL_RCC_ClockConfig+0x144>
        return HAL_ERROR;
 8003bb2:	2001      	movs	r0, #1
 8003bb4:	e7f8      	b.n	8003ba8 <HAL_RCC_ClockConfig+0x144>
    return HAL_ERROR;
 8003bb6:	2001      	movs	r0, #1
 8003bb8:	e7f6      	b.n	8003ba8 <HAL_RCC_ClockConfig+0x144>
 8003bba:	bf00      	nop
 8003bbc:	40022000 	.word	0x40022000
 8003bc0:	40021000 	.word	0x40021000
 8003bc4:	0800b474 	.word	0x0800b474
 8003bc8:	20000000 	.word	0x20000000
 8003bcc:	20000008 	.word	0x20000008

08003bd0 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003bd0:	b570      	push	{r4, r5, r6, lr}
 8003bd2:	b082      	sub	sp, #8
 8003bd4:	4604      	mov	r4, r0

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8003bd6:	6803      	ldr	r3, [r0, #0]
 8003bd8:	f013 0f01 	tst.w	r3, #1
 8003bdc:	d036      	beq.n	8003c4c <HAL_RCCEx_PeriphCLKConfig+0x7c>
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003bde:	4b3f      	ldr	r3, [pc, #252]	@ (8003cdc <HAL_RCCEx_PeriphCLKConfig+0x10c>)
 8003be0:	69db      	ldr	r3, [r3, #28]
 8003be2:	f013 5f80 	tst.w	r3, #268435456	@ 0x10000000
 8003be6:	d149      	bne.n	8003c7c <HAL_RCCEx_PeriphCLKConfig+0xac>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003be8:	4b3c      	ldr	r3, [pc, #240]	@ (8003cdc <HAL_RCCEx_PeriphCLKConfig+0x10c>)
 8003bea:	69da      	ldr	r2, [r3, #28]
 8003bec:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8003bf0:	61da      	str	r2, [r3, #28]
 8003bf2:	69db      	ldr	r3, [r3, #28]
 8003bf4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003bf8:	9301      	str	r3, [sp, #4]
 8003bfa:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8003bfc:	2501      	movs	r5, #1
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003bfe:	4b38      	ldr	r3, [pc, #224]	@ (8003ce0 <HAL_RCCEx_PeriphCLKConfig+0x110>)
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	f413 7f80 	tst.w	r3, #256	@ 0x100
 8003c06:	d03b      	beq.n	8003c80 <HAL_RCCEx_PeriphCLKConfig+0xb0>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003c08:	4b34      	ldr	r3, [pc, #208]	@ (8003cdc <HAL_RCCEx_PeriphCLKConfig+0x10c>)
 8003c0a:	6a1b      	ldr	r3, [r3, #32]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003c0c:	f413 7340 	ands.w	r3, r3, #768	@ 0x300
 8003c10:	d013      	beq.n	8003c3a <HAL_RCCEx_PeriphCLKConfig+0x6a>
 8003c12:	6862      	ldr	r2, [r4, #4]
 8003c14:	f402 7240 	and.w	r2, r2, #768	@ 0x300
 8003c18:	429a      	cmp	r2, r3
 8003c1a:	d00e      	beq.n	8003c3a <HAL_RCCEx_PeriphCLKConfig+0x6a>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003c1c:	4a2f      	ldr	r2, [pc, #188]	@ (8003cdc <HAL_RCCEx_PeriphCLKConfig+0x10c>)
 8003c1e:	6a13      	ldr	r3, [r2, #32]
 8003c20:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003c24:	492f      	ldr	r1, [pc, #188]	@ (8003ce4 <HAL_RCCEx_PeriphCLKConfig+0x114>)
 8003c26:	2601      	movs	r6, #1
 8003c28:	f8c1 6440 	str.w	r6, [r1, #1088]	@ 0x440
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003c2c:	2600      	movs	r6, #0
 8003c2e:	f8c1 6440 	str.w	r6, [r1, #1088]	@ 0x440
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003c32:	6210      	str	r0, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003c34:	f013 0f01 	tst.w	r3, #1
 8003c38:	d136      	bne.n	8003ca8 <HAL_RCCEx_PeriphCLKConfig+0xd8>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003c3a:	4a28      	ldr	r2, [pc, #160]	@ (8003cdc <HAL_RCCEx_PeriphCLKConfig+0x10c>)
 8003c3c:	6a13      	ldr	r3, [r2, #32]
 8003c3e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003c42:	6861      	ldr	r1, [r4, #4]
 8003c44:	430b      	orrs	r3, r1
 8003c46:	6213      	str	r3, [r2, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003c48:	2d00      	cmp	r5, #0
 8003c4a:	d13e      	bne.n	8003cca <HAL_RCCEx_PeriphCLKConfig+0xfa>
      __HAL_RCC_PWR_CLK_DISABLE();
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003c4c:	6823      	ldr	r3, [r4, #0]
 8003c4e:	f013 0f02 	tst.w	r3, #2
 8003c52:	d006      	beq.n	8003c62 <HAL_RCCEx_PeriphCLKConfig+0x92>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003c54:	4a21      	ldr	r2, [pc, #132]	@ (8003cdc <HAL_RCCEx_PeriphCLKConfig+0x10c>)
 8003c56:	6853      	ldr	r3, [r2, #4]
 8003c58:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8003c5c:	68a1      	ldr	r1, [r4, #8]
 8003c5e:	430b      	orrs	r3, r1
 8003c60:	6053      	str	r3, [r2, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003c62:	6823      	ldr	r3, [r4, #0]
 8003c64:	f013 0f10 	tst.w	r3, #16
 8003c68:	d034      	beq.n	8003cd4 <HAL_RCCEx_PeriphCLKConfig+0x104>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003c6a:	4a1c      	ldr	r2, [pc, #112]	@ (8003cdc <HAL_RCCEx_PeriphCLKConfig+0x10c>)
 8003c6c:	6853      	ldr	r3, [r2, #4]
 8003c6e:	f423 0380 	bic.w	r3, r3, #4194304	@ 0x400000
 8003c72:	68e1      	ldr	r1, [r4, #12]
 8003c74:	430b      	orrs	r3, r1
 8003c76:	6053      	str	r3, [r2, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8003c78:	2000      	movs	r0, #0
 8003c7a:	e02c      	b.n	8003cd6 <HAL_RCCEx_PeriphCLKConfig+0x106>
    FlagStatus pwrclkchanged = RESET;
 8003c7c:	2500      	movs	r5, #0
 8003c7e:	e7be      	b.n	8003bfe <HAL_RCCEx_PeriphCLKConfig+0x2e>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003c80:	4a17      	ldr	r2, [pc, #92]	@ (8003ce0 <HAL_RCCEx_PeriphCLKConfig+0x110>)
 8003c82:	6813      	ldr	r3, [r2, #0]
 8003c84:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003c88:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 8003c8a:	f7fe f861 	bl	8001d50 <HAL_GetTick>
 8003c8e:	4606      	mov	r6, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c90:	4b13      	ldr	r3, [pc, #76]	@ (8003ce0 <HAL_RCCEx_PeriphCLKConfig+0x110>)
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	f413 7f80 	tst.w	r3, #256	@ 0x100
 8003c98:	d1b6      	bne.n	8003c08 <HAL_RCCEx_PeriphCLKConfig+0x38>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003c9a:	f7fe f859 	bl	8001d50 <HAL_GetTick>
 8003c9e:	1b80      	subs	r0, r0, r6
 8003ca0:	2864      	cmp	r0, #100	@ 0x64
 8003ca2:	d9f5      	bls.n	8003c90 <HAL_RCCEx_PeriphCLKConfig+0xc0>
          return HAL_TIMEOUT;
 8003ca4:	2003      	movs	r0, #3
 8003ca6:	e016      	b.n	8003cd6 <HAL_RCCEx_PeriphCLKConfig+0x106>
        tickstart = HAL_GetTick();
 8003ca8:	f7fe f852 	bl	8001d50 <HAL_GetTick>
 8003cac:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003cae:	4b0b      	ldr	r3, [pc, #44]	@ (8003cdc <HAL_RCCEx_PeriphCLKConfig+0x10c>)
 8003cb0:	6a1b      	ldr	r3, [r3, #32]
 8003cb2:	f013 0f02 	tst.w	r3, #2
 8003cb6:	d1c0      	bne.n	8003c3a <HAL_RCCEx_PeriphCLKConfig+0x6a>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003cb8:	f7fe f84a 	bl	8001d50 <HAL_GetTick>
 8003cbc:	1b80      	subs	r0, r0, r6
 8003cbe:	f241 3388 	movw	r3, #5000	@ 0x1388
 8003cc2:	4298      	cmp	r0, r3
 8003cc4:	d9f3      	bls.n	8003cae <HAL_RCCEx_PeriphCLKConfig+0xde>
            return HAL_TIMEOUT;
 8003cc6:	2003      	movs	r0, #3
 8003cc8:	e005      	b.n	8003cd6 <HAL_RCCEx_PeriphCLKConfig+0x106>
      __HAL_RCC_PWR_CLK_DISABLE();
 8003cca:	69d3      	ldr	r3, [r2, #28]
 8003ccc:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003cd0:	61d3      	str	r3, [r2, #28]
 8003cd2:	e7bb      	b.n	8003c4c <HAL_RCCEx_PeriphCLKConfig+0x7c>
  return HAL_OK;
 8003cd4:	2000      	movs	r0, #0
}
 8003cd6:	b002      	add	sp, #8
 8003cd8:	bd70      	pop	{r4, r5, r6, pc}
 8003cda:	bf00      	nop
 8003cdc:	40021000 	.word	0x40021000
 8003ce0:	40007000 	.word	0x40007000
 8003ce4:	42420000 	.word	0x42420000

08003ce8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003ce8:	b430      	push	{r4, r5}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003cea:	6a02      	ldr	r2, [r0, #32]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003cec:	6a03      	ldr	r3, [r0, #32]
 8003cee:	f023 0301 	bic.w	r3, r3, #1
 8003cf2:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003cf4:	6845      	ldr	r5, [r0, #4]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003cf6:	6983      	ldr	r3, [r0, #24]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003cf8:	f023 0373 	bic.w	r3, r3, #115	@ 0x73
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003cfc:	680c      	ldr	r4, [r1, #0]
 8003cfe:	431c      	orrs	r4, r3

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003d00:	f022 0202 	bic.w	r2, r2, #2
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003d04:	688b      	ldr	r3, [r1, #8]
 8003d06:	4313      	orrs	r3, r2

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003d08:	4a0b      	ldr	r2, [pc, #44]	@ (8003d38 <TIM_OC1_SetConfig+0x50>)
 8003d0a:	4290      	cmp	r0, r2
 8003d0c:	d006      	beq.n	8003d1c <TIM_OC1_SetConfig+0x34>
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003d0e:	6045      	str	r5, [r0, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003d10:	6184      	str	r4, [r0, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003d12:	684a      	ldr	r2, [r1, #4]
 8003d14:	6342      	str	r2, [r0, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003d16:	6203      	str	r3, [r0, #32]
}
 8003d18:	bc30      	pop	{r4, r5}
 8003d1a:	4770      	bx	lr
    tmpccer &= ~TIM_CCER_CC1NP;
 8003d1c:	f023 0308 	bic.w	r3, r3, #8
    tmpccer |= OC_Config->OCNPolarity;
 8003d20:	68ca      	ldr	r2, [r1, #12]
 8003d22:	431a      	orrs	r2, r3
    tmpccer &= ~TIM_CCER_CC1NE;
 8003d24:	f022 0304 	bic.w	r3, r2, #4
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003d28:	f425 7540 	bic.w	r5, r5, #768	@ 0x300
    tmpcr2 |= OC_Config->OCIdleState;
 8003d2c:	694a      	ldr	r2, [r1, #20]
 8003d2e:	432a      	orrs	r2, r5
    tmpcr2 |= OC_Config->OCNIdleState;
 8003d30:	698d      	ldr	r5, [r1, #24]
 8003d32:	4315      	orrs	r5, r2
 8003d34:	e7eb      	b.n	8003d0e <TIM_OC1_SetConfig+0x26>
 8003d36:	bf00      	nop
 8003d38:	40012c00 	.word	0x40012c00

08003d3c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003d3c:	b430      	push	{r4, r5}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003d3e:	6a03      	ldr	r3, [r0, #32]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003d40:	6a02      	ldr	r2, [r0, #32]
 8003d42:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003d46:	6202      	str	r2, [r0, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003d48:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003d4a:	69c2      	ldr	r2, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003d4c:	f022 0273 	bic.w	r2, r2, #115	@ 0x73
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003d50:	680d      	ldr	r5, [r1, #0]
 8003d52:	4315      	orrs	r5, r2

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003d54:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003d58:	688a      	ldr	r2, [r1, #8]
 8003d5a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003d5e:	4a0d      	ldr	r2, [pc, #52]	@ (8003d94 <TIM_OC3_SetConfig+0x58>)
 8003d60:	4290      	cmp	r0, r2
 8003d62:	d006      	beq.n	8003d72 <TIM_OC3_SetConfig+0x36>
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003d64:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003d66:	61c5      	str	r5, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003d68:	684a      	ldr	r2, [r1, #4]
 8003d6a:	63c2      	str	r2, [r0, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003d6c:	6203      	str	r3, [r0, #32]
}
 8003d6e:	bc30      	pop	{r4, r5}
 8003d70:	4770      	bx	lr
    tmpccer &= ~TIM_CCER_CC3NP;
 8003d72:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003d76:	68ca      	ldr	r2, [r1, #12]
 8003d78:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    tmpccer &= ~TIM_CCER_CC3NE;
 8003d7c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003d80:	f424 5440 	bic.w	r4, r4, #12288	@ 0x3000
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003d84:	694a      	ldr	r2, [r1, #20]
 8003d86:	ea44 1402 	orr.w	r4, r4, r2, lsl #4
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003d8a:	698a      	ldr	r2, [r1, #24]
 8003d8c:	ea44 1402 	orr.w	r4, r4, r2, lsl #4
 8003d90:	e7e8      	b.n	8003d64 <TIM_OC3_SetConfig+0x28>
 8003d92:	bf00      	nop
 8003d94:	40012c00 	.word	0x40012c00

08003d98 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003d98:	b430      	push	{r4, r5}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003d9a:	6a03      	ldr	r3, [r0, #32]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003d9c:	6a02      	ldr	r2, [r0, #32]
 8003d9e:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8003da2:	6202      	str	r2, [r0, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003da4:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003da6:	69c2      	ldr	r2, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003da8:	f422 42e6 	bic.w	r2, r2, #29440	@ 0x7300

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003dac:	680d      	ldr	r5, [r1, #0]
 8003dae:	ea42 2205 	orr.w	r2, r2, r5, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003db2:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003db6:	688d      	ldr	r5, [r1, #8]
 8003db8:	ea43 3305 	orr.w	r3, r3, r5, lsl #12

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003dbc:	4d07      	ldr	r5, [pc, #28]	@ (8003ddc <TIM_OC4_SetConfig+0x44>)
 8003dbe:	42a8      	cmp	r0, r5
 8003dc0:	d006      	beq.n	8003dd0 <TIM_OC4_SetConfig+0x38>
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003dc2:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003dc4:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003dc6:	684a      	ldr	r2, [r1, #4]
 8003dc8:	6402      	str	r2, [r0, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003dca:	6203      	str	r3, [r0, #32]
}
 8003dcc:	bc30      	pop	{r4, r5}
 8003dce:	4770      	bx	lr
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003dd0:	f424 4480 	bic.w	r4, r4, #16384	@ 0x4000
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003dd4:	694d      	ldr	r5, [r1, #20]
 8003dd6:	ea44 1485 	orr.w	r4, r4, r5, lsl #6
 8003dda:	e7f2      	b.n	8003dc2 <TIM_OC4_SetConfig+0x2a>
 8003ddc:	40012c00 	.word	0x40012c00

08003de0 <TIM_Base_SetConfig>:
  tmpcr1 = TIMx->CR1;
 8003de0:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003de2:	4a1f      	ldr	r2, [pc, #124]	@ (8003e60 <TIM_Base_SetConfig+0x80>)
 8003de4:	4290      	cmp	r0, r2
 8003de6:	d00a      	beq.n	8003dfe <TIM_Base_SetConfig+0x1e>
 8003de8:	f1b0 4f80 	cmp.w	r0, #1073741824	@ 0x40000000
 8003dec:	d007      	beq.n	8003dfe <TIM_Base_SetConfig+0x1e>
 8003dee:	f5a2 3294 	sub.w	r2, r2, #75776	@ 0x12800
 8003df2:	4290      	cmp	r0, r2
 8003df4:	d003      	beq.n	8003dfe <TIM_Base_SetConfig+0x1e>
 8003df6:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8003dfa:	4290      	cmp	r0, r2
 8003dfc:	d103      	bne.n	8003e06 <TIM_Base_SetConfig+0x26>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003dfe:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
    tmpcr1 |= Structure->CounterMode;
 8003e02:	684a      	ldr	r2, [r1, #4]
 8003e04:	4313      	orrs	r3, r2
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003e06:	4a16      	ldr	r2, [pc, #88]	@ (8003e60 <TIM_Base_SetConfig+0x80>)
 8003e08:	4290      	cmp	r0, r2
 8003e0a:	d00a      	beq.n	8003e22 <TIM_Base_SetConfig+0x42>
 8003e0c:	f1b0 4f80 	cmp.w	r0, #1073741824	@ 0x40000000
 8003e10:	d007      	beq.n	8003e22 <TIM_Base_SetConfig+0x42>
 8003e12:	f5a2 3294 	sub.w	r2, r2, #75776	@ 0x12800
 8003e16:	4290      	cmp	r0, r2
 8003e18:	d003      	beq.n	8003e22 <TIM_Base_SetConfig+0x42>
 8003e1a:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8003e1e:	4290      	cmp	r0, r2
 8003e20:	d103      	bne.n	8003e2a <TIM_Base_SetConfig+0x4a>
    tmpcr1 &= ~TIM_CR1_CKD;
 8003e22:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003e26:	68ca      	ldr	r2, [r1, #12]
 8003e28:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003e2a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003e2e:	694a      	ldr	r2, [r1, #20]
 8003e30:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 8003e32:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003e34:	688b      	ldr	r3, [r1, #8]
 8003e36:	62c3      	str	r3, [r0, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 8003e38:	680b      	ldr	r3, [r1, #0]
 8003e3a:	6283      	str	r3, [r0, #40]	@ 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003e3c:	4b08      	ldr	r3, [pc, #32]	@ (8003e60 <TIM_Base_SetConfig+0x80>)
 8003e3e:	4298      	cmp	r0, r3
 8003e40:	d00a      	beq.n	8003e58 <TIM_Base_SetConfig+0x78>
  TIMx->EGR = TIM_EGR_UG;
 8003e42:	2301      	movs	r3, #1
 8003e44:	6143      	str	r3, [r0, #20]
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003e46:	6903      	ldr	r3, [r0, #16]
 8003e48:	f013 0f01 	tst.w	r3, #1
 8003e4c:	d003      	beq.n	8003e56 <TIM_Base_SetConfig+0x76>
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003e4e:	6903      	ldr	r3, [r0, #16]
 8003e50:	f023 0301 	bic.w	r3, r3, #1
 8003e54:	6103      	str	r3, [r0, #16]
}
 8003e56:	4770      	bx	lr
    TIMx->RCR = Structure->RepetitionCounter;
 8003e58:	690b      	ldr	r3, [r1, #16]
 8003e5a:	6303      	str	r3, [r0, #48]	@ 0x30
 8003e5c:	e7f1      	b.n	8003e42 <TIM_Base_SetConfig+0x62>
 8003e5e:	bf00      	nop
 8003e60:	40012c00 	.word	0x40012c00

08003e64 <HAL_TIM_PWM_Init>:
  if (htim == NULL)
 8003e64:	b340      	cbz	r0, 8003eb8 <HAL_TIM_PWM_Init+0x54>
{
 8003e66:	b510      	push	{r4, lr}
 8003e68:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 8003e6a:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 8003e6e:	b1f3      	cbz	r3, 8003eae <HAL_TIM_PWM_Init+0x4a>
  htim->State = HAL_TIM_STATE_BUSY;
 8003e70:	2302      	movs	r3, #2
 8003e72:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003e76:	4621      	mov	r1, r4
 8003e78:	f851 0b04 	ldr.w	r0, [r1], #4
 8003e7c:	f7ff ffb0 	bl	8003de0 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003e80:	2301      	movs	r3, #1
 8003e82:	f884 3046 	strb.w	r3, [r4, #70]	@ 0x46
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003e86:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
 8003e8a:	f884 303f 	strb.w	r3, [r4, #63]	@ 0x3f
 8003e8e:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
 8003e92:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003e96:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8003e9a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003e9e:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
 8003ea2:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
  htim->State = HAL_TIM_STATE_READY;
 8003ea6:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  return HAL_OK;
 8003eaa:	2000      	movs	r0, #0
}
 8003eac:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 8003eae:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c
    HAL_TIM_PWM_MspInit(htim);
 8003eb2:	f7fd fe29 	bl	8001b08 <HAL_TIM_PWM_MspInit>
 8003eb6:	e7db      	b.n	8003e70 <HAL_TIM_PWM_Init+0xc>
    return HAL_ERROR;
 8003eb8:	2001      	movs	r0, #1
}
 8003eba:	4770      	bx	lr

08003ebc <TIM_OC2_SetConfig>:
{
 8003ebc:	b430      	push	{r4, r5}
  tmpccer = TIMx->CCER;
 8003ebe:	6a03      	ldr	r3, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003ec0:	6a02      	ldr	r2, [r0, #32]
 8003ec2:	f022 0210 	bic.w	r2, r2, #16
 8003ec6:	6202      	str	r2, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 8003ec8:	6844      	ldr	r4, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 8003eca:	6982      	ldr	r2, [r0, #24]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003ecc:	f422 42e6 	bic.w	r2, r2, #29440	@ 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003ed0:	680d      	ldr	r5, [r1, #0]
 8003ed2:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  tmpccer &= ~TIM_CCER_CC2P;
 8003ed6:	f023 0320 	bic.w	r3, r3, #32
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003eda:	688d      	ldr	r5, [r1, #8]
 8003edc:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003ee0:	4d0c      	ldr	r5, [pc, #48]	@ (8003f14 <TIM_OC2_SetConfig+0x58>)
 8003ee2:	42a8      	cmp	r0, r5
 8003ee4:	d006      	beq.n	8003ef4 <TIM_OC2_SetConfig+0x38>
  TIMx->CR2 = tmpcr2;
 8003ee6:	6044      	str	r4, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 8003ee8:	6182      	str	r2, [r0, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 8003eea:	684a      	ldr	r2, [r1, #4]
 8003eec:	6382      	str	r2, [r0, #56]	@ 0x38
  TIMx->CCER = tmpccer;
 8003eee:	6203      	str	r3, [r0, #32]
}
 8003ef0:	bc30      	pop	{r4, r5}
 8003ef2:	4770      	bx	lr
    tmpccer &= ~TIM_CCER_CC2NP;
 8003ef4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003ef8:	68cd      	ldr	r5, [r1, #12]
 8003efa:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
    tmpccer &= ~TIM_CCER_CC2NE;
 8003efe:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003f02:	f424 6440 	bic.w	r4, r4, #3072	@ 0xc00
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003f06:	694d      	ldr	r5, [r1, #20]
 8003f08:	ea44 0485 	orr.w	r4, r4, r5, lsl #2
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003f0c:	698d      	ldr	r5, [r1, #24]
 8003f0e:	ea44 0485 	orr.w	r4, r4, r5, lsl #2
 8003f12:	e7e8      	b.n	8003ee6 <TIM_OC2_SetConfig+0x2a>
 8003f14:	40012c00 	.word	0x40012c00

08003f18 <HAL_TIM_PWM_ConfigChannel>:
{
 8003f18:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(htim);
 8003f1a:	f890 303c 	ldrb.w	r3, [r0, #60]	@ 0x3c
 8003f1e:	2b01      	cmp	r3, #1
 8003f20:	d066      	beq.n	8003ff0 <HAL_TIM_PWM_ConfigChannel+0xd8>
 8003f22:	4604      	mov	r4, r0
 8003f24:	460d      	mov	r5, r1
 8003f26:	2301      	movs	r3, #1
 8003f28:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c
  switch (Channel)
 8003f2c:	2a0c      	cmp	r2, #12
 8003f2e:	d85a      	bhi.n	8003fe6 <HAL_TIM_PWM_ConfigChannel+0xce>
 8003f30:	e8df f002 	tbb	[pc, r2]
 8003f34:	59595907 	.word	0x59595907
 8003f38:	5959591b 	.word	0x5959591b
 8003f3c:	59595930 	.word	0x59595930
 8003f40:	44          	.byte	0x44
 8003f41:	00          	.byte	0x00
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003f42:	6800      	ldr	r0, [r0, #0]
 8003f44:	f7ff fed0 	bl	8003ce8 <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003f48:	6822      	ldr	r2, [r4, #0]
 8003f4a:	6993      	ldr	r3, [r2, #24]
 8003f4c:	f043 0308 	orr.w	r3, r3, #8
 8003f50:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003f52:	6822      	ldr	r2, [r4, #0]
 8003f54:	6993      	ldr	r3, [r2, #24]
 8003f56:	f023 0304 	bic.w	r3, r3, #4
 8003f5a:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003f5c:	6822      	ldr	r2, [r4, #0]
 8003f5e:	6993      	ldr	r3, [r2, #24]
 8003f60:	6929      	ldr	r1, [r5, #16]
 8003f62:	430b      	orrs	r3, r1
 8003f64:	6193      	str	r3, [r2, #24]
  HAL_StatusTypeDef status = HAL_OK;
 8003f66:	2000      	movs	r0, #0
      break;
 8003f68:	e03e      	b.n	8003fe8 <HAL_TIM_PWM_ConfigChannel+0xd0>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003f6a:	6800      	ldr	r0, [r0, #0]
 8003f6c:	f7ff ffa6 	bl	8003ebc <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003f70:	6822      	ldr	r2, [r4, #0]
 8003f72:	6993      	ldr	r3, [r2, #24]
 8003f74:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8003f78:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003f7a:	6822      	ldr	r2, [r4, #0]
 8003f7c:	6993      	ldr	r3, [r2, #24]
 8003f7e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003f82:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003f84:	6822      	ldr	r2, [r4, #0]
 8003f86:	6993      	ldr	r3, [r2, #24]
 8003f88:	6929      	ldr	r1, [r5, #16]
 8003f8a:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8003f8e:	6193      	str	r3, [r2, #24]
  HAL_StatusTypeDef status = HAL_OK;
 8003f90:	2000      	movs	r0, #0
      break;
 8003f92:	e029      	b.n	8003fe8 <HAL_TIM_PWM_ConfigChannel+0xd0>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003f94:	6800      	ldr	r0, [r0, #0]
 8003f96:	f7ff fed1 	bl	8003d3c <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003f9a:	6822      	ldr	r2, [r4, #0]
 8003f9c:	69d3      	ldr	r3, [r2, #28]
 8003f9e:	f043 0308 	orr.w	r3, r3, #8
 8003fa2:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003fa4:	6822      	ldr	r2, [r4, #0]
 8003fa6:	69d3      	ldr	r3, [r2, #28]
 8003fa8:	f023 0304 	bic.w	r3, r3, #4
 8003fac:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003fae:	6822      	ldr	r2, [r4, #0]
 8003fb0:	69d3      	ldr	r3, [r2, #28]
 8003fb2:	6929      	ldr	r1, [r5, #16]
 8003fb4:	430b      	orrs	r3, r1
 8003fb6:	61d3      	str	r3, [r2, #28]
  HAL_StatusTypeDef status = HAL_OK;
 8003fb8:	2000      	movs	r0, #0
      break;
 8003fba:	e015      	b.n	8003fe8 <HAL_TIM_PWM_ConfigChannel+0xd0>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003fbc:	6800      	ldr	r0, [r0, #0]
 8003fbe:	f7ff feeb 	bl	8003d98 <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003fc2:	6822      	ldr	r2, [r4, #0]
 8003fc4:	69d3      	ldr	r3, [r2, #28]
 8003fc6:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8003fca:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003fcc:	6822      	ldr	r2, [r4, #0]
 8003fce:	69d3      	ldr	r3, [r2, #28]
 8003fd0:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003fd4:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003fd6:	6822      	ldr	r2, [r4, #0]
 8003fd8:	69d3      	ldr	r3, [r2, #28]
 8003fda:	6929      	ldr	r1, [r5, #16]
 8003fdc:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8003fe0:	61d3      	str	r3, [r2, #28]
  HAL_StatusTypeDef status = HAL_OK;
 8003fe2:	2000      	movs	r0, #0
      break;
 8003fe4:	e000      	b.n	8003fe8 <HAL_TIM_PWM_ConfigChannel+0xd0>
  switch (Channel)
 8003fe6:	2001      	movs	r0, #1
  __HAL_UNLOCK(htim);
 8003fe8:	2300      	movs	r3, #0
 8003fea:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
}
 8003fee:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(htim);
 8003ff0:	2002      	movs	r0, #2
 8003ff2:	e7fc      	b.n	8003fee <HAL_TIM_PWM_ConfigChannel+0xd6>

08003ff4 <TIM_CCxChannelCmd>:

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003ff4:	f001 011f 	and.w	r1, r1, #31
 8003ff8:	f04f 0c01 	mov.w	ip, #1
 8003ffc:	fa0c fc01 	lsl.w	ip, ip, r1

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004000:	6a03      	ldr	r3, [r0, #32]
 8004002:	ea23 030c 	bic.w	r3, r3, ip
 8004006:	6203      	str	r3, [r0, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004008:	6a03      	ldr	r3, [r0, #32]
 800400a:	408a      	lsls	r2, r1
 800400c:	4313      	orrs	r3, r2
 800400e:	6203      	str	r3, [r0, #32]
}
 8004010:	4770      	bx	lr
	...

08004014 <HAL_TIM_PWM_Start>:
{
 8004014:	b510      	push	{r4, lr}
 8004016:	4604      	mov	r4, r0
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004018:	4608      	mov	r0, r1
 800401a:	bb51      	cbnz	r1, 8004072 <HAL_TIM_PWM_Start+0x5e>
 800401c:	f894 303e 	ldrb.w	r3, [r4, #62]	@ 0x3e
 8004020:	b2db      	uxtb	r3, r3
 8004022:	3b01      	subs	r3, #1
 8004024:	bf18      	it	ne
 8004026:	2301      	movne	r3, #1
 8004028:	2b00      	cmp	r3, #0
 800402a:	d15b      	bne.n	80040e4 <HAL_TIM_PWM_Start+0xd0>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800402c:	2800      	cmp	r0, #0
 800402e:	d139      	bne.n	80040a4 <HAL_TIM_PWM_Start+0x90>
 8004030:	2302      	movs	r3, #2
 8004032:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004036:	2201      	movs	r2, #1
 8004038:	4601      	mov	r1, r0
 800403a:	6820      	ldr	r0, [r4, #0]
 800403c:	f7ff ffda 	bl	8003ff4 <TIM_CCxChannelCmd>
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004040:	6823      	ldr	r3, [r4, #0]
 8004042:	4a2a      	ldr	r2, [pc, #168]	@ (80040ec <HAL_TIM_PWM_Start+0xd8>)
 8004044:	4293      	cmp	r3, r2
 8004046:	d03d      	beq.n	80040c4 <HAL_TIM_PWM_Start+0xb0>
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004048:	6823      	ldr	r3, [r4, #0]
 800404a:	4a28      	ldr	r2, [pc, #160]	@ (80040ec <HAL_TIM_PWM_Start+0xd8>)
 800404c:	4293      	cmp	r3, r2
 800404e:	d03e      	beq.n	80040ce <HAL_TIM_PWM_Start+0xba>
 8004050:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004054:	d03b      	beq.n	80040ce <HAL_TIM_PWM_Start+0xba>
 8004056:	f5a2 3294 	sub.w	r2, r2, #75776	@ 0x12800
 800405a:	4293      	cmp	r3, r2
 800405c:	d037      	beq.n	80040ce <HAL_TIM_PWM_Start+0xba>
 800405e:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8004062:	4293      	cmp	r3, r2
 8004064:	d033      	beq.n	80040ce <HAL_TIM_PWM_Start+0xba>
    __HAL_TIM_ENABLE(htim);
 8004066:	681a      	ldr	r2, [r3, #0]
 8004068:	f042 0201 	orr.w	r2, r2, #1
 800406c:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 800406e:	2000      	movs	r0, #0
 8004070:	e039      	b.n	80040e6 <HAL_TIM_PWM_Start+0xd2>
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004072:	2904      	cmp	r1, #4
 8004074:	d008      	beq.n	8004088 <HAL_TIM_PWM_Start+0x74>
 8004076:	2908      	cmp	r1, #8
 8004078:	d00d      	beq.n	8004096 <HAL_TIM_PWM_Start+0x82>
 800407a:	f894 3041 	ldrb.w	r3, [r4, #65]	@ 0x41
 800407e:	b2db      	uxtb	r3, r3
 8004080:	3b01      	subs	r3, #1
 8004082:	bf18      	it	ne
 8004084:	2301      	movne	r3, #1
 8004086:	e7cf      	b.n	8004028 <HAL_TIM_PWM_Start+0x14>
 8004088:	f894 303f 	ldrb.w	r3, [r4, #63]	@ 0x3f
 800408c:	b2db      	uxtb	r3, r3
 800408e:	3b01      	subs	r3, #1
 8004090:	bf18      	it	ne
 8004092:	2301      	movne	r3, #1
 8004094:	e7c8      	b.n	8004028 <HAL_TIM_PWM_Start+0x14>
 8004096:	f894 3040 	ldrb.w	r3, [r4, #64]	@ 0x40
 800409a:	b2db      	uxtb	r3, r3
 800409c:	3b01      	subs	r3, #1
 800409e:	bf18      	it	ne
 80040a0:	2301      	movne	r3, #1
 80040a2:	e7c1      	b.n	8004028 <HAL_TIM_PWM_Start+0x14>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80040a4:	2804      	cmp	r0, #4
 80040a6:	d005      	beq.n	80040b4 <HAL_TIM_PWM_Start+0xa0>
 80040a8:	2808      	cmp	r0, #8
 80040aa:	d007      	beq.n	80040bc <HAL_TIM_PWM_Start+0xa8>
 80040ac:	2302      	movs	r3, #2
 80040ae:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
 80040b2:	e7c0      	b.n	8004036 <HAL_TIM_PWM_Start+0x22>
 80040b4:	2302      	movs	r3, #2
 80040b6:	f884 303f 	strb.w	r3, [r4, #63]	@ 0x3f
 80040ba:	e7bc      	b.n	8004036 <HAL_TIM_PWM_Start+0x22>
 80040bc:	2302      	movs	r3, #2
 80040be:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
 80040c2:	e7b8      	b.n	8004036 <HAL_TIM_PWM_Start+0x22>
    __HAL_TIM_MOE_ENABLE(htim);
 80040c4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80040c6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80040ca:	645a      	str	r2, [r3, #68]	@ 0x44
 80040cc:	e7bc      	b.n	8004048 <HAL_TIM_PWM_Start+0x34>
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80040ce:	689a      	ldr	r2, [r3, #8]
 80040d0:	f002 0207 	and.w	r2, r2, #7
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80040d4:	2a06      	cmp	r2, #6
 80040d6:	d007      	beq.n	80040e8 <HAL_TIM_PWM_Start+0xd4>
      __HAL_TIM_ENABLE(htim);
 80040d8:	681a      	ldr	r2, [r3, #0]
 80040da:	f042 0201 	orr.w	r2, r2, #1
 80040de:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 80040e0:	2000      	movs	r0, #0
 80040e2:	e000      	b.n	80040e6 <HAL_TIM_PWM_Start+0xd2>
    return HAL_ERROR;
 80040e4:	2001      	movs	r0, #1
}
 80040e6:	bd10      	pop	{r4, pc}
  return HAL_OK;
 80040e8:	2000      	movs	r0, #0
 80040ea:	e7fc      	b.n	80040e6 <HAL_TIM_PWM_Start+0xd2>
 80040ec:	40012c00 	.word	0x40012c00

080040f0 <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80040f0:	f890 203c 	ldrb.w	r2, [r0, #60]	@ 0x3c
 80040f4:	2a01      	cmp	r2, #1
 80040f6:	d02c      	beq.n	8004152 <HAL_TIMEx_MasterConfigSynchronization+0x62>
{
 80040f8:	b410      	push	{r4}
 80040fa:	4603      	mov	r3, r0
  __HAL_LOCK(htim);
 80040fc:	2201      	movs	r2, #1
 80040fe:	f880 203c 	strb.w	r2, [r0, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004102:	2202      	movs	r2, #2
 8004104:	f880 203d 	strb.w	r2, [r0, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004108:	6802      	ldr	r2, [r0, #0]
 800410a:	6850      	ldr	r0, [r2, #4]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800410c:	6894      	ldr	r4, [r2, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800410e:	f020 0c70 	bic.w	ip, r0, #112	@ 0x70
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004112:	6808      	ldr	r0, [r1, #0]
 8004114:	ea40 000c 	orr.w	r0, r0, ip

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004118:	6050      	str	r0, [r2, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800411a:	681a      	ldr	r2, [r3, #0]
 800411c:	480e      	ldr	r0, [pc, #56]	@ (8004158 <HAL_TIMEx_MasterConfigSynchronization+0x68>)
 800411e:	4282      	cmp	r2, r0
 8004120:	d00a      	beq.n	8004138 <HAL_TIMEx_MasterConfigSynchronization+0x48>
 8004122:	f1b2 4f80 	cmp.w	r2, #1073741824	@ 0x40000000
 8004126:	d007      	beq.n	8004138 <HAL_TIMEx_MasterConfigSynchronization+0x48>
 8004128:	f5a0 3094 	sub.w	r0, r0, #75776	@ 0x12800
 800412c:	4282      	cmp	r2, r0
 800412e:	d003      	beq.n	8004138 <HAL_TIMEx_MasterConfigSynchronization+0x48>
 8004130:	f500 6080 	add.w	r0, r0, #1024	@ 0x400
 8004134:	4282      	cmp	r2, r0
 8004136:	d104      	bne.n	8004142 <HAL_TIMEx_MasterConfigSynchronization+0x52>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004138:	f024 0480 	bic.w	r4, r4, #128	@ 0x80
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800413c:	6849      	ldr	r1, [r1, #4]
 800413e:	4321      	orrs	r1, r4

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004140:	6091      	str	r1, [r2, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004142:	2201      	movs	r2, #1
 8004144:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004148:	2000      	movs	r0, #0
 800414a:	f883 003c 	strb.w	r0, [r3, #60]	@ 0x3c

  return HAL_OK;
}
 800414e:	bc10      	pop	{r4}
 8004150:	4770      	bx	lr
  __HAL_LOCK(htim);
 8004152:	2002      	movs	r0, #2
}
 8004154:	4770      	bx	lr
 8004156:	bf00      	nop
 8004158:	40012c00 	.word	0x40012c00

0800415c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800415c:	4602      	mov	r2, r0
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800415e:	f890 303c 	ldrb.w	r3, [r0, #60]	@ 0x3c
 8004162:	2b01      	cmp	r3, #1
 8004164:	d021      	beq.n	80041aa <HAL_TIMEx_ConfigBreakDeadTime+0x4e>
 8004166:	2301      	movs	r3, #1
 8004168:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800416c:	68cb      	ldr	r3, [r1, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800416e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004172:	6888      	ldr	r0, [r1, #8]
 8004174:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8004176:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800417a:	6848      	ldr	r0, [r1, #4]
 800417c:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800417e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004182:	6808      	ldr	r0, [r1, #0]
 8004184:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8004186:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800418a:	6908      	ldr	r0, [r1, #16]
 800418c:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800418e:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004192:	6948      	ldr	r0, [r1, #20]
 8004194:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8004196:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800419a:	69c9      	ldr	r1, [r1, #28]
 800419c:	430b      	orrs	r3, r1


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800419e:	6811      	ldr	r1, [r2, #0]
 80041a0:	644b      	str	r3, [r1, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 80041a2:	2000      	movs	r0, #0
 80041a4:	f882 003c 	strb.w	r0, [r2, #60]	@ 0x3c

  return HAL_OK;
 80041a8:	4770      	bx	lr
  __HAL_LOCK(htim);
 80041aa:	2002      	movs	r0, #2
}
 80041ac:	4770      	bx	lr

080041ae <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80041ae:	b084      	sub	sp, #16
 80041b0:	a804      	add	r0, sp, #16
 80041b2:	e900 000e 	stmdb	r0, {r1, r2, r3}
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
}
 80041b6:	2000      	movs	r0, #0
 80041b8:	b004      	add	sp, #16
 80041ba:	4770      	bx	lr

080041bc <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 80041bc:	4603      	mov	r3, r0
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80041be:	2000      	movs	r0, #0
 80041c0:	f8a3 0044 	strh.w	r0, [r3, #68]	@ 0x44
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 80041c4:	f44f 423f 	mov.w	r2, #48896	@ 0xbf00
 80041c8:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
}
 80041cc:	4770      	bx	lr

080041ce <USB_DisableGlobalInt>:
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 80041ce:	f8b0 3040 	ldrh.w	r3, [r0, #64]	@ 0x40
 80041d2:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80041d6:	045b      	lsls	r3, r3, #17
 80041d8:	0c5b      	lsrs	r3, r3, #17
 80041da:	f8a0 3040 	strh.w	r3, [r0, #64]	@ 0x40

  return HAL_OK;
}
 80041de:	2000      	movs	r0, #0
 80041e0:	4770      	bx	lr

080041e2 <USB_SetCurrentMode>:
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
}
 80041e2:	2000      	movs	r0, #0
 80041e4:	4770      	bx	lr

080041e6 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80041e6:	b084      	sub	sp, #16
 80041e8:	4684      	mov	ip, r0
 80041ea:	a804      	add	r0, sp, #16
 80041ec:	e900 000e 	stmdb	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 80041f0:	2301      	movs	r3, #1
 80041f2:	f8ac 3040 	strh.w	r3, [ip, #64]	@ 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 80041f6:	2000      	movs	r0, #0
 80041f8:	f8ac 0040 	strh.w	r0, [ip, #64]	@ 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80041fc:	f8ac 0044 	strh.w	r0, [ip, #68]	@ 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8004200:	f8ac 0050 	strh.w	r0, [ip, #80]	@ 0x50

  return HAL_OK;
}
 8004204:	b004      	add	sp, #16
 8004206:	4770      	bx	lr

08004208 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004208:	b510      	push	{r4, lr}
 800420a:	4603      	mov	r3, r0
  HAL_StatusTypeDef ret = HAL_OK;
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 800420c:	f891 c000 	ldrb.w	ip, [r1]
 8004210:	f830 202c 	ldrh.w	r2, [r0, ip, lsl #2]
 8004214:	b292      	uxth	r2, r2
 8004216:	f422 42ec 	bic.w	r2, r2, #30208	@ 0x7600
 800421a:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 800421e:	b292      	uxth	r2, r2

  /* initialize Endpoint */
  switch (ep->type)
 8004220:	78c8      	ldrb	r0, [r1, #3]
 8004222:	2803      	cmp	r0, #3
 8004224:	d861      	bhi.n	80042ea <USB_ActivateEndpoint+0xe2>
 8004226:	e8df f000 	tbb	[pc, r0]
 800422a:	5c55      	.short	0x5c55
 800422c:	5802      	.short	0x5802
 800422e:	2000      	movs	r0, #0
    default:
      ret = HAL_ERROR;
      break;
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8004230:	f248 0e80 	movw	lr, #32896	@ 0x8080
 8004234:	ea42 020e 	orr.w	r2, r2, lr
 8004238:	f823 202c 	strh.w	r2, [r3, ip, lsl #2]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 800423c:	f891 c000 	ldrb.w	ip, [r1]
 8004240:	f833 202c 	ldrh.w	r2, [r3, ip, lsl #2]
 8004244:	b292      	uxth	r2, r2
 8004246:	f422 42e0 	bic.w	r2, r2, #28672	@ 0x7000
 800424a:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 800424e:	ea42 020c 	orr.w	r2, r2, ip
 8004252:	ea42 020e 	orr.w	r2, r2, lr
 8004256:	f823 202c 	strh.w	r2, [r3, ip, lsl #2]

  if (ep->doublebuffer == 0U)
 800425a:	7b0a      	ldrb	r2, [r1, #12]
 800425c:	2a00      	cmp	r2, #0
 800425e:	f040 80dc 	bne.w	800441a <USB_ActivateEndpoint+0x212>
  {
    if (ep->is_in != 0U)
 8004262:	784a      	ldrb	r2, [r1, #1]
 8004264:	2a00      	cmp	r2, #0
 8004266:	d051      	beq.n	800430c <USB_ActivateEndpoint+0x104>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8004268:	f8b3 2050 	ldrh.w	r2, [r3, #80]	@ 0x50
 800426c:	b292      	uxth	r2, r2
 800426e:	441a      	add	r2, r3
 8004270:	780c      	ldrb	r4, [r1, #0]
 8004272:	eb02 1204 	add.w	r2, r2, r4, lsl #4
 8004276:	f8b1 c006 	ldrh.w	ip, [r1, #6]
 800427a:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 800427e:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
 8004282:	f8a2 c400 	strh.w	ip, [r2, #1024]	@ 0x400
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004286:	780c      	ldrb	r4, [r1, #0]
 8004288:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 800428c:	f012 0f40 	tst.w	r2, #64	@ 0x40
 8004290:	d00c      	beq.n	80042ac <USB_ActivateEndpoint+0xa4>
 8004292:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8004296:	b292      	uxth	r2, r2
 8004298:	f422 42e0 	bic.w	r2, r2, #28672	@ 0x7000
 800429c:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 80042a0:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80042a4:	f042 02c0 	orr.w	r2, r2, #192	@ 0xc0
 80042a8:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]

      if (ep->type != EP_TYPE_ISOC)
 80042ac:	78ca      	ldrb	r2, [r1, #3]
 80042ae:	2a01      	cmp	r2, #1
 80042b0:	d01d      	beq.n	80042ee <USB_ActivateEndpoint+0xe6>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80042b2:	7809      	ldrb	r1, [r1, #0]
 80042b4:	f833 2021 	ldrh.w	r2, [r3, r1, lsl #2]
 80042b8:	b292      	uxth	r2, r2
 80042ba:	f422 42e0 	bic.w	r2, r2, #28672	@ 0x7000
 80042be:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80042c2:	f082 0220 	eor.w	r2, r2, #32
 80042c6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80042ca:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80042ce:	f823 2021 	strh.w	r2, [r3, r1, lsl #2]
 80042d2:	e117      	b.n	8004504 <USB_ActivateEndpoint+0x2fc>
      wEpRegVal |= USB_EP_CONTROL;
 80042d4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
      break;
 80042d8:	e7aa      	b.n	8004230 <USB_ActivateEndpoint+0x28>
      wEpRegVal |= USB_EP_INTERRUPT;
 80042da:	f442 62c0 	orr.w	r2, r2, #1536	@ 0x600
  HAL_StatusTypeDef ret = HAL_OK;
 80042de:	2000      	movs	r0, #0
      break;
 80042e0:	e7a6      	b.n	8004230 <USB_ActivateEndpoint+0x28>
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 80042e2:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
  HAL_StatusTypeDef ret = HAL_OK;
 80042e6:	2000      	movs	r0, #0
      break;
 80042e8:	e7a2      	b.n	8004230 <USB_ActivateEndpoint+0x28>
      ret = HAL_ERROR;
 80042ea:	2001      	movs	r0, #1
 80042ec:	e7a0      	b.n	8004230 <USB_ActivateEndpoint+0x28>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80042ee:	7809      	ldrb	r1, [r1, #0]
 80042f0:	f833 2021 	ldrh.w	r2, [r3, r1, lsl #2]
 80042f4:	b292      	uxth	r2, r2
 80042f6:	f422 42e0 	bic.w	r2, r2, #28672	@ 0x7000
 80042fa:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80042fe:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004302:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8004306:	f823 2021 	strh.w	r2, [r3, r1, lsl #2]
 800430a:	e0fb      	b.n	8004504 <USB_ActivateEndpoint+0x2fc>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800430c:	f8b3 2050 	ldrh.w	r2, [r3, #80]	@ 0x50
 8004310:	b292      	uxth	r2, r2
 8004312:	441a      	add	r2, r3
 8004314:	780c      	ldrb	r4, [r1, #0]
 8004316:	eb02 1204 	add.w	r2, r2, r4, lsl #4
 800431a:	f8b1 c006 	ldrh.w	ip, [r1, #6]
 800431e:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 8004322:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
 8004326:	f8a2 c408 	strh.w	ip, [r2, #1032]	@ 0x408

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 800432a:	f8b3 2050 	ldrh.w	r2, [r3, #80]	@ 0x50
 800432e:	b292      	uxth	r2, r2
 8004330:	441a      	add	r2, r3
 8004332:	780c      	ldrb	r4, [r1, #0]
 8004334:	eb02 1204 	add.w	r2, r2, r4, lsl #4
 8004338:	f8b2 c40c 	ldrh.w	ip, [r2, #1036]	@ 0x40c
 800433c:	f3cc 0c09 	ubfx	ip, ip, #0, #10
 8004340:	f8a2 c40c 	strh.w	ip, [r2, #1036]	@ 0x40c
 8004344:	690c      	ldr	r4, [r1, #16]
 8004346:	2c3e      	cmp	r4, #62	@ 0x3e
 8004348:	d939      	bls.n	80043be <USB_ActivateEndpoint+0x1b6>
 800434a:	ea4f 1e54 	mov.w	lr, r4, lsr #5
 800434e:	f014 0f1f 	tst.w	r4, #31
 8004352:	d101      	bne.n	8004358 <USB_ActivateEndpoint+0x150>
 8004354:	f10e 3eff 	add.w	lr, lr, #4294967295	@ 0xffffffff
 8004358:	f8b2 c40c 	ldrh.w	ip, [r2, #1036]	@ 0x40c
 800435c:	fa1f fc8c 	uxth.w	ip, ip
 8004360:	ea4f 2e8e 	mov.w	lr, lr, lsl #10
 8004364:	fa1f fe8e 	uxth.w	lr, lr
 8004368:	ea4c 0c0e 	orr.w	ip, ip, lr
 800436c:	f44c 4c00 	orr.w	ip, ip, #32768	@ 0x8000
 8004370:	f8a2 c40c 	strh.w	ip, [r2, #1036]	@ 0x40c
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004374:	780c      	ldrb	r4, [r1, #0]
 8004376:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 800437a:	f412 4f80 	tst.w	r2, #16384	@ 0x4000
 800437e:	d00c      	beq.n	800439a <USB_ActivateEndpoint+0x192>
 8004380:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8004384:	b292      	uxth	r2, r2
 8004386:	f422 42e0 	bic.w	r2, r2, #28672	@ 0x7000
 800438a:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 800438e:	f442 4240 	orr.w	r2, r2, #49152	@ 0xc000
 8004392:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8004396:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]

      if (ep->num == 0U)
 800439a:	7809      	ldrb	r1, [r1, #0]
 800439c:	bb69      	cbnz	r1, 80043fa <USB_ActivateEndpoint+0x1f2>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800439e:	f833 2021 	ldrh.w	r2, [r3, r1, lsl #2]
 80043a2:	b292      	uxth	r2, r2
 80043a4:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80043a8:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 80043ac:	f482 5240 	eor.w	r2, r2, #12288	@ 0x3000
 80043b0:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80043b4:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80043b8:	f823 2021 	strh.w	r2, [r3, r1, lsl #2]
 80043bc:	e0a2      	b.n	8004504 <USB_ActivateEndpoint+0x2fc>
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 80043be:	b94c      	cbnz	r4, 80043d4 <USB_ActivateEndpoint+0x1cc>
 80043c0:	f8b2 440c 	ldrh.w	r4, [r2, #1036]	@ 0x40c
 80043c4:	ea6f 4444 	mvn.w	r4, r4, lsl #17
 80043c8:	ea6f 4454 	mvn.w	r4, r4, lsr #17
 80043cc:	b2a4      	uxth	r4, r4
 80043ce:	f8a2 440c 	strh.w	r4, [r2, #1036]	@ 0x40c
 80043d2:	e7cf      	b.n	8004374 <USB_ActivateEndpoint+0x16c>
 80043d4:	ea4f 0c54 	mov.w	ip, r4, lsr #1
 80043d8:	f014 0f01 	tst.w	r4, #1
 80043dc:	d001      	beq.n	80043e2 <USB_ActivateEndpoint+0x1da>
 80043de:	f10c 0c01 	add.w	ip, ip, #1
 80043e2:	f8b2 440c 	ldrh.w	r4, [r2, #1036]	@ 0x40c
 80043e6:	b2a4      	uxth	r4, r4
 80043e8:	ea4f 2c8c 	mov.w	ip, ip, lsl #10
 80043ec:	fa1f fc8c 	uxth.w	ip, ip
 80043f0:	ea44 040c 	orr.w	r4, r4, ip
 80043f4:	f8a2 440c 	strh.w	r4, [r2, #1036]	@ 0x40c
 80043f8:	e7bc      	b.n	8004374 <USB_ActivateEndpoint+0x16c>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 80043fa:	f833 2021 	ldrh.w	r2, [r3, r1, lsl #2]
 80043fe:	b292      	uxth	r2, r2
 8004400:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8004404:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8004408:	f482 5200 	eor.w	r2, r2, #8192	@ 0x2000
 800440c:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004410:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8004414:	f823 2021 	strh.w	r2, [r3, r1, lsl #2]
 8004418:	e074      	b.n	8004504 <USB_ActivateEndpoint+0x2fc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 800441a:	78ca      	ldrb	r2, [r1, #3]
 800441c:	2a02      	cmp	r2, #2
 800441e:	d072      	beq.n	8004506 <USB_ActivateEndpoint+0x2fe>
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 8004420:	780c      	ldrb	r4, [r1, #0]
 8004422:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8004426:	b292      	uxth	r2, r2
 8004428:	f422 42e2 	bic.w	r2, r2, #28928	@ 0x7100
 800442c:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8004430:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004434:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8004438:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 800443c:	f8b3 2050 	ldrh.w	r2, [r3, #80]	@ 0x50
 8004440:	b292      	uxth	r2, r2
 8004442:	441a      	add	r2, r3
 8004444:	f891 c000 	ldrb.w	ip, [r1]
 8004448:	eb02 120c 	add.w	r2, r2, ip, lsl #4
 800444c:	f8b1 c008 	ldrh.w	ip, [r1, #8]
 8004450:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 8004454:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
 8004458:	f8a2 c400 	strh.w	ip, [r2, #1024]	@ 0x400
 800445c:	f8b3 2050 	ldrh.w	r2, [r3, #80]	@ 0x50
 8004460:	b292      	uxth	r2, r2
 8004462:	441a      	add	r2, r3
 8004464:	f891 c000 	ldrb.w	ip, [r1]
 8004468:	eb02 120c 	add.w	r2, r2, ip, lsl #4
 800446c:	f8b1 c00a 	ldrh.w	ip, [r1, #10]
 8004470:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 8004474:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
 8004478:	f8a2 c408 	strh.w	ip, [r2, #1032]	@ 0x408

    if (ep->is_in == 0U)
 800447c:	784a      	ldrb	r2, [r1, #1]
 800447e:	2a00      	cmp	r2, #0
 8004480:	d150      	bne.n	8004524 <USB_ActivateEndpoint+0x31c>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004482:	780c      	ldrb	r4, [r1, #0]
 8004484:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8004488:	f412 4f80 	tst.w	r2, #16384	@ 0x4000
 800448c:	d00c      	beq.n	80044a8 <USB_ActivateEndpoint+0x2a0>
 800448e:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8004492:	b292      	uxth	r2, r2
 8004494:	f422 42e0 	bic.w	r2, r2, #28672	@ 0x7000
 8004498:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 800449c:	f442 4240 	orr.w	r2, r2, #49152	@ 0xc000
 80044a0:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80044a4:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80044a8:	780c      	ldrb	r4, [r1, #0]
 80044aa:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 80044ae:	f012 0f40 	tst.w	r2, #64	@ 0x40
 80044b2:	d00c      	beq.n	80044ce <USB_ActivateEndpoint+0x2c6>
 80044b4:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 80044b8:	b292      	uxth	r2, r2
 80044ba:	f422 42e0 	bic.w	r2, r2, #28672	@ 0x7000
 80044be:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 80044c2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80044c6:	f042 02c0 	orr.w	r2, r2, #192	@ 0xc0
 80044ca:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80044ce:	f891 c000 	ldrb.w	ip, [r1]
 80044d2:	f833 202c 	ldrh.w	r2, [r3, ip, lsl #2]
 80044d6:	b292      	uxth	r2, r2
 80044d8:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80044dc:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 80044e0:	f482 5240 	eor.w	r2, r2, #12288	@ 0x3000
 80044e4:	f248 0480 	movw	r4, #32896	@ 0x8080
 80044e8:	4322      	orrs	r2, r4
 80044ea:	f823 202c 	strh.w	r2, [r3, ip, lsl #2]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80044ee:	7809      	ldrb	r1, [r1, #0]
 80044f0:	f833 2021 	ldrh.w	r2, [r3, r1, lsl #2]
 80044f4:	b292      	uxth	r2, r2
 80044f6:	f422 42e0 	bic.w	r2, r2, #28672	@ 0x7000
 80044fa:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80044fe:	4322      	orrs	r2, r4
 8004500:	f823 2021 	strh.w	r2, [r3, r1, lsl #2]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
}
 8004504:	bd10      	pop	{r4, pc}
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8004506:	780c      	ldrb	r4, [r1, #0]
 8004508:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 800450c:	b292      	uxth	r2, r2
 800450e:	f422 42e0 	bic.w	r2, r2, #28672	@ 0x7000
 8004512:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8004516:	f442 4201 	orr.w	r2, r2, #33024	@ 0x8100
 800451a:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800451e:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
 8004522:	e78b      	b.n	800443c <USB_ActivateEndpoint+0x234>
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004524:	780c      	ldrb	r4, [r1, #0]
 8004526:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 800452a:	f412 4f80 	tst.w	r2, #16384	@ 0x4000
 800452e:	d00c      	beq.n	800454a <USB_ActivateEndpoint+0x342>
 8004530:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8004534:	b292      	uxth	r2, r2
 8004536:	f422 42e0 	bic.w	r2, r2, #28672	@ 0x7000
 800453a:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 800453e:	f442 4240 	orr.w	r2, r2, #49152	@ 0xc000
 8004542:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8004546:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800454a:	780c      	ldrb	r4, [r1, #0]
 800454c:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8004550:	f012 0f40 	tst.w	r2, #64	@ 0x40
 8004554:	d00c      	beq.n	8004570 <USB_ActivateEndpoint+0x368>
 8004556:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 800455a:	b292      	uxth	r2, r2
 800455c:	f422 42e0 	bic.w	r2, r2, #28672	@ 0x7000
 8004560:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8004564:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004568:	f042 02c0 	orr.w	r2, r2, #192	@ 0xc0
 800456c:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      if (ep->type != EP_TYPE_ISOC)
 8004570:	78ca      	ldrb	r2, [r1, #3]
 8004572:	2a01      	cmp	r2, #1
 8004574:	d01e      	beq.n	80045b4 <USB_ActivateEndpoint+0x3ac>
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8004576:	780c      	ldrb	r4, [r1, #0]
 8004578:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 800457c:	b292      	uxth	r2, r2
 800457e:	f422 42e0 	bic.w	r2, r2, #28672	@ 0x7000
 8004582:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004586:	f082 0220 	eor.w	r2, r2, #32
 800458a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800458e:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8004592:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004596:	7809      	ldrb	r1, [r1, #0]
 8004598:	f833 2021 	ldrh.w	r2, [r3, r1, lsl #2]
 800459c:	b292      	uxth	r2, r2
 800459e:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80045a2:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 80045a6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80045aa:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80045ae:	f823 2021 	strh.w	r2, [r3, r1, lsl #2]
 80045b2:	e7a7      	b.n	8004504 <USB_ActivateEndpoint+0x2fc>
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80045b4:	780c      	ldrb	r4, [r1, #0]
 80045b6:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 80045ba:	b292      	uxth	r2, r2
 80045bc:	f422 42e0 	bic.w	r2, r2, #28672	@ 0x7000
 80045c0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80045c4:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80045c8:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80045cc:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
 80045d0:	e7e1      	b.n	8004596 <USB_ActivateEndpoint+0x38e>

080045d2 <USB_DeactivateEndpoint>:
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
  if (ep->doublebuffer == 0U)
 80045d2:	7b0b      	ldrb	r3, [r1, #12]
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	d146      	bne.n	8004666 <USB_DeactivateEndpoint+0x94>
  {
    if (ep->is_in != 0U)
 80045d8:	784b      	ldrb	r3, [r1, #1]
 80045da:	b313      	cbz	r3, 8004622 <USB_DeactivateEndpoint+0x50>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80045dc:	780a      	ldrb	r2, [r1, #0]
 80045de:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80045e2:	f013 0f40 	tst.w	r3, #64	@ 0x40
 80045e6:	d00c      	beq.n	8004602 <USB_DeactivateEndpoint+0x30>
 80045e8:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80045ec:	b29b      	uxth	r3, r3
 80045ee:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80045f2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80045f6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80045fa:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80045fe:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004602:	780a      	ldrb	r2, [r1, #0]
 8004604:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8004608:	b29b      	uxth	r3, r3
 800460a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800460e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004612:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004616:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800461a:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
}
 800461e:	2000      	movs	r0, #0
 8004620:	4770      	bx	lr
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004622:	780a      	ldrb	r2, [r1, #0]
 8004624:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8004628:	f413 4f80 	tst.w	r3, #16384	@ 0x4000
 800462c:	d00c      	beq.n	8004648 <USB_DeactivateEndpoint+0x76>
 800462e:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8004632:	b29b      	uxth	r3, r3
 8004634:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004638:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800463c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004640:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004644:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004648:	780a      	ldrb	r2, [r1, #0]
 800464a:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800464e:	b29b      	uxth	r3, r3
 8004650:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004654:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004658:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800465c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004660:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
 8004664:	e7db      	b.n	800461e <USB_DeactivateEndpoint+0x4c>
    if (ep->is_in == 0U)
 8004666:	784b      	ldrb	r3, [r1, #1]
 8004668:	2b00      	cmp	r3, #0
 800466a:	d14e      	bne.n	800470a <USB_DeactivateEndpoint+0x138>
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800466c:	780a      	ldrb	r2, [r1, #0]
 800466e:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8004672:	f413 4f80 	tst.w	r3, #16384	@ 0x4000
 8004676:	d00c      	beq.n	8004692 <USB_DeactivateEndpoint+0xc0>
 8004678:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800467c:	b29b      	uxth	r3, r3
 800467e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004682:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004686:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800468a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800468e:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004692:	780a      	ldrb	r2, [r1, #0]
 8004694:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8004698:	f013 0f40 	tst.w	r3, #64	@ 0x40
 800469c:	d00c      	beq.n	80046b8 <USB_DeactivateEndpoint+0xe6>
 800469e:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80046a2:	b29b      	uxth	r3, r3
 80046a4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80046a8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80046ac:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80046b0:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80046b4:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_TX_DTOG(USBx, ep->num);
 80046b8:	780a      	ldrb	r2, [r1, #0]
 80046ba:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80046be:	b29b      	uxth	r3, r3
 80046c0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80046c4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80046c8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80046cc:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80046d0:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80046d4:	780a      	ldrb	r2, [r1, #0]
 80046d6:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80046da:	b29b      	uxth	r3, r3
 80046dc:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80046e0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80046e4:	f248 0c80 	movw	ip, #32896	@ 0x8080
 80046e8:	ea43 030c 	orr.w	r3, r3, ip
 80046ec:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80046f0:	780a      	ldrb	r2, [r1, #0]
 80046f2:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80046f6:	b29b      	uxth	r3, r3
 80046f8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80046fc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004700:	ea43 030c 	orr.w	r3, r3, ip
 8004704:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
 8004708:	e789      	b.n	800461e <USB_DeactivateEndpoint+0x4c>
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800470a:	780a      	ldrb	r2, [r1, #0]
 800470c:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8004710:	f413 4f80 	tst.w	r3, #16384	@ 0x4000
 8004714:	d00c      	beq.n	8004730 <USB_DeactivateEndpoint+0x15e>
 8004716:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800471a:	b29b      	uxth	r3, r3
 800471c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004720:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004724:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004728:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800472c:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004730:	780a      	ldrb	r2, [r1, #0]
 8004732:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8004736:	f013 0f40 	tst.w	r3, #64	@ 0x40
 800473a:	d00c      	beq.n	8004756 <USB_DeactivateEndpoint+0x184>
 800473c:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8004740:	b29b      	uxth	r3, r3
 8004742:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004746:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800474a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800474e:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8004752:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_RX_DTOG(USBx, ep->num);
 8004756:	780a      	ldrb	r2, [r1, #0]
 8004758:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800475c:	b29b      	uxth	r3, r3
 800475e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004762:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004766:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800476a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800476e:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004772:	780a      	ldrb	r2, [r1, #0]
 8004774:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8004778:	b29b      	uxth	r3, r3
 800477a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800477e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004782:	f248 0c80 	movw	ip, #32896	@ 0x8080
 8004786:	ea43 030c 	orr.w	r3, r3, ip
 800478a:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800478e:	780a      	ldrb	r2, [r1, #0]
 8004790:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8004794:	b29b      	uxth	r3, r3
 8004796:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800479a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800479e:	ea43 030c 	orr.w	r3, r3, ip
 80047a2:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
 80047a6:	e73a      	b.n	800461e <USB_DeactivateEndpoint+0x4c>

080047a8 <USB_EPSetStall>:
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
  if (ep->is_in != 0U)
 80047a8:	784b      	ldrb	r3, [r1, #1]
 80047aa:	b18b      	cbz	r3, 80047d0 <USB_EPSetStall+0x28>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 80047ac:	780a      	ldrb	r2, [r1, #0]
 80047ae:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80047b2:	b29b      	uxth	r3, r3
 80047b4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80047b8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80047bc:	f083 0310 	eor.w	r3, r3, #16
 80047c0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80047c4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80047c8:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
  }

  return HAL_OK;
}
 80047cc:	2000      	movs	r0, #0
 80047ce:	4770      	bx	lr
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 80047d0:	780a      	ldrb	r2, [r1, #0]
 80047d2:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80047d6:	b29b      	uxth	r3, r3
 80047d8:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80047dc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80047e0:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 80047e4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80047e8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80047ec:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
 80047f0:	e7ec      	b.n	80047cc <USB_EPSetStall+0x24>

080047f2 <USB_EPClearStall>:
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
  if (ep->doublebuffer == 0U)
 80047f2:	7b0b      	ldrb	r3, [r1, #12]
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	d14b      	bne.n	8004890 <USB_EPClearStall+0x9e>
  {
    if (ep->is_in != 0U)
 80047f8:	784b      	ldrb	r3, [r1, #1]
 80047fa:	b333      	cbz	r3, 800484a <USB_EPClearStall+0x58>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80047fc:	780a      	ldrb	r2, [r1, #0]
 80047fe:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8004802:	f013 0f40 	tst.w	r3, #64	@ 0x40
 8004806:	d00c      	beq.n	8004822 <USB_EPClearStall+0x30>
 8004808:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800480c:	b29b      	uxth	r3, r3
 800480e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004812:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004816:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800481a:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800481e:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]

      if (ep->type != EP_TYPE_ISOC)
 8004822:	78cb      	ldrb	r3, [r1, #3]
 8004824:	2b01      	cmp	r3, #1
 8004826:	d033      	beq.n	8004890 <USB_EPClearStall+0x9e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8004828:	780a      	ldrb	r2, [r1, #0]
 800482a:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800482e:	b29b      	uxth	r3, r3
 8004830:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004834:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004838:	f083 0320 	eor.w	r3, r3, #32
 800483c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004840:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004844:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
 8004848:	e022      	b.n	8004890 <USB_EPClearStall+0x9e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800484a:	780a      	ldrb	r2, [r1, #0]
 800484c:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8004850:	f413 4f80 	tst.w	r3, #16384	@ 0x4000
 8004854:	d00c      	beq.n	8004870 <USB_EPClearStall+0x7e>
 8004856:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800485a:	b29b      	uxth	r3, r3
 800485c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004860:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004864:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004868:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800486c:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8004870:	780a      	ldrb	r2, [r1, #0]
 8004872:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8004876:	b29b      	uxth	r3, r3
 8004878:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800487c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004880:	f483 5340 	eor.w	r3, r3, #12288	@ 0x3000
 8004884:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004888:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800488c:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
    }
  }

  return HAL_OK;
}
 8004890:	2000      	movs	r0, #0
 8004892:	4770      	bx	lr

08004894 <USB_SetDevAddress>:
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
  if (address == 0U)
 8004894:	b911      	cbnz	r1, 800489c <USB_SetDevAddress+0x8>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8004896:	2380      	movs	r3, #128	@ 0x80
 8004898:	f8a0 304c 	strh.w	r3, [r0, #76]	@ 0x4c
  }

  return HAL_OK;
}
 800489c:	2000      	movs	r0, #0
 800489e:	4770      	bx	lr

080048a0 <USB_DevConnect>:
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
}
 80048a0:	2000      	movs	r0, #0
 80048a2:	4770      	bx	lr

080048a4 <USB_DevDisconnect>:
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
}
 80048a4:	2000      	movs	r0, #0
 80048a6:	4770      	bx	lr

080048a8 <USB_ReadInterrupts>:
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 80048a8:	f8b0 0044 	ldrh.w	r0, [r0, #68]	@ 0x44
  return tmpreg;
}
 80048ac:	b280      	uxth	r0, r0
 80048ae:	4770      	bx	lr

080048b0 <USB_EP0_OutStart>:
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
}
 80048b0:	2000      	movs	r0, #0
 80048b2:	4770      	bx	lr

080048b4 <USB_WritePMA>:
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 80048b4:	3301      	adds	r3, #1
 80048b6:	085b      	lsrs	r3, r3, #1
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80048b8:	eb00 0042 	add.w	r0, r0, r2, lsl #1
 80048bc:	f500 6080 	add.w	r0, r0, #1024	@ 0x400

  for (count = n; count != 0U; count--)
 80048c0:	e008      	b.n	80048d4 <USB_WritePMA+0x20>
  {
    WrVal = pBuf[0];
 80048c2:	780a      	ldrb	r2, [r1, #0]
    WrVal |= (uint16_t)pBuf[1] << 8;
 80048c4:	f891 c001 	ldrb.w	ip, [r1, #1]
 80048c8:	ea42 220c 	orr.w	r2, r2, ip, lsl #8
    *pdwVal = (WrVal & 0xFFFFU);
 80048cc:	f820 2b04 	strh.w	r2, [r0], #4
#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */

    pBuf++;
    pBuf++;
 80048d0:	3102      	adds	r1, #2
  for (count = n; count != 0U; count--)
 80048d2:	3b01      	subs	r3, #1
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	d1f4      	bne.n	80048c2 <USB_WritePMA+0xe>
  }
}
 80048d8:	4770      	bx	lr

080048da <USB_EPStartXfer>:
{
 80048da:	b570      	push	{r4, r5, r6, lr}
 80048dc:	4605      	mov	r5, r0
 80048de:	460c      	mov	r4, r1
  if (ep->is_in == 1U)
 80048e0:	784a      	ldrb	r2, [r1, #1]
 80048e2:	2a01      	cmp	r2, #1
 80048e4:	d03b      	beq.n	800495e <USB_EPStartXfer+0x84>
    if (ep->doublebuffer == 0U)
 80048e6:	7b0b      	ldrb	r3, [r1, #12]
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	f040 82a6 	bne.w	8004e3a <USB_EPStartXfer+0x560>
      if (ep->xfer_len > ep->maxpacket)
 80048ee:	698b      	ldr	r3, [r1, #24]
 80048f0:	690a      	ldr	r2, [r1, #16]
 80048f2:	4293      	cmp	r3, r2
 80048f4:	f240 8284 	bls.w	8004e00 <USB_EPStartXfer+0x526>
        ep->xfer_len -= len;
 80048f8:	1a9b      	subs	r3, r3, r2
 80048fa:	618b      	str	r3, [r1, #24]
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 80048fc:	f8b5 3050 	ldrh.w	r3, [r5, #80]	@ 0x50
 8004900:	b29b      	uxth	r3, r3
 8004902:	442b      	add	r3, r5
 8004904:	7821      	ldrb	r1, [r4, #0]
 8004906:	eb03 1301 	add.w	r3, r3, r1, lsl #4
 800490a:	f8b3 140c 	ldrh.w	r1, [r3, #1036]	@ 0x40c
 800490e:	f3c1 0109 	ubfx	r1, r1, #0, #10
 8004912:	f8a3 140c 	strh.w	r1, [r3, #1036]	@ 0x40c
 8004916:	2a3e      	cmp	r2, #62	@ 0x3e
 8004918:	f240 8276 	bls.w	8004e08 <USB_EPStartXfer+0x52e>
 800491c:	0951      	lsrs	r1, r2, #5
 800491e:	f012 0f1f 	tst.w	r2, #31
 8004922:	d100      	bne.n	8004926 <USB_EPStartXfer+0x4c>
 8004924:	3901      	subs	r1, #1
 8004926:	f8b3 240c 	ldrh.w	r2, [r3, #1036]	@ 0x40c
 800492a:	b292      	uxth	r2, r2
 800492c:	0289      	lsls	r1, r1, #10
 800492e:	b289      	uxth	r1, r1
 8004930:	430a      	orrs	r2, r1
 8004932:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004936:	f8a3 240c 	strh.w	r2, [r3, #1036]	@ 0x40c
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800493a:	7822      	ldrb	r2, [r4, #0]
 800493c:	f835 3022 	ldrh.w	r3, [r5, r2, lsl #2]
 8004940:	b29b      	uxth	r3, r3
 8004942:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004946:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800494a:	f483 5340 	eor.w	r3, r3, #12288	@ 0x3000
 800494e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004952:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004956:	f825 3022 	strh.w	r3, [r5, r2, lsl #2]
  return HAL_OK;
 800495a:	2000      	movs	r0, #0
}
 800495c:	bd70      	pop	{r4, r5, r6, pc}
    if (ep->xfer_len > ep->maxpacket)
 800495e:	698e      	ldr	r6, [r1, #24]
 8004960:	6909      	ldr	r1, [r1, #16]
 8004962:	428e      	cmp	r6, r1
 8004964:	d900      	bls.n	8004968 <USB_EPStartXfer+0x8e>
      len = ep->maxpacket;
 8004966:	460e      	mov	r6, r1
    if (ep->doublebuffer == 0U)
 8004968:	7b23      	ldrb	r3, [r4, #12]
 800496a:	b373      	cbz	r3, 80049ca <USB_EPStartXfer+0xf0>
      if (ep->type == EP_TYPE_BULK)
 800496c:	78e3      	ldrb	r3, [r4, #3]
 800496e:	2b02      	cmp	r3, #2
 8004970:	d04d      	beq.n	8004a0e <USB_EPStartXfer+0x134>
        ep->xfer_len_db -= len;
 8004972:	6a23      	ldr	r3, [r4, #32]
 8004974:	1b9b      	subs	r3, r3, r6
 8004976:	6223      	str	r3, [r4, #32]
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8004978:	7821      	ldrb	r1, [r4, #0]
 800497a:	f835 3021 	ldrh.w	r3, [r5, r1, lsl #2]
 800497e:	f013 0f40 	tst.w	r3, #64	@ 0x40
 8004982:	f000 81f5 	beq.w	8004d70 <USB_EPStartXfer+0x496>
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8004986:	2a00      	cmp	r2, #0
 8004988:	f040 81e2 	bne.w	8004d50 <USB_EPStartXfer+0x476>
 800498c:	f8b5 3050 	ldrh.w	r3, [r5, #80]	@ 0x50
 8004990:	b29b      	uxth	r3, r3
 8004992:	442b      	add	r3, r5
 8004994:	eb03 1301 	add.w	r3, r3, r1, lsl #4
 8004998:	f8b3 240c 	ldrh.w	r2, [r3, #1036]	@ 0x40c
 800499c:	f3c2 0209 	ubfx	r2, r2, #0, #10
 80049a0:	f8a3 240c 	strh.w	r2, [r3, #1036]	@ 0x40c
 80049a4:	2e3e      	cmp	r6, #62	@ 0x3e
 80049a6:	f240 81ba 	bls.w	8004d1e <USB_EPStartXfer+0x444>
 80049aa:	0971      	lsrs	r1, r6, #5
 80049ac:	f016 0f1f 	tst.w	r6, #31
 80049b0:	d100      	bne.n	80049b4 <USB_EPStartXfer+0xda>
 80049b2:	3901      	subs	r1, #1
 80049b4:	f8b3 240c 	ldrh.w	r2, [r3, #1036]	@ 0x40c
 80049b8:	b292      	uxth	r2, r2
 80049ba:	0289      	lsls	r1, r1, #10
 80049bc:	b289      	uxth	r1, r1
 80049be:	430a      	orrs	r2, r1
 80049c0:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80049c4:	f8a3 240c 	strh.w	r2, [r3, #1036]	@ 0x40c
 80049c8:	e1cb      	b.n	8004d62 <USB_EPStartXfer+0x488>
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 80049ca:	b2b6      	uxth	r6, r6
 80049cc:	4633      	mov	r3, r6
 80049ce:	88e2      	ldrh	r2, [r4, #6]
 80049d0:	6961      	ldr	r1, [r4, #20]
 80049d2:	4628      	mov	r0, r5
 80049d4:	f7ff ff6e 	bl	80048b4 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80049d8:	f8b5 3050 	ldrh.w	r3, [r5, #80]	@ 0x50
 80049dc:	b29b      	uxth	r3, r3
 80049de:	442b      	add	r3, r5
 80049e0:	7822      	ldrb	r2, [r4, #0]
 80049e2:	eb03 1302 	add.w	r3, r3, r2, lsl #4
 80049e6:	f8a3 6404 	strh.w	r6, [r3, #1028]	@ 0x404
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 80049ea:	7822      	ldrb	r2, [r4, #0]
 80049ec:	f835 3022 	ldrh.w	r3, [r5, r2, lsl #2]
 80049f0:	b29b      	uxth	r3, r3
 80049f2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80049f6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80049fa:	f083 0330 	eor.w	r3, r3, #48	@ 0x30
 80049fe:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004a02:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004a06:	f825 3022 	strh.w	r3, [r5, r2, lsl #2]
  return HAL_OK;
 8004a0a:	2000      	movs	r0, #0
 8004a0c:	e7a6      	b.n	800495c <USB_EPStartXfer+0x82>
        if (ep->xfer_len_db > ep->maxpacket)
 8004a0e:	6a23      	ldr	r3, [r4, #32]
 8004a10:	4299      	cmp	r1, r3
 8004a12:	f080 8166 	bcs.w	8004ce2 <USB_EPStartXfer+0x408>
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8004a16:	7822      	ldrb	r2, [r4, #0]
 8004a18:	f835 3022 	ldrh.w	r3, [r5, r2, lsl #2]
 8004a1c:	b29b      	uxth	r3, r3
 8004a1e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004a22:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004a26:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 8004a2a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004a2e:	f825 3022 	strh.w	r3, [r5, r2, lsl #2]
          ep->xfer_len_db -= len;
 8004a32:	6a23      	ldr	r3, [r4, #32]
 8004a34:	1b9b      	subs	r3, r3, r6
 8004a36:	6223      	str	r3, [r4, #32]
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8004a38:	7822      	ldrb	r2, [r4, #0]
 8004a3a:	f835 3022 	ldrh.w	r3, [r5, r2, lsl #2]
 8004a3e:	f013 0f40 	tst.w	r3, #64	@ 0x40
 8004a42:	f000 80a7 	beq.w	8004b94 <USB_EPStartXfer+0x2ba>
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8004a46:	7863      	ldrb	r3, [r4, #1]
 8004a48:	bbb3      	cbnz	r3, 8004ab8 <USB_EPStartXfer+0x1de>
 8004a4a:	f8b5 3050 	ldrh.w	r3, [r5, #80]	@ 0x50
 8004a4e:	b29b      	uxth	r3, r3
 8004a50:	442b      	add	r3, r5
 8004a52:	eb03 1302 	add.w	r3, r3, r2, lsl #4
 8004a56:	f8b3 240c 	ldrh.w	r2, [r3, #1036]	@ 0x40c
 8004a5a:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8004a5e:	f8a3 240c 	strh.w	r2, [r3, #1036]	@ 0x40c
 8004a62:	2e3e      	cmp	r6, #62	@ 0x3e
 8004a64:	d90f      	bls.n	8004a86 <USB_EPStartXfer+0x1ac>
 8004a66:	0971      	lsrs	r1, r6, #5
 8004a68:	f016 0f1f 	tst.w	r6, #31
 8004a6c:	d100      	bne.n	8004a70 <USB_EPStartXfer+0x196>
 8004a6e:	3901      	subs	r1, #1
 8004a70:	f8b3 240c 	ldrh.w	r2, [r3, #1036]	@ 0x40c
 8004a74:	b292      	uxth	r2, r2
 8004a76:	0289      	lsls	r1, r1, #10
 8004a78:	b289      	uxth	r1, r1
 8004a7a:	430a      	orrs	r2, r1
 8004a7c:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004a80:	f8a3 240c 	strh.w	r2, [r3, #1036]	@ 0x40c
 8004a84:	e01a      	b.n	8004abc <USB_EPStartXfer+0x1e2>
 8004a86:	b94e      	cbnz	r6, 8004a9c <USB_EPStartXfer+0x1c2>
 8004a88:	f8b3 240c 	ldrh.w	r2, [r3, #1036]	@ 0x40c
 8004a8c:	ea6f 4242 	mvn.w	r2, r2, lsl #17
 8004a90:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 8004a94:	b292      	uxth	r2, r2
 8004a96:	f8a3 240c 	strh.w	r2, [r3, #1036]	@ 0x40c
 8004a9a:	e00f      	b.n	8004abc <USB_EPStartXfer+0x1e2>
 8004a9c:	0872      	lsrs	r2, r6, #1
 8004a9e:	f016 0f01 	tst.w	r6, #1
 8004aa2:	d000      	beq.n	8004aa6 <USB_EPStartXfer+0x1cc>
 8004aa4:	3201      	adds	r2, #1
 8004aa6:	f8b3 140c 	ldrh.w	r1, [r3, #1036]	@ 0x40c
 8004aaa:	b289      	uxth	r1, r1
 8004aac:	0292      	lsls	r2, r2, #10
 8004aae:	b292      	uxth	r2, r2
 8004ab0:	430a      	orrs	r2, r1
 8004ab2:	f8a3 240c 	strh.w	r2, [r3, #1036]	@ 0x40c
 8004ab6:	e001      	b.n	8004abc <USB_EPStartXfer+0x1e2>
 8004ab8:	2b01      	cmp	r3, #1
 8004aba:	d030      	beq.n	8004b1e <USB_EPStartXfer+0x244>
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004abc:	b2b3      	uxth	r3, r6
 8004abe:	8962      	ldrh	r2, [r4, #10]
 8004ac0:	6961      	ldr	r1, [r4, #20]
 8004ac2:	4628      	mov	r0, r5
 8004ac4:	f7ff fef6 	bl	80048b4 <USB_WritePMA>
            ep->xfer_buff += len;
 8004ac8:	6963      	ldr	r3, [r4, #20]
 8004aca:	4433      	add	r3, r6
 8004acc:	6163      	str	r3, [r4, #20]
            if (ep->xfer_len_db > ep->maxpacket)
 8004ace:	6a23      	ldr	r3, [r4, #32]
 8004ad0:	6922      	ldr	r2, [r4, #16]
 8004ad2:	4293      	cmp	r3, r2
 8004ad4:	d92d      	bls.n	8004b32 <USB_EPStartXfer+0x258>
              ep->xfer_len_db -= len;
 8004ad6:	1b9b      	subs	r3, r3, r6
 8004ad8:	6223      	str	r3, [r4, #32]
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8004ada:	7863      	ldrb	r3, [r4, #1]
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	d145      	bne.n	8004b6c <USB_EPStartXfer+0x292>
 8004ae0:	f8b5 3050 	ldrh.w	r3, [r5, #80]	@ 0x50
 8004ae4:	b29b      	uxth	r3, r3
 8004ae6:	442b      	add	r3, r5
 8004ae8:	7822      	ldrb	r2, [r4, #0]
 8004aea:	eb03 1302 	add.w	r3, r3, r2, lsl #4
 8004aee:	f8b3 2404 	ldrh.w	r2, [r3, #1028]	@ 0x404
 8004af2:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8004af6:	f8a3 2404 	strh.w	r2, [r3, #1028]	@ 0x404
 8004afa:	2e3e      	cmp	r6, #62	@ 0x3e
 8004afc:	d91d      	bls.n	8004b3a <USB_EPStartXfer+0x260>
 8004afe:	0971      	lsrs	r1, r6, #5
 8004b00:	f016 0f1f 	tst.w	r6, #31
 8004b04:	d100      	bne.n	8004b08 <USB_EPStartXfer+0x22e>
 8004b06:	3901      	subs	r1, #1
 8004b08:	f8b3 2404 	ldrh.w	r2, [r3, #1028]	@ 0x404
 8004b0c:	b292      	uxth	r2, r2
 8004b0e:	0289      	lsls	r1, r1, #10
 8004b10:	b289      	uxth	r1, r1
 8004b12:	430a      	orrs	r2, r1
 8004b14:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004b18:	f8a3 2404 	strh.w	r2, [r3, #1028]	@ 0x404
 8004b1c:	e028      	b.n	8004b70 <USB_EPStartXfer+0x296>
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8004b1e:	f8b5 3050 	ldrh.w	r3, [r5, #80]	@ 0x50
 8004b22:	b29b      	uxth	r3, r3
 8004b24:	442b      	add	r3, r5
 8004b26:	eb03 1302 	add.w	r3, r3, r2, lsl #4
 8004b2a:	b2b2      	uxth	r2, r6
 8004b2c:	f8a3 240c 	strh.w	r2, [r3, #1036]	@ 0x40c
 8004b30:	e7c4      	b.n	8004abc <USB_EPStartXfer+0x1e2>
              ep->xfer_len_db = 0U;
 8004b32:	2200      	movs	r2, #0
 8004b34:	6222      	str	r2, [r4, #32]
              len = ep->xfer_len_db;
 8004b36:	461e      	mov	r6, r3
 8004b38:	e7cf      	b.n	8004ada <USB_EPStartXfer+0x200>
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8004b3a:	b94e      	cbnz	r6, 8004b50 <USB_EPStartXfer+0x276>
 8004b3c:	f8b3 2404 	ldrh.w	r2, [r3, #1028]	@ 0x404
 8004b40:	ea6f 4242 	mvn.w	r2, r2, lsl #17
 8004b44:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 8004b48:	b292      	uxth	r2, r2
 8004b4a:	f8a3 2404 	strh.w	r2, [r3, #1028]	@ 0x404
 8004b4e:	e00f      	b.n	8004b70 <USB_EPStartXfer+0x296>
 8004b50:	0872      	lsrs	r2, r6, #1
 8004b52:	f016 0f01 	tst.w	r6, #1
 8004b56:	d000      	beq.n	8004b5a <USB_EPStartXfer+0x280>
 8004b58:	3201      	adds	r2, #1
 8004b5a:	f8b3 1404 	ldrh.w	r1, [r3, #1028]	@ 0x404
 8004b5e:	b289      	uxth	r1, r1
 8004b60:	0292      	lsls	r2, r2, #10
 8004b62:	b292      	uxth	r2, r2
 8004b64:	430a      	orrs	r2, r1
 8004b66:	f8a3 2404 	strh.w	r2, [r3, #1028]	@ 0x404
 8004b6a:	e001      	b.n	8004b70 <USB_EPStartXfer+0x296>
 8004b6c:	2b01      	cmp	r3, #1
 8004b6e:	d006      	beq.n	8004b7e <USB_EPStartXfer+0x2a4>
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004b70:	b2b3      	uxth	r3, r6
 8004b72:	8922      	ldrh	r2, [r4, #8]
 8004b74:	6961      	ldr	r1, [r4, #20]
 8004b76:	4628      	mov	r0, r5
 8004b78:	f7ff fe9c 	bl	80048b4 <USB_WritePMA>
 8004b7c:	e735      	b.n	80049ea <USB_EPStartXfer+0x110>
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8004b7e:	f8b5 3050 	ldrh.w	r3, [r5, #80]	@ 0x50
 8004b82:	b29b      	uxth	r3, r3
 8004b84:	442b      	add	r3, r5
 8004b86:	7822      	ldrb	r2, [r4, #0]
 8004b88:	eb03 1302 	add.w	r3, r3, r2, lsl #4
 8004b8c:	b2b2      	uxth	r2, r6
 8004b8e:	f8a3 2404 	strh.w	r2, [r3, #1028]	@ 0x404
 8004b92:	e7ed      	b.n	8004b70 <USB_EPStartXfer+0x296>
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8004b94:	7863      	ldrb	r3, [r4, #1]
 8004b96:	bbb3      	cbnz	r3, 8004c06 <USB_EPStartXfer+0x32c>
 8004b98:	f8b5 3050 	ldrh.w	r3, [r5, #80]	@ 0x50
 8004b9c:	b29b      	uxth	r3, r3
 8004b9e:	442b      	add	r3, r5
 8004ba0:	eb03 1302 	add.w	r3, r3, r2, lsl #4
 8004ba4:	f8b3 2404 	ldrh.w	r2, [r3, #1028]	@ 0x404
 8004ba8:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8004bac:	f8a3 2404 	strh.w	r2, [r3, #1028]	@ 0x404
 8004bb0:	2e3e      	cmp	r6, #62	@ 0x3e
 8004bb2:	d90f      	bls.n	8004bd4 <USB_EPStartXfer+0x2fa>
 8004bb4:	0971      	lsrs	r1, r6, #5
 8004bb6:	f016 0f1f 	tst.w	r6, #31
 8004bba:	d100      	bne.n	8004bbe <USB_EPStartXfer+0x2e4>
 8004bbc:	3901      	subs	r1, #1
 8004bbe:	f8b3 2404 	ldrh.w	r2, [r3, #1028]	@ 0x404
 8004bc2:	b292      	uxth	r2, r2
 8004bc4:	0289      	lsls	r1, r1, #10
 8004bc6:	b289      	uxth	r1, r1
 8004bc8:	430a      	orrs	r2, r1
 8004bca:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004bce:	f8a3 2404 	strh.w	r2, [r3, #1028]	@ 0x404
 8004bd2:	e01a      	b.n	8004c0a <USB_EPStartXfer+0x330>
 8004bd4:	b94e      	cbnz	r6, 8004bea <USB_EPStartXfer+0x310>
 8004bd6:	f8b3 2404 	ldrh.w	r2, [r3, #1028]	@ 0x404
 8004bda:	ea6f 4242 	mvn.w	r2, r2, lsl #17
 8004bde:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 8004be2:	b292      	uxth	r2, r2
 8004be4:	f8a3 2404 	strh.w	r2, [r3, #1028]	@ 0x404
 8004be8:	e00f      	b.n	8004c0a <USB_EPStartXfer+0x330>
 8004bea:	0872      	lsrs	r2, r6, #1
 8004bec:	f016 0f01 	tst.w	r6, #1
 8004bf0:	d000      	beq.n	8004bf4 <USB_EPStartXfer+0x31a>
 8004bf2:	3201      	adds	r2, #1
 8004bf4:	f8b3 1404 	ldrh.w	r1, [r3, #1028]	@ 0x404
 8004bf8:	b289      	uxth	r1, r1
 8004bfa:	0292      	lsls	r2, r2, #10
 8004bfc:	b292      	uxth	r2, r2
 8004bfe:	430a      	orrs	r2, r1
 8004c00:	f8a3 2404 	strh.w	r2, [r3, #1028]	@ 0x404
 8004c04:	e001      	b.n	8004c0a <USB_EPStartXfer+0x330>
 8004c06:	2b01      	cmp	r3, #1
 8004c08:	d030      	beq.n	8004c6c <USB_EPStartXfer+0x392>
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004c0a:	b2b3      	uxth	r3, r6
 8004c0c:	8922      	ldrh	r2, [r4, #8]
 8004c0e:	6961      	ldr	r1, [r4, #20]
 8004c10:	4628      	mov	r0, r5
 8004c12:	f7ff fe4f 	bl	80048b4 <USB_WritePMA>
            ep->xfer_buff += len;
 8004c16:	6963      	ldr	r3, [r4, #20]
 8004c18:	4433      	add	r3, r6
 8004c1a:	6163      	str	r3, [r4, #20]
            if (ep->xfer_len_db > ep->maxpacket)
 8004c1c:	6a23      	ldr	r3, [r4, #32]
 8004c1e:	6922      	ldr	r2, [r4, #16]
 8004c20:	4293      	cmp	r3, r2
 8004c22:	d92d      	bls.n	8004c80 <USB_EPStartXfer+0x3a6>
              ep->xfer_len_db -= len;
 8004c24:	1b9b      	subs	r3, r3, r6
 8004c26:	6223      	str	r3, [r4, #32]
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8004c28:	7863      	ldrb	r3, [r4, #1]
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d145      	bne.n	8004cba <USB_EPStartXfer+0x3e0>
 8004c2e:	f8b5 3050 	ldrh.w	r3, [r5, #80]	@ 0x50
 8004c32:	b29b      	uxth	r3, r3
 8004c34:	442b      	add	r3, r5
 8004c36:	7822      	ldrb	r2, [r4, #0]
 8004c38:	eb03 1302 	add.w	r3, r3, r2, lsl #4
 8004c3c:	f8b3 240c 	ldrh.w	r2, [r3, #1036]	@ 0x40c
 8004c40:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8004c44:	f8a3 240c 	strh.w	r2, [r3, #1036]	@ 0x40c
 8004c48:	2e3e      	cmp	r6, #62	@ 0x3e
 8004c4a:	d91d      	bls.n	8004c88 <USB_EPStartXfer+0x3ae>
 8004c4c:	0971      	lsrs	r1, r6, #5
 8004c4e:	f016 0f1f 	tst.w	r6, #31
 8004c52:	d100      	bne.n	8004c56 <USB_EPStartXfer+0x37c>
 8004c54:	3901      	subs	r1, #1
 8004c56:	f8b3 240c 	ldrh.w	r2, [r3, #1036]	@ 0x40c
 8004c5a:	b292      	uxth	r2, r2
 8004c5c:	0289      	lsls	r1, r1, #10
 8004c5e:	b289      	uxth	r1, r1
 8004c60:	430a      	orrs	r2, r1
 8004c62:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004c66:	f8a3 240c 	strh.w	r2, [r3, #1036]	@ 0x40c
 8004c6a:	e028      	b.n	8004cbe <USB_EPStartXfer+0x3e4>
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8004c6c:	f8b5 3050 	ldrh.w	r3, [r5, #80]	@ 0x50
 8004c70:	b29b      	uxth	r3, r3
 8004c72:	442b      	add	r3, r5
 8004c74:	eb03 1302 	add.w	r3, r3, r2, lsl #4
 8004c78:	b2b2      	uxth	r2, r6
 8004c7a:	f8a3 2404 	strh.w	r2, [r3, #1028]	@ 0x404
 8004c7e:	e7c4      	b.n	8004c0a <USB_EPStartXfer+0x330>
              ep->xfer_len_db = 0U;
 8004c80:	2200      	movs	r2, #0
 8004c82:	6222      	str	r2, [r4, #32]
              len = ep->xfer_len_db;
 8004c84:	461e      	mov	r6, r3
 8004c86:	e7cf      	b.n	8004c28 <USB_EPStartXfer+0x34e>
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8004c88:	b94e      	cbnz	r6, 8004c9e <USB_EPStartXfer+0x3c4>
 8004c8a:	f8b3 240c 	ldrh.w	r2, [r3, #1036]	@ 0x40c
 8004c8e:	ea6f 4242 	mvn.w	r2, r2, lsl #17
 8004c92:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 8004c96:	b292      	uxth	r2, r2
 8004c98:	f8a3 240c 	strh.w	r2, [r3, #1036]	@ 0x40c
 8004c9c:	e00f      	b.n	8004cbe <USB_EPStartXfer+0x3e4>
 8004c9e:	0872      	lsrs	r2, r6, #1
 8004ca0:	f016 0f01 	tst.w	r6, #1
 8004ca4:	d000      	beq.n	8004ca8 <USB_EPStartXfer+0x3ce>
 8004ca6:	3201      	adds	r2, #1
 8004ca8:	f8b3 140c 	ldrh.w	r1, [r3, #1036]	@ 0x40c
 8004cac:	b289      	uxth	r1, r1
 8004cae:	0292      	lsls	r2, r2, #10
 8004cb0:	b292      	uxth	r2, r2
 8004cb2:	430a      	orrs	r2, r1
 8004cb4:	f8a3 240c 	strh.w	r2, [r3, #1036]	@ 0x40c
 8004cb8:	e001      	b.n	8004cbe <USB_EPStartXfer+0x3e4>
 8004cba:	2b01      	cmp	r3, #1
 8004cbc:	d006      	beq.n	8004ccc <USB_EPStartXfer+0x3f2>
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004cbe:	b2b3      	uxth	r3, r6
 8004cc0:	8962      	ldrh	r2, [r4, #10]
 8004cc2:	6961      	ldr	r1, [r4, #20]
 8004cc4:	4628      	mov	r0, r5
 8004cc6:	f7ff fdf5 	bl	80048b4 <USB_WritePMA>
 8004cca:	e68e      	b.n	80049ea <USB_EPStartXfer+0x110>
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8004ccc:	f8b5 3050 	ldrh.w	r3, [r5, #80]	@ 0x50
 8004cd0:	b29b      	uxth	r3, r3
 8004cd2:	442b      	add	r3, r5
 8004cd4:	7822      	ldrb	r2, [r4, #0]
 8004cd6:	eb03 1302 	add.w	r3, r3, r2, lsl #4
 8004cda:	b2b2      	uxth	r2, r6
 8004cdc:	f8a3 240c 	strh.w	r2, [r3, #1036]	@ 0x40c
 8004ce0:	e7ed      	b.n	8004cbe <USB_EPStartXfer+0x3e4>
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 8004ce2:	7821      	ldrb	r1, [r4, #0]
 8004ce4:	f835 2021 	ldrh.w	r2, [r5, r1, lsl #2]
 8004ce8:	b292      	uxth	r2, r2
 8004cea:	f422 42e2 	bic.w	r2, r2, #28928	@ 0x7100
 8004cee:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8004cf2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004cf6:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8004cfa:	f825 2021 	strh.w	r2, [r5, r1, lsl #2]
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8004cfe:	f8b5 2050 	ldrh.w	r2, [r5, #80]	@ 0x50
 8004d02:	b292      	uxth	r2, r2
 8004d04:	442a      	add	r2, r5
 8004d06:	7821      	ldrb	r1, [r4, #0]
 8004d08:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 8004d0c:	b29b      	uxth	r3, r3
 8004d0e:	f8a2 3404 	strh.w	r3, [r2, #1028]	@ 0x404
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004d12:	8922      	ldrh	r2, [r4, #8]
 8004d14:	6961      	ldr	r1, [r4, #20]
 8004d16:	4628      	mov	r0, r5
 8004d18:	f7ff fdcc 	bl	80048b4 <USB_WritePMA>
 8004d1c:	e665      	b.n	80049ea <USB_EPStartXfer+0x110>
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8004d1e:	b94e      	cbnz	r6, 8004d34 <USB_EPStartXfer+0x45a>
 8004d20:	f8b3 240c 	ldrh.w	r2, [r3, #1036]	@ 0x40c
 8004d24:	ea6f 4242 	mvn.w	r2, r2, lsl #17
 8004d28:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 8004d2c:	b292      	uxth	r2, r2
 8004d2e:	f8a3 240c 	strh.w	r2, [r3, #1036]	@ 0x40c
 8004d32:	e016      	b.n	8004d62 <USB_EPStartXfer+0x488>
 8004d34:	0872      	lsrs	r2, r6, #1
 8004d36:	f016 0f01 	tst.w	r6, #1
 8004d3a:	d000      	beq.n	8004d3e <USB_EPStartXfer+0x464>
 8004d3c:	3201      	adds	r2, #1
 8004d3e:	f8b3 140c 	ldrh.w	r1, [r3, #1036]	@ 0x40c
 8004d42:	b289      	uxth	r1, r1
 8004d44:	0292      	lsls	r2, r2, #10
 8004d46:	b292      	uxth	r2, r2
 8004d48:	430a      	orrs	r2, r1
 8004d4a:	f8a3 240c 	strh.w	r2, [r3, #1036]	@ 0x40c
 8004d4e:	e008      	b.n	8004d62 <USB_EPStartXfer+0x488>
 8004d50:	f8b5 3050 	ldrh.w	r3, [r5, #80]	@ 0x50
 8004d54:	b29b      	uxth	r3, r3
 8004d56:	442b      	add	r3, r5
 8004d58:	eb03 1301 	add.w	r3, r3, r1, lsl #4
 8004d5c:	b2b2      	uxth	r2, r6
 8004d5e:	f8a3 240c 	strh.w	r2, [r3, #1036]	@ 0x40c
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004d62:	b2b3      	uxth	r3, r6
 8004d64:	8962      	ldrh	r2, [r4, #10]
 8004d66:	6961      	ldr	r1, [r4, #20]
 8004d68:	4628      	mov	r0, r5
 8004d6a:	f7ff fda3 	bl	80048b4 <USB_WritePMA>
 8004d6e:	e63c      	b.n	80049ea <USB_EPStartXfer+0x110>
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8004d70:	bbb2      	cbnz	r2, 8004de0 <USB_EPStartXfer+0x506>
 8004d72:	f8b5 3050 	ldrh.w	r3, [r5, #80]	@ 0x50
 8004d76:	b29b      	uxth	r3, r3
 8004d78:	442b      	add	r3, r5
 8004d7a:	eb03 1301 	add.w	r3, r3, r1, lsl #4
 8004d7e:	f8b3 2404 	ldrh.w	r2, [r3, #1028]	@ 0x404
 8004d82:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8004d86:	f8a3 2404 	strh.w	r2, [r3, #1028]	@ 0x404
 8004d8a:	2e3e      	cmp	r6, #62	@ 0x3e
 8004d8c:	d90f      	bls.n	8004dae <USB_EPStartXfer+0x4d4>
 8004d8e:	0971      	lsrs	r1, r6, #5
 8004d90:	f016 0f1f 	tst.w	r6, #31
 8004d94:	d100      	bne.n	8004d98 <USB_EPStartXfer+0x4be>
 8004d96:	3901      	subs	r1, #1
 8004d98:	f8b3 2404 	ldrh.w	r2, [r3, #1028]	@ 0x404
 8004d9c:	b292      	uxth	r2, r2
 8004d9e:	0289      	lsls	r1, r1, #10
 8004da0:	b289      	uxth	r1, r1
 8004da2:	430a      	orrs	r2, r1
 8004da4:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004da8:	f8a3 2404 	strh.w	r2, [r3, #1028]	@ 0x404
 8004dac:	e021      	b.n	8004df2 <USB_EPStartXfer+0x518>
 8004dae:	b94e      	cbnz	r6, 8004dc4 <USB_EPStartXfer+0x4ea>
 8004db0:	f8b3 2404 	ldrh.w	r2, [r3, #1028]	@ 0x404
 8004db4:	ea6f 4242 	mvn.w	r2, r2, lsl #17
 8004db8:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 8004dbc:	b292      	uxth	r2, r2
 8004dbe:	f8a3 2404 	strh.w	r2, [r3, #1028]	@ 0x404
 8004dc2:	e016      	b.n	8004df2 <USB_EPStartXfer+0x518>
 8004dc4:	0872      	lsrs	r2, r6, #1
 8004dc6:	f016 0f01 	tst.w	r6, #1
 8004dca:	d000      	beq.n	8004dce <USB_EPStartXfer+0x4f4>
 8004dcc:	3201      	adds	r2, #1
 8004dce:	f8b3 1404 	ldrh.w	r1, [r3, #1028]	@ 0x404
 8004dd2:	b289      	uxth	r1, r1
 8004dd4:	0292      	lsls	r2, r2, #10
 8004dd6:	b292      	uxth	r2, r2
 8004dd8:	430a      	orrs	r2, r1
 8004dda:	f8a3 2404 	strh.w	r2, [r3, #1028]	@ 0x404
 8004dde:	e008      	b.n	8004df2 <USB_EPStartXfer+0x518>
 8004de0:	f8b5 3050 	ldrh.w	r3, [r5, #80]	@ 0x50
 8004de4:	b29b      	uxth	r3, r3
 8004de6:	442b      	add	r3, r5
 8004de8:	eb03 1301 	add.w	r3, r3, r1, lsl #4
 8004dec:	b2b2      	uxth	r2, r6
 8004dee:	f8a3 2404 	strh.w	r2, [r3, #1028]	@ 0x404
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004df2:	b2b3      	uxth	r3, r6
 8004df4:	8922      	ldrh	r2, [r4, #8]
 8004df6:	6961      	ldr	r1, [r4, #20]
 8004df8:	4628      	mov	r0, r5
 8004dfa:	f7ff fd5b 	bl	80048b4 <USB_WritePMA>
 8004dfe:	e5f4      	b.n	80049ea <USB_EPStartXfer+0x110>
        ep->xfer_len = 0U;
 8004e00:	2200      	movs	r2, #0
 8004e02:	618a      	str	r2, [r1, #24]
        len = ep->xfer_len;
 8004e04:	461a      	mov	r2, r3
 8004e06:	e579      	b.n	80048fc <USB_EPStartXfer+0x22>
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8004e08:	b94a      	cbnz	r2, 8004e1e <USB_EPStartXfer+0x544>
 8004e0a:	f8b3 240c 	ldrh.w	r2, [r3, #1036]	@ 0x40c
 8004e0e:	ea6f 4242 	mvn.w	r2, r2, lsl #17
 8004e12:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 8004e16:	b292      	uxth	r2, r2
 8004e18:	f8a3 240c 	strh.w	r2, [r3, #1036]	@ 0x40c
 8004e1c:	e58d      	b.n	800493a <USB_EPStartXfer+0x60>
 8004e1e:	0851      	lsrs	r1, r2, #1
 8004e20:	f012 0f01 	tst.w	r2, #1
 8004e24:	d000      	beq.n	8004e28 <USB_EPStartXfer+0x54e>
 8004e26:	3101      	adds	r1, #1
 8004e28:	f8b3 240c 	ldrh.w	r2, [r3, #1036]	@ 0x40c
 8004e2c:	b292      	uxth	r2, r2
 8004e2e:	0289      	lsls	r1, r1, #10
 8004e30:	b289      	uxth	r1, r1
 8004e32:	430a      	orrs	r2, r1
 8004e34:	f8a3 240c 	strh.w	r2, [r3, #1036]	@ 0x40c
 8004e38:	e57f      	b.n	800493a <USB_EPStartXfer+0x60>
      if (ep->type == EP_TYPE_BULK)
 8004e3a:	78cb      	ldrb	r3, [r1, #3]
 8004e3c:	2b02      	cmp	r3, #2
 8004e3e:	d04d      	beq.n	8004edc <USB_EPStartXfer+0x602>
      else if (ep->type == EP_TYPE_ISOC)
 8004e40:	2b01      	cmp	r3, #1
 8004e42:	f040 812f 	bne.w	80050a4 <USB_EPStartXfer+0x7ca>
        if (ep->xfer_len > ep->maxpacket)
 8004e46:	6989      	ldr	r1, [r1, #24]
 8004e48:	6923      	ldr	r3, [r4, #16]
 8004e4a:	4299      	cmp	r1, r3
 8004e4c:	f240 80e6 	bls.w	800501c <USB_EPStartXfer+0x742>
          ep->xfer_len -= len;
 8004e50:	1ac9      	subs	r1, r1, r3
 8004e52:	61a1      	str	r1, [r4, #24]
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8004e54:	b9f2      	cbnz	r2, 8004e94 <USB_EPStartXfer+0x5ba>
 8004e56:	f8b5 2050 	ldrh.w	r2, [r5, #80]	@ 0x50
 8004e5a:	b292      	uxth	r2, r2
 8004e5c:	442a      	add	r2, r5
 8004e5e:	7821      	ldrb	r1, [r4, #0]
 8004e60:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 8004e64:	f8b2 1404 	ldrh.w	r1, [r2, #1028]	@ 0x404
 8004e68:	f3c1 0109 	ubfx	r1, r1, #0, #10
 8004e6c:	f8a2 1404 	strh.w	r1, [r2, #1028]	@ 0x404
 8004e70:	2b3e      	cmp	r3, #62	@ 0x3e
 8004e72:	f240 80d7 	bls.w	8005024 <USB_EPStartXfer+0x74a>
 8004e76:	0958      	lsrs	r0, r3, #5
 8004e78:	f013 0f1f 	tst.w	r3, #31
 8004e7c:	d100      	bne.n	8004e80 <USB_EPStartXfer+0x5a6>
 8004e7e:	3801      	subs	r0, #1
 8004e80:	f8b2 1404 	ldrh.w	r1, [r2, #1028]	@ 0x404
 8004e84:	b289      	uxth	r1, r1
 8004e86:	0280      	lsls	r0, r0, #10
 8004e88:	b280      	uxth	r0, r0
 8004e8a:	4301      	orrs	r1, r0
 8004e8c:	f441 4100 	orr.w	r1, r1, #32768	@ 0x8000
 8004e90:	f8a2 1404 	strh.w	r1, [r2, #1028]	@ 0x404
 8004e94:	7862      	ldrb	r2, [r4, #1]
 8004e96:	2a00      	cmp	r2, #0
 8004e98:	f040 80f6 	bne.w	8005088 <USB_EPStartXfer+0x7ae>
 8004e9c:	f8b5 2050 	ldrh.w	r2, [r5, #80]	@ 0x50
 8004ea0:	b292      	uxth	r2, r2
 8004ea2:	442a      	add	r2, r5
 8004ea4:	7821      	ldrb	r1, [r4, #0]
 8004ea6:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 8004eaa:	f8b2 140c 	ldrh.w	r1, [r2, #1036]	@ 0x40c
 8004eae:	f3c1 0109 	ubfx	r1, r1, #0, #10
 8004eb2:	f8a2 140c 	strh.w	r1, [r2, #1036]	@ 0x40c
 8004eb6:	2b3e      	cmp	r3, #62	@ 0x3e
 8004eb8:	f240 80cd 	bls.w	8005056 <USB_EPStartXfer+0x77c>
 8004ebc:	0959      	lsrs	r1, r3, #5
 8004ebe:	f013 0f1f 	tst.w	r3, #31
 8004ec2:	d100      	bne.n	8004ec6 <USB_EPStartXfer+0x5ec>
 8004ec4:	3901      	subs	r1, #1
 8004ec6:	f8b2 340c 	ldrh.w	r3, [r2, #1036]	@ 0x40c
 8004eca:	b29b      	uxth	r3, r3
 8004ecc:	0289      	lsls	r1, r1, #10
 8004ece:	b289      	uxth	r1, r1
 8004ed0:	430b      	orrs	r3, r1
 8004ed2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004ed6:	f8a2 340c 	strh.w	r3, [r2, #1036]	@ 0x40c
 8004eda:	e52e      	b.n	800493a <USB_EPStartXfer+0x60>
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8004edc:	b9f2      	cbnz	r2, 8004f1c <USB_EPStartXfer+0x642>
 8004ede:	f8b0 3050 	ldrh.w	r3, [r0, #80]	@ 0x50
 8004ee2:	b29b      	uxth	r3, r3
 8004ee4:	4403      	add	r3, r0
 8004ee6:	780a      	ldrb	r2, [r1, #0]
 8004ee8:	eb03 1302 	add.w	r3, r3, r2, lsl #4
 8004eec:	f8b3 2404 	ldrh.w	r2, [r3, #1028]	@ 0x404
 8004ef0:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8004ef4:	f8a3 2404 	strh.w	r2, [r3, #1028]	@ 0x404
 8004ef8:	690a      	ldr	r2, [r1, #16]
 8004efa:	2a3e      	cmp	r2, #62	@ 0x3e
 8004efc:	d931      	bls.n	8004f62 <USB_EPStartXfer+0x688>
 8004efe:	0951      	lsrs	r1, r2, #5
 8004f00:	f012 0f1f 	tst.w	r2, #31
 8004f04:	d100      	bne.n	8004f08 <USB_EPStartXfer+0x62e>
 8004f06:	3901      	subs	r1, #1
 8004f08:	f8b3 2404 	ldrh.w	r2, [r3, #1028]	@ 0x404
 8004f0c:	b292      	uxth	r2, r2
 8004f0e:	0289      	lsls	r1, r1, #10
 8004f10:	b289      	uxth	r1, r1
 8004f12:	430a      	orrs	r2, r1
 8004f14:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004f18:	f8a3 2404 	strh.w	r2, [r3, #1028]	@ 0x404
 8004f1c:	7863      	ldrb	r3, [r4, #1]
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	d151      	bne.n	8004fc6 <USB_EPStartXfer+0x6ec>
 8004f22:	f8b5 3050 	ldrh.w	r3, [r5, #80]	@ 0x50
 8004f26:	b29b      	uxth	r3, r3
 8004f28:	442b      	add	r3, r5
 8004f2a:	7822      	ldrb	r2, [r4, #0]
 8004f2c:	eb03 1302 	add.w	r3, r3, r2, lsl #4
 8004f30:	f8b3 240c 	ldrh.w	r2, [r3, #1036]	@ 0x40c
 8004f34:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8004f38:	f8a3 240c 	strh.w	r2, [r3, #1036]	@ 0x40c
 8004f3c:	6922      	ldr	r2, [r4, #16]
 8004f3e:	2a3e      	cmp	r2, #62	@ 0x3e
 8004f40:	d928      	bls.n	8004f94 <USB_EPStartXfer+0x6ba>
 8004f42:	0951      	lsrs	r1, r2, #5
 8004f44:	f012 0f1f 	tst.w	r2, #31
 8004f48:	d100      	bne.n	8004f4c <USB_EPStartXfer+0x672>
 8004f4a:	3901      	subs	r1, #1
 8004f4c:	f8b3 240c 	ldrh.w	r2, [r3, #1036]	@ 0x40c
 8004f50:	b292      	uxth	r2, r2
 8004f52:	0289      	lsls	r1, r1, #10
 8004f54:	b289      	uxth	r1, r1
 8004f56:	430a      	orrs	r2, r1
 8004f58:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004f5c:	f8a3 240c 	strh.w	r2, [r3, #1036]	@ 0x40c
 8004f60:	e033      	b.n	8004fca <USB_EPStartXfer+0x6f0>
 8004f62:	b94a      	cbnz	r2, 8004f78 <USB_EPStartXfer+0x69e>
 8004f64:	f8b3 2404 	ldrh.w	r2, [r3, #1028]	@ 0x404
 8004f68:	ea6f 4242 	mvn.w	r2, r2, lsl #17
 8004f6c:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 8004f70:	b292      	uxth	r2, r2
 8004f72:	f8a3 2404 	strh.w	r2, [r3, #1028]	@ 0x404
 8004f76:	e7d1      	b.n	8004f1c <USB_EPStartXfer+0x642>
 8004f78:	0851      	lsrs	r1, r2, #1
 8004f7a:	f012 0f01 	tst.w	r2, #1
 8004f7e:	d000      	beq.n	8004f82 <USB_EPStartXfer+0x6a8>
 8004f80:	3101      	adds	r1, #1
 8004f82:	f8b3 2404 	ldrh.w	r2, [r3, #1028]	@ 0x404
 8004f86:	b290      	uxth	r0, r2
 8004f88:	028a      	lsls	r2, r1, #10
 8004f8a:	b292      	uxth	r2, r2
 8004f8c:	4302      	orrs	r2, r0
 8004f8e:	f8a3 2404 	strh.w	r2, [r3, #1028]	@ 0x404
 8004f92:	e7c3      	b.n	8004f1c <USB_EPStartXfer+0x642>
 8004f94:	b94a      	cbnz	r2, 8004faa <USB_EPStartXfer+0x6d0>
 8004f96:	f8b3 240c 	ldrh.w	r2, [r3, #1036]	@ 0x40c
 8004f9a:	ea6f 4242 	mvn.w	r2, r2, lsl #17
 8004f9e:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 8004fa2:	b292      	uxth	r2, r2
 8004fa4:	f8a3 240c 	strh.w	r2, [r3, #1036]	@ 0x40c
 8004fa8:	e00f      	b.n	8004fca <USB_EPStartXfer+0x6f0>
 8004faa:	0851      	lsrs	r1, r2, #1
 8004fac:	f012 0f01 	tst.w	r2, #1
 8004fb0:	d000      	beq.n	8004fb4 <USB_EPStartXfer+0x6da>
 8004fb2:	3101      	adds	r1, #1
 8004fb4:	f8b3 240c 	ldrh.w	r2, [r3, #1036]	@ 0x40c
 8004fb8:	b290      	uxth	r0, r2
 8004fba:	028a      	lsls	r2, r1, #10
 8004fbc:	b292      	uxth	r2, r2
 8004fbe:	4302      	orrs	r2, r0
 8004fc0:	f8a3 240c 	strh.w	r2, [r3, #1036]	@ 0x40c
 8004fc4:	e001      	b.n	8004fca <USB_EPStartXfer+0x6f0>
 8004fc6:	2b01      	cmp	r3, #1
 8004fc8:	d01d      	beq.n	8005006 <USB_EPStartXfer+0x72c>
        if (ep->xfer_count != 0U)
 8004fca:	69e3      	ldr	r3, [r4, #28]
 8004fcc:	2b00      	cmp	r3, #0
 8004fce:	f43f acb4 	beq.w	800493a <USB_EPStartXfer+0x60>
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8004fd2:	7822      	ldrb	r2, [r4, #0]
 8004fd4:	f835 1022 	ldrh.w	r1, [r5, r2, lsl #2]
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8004fd8:	f244 0340 	movw	r3, #16448	@ 0x4040
 8004fdc:	ea03 0001 	and.w	r0, r3, r1
 8004fe0:	438b      	bics	r3, r1
 8004fe2:	d002      	beq.n	8004fea <USB_EPStartXfer+0x710>
 8004fe4:	2800      	cmp	r0, #0
 8004fe6:	f47f aca8 	bne.w	800493a <USB_EPStartXfer+0x60>
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 8004fea:	f835 3022 	ldrh.w	r3, [r5, r2, lsl #2]
 8004fee:	b29b      	uxth	r3, r3
 8004ff0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004ff4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004ff8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004ffc:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8005000:	f825 3022 	strh.w	r3, [r5, r2, lsl #2]
 8005004:	e499      	b.n	800493a <USB_EPStartXfer+0x60>
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8005006:	f8b5 3050 	ldrh.w	r3, [r5, #80]	@ 0x50
 800500a:	b29b      	uxth	r3, r3
 800500c:	442b      	add	r3, r5
 800500e:	7822      	ldrb	r2, [r4, #0]
 8005010:	eb03 1302 	add.w	r3, r3, r2, lsl #4
 8005014:	8a22      	ldrh	r2, [r4, #16]
 8005016:	f8a3 240c 	strh.w	r2, [r3, #1036]	@ 0x40c
 800501a:	e7d6      	b.n	8004fca <USB_EPStartXfer+0x6f0>
          ep->xfer_len = 0U;
 800501c:	2300      	movs	r3, #0
 800501e:	61a3      	str	r3, [r4, #24]
          len = ep->xfer_len;
 8005020:	460b      	mov	r3, r1
 8005022:	e717      	b.n	8004e54 <USB_EPStartXfer+0x57a>
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8005024:	b94b      	cbnz	r3, 800503a <USB_EPStartXfer+0x760>
 8005026:	f8b2 1404 	ldrh.w	r1, [r2, #1028]	@ 0x404
 800502a:	ea6f 4141 	mvn.w	r1, r1, lsl #17
 800502e:	ea6f 4151 	mvn.w	r1, r1, lsr #17
 8005032:	b289      	uxth	r1, r1
 8005034:	f8a2 1404 	strh.w	r1, [r2, #1028]	@ 0x404
 8005038:	e72c      	b.n	8004e94 <USB_EPStartXfer+0x5ba>
 800503a:	0859      	lsrs	r1, r3, #1
 800503c:	f013 0f01 	tst.w	r3, #1
 8005040:	d000      	beq.n	8005044 <USB_EPStartXfer+0x76a>
 8005042:	3101      	adds	r1, #1
 8005044:	f8b2 0404 	ldrh.w	r0, [r2, #1028]	@ 0x404
 8005048:	b280      	uxth	r0, r0
 800504a:	0289      	lsls	r1, r1, #10
 800504c:	b289      	uxth	r1, r1
 800504e:	4301      	orrs	r1, r0
 8005050:	f8a2 1404 	strh.w	r1, [r2, #1028]	@ 0x404
 8005054:	e71e      	b.n	8004e94 <USB_EPStartXfer+0x5ba>
 8005056:	b94b      	cbnz	r3, 800506c <USB_EPStartXfer+0x792>
 8005058:	f8b2 340c 	ldrh.w	r3, [r2, #1036]	@ 0x40c
 800505c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005060:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005064:	b29b      	uxth	r3, r3
 8005066:	f8a2 340c 	strh.w	r3, [r2, #1036]	@ 0x40c
 800506a:	e466      	b.n	800493a <USB_EPStartXfer+0x60>
 800506c:	0859      	lsrs	r1, r3, #1
 800506e:	f013 0f01 	tst.w	r3, #1
 8005072:	d000      	beq.n	8005076 <USB_EPStartXfer+0x79c>
 8005074:	3101      	adds	r1, #1
 8005076:	f8b2 340c 	ldrh.w	r3, [r2, #1036]	@ 0x40c
 800507a:	b298      	uxth	r0, r3
 800507c:	028b      	lsls	r3, r1, #10
 800507e:	b29b      	uxth	r3, r3
 8005080:	4303      	orrs	r3, r0
 8005082:	f8a2 340c 	strh.w	r3, [r2, #1036]	@ 0x40c
 8005086:	e458      	b.n	800493a <USB_EPStartXfer+0x60>
 8005088:	2a01      	cmp	r2, #1
 800508a:	f47f ac56 	bne.w	800493a <USB_EPStartXfer+0x60>
 800508e:	f8b5 2050 	ldrh.w	r2, [r5, #80]	@ 0x50
 8005092:	b292      	uxth	r2, r2
 8005094:	442a      	add	r2, r5
 8005096:	7821      	ldrb	r1, [r4, #0]
 8005098:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 800509c:	b29b      	uxth	r3, r3
 800509e:	f8a2 340c 	strh.w	r3, [r2, #1036]	@ 0x40c
 80050a2:	e44a      	b.n	800493a <USB_EPStartXfer+0x60>
        return HAL_ERROR;
 80050a4:	2001      	movs	r0, #1
 80050a6:	e459      	b.n	800495c <USB_EPStartXfer+0x82>

080050a8 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 80050a8:	b410      	push	{r4}
  uint32_t n = (uint32_t)wNBytes >> 1;
 80050aa:	085c      	lsrs	r4, r3, #1
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80050ac:	eb00 0042 	add.w	r0, r0, r2, lsl #1
 80050b0:	f500 6080 	add.w	r0, r0, #1024	@ 0x400

  for (count = n; count != 0U; count--)
 80050b4:	e007      	b.n	80050c6 <USB_ReadPMA+0x1e>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 80050b6:	f830 2b04 	ldrh.w	r2, [r0], #4
    pdwVal++;
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 80050ba:	700a      	strb	r2, [r1, #0]
    pBuf++;
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 80050bc:	f3c2 2207 	ubfx	r2, r2, #8, #8
 80050c0:	704a      	strb	r2, [r1, #1]
    pBuf++;
 80050c2:	3102      	adds	r1, #2
  for (count = n; count != 0U; count--)
 80050c4:	3c01      	subs	r4, #1
 80050c6:	2c00      	cmp	r4, #0
 80050c8:	d1f5      	bne.n	80050b6 <USB_ReadPMA+0xe>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 80050ca:	f013 0f01 	tst.w	r3, #1
 80050ce:	d001      	beq.n	80050d4 <USB_ReadPMA+0x2c>
  {
    RdVal = *pdwVal;
 80050d0:	8803      	ldrh	r3, [r0, #0]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 80050d2:	700b      	strb	r3, [r1, #0]
  }
}
 80050d4:	bc10      	pop	{r4}
 80050d6:	4770      	bx	lr

080050d8 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 80050d8:	b510      	push	{r4, lr}
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80050da:	f8d0 42b8 	ldr.w	r4, [r0, #696]	@ 0x2b8

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 80050de:	f8d0 32bc 	ldr.w	r3, [r0, #700]	@ 0x2bc
 80050e2:	b15b      	cbz	r3, 80050fc <USBD_CDC_EP0_RxReady+0x24>
 80050e4:	f894 0200 	ldrb.w	r0, [r4, #512]	@ 0x200
 80050e8:	28ff      	cmp	r0, #255	@ 0xff
 80050ea:	d007      	beq.n	80050fc <USBD_CDC_EP0_RxReady+0x24>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 80050ec:	689b      	ldr	r3, [r3, #8]
 80050ee:	f894 2201 	ldrb.w	r2, [r4, #513]	@ 0x201
 80050f2:	4621      	mov	r1, r4
 80050f4:	4798      	blx	r3
                                                      (uint8_t *)(void *)hcdc->data,
                                                      (uint16_t)hcdc->CmdLength);
    hcdc->CmdOpCode = 0xFFU;
 80050f6:	23ff      	movs	r3, #255	@ 0xff
 80050f8:	f884 3200 	strb.w	r3, [r4, #512]	@ 0x200

  }
  return USBD_OK;
}
 80050fc:	2000      	movs	r0, #0
 80050fe:	bd10      	pop	{r4, pc}

08005100 <USBD_CDC_GetFSCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
  *length = sizeof(USBD_CDC_CfgFSDesc);
 8005100:	2343      	movs	r3, #67	@ 0x43
 8005102:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_CfgFSDesc;
}
 8005104:	4800      	ldr	r0, [pc, #0]	@ (8005108 <USBD_CDC_GetFSCfgDesc+0x8>)
 8005106:	4770      	bx	lr
 8005108:	20000050 	.word	0x20000050

0800510c <USBD_CDC_GetHSCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
  *length = sizeof(USBD_CDC_CfgHSDesc);
 800510c:	2343      	movs	r3, #67	@ 0x43
 800510e:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_CfgHSDesc;
}
 8005110:	4800      	ldr	r0, [pc, #0]	@ (8005114 <USBD_CDC_GetHSCfgDesc+0x8>)
 8005112:	4770      	bx	lr
 8005114:	20000094 	.word	0x20000094

08005118 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8005118:	2343      	movs	r3, #67	@ 0x43
 800511a:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
}
 800511c:	4800      	ldr	r0, [pc, #0]	@ (8005120 <USBD_CDC_GetOtherSpeedCfgDesc+0x8>)
 800511e:	4770      	bx	lr
 8005120:	2000000c 	.word	0x2000000c

08005124 <USBD_CDC_GetDeviceQualifierDescriptor>:
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 8005124:	230a      	movs	r3, #10
 8005126:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_DeviceQualifierDesc;
}
 8005128:	4800      	ldr	r0, [pc, #0]	@ (800512c <USBD_CDC_GetDeviceQualifierDescriptor+0x8>)
 800512a:	4770      	bx	lr
 800512c:	20000110 	.word	0x20000110

08005130 <USBD_CDC_DataOut>:
{
 8005130:	b538      	push	{r3, r4, r5, lr}
 8005132:	4604      	mov	r4, r0
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8005134:	f8d0 52b8 	ldr.w	r5, [r0, #696]	@ 0x2b8
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8005138:	f001 f853 	bl	80061e2 <USBD_LL_GetRxDataSize>
 800513c:	f8c5 020c 	str.w	r0, [r5, #524]	@ 0x20c
  if (pdev->pClassData != NULL)
 8005140:	f8d4 32b8 	ldr.w	r3, [r4, #696]	@ 0x2b8
 8005144:	b14b      	cbz	r3, 800515a <USBD_CDC_DataOut+0x2a>
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8005146:	f8d4 32bc 	ldr.w	r3, [r4, #700]	@ 0x2bc
 800514a:	68db      	ldr	r3, [r3, #12]
 800514c:	f505 7103 	add.w	r1, r5, #524	@ 0x20c
 8005150:	f8d5 0204 	ldr.w	r0, [r5, #516]	@ 0x204
 8005154:	4798      	blx	r3
    return USBD_OK;
 8005156:	2000      	movs	r0, #0
}
 8005158:	bd38      	pop	{r3, r4, r5, pc}
    return USBD_FAIL;
 800515a:	2002      	movs	r0, #2
 800515c:	e7fc      	b.n	8005158 <USBD_CDC_DataOut+0x28>

0800515e <USBD_CDC_DataIn>:
{
 800515e:	b510      	push	{r4, lr}
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8005160:	f8d0 22b8 	ldr.w	r2, [r0, #696]	@ 0x2b8
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8005164:	f8d0 42c0 	ldr.w	r4, [r0, #704]	@ 0x2c0
  if (pdev->pClassData != NULL)
 8005168:	b1f2      	cbz	r2, 80051a8 <USBD_CDC_DataIn+0x4a>
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800516a:	eb01 0381 	add.w	r3, r1, r1, lsl #2
 800516e:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 8005172:	69db      	ldr	r3, [r3, #28]
 8005174:	b14b      	cbz	r3, 800518a <USBD_CDC_DataIn+0x2c>
 8005176:	eb01 0c81 	add.w	ip, r1, r1, lsl #2
 800517a:	eb04 04cc 	add.w	r4, r4, ip, lsl #3
 800517e:	6a24      	ldr	r4, [r4, #32]
 8005180:	fbb3 fcf4 	udiv	ip, r3, r4
 8005184:	fb04 331c 	mls	r3, r4, ip, r3
 8005188:	b123      	cbz	r3, 8005194 <USBD_CDC_DataIn+0x36>
      hcdc->TxState = 0U;
 800518a:	2300      	movs	r3, #0
 800518c:	f8c2 3214 	str.w	r3, [r2, #532]	@ 0x214
    return USBD_OK;
 8005190:	2000      	movs	r0, #0
}
 8005192:	bd10      	pop	{r4, pc}
      pdev->ep_in[epnum].total_length = 0U;
 8005194:	eb01 0381 	add.w	r3, r1, r1, lsl #2
 8005198:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 800519c:	2200      	movs	r2, #0
 800519e:	61da      	str	r2, [r3, #28]
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 80051a0:	4613      	mov	r3, r2
 80051a2:	f001 f80e 	bl	80061c2 <USBD_LL_Transmit>
 80051a6:	e7f3      	b.n	8005190 <USBD_CDC_DataIn+0x32>
    return USBD_FAIL;
 80051a8:	2002      	movs	r0, #2
 80051aa:	e7f2      	b.n	8005192 <USBD_CDC_DataIn+0x34>

080051ac <USBD_CDC_Setup>:
{
 80051ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 80051ae:	b083      	sub	sp, #12
 80051b0:	4606      	mov	r6, r0
 80051b2:	460c      	mov	r4, r1
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80051b4:	f8d0 72b8 	ldr.w	r7, [r0, #696]	@ 0x2b8
  uint8_t ifalt = 0U;
 80051b8:	2300      	movs	r3, #0
 80051ba:	f88d 3007 	strb.w	r3, [sp, #7]
  uint16_t status_info = 0U;
 80051be:	f8ad 3004 	strh.w	r3, [sp, #4]
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80051c2:	780b      	ldrb	r3, [r1, #0]
 80051c4:	f013 0560 	ands.w	r5, r3, #96	@ 0x60
 80051c8:	d027      	beq.n	800521a <USBD_CDC_Setup+0x6e>
 80051ca:	2d20      	cmp	r5, #32
 80051cc:	d153      	bne.n	8005276 <USBD_CDC_Setup+0xca>
      if (req->wLength)
 80051ce:	88ca      	ldrh	r2, [r1, #6]
 80051d0:	b1da      	cbz	r2, 800520a <USBD_CDC_Setup+0x5e>
        if (req->bmRequest & 0x80U)
 80051d2:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80051d6:	d00c      	beq.n	80051f2 <USBD_CDC_Setup+0x46>
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80051d8:	f8d0 32bc 	ldr.w	r3, [r0, #700]	@ 0x2bc
 80051dc:	689b      	ldr	r3, [r3, #8]
 80051de:	4639      	mov	r1, r7
 80051e0:	7860      	ldrb	r0, [r4, #1]
 80051e2:	4798      	blx	r3
          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 80051e4:	88e2      	ldrh	r2, [r4, #6]
 80051e6:	4639      	mov	r1, r7
 80051e8:	4630      	mov	r0, r6
 80051ea:	f000 fd99 	bl	8005d20 <USBD_CtlSendData>
  uint8_t ret = USBD_OK;
 80051ee:	2500      	movs	r5, #0
 80051f0:	e044      	b.n	800527c <USBD_CDC_Setup+0xd0>
          hcdc->CmdOpCode = req->bRequest;
 80051f2:	784b      	ldrb	r3, [r1, #1]
 80051f4:	f887 3200 	strb.w	r3, [r7, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 80051f8:	798b      	ldrb	r3, [r1, #6]
 80051fa:	f887 3201 	strb.w	r3, [r7, #513]	@ 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 80051fe:	88ca      	ldrh	r2, [r1, #6]
 8005200:	4639      	mov	r1, r7
 8005202:	f000 fda2 	bl	8005d4a <USBD_CtlPrepareRx>
  uint8_t ret = USBD_OK;
 8005206:	2500      	movs	r5, #0
 8005208:	e038      	b.n	800527c <USBD_CDC_Setup+0xd0>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800520a:	f8d0 32bc 	ldr.w	r3, [r0, #700]	@ 0x2bc
 800520e:	689b      	ldr	r3, [r3, #8]
 8005210:	2200      	movs	r2, #0
 8005212:	7848      	ldrb	r0, [r1, #1]
 8005214:	4798      	blx	r3
  uint8_t ret = USBD_OK;
 8005216:	2500      	movs	r5, #0
 8005218:	e030      	b.n	800527c <USBD_CDC_Setup+0xd0>
      switch (req->bRequest)
 800521a:	784f      	ldrb	r7, [r1, #1]
 800521c:	2f0a      	cmp	r7, #10
 800521e:	d014      	beq.n	800524a <USBD_CDC_Setup+0x9e>
 8005220:	2f0b      	cmp	r7, #11
 8005222:	d020      	beq.n	8005266 <USBD_CDC_Setup+0xba>
 8005224:	b11f      	cbz	r7, 800522e <USBD_CDC_Setup+0x82>
          USBD_CtlError(pdev, req);
 8005226:	f000 fa6e 	bl	8005706 <USBD_CtlError>
          ret = USBD_FAIL;
 800522a:	2502      	movs	r5, #2
          break;
 800522c:	e026      	b.n	800527c <USBD_CDC_Setup+0xd0>
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800522e:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 8005232:	2b03      	cmp	r3, #3
 8005234:	d003      	beq.n	800523e <USBD_CDC_Setup+0x92>
            USBD_CtlError(pdev, req);
 8005236:	f000 fa66 	bl	8005706 <USBD_CtlError>
            ret = USBD_FAIL;
 800523a:	2502      	movs	r5, #2
 800523c:	e01e      	b.n	800527c <USBD_CDC_Setup+0xd0>
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 800523e:	2202      	movs	r2, #2
 8005240:	a901      	add	r1, sp, #4
 8005242:	f000 fd6d 	bl	8005d20 <USBD_CtlSendData>
  uint8_t ret = USBD_OK;
 8005246:	463d      	mov	r5, r7
 8005248:	e018      	b.n	800527c <USBD_CDC_Setup+0xd0>
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800524a:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 800524e:	2b03      	cmp	r3, #3
 8005250:	d003      	beq.n	800525a <USBD_CDC_Setup+0xae>
            USBD_CtlError(pdev, req);
 8005252:	f000 fa58 	bl	8005706 <USBD_CtlError>
            ret = USBD_FAIL;
 8005256:	2502      	movs	r5, #2
 8005258:	e010      	b.n	800527c <USBD_CDC_Setup+0xd0>
            USBD_CtlSendData(pdev, &ifalt, 1U);
 800525a:	2201      	movs	r2, #1
 800525c:	f10d 0107 	add.w	r1, sp, #7
 8005260:	f000 fd5e 	bl	8005d20 <USBD_CtlSendData>
 8005264:	e00a      	b.n	800527c <USBD_CDC_Setup+0xd0>
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8005266:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 800526a:	2b03      	cmp	r3, #3
 800526c:	d006      	beq.n	800527c <USBD_CDC_Setup+0xd0>
            USBD_CtlError(pdev, req);
 800526e:	f000 fa4a 	bl	8005706 <USBD_CtlError>
            ret = USBD_FAIL;
 8005272:	2502      	movs	r5, #2
 8005274:	e002      	b.n	800527c <USBD_CDC_Setup+0xd0>
      USBD_CtlError(pdev, req);
 8005276:	f000 fa46 	bl	8005706 <USBD_CtlError>
      ret = USBD_FAIL;
 800527a:	2502      	movs	r5, #2
}
 800527c:	4628      	mov	r0, r5
 800527e:	b003      	add	sp, #12
 8005280:	bdf0      	pop	{r4, r5, r6, r7, pc}

08005282 <USBD_CDC_DeInit>:
{
 8005282:	b538      	push	{r3, r4, r5, lr}
 8005284:	4604      	mov	r4, r0
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8005286:	2181      	movs	r1, #129	@ 0x81
 8005288:	f000 ff65 	bl	8006156 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800528c:	2500      	movs	r5, #0
 800528e:	62e5      	str	r5, [r4, #44]	@ 0x2c
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8005290:	2101      	movs	r1, #1
 8005292:	4620      	mov	r0, r4
 8005294:	f000 ff5f 	bl	8006156 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8005298:	f8c4 516c 	str.w	r5, [r4, #364]	@ 0x16c
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800529c:	2182      	movs	r1, #130	@ 0x82
 800529e:	4620      	mov	r0, r4
 80052a0:	f000 ff59 	bl	8006156 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 80052a4:	6425      	str	r5, [r4, #64]	@ 0x40
  if (pdev->pClassData != NULL)
 80052a6:	f8d4 32b8 	ldr.w	r3, [r4, #696]	@ 0x2b8
 80052aa:	b14b      	cbz	r3, 80052c0 <USBD_CDC_DeInit+0x3e>
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 80052ac:	f8d4 32bc 	ldr.w	r3, [r4, #700]	@ 0x2bc
 80052b0:	685b      	ldr	r3, [r3, #4]
 80052b2:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 80052b4:	f8d4 02b8 	ldr.w	r0, [r4, #696]	@ 0x2b8
 80052b8:	f000 ff9e 	bl	80061f8 <USBD_static_free>
    pdev->pClassData = NULL;
 80052bc:	f8c4 52b8 	str.w	r5, [r4, #696]	@ 0x2b8
}
 80052c0:	2000      	movs	r0, #0
 80052c2:	bd38      	pop	{r3, r4, r5, pc}

080052c4 <USBD_CDC_Init>:
{
 80052c4:	b570      	push	{r4, r5, r6, lr}
 80052c6:	4604      	mov	r4, r0
  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80052c8:	7c03      	ldrb	r3, [r0, #16]
 80052ca:	bbab      	cbnz	r3, 8005338 <USBD_CDC_Init+0x74>
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80052cc:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80052d0:	2202      	movs	r2, #2
 80052d2:	2181      	movs	r1, #129	@ 0x81
 80052d4:	f000 ff34 	bl	8006140 <USBD_LL_OpenEP>
    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80052d8:	2501      	movs	r5, #1
 80052da:	62e5      	str	r5, [r4, #44]	@ 0x2c
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80052dc:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80052e0:	2202      	movs	r2, #2
 80052e2:	4629      	mov	r1, r5
 80052e4:	4620      	mov	r0, r4
 80052e6:	f000 ff2b 	bl	8006140 <USBD_LL_OpenEP>
    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80052ea:	f8c4 516c 	str.w	r5, [r4, #364]	@ 0x16c
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80052ee:	2308      	movs	r3, #8
 80052f0:	2203      	movs	r2, #3
 80052f2:	2182      	movs	r1, #130	@ 0x82
 80052f4:	4620      	mov	r0, r4
 80052f6:	f000 ff23 	bl	8006140 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 80052fa:	2301      	movs	r3, #1
 80052fc:	6423      	str	r3, [r4, #64]	@ 0x40
  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 80052fe:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 8005302:	f000 ff75 	bl	80061f0 <USBD_static_malloc>
 8005306:	4605      	mov	r5, r0
 8005308:	f8c4 02b8 	str.w	r0, [r4, #696]	@ 0x2b8
  if (pdev->pClassData == NULL)
 800530c:	b368      	cbz	r0, 800536a <USBD_CDC_Init+0xa6>
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800530e:	f8d4 32bc 	ldr.w	r3, [r4, #700]	@ 0x2bc
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	4798      	blx	r3
    hcdc->TxState = 0U;
 8005316:	2300      	movs	r3, #0
 8005318:	f8c5 3214 	str.w	r3, [r5, #532]	@ 0x214
    hcdc->RxState = 0U;
 800531c:	f8c5 3218 	str.w	r3, [r5, #536]	@ 0x218
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005320:	7c26      	ldrb	r6, [r4, #16]
 8005322:	b9ce      	cbnz	r6, 8005358 <USBD_CDC_Init+0x94>
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8005324:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8005328:	f8d5 2204 	ldr.w	r2, [r5, #516]	@ 0x204
 800532c:	2101      	movs	r1, #1
 800532e:	4620      	mov	r0, r4
 8005330:	f000 ff4f 	bl	80061d2 <USBD_LL_PrepareReceive>
}
 8005334:	4630      	mov	r0, r6
 8005336:	bd70      	pop	{r4, r5, r6, pc}
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8005338:	2340      	movs	r3, #64	@ 0x40
 800533a:	2202      	movs	r2, #2
 800533c:	2181      	movs	r1, #129	@ 0x81
 800533e:	f000 feff 	bl	8006140 <USBD_LL_OpenEP>
    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8005342:	2501      	movs	r5, #1
 8005344:	62e5      	str	r5, [r4, #44]	@ 0x2c
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8005346:	2340      	movs	r3, #64	@ 0x40
 8005348:	2202      	movs	r2, #2
 800534a:	4629      	mov	r1, r5
 800534c:	4620      	mov	r0, r4
 800534e:	f000 fef7 	bl	8006140 <USBD_LL_OpenEP>
    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8005352:	f8c4 516c 	str.w	r5, [r4, #364]	@ 0x16c
 8005356:	e7ca      	b.n	80052ee <USBD_CDC_Init+0x2a>
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8005358:	2340      	movs	r3, #64	@ 0x40
 800535a:	f8d5 2204 	ldr.w	r2, [r5, #516]	@ 0x204
 800535e:	2101      	movs	r1, #1
 8005360:	4620      	mov	r0, r4
 8005362:	f000 ff36 	bl	80061d2 <USBD_LL_PrepareReceive>
  uint8_t ret = 0U;
 8005366:	2600      	movs	r6, #0
 8005368:	e7e4      	b.n	8005334 <USBD_CDC_Init+0x70>
    ret = 1U;
 800536a:	2601      	movs	r6, #1
 800536c:	e7e2      	b.n	8005334 <USBD_CDC_Init+0x70>

0800536e <USBD_CDC_RegisterInterface>:
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
  uint8_t  ret = USBD_FAIL;

  if (fops != NULL)
 800536e:	b119      	cbz	r1, 8005378 <USBD_CDC_RegisterInterface+0xa>
  {
    pdev->pUserData = fops;
 8005370:	f8c0 12bc 	str.w	r1, [r0, #700]	@ 0x2bc
    ret = USBD_OK;
 8005374:	2000      	movs	r0, #0
 8005376:	4770      	bx	lr
  uint8_t  ret = USBD_FAIL;
 8005378:	2002      	movs	r0, #2
  }

  return ret;
}
 800537a:	4770      	bx	lr

0800537c <USBD_CDC_SetTxBuffer>:
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800537c:	f8d0 32b8 	ldr.w	r3, [r0, #696]	@ 0x2b8

  hcdc->TxBuffer = pbuff;
 8005380:	f8c3 1208 	str.w	r1, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 8005384:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return USBD_OK;
}
 8005388:	2000      	movs	r0, #0
 800538a:	4770      	bx	lr

0800538c <USBD_CDC_SetRxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800538c:	f8d0 32b8 	ldr.w	r3, [r0, #696]	@ 0x2b8

  hcdc->RxBuffer = pbuff;
 8005390:	f8c3 1204 	str.w	r1, [r3, #516]	@ 0x204

  return USBD_OK;
}
 8005394:	2000      	movs	r0, #0
 8005396:	4770      	bx	lr

08005398 <USBD_CDC_TransmitPacket>:
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8005398:	f8d0 22b8 	ldr.w	r2, [r0, #696]	@ 0x2b8

  if (pdev->pClassData != NULL)
 800539c:	b19a      	cbz	r2, 80053c6 <USBD_CDC_TransmitPacket+0x2e>
{
 800539e:	b508      	push	{r3, lr}
  {
    if (hcdc->TxState == 0U)
 80053a0:	f8d2 3214 	ldr.w	r3, [r2, #532]	@ 0x214
 80053a4:	b10b      	cbz	r3, 80053aa <USBD_CDC_TransmitPacket+0x12>

      return USBD_OK;
    }
    else
    {
      return USBD_BUSY;
 80053a6:	2001      	movs	r0, #1
  }
  else
  {
    return USBD_FAIL;
  }
}
 80053a8:	bd08      	pop	{r3, pc}
      hcdc->TxState = 1U;
 80053aa:	2301      	movs	r3, #1
 80053ac:	f8c2 3214 	str.w	r3, [r2, #532]	@ 0x214
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 80053b0:	f8d2 3210 	ldr.w	r3, [r2, #528]	@ 0x210
 80053b4:	6303      	str	r3, [r0, #48]	@ 0x30
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 80053b6:	b29b      	uxth	r3, r3
 80053b8:	f8d2 2208 	ldr.w	r2, [r2, #520]	@ 0x208
 80053bc:	2181      	movs	r1, #129	@ 0x81
 80053be:	f000 ff00 	bl	80061c2 <USBD_LL_Transmit>
      return USBD_OK;
 80053c2:	2000      	movs	r0, #0
 80053c4:	e7f0      	b.n	80053a8 <USBD_CDC_TransmitPacket+0x10>
    return USBD_FAIL;
 80053c6:	2002      	movs	r0, #2
}
 80053c8:	4770      	bx	lr

080053ca <USBD_CDC_ReceivePacket>:
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80053ca:	f8d0 22b8 	ldr.w	r2, [r0, #696]	@ 0x2b8

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 80053ce:	b192      	cbz	r2, 80053f6 <USBD_CDC_ReceivePacket+0x2c>
{
 80053d0:	b508      	push	{r3, lr}
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 80053d2:	7c03      	ldrb	r3, [r0, #16]
 80053d4:	b943      	cbnz	r3, 80053e8 <USBD_CDC_ReceivePacket+0x1e>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 80053d6:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80053da:	f8d2 2204 	ldr.w	r2, [r2, #516]	@ 0x204
 80053de:	2101      	movs	r1, #1
 80053e0:	f000 fef7 	bl	80061d2 <USBD_LL_PrepareReceive>
      USBD_LL_PrepareReceive(pdev,
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 80053e4:	2000      	movs	r0, #0
  }
  else
  {
    return USBD_FAIL;
  }
}
 80053e6:	bd08      	pop	{r3, pc}
      USBD_LL_PrepareReceive(pdev,
 80053e8:	2340      	movs	r3, #64	@ 0x40
 80053ea:	f8d2 2204 	ldr.w	r2, [r2, #516]	@ 0x204
 80053ee:	2101      	movs	r1, #1
 80053f0:	f000 feef 	bl	80061d2 <USBD_LL_PrepareReceive>
 80053f4:	e7f6      	b.n	80053e4 <USBD_CDC_ReceivePacket+0x1a>
    return USBD_FAIL;
 80053f6:	2002      	movs	r0, #2
}
 80053f8:	4770      	bx	lr

080053fa <USBD_Init>:
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80053fa:	b198      	cbz	r0, 8005424 <USBD_Init+0x2a>
{
 80053fc:	b508      	push	{r3, lr}
 80053fe:	4603      	mov	r3, r0
#endif
    return USBD_FAIL;
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 8005400:	f8d0 02b4 	ldr.w	r0, [r0, #692]	@ 0x2b4
 8005404:	b110      	cbz	r0, 800540c <USBD_Init+0x12>
  {
    pdev->pClass = NULL;
 8005406:	2000      	movs	r0, #0
 8005408:	f8c3 02b4 	str.w	r0, [r3, #692]	@ 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800540c:	b109      	cbz	r1, 8005412 <USBD_Init+0x18>
  {
    pdev->pDesc = pdesc;
 800540e:	f8c3 12b0 	str.w	r1, [r3, #688]	@ 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005412:	2101      	movs	r1, #1
 8005414:	f883 129c 	strb.w	r1, [r3, #668]	@ 0x29c
  pdev->id = id;
 8005418:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 800541a:	4618      	mov	r0, r3
 800541c:	f000 fe46 	bl	80060ac <USBD_LL_Init>

  return USBD_OK;
 8005420:	2000      	movs	r0, #0
}
 8005422:	bd08      	pop	{r3, pc}
    return USBD_FAIL;
 8005424:	2002      	movs	r0, #2
}
 8005426:	4770      	bx	lr

08005428 <USBD_RegisterClass>:
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
  USBD_StatusTypeDef status = USBD_OK;
  if (pclass != NULL)
 8005428:	b119      	cbz	r1, 8005432 <USBD_RegisterClass+0xa>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 800542a:	f8c0 12b4 	str.w	r1, [r0, #692]	@ 0x2b4
    status = USBD_OK;
 800542e:	2000      	movs	r0, #0
 8005430:	4770      	bx	lr
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 8005432:	2002      	movs	r0, #2
  }

  return status;
}
 8005434:	4770      	bx	lr

08005436 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 8005436:	b508      	push	{r3, lr}
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8005438:	f000 fe7a 	bl	8006130 <USBD_LL_Start>

  return USBD_OK;
}
 800543c:	2000      	movs	r0, #0
 800543e:	bd08      	pop	{r3, pc}

08005440 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8005440:	b508      	push	{r3, lr}
  USBD_StatusTypeDef ret = USBD_FAIL;

  if (pdev->pClass != NULL)
 8005442:	f8d0 32b4 	ldr.w	r3, [r0, #692]	@ 0x2b4
 8005446:	b12b      	cbz	r3, 8005454 <USBD_SetClassConfig+0x14>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	4798      	blx	r3
 800544c:	b900      	cbnz	r0, 8005450 <USBD_SetClassConfig+0x10>
      ret = USBD_OK;
    }
  }

  return ret;
}
 800544e:	bd08      	pop	{r3, pc}
  USBD_StatusTypeDef ret = USBD_FAIL;
 8005450:	2002      	movs	r0, #2
 8005452:	e7fc      	b.n	800544e <USBD_SetClassConfig+0xe>
 8005454:	2002      	movs	r0, #2
 8005456:	e7fa      	b.n	800544e <USBD_SetClassConfig+0xe>

08005458 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8005458:	b508      	push	{r3, lr}
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 800545a:	f8d0 32b4 	ldr.w	r3, [r0, #692]	@ 0x2b4
 800545e:	685b      	ldr	r3, [r3, #4]
 8005460:	4798      	blx	r3

  return USBD_OK;
}
 8005462:	2000      	movs	r0, #0
 8005464:	bd08      	pop	{r3, pc}

08005466 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8005466:	b538      	push	{r3, r4, r5, lr}
 8005468:	4604      	mov	r4, r0
  USBD_ParseSetupRequest(&pdev->request, psetup);
 800546a:	f500 752a 	add.w	r5, r0, #680	@ 0x2a8
 800546e:	4628      	mov	r0, r5
 8005470:	f000 f935 	bl	80056de <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8005474:	2301      	movs	r3, #1
 8005476:	f8c4 3294 	str.w	r3, [r4, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800547a:	f8b4 32ae 	ldrh.w	r3, [r4, #686]	@ 0x2ae
 800547e:	f8c4 3298 	str.w	r3, [r4, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8005482:	f894 12a8 	ldrb.w	r1, [r4, #680]	@ 0x2a8
 8005486:	f001 031f 	and.w	r3, r1, #31
 800548a:	2b01      	cmp	r3, #1
 800548c:	d00e      	beq.n	80054ac <USBD_LL_SetupStage+0x46>
 800548e:	2b02      	cmp	r3, #2
 8005490:	d011      	beq.n	80054b6 <USBD_LL_SetupStage+0x50>
 8005492:	b12b      	cbz	r3, 80054a0 <USBD_LL_SetupStage+0x3a>
    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
      break;

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8005494:	f001 0180 	and.w	r1, r1, #128	@ 0x80
 8005498:	4620      	mov	r0, r4
 800549a:	f000 fe64 	bl	8006166 <USBD_LL_StallEP>
      break;
 800549e:	e003      	b.n	80054a8 <USBD_LL_SetupStage+0x42>
      USBD_StdDevReq(pdev, &pdev->request);
 80054a0:	4629      	mov	r1, r5
 80054a2:	4620      	mov	r0, r4
 80054a4:	f000 faca 	bl	8005a3c <USBD_StdDevReq>
  }

  return USBD_OK;
}
 80054a8:	2000      	movs	r0, #0
 80054aa:	bd38      	pop	{r3, r4, r5, pc}
      USBD_StdItfReq(pdev, &pdev->request);
 80054ac:	4629      	mov	r1, r5
 80054ae:	4620      	mov	r0, r4
 80054b0:	f000 faf8 	bl	8005aa4 <USBD_StdItfReq>
      break;
 80054b4:	e7f8      	b.n	80054a8 <USBD_LL_SetupStage+0x42>
      USBD_StdEPReq(pdev, &pdev->request);
 80054b6:	4629      	mov	r1, r5
 80054b8:	4620      	mov	r0, r4
 80054ba:	f000 fb23 	bl	8005b04 <USBD_StdEPReq>
      break;
 80054be:	e7f3      	b.n	80054a8 <USBD_LL_SetupStage+0x42>

080054c0 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80054c0:	b538      	push	{r3, r4, r5, lr}
 80054c2:	4604      	mov	r4, r0
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 80054c4:	460d      	mov	r5, r1
 80054c6:	bb91      	cbnz	r1, 800552e <USBD_LL_DataOutStage+0x6e>
 80054c8:	4613      	mov	r3, r2
  {
    pep = &pdev->ep_out[0];

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80054ca:	f8d0 2294 	ldr.w	r2, [r0, #660]	@ 0x294
 80054ce:	2a03      	cmp	r2, #3
 80054d0:	d003      	beq.n	80054da <USBD_LL_DataOutStage+0x1a>
        USBD_CtlSendStatus(pdev);
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 80054d2:	2a05      	cmp	r2, #5
 80054d4:	d024      	beq.n	8005520 <USBD_LL_DataOutStage+0x60>
  {
    /* should never be in this condition */
    return USBD_FAIL;
  }

  return USBD_OK;
 80054d6:	4608      	mov	r0, r1
 80054d8:	e033      	b.n	8005542 <USBD_LL_DataOutStage+0x82>
      if (pep->rem_length > pep->maxpacket)
 80054da:	f8d0 1160 	ldr.w	r1, [r0, #352]	@ 0x160
 80054de:	f8d0 2164 	ldr.w	r2, [r0, #356]	@ 0x164
 80054e2:	4291      	cmp	r1, r2
 80054e4:	d90d      	bls.n	8005502 <USBD_LL_DataOutStage+0x42>
        pep->rem_length -= pep->maxpacket;
 80054e6:	1a89      	subs	r1, r1, r2
 80054e8:	f8c0 1160 	str.w	r1, [r0, #352]	@ 0x160
        USBD_CtlContinueRx(pdev, pdata,
 80054ec:	428a      	cmp	r2, r1
 80054ee:	d906      	bls.n	80054fe <USBD_LL_DataOutStage+0x3e>
 80054f0:	b28a      	uxth	r2, r1
 80054f2:	4619      	mov	r1, r3
 80054f4:	4620      	mov	r0, r4
 80054f6:	f000 fc37 	bl	8005d68 <USBD_CtlContinueRx>
  return USBD_OK;
 80054fa:	4628      	mov	r0, r5
 80054fc:	e021      	b.n	8005542 <USBD_LL_DataOutStage+0x82>
        USBD_CtlContinueRx(pdev, pdata,
 80054fe:	b292      	uxth	r2, r2
 8005500:	e7f7      	b.n	80054f2 <USBD_LL_DataOutStage+0x32>
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8005502:	f8d0 32b4 	ldr.w	r3, [r0, #692]	@ 0x2b4
 8005506:	691b      	ldr	r3, [r3, #16]
 8005508:	b11b      	cbz	r3, 8005512 <USBD_LL_DataOutStage+0x52>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 800550a:	f890 229c 	ldrb.w	r2, [r0, #668]	@ 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800550e:	2a03      	cmp	r2, #3
 8005510:	d004      	beq.n	800551c <USBD_LL_DataOutStage+0x5c>
        USBD_CtlSendStatus(pdev);
 8005512:	4620      	mov	r0, r4
 8005514:	f000 fc30 	bl	8005d78 <USBD_CtlSendStatus>
  return USBD_OK;
 8005518:	4628      	mov	r0, r5
 800551a:	e012      	b.n	8005542 <USBD_LL_DataOutStage+0x82>
          pdev->pClass->EP0_RxReady(pdev);
 800551c:	4798      	blx	r3
 800551e:	e7f8      	b.n	8005512 <USBD_LL_DataOutStage+0x52>
        pdev->ep0_state = USBD_EP0_IDLE;
 8005520:	2100      	movs	r1, #0
 8005522:	f8c0 1294 	str.w	r1, [r0, #660]	@ 0x294
        USBD_LL_StallEP(pdev, 0U);
 8005526:	f000 fe1e 	bl	8006166 <USBD_LL_StallEP>
  return USBD_OK;
 800552a:	4628      	mov	r0, r5
 800552c:	e009      	b.n	8005542 <USBD_LL_DataOutStage+0x82>
  else if ((pdev->pClass->DataOut != NULL) &&
 800552e:	f8d0 32b4 	ldr.w	r3, [r0, #692]	@ 0x2b4
 8005532:	699b      	ldr	r3, [r3, #24]
 8005534:	b133      	cbz	r3, 8005544 <USBD_LL_DataOutStage+0x84>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8005536:	f890 229c 	ldrb.w	r2, [r0, #668]	@ 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 800553a:	2a03      	cmp	r2, #3
 800553c:	d104      	bne.n	8005548 <USBD_LL_DataOutStage+0x88>
    pdev->pClass->DataOut(pdev, epnum);
 800553e:	4798      	blx	r3
  return USBD_OK;
 8005540:	2000      	movs	r0, #0
}
 8005542:	bd38      	pop	{r3, r4, r5, pc}
    return USBD_FAIL;
 8005544:	2002      	movs	r0, #2
 8005546:	e7fc      	b.n	8005542 <USBD_LL_DataOutStage+0x82>
 8005548:	2002      	movs	r0, #2
 800554a:	e7fa      	b.n	8005542 <USBD_LL_DataOutStage+0x82>

0800554c <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800554c:	b538      	push	{r3, r4, r5, lr}
 800554e:	4604      	mov	r4, r0
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8005550:	460d      	mov	r5, r1
 8005552:	2900      	cmp	r1, #0
 8005554:	d153      	bne.n	80055fe <USBD_LL_DataInStage+0xb2>
 8005556:	4613      	mov	r3, r2
  {
    pep = &pdev->ep_in[0];

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8005558:	f8d0 2294 	ldr.w	r2, [r0, #660]	@ 0x294
 800555c:	2a02      	cmp	r2, #2
 800555e:	d00c      	beq.n	800557a <USBD_LL_DataInStage+0x2e>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8005560:	2a04      	cmp	r2, #4
 8005562:	d000      	beq.n	8005566 <USBD_LL_DataInStage+0x1a>
 8005564:	b91a      	cbnz	r2, 800556e <USBD_LL_DataInStage+0x22>
          (pdev->ep0_state == USBD_EP0_IDLE))
      {
        USBD_LL_StallEP(pdev, 0x80U);
 8005566:	2180      	movs	r1, #128	@ 0x80
 8005568:	4620      	mov	r0, r4
 800556a:	f000 fdfc 	bl	8006166 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 800556e:	f894 32a0 	ldrb.w	r3, [r4, #672]	@ 0x2a0
 8005572:	2b01      	cmp	r3, #1
 8005574:	d03e      	beq.n	80055f4 <USBD_LL_DataInStage+0xa8>
  {
    /* should never be in this condition */
    return USBD_FAIL;
  }

  return USBD_OK;
 8005576:	4628      	mov	r0, r5
}
 8005578:	bd38      	pop	{r3, r4, r5, pc}
      if (pep->rem_length > pep->maxpacket)
 800557a:	6a02      	ldr	r2, [r0, #32]
 800557c:	6a41      	ldr	r1, [r0, #36]	@ 0x24
 800557e:	428a      	cmp	r2, r1
 8005580:	d81b      	bhi.n	80055ba <USBD_LL_DataInStage+0x6e>
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8005582:	69c2      	ldr	r2, [r0, #28]
 8005584:	fbb2 f3f1 	udiv	r3, r2, r1
 8005588:	fb01 2313 	mls	r3, r1, r3, r2
 800558c:	b92b      	cbnz	r3, 800559a <USBD_LL_DataInStage+0x4e>
 800558e:	4291      	cmp	r1, r2
 8005590:	d803      	bhi.n	800559a <USBD_LL_DataInStage+0x4e>
            (pep->total_length < pdev->ep0_data_len))
 8005592:	f8d0 3298 	ldr.w	r3, [r0, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 8005596:	429a      	cmp	r2, r3
 8005598:	d31c      	bcc.n	80055d4 <USBD_LL_DataInStage+0x88>
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800559a:	f8d4 32b4 	ldr.w	r3, [r4, #692]	@ 0x2b4
 800559e:	68db      	ldr	r3, [r3, #12]
 80055a0:	b11b      	cbz	r3, 80055aa <USBD_LL_DataInStage+0x5e>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 80055a2:	f894 229c 	ldrb.w	r2, [r4, #668]	@ 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 80055a6:	2a03      	cmp	r2, #3
 80055a8:	d021      	beq.n	80055ee <USBD_LL_DataInStage+0xa2>
          USBD_LL_StallEP(pdev, 0x80U);
 80055aa:	2180      	movs	r1, #128	@ 0x80
 80055ac:	4620      	mov	r0, r4
 80055ae:	f000 fdda 	bl	8006166 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 80055b2:	4620      	mov	r0, r4
 80055b4:	f000 fbeb 	bl	8005d8e <USBD_CtlReceiveStatus>
 80055b8:	e7d9      	b.n	800556e <USBD_LL_DataInStage+0x22>
        pep->rem_length -= pep->maxpacket;
 80055ba:	1a52      	subs	r2, r2, r1
 80055bc:	6202      	str	r2, [r0, #32]
        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 80055be:	b292      	uxth	r2, r2
 80055c0:	4619      	mov	r1, r3
 80055c2:	f000 fbba 	bl	8005d3a <USBD_CtlContinueSendData>
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80055c6:	2300      	movs	r3, #0
 80055c8:	461a      	mov	r2, r3
 80055ca:	4619      	mov	r1, r3
 80055cc:	4620      	mov	r0, r4
 80055ce:	f000 fe00 	bl	80061d2 <USBD_LL_PrepareReceive>
 80055d2:	e7cc      	b.n	800556e <USBD_LL_DataInStage+0x22>
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 80055d4:	2200      	movs	r2, #0
 80055d6:	4611      	mov	r1, r2
 80055d8:	f000 fbaf 	bl	8005d3a <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80055dc:	2100      	movs	r1, #0
 80055de:	f8c4 1298 	str.w	r1, [r4, #664]	@ 0x298
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80055e2:	460b      	mov	r3, r1
 80055e4:	460a      	mov	r2, r1
 80055e6:	4620      	mov	r0, r4
 80055e8:	f000 fdf3 	bl	80061d2 <USBD_LL_PrepareReceive>
 80055ec:	e7bf      	b.n	800556e <USBD_LL_DataInStage+0x22>
            pdev->pClass->EP0_TxSent(pdev);
 80055ee:	4620      	mov	r0, r4
 80055f0:	4798      	blx	r3
 80055f2:	e7da      	b.n	80055aa <USBD_LL_DataInStage+0x5e>
      pdev->dev_test_mode = 0U;
 80055f4:	2300      	movs	r3, #0
 80055f6:	f884 32a0 	strb.w	r3, [r4, #672]	@ 0x2a0
  return USBD_OK;
 80055fa:	4628      	mov	r0, r5
 80055fc:	e7bc      	b.n	8005578 <USBD_LL_DataInStage+0x2c>
  else if ((pdev->pClass->DataIn != NULL) &&
 80055fe:	f8d0 32b4 	ldr.w	r3, [r0, #692]	@ 0x2b4
 8005602:	695b      	ldr	r3, [r3, #20]
 8005604:	b133      	cbz	r3, 8005614 <USBD_LL_DataInStage+0xc8>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8005606:	f890 229c 	ldrb.w	r2, [r0, #668]	@ 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 800560a:	2a03      	cmp	r2, #3
 800560c:	d104      	bne.n	8005618 <USBD_LL_DataInStage+0xcc>
    pdev->pClass->DataIn(pdev, epnum);
 800560e:	4798      	blx	r3
  return USBD_OK;
 8005610:	2000      	movs	r0, #0
    pdev->pClass->DataIn(pdev, epnum);
 8005612:	e7b1      	b.n	8005578 <USBD_LL_DataInStage+0x2c>
    return USBD_FAIL;
 8005614:	2002      	movs	r0, #2
 8005616:	e7af      	b.n	8005578 <USBD_LL_DataInStage+0x2c>
 8005618:	2002      	movs	r0, #2
 800561a:	e7ad      	b.n	8005578 <USBD_LL_DataInStage+0x2c>

0800561c <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800561c:	b570      	push	{r4, r5, r6, lr}
 800561e:	4604      	mov	r4, r0
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8005620:	2340      	movs	r3, #64	@ 0x40
 8005622:	2200      	movs	r2, #0
 8005624:	4611      	mov	r1, r2
 8005626:	f000 fd8b 	bl	8006140 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800562a:	2501      	movs	r5, #1
 800562c:	f8c4 5158 	str.w	r5, [r4, #344]	@ 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8005630:	2640      	movs	r6, #64	@ 0x40
 8005632:	f8c4 6164 	str.w	r6, [r4, #356]	@ 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8005636:	4633      	mov	r3, r6
 8005638:	2200      	movs	r2, #0
 800563a:	2180      	movs	r1, #128	@ 0x80
 800563c:	4620      	mov	r0, r4
 800563e:	f000 fd7f 	bl	8006140 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8005642:	61a5      	str	r5, [r4, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8005644:	6266      	str	r6, [r4, #36]	@ 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005646:	f884 529c 	strb.w	r5, [r4, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800564a:	2300      	movs	r3, #0
 800564c:	f8c4 3294 	str.w	r3, [r4, #660]	@ 0x294
  pdev->dev_config = 0U;
 8005650:	6063      	str	r3, [r4, #4]
  pdev->dev_remote_wakeup = 0U;
 8005652:	f8c4 32a4 	str.w	r3, [r4, #676]	@ 0x2a4

  if (pdev->pClassData)
 8005656:	f8d4 32b8 	ldr.w	r3, [r4, #696]	@ 0x2b8
 800565a:	b12b      	cbz	r3, 8005668 <USBD_LL_Reset+0x4c>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800565c:	f8d4 32b4 	ldr.w	r3, [r4, #692]	@ 0x2b4
 8005660:	685b      	ldr	r3, [r3, #4]
 8005662:	2100      	movs	r1, #0
 8005664:	4620      	mov	r0, r4
 8005666:	4798      	blx	r3
  }

  return USBD_OK;
}
 8005668:	2000      	movs	r0, #0
 800566a:	bd70      	pop	{r4, r5, r6, pc}

0800566c <USBD_LL_SetSpeed>:
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
  pdev->dev_speed = speed;
 800566c:	7401      	strb	r1, [r0, #16]

  return USBD_OK;
}
 800566e:	2000      	movs	r0, #0
 8005670:	4770      	bx	lr

08005672 <USBD_LL_Suspend>:
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
  pdev->dev_old_state =  pdev->dev_state;
 8005672:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 8005676:	f880 329d 	strb.w	r3, [r0, #669]	@ 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 800567a:	2304      	movs	r3, #4
 800567c:	f880 329c 	strb.w	r3, [r0, #668]	@ 0x29c

  return USBD_OK;
}
 8005680:	2000      	movs	r0, #0
 8005682:	4770      	bx	lr

08005684 <USBD_LL_Resume>:
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8005684:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 8005688:	2b04      	cmp	r3, #4
 800568a:	d001      	beq.n	8005690 <USBD_LL_Resume+0xc>
  {
    pdev->dev_state = pdev->dev_old_state;
  }

  return USBD_OK;
}
 800568c:	2000      	movs	r0, #0
 800568e:	4770      	bx	lr
    pdev->dev_state = pdev->dev_old_state;
 8005690:	f890 329d 	ldrb.w	r3, [r0, #669]	@ 0x29d
 8005694:	f880 329c 	strb.w	r3, [r0, #668]	@ 0x29c
 8005698:	e7f8      	b.n	800568c <USBD_LL_Resume+0x8>

0800569a <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800569a:	b508      	push	{r3, lr}
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800569c:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 80056a0:	2b03      	cmp	r3, #3
 80056a2:	d001      	beq.n	80056a8 <USBD_LL_SOF+0xe>
      pdev->pClass->SOF(pdev);
    }
  }

  return USBD_OK;
}
 80056a4:	2000      	movs	r0, #0
 80056a6:	bd08      	pop	{r3, pc}
    if (pdev->pClass->SOF != NULL)
 80056a8:	f8d0 32b4 	ldr.w	r3, [r0, #692]	@ 0x2b4
 80056ac:	69db      	ldr	r3, [r3, #28]
 80056ae:	2b00      	cmp	r3, #0
 80056b0:	d0f8      	beq.n	80056a4 <USBD_LL_SOF+0xa>
      pdev->pClass->SOF(pdev);
 80056b2:	4798      	blx	r3
 80056b4:	e7f6      	b.n	80056a4 <USBD_LL_SOF+0xa>

080056b6 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80056b6:	4603      	mov	r3, r0
  uint8_t  len = 0U;
 80056b8:	2000      	movs	r0, #0

  while (*buf != '\0')
 80056ba:	e002      	b.n	80056c2 <USBD_GetLen+0xc>
  {
    len++;
 80056bc:	3001      	adds	r0, #1
 80056be:	b2c0      	uxtb	r0, r0
    buf++;
 80056c0:	3301      	adds	r3, #1
  while (*buf != '\0')
 80056c2:	781a      	ldrb	r2, [r3, #0]
 80056c4:	2a00      	cmp	r2, #0
 80056c6:	d1f9      	bne.n	80056bc <USBD_GetLen+0x6>
  }

  return len;
}
 80056c8:	4770      	bx	lr

080056ca <USBD_SetFeature>:
{
 80056ca:	b508      	push	{r3, lr}
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80056cc:	884b      	ldrh	r3, [r1, #2]
 80056ce:	2b01      	cmp	r3, #1
 80056d0:	d000      	beq.n	80056d4 <USBD_SetFeature+0xa>
}
 80056d2:	bd08      	pop	{r3, pc}
    pdev->dev_remote_wakeup = 1U;
 80056d4:	f8c0 32a4 	str.w	r3, [r0, #676]	@ 0x2a4
    USBD_CtlSendStatus(pdev);
 80056d8:	f000 fb4e 	bl	8005d78 <USBD_CtlSendStatus>
}
 80056dc:	e7f9      	b.n	80056d2 <USBD_SetFeature+0x8>

080056de <USBD_ParseSetupRequest>:
  req->bmRequest = *(uint8_t *)(pdata);
 80056de:	780b      	ldrb	r3, [r1, #0]
 80056e0:	7003      	strb	r3, [r0, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 80056e2:	784b      	ldrb	r3, [r1, #1]
 80056e4:	7043      	strb	r3, [r0, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 80056e6:	788b      	ldrb	r3, [r1, #2]
 80056e8:	78ca      	ldrb	r2, [r1, #3]
 80056ea:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 80056ee:	8043      	strh	r3, [r0, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 80056f0:	790b      	ldrb	r3, [r1, #4]
 80056f2:	794a      	ldrb	r2, [r1, #5]
 80056f4:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 80056f8:	8083      	strh	r3, [r0, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 80056fa:	798b      	ldrb	r3, [r1, #6]
 80056fc:	79ca      	ldrb	r2, [r1, #7]
 80056fe:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8005702:	80c3      	strh	r3, [r0, #6]
}
 8005704:	4770      	bx	lr

08005706 <USBD_CtlError>:
{
 8005706:	b510      	push	{r4, lr}
 8005708:	4604      	mov	r4, r0
  USBD_LL_StallEP(pdev, 0x80U);
 800570a:	2180      	movs	r1, #128	@ 0x80
 800570c:	f000 fd2b 	bl	8006166 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 8005710:	2100      	movs	r1, #0
 8005712:	4620      	mov	r0, r4
 8005714:	f000 fd27 	bl	8006166 <USBD_LL_StallEP>
}
 8005718:	bd10      	pop	{r4, pc}

0800571a <USBD_GetDescriptor>:
{
 800571a:	b530      	push	{r4, r5, lr}
 800571c:	b083      	sub	sp, #12
 800571e:	4605      	mov	r5, r0
 8005720:	460c      	mov	r4, r1
  uint16_t len = 0U;
 8005722:	2300      	movs	r3, #0
 8005724:	f8ad 3006 	strh.w	r3, [sp, #6]
  switch (req->wValue >> 8)
 8005728:	884a      	ldrh	r2, [r1, #2]
 800572a:	0a13      	lsrs	r3, r2, #8
 800572c:	3b01      	subs	r3, #1
 800572e:	2b06      	cmp	r3, #6
 8005730:	f200 80a4 	bhi.w	800587c <USBD_GetDescriptor+0x162>
 8005734:	e8df f003 	tbb	[pc, r3]
 8005738:	a22c1804 	.word	0xa22c1804
 800573c:	86a2      	.short	0x86a2
 800573e:	93          	.byte	0x93
 800573f:	00          	.byte	0x00
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8005740:	f8d0 32b0 	ldr.w	r3, [r0, #688]	@ 0x2b0
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	f10d 0106 	add.w	r1, sp, #6
 800574a:	7c00      	ldrb	r0, [r0, #16]
 800574c:	4798      	blx	r3
    if ((len != 0U) && (req->wLength != 0U))
 800574e:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 8005752:	b11a      	cbz	r2, 800575c <USBD_GetDescriptor+0x42>
 8005754:	88e3      	ldrh	r3, [r4, #6]
 8005756:	2b00      	cmp	r3, #0
 8005758:	f040 8094 	bne.w	8005884 <USBD_GetDescriptor+0x16a>
    if (req->wLength == 0U)
 800575c:	88e3      	ldrh	r3, [r4, #6]
 800575e:	2b00      	cmp	r3, #0
 8005760:	f000 809a 	beq.w	8005898 <USBD_GetDescriptor+0x17e>
}
 8005764:	b003      	add	sp, #12
 8005766:	bd30      	pop	{r4, r5, pc}
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005768:	7c03      	ldrb	r3, [r0, #16]
 800576a:	b943      	cbnz	r3, 800577e <USBD_GetDescriptor+0x64>
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800576c:	f8d0 32b4 	ldr.w	r3, [r0, #692]	@ 0x2b4
 8005770:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005772:	f10d 0006 	add.w	r0, sp, #6
 8005776:	4798      	blx	r3
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8005778:	2302      	movs	r3, #2
 800577a:	7043      	strb	r3, [r0, #1]
  if (err != 0U)
 800577c:	e7e7      	b.n	800574e <USBD_GetDescriptor+0x34>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800577e:	f8d0 32b4 	ldr.w	r3, [r0, #692]	@ 0x2b4
 8005782:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005784:	f10d 0006 	add.w	r0, sp, #6
 8005788:	4798      	blx	r3
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800578a:	2302      	movs	r3, #2
 800578c:	7043      	strb	r3, [r0, #1]
  if (err != 0U)
 800578e:	e7de      	b.n	800574e <USBD_GetDescriptor+0x34>
      switch ((uint8_t)(req->wValue))
 8005790:	b2d2      	uxtb	r2, r2
 8005792:	2a05      	cmp	r2, #5
 8005794:	d852      	bhi.n	800583c <USBD_GetDescriptor+0x122>
 8005796:	e8df f002 	tbb	[pc, r2]
 800579a:	1003      	.short	0x1003
 800579c:	44372a1d 	.word	0x44372a1d
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80057a0:	f8d0 32b0 	ldr.w	r3, [r0, #688]	@ 0x2b0
 80057a4:	685b      	ldr	r3, [r3, #4]
 80057a6:	b123      	cbz	r3, 80057b2 <USBD_GetDescriptor+0x98>
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80057a8:	f10d 0106 	add.w	r1, sp, #6
 80057ac:	7c00      	ldrb	r0, [r0, #16]
 80057ae:	4798      	blx	r3
  if (err != 0U)
 80057b0:	e7cd      	b.n	800574e <USBD_GetDescriptor+0x34>
            USBD_CtlError(pdev, req);
 80057b2:	4621      	mov	r1, r4
 80057b4:	f7ff ffa7 	bl	8005706 <USBD_CtlError>
  if (err != 0U)
 80057b8:	e7d4      	b.n	8005764 <USBD_GetDescriptor+0x4a>
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80057ba:	f8d0 32b0 	ldr.w	r3, [r0, #688]	@ 0x2b0
 80057be:	689b      	ldr	r3, [r3, #8]
 80057c0:	b123      	cbz	r3, 80057cc <USBD_GetDescriptor+0xb2>
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80057c2:	f10d 0106 	add.w	r1, sp, #6
 80057c6:	7c00      	ldrb	r0, [r0, #16]
 80057c8:	4798      	blx	r3
  if (err != 0U)
 80057ca:	e7c0      	b.n	800574e <USBD_GetDescriptor+0x34>
            USBD_CtlError(pdev, req);
 80057cc:	4621      	mov	r1, r4
 80057ce:	f7ff ff9a 	bl	8005706 <USBD_CtlError>
  if (err != 0U)
 80057d2:	e7c7      	b.n	8005764 <USBD_GetDescriptor+0x4a>
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80057d4:	f8d0 32b0 	ldr.w	r3, [r0, #688]	@ 0x2b0
 80057d8:	68db      	ldr	r3, [r3, #12]
 80057da:	b123      	cbz	r3, 80057e6 <USBD_GetDescriptor+0xcc>
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80057dc:	f10d 0106 	add.w	r1, sp, #6
 80057e0:	7c00      	ldrb	r0, [r0, #16]
 80057e2:	4798      	blx	r3
  if (err != 0U)
 80057e4:	e7b3      	b.n	800574e <USBD_GetDescriptor+0x34>
            USBD_CtlError(pdev, req);
 80057e6:	4621      	mov	r1, r4
 80057e8:	f7ff ff8d 	bl	8005706 <USBD_CtlError>
  if (err != 0U)
 80057ec:	e7ba      	b.n	8005764 <USBD_GetDescriptor+0x4a>
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80057ee:	f8d0 32b0 	ldr.w	r3, [r0, #688]	@ 0x2b0
 80057f2:	691b      	ldr	r3, [r3, #16]
 80057f4:	b123      	cbz	r3, 8005800 <USBD_GetDescriptor+0xe6>
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80057f6:	f10d 0106 	add.w	r1, sp, #6
 80057fa:	7c00      	ldrb	r0, [r0, #16]
 80057fc:	4798      	blx	r3
  if (err != 0U)
 80057fe:	e7a6      	b.n	800574e <USBD_GetDescriptor+0x34>
            USBD_CtlError(pdev, req);
 8005800:	4621      	mov	r1, r4
 8005802:	f7ff ff80 	bl	8005706 <USBD_CtlError>
  if (err != 0U)
 8005806:	e7ad      	b.n	8005764 <USBD_GetDescriptor+0x4a>
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8005808:	f8d0 32b0 	ldr.w	r3, [r0, #688]	@ 0x2b0
 800580c:	695b      	ldr	r3, [r3, #20]
 800580e:	b123      	cbz	r3, 800581a <USBD_GetDescriptor+0x100>
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8005810:	f10d 0106 	add.w	r1, sp, #6
 8005814:	7c00      	ldrb	r0, [r0, #16]
 8005816:	4798      	blx	r3
  if (err != 0U)
 8005818:	e799      	b.n	800574e <USBD_GetDescriptor+0x34>
            USBD_CtlError(pdev, req);
 800581a:	4621      	mov	r1, r4
 800581c:	f7ff ff73 	bl	8005706 <USBD_CtlError>
  if (err != 0U)
 8005820:	e7a0      	b.n	8005764 <USBD_GetDescriptor+0x4a>
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8005822:	f8d0 32b0 	ldr.w	r3, [r0, #688]	@ 0x2b0
 8005826:	699b      	ldr	r3, [r3, #24]
 8005828:	b123      	cbz	r3, 8005834 <USBD_GetDescriptor+0x11a>
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800582a:	f10d 0106 	add.w	r1, sp, #6
 800582e:	7c00      	ldrb	r0, [r0, #16]
 8005830:	4798      	blx	r3
  if (err != 0U)
 8005832:	e78c      	b.n	800574e <USBD_GetDescriptor+0x34>
            USBD_CtlError(pdev, req);
 8005834:	4621      	mov	r1, r4
 8005836:	f7ff ff66 	bl	8005706 <USBD_CtlError>
  if (err != 0U)
 800583a:	e793      	b.n	8005764 <USBD_GetDescriptor+0x4a>
          USBD_CtlError(pdev, req);
 800583c:	4621      	mov	r1, r4
 800583e:	f7ff ff62 	bl	8005706 <USBD_CtlError>
  if (err != 0U)
 8005842:	e78f      	b.n	8005764 <USBD_GetDescriptor+0x4a>
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005844:	7c03      	ldrb	r3, [r0, #16]
 8005846:	b933      	cbnz	r3, 8005856 <USBD_GetDescriptor+0x13c>
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8005848:	f8d0 32b4 	ldr.w	r3, [r0, #692]	@ 0x2b4
 800584c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800584e:	f10d 0006 	add.w	r0, sp, #6
 8005852:	4798      	blx	r3
  if (err != 0U)
 8005854:	e77b      	b.n	800574e <USBD_GetDescriptor+0x34>
        USBD_CtlError(pdev, req);
 8005856:	4621      	mov	r1, r4
 8005858:	f7ff ff55 	bl	8005706 <USBD_CtlError>
  if (err != 0U)
 800585c:	e782      	b.n	8005764 <USBD_GetDescriptor+0x4a>
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800585e:	7c03      	ldrb	r3, [r0, #16]
 8005860:	b943      	cbnz	r3, 8005874 <USBD_GetDescriptor+0x15a>
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8005862:	f8d0 32b4 	ldr.w	r3, [r0, #692]	@ 0x2b4
 8005866:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005868:	f10d 0006 	add.w	r0, sp, #6
 800586c:	4798      	blx	r3
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800586e:	2307      	movs	r3, #7
 8005870:	7043      	strb	r3, [r0, #1]
  if (err != 0U)
 8005872:	e76c      	b.n	800574e <USBD_GetDescriptor+0x34>
        USBD_CtlError(pdev, req);
 8005874:	4621      	mov	r1, r4
 8005876:	f7ff ff46 	bl	8005706 <USBD_CtlError>
  if (err != 0U)
 800587a:	e773      	b.n	8005764 <USBD_GetDescriptor+0x4a>
      USBD_CtlError(pdev, req);
 800587c:	4621      	mov	r1, r4
 800587e:	f7ff ff42 	bl	8005706 <USBD_CtlError>
    return;
 8005882:	e76f      	b.n	8005764 <USBD_GetDescriptor+0x4a>
      len = MIN(len, req->wLength);
 8005884:	429a      	cmp	r2, r3
 8005886:	bf28      	it	cs
 8005888:	461a      	movcs	r2, r3
 800588a:	f8ad 2006 	strh.w	r2, [sp, #6]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800588e:	4601      	mov	r1, r0
 8005890:	4628      	mov	r0, r5
 8005892:	f000 fa45 	bl	8005d20 <USBD_CtlSendData>
 8005896:	e761      	b.n	800575c <USBD_GetDescriptor+0x42>
      (void)USBD_CtlSendStatus(pdev);
 8005898:	4628      	mov	r0, r5
 800589a:	f000 fa6d 	bl	8005d78 <USBD_CtlSendStatus>
 800589e:	e761      	b.n	8005764 <USBD_GetDescriptor+0x4a>

080058a0 <USBD_SetAddress>:
{
 80058a0:	b538      	push	{r3, r4, r5, lr}
 80058a2:	4604      	mov	r4, r0
  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80058a4:	888b      	ldrh	r3, [r1, #4]
 80058a6:	b9f3      	cbnz	r3, 80058e6 <USBD_SetAddress+0x46>
 80058a8:	88cb      	ldrh	r3, [r1, #6]
 80058aa:	b9e3      	cbnz	r3, 80058e6 <USBD_SetAddress+0x46>
 80058ac:	884b      	ldrh	r3, [r1, #2]
 80058ae:	2b7f      	cmp	r3, #127	@ 0x7f
 80058b0:	d819      	bhi.n	80058e6 <USBD_SetAddress+0x46>
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80058b2:	f003 057f 	and.w	r5, r3, #127	@ 0x7f
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80058b6:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 80058ba:	2b03      	cmp	r3, #3
 80058bc:	d00c      	beq.n	80058d8 <USBD_SetAddress+0x38>
      pdev->dev_address = dev_addr;
 80058be:	f880 529e 	strb.w	r5, [r0, #670]	@ 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 80058c2:	4629      	mov	r1, r5
 80058c4:	f000 fc75 	bl	80061b2 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 80058c8:	4620      	mov	r0, r4
 80058ca:	f000 fa55 	bl	8005d78 <USBD_CtlSendStatus>
      if (dev_addr != 0U)
 80058ce:	b135      	cbz	r5, 80058de <USBD_SetAddress+0x3e>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80058d0:	2302      	movs	r3, #2
 80058d2:	f884 329c 	strb.w	r3, [r4, #668]	@ 0x29c
 80058d6:	e009      	b.n	80058ec <USBD_SetAddress+0x4c>
      USBD_CtlError(pdev, req);
 80058d8:	f7ff ff15 	bl	8005706 <USBD_CtlError>
 80058dc:	e006      	b.n	80058ec <USBD_SetAddress+0x4c>
        pdev->dev_state = USBD_STATE_DEFAULT;
 80058de:	2301      	movs	r3, #1
 80058e0:	f884 329c 	strb.w	r3, [r4, #668]	@ 0x29c
 80058e4:	e002      	b.n	80058ec <USBD_SetAddress+0x4c>
    USBD_CtlError(pdev, req);
 80058e6:	4620      	mov	r0, r4
 80058e8:	f7ff ff0d 	bl	8005706 <USBD_CtlError>
}
 80058ec:	bd38      	pop	{r3, r4, r5, pc}
	...

080058f0 <USBD_SetConfig>:
{
 80058f0:	b538      	push	{r3, r4, r5, lr}
 80058f2:	4604      	mov	r4, r0
 80058f4:	460d      	mov	r5, r1
  cfgidx = (uint8_t)(req->wValue);
 80058f6:	7889      	ldrb	r1, [r1, #2]
 80058f8:	4b28      	ldr	r3, [pc, #160]	@ (800599c <USBD_SetConfig+0xac>)
 80058fa:	7019      	strb	r1, [r3, #0]
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80058fc:	2901      	cmp	r1, #1
 80058fe:	d80e      	bhi.n	800591e <USBD_SetConfig+0x2e>
    switch (pdev->dev_state)
 8005900:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 8005904:	2b02      	cmp	r3, #2
 8005906:	d00e      	beq.n	8005926 <USBD_SetConfig+0x36>
 8005908:	2b03      	cmp	r3, #3
 800590a:	d021      	beq.n	8005950 <USBD_SetConfig+0x60>
        USBD_CtlError(pdev, req);
 800590c:	4629      	mov	r1, r5
 800590e:	f7ff fefa 	bl	8005706 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 8005912:	4b22      	ldr	r3, [pc, #136]	@ (800599c <USBD_SetConfig+0xac>)
 8005914:	7819      	ldrb	r1, [r3, #0]
 8005916:	4620      	mov	r0, r4
 8005918:	f7ff fd9e 	bl	8005458 <USBD_ClrClassConfig>
        break;
 800591c:	e002      	b.n	8005924 <USBD_SetConfig+0x34>
    USBD_CtlError(pdev, req);
 800591e:	4629      	mov	r1, r5
 8005920:	f7ff fef1 	bl	8005706 <USBD_CtlError>
}
 8005924:	bd38      	pop	{r3, r4, r5, pc}
        if (cfgidx)
 8005926:	b181      	cbz	r1, 800594a <USBD_SetConfig+0x5a>
          pdev->dev_config = cfgidx;
 8005928:	6041      	str	r1, [r0, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800592a:	2303      	movs	r3, #3
 800592c:	f880 329c 	strb.w	r3, [r0, #668]	@ 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8005930:	f7ff fd86 	bl	8005440 <USBD_SetClassConfig>
 8005934:	2802      	cmp	r0, #2
 8005936:	d003      	beq.n	8005940 <USBD_SetConfig+0x50>
          USBD_CtlSendStatus(pdev);
 8005938:	4620      	mov	r0, r4
 800593a:	f000 fa1d 	bl	8005d78 <USBD_CtlSendStatus>
 800593e:	e7f1      	b.n	8005924 <USBD_SetConfig+0x34>
            USBD_CtlError(pdev, req);
 8005940:	4629      	mov	r1, r5
 8005942:	4620      	mov	r0, r4
 8005944:	f7ff fedf 	bl	8005706 <USBD_CtlError>
            return;
 8005948:	e7ec      	b.n	8005924 <USBD_SetConfig+0x34>
          USBD_CtlSendStatus(pdev);
 800594a:	f000 fa15 	bl	8005d78 <USBD_CtlSendStatus>
 800594e:	e7e9      	b.n	8005924 <USBD_SetConfig+0x34>
        if (cfgidx == 0U)
 8005950:	b189      	cbz	r1, 8005976 <USBD_SetConfig+0x86>
        else if (cfgidx != pdev->dev_config)
 8005952:	6843      	ldr	r3, [r0, #4]
 8005954:	4299      	cmp	r1, r3
 8005956:	d01d      	beq.n	8005994 <USBD_SetConfig+0xa4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8005958:	b2d9      	uxtb	r1, r3
 800595a:	f7ff fd7d 	bl	8005458 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 800595e:	4b0f      	ldr	r3, [pc, #60]	@ (800599c <USBD_SetConfig+0xac>)
 8005960:	7819      	ldrb	r1, [r3, #0]
 8005962:	6061      	str	r1, [r4, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8005964:	4620      	mov	r0, r4
 8005966:	f7ff fd6b 	bl	8005440 <USBD_SetClassConfig>
 800596a:	2802      	cmp	r0, #2
 800596c:	d00d      	beq.n	800598a <USBD_SetConfig+0x9a>
          USBD_CtlSendStatus(pdev);
 800596e:	4620      	mov	r0, r4
 8005970:	f000 fa02 	bl	8005d78 <USBD_CtlSendStatus>
 8005974:	e7d6      	b.n	8005924 <USBD_SetConfig+0x34>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8005976:	2302      	movs	r3, #2
 8005978:	f880 329c 	strb.w	r3, [r0, #668]	@ 0x29c
          pdev->dev_config = cfgidx;
 800597c:	6041      	str	r1, [r0, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 800597e:	f7ff fd6b 	bl	8005458 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 8005982:	4620      	mov	r0, r4
 8005984:	f000 f9f8 	bl	8005d78 <USBD_CtlSendStatus>
 8005988:	e7cc      	b.n	8005924 <USBD_SetConfig+0x34>
            USBD_CtlError(pdev, req);
 800598a:	4629      	mov	r1, r5
 800598c:	4620      	mov	r0, r4
 800598e:	f7ff feba 	bl	8005706 <USBD_CtlError>
            return;
 8005992:	e7c7      	b.n	8005924 <USBD_SetConfig+0x34>
          USBD_CtlSendStatus(pdev);
 8005994:	f000 f9f0 	bl	8005d78 <USBD_CtlSendStatus>
 8005998:	e7c4      	b.n	8005924 <USBD_SetConfig+0x34>
 800599a:	bf00      	nop
 800599c:	20000404 	.word	0x20000404

080059a0 <USBD_GetConfig>:
{
 80059a0:	b508      	push	{r3, lr}
  if (req->wLength != 1U)
 80059a2:	88cb      	ldrh	r3, [r1, #6]
 80059a4:	2b01      	cmp	r3, #1
 80059a6:	d10a      	bne.n	80059be <USBD_GetConfig+0x1e>
    switch (pdev->dev_state)
 80059a8:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 80059ac:	2b02      	cmp	r3, #2
 80059ae:	d909      	bls.n	80059c4 <USBD_GetConfig+0x24>
 80059b0:	2b03      	cmp	r3, #3
 80059b2:	d109      	bne.n	80059c8 <USBD_GetConfig+0x28>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 80059b4:	2201      	movs	r2, #1
 80059b6:	1d01      	adds	r1, r0, #4
 80059b8:	f000 f9b2 	bl	8005d20 <USBD_CtlSendData>
        break;
 80059bc:	e001      	b.n	80059c2 <USBD_GetConfig+0x22>
    USBD_CtlError(pdev, req);
 80059be:	f7ff fea2 	bl	8005706 <USBD_CtlError>
}
 80059c2:	bd08      	pop	{r3, pc}
    switch (pdev->dev_state)
 80059c4:	b25b      	sxtb	r3, r3
 80059c6:	b913      	cbnz	r3, 80059ce <USBD_GetConfig+0x2e>
        USBD_CtlError(pdev, req);
 80059c8:	f7ff fe9d 	bl	8005706 <USBD_CtlError>
}
 80059cc:	e7f9      	b.n	80059c2 <USBD_GetConfig+0x22>
        pdev->dev_default_config = 0U;
 80059ce:	4601      	mov	r1, r0
 80059d0:	2300      	movs	r3, #0
 80059d2:	f841 3f08 	str.w	r3, [r1, #8]!
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 80059d6:	2201      	movs	r2, #1
 80059d8:	f000 f9a2 	bl	8005d20 <USBD_CtlSendData>
        break;
 80059dc:	e7f1      	b.n	80059c2 <USBD_GetConfig+0x22>

080059de <USBD_GetStatus>:
{
 80059de:	b508      	push	{r3, lr}
  switch (pdev->dev_state)
 80059e0:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 80059e4:	3b01      	subs	r3, #1
 80059e6:	2b02      	cmp	r3, #2
 80059e8:	d812      	bhi.n	8005a10 <USBD_GetStatus+0x32>
      if (req->wLength != 0x2U)
 80059ea:	88cb      	ldrh	r3, [r1, #6]
 80059ec:	2b02      	cmp	r3, #2
 80059ee:	d10c      	bne.n	8005a0a <USBD_GetStatus+0x2c>
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80059f0:	2301      	movs	r3, #1
 80059f2:	60c3      	str	r3, [r0, #12]
      if (pdev->dev_remote_wakeup)
 80059f4:	f8d0 32a4 	ldr.w	r3, [r0, #676]	@ 0x2a4
 80059f8:	b10b      	cbz	r3, 80059fe <USBD_GetStatus+0x20>
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80059fa:	2303      	movs	r3, #3
 80059fc:	60c3      	str	r3, [r0, #12]
      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 80059fe:	2202      	movs	r2, #2
 8005a00:	f100 010c 	add.w	r1, r0, #12
 8005a04:	f000 f98c 	bl	8005d20 <USBD_CtlSendData>
}
 8005a08:	bd08      	pop	{r3, pc}
        USBD_CtlError(pdev, req);
 8005a0a:	f7ff fe7c 	bl	8005706 <USBD_CtlError>
        break;
 8005a0e:	e7fb      	b.n	8005a08 <USBD_GetStatus+0x2a>
      USBD_CtlError(pdev, req);
 8005a10:	f7ff fe79 	bl	8005706 <USBD_CtlError>
}
 8005a14:	e7f8      	b.n	8005a08 <USBD_GetStatus+0x2a>

08005a16 <USBD_ClrFeature>:
{
 8005a16:	b508      	push	{r3, lr}
  switch (pdev->dev_state)
 8005a18:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 8005a1c:	3b01      	subs	r3, #1
 8005a1e:	2b02      	cmp	r3, #2
 8005a20:	d809      	bhi.n	8005a36 <USBD_ClrFeature+0x20>
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8005a22:	884b      	ldrh	r3, [r1, #2]
 8005a24:	2b01      	cmp	r3, #1
 8005a26:	d000      	beq.n	8005a2a <USBD_ClrFeature+0x14>
}
 8005a28:	bd08      	pop	{r3, pc}
        pdev->dev_remote_wakeup = 0U;
 8005a2a:	2300      	movs	r3, #0
 8005a2c:	f8c0 32a4 	str.w	r3, [r0, #676]	@ 0x2a4
        USBD_CtlSendStatus(pdev);
 8005a30:	f000 f9a2 	bl	8005d78 <USBD_CtlSendStatus>
 8005a34:	e7f8      	b.n	8005a28 <USBD_ClrFeature+0x12>
      USBD_CtlError(pdev, req);
 8005a36:	f7ff fe66 	bl	8005706 <USBD_CtlError>
}
 8005a3a:	e7f5      	b.n	8005a28 <USBD_ClrFeature+0x12>

08005a3c <USBD_StdDevReq>:
{
 8005a3c:	b508      	push	{r3, lr}
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005a3e:	780b      	ldrb	r3, [r1, #0]
 8005a40:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8005a44:	2b20      	cmp	r3, #32
 8005a46:	d005      	beq.n	8005a54 <USBD_StdDevReq+0x18>
 8005a48:	2b40      	cmp	r3, #64	@ 0x40
 8005a4a:	d003      	beq.n	8005a54 <USBD_StdDevReq+0x18>
 8005a4c:	b143      	cbz	r3, 8005a60 <USBD_StdDevReq+0x24>
      USBD_CtlError(pdev, req);
 8005a4e:	f7ff fe5a 	bl	8005706 <USBD_CtlError>
      break;
 8005a52:	e003      	b.n	8005a5c <USBD_StdDevReq+0x20>
      pdev->pClass->Setup(pdev, req);
 8005a54:	f8d0 32b4 	ldr.w	r3, [r0, #692]	@ 0x2b4
 8005a58:	689b      	ldr	r3, [r3, #8]
 8005a5a:	4798      	blx	r3
}
 8005a5c:	2000      	movs	r0, #0
 8005a5e:	bd08      	pop	{r3, pc}
      switch (req->bRequest)
 8005a60:	784b      	ldrb	r3, [r1, #1]
 8005a62:	2b09      	cmp	r3, #9
 8005a64:	d81b      	bhi.n	8005a9e <USBD_StdDevReq+0x62>
 8005a66:	e8df f003 	tbb	[pc, r3]
 8005a6a:	1711      	.short	0x1711
 8005a6c:	081a141a 	.word	0x081a141a
 8005a70:	0b0e1a05 	.word	0x0b0e1a05
          USBD_GetDescriptor(pdev, req);
 8005a74:	f7ff fe51 	bl	800571a <USBD_GetDescriptor>
          break;
 8005a78:	e7f0      	b.n	8005a5c <USBD_StdDevReq+0x20>
          USBD_SetAddress(pdev, req);
 8005a7a:	f7ff ff11 	bl	80058a0 <USBD_SetAddress>
          break;
 8005a7e:	e7ed      	b.n	8005a5c <USBD_StdDevReq+0x20>
          USBD_SetConfig(pdev, req);
 8005a80:	f7ff ff36 	bl	80058f0 <USBD_SetConfig>
          break;
 8005a84:	e7ea      	b.n	8005a5c <USBD_StdDevReq+0x20>
          USBD_GetConfig(pdev, req);
 8005a86:	f7ff ff8b 	bl	80059a0 <USBD_GetConfig>
          break;
 8005a8a:	e7e7      	b.n	8005a5c <USBD_StdDevReq+0x20>
          USBD_GetStatus(pdev, req);
 8005a8c:	f7ff ffa7 	bl	80059de <USBD_GetStatus>
          break;
 8005a90:	e7e4      	b.n	8005a5c <USBD_StdDevReq+0x20>
          USBD_SetFeature(pdev, req);
 8005a92:	f7ff fe1a 	bl	80056ca <USBD_SetFeature>
          break;
 8005a96:	e7e1      	b.n	8005a5c <USBD_StdDevReq+0x20>
          USBD_ClrFeature(pdev, req);
 8005a98:	f7ff ffbd 	bl	8005a16 <USBD_ClrFeature>
          break;
 8005a9c:	e7de      	b.n	8005a5c <USBD_StdDevReq+0x20>
          USBD_CtlError(pdev, req);
 8005a9e:	f7ff fe32 	bl	8005706 <USBD_CtlError>
          break;
 8005aa2:	e7db      	b.n	8005a5c <USBD_StdDevReq+0x20>

08005aa4 <USBD_StdItfReq>:
{
 8005aa4:	b538      	push	{r3, r4, r5, lr}
 8005aa6:	4605      	mov	r5, r0
 8005aa8:	460c      	mov	r4, r1
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005aaa:	780b      	ldrb	r3, [r1, #0]
 8005aac:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8005ab0:	2b20      	cmp	r3, #32
 8005ab2:	d006      	beq.n	8005ac2 <USBD_StdItfReq+0x1e>
 8005ab4:	2b40      	cmp	r3, #64	@ 0x40
 8005ab6:	d004      	beq.n	8005ac2 <USBD_StdItfReq+0x1e>
 8005ab8:	b11b      	cbz	r3, 8005ac2 <USBD_StdItfReq+0x1e>
      USBD_CtlError(pdev, req);
 8005aba:	f7ff fe24 	bl	8005706 <USBD_CtlError>
}
 8005abe:	2000      	movs	r0, #0
 8005ac0:	bd38      	pop	{r3, r4, r5, pc}
      switch (pdev->dev_state)
 8005ac2:	f895 329c 	ldrb.w	r3, [r5, #668]	@ 0x29c
 8005ac6:	3b01      	subs	r3, #1
 8005ac8:	2b02      	cmp	r3, #2
 8005aca:	d816      	bhi.n	8005afa <USBD_StdItfReq+0x56>
          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8005acc:	7923      	ldrb	r3, [r4, #4]
 8005ace:	2b01      	cmp	r3, #1
 8005ad0:	d80e      	bhi.n	8005af0 <USBD_StdItfReq+0x4c>
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8005ad2:	f8d5 32b4 	ldr.w	r3, [r5, #692]	@ 0x2b4
 8005ad6:	689b      	ldr	r3, [r3, #8]
 8005ad8:	4621      	mov	r1, r4
 8005ada:	4628      	mov	r0, r5
 8005adc:	4798      	blx	r3
            if ((req->wLength == 0U) && (ret == USBD_OK))
 8005ade:	88e3      	ldrh	r3, [r4, #6]
 8005ae0:	2b00      	cmp	r3, #0
 8005ae2:	d1ec      	bne.n	8005abe <USBD_StdItfReq+0x1a>
 8005ae4:	2800      	cmp	r0, #0
 8005ae6:	d1ea      	bne.n	8005abe <USBD_StdItfReq+0x1a>
              USBD_CtlSendStatus(pdev);
 8005ae8:	4628      	mov	r0, r5
 8005aea:	f000 f945 	bl	8005d78 <USBD_CtlSendStatus>
 8005aee:	e7e6      	b.n	8005abe <USBD_StdItfReq+0x1a>
            USBD_CtlError(pdev, req);
 8005af0:	4621      	mov	r1, r4
 8005af2:	4628      	mov	r0, r5
 8005af4:	f7ff fe07 	bl	8005706 <USBD_CtlError>
 8005af8:	e7e1      	b.n	8005abe <USBD_StdItfReq+0x1a>
          USBD_CtlError(pdev, req);
 8005afa:	4621      	mov	r1, r4
 8005afc:	4628      	mov	r0, r5
 8005afe:	f7ff fe02 	bl	8005706 <USBD_CtlError>
          break;
 8005b02:	e7dc      	b.n	8005abe <USBD_StdItfReq+0x1a>

08005b04 <USBD_StdEPReq>:
{
 8005b04:	b570      	push	{r4, r5, r6, lr}
 8005b06:	4605      	mov	r5, r0
  ep_addr  = LOBYTE(req->wIndex);
 8005b08:	888b      	ldrh	r3, [r1, #4]
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005b0a:	780c      	ldrb	r4, [r1, #0]
 8005b0c:	f004 0460 	and.w	r4, r4, #96	@ 0x60
 8005b10:	2c20      	cmp	r4, #32
 8005b12:	d007      	beq.n	8005b24 <USBD_StdEPReq+0x20>
 8005b14:	b2da      	uxtb	r2, r3
 8005b16:	2c40      	cmp	r4, #64	@ 0x40
 8005b18:	d004      	beq.n	8005b24 <USBD_StdEPReq+0x20>
 8005b1a:	b15c      	cbz	r4, 8005b34 <USBD_StdEPReq+0x30>
      USBD_CtlError(pdev, req);
 8005b1c:	f7ff fdf3 	bl	8005706 <USBD_CtlError>
  return ret;
 8005b20:	2400      	movs	r4, #0
      break;
 8005b22:	e005      	b.n	8005b30 <USBD_StdEPReq+0x2c>
      pdev->pClass->Setup(pdev, req);
 8005b24:	f8d5 32b4 	ldr.w	r3, [r5, #692]	@ 0x2b4
 8005b28:	689b      	ldr	r3, [r3, #8]
 8005b2a:	4628      	mov	r0, r5
 8005b2c:	4798      	blx	r3
  return ret;
 8005b2e:	2400      	movs	r4, #0
}
 8005b30:	4620      	mov	r0, r4
 8005b32:	bd70      	pop	{r4, r5, r6, pc}
      if ((req->bmRequest & 0x60U) == 0x20U)
 8005b34:	2c20      	cmp	r4, #32
 8005b36:	d009      	beq.n	8005b4c <USBD_StdEPReq+0x48>
      switch (req->bRequest)
 8005b38:	784e      	ldrb	r6, [r1, #1]
 8005b3a:	2e01      	cmp	r6, #1
 8005b3c:	d033      	beq.n	8005ba6 <USBD_StdEPReq+0xa2>
 8005b3e:	2e03      	cmp	r6, #3
 8005b40:	d00a      	beq.n	8005b58 <USBD_StdEPReq+0x54>
 8005b42:	2e00      	cmp	r6, #0
 8005b44:	d055      	beq.n	8005bf2 <USBD_StdEPReq+0xee>
          USBD_CtlError(pdev, req);
 8005b46:	f7ff fdde 	bl	8005706 <USBD_CtlError>
          break;
 8005b4a:	e7f1      	b.n	8005b30 <USBD_StdEPReq+0x2c>
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8005b4c:	f8d0 32b4 	ldr.w	r3, [r0, #692]	@ 0x2b4
 8005b50:	689b      	ldr	r3, [r3, #8]
 8005b52:	4798      	blx	r3
 8005b54:	4604      	mov	r4, r0
        return ret;
 8005b56:	e7eb      	b.n	8005b30 <USBD_StdEPReq+0x2c>
          switch (pdev->dev_state)
 8005b58:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 8005b5c:	2b02      	cmp	r3, #2
 8005b5e:	d004      	beq.n	8005b6a <USBD_StdEPReq+0x66>
 8005b60:	2b03      	cmp	r3, #3
 8005b62:	d011      	beq.n	8005b88 <USBD_StdEPReq+0x84>
              USBD_CtlError(pdev, req);
 8005b64:	f7ff fdcf 	bl	8005706 <USBD_CtlError>
              break;
 8005b68:	e7e2      	b.n	8005b30 <USBD_StdEPReq+0x2c>
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8005b6a:	b10a      	cbz	r2, 8005b70 <USBD_StdEPReq+0x6c>
 8005b6c:	2a80      	cmp	r2, #128	@ 0x80
 8005b6e:	d103      	bne.n	8005b78 <USBD_StdEPReq+0x74>
                USBD_CtlError(pdev, req);
 8005b70:	4628      	mov	r0, r5
 8005b72:	f7ff fdc8 	bl	8005706 <USBD_CtlError>
 8005b76:	e7db      	b.n	8005b30 <USBD_StdEPReq+0x2c>
                USBD_LL_StallEP(pdev, ep_addr);
 8005b78:	4611      	mov	r1, r2
 8005b7a:	f000 faf4 	bl	8006166 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8005b7e:	2180      	movs	r1, #128	@ 0x80
 8005b80:	4628      	mov	r0, r5
 8005b82:	f000 faf0 	bl	8006166 <USBD_LL_StallEP>
 8005b86:	e7d3      	b.n	8005b30 <USBD_StdEPReq+0x2c>
              if (req->wValue == USB_FEATURE_EP_HALT)
 8005b88:	884b      	ldrh	r3, [r1, #2]
 8005b8a:	b923      	cbnz	r3, 8005b96 <USBD_StdEPReq+0x92>
                if ((ep_addr != 0x00U) &&
 8005b8c:	b11a      	cbz	r2, 8005b96 <USBD_StdEPReq+0x92>
 8005b8e:	2a80      	cmp	r2, #128	@ 0x80
 8005b90:	d001      	beq.n	8005b96 <USBD_StdEPReq+0x92>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8005b92:	88cb      	ldrh	r3, [r1, #6]
 8005b94:	b11b      	cbz	r3, 8005b9e <USBD_StdEPReq+0x9a>
              USBD_CtlSendStatus(pdev);
 8005b96:	4628      	mov	r0, r5
 8005b98:	f000 f8ee 	bl	8005d78 <USBD_CtlSendStatus>
              break;
 8005b9c:	e7c8      	b.n	8005b30 <USBD_StdEPReq+0x2c>
                  USBD_LL_StallEP(pdev, ep_addr);
 8005b9e:	4611      	mov	r1, r2
 8005ba0:	f000 fae1 	bl	8006166 <USBD_LL_StallEP>
 8005ba4:	e7f7      	b.n	8005b96 <USBD_StdEPReq+0x92>
          switch (pdev->dev_state)
 8005ba6:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 8005baa:	2b02      	cmp	r3, #2
 8005bac:	d004      	beq.n	8005bb8 <USBD_StdEPReq+0xb4>
 8005bae:	2b03      	cmp	r3, #3
 8005bb0:	d011      	beq.n	8005bd6 <USBD_StdEPReq+0xd2>
              USBD_CtlError(pdev, req);
 8005bb2:	f7ff fda8 	bl	8005706 <USBD_CtlError>
              break;
 8005bb6:	e7bb      	b.n	8005b30 <USBD_StdEPReq+0x2c>
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8005bb8:	b10a      	cbz	r2, 8005bbe <USBD_StdEPReq+0xba>
 8005bba:	2a80      	cmp	r2, #128	@ 0x80
 8005bbc:	d103      	bne.n	8005bc6 <USBD_StdEPReq+0xc2>
                USBD_CtlError(pdev, req);
 8005bbe:	4628      	mov	r0, r5
 8005bc0:	f7ff fda1 	bl	8005706 <USBD_CtlError>
 8005bc4:	e7b4      	b.n	8005b30 <USBD_StdEPReq+0x2c>
                USBD_LL_StallEP(pdev, ep_addr);
 8005bc6:	4611      	mov	r1, r2
 8005bc8:	f000 facd 	bl	8006166 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8005bcc:	2180      	movs	r1, #128	@ 0x80
 8005bce:	4628      	mov	r0, r5
 8005bd0:	f000 fac9 	bl	8006166 <USBD_LL_StallEP>
 8005bd4:	e7ac      	b.n	8005b30 <USBD_StdEPReq+0x2c>
              if (req->wValue == USB_FEATURE_EP_HALT)
 8005bd6:	884b      	ldrh	r3, [r1, #2]
 8005bd8:	2b00      	cmp	r3, #0
 8005bda:	d1a9      	bne.n	8005b30 <USBD_StdEPReq+0x2c>
                if ((ep_addr & 0x7FU) != 0x00U)
 8005bdc:	f012 0f7f 	tst.w	r2, #127	@ 0x7f
 8005be0:	d103      	bne.n	8005bea <USBD_StdEPReq+0xe6>
                USBD_CtlSendStatus(pdev);
 8005be2:	4628      	mov	r0, r5
 8005be4:	f000 f8c8 	bl	8005d78 <USBD_CtlSendStatus>
 8005be8:	e7a2      	b.n	8005b30 <USBD_StdEPReq+0x2c>
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 8005bea:	4611      	mov	r1, r2
 8005bec:	f000 fac3 	bl	8006176 <USBD_LL_ClearStallEP>
 8005bf0:	e7f7      	b.n	8005be2 <USBD_StdEPReq+0xde>
          switch (pdev->dev_state)
 8005bf2:	f890 029c 	ldrb.w	r0, [r0, #668]	@ 0x29c
 8005bf6:	2802      	cmp	r0, #2
 8005bf8:	d006      	beq.n	8005c08 <USBD_StdEPReq+0x104>
 8005bfa:	2803      	cmp	r0, #3
 8005bfc:	d029      	beq.n	8005c52 <USBD_StdEPReq+0x14e>
              USBD_CtlError(pdev, req);
 8005bfe:	4628      	mov	r0, r5
 8005c00:	f7ff fd81 	bl	8005706 <USBD_CtlError>
  return ret;
 8005c04:	4634      	mov	r4, r6
              break;
 8005c06:	e793      	b.n	8005b30 <USBD_StdEPReq+0x2c>
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8005c08:	b10a      	cbz	r2, 8005c0e <USBD_StdEPReq+0x10a>
 8005c0a:	2a80      	cmp	r2, #128	@ 0x80
 8005c0c:	d113      	bne.n	8005c36 <USBD_StdEPReq+0x132>
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005c0e:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8005c12:	d115      	bne.n	8005c40 <USBD_StdEPReq+0x13c>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8005c14:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005c18:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8005c1c:	0091      	lsls	r1, r2, #2
 8005c1e:	f501 71a8 	add.w	r1, r1, #336	@ 0x150
 8005c22:	4429      	add	r1, r5
 8005c24:	3104      	adds	r1, #4
              pep->status = 0x0000U;
 8005c26:	2300      	movs	r3, #0
 8005c28:	600b      	str	r3, [r1, #0]
              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8005c2a:	2202      	movs	r2, #2
 8005c2c:	4628      	mov	r0, r5
 8005c2e:	f000 f877 	bl	8005d20 <USBD_CtlSendData>
  return ret;
 8005c32:	4634      	mov	r4, r6
              break;
 8005c34:	e77c      	b.n	8005b30 <USBD_StdEPReq+0x2c>
                USBD_CtlError(pdev, req);
 8005c36:	4628      	mov	r0, r5
 8005c38:	f7ff fd65 	bl	8005706 <USBD_CtlError>
  return ret;
 8005c3c:	4634      	mov	r4, r6
                break;
 8005c3e:	e777      	b.n	8005b30 <USBD_StdEPReq+0x2c>
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005c40:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8005c44:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8005c48:	0091      	lsls	r1, r2, #2
 8005c4a:	3110      	adds	r1, #16
 8005c4c:	4429      	add	r1, r5
 8005c4e:	3104      	adds	r1, #4
 8005c50:	e7e9      	b.n	8005c26 <USBD_StdEPReq+0x122>
              if ((ep_addr & 0x80U) == 0x80U)
 8005c52:	b25b      	sxtb	r3, r3
 8005c54:	2b00      	cmp	r3, #0
 8005c56:	db1f      	blt.n	8005c98 <USBD_StdEPReq+0x194>
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8005c58:	f002 000f 	and.w	r0, r2, #15
 8005c5c:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8005c60:	eb05 0080 	add.w	r0, r5, r0, lsl #2
 8005c64:	f8d0 0158 	ldr.w	r0, [r0, #344]	@ 0x158
 8005c68:	b320      	cbz	r0, 8005cb4 <USBD_StdEPReq+0x1b0>
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005c6a:	2b00      	cmp	r3, #0
 8005c6c:	db27      	blt.n	8005cbe <USBD_StdEPReq+0x1ba>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8005c6e:	f002 037f 	and.w	r3, r2, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005c72:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8005c76:	009c      	lsls	r4, r3, #2
 8005c78:	f504 74a8 	add.w	r4, r4, #336	@ 0x150
 8005c7c:	442c      	add	r4, r5
 8005c7e:	3404      	adds	r4, #4
              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8005c80:	b10a      	cbz	r2, 8005c86 <USBD_StdEPReq+0x182>
 8005c82:	2a80      	cmp	r2, #128	@ 0x80
 8005c84:	d124      	bne.n	8005cd0 <USBD_StdEPReq+0x1cc>
                pep->status = 0x0000U;
 8005c86:	2300      	movs	r3, #0
 8005c88:	6023      	str	r3, [r4, #0]
              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8005c8a:	2202      	movs	r2, #2
 8005c8c:	4621      	mov	r1, r4
 8005c8e:	4628      	mov	r0, r5
 8005c90:	f000 f846 	bl	8005d20 <USBD_CtlSendData>
  return ret;
 8005c94:	4634      	mov	r4, r6
              break;
 8005c96:	e74b      	b.n	8005b30 <USBD_StdEPReq+0x2c>
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8005c98:	f002 000f 	and.w	r0, r2, #15
 8005c9c:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8005ca0:	eb05 0080 	add.w	r0, r5, r0, lsl #2
 8005ca4:	6980      	ldr	r0, [r0, #24]
 8005ca6:	2800      	cmp	r0, #0
 8005ca8:	d1df      	bne.n	8005c6a <USBD_StdEPReq+0x166>
                  USBD_CtlError(pdev, req);
 8005caa:	4628      	mov	r0, r5
 8005cac:	f7ff fd2b 	bl	8005706 <USBD_CtlError>
  return ret;
 8005cb0:	4634      	mov	r4, r6
                  break;
 8005cb2:	e73d      	b.n	8005b30 <USBD_StdEPReq+0x2c>
                  USBD_CtlError(pdev, req);
 8005cb4:	4628      	mov	r0, r5
 8005cb6:	f7ff fd26 	bl	8005706 <USBD_CtlError>
  return ret;
 8005cba:	4634      	mov	r4, r6
                  break;
 8005cbc:	e738      	b.n	8005b30 <USBD_StdEPReq+0x2c>
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005cbe:	f002 037f 	and.w	r3, r2, #127	@ 0x7f
 8005cc2:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8005cc6:	009c      	lsls	r4, r3, #2
 8005cc8:	3410      	adds	r4, #16
 8005cca:	442c      	add	r4, r5
 8005ccc:	3404      	adds	r4, #4
 8005cce:	e7d7      	b.n	8005c80 <USBD_StdEPReq+0x17c>
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 8005cd0:	4611      	mov	r1, r2
 8005cd2:	4628      	mov	r0, r5
 8005cd4:	f000 fa57 	bl	8006186 <USBD_LL_IsStallEP>
 8005cd8:	b110      	cbz	r0, 8005ce0 <USBD_StdEPReq+0x1dc>
                pep->status = 0x0001U;
 8005cda:	2301      	movs	r3, #1
 8005cdc:	6023      	str	r3, [r4, #0]
 8005cde:	e7d4      	b.n	8005c8a <USBD_StdEPReq+0x186>
                pep->status = 0x0000U;
 8005ce0:	2300      	movs	r3, #0
 8005ce2:	6023      	str	r3, [r4, #0]
 8005ce4:	e7d1      	b.n	8005c8a <USBD_StdEPReq+0x186>

08005ce6 <USBD_GetString>:
  if (desc != NULL)
 8005ce6:	b1d0      	cbz	r0, 8005d1e <USBD_GetString+0x38>
{
 8005ce8:	b570      	push	{r4, r5, r6, lr}
 8005cea:	460d      	mov	r5, r1
 8005cec:	4616      	mov	r6, r2
 8005cee:	4604      	mov	r4, r0
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 8005cf0:	f7ff fce1 	bl	80056b6 <USBD_GetLen>
 8005cf4:	1c43      	adds	r3, r0, #1
 8005cf6:	005b      	lsls	r3, r3, #1
 8005cf8:	b29b      	uxth	r3, r3
 8005cfa:	8033      	strh	r3, [r6, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 8005cfc:	702b      	strb	r3, [r5, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8005cfe:	2303      	movs	r3, #3
 8005d00:	706b      	strb	r3, [r5, #1]
 8005d02:	2302      	movs	r3, #2
    while (*desc != '\0')
 8005d04:	e007      	b.n	8005d16 <USBD_GetString+0x30>
      unicode[idx++] = *desc++;
 8005d06:	3401      	adds	r4, #1
 8005d08:	1c5a      	adds	r2, r3, #1
 8005d0a:	b2d2      	uxtb	r2, r2
 8005d0c:	54e8      	strb	r0, [r5, r3]
      unicode[idx++] =  0U;
 8005d0e:	3302      	adds	r3, #2
 8005d10:	b2db      	uxtb	r3, r3
 8005d12:	2100      	movs	r1, #0
 8005d14:	54a9      	strb	r1, [r5, r2]
    while (*desc != '\0')
 8005d16:	7820      	ldrb	r0, [r4, #0]
 8005d18:	2800      	cmp	r0, #0
 8005d1a:	d1f4      	bne.n	8005d06 <USBD_GetString+0x20>
}
 8005d1c:	bd70      	pop	{r4, r5, r6, pc}
 8005d1e:	4770      	bx	lr

08005d20 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 8005d20:	b508      	push	{r3, lr}
 8005d22:	4613      	mov	r3, r2
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8005d24:	2202      	movs	r2, #2
 8005d26:	f8c0 2294 	str.w	r2, [r0, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 8005d2a:	61c3      	str	r3, [r0, #28]
  pdev->ep_in[0].rem_length   = len;
 8005d2c:	6203      	str	r3, [r0, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8005d2e:	460a      	mov	r2, r1
 8005d30:	2100      	movs	r1, #0
 8005d32:	f000 fa46 	bl	80061c2 <USBD_LL_Transmit>

  return USBD_OK;
}
 8005d36:	2000      	movs	r0, #0
 8005d38:	bd08      	pop	{r3, pc}

08005d3a <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 8005d3a:	b508      	push	{r3, lr}
 8005d3c:	4613      	mov	r3, r2
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8005d3e:	460a      	mov	r2, r1
 8005d40:	2100      	movs	r1, #0
 8005d42:	f000 fa3e 	bl	80061c2 <USBD_LL_Transmit>

  return USBD_OK;
}
 8005d46:	2000      	movs	r0, #0
 8005d48:	bd08      	pop	{r3, pc}

08005d4a <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 8005d4a:	b508      	push	{r3, lr}
 8005d4c:	4613      	mov	r3, r2
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8005d4e:	2203      	movs	r2, #3
 8005d50:	f8c0 2294 	str.w	r2, [r0, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 8005d54:	f8c0 315c 	str.w	r3, [r0, #348]	@ 0x15c
  pdev->ep_out[0].rem_length   = len;
 8005d58:	f8c0 3160 	str.w	r3, [r0, #352]	@ 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8005d5c:	460a      	mov	r2, r1
 8005d5e:	2100      	movs	r1, #0
 8005d60:	f000 fa37 	bl	80061d2 <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 8005d64:	2000      	movs	r0, #0
 8005d66:	bd08      	pop	{r3, pc}

08005d68 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 8005d68:	b508      	push	{r3, lr}
 8005d6a:	4613      	mov	r3, r2
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8005d6c:	460a      	mov	r2, r1
 8005d6e:	2100      	movs	r1, #0
 8005d70:	f000 fa2f 	bl	80061d2 <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 8005d74:	2000      	movs	r0, #0
 8005d76:	bd08      	pop	{r3, pc}

08005d78 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8005d78:	b508      	push	{r3, lr}
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8005d7a:	2304      	movs	r3, #4
 8005d7c:	f8c0 3294 	str.w	r3, [r0, #660]	@ 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8005d80:	2300      	movs	r3, #0
 8005d82:	461a      	mov	r2, r3
 8005d84:	4619      	mov	r1, r3
 8005d86:	f000 fa1c 	bl	80061c2 <USBD_LL_Transmit>

  return USBD_OK;
}
 8005d8a:	2000      	movs	r0, #0
 8005d8c:	bd08      	pop	{r3, pc}

08005d8e <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8005d8e:	b508      	push	{r3, lr}
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8005d90:	2305      	movs	r3, #5
 8005d92:	f8c0 3294 	str.w	r3, [r0, #660]	@ 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8005d96:	2300      	movs	r3, #0
 8005d98:	461a      	mov	r2, r3
 8005d9a:	4619      	mov	r1, r3
 8005d9c:	f000 fa19 	bl	80061d2 <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 8005da0:	2000      	movs	r0, #0
 8005da2:	bd08      	pop	{r3, pc}

08005da4 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8005da4:	b508      	push	{r3, lr}
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8005da6:	2200      	movs	r2, #0
 8005da8:	490f      	ldr	r1, [pc, #60]	@ (8005de8 <MX_USB_DEVICE_Init+0x44>)
 8005daa:	4810      	ldr	r0, [pc, #64]	@ (8005dec <MX_USB_DEVICE_Init+0x48>)
 8005dac:	f7ff fb25 	bl	80053fa <USBD_Init>
 8005db0:	b970      	cbnz	r0, 8005dd0 <MX_USB_DEVICE_Init+0x2c>
  {
    Error_Handler();
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8005db2:	490f      	ldr	r1, [pc, #60]	@ (8005df0 <MX_USB_DEVICE_Init+0x4c>)
 8005db4:	480d      	ldr	r0, [pc, #52]	@ (8005dec <MX_USB_DEVICE_Init+0x48>)
 8005db6:	f7ff fb37 	bl	8005428 <USBD_RegisterClass>
 8005dba:	b960      	cbnz	r0, 8005dd6 <MX_USB_DEVICE_Init+0x32>
  {
    Error_Handler();
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8005dbc:	490d      	ldr	r1, [pc, #52]	@ (8005df4 <MX_USB_DEVICE_Init+0x50>)
 8005dbe:	480b      	ldr	r0, [pc, #44]	@ (8005dec <MX_USB_DEVICE_Init+0x48>)
 8005dc0:	f7ff fad5 	bl	800536e <USBD_CDC_RegisterInterface>
 8005dc4:	b950      	cbnz	r0, 8005ddc <MX_USB_DEVICE_Init+0x38>
  {
    Error_Handler();
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8005dc6:	4809      	ldr	r0, [pc, #36]	@ (8005dec <MX_USB_DEVICE_Init+0x48>)
 8005dc8:	f7ff fb35 	bl	8005436 <USBD_Start>
 8005dcc:	b948      	cbnz	r0, 8005de2 <MX_USB_DEVICE_Init+0x3e>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8005dce:	bd08      	pop	{r3, pc}
    Error_Handler();
 8005dd0:	f7fb fd56 	bl	8001880 <Error_Handler>
 8005dd4:	e7ed      	b.n	8005db2 <MX_USB_DEVICE_Init+0xe>
    Error_Handler();
 8005dd6:	f7fb fd53 	bl	8001880 <Error_Handler>
 8005dda:	e7ef      	b.n	8005dbc <MX_USB_DEVICE_Init+0x18>
    Error_Handler();
 8005ddc:	f7fb fd50 	bl	8001880 <Error_Handler>
 8005de0:	e7f1      	b.n	8005dc6 <MX_USB_DEVICE_Init+0x22>
    Error_Handler();
 8005de2:	f7fb fd4d 	bl	8001880 <Error_Handler>
}
 8005de6:	e7f2      	b.n	8005dce <MX_USB_DEVICE_Init+0x2a>
 8005de8:	20000160 	.word	0x20000160
 8005dec:	20000408 	.word	0x20000408
 8005df0:	200000d8 	.word	0x200000d8
 8005df4:	2000011c 	.word	0x2000011c

08005df8 <CDC_DeInit_FS>:
static int8_t CDC_DeInit_FS(void)
{
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
  /* USER CODE END 4 */
}
 8005df8:	2000      	movs	r0, #0
 8005dfa:	4770      	bx	lr

08005dfc <CDC_Control_FS>:
    break;
  }

  return (USBD_OK);
  /* USER CODE END 5 */
}
 8005dfc:	2000      	movs	r0, #0
 8005dfe:	4770      	bx	lr

08005e00 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8005e00:	b538      	push	{r3, r4, r5, lr}
 8005e02:	460c      	mov	r4, r1
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8005e04:	4d09      	ldr	r5, [pc, #36]	@ (8005e2c <CDC_Receive_FS+0x2c>)
 8005e06:	4601      	mov	r1, r0
 8005e08:	4628      	mov	r0, r5
 8005e0a:	f7ff fabf 	bl	800538c <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8005e0e:	4628      	mov	r0, r5
 8005e10:	f7ff fadb 	bl	80053ca <USBD_CDC_ReceivePacket>
  USB_CDC_RxHandler(UserRxBufferFS, *Len);
 8005e14:	4d06      	ldr	r5, [pc, #24]	@ (8005e30 <CDC_Receive_FS+0x30>)
 8005e16:	6821      	ldr	r1, [r4, #0]
 8005e18:	4628      	mov	r0, r5
 8005e1a:	f7fb fbc5 	bl	80015a8 <USB_CDC_RxHandler>
  memset(UserRxBufferFS, '\0', *Len);
 8005e1e:	6822      	ldr	r2, [r4, #0]
 8005e20:	2100      	movs	r1, #0
 8005e22:	4628      	mov	r0, r5
 8005e24:	f002 fc85 	bl	8008732 <memset>
  return (USBD_OK);
  /* USER CODE END 6 */
}
 8005e28:	2000      	movs	r0, #0
 8005e2a:	bd38      	pop	{r3, r4, r5, pc}
 8005e2c:	20000408 	.word	0x20000408
 8005e30:	200008cc 	.word	0x200008cc

08005e34 <CDC_Init_FS>:
{
 8005e34:	b510      	push	{r4, lr}
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8005e36:	4c06      	ldr	r4, [pc, #24]	@ (8005e50 <CDC_Init_FS+0x1c>)
 8005e38:	2200      	movs	r2, #0
 8005e3a:	4906      	ldr	r1, [pc, #24]	@ (8005e54 <CDC_Init_FS+0x20>)
 8005e3c:	4620      	mov	r0, r4
 8005e3e:	f7ff fa9d 	bl	800537c <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8005e42:	4905      	ldr	r1, [pc, #20]	@ (8005e58 <CDC_Init_FS+0x24>)
 8005e44:	4620      	mov	r0, r4
 8005e46:	f7ff faa1 	bl	800538c <USBD_CDC_SetRxBuffer>
}
 8005e4a:	2000      	movs	r0, #0
 8005e4c:	bd10      	pop	{r4, pc}
 8005e4e:	bf00      	nop
 8005e50:	20000408 	.word	0x20000408
 8005e54:	200006cc 	.word	0x200006cc
 8005e58:	200008cc 	.word	0x200008cc

08005e5c <CDC_Transmit_FS>:
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
  uint8_t result = USBD_OK;
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8005e5c:	4b09      	ldr	r3, [pc, #36]	@ (8005e84 <CDC_Transmit_FS+0x28>)
 8005e5e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
  if (hcdc->TxState != 0){
 8005e62:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8005e66:	b10b      	cbz	r3, 8005e6c <CDC_Transmit_FS+0x10>
    return USBD_BUSY;
 8005e68:	2001      	movs	r0, #1
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
  /* USER CODE END 7 */
  return result;
}
 8005e6a:	4770      	bx	lr
{
 8005e6c:	b510      	push	{r4, lr}
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8005e6e:	4c05      	ldr	r4, [pc, #20]	@ (8005e84 <CDC_Transmit_FS+0x28>)
 8005e70:	460a      	mov	r2, r1
 8005e72:	4601      	mov	r1, r0
 8005e74:	4620      	mov	r0, r4
 8005e76:	f7ff fa81 	bl	800537c <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8005e7a:	4620      	mov	r0, r4
 8005e7c:	f7ff fa8c 	bl	8005398 <USBD_CDC_TransmitPacket>
}
 8005e80:	bd10      	pop	{r4, pc}
 8005e82:	bf00      	nop
 8005e84:	20000408 	.word	0x20000408

08005e88 <USBD_FS_DeviceDescriptor>:
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8005e88:	2312      	movs	r3, #18
 8005e8a:	800b      	strh	r3, [r1, #0]
  return USBD_FS_DeviceDesc;
}
 8005e8c:	4800      	ldr	r0, [pc, #0]	@ (8005e90 <USBD_FS_DeviceDescriptor+0x8>)
 8005e8e:	4770      	bx	lr
 8005e90:	2000014c 	.word	0x2000014c

08005e94 <USBD_FS_LangIDStrDescriptor>:
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8005e94:	2304      	movs	r3, #4
 8005e96:	800b      	strh	r3, [r1, #0]
  return USBD_LangIDDesc;
}
 8005e98:	4800      	ldr	r0, [pc, #0]	@ (8005e9c <USBD_FS_LangIDStrDescriptor+0x8>)
 8005e9a:	4770      	bx	lr
 8005e9c:	20000148 	.word	0x20000148

08005ea0 <IntToUnicode>:
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
  uint8_t idx = 0;

  for (idx = 0; idx < len; idx++)
 8005ea0:	2300      	movs	r3, #0
 8005ea2:	4293      	cmp	r3, r2
 8005ea4:	d21e      	bcs.n	8005ee4 <IntToUnicode+0x44>
{
 8005ea6:	b500      	push	{lr}
 8005ea8:	e010      	b.n	8005ecc <IntToUnicode+0x2c>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8005eaa:	f10c 0c37 	add.w	ip, ip, #55	@ 0x37
 8005eae:	f801 c013 	strb.w	ip, [r1, r3, lsl #1]
    }

    value = value << 4;
 8005eb2:	0100      	lsls	r0, r0, #4

    pbuf[2 * idx + 1] = 0;
 8005eb4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8005eb8:	f10c 0c01 	add.w	ip, ip, #1
 8005ebc:	f04f 0e00 	mov.w	lr, #0
 8005ec0:	f801 e00c 	strb.w	lr, [r1, ip]
  for (idx = 0; idx < len; idx++)
 8005ec4:	3301      	adds	r3, #1
 8005ec6:	b2db      	uxtb	r3, r3
 8005ec8:	4293      	cmp	r3, r2
 8005eca:	d209      	bcs.n	8005ee0 <IntToUnicode+0x40>
    if (((value >> 28)) < 0xA)
 8005ecc:	ea4f 7c10 	mov.w	ip, r0, lsr #28
 8005ed0:	f1b0 4f20 	cmp.w	r0, #2684354560	@ 0xa0000000
 8005ed4:	d2e9      	bcs.n	8005eaa <IntToUnicode+0xa>
      pbuf[2 * idx] = (value >> 28) + '0';
 8005ed6:	f10c 0c30 	add.w	ip, ip, #48	@ 0x30
 8005eda:	f801 c013 	strb.w	ip, [r1, r3, lsl #1]
 8005ede:	e7e8      	b.n	8005eb2 <IntToUnicode+0x12>
  }
}
 8005ee0:	f85d fb04 	ldr.w	pc, [sp], #4
 8005ee4:	4770      	bx	lr
	...

08005ee8 <Get_SerialNum>:
{
 8005ee8:	b538      	push	{r3, r4, r5, lr}
  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8005eea:	4b0b      	ldr	r3, [pc, #44]	@ (8005f18 <Get_SerialNum+0x30>)
 8005eec:	f8d3 07e8 	ldr.w	r0, [r3, #2024]	@ 0x7e8
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8005ef0:	f8d3 47ec 	ldr.w	r4, [r3, #2028]	@ 0x7ec
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8005ef4:	f8d3 37f0 	ldr.w	r3, [r3, #2032]	@ 0x7f0
  if (deviceserial0 != 0)
 8005ef8:	18c0      	adds	r0, r0, r3
 8005efa:	d100      	bne.n	8005efe <Get_SerialNum+0x16>
}
 8005efc:	bd38      	pop	{r3, r4, r5, pc}
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8005efe:	4d07      	ldr	r5, [pc, #28]	@ (8005f1c <Get_SerialNum+0x34>)
 8005f00:	2208      	movs	r2, #8
 8005f02:	4629      	mov	r1, r5
 8005f04:	f7ff ffcc 	bl	8005ea0 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8005f08:	2204      	movs	r2, #4
 8005f0a:	f105 0110 	add.w	r1, r5, #16
 8005f0e:	4620      	mov	r0, r4
 8005f10:	f7ff ffc6 	bl	8005ea0 <IntToUnicode>
}
 8005f14:	e7f2      	b.n	8005efc <Get_SerialNum+0x14>
 8005f16:	bf00      	nop
 8005f18:	1ffff000 	.word	0x1ffff000
 8005f1c:	2000012e 	.word	0x2000012e

08005f20 <USBD_FS_SerialStrDescriptor>:
{
 8005f20:	b508      	push	{r3, lr}
  *length = USB_SIZ_STRING_SERIAL;
 8005f22:	231a      	movs	r3, #26
 8005f24:	800b      	strh	r3, [r1, #0]
  Get_SerialNum();
 8005f26:	f7ff ffdf 	bl	8005ee8 <Get_SerialNum>
}
 8005f2a:	4801      	ldr	r0, [pc, #4]	@ (8005f30 <USBD_FS_SerialStrDescriptor+0x10>)
 8005f2c:	bd08      	pop	{r3, pc}
 8005f2e:	bf00      	nop
 8005f30:	2000012c 	.word	0x2000012c

08005f34 <USBD_FS_ProductStrDescriptor>:
{
 8005f34:	b508      	push	{r3, lr}
 8005f36:	460a      	mov	r2, r1
  if(speed == 0)
 8005f38:	b928      	cbnz	r0, 8005f46 <USBD_FS_ProductStrDescriptor+0x12>
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8005f3a:	4905      	ldr	r1, [pc, #20]	@ (8005f50 <USBD_FS_ProductStrDescriptor+0x1c>)
 8005f3c:	4805      	ldr	r0, [pc, #20]	@ (8005f54 <USBD_FS_ProductStrDescriptor+0x20>)
 8005f3e:	f7ff fed2 	bl	8005ce6 <USBD_GetString>
}
 8005f42:	4803      	ldr	r0, [pc, #12]	@ (8005f50 <USBD_FS_ProductStrDescriptor+0x1c>)
 8005f44:	bd08      	pop	{r3, pc}
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8005f46:	4902      	ldr	r1, [pc, #8]	@ (8005f50 <USBD_FS_ProductStrDescriptor+0x1c>)
 8005f48:	4802      	ldr	r0, [pc, #8]	@ (8005f54 <USBD_FS_ProductStrDescriptor+0x20>)
 8005f4a:	f7ff fecc 	bl	8005ce6 <USBD_GetString>
 8005f4e:	e7f8      	b.n	8005f42 <USBD_FS_ProductStrDescriptor+0xe>
 8005f50:	20000acc 	.word	0x20000acc
 8005f54:	0800b498 	.word	0x0800b498

08005f58 <USBD_FS_ManufacturerStrDescriptor>:
{
 8005f58:	b510      	push	{r4, lr}
 8005f5a:	460a      	mov	r2, r1
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8005f5c:	4c03      	ldr	r4, [pc, #12]	@ (8005f6c <USBD_FS_ManufacturerStrDescriptor+0x14>)
 8005f5e:	4621      	mov	r1, r4
 8005f60:	4803      	ldr	r0, [pc, #12]	@ (8005f70 <USBD_FS_ManufacturerStrDescriptor+0x18>)
 8005f62:	f7ff fec0 	bl	8005ce6 <USBD_GetString>
}
 8005f66:	4620      	mov	r0, r4
 8005f68:	bd10      	pop	{r4, pc}
 8005f6a:	bf00      	nop
 8005f6c:	20000acc 	.word	0x20000acc
 8005f70:	0800b4b0 	.word	0x0800b4b0

08005f74 <USBD_FS_ConfigStrDescriptor>:
{
 8005f74:	b508      	push	{r3, lr}
 8005f76:	460a      	mov	r2, r1
  if(speed == USBD_SPEED_HIGH)
 8005f78:	b928      	cbnz	r0, 8005f86 <USBD_FS_ConfigStrDescriptor+0x12>
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8005f7a:	4905      	ldr	r1, [pc, #20]	@ (8005f90 <USBD_FS_ConfigStrDescriptor+0x1c>)
 8005f7c:	4805      	ldr	r0, [pc, #20]	@ (8005f94 <USBD_FS_ConfigStrDescriptor+0x20>)
 8005f7e:	f7ff feb2 	bl	8005ce6 <USBD_GetString>
}
 8005f82:	4803      	ldr	r0, [pc, #12]	@ (8005f90 <USBD_FS_ConfigStrDescriptor+0x1c>)
 8005f84:	bd08      	pop	{r3, pc}
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8005f86:	4902      	ldr	r1, [pc, #8]	@ (8005f90 <USBD_FS_ConfigStrDescriptor+0x1c>)
 8005f88:	4802      	ldr	r0, [pc, #8]	@ (8005f94 <USBD_FS_ConfigStrDescriptor+0x20>)
 8005f8a:	f7ff feac 	bl	8005ce6 <USBD_GetString>
 8005f8e:	e7f8      	b.n	8005f82 <USBD_FS_ConfigStrDescriptor+0xe>
 8005f90:	20000acc 	.word	0x20000acc
 8005f94:	0800b4c4 	.word	0x0800b4c4

08005f98 <USBD_FS_InterfaceStrDescriptor>:
{
 8005f98:	b508      	push	{r3, lr}
 8005f9a:	460a      	mov	r2, r1
  if(speed == 0)
 8005f9c:	b928      	cbnz	r0, 8005faa <USBD_FS_InterfaceStrDescriptor+0x12>
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8005f9e:	4905      	ldr	r1, [pc, #20]	@ (8005fb4 <USBD_FS_InterfaceStrDescriptor+0x1c>)
 8005fa0:	4805      	ldr	r0, [pc, #20]	@ (8005fb8 <USBD_FS_InterfaceStrDescriptor+0x20>)
 8005fa2:	f7ff fea0 	bl	8005ce6 <USBD_GetString>
}
 8005fa6:	4803      	ldr	r0, [pc, #12]	@ (8005fb4 <USBD_FS_InterfaceStrDescriptor+0x1c>)
 8005fa8:	bd08      	pop	{r3, pc}
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8005faa:	4902      	ldr	r1, [pc, #8]	@ (8005fb4 <USBD_FS_InterfaceStrDescriptor+0x1c>)
 8005fac:	4802      	ldr	r0, [pc, #8]	@ (8005fb8 <USBD_FS_InterfaceStrDescriptor+0x20>)
 8005fae:	f7ff fe9a 	bl	8005ce6 <USBD_GetString>
 8005fb2:	e7f8      	b.n	8005fa6 <USBD_FS_InterfaceStrDescriptor+0xe>
 8005fb4:	20000acc 	.word	0x20000acc
 8005fb8:	0800b4d0 	.word	0x0800b4d0

08005fbc <USBD_Get_USB_Status>:
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
  USBD_StatusTypeDef usb_status = USBD_OK;

  switch (hal_status)
 8005fbc:	2802      	cmp	r0, #2
 8005fbe:	d805      	bhi.n	8005fcc <USBD_Get_USB_Status+0x10>
 8005fc0:	e8df f000 	tbb	[pc, r0]
 8005fc4:	0405      	.short	0x0405
 8005fc6:	02          	.byte	0x02
 8005fc7:	00          	.byte	0x00
    break;
    case HAL_ERROR :
      usb_status = USBD_FAIL;
    break;
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8005fc8:	2001      	movs	r0, #1
    break;
 8005fca:	4770      	bx	lr
      usb_status = USBD_FAIL;
 8005fcc:	2002      	movs	r0, #2
    default :
      usb_status = USBD_FAIL;
    break;
  }
  return usb_status;
}
 8005fce:	4770      	bx	lr

08005fd0 <HAL_PCD_MspInit>:
  if(pcdHandle->Instance==USB)
 8005fd0:	6802      	ldr	r2, [r0, #0]
 8005fd2:	4b0e      	ldr	r3, [pc, #56]	@ (800600c <HAL_PCD_MspInit+0x3c>)
 8005fd4:	429a      	cmp	r2, r3
 8005fd6:	d000      	beq.n	8005fda <HAL_PCD_MspInit+0xa>
 8005fd8:	4770      	bx	lr
{
 8005fda:	b500      	push	{lr}
 8005fdc:	b083      	sub	sp, #12
    __HAL_RCC_USB_CLK_ENABLE();
 8005fde:	f503 33da 	add.w	r3, r3, #111616	@ 0x1b400
 8005fe2:	69da      	ldr	r2, [r3, #28]
 8005fe4:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 8005fe8:	61da      	str	r2, [r3, #28]
 8005fea:	69db      	ldr	r3, [r3, #28]
 8005fec:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005ff0:	9301      	str	r3, [sp, #4]
 8005ff2:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 8005ff4:	2200      	movs	r2, #0
 8005ff6:	4611      	mov	r1, r2
 8005ff8:	2014      	movs	r0, #20
 8005ffa:	f7fc f989 	bl	8002310 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 8005ffe:	2014      	movs	r0, #20
 8006000:	f7fc f996 	bl	8002330 <HAL_NVIC_EnableIRQ>
}
 8006004:	b003      	add	sp, #12
 8006006:	f85d fb04 	ldr.w	pc, [sp], #4
 800600a:	bf00      	nop
 800600c:	40005c00 	.word	0x40005c00

08006010 <HAL_PCD_SetupStageCallback>:
{
 8006010:	b508      	push	{r3, lr}
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8006012:	f500 7126 	add.w	r1, r0, #664	@ 0x298
 8006016:	f8d0 02d4 	ldr.w	r0, [r0, #724]	@ 0x2d4
 800601a:	f7ff fa24 	bl	8005466 <USBD_LL_SetupStage>
}
 800601e:	bd08      	pop	{r3, pc}

08006020 <HAL_PCD_DataOutStageCallback>:
{
 8006020:	b508      	push	{r3, lr}
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8006022:	eb01 0381 	add.w	r3, r1, r1, lsl #2
 8006026:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
 800602a:	f8d3 2164 	ldr.w	r2, [r3, #356]	@ 0x164
 800602e:	f8d0 02d4 	ldr.w	r0, [r0, #724]	@ 0x2d4
 8006032:	f7ff fa45 	bl	80054c0 <USBD_LL_DataOutStage>
}
 8006036:	bd08      	pop	{r3, pc}

08006038 <HAL_PCD_DataInStageCallback>:
{
 8006038:	b508      	push	{r3, lr}
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800603a:	eb01 0381 	add.w	r3, r1, r1, lsl #2
 800603e:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
 8006042:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006044:	f8d0 02d4 	ldr.w	r0, [r0, #724]	@ 0x2d4
 8006048:	f7ff fa80 	bl	800554c <USBD_LL_DataInStage>
}
 800604c:	bd08      	pop	{r3, pc}

0800604e <HAL_PCD_SOFCallback>:
{
 800604e:	b508      	push	{r3, lr}
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8006050:	f8d0 02d4 	ldr.w	r0, [r0, #724]	@ 0x2d4
 8006054:	f7ff fb21 	bl	800569a <USBD_LL_SOF>
}
 8006058:	bd08      	pop	{r3, pc}

0800605a <HAL_PCD_ResetCallback>:
{
 800605a:	b510      	push	{r4, lr}
 800605c:	4604      	mov	r4, r0
  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800605e:	7983      	ldrb	r3, [r0, #6]
 8006060:	2b02      	cmp	r3, #2
 8006062:	d109      	bne.n	8006078 <HAL_PCD_ResetCallback+0x1e>
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8006064:	2101      	movs	r1, #1
 8006066:	f8d4 02d4 	ldr.w	r0, [r4, #724]	@ 0x2d4
 800606a:	f7ff faff 	bl	800566c <USBD_LL_SetSpeed>
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800606e:	f8d4 02d4 	ldr.w	r0, [r4, #724]	@ 0x2d4
 8006072:	f7ff fad3 	bl	800561c <USBD_LL_Reset>
}
 8006076:	bd10      	pop	{r4, pc}
    Error_Handler();
 8006078:	f7fb fc02 	bl	8001880 <Error_Handler>
 800607c:	e7f2      	b.n	8006064 <HAL_PCD_ResetCallback+0xa>
	...

08006080 <HAL_PCD_SuspendCallback>:
{
 8006080:	b510      	push	{r4, lr}
 8006082:	4604      	mov	r4, r0
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8006084:	f8d0 02d4 	ldr.w	r0, [r0, #724]	@ 0x2d4
 8006088:	f7ff faf3 	bl	8005672 <USBD_LL_Suspend>
  if (hpcd->Init.low_power_enable)
 800608c:	7aa3      	ldrb	r3, [r4, #10]
 800608e:	b123      	cbz	r3, 800609a <HAL_PCD_SuspendCallback+0x1a>
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8006090:	4a02      	ldr	r2, [pc, #8]	@ (800609c <HAL_PCD_SuspendCallback+0x1c>)
 8006092:	6913      	ldr	r3, [r2, #16]
 8006094:	f043 0306 	orr.w	r3, r3, #6
 8006098:	6113      	str	r3, [r2, #16]
}
 800609a:	bd10      	pop	{r4, pc}
 800609c:	e000ed00 	.word	0xe000ed00

080060a0 <HAL_PCD_ResumeCallback>:
{
 80060a0:	b508      	push	{r3, lr}
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80060a2:	f8d0 02d4 	ldr.w	r0, [r0, #724]	@ 0x2d4
 80060a6:	f7ff faed 	bl	8005684 <USBD_LL_Resume>
}
 80060aa:	bd08      	pop	{r3, pc}

080060ac <USBD_LL_Init>:
{
 80060ac:	b510      	push	{r4, lr}
 80060ae:	4604      	mov	r4, r0
  hpcd_USB_FS.pData = pdev;
 80060b0:	481d      	ldr	r0, [pc, #116]	@ (8006128 <USBD_LL_Init+0x7c>)
 80060b2:	f8c0 42d4 	str.w	r4, [r0, #724]	@ 0x2d4
  pdev->pData = &hpcd_USB_FS;
 80060b6:	f8c4 02c0 	str.w	r0, [r4, #704]	@ 0x2c0
  hpcd_USB_FS.Instance = USB;
 80060ba:	4b1c      	ldr	r3, [pc, #112]	@ (800612c <USBD_LL_Init+0x80>)
 80060bc:	6003      	str	r3, [r0, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 80060be:	2308      	movs	r3, #8
 80060c0:	7103      	strb	r3, [r0, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 80060c2:	2302      	movs	r3, #2
 80060c4:	7183      	strb	r3, [r0, #6]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 80060c6:	2300      	movs	r3, #0
 80060c8:	7283      	strb	r3, [r0, #10]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 80060ca:	72c3      	strb	r3, [r0, #11]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 80060cc:	7303      	strb	r3, [r0, #12]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 80060ce:	f7fc faed 	bl	80026ac <HAL_PCD_Init>
 80060d2:	bb30      	cbnz	r0, 8006122 <USBD_LL_Init+0x76>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 80060d4:	2318      	movs	r3, #24
 80060d6:	2200      	movs	r2, #0
 80060d8:	4611      	mov	r1, r2
 80060da:	f8d4 02c0 	ldr.w	r0, [r4, #704]	@ 0x2c0
 80060de:	f7fd fa5c 	bl	800359a <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 80060e2:	2358      	movs	r3, #88	@ 0x58
 80060e4:	2200      	movs	r2, #0
 80060e6:	2180      	movs	r1, #128	@ 0x80
 80060e8:	f8d4 02c0 	ldr.w	r0, [r4, #704]	@ 0x2c0
 80060ec:	f7fd fa55 	bl	800359a <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 80060f0:	23c0      	movs	r3, #192	@ 0xc0
 80060f2:	2200      	movs	r2, #0
 80060f4:	2181      	movs	r1, #129	@ 0x81
 80060f6:	f8d4 02c0 	ldr.w	r0, [r4, #704]	@ 0x2c0
 80060fa:	f7fd fa4e 	bl	800359a <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 80060fe:	f44f 7388 	mov.w	r3, #272	@ 0x110
 8006102:	2200      	movs	r2, #0
 8006104:	2101      	movs	r1, #1
 8006106:	f8d4 02c0 	ldr.w	r0, [r4, #704]	@ 0x2c0
 800610a:	f7fd fa46 	bl	800359a <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800610e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8006112:	2200      	movs	r2, #0
 8006114:	2182      	movs	r1, #130	@ 0x82
 8006116:	f8d4 02c0 	ldr.w	r0, [r4, #704]	@ 0x2c0
 800611a:	f7fd fa3e 	bl	800359a <HAL_PCDEx_PMAConfig>
}
 800611e:	2000      	movs	r0, #0
 8006120:	bd10      	pop	{r4, pc}
    Error_Handler( );
 8006122:	f7fb fbad 	bl	8001880 <Error_Handler>
 8006126:	e7d5      	b.n	80060d4 <USBD_LL_Init+0x28>
 8006128:	20000eec 	.word	0x20000eec
 800612c:	40005c00 	.word	0x40005c00

08006130 <USBD_LL_Start>:
{
 8006130:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_Start(pdev->pData);
 8006132:	f8d0 02c0 	ldr.w	r0, [r0, #704]	@ 0x2c0
 8006136:	f7fc fb2d 	bl	8002794 <HAL_PCD_Start>
  usb_status =  USBD_Get_USB_Status(hal_status);
 800613a:	f7ff ff3f 	bl	8005fbc <USBD_Get_USB_Status>
}
 800613e:	bd08      	pop	{r3, pc}

08006140 <USBD_LL_OpenEP>:
{
 8006140:	b508      	push	{r3, lr}
 8006142:	4694      	mov	ip, r2
 8006144:	461a      	mov	r2, r3
  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8006146:	4663      	mov	r3, ip
 8006148:	f8d0 02c0 	ldr.w	r0, [r0, #704]	@ 0x2c0
 800614c:	f7fd f8e2 	bl	8003314 <HAL_PCD_EP_Open>
  usb_status =  USBD_Get_USB_Status(hal_status);
 8006150:	f7ff ff34 	bl	8005fbc <USBD_Get_USB_Status>
}
 8006154:	bd08      	pop	{r3, pc}

08006156 <USBD_LL_CloseEP>:
{
 8006156:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8006158:	f8d0 02c0 	ldr.w	r0, [r0, #704]	@ 0x2c0
 800615c:	f7fd f91c 	bl	8003398 <HAL_PCD_EP_Close>
  usb_status =  USBD_Get_USB_Status(hal_status);
 8006160:	f7ff ff2c 	bl	8005fbc <USBD_Get_USB_Status>
}
 8006164:	bd08      	pop	{r3, pc}

08006166 <USBD_LL_StallEP>:
{
 8006166:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8006168:	f8d0 02c0 	ldr.w	r0, [r0, #704]	@ 0x2c0
 800616c:	f7fd f996 	bl	800349c <HAL_PCD_EP_SetStall>
  usb_status =  USBD_Get_USB_Status(hal_status);
 8006170:	f7ff ff24 	bl	8005fbc <USBD_Get_USB_Status>
}
 8006174:	bd08      	pop	{r3, pc}

08006176 <USBD_LL_ClearStallEP>:
{
 8006176:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8006178:	f8d0 02c0 	ldr.w	r0, [r0, #704]	@ 0x2c0
 800617c:	f7fd f9ce 	bl	800351c <HAL_PCD_EP_ClrStall>
  usb_status =  USBD_Get_USB_Status(hal_status);
 8006180:	f7ff ff1c 	bl	8005fbc <USBD_Get_USB_Status>
}
 8006184:	bd08      	pop	{r3, pc}

08006186 <USBD_LL_IsStallEP>:
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8006186:	f8d0 32c0 	ldr.w	r3, [r0, #704]	@ 0x2c0
  if((ep_addr & 0x80) == 0x80)
 800618a:	f011 0f80 	tst.w	r1, #128	@ 0x80
 800618e:	d108      	bne.n	80061a2 <USBD_LL_IsStallEP+0x1c>
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8006190:	f001 017f 	and.w	r1, r1, #127	@ 0x7f
 8006194:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 8006198:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 800619c:	f893 0152 	ldrb.w	r0, [r3, #338]	@ 0x152
}
 80061a0:	4770      	bx	lr
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 80061a2:	f001 017f 	and.w	r1, r1, #127	@ 0x7f
 80061a6:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 80061aa:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 80061ae:	7c98      	ldrb	r0, [r3, #18]
 80061b0:	4770      	bx	lr

080061b2 <USBD_LL_SetUSBAddress>:
{
 80061b2:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80061b4:	f8d0 02c0 	ldr.w	r0, [r0, #704]	@ 0x2c0
 80061b8:	f7fc ffc1 	bl	800313e <HAL_PCD_SetAddress>
  usb_status =  USBD_Get_USB_Status(hal_status);
 80061bc:	f7ff fefe 	bl	8005fbc <USBD_Get_USB_Status>
}
 80061c0:	bd08      	pop	{r3, pc}

080061c2 <USBD_LL_Transmit>:
{
 80061c2:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80061c4:	f8d0 02c0 	ldr.w	r0, [r0, #704]	@ 0x2c0
 80061c8:	f7fd f942 	bl	8003450 <HAL_PCD_EP_Transmit>
  usb_status =  USBD_Get_USB_Status(hal_status);
 80061cc:	f7ff fef6 	bl	8005fbc <USBD_Get_USB_Status>
}
 80061d0:	bd08      	pop	{r3, pc}

080061d2 <USBD_LL_PrepareReceive>:
{
 80061d2:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80061d4:	f8d0 02c0 	ldr.w	r0, [r0, #704]	@ 0x2c0
 80061d8:	f7fd f914 	bl	8003404 <HAL_PCD_EP_Receive>
  usb_status =  USBD_Get_USB_Status(hal_status);
 80061dc:	f7ff feee 	bl	8005fbc <USBD_Get_USB_Status>
}
 80061e0:	bd08      	pop	{r3, pc}

080061e2 <USBD_LL_GetRxDataSize>:
{
 80061e2:	b508      	push	{r3, lr}
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 80061e4:	f8d0 02c0 	ldr.w	r0, [r0, #704]	@ 0x2c0
 80061e8:	f7fd f929 	bl	800343e <HAL_PCD_EP_GetRxCount>
}
 80061ec:	bd08      	pop	{r3, pc}
	...

080061f0 <USBD_static_malloc>:
}
 80061f0:	4800      	ldr	r0, [pc, #0]	@ (80061f4 <USBD_static_malloc+0x4>)
 80061f2:	4770      	bx	lr
 80061f4:	20000ccc 	.word	0x20000ccc

080061f8 <USBD_static_free>:
}
 80061f8:	4770      	bx	lr

080061fa <HAL_PCDEx_SetConnectionState>:
}
 80061fa:	4770      	bx	lr

080061fc <pow>:
 80061fc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006200:	4614      	mov	r4, r2
 8006202:	461d      	mov	r5, r3
 8006204:	4680      	mov	r8, r0
 8006206:	4689      	mov	r9, r1
 8006208:	f000 f866 	bl	80062d8 <__ieee754_pow>
 800620c:	4622      	mov	r2, r4
 800620e:	4606      	mov	r6, r0
 8006210:	460f      	mov	r7, r1
 8006212:	462b      	mov	r3, r5
 8006214:	4620      	mov	r0, r4
 8006216:	4629      	mov	r1, r5
 8006218:	f7fa fcac 	bl	8000b74 <__aeabi_dcmpun>
 800621c:	bbc8      	cbnz	r0, 8006292 <pow+0x96>
 800621e:	2200      	movs	r2, #0
 8006220:	2300      	movs	r3, #0
 8006222:	4640      	mov	r0, r8
 8006224:	4649      	mov	r1, r9
 8006226:	f7fa fc73 	bl	8000b10 <__aeabi_dcmpeq>
 800622a:	b1b8      	cbz	r0, 800625c <pow+0x60>
 800622c:	2200      	movs	r2, #0
 800622e:	2300      	movs	r3, #0
 8006230:	4620      	mov	r0, r4
 8006232:	4629      	mov	r1, r5
 8006234:	f7fa fc6c 	bl	8000b10 <__aeabi_dcmpeq>
 8006238:	2800      	cmp	r0, #0
 800623a:	d141      	bne.n	80062c0 <pow+0xc4>
 800623c:	4620      	mov	r0, r4
 800623e:	4629      	mov	r1, r5
 8006240:	f000 f844 	bl	80062cc <finite>
 8006244:	b328      	cbz	r0, 8006292 <pow+0x96>
 8006246:	2200      	movs	r2, #0
 8006248:	2300      	movs	r3, #0
 800624a:	4620      	mov	r0, r4
 800624c:	4629      	mov	r1, r5
 800624e:	f7fa fc69 	bl	8000b24 <__aeabi_dcmplt>
 8006252:	b1f0      	cbz	r0, 8006292 <pow+0x96>
 8006254:	f002 fad2 	bl	80087fc <__errno>
 8006258:	2322      	movs	r3, #34	@ 0x22
 800625a:	e019      	b.n	8006290 <pow+0x94>
 800625c:	4630      	mov	r0, r6
 800625e:	4639      	mov	r1, r7
 8006260:	f000 f834 	bl	80062cc <finite>
 8006264:	b9c8      	cbnz	r0, 800629a <pow+0x9e>
 8006266:	4640      	mov	r0, r8
 8006268:	4649      	mov	r1, r9
 800626a:	f000 f82f 	bl	80062cc <finite>
 800626e:	b1a0      	cbz	r0, 800629a <pow+0x9e>
 8006270:	4620      	mov	r0, r4
 8006272:	4629      	mov	r1, r5
 8006274:	f000 f82a 	bl	80062cc <finite>
 8006278:	b178      	cbz	r0, 800629a <pow+0x9e>
 800627a:	4632      	mov	r2, r6
 800627c:	463b      	mov	r3, r7
 800627e:	4630      	mov	r0, r6
 8006280:	4639      	mov	r1, r7
 8006282:	f7fa fc77 	bl	8000b74 <__aeabi_dcmpun>
 8006286:	2800      	cmp	r0, #0
 8006288:	d0e4      	beq.n	8006254 <pow+0x58>
 800628a:	f002 fab7 	bl	80087fc <__errno>
 800628e:	2321      	movs	r3, #33	@ 0x21
 8006290:	6003      	str	r3, [r0, #0]
 8006292:	4630      	mov	r0, r6
 8006294:	4639      	mov	r1, r7
 8006296:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800629a:	2200      	movs	r2, #0
 800629c:	2300      	movs	r3, #0
 800629e:	4630      	mov	r0, r6
 80062a0:	4639      	mov	r1, r7
 80062a2:	f7fa fc35 	bl	8000b10 <__aeabi_dcmpeq>
 80062a6:	2800      	cmp	r0, #0
 80062a8:	d0f3      	beq.n	8006292 <pow+0x96>
 80062aa:	4640      	mov	r0, r8
 80062ac:	4649      	mov	r1, r9
 80062ae:	f000 f80d 	bl	80062cc <finite>
 80062b2:	2800      	cmp	r0, #0
 80062b4:	d0ed      	beq.n	8006292 <pow+0x96>
 80062b6:	4620      	mov	r0, r4
 80062b8:	4629      	mov	r1, r5
 80062ba:	f000 f807 	bl	80062cc <finite>
 80062be:	e7c8      	b.n	8006252 <pow+0x56>
 80062c0:	2600      	movs	r6, #0
 80062c2:	4f01      	ldr	r7, [pc, #4]	@ (80062c8 <pow+0xcc>)
 80062c4:	e7e5      	b.n	8006292 <pow+0x96>
 80062c6:	bf00      	nop
 80062c8:	3ff00000 	.word	0x3ff00000

080062cc <finite>:
 80062cc:	f041 4000 	orr.w	r0, r1, #2147483648	@ 0x80000000
 80062d0:	f500 1080 	add.w	r0, r0, #1048576	@ 0x100000
 80062d4:	0fc0      	lsrs	r0, r0, #31
 80062d6:	4770      	bx	lr

080062d8 <__ieee754_pow>:
 80062d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80062dc:	b091      	sub	sp, #68	@ 0x44
 80062de:	e9cd 2300 	strd	r2, r3, [sp]
 80062e2:	468b      	mov	fp, r1
 80062e4:	e9dd 1800 	ldrd	r1, r8, [sp]
 80062e8:	f028 4700 	bic.w	r7, r8, #2147483648	@ 0x80000000
 80062ec:	4682      	mov	sl, r0
 80062ee:	ea57 0001 	orrs.w	r0, r7, r1
 80062f2:	d112      	bne.n	800631a <__ieee754_pow+0x42>
 80062f4:	4653      	mov	r3, sl
 80062f6:	f48b 2200 	eor.w	r2, fp, #524288	@ 0x80000
 80062fa:	18db      	adds	r3, r3, r3
 80062fc:	4152      	adcs	r2, r2
 80062fe:	4298      	cmp	r0, r3
 8006300:	4b91      	ldr	r3, [pc, #580]	@ (8006548 <__ieee754_pow+0x270>)
 8006302:	4193      	sbcs	r3, r2
 8006304:	f080 84ce 	bcs.w	8006ca4 <__ieee754_pow+0x9cc>
 8006308:	e9dd 2300 	ldrd	r2, r3, [sp]
 800630c:	4650      	mov	r0, sl
 800630e:	4659      	mov	r1, fp
 8006310:	f7f9 ffe0 	bl	80002d4 <__adddf3>
 8006314:	b011      	add	sp, #68	@ 0x44
 8006316:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800631a:	4b8c      	ldr	r3, [pc, #560]	@ (800654c <__ieee754_pow+0x274>)
 800631c:	f02b 4600 	bic.w	r6, fp, #2147483648	@ 0x80000000
 8006320:	429e      	cmp	r6, r3
 8006322:	465d      	mov	r5, fp
 8006324:	46d1      	mov	r9, sl
 8006326:	d807      	bhi.n	8006338 <__ieee754_pow+0x60>
 8006328:	d102      	bne.n	8006330 <__ieee754_pow+0x58>
 800632a:	f1ba 0f00 	cmp.w	sl, #0
 800632e:	d1eb      	bne.n	8006308 <__ieee754_pow+0x30>
 8006330:	429f      	cmp	r7, r3
 8006332:	d801      	bhi.n	8006338 <__ieee754_pow+0x60>
 8006334:	d10f      	bne.n	8006356 <__ieee754_pow+0x7e>
 8006336:	b171      	cbz	r1, 8006356 <__ieee754_pow+0x7e>
 8006338:	f105 4540 	add.w	r5, r5, #3221225472	@ 0xc0000000
 800633c:	f505 1580 	add.w	r5, r5, #1048576	@ 0x100000
 8006340:	ea55 0509 	orrs.w	r5, r5, r9
 8006344:	d1e0      	bne.n	8006308 <__ieee754_pow+0x30>
 8006346:	e9dd 3200 	ldrd	r3, r2, [sp]
 800634a:	18db      	adds	r3, r3, r3
 800634c:	f482 2200 	eor.w	r2, r2, #524288	@ 0x80000
 8006350:	4152      	adcs	r2, r2
 8006352:	429d      	cmp	r5, r3
 8006354:	e7d4      	b.n	8006300 <__ieee754_pow+0x28>
 8006356:	2d00      	cmp	r5, #0
 8006358:	4633      	mov	r3, r6
 800635a:	da39      	bge.n	80063d0 <__ieee754_pow+0xf8>
 800635c:	4a7c      	ldr	r2, [pc, #496]	@ (8006550 <__ieee754_pow+0x278>)
 800635e:	4297      	cmp	r7, r2
 8006360:	d84e      	bhi.n	8006400 <__ieee754_pow+0x128>
 8006362:	f1a2 7254 	sub.w	r2, r2, #55574528	@ 0x3500000
 8006366:	4297      	cmp	r7, r2
 8006368:	f240 84ab 	bls.w	8006cc2 <__ieee754_pow+0x9ea>
 800636c:	153a      	asrs	r2, r7, #20
 800636e:	f2a2 32ff 	subw	r2, r2, #1023	@ 0x3ff
 8006372:	2a14      	cmp	r2, #20
 8006374:	dd0f      	ble.n	8006396 <__ieee754_pow+0xbe>
 8006376:	f1c2 0234 	rsb	r2, r2, #52	@ 0x34
 800637a:	fa21 f402 	lsr.w	r4, r1, r2
 800637e:	fa04 f202 	lsl.w	r2, r4, r2
 8006382:	428a      	cmp	r2, r1
 8006384:	f040 849d 	bne.w	8006cc2 <__ieee754_pow+0x9ea>
 8006388:	f004 0401 	and.w	r4, r4, #1
 800638c:	f1c4 0402 	rsb	r4, r4, #2
 8006390:	2900      	cmp	r1, #0
 8006392:	d15a      	bne.n	800644a <__ieee754_pow+0x172>
 8006394:	e00e      	b.n	80063b4 <__ieee754_pow+0xdc>
 8006396:	2900      	cmp	r1, #0
 8006398:	d156      	bne.n	8006448 <__ieee754_pow+0x170>
 800639a:	f1c2 0214 	rsb	r2, r2, #20
 800639e:	fa47 f402 	asr.w	r4, r7, r2
 80063a2:	fa04 f202 	lsl.w	r2, r4, r2
 80063a6:	42ba      	cmp	r2, r7
 80063a8:	f040 8488 	bne.w	8006cbc <__ieee754_pow+0x9e4>
 80063ac:	f004 0401 	and.w	r4, r4, #1
 80063b0:	f1c4 0402 	rsb	r4, r4, #2
 80063b4:	4a67      	ldr	r2, [pc, #412]	@ (8006554 <__ieee754_pow+0x27c>)
 80063b6:	4297      	cmp	r7, r2
 80063b8:	d130      	bne.n	800641c <__ieee754_pow+0x144>
 80063ba:	f1b8 0f00 	cmp.w	r8, #0
 80063be:	f280 8479 	bge.w	8006cb4 <__ieee754_pow+0x9dc>
 80063c2:	4652      	mov	r2, sl
 80063c4:	465b      	mov	r3, fp
 80063c6:	2000      	movs	r0, #0
 80063c8:	4962      	ldr	r1, [pc, #392]	@ (8006554 <__ieee754_pow+0x27c>)
 80063ca:	f7fa fa63 	bl	8000894 <__aeabi_ddiv>
 80063ce:	e7a1      	b.n	8006314 <__ieee754_pow+0x3c>
 80063d0:	2400      	movs	r4, #0
 80063d2:	2900      	cmp	r1, #0
 80063d4:	d139      	bne.n	800644a <__ieee754_pow+0x172>
 80063d6:	4a5d      	ldr	r2, [pc, #372]	@ (800654c <__ieee754_pow+0x274>)
 80063d8:	4297      	cmp	r7, r2
 80063da:	d1eb      	bne.n	80063b4 <__ieee754_pow+0xdc>
 80063dc:	f106 4340 	add.w	r3, r6, #3221225472	@ 0xc0000000
 80063e0:	f503 1380 	add.w	r3, r3, #1048576	@ 0x100000
 80063e4:	ea53 0309 	orrs.w	r3, r3, r9
 80063e8:	f000 845c 	beq.w	8006ca4 <__ieee754_pow+0x9cc>
 80063ec:	4b5a      	ldr	r3, [pc, #360]	@ (8006558 <__ieee754_pow+0x280>)
 80063ee:	429e      	cmp	r6, r3
 80063f0:	d908      	bls.n	8006404 <__ieee754_pow+0x12c>
 80063f2:	f1b8 0f00 	cmp.w	r8, #0
 80063f6:	f2c0 8459 	blt.w	8006cac <__ieee754_pow+0x9d4>
 80063fa:	e9dd 0100 	ldrd	r0, r1, [sp]
 80063fe:	e789      	b.n	8006314 <__ieee754_pow+0x3c>
 8006400:	2402      	movs	r4, #2
 8006402:	e7e6      	b.n	80063d2 <__ieee754_pow+0xfa>
 8006404:	f1b8 0f00 	cmp.w	r8, #0
 8006408:	f04f 0000 	mov.w	r0, #0
 800640c:	f04f 0100 	mov.w	r1, #0
 8006410:	da80      	bge.n	8006314 <__ieee754_pow+0x3c>
 8006412:	e9dd 0300 	ldrd	r0, r3, [sp]
 8006416:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 800641a:	e77b      	b.n	8006314 <__ieee754_pow+0x3c>
 800641c:	f1b8 4f80 	cmp.w	r8, #1073741824	@ 0x40000000
 8006420:	d106      	bne.n	8006430 <__ieee754_pow+0x158>
 8006422:	4652      	mov	r2, sl
 8006424:	465b      	mov	r3, fp
 8006426:	4650      	mov	r0, sl
 8006428:	4659      	mov	r1, fp
 800642a:	f7fa f909 	bl	8000640 <__aeabi_dmul>
 800642e:	e771      	b.n	8006314 <__ieee754_pow+0x3c>
 8006430:	4a4a      	ldr	r2, [pc, #296]	@ (800655c <__ieee754_pow+0x284>)
 8006432:	4590      	cmp	r8, r2
 8006434:	d109      	bne.n	800644a <__ieee754_pow+0x172>
 8006436:	2d00      	cmp	r5, #0
 8006438:	db07      	blt.n	800644a <__ieee754_pow+0x172>
 800643a:	4650      	mov	r0, sl
 800643c:	4659      	mov	r1, fp
 800643e:	b011      	add	sp, #68	@ 0x44
 8006440:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006444:	f000 bd12 	b.w	8006e6c <__ieee754_sqrt>
 8006448:	2400      	movs	r4, #0
 800644a:	4650      	mov	r0, sl
 800644c:	4659      	mov	r1, fp
 800644e:	9302      	str	r3, [sp, #8]
 8006450:	f000 fc6a 	bl	8006d28 <fabs>
 8006454:	9b02      	ldr	r3, [sp, #8]
 8006456:	f1b9 0f00 	cmp.w	r9, #0
 800645a:	d127      	bne.n	80064ac <__ieee754_pow+0x1d4>
 800645c:	4a3d      	ldr	r2, [pc, #244]	@ (8006554 <__ieee754_pow+0x27c>)
 800645e:	f025 4c40 	bic.w	ip, r5, #3221225472	@ 0xc0000000
 8006462:	4594      	cmp	ip, r2
 8006464:	d000      	beq.n	8006468 <__ieee754_pow+0x190>
 8006466:	bb0e      	cbnz	r6, 80064ac <__ieee754_pow+0x1d4>
 8006468:	f1b8 0f00 	cmp.w	r8, #0
 800646c:	da05      	bge.n	800647a <__ieee754_pow+0x1a2>
 800646e:	4602      	mov	r2, r0
 8006470:	460b      	mov	r3, r1
 8006472:	2000      	movs	r0, #0
 8006474:	4937      	ldr	r1, [pc, #220]	@ (8006554 <__ieee754_pow+0x27c>)
 8006476:	f7fa fa0d 	bl	8000894 <__aeabi_ddiv>
 800647a:	2d00      	cmp	r5, #0
 800647c:	f6bf af4a 	bge.w	8006314 <__ieee754_pow+0x3c>
 8006480:	f106 4640 	add.w	r6, r6, #3221225472	@ 0xc0000000
 8006484:	f506 1680 	add.w	r6, r6, #1048576	@ 0x100000
 8006488:	4326      	orrs	r6, r4
 800648a:	d108      	bne.n	800649e <__ieee754_pow+0x1c6>
 800648c:	4602      	mov	r2, r0
 800648e:	460b      	mov	r3, r1
 8006490:	4610      	mov	r0, r2
 8006492:	4619      	mov	r1, r3
 8006494:	f7f9 ff1c 	bl	80002d0 <__aeabi_dsub>
 8006498:	4602      	mov	r2, r0
 800649a:	460b      	mov	r3, r1
 800649c:	e795      	b.n	80063ca <__ieee754_pow+0xf2>
 800649e:	2c01      	cmp	r4, #1
 80064a0:	f47f af38 	bne.w	8006314 <__ieee754_pow+0x3c>
 80064a4:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80064a8:	4619      	mov	r1, r3
 80064aa:	e733      	b.n	8006314 <__ieee754_pow+0x3c>
 80064ac:	0fea      	lsrs	r2, r5, #31
 80064ae:	3a01      	subs	r2, #1
 80064b0:	ea52 0c04 	orrs.w	ip, r2, r4
 80064b4:	d102      	bne.n	80064bc <__ieee754_pow+0x1e4>
 80064b6:	4652      	mov	r2, sl
 80064b8:	465b      	mov	r3, fp
 80064ba:	e7e9      	b.n	8006490 <__ieee754_pow+0x1b8>
 80064bc:	f04f 0900 	mov.w	r9, #0
 80064c0:	3c01      	subs	r4, #1
 80064c2:	4314      	orrs	r4, r2
 80064c4:	bf14      	ite	ne
 80064c6:	f8df a08c 	ldrne.w	sl, [pc, #140]	@ 8006554 <__ieee754_pow+0x27c>
 80064ca:	f8df a094 	ldreq.w	sl, [pc, #148]	@ 8006560 <__ieee754_pow+0x288>
 80064ce:	f1b7 4f84 	cmp.w	r7, #1107296256	@ 0x42000000
 80064d2:	e9cd 9a02 	strd	r9, sl, [sp, #8]
 80064d6:	f240 8107 	bls.w	80066e8 <__ieee754_pow+0x410>
 80064da:	4b22      	ldr	r3, [pc, #136]	@ (8006564 <__ieee754_pow+0x28c>)
 80064dc:	429f      	cmp	r7, r3
 80064de:	4b1e      	ldr	r3, [pc, #120]	@ (8006558 <__ieee754_pow+0x280>)
 80064e0:	d913      	bls.n	800650a <__ieee754_pow+0x232>
 80064e2:	429e      	cmp	r6, r3
 80064e4:	d808      	bhi.n	80064f8 <__ieee754_pow+0x220>
 80064e6:	f1b8 0f00 	cmp.w	r8, #0
 80064ea:	da08      	bge.n	80064fe <__ieee754_pow+0x226>
 80064ec:	2000      	movs	r0, #0
 80064ee:	b011      	add	sp, #68	@ 0x44
 80064f0:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80064f4:	f000 bcb4 	b.w	8006e60 <__math_oflow>
 80064f8:	f1b8 0f00 	cmp.w	r8, #0
 80064fc:	dcf6      	bgt.n	80064ec <__ieee754_pow+0x214>
 80064fe:	2000      	movs	r0, #0
 8006500:	b011      	add	sp, #68	@ 0x44
 8006502:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006506:	f000 bca6 	b.w	8006e56 <__math_uflow>
 800650a:	429e      	cmp	r6, r3
 800650c:	d20c      	bcs.n	8006528 <__ieee754_pow+0x250>
 800650e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006512:	2200      	movs	r2, #0
 8006514:	2300      	movs	r3, #0
 8006516:	f7fa fb05 	bl	8000b24 <__aeabi_dcmplt>
 800651a:	3800      	subs	r0, #0
 800651c:	bf18      	it	ne
 800651e:	2001      	movne	r0, #1
 8006520:	f1b8 0f00 	cmp.w	r8, #0
 8006524:	daec      	bge.n	8006500 <__ieee754_pow+0x228>
 8006526:	e7e2      	b.n	80064ee <__ieee754_pow+0x216>
 8006528:	4b0a      	ldr	r3, [pc, #40]	@ (8006554 <__ieee754_pow+0x27c>)
 800652a:	2200      	movs	r2, #0
 800652c:	429e      	cmp	r6, r3
 800652e:	d91b      	bls.n	8006568 <__ieee754_pow+0x290>
 8006530:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006534:	2300      	movs	r3, #0
 8006536:	f7fa faf5 	bl	8000b24 <__aeabi_dcmplt>
 800653a:	3800      	subs	r0, #0
 800653c:	bf18      	it	ne
 800653e:	2001      	movne	r0, #1
 8006540:	f1b8 0f00 	cmp.w	r8, #0
 8006544:	dcd3      	bgt.n	80064ee <__ieee754_pow+0x216>
 8006546:	e7db      	b.n	8006500 <__ieee754_pow+0x228>
 8006548:	fff00000 	.word	0xfff00000
 800654c:	7ff00000 	.word	0x7ff00000
 8006550:	433fffff 	.word	0x433fffff
 8006554:	3ff00000 	.word	0x3ff00000
 8006558:	3fefffff 	.word	0x3fefffff
 800655c:	3fe00000 	.word	0x3fe00000
 8006560:	bff00000 	.word	0xbff00000
 8006564:	43f00000 	.word	0x43f00000
 8006568:	4b5b      	ldr	r3, [pc, #364]	@ (80066d8 <__ieee754_pow+0x400>)
 800656a:	f7f9 feb1 	bl	80002d0 <__aeabi_dsub>
 800656e:	a352      	add	r3, pc, #328	@ (adr r3, 80066b8 <__ieee754_pow+0x3e0>)
 8006570:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006574:	4604      	mov	r4, r0
 8006576:	460d      	mov	r5, r1
 8006578:	f7fa f862 	bl	8000640 <__aeabi_dmul>
 800657c:	a350      	add	r3, pc, #320	@ (adr r3, 80066c0 <__ieee754_pow+0x3e8>)
 800657e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006582:	4606      	mov	r6, r0
 8006584:	460f      	mov	r7, r1
 8006586:	4620      	mov	r0, r4
 8006588:	4629      	mov	r1, r5
 800658a:	f7fa f859 	bl	8000640 <__aeabi_dmul>
 800658e:	2200      	movs	r2, #0
 8006590:	4682      	mov	sl, r0
 8006592:	468b      	mov	fp, r1
 8006594:	4620      	mov	r0, r4
 8006596:	4629      	mov	r1, r5
 8006598:	4b50      	ldr	r3, [pc, #320]	@ (80066dc <__ieee754_pow+0x404>)
 800659a:	f7fa f851 	bl	8000640 <__aeabi_dmul>
 800659e:	4602      	mov	r2, r0
 80065a0:	460b      	mov	r3, r1
 80065a2:	a149      	add	r1, pc, #292	@ (adr r1, 80066c8 <__ieee754_pow+0x3f0>)
 80065a4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80065a8:	f7f9 fe92 	bl	80002d0 <__aeabi_dsub>
 80065ac:	4622      	mov	r2, r4
 80065ae:	462b      	mov	r3, r5
 80065b0:	f7fa f846 	bl	8000640 <__aeabi_dmul>
 80065b4:	4602      	mov	r2, r0
 80065b6:	460b      	mov	r3, r1
 80065b8:	2000      	movs	r0, #0
 80065ba:	4949      	ldr	r1, [pc, #292]	@ (80066e0 <__ieee754_pow+0x408>)
 80065bc:	f7f9 fe88 	bl	80002d0 <__aeabi_dsub>
 80065c0:	4622      	mov	r2, r4
 80065c2:	4680      	mov	r8, r0
 80065c4:	4689      	mov	r9, r1
 80065c6:	462b      	mov	r3, r5
 80065c8:	4620      	mov	r0, r4
 80065ca:	4629      	mov	r1, r5
 80065cc:	f7fa f838 	bl	8000640 <__aeabi_dmul>
 80065d0:	4602      	mov	r2, r0
 80065d2:	460b      	mov	r3, r1
 80065d4:	4640      	mov	r0, r8
 80065d6:	4649      	mov	r1, r9
 80065d8:	f7fa f832 	bl	8000640 <__aeabi_dmul>
 80065dc:	a33c      	add	r3, pc, #240	@ (adr r3, 80066d0 <__ieee754_pow+0x3f8>)
 80065de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065e2:	f7fa f82d 	bl	8000640 <__aeabi_dmul>
 80065e6:	4602      	mov	r2, r0
 80065e8:	460b      	mov	r3, r1
 80065ea:	4650      	mov	r0, sl
 80065ec:	4659      	mov	r1, fp
 80065ee:	f7f9 fe6f 	bl	80002d0 <__aeabi_dsub>
 80065f2:	2400      	movs	r4, #0
 80065f4:	4602      	mov	r2, r0
 80065f6:	460b      	mov	r3, r1
 80065f8:	4680      	mov	r8, r0
 80065fa:	4689      	mov	r9, r1
 80065fc:	4630      	mov	r0, r6
 80065fe:	4639      	mov	r1, r7
 8006600:	f7f9 fe68 	bl	80002d4 <__adddf3>
 8006604:	4632      	mov	r2, r6
 8006606:	463b      	mov	r3, r7
 8006608:	4620      	mov	r0, r4
 800660a:	460d      	mov	r5, r1
 800660c:	f7f9 fe60 	bl	80002d0 <__aeabi_dsub>
 8006610:	4602      	mov	r2, r0
 8006612:	460b      	mov	r3, r1
 8006614:	4640      	mov	r0, r8
 8006616:	4649      	mov	r1, r9
 8006618:	f7f9 fe5a 	bl	80002d0 <__aeabi_dsub>
 800661c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006620:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8006624:	2300      	movs	r3, #0
 8006626:	9304      	str	r3, [sp, #16]
 8006628:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 800662c:	4606      	mov	r6, r0
 800662e:	460f      	mov	r7, r1
 8006630:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006634:	4652      	mov	r2, sl
 8006636:	465b      	mov	r3, fp
 8006638:	f7f9 fe4a 	bl	80002d0 <__aeabi_dsub>
 800663c:	4622      	mov	r2, r4
 800663e:	462b      	mov	r3, r5
 8006640:	f7f9 fffe 	bl	8000640 <__aeabi_dmul>
 8006644:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006648:	4680      	mov	r8, r0
 800664a:	4689      	mov	r9, r1
 800664c:	4630      	mov	r0, r6
 800664e:	4639      	mov	r1, r7
 8006650:	f7f9 fff6 	bl	8000640 <__aeabi_dmul>
 8006654:	4602      	mov	r2, r0
 8006656:	460b      	mov	r3, r1
 8006658:	4640      	mov	r0, r8
 800665a:	4649      	mov	r1, r9
 800665c:	f7f9 fe3a 	bl	80002d4 <__adddf3>
 8006660:	4652      	mov	r2, sl
 8006662:	465b      	mov	r3, fp
 8006664:	4606      	mov	r6, r0
 8006666:	460f      	mov	r7, r1
 8006668:	4620      	mov	r0, r4
 800666a:	4629      	mov	r1, r5
 800666c:	f7f9 ffe8 	bl	8000640 <__aeabi_dmul>
 8006670:	460b      	mov	r3, r1
 8006672:	4602      	mov	r2, r0
 8006674:	4680      	mov	r8, r0
 8006676:	4689      	mov	r9, r1
 8006678:	4630      	mov	r0, r6
 800667a:	4639      	mov	r1, r7
 800667c:	f7f9 fe2a 	bl	80002d4 <__adddf3>
 8006680:	4b18      	ldr	r3, [pc, #96]	@ (80066e4 <__ieee754_pow+0x40c>)
 8006682:	4604      	mov	r4, r0
 8006684:	4299      	cmp	r1, r3
 8006686:	460d      	mov	r5, r1
 8006688:	468a      	mov	sl, r1
 800668a:	468b      	mov	fp, r1
 800668c:	f340 82e0 	ble.w	8006c50 <__ieee754_pow+0x978>
 8006690:	f101 433f 	add.w	r3, r1, #3204448256	@ 0xbf000000
 8006694:	f503 03e0 	add.w	r3, r3, #7340032	@ 0x700000
 8006698:	4303      	orrs	r3, r0
 800669a:	f000 81df 	beq.w	8006a5c <__ieee754_pow+0x784>
 800669e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80066a2:	2200      	movs	r2, #0
 80066a4:	2300      	movs	r3, #0
 80066a6:	f7fa fa3d 	bl	8000b24 <__aeabi_dcmplt>
 80066aa:	3800      	subs	r0, #0
 80066ac:	bf18      	it	ne
 80066ae:	2001      	movne	r0, #1
 80066b0:	e71d      	b.n	80064ee <__ieee754_pow+0x216>
 80066b2:	bf00      	nop
 80066b4:	f3af 8000 	nop.w
 80066b8:	60000000 	.word	0x60000000
 80066bc:	3ff71547 	.word	0x3ff71547
 80066c0:	f85ddf44 	.word	0xf85ddf44
 80066c4:	3e54ae0b 	.word	0x3e54ae0b
 80066c8:	55555555 	.word	0x55555555
 80066cc:	3fd55555 	.word	0x3fd55555
 80066d0:	652b82fe 	.word	0x652b82fe
 80066d4:	3ff71547 	.word	0x3ff71547
 80066d8:	3ff00000 	.word	0x3ff00000
 80066dc:	3fd00000 	.word	0x3fd00000
 80066e0:	3fe00000 	.word	0x3fe00000
 80066e4:	408fffff 	.word	0x408fffff
 80066e8:	4ad3      	ldr	r2, [pc, #844]	@ (8006a38 <__ieee754_pow+0x760>)
 80066ea:	402a      	ands	r2, r5
 80066ec:	2a00      	cmp	r2, #0
 80066ee:	f040 817a 	bne.w	80069e6 <__ieee754_pow+0x70e>
 80066f2:	4bd2      	ldr	r3, [pc, #840]	@ (8006a3c <__ieee754_pow+0x764>)
 80066f4:	2200      	movs	r2, #0
 80066f6:	f7f9 ffa3 	bl	8000640 <__aeabi_dmul>
 80066fa:	f06f 0434 	mvn.w	r4, #52	@ 0x34
 80066fe:	460b      	mov	r3, r1
 8006700:	151a      	asrs	r2, r3, #20
 8006702:	f2a2 32ff 	subw	r2, r2, #1023	@ 0x3ff
 8006706:	4422      	add	r2, r4
 8006708:	920a      	str	r2, [sp, #40]	@ 0x28
 800670a:	4acd      	ldr	r2, [pc, #820]	@ (8006a40 <__ieee754_pow+0x768>)
 800670c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006710:	f043 557f 	orr.w	r5, r3, #1069547520	@ 0x3fc00000
 8006714:	4293      	cmp	r3, r2
 8006716:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800671a:	dd08      	ble.n	800672e <__ieee754_pow+0x456>
 800671c:	4ac9      	ldr	r2, [pc, #804]	@ (8006a44 <__ieee754_pow+0x76c>)
 800671e:	4293      	cmp	r3, r2
 8006720:	f340 8163 	ble.w	80069ea <__ieee754_pow+0x712>
 8006724:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006726:	f5a5 1580 	sub.w	r5, r5, #1048576	@ 0x100000
 800672a:	3301      	adds	r3, #1
 800672c:	930a      	str	r3, [sp, #40]	@ 0x28
 800672e:	2600      	movs	r6, #0
 8006730:	00f3      	lsls	r3, r6, #3
 8006732:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006734:	4bc4      	ldr	r3, [pc, #784]	@ (8006a48 <__ieee754_pow+0x770>)
 8006736:	4629      	mov	r1, r5
 8006738:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800673c:	e9d3 3400 	ldrd	r3, r4, [r3]
 8006740:	461a      	mov	r2, r3
 8006742:	e9cd 3408 	strd	r3, r4, [sp, #32]
 8006746:	4623      	mov	r3, r4
 8006748:	4682      	mov	sl, r0
 800674a:	f7f9 fdc1 	bl	80002d0 <__aeabi_dsub>
 800674e:	4652      	mov	r2, sl
 8006750:	462b      	mov	r3, r5
 8006752:	e9cd 010c 	strd	r0, r1, [sp, #48]	@ 0x30
 8006756:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800675a:	f7f9 fdbb 	bl	80002d4 <__adddf3>
 800675e:	4602      	mov	r2, r0
 8006760:	460b      	mov	r3, r1
 8006762:	2000      	movs	r0, #0
 8006764:	49b9      	ldr	r1, [pc, #740]	@ (8006a4c <__ieee754_pow+0x774>)
 8006766:	f7fa f895 	bl	8000894 <__aeabi_ddiv>
 800676a:	4602      	mov	r2, r0
 800676c:	460b      	mov	r3, r1
 800676e:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8006772:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006776:	f7f9 ff63 	bl	8000640 <__aeabi_dmul>
 800677a:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800677e:	e9dd 3406 	ldrd	r3, r4, [sp, #24]
 8006782:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8006786:	2300      	movs	r3, #0
 8006788:	2200      	movs	r2, #0
 800678a:	46ab      	mov	fp, r5
 800678c:	106d      	asrs	r5, r5, #1
 800678e:	f045 5500 	orr.w	r5, r5, #536870912	@ 0x20000000
 8006792:	9304      	str	r3, [sp, #16]
 8006794:	f505 2500 	add.w	r5, r5, #524288	@ 0x80000
 8006798:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 800679c:	eb05 4386 	add.w	r3, r5, r6, lsl #18
 80067a0:	4640      	mov	r0, r8
 80067a2:	4649      	mov	r1, r9
 80067a4:	4614      	mov	r4, r2
 80067a6:	461d      	mov	r5, r3
 80067a8:	f7f9 ff4a 	bl	8000640 <__aeabi_dmul>
 80067ac:	4602      	mov	r2, r0
 80067ae:	460b      	mov	r3, r1
 80067b0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80067b4:	f7f9 fd8c 	bl	80002d0 <__aeabi_dsub>
 80067b8:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80067bc:	4606      	mov	r6, r0
 80067be:	460f      	mov	r7, r1
 80067c0:	4620      	mov	r0, r4
 80067c2:	4629      	mov	r1, r5
 80067c4:	f7f9 fd84 	bl	80002d0 <__aeabi_dsub>
 80067c8:	4602      	mov	r2, r0
 80067ca:	460b      	mov	r3, r1
 80067cc:	4650      	mov	r0, sl
 80067ce:	4659      	mov	r1, fp
 80067d0:	f7f9 fd7e 	bl	80002d0 <__aeabi_dsub>
 80067d4:	4642      	mov	r2, r8
 80067d6:	464b      	mov	r3, r9
 80067d8:	f7f9 ff32 	bl	8000640 <__aeabi_dmul>
 80067dc:	4602      	mov	r2, r0
 80067de:	460b      	mov	r3, r1
 80067e0:	4630      	mov	r0, r6
 80067e2:	4639      	mov	r1, r7
 80067e4:	f7f9 fd74 	bl	80002d0 <__aeabi_dsub>
 80067e8:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 80067ec:	f7f9 ff28 	bl	8000640 <__aeabi_dmul>
 80067f0:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80067f4:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80067f8:	4610      	mov	r0, r2
 80067fa:	4619      	mov	r1, r3
 80067fc:	f7f9 ff20 	bl	8000640 <__aeabi_dmul>
 8006800:	a37b      	add	r3, pc, #492	@ (adr r3, 80069f0 <__ieee754_pow+0x718>)
 8006802:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006806:	4604      	mov	r4, r0
 8006808:	460d      	mov	r5, r1
 800680a:	f7f9 ff19 	bl	8000640 <__aeabi_dmul>
 800680e:	a37a      	add	r3, pc, #488	@ (adr r3, 80069f8 <__ieee754_pow+0x720>)
 8006810:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006814:	f7f9 fd5e 	bl	80002d4 <__adddf3>
 8006818:	4622      	mov	r2, r4
 800681a:	462b      	mov	r3, r5
 800681c:	f7f9 ff10 	bl	8000640 <__aeabi_dmul>
 8006820:	a377      	add	r3, pc, #476	@ (adr r3, 8006a00 <__ieee754_pow+0x728>)
 8006822:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006826:	f7f9 fd55 	bl	80002d4 <__adddf3>
 800682a:	4622      	mov	r2, r4
 800682c:	462b      	mov	r3, r5
 800682e:	f7f9 ff07 	bl	8000640 <__aeabi_dmul>
 8006832:	a375      	add	r3, pc, #468	@ (adr r3, 8006a08 <__ieee754_pow+0x730>)
 8006834:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006838:	f7f9 fd4c 	bl	80002d4 <__adddf3>
 800683c:	4622      	mov	r2, r4
 800683e:	462b      	mov	r3, r5
 8006840:	f7f9 fefe 	bl	8000640 <__aeabi_dmul>
 8006844:	a372      	add	r3, pc, #456	@ (adr r3, 8006a10 <__ieee754_pow+0x738>)
 8006846:	e9d3 2300 	ldrd	r2, r3, [r3]
 800684a:	f7f9 fd43 	bl	80002d4 <__adddf3>
 800684e:	4622      	mov	r2, r4
 8006850:	462b      	mov	r3, r5
 8006852:	f7f9 fef5 	bl	8000640 <__aeabi_dmul>
 8006856:	a370      	add	r3, pc, #448	@ (adr r3, 8006a18 <__ieee754_pow+0x740>)
 8006858:	e9d3 2300 	ldrd	r2, r3, [r3]
 800685c:	f7f9 fd3a 	bl	80002d4 <__adddf3>
 8006860:	4622      	mov	r2, r4
 8006862:	4606      	mov	r6, r0
 8006864:	460f      	mov	r7, r1
 8006866:	462b      	mov	r3, r5
 8006868:	4620      	mov	r0, r4
 800686a:	4629      	mov	r1, r5
 800686c:	f7f9 fee8 	bl	8000640 <__aeabi_dmul>
 8006870:	4602      	mov	r2, r0
 8006872:	460b      	mov	r3, r1
 8006874:	4630      	mov	r0, r6
 8006876:	4639      	mov	r1, r7
 8006878:	f7f9 fee2 	bl	8000640 <__aeabi_dmul>
 800687c:	4604      	mov	r4, r0
 800687e:	460d      	mov	r5, r1
 8006880:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006884:	4642      	mov	r2, r8
 8006886:	464b      	mov	r3, r9
 8006888:	f7f9 fd24 	bl	80002d4 <__adddf3>
 800688c:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8006890:	f7f9 fed6 	bl	8000640 <__aeabi_dmul>
 8006894:	4622      	mov	r2, r4
 8006896:	462b      	mov	r3, r5
 8006898:	f7f9 fd1c 	bl	80002d4 <__adddf3>
 800689c:	4642      	mov	r2, r8
 800689e:	4682      	mov	sl, r0
 80068a0:	468b      	mov	fp, r1
 80068a2:	464b      	mov	r3, r9
 80068a4:	4640      	mov	r0, r8
 80068a6:	4649      	mov	r1, r9
 80068a8:	f7f9 feca 	bl	8000640 <__aeabi_dmul>
 80068ac:	2200      	movs	r2, #0
 80068ae:	4b68      	ldr	r3, [pc, #416]	@ (8006a50 <__ieee754_pow+0x778>)
 80068b0:	4606      	mov	r6, r0
 80068b2:	460f      	mov	r7, r1
 80068b4:	f7f9 fd0e 	bl	80002d4 <__adddf3>
 80068b8:	4652      	mov	r2, sl
 80068ba:	465b      	mov	r3, fp
 80068bc:	f7f9 fd0a 	bl	80002d4 <__adddf3>
 80068c0:	2400      	movs	r4, #0
 80068c2:	460d      	mov	r5, r1
 80068c4:	4622      	mov	r2, r4
 80068c6:	460b      	mov	r3, r1
 80068c8:	4640      	mov	r0, r8
 80068ca:	4649      	mov	r1, r9
 80068cc:	f7f9 feb8 	bl	8000640 <__aeabi_dmul>
 80068d0:	2200      	movs	r2, #0
 80068d2:	4680      	mov	r8, r0
 80068d4:	4689      	mov	r9, r1
 80068d6:	4620      	mov	r0, r4
 80068d8:	4629      	mov	r1, r5
 80068da:	4b5d      	ldr	r3, [pc, #372]	@ (8006a50 <__ieee754_pow+0x778>)
 80068dc:	f7f9 fcf8 	bl	80002d0 <__aeabi_dsub>
 80068e0:	4632      	mov	r2, r6
 80068e2:	463b      	mov	r3, r7
 80068e4:	f7f9 fcf4 	bl	80002d0 <__aeabi_dsub>
 80068e8:	4602      	mov	r2, r0
 80068ea:	460b      	mov	r3, r1
 80068ec:	4650      	mov	r0, sl
 80068ee:	4659      	mov	r1, fp
 80068f0:	f7f9 fcee 	bl	80002d0 <__aeabi_dsub>
 80068f4:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80068f8:	f7f9 fea2 	bl	8000640 <__aeabi_dmul>
 80068fc:	4622      	mov	r2, r4
 80068fe:	4606      	mov	r6, r0
 8006900:	460f      	mov	r7, r1
 8006902:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8006906:	462b      	mov	r3, r5
 8006908:	f7f9 fe9a 	bl	8000640 <__aeabi_dmul>
 800690c:	4602      	mov	r2, r0
 800690e:	460b      	mov	r3, r1
 8006910:	4630      	mov	r0, r6
 8006912:	4639      	mov	r1, r7
 8006914:	f7f9 fcde 	bl	80002d4 <__adddf3>
 8006918:	2400      	movs	r4, #0
 800691a:	4606      	mov	r6, r0
 800691c:	460f      	mov	r7, r1
 800691e:	4602      	mov	r2, r0
 8006920:	460b      	mov	r3, r1
 8006922:	4640      	mov	r0, r8
 8006924:	4649      	mov	r1, r9
 8006926:	f7f9 fcd5 	bl	80002d4 <__adddf3>
 800692a:	a33d      	add	r3, pc, #244	@ (adr r3, 8006a20 <__ieee754_pow+0x748>)
 800692c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006930:	4620      	mov	r0, r4
 8006932:	460d      	mov	r5, r1
 8006934:	f7f9 fe84 	bl	8000640 <__aeabi_dmul>
 8006938:	4642      	mov	r2, r8
 800693a:	464b      	mov	r3, r9
 800693c:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8006940:	4620      	mov	r0, r4
 8006942:	4629      	mov	r1, r5
 8006944:	f7f9 fcc4 	bl	80002d0 <__aeabi_dsub>
 8006948:	4602      	mov	r2, r0
 800694a:	460b      	mov	r3, r1
 800694c:	4630      	mov	r0, r6
 800694e:	4639      	mov	r1, r7
 8006950:	f7f9 fcbe 	bl	80002d0 <__aeabi_dsub>
 8006954:	a334      	add	r3, pc, #208	@ (adr r3, 8006a28 <__ieee754_pow+0x750>)
 8006956:	e9d3 2300 	ldrd	r2, r3, [r3]
 800695a:	f7f9 fe71 	bl	8000640 <__aeabi_dmul>
 800695e:	a334      	add	r3, pc, #208	@ (adr r3, 8006a30 <__ieee754_pow+0x758>)
 8006960:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006964:	4606      	mov	r6, r0
 8006966:	460f      	mov	r7, r1
 8006968:	4620      	mov	r0, r4
 800696a:	4629      	mov	r1, r5
 800696c:	f7f9 fe68 	bl	8000640 <__aeabi_dmul>
 8006970:	4602      	mov	r2, r0
 8006972:	460b      	mov	r3, r1
 8006974:	4630      	mov	r0, r6
 8006976:	4639      	mov	r1, r7
 8006978:	f7f9 fcac 	bl	80002d4 <__adddf3>
 800697c:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800697e:	4b35      	ldr	r3, [pc, #212]	@ (8006a54 <__ieee754_pow+0x77c>)
 8006980:	2400      	movs	r4, #0
 8006982:	4413      	add	r3, r2
 8006984:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006988:	f7f9 fca4 	bl	80002d4 <__adddf3>
 800698c:	4682      	mov	sl, r0
 800698e:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8006990:	468b      	mov	fp, r1
 8006992:	f7f9 fdeb 	bl	800056c <__aeabi_i2d>
 8006996:	4606      	mov	r6, r0
 8006998:	460f      	mov	r7, r1
 800699a:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800699c:	4b2e      	ldr	r3, [pc, #184]	@ (8006a58 <__ieee754_pow+0x780>)
 800699e:	4413      	add	r3, r2
 80069a0:	e9d3 8900 	ldrd	r8, r9, [r3]
 80069a4:	4652      	mov	r2, sl
 80069a6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80069aa:	465b      	mov	r3, fp
 80069ac:	f7f9 fc92 	bl	80002d4 <__adddf3>
 80069b0:	4642      	mov	r2, r8
 80069b2:	464b      	mov	r3, r9
 80069b4:	f7f9 fc8e 	bl	80002d4 <__adddf3>
 80069b8:	4632      	mov	r2, r6
 80069ba:	463b      	mov	r3, r7
 80069bc:	f7f9 fc8a 	bl	80002d4 <__adddf3>
 80069c0:	4632      	mov	r2, r6
 80069c2:	463b      	mov	r3, r7
 80069c4:	4620      	mov	r0, r4
 80069c6:	460d      	mov	r5, r1
 80069c8:	f7f9 fc82 	bl	80002d0 <__aeabi_dsub>
 80069cc:	4642      	mov	r2, r8
 80069ce:	464b      	mov	r3, r9
 80069d0:	f7f9 fc7e 	bl	80002d0 <__aeabi_dsub>
 80069d4:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80069d8:	f7f9 fc7a 	bl	80002d0 <__aeabi_dsub>
 80069dc:	4602      	mov	r2, r0
 80069de:	460b      	mov	r3, r1
 80069e0:	4650      	mov	r0, sl
 80069e2:	4659      	mov	r1, fp
 80069e4:	e618      	b.n	8006618 <__ieee754_pow+0x340>
 80069e6:	2400      	movs	r4, #0
 80069e8:	e68a      	b.n	8006700 <__ieee754_pow+0x428>
 80069ea:	2601      	movs	r6, #1
 80069ec:	e6a0      	b.n	8006730 <__ieee754_pow+0x458>
 80069ee:	bf00      	nop
 80069f0:	4a454eef 	.word	0x4a454eef
 80069f4:	3fca7e28 	.word	0x3fca7e28
 80069f8:	93c9db65 	.word	0x93c9db65
 80069fc:	3fcd864a 	.word	0x3fcd864a
 8006a00:	a91d4101 	.word	0xa91d4101
 8006a04:	3fd17460 	.word	0x3fd17460
 8006a08:	518f264d 	.word	0x518f264d
 8006a0c:	3fd55555 	.word	0x3fd55555
 8006a10:	db6fabff 	.word	0xdb6fabff
 8006a14:	3fdb6db6 	.word	0x3fdb6db6
 8006a18:	33333303 	.word	0x33333303
 8006a1c:	3fe33333 	.word	0x3fe33333
 8006a20:	e0000000 	.word	0xe0000000
 8006a24:	3feec709 	.word	0x3feec709
 8006a28:	dc3a03fd 	.word	0xdc3a03fd
 8006a2c:	3feec709 	.word	0x3feec709
 8006a30:	145b01f5 	.word	0x145b01f5
 8006a34:	be3e2fe0 	.word	0xbe3e2fe0
 8006a38:	7ff00000 	.word	0x7ff00000
 8006a3c:	43400000 	.word	0x43400000
 8006a40:	0003988e 	.word	0x0003988e
 8006a44:	000bb679 	.word	0x000bb679
 8006a48:	0800b500 	.word	0x0800b500
 8006a4c:	3ff00000 	.word	0x3ff00000
 8006a50:	40080000 	.word	0x40080000
 8006a54:	0800b4e0 	.word	0x0800b4e0
 8006a58:	0800b4f0 	.word	0x0800b4f0
 8006a5c:	a39a      	add	r3, pc, #616	@ (adr r3, 8006cc8 <__ieee754_pow+0x9f0>)
 8006a5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a62:	4630      	mov	r0, r6
 8006a64:	4639      	mov	r1, r7
 8006a66:	f7f9 fc35 	bl	80002d4 <__adddf3>
 8006a6a:	4642      	mov	r2, r8
 8006a6c:	e9cd 0100 	strd	r0, r1, [sp]
 8006a70:	464b      	mov	r3, r9
 8006a72:	4620      	mov	r0, r4
 8006a74:	4629      	mov	r1, r5
 8006a76:	f7f9 fc2b 	bl	80002d0 <__aeabi_dsub>
 8006a7a:	4602      	mov	r2, r0
 8006a7c:	460b      	mov	r3, r1
 8006a7e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006a82:	f7fa f86d 	bl	8000b60 <__aeabi_dcmpgt>
 8006a86:	2800      	cmp	r0, #0
 8006a88:	f47f ae09 	bne.w	800669e <__ieee754_pow+0x3c6>
 8006a8c:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8006a90:	ea4f 5a2a 	mov.w	sl, sl, asr #20
 8006a94:	f2aa 3afe 	subw	sl, sl, #1022	@ 0x3fe
 8006a98:	fa43 fa0a 	asr.w	sl, r3, sl
 8006a9c:	44da      	add	sl, fp
 8006a9e:	f3ca 510a 	ubfx	r1, sl, #20, #11
 8006aa2:	489b      	ldr	r0, [pc, #620]	@ (8006d10 <__ieee754_pow+0xa38>)
 8006aa4:	f2a1 31ff 	subw	r1, r1, #1023	@ 0x3ff
 8006aa8:	4108      	asrs	r0, r1
 8006aaa:	ea00 030a 	and.w	r3, r0, sl
 8006aae:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 8006ab2:	f1c1 0114 	rsb	r1, r1, #20
 8006ab6:	f44a 1a80 	orr.w	sl, sl, #1048576	@ 0x100000
 8006aba:	4640      	mov	r0, r8
 8006abc:	fa4a fa01 	asr.w	sl, sl, r1
 8006ac0:	f1bb 0f00 	cmp.w	fp, #0
 8006ac4:	4649      	mov	r1, r9
 8006ac6:	f04f 0200 	mov.w	r2, #0
 8006aca:	bfb8      	it	lt
 8006acc:	f1ca 0a00 	rsblt	sl, sl, #0
 8006ad0:	f7f9 fbfe 	bl	80002d0 <__aeabi_dsub>
 8006ad4:	4680      	mov	r8, r0
 8006ad6:	4689      	mov	r9, r1
 8006ad8:	2400      	movs	r4, #0
 8006ada:	4632      	mov	r2, r6
 8006adc:	463b      	mov	r3, r7
 8006ade:	4640      	mov	r0, r8
 8006ae0:	4649      	mov	r1, r9
 8006ae2:	f7f9 fbf7 	bl	80002d4 <__adddf3>
 8006ae6:	a37a      	add	r3, pc, #488	@ (adr r3, 8006cd0 <__ieee754_pow+0x9f8>)
 8006ae8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006aec:	4620      	mov	r0, r4
 8006aee:	460d      	mov	r5, r1
 8006af0:	f7f9 fda6 	bl	8000640 <__aeabi_dmul>
 8006af4:	4642      	mov	r2, r8
 8006af6:	464b      	mov	r3, r9
 8006af8:	e9cd 0100 	strd	r0, r1, [sp]
 8006afc:	4620      	mov	r0, r4
 8006afe:	4629      	mov	r1, r5
 8006b00:	f7f9 fbe6 	bl	80002d0 <__aeabi_dsub>
 8006b04:	4602      	mov	r2, r0
 8006b06:	460b      	mov	r3, r1
 8006b08:	4630      	mov	r0, r6
 8006b0a:	4639      	mov	r1, r7
 8006b0c:	f7f9 fbe0 	bl	80002d0 <__aeabi_dsub>
 8006b10:	a371      	add	r3, pc, #452	@ (adr r3, 8006cd8 <__ieee754_pow+0xa00>)
 8006b12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b16:	f7f9 fd93 	bl	8000640 <__aeabi_dmul>
 8006b1a:	a371      	add	r3, pc, #452	@ (adr r3, 8006ce0 <__ieee754_pow+0xa08>)
 8006b1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b20:	4680      	mov	r8, r0
 8006b22:	4689      	mov	r9, r1
 8006b24:	4620      	mov	r0, r4
 8006b26:	4629      	mov	r1, r5
 8006b28:	f7f9 fd8a 	bl	8000640 <__aeabi_dmul>
 8006b2c:	4602      	mov	r2, r0
 8006b2e:	460b      	mov	r3, r1
 8006b30:	4640      	mov	r0, r8
 8006b32:	4649      	mov	r1, r9
 8006b34:	f7f9 fbce 	bl	80002d4 <__adddf3>
 8006b38:	4604      	mov	r4, r0
 8006b3a:	460d      	mov	r5, r1
 8006b3c:	4602      	mov	r2, r0
 8006b3e:	460b      	mov	r3, r1
 8006b40:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006b44:	f7f9 fbc6 	bl	80002d4 <__adddf3>
 8006b48:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006b4c:	4680      	mov	r8, r0
 8006b4e:	4689      	mov	r9, r1
 8006b50:	f7f9 fbbe 	bl	80002d0 <__aeabi_dsub>
 8006b54:	4602      	mov	r2, r0
 8006b56:	460b      	mov	r3, r1
 8006b58:	4620      	mov	r0, r4
 8006b5a:	4629      	mov	r1, r5
 8006b5c:	f7f9 fbb8 	bl	80002d0 <__aeabi_dsub>
 8006b60:	4642      	mov	r2, r8
 8006b62:	4606      	mov	r6, r0
 8006b64:	460f      	mov	r7, r1
 8006b66:	464b      	mov	r3, r9
 8006b68:	4640      	mov	r0, r8
 8006b6a:	4649      	mov	r1, r9
 8006b6c:	f7f9 fd68 	bl	8000640 <__aeabi_dmul>
 8006b70:	a35d      	add	r3, pc, #372	@ (adr r3, 8006ce8 <__ieee754_pow+0xa10>)
 8006b72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b76:	4604      	mov	r4, r0
 8006b78:	460d      	mov	r5, r1
 8006b7a:	f7f9 fd61 	bl	8000640 <__aeabi_dmul>
 8006b7e:	a35c      	add	r3, pc, #368	@ (adr r3, 8006cf0 <__ieee754_pow+0xa18>)
 8006b80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b84:	f7f9 fba4 	bl	80002d0 <__aeabi_dsub>
 8006b88:	4622      	mov	r2, r4
 8006b8a:	462b      	mov	r3, r5
 8006b8c:	f7f9 fd58 	bl	8000640 <__aeabi_dmul>
 8006b90:	a359      	add	r3, pc, #356	@ (adr r3, 8006cf8 <__ieee754_pow+0xa20>)
 8006b92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b96:	f7f9 fb9d 	bl	80002d4 <__adddf3>
 8006b9a:	4622      	mov	r2, r4
 8006b9c:	462b      	mov	r3, r5
 8006b9e:	f7f9 fd4f 	bl	8000640 <__aeabi_dmul>
 8006ba2:	a357      	add	r3, pc, #348	@ (adr r3, 8006d00 <__ieee754_pow+0xa28>)
 8006ba4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ba8:	f7f9 fb92 	bl	80002d0 <__aeabi_dsub>
 8006bac:	4622      	mov	r2, r4
 8006bae:	462b      	mov	r3, r5
 8006bb0:	f7f9 fd46 	bl	8000640 <__aeabi_dmul>
 8006bb4:	a354      	add	r3, pc, #336	@ (adr r3, 8006d08 <__ieee754_pow+0xa30>)
 8006bb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006bba:	f7f9 fb8b 	bl	80002d4 <__adddf3>
 8006bbe:	4622      	mov	r2, r4
 8006bc0:	462b      	mov	r3, r5
 8006bc2:	f7f9 fd3d 	bl	8000640 <__aeabi_dmul>
 8006bc6:	4602      	mov	r2, r0
 8006bc8:	460b      	mov	r3, r1
 8006bca:	4640      	mov	r0, r8
 8006bcc:	4649      	mov	r1, r9
 8006bce:	f7f9 fb7f 	bl	80002d0 <__aeabi_dsub>
 8006bd2:	4604      	mov	r4, r0
 8006bd4:	460d      	mov	r5, r1
 8006bd6:	4602      	mov	r2, r0
 8006bd8:	460b      	mov	r3, r1
 8006bda:	4640      	mov	r0, r8
 8006bdc:	4649      	mov	r1, r9
 8006bde:	f7f9 fd2f 	bl	8000640 <__aeabi_dmul>
 8006be2:	2200      	movs	r2, #0
 8006be4:	e9cd 0100 	strd	r0, r1, [sp]
 8006be8:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8006bec:	4620      	mov	r0, r4
 8006bee:	4629      	mov	r1, r5
 8006bf0:	f7f9 fb6e 	bl	80002d0 <__aeabi_dsub>
 8006bf4:	4602      	mov	r2, r0
 8006bf6:	460b      	mov	r3, r1
 8006bf8:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006bfc:	f7f9 fe4a 	bl	8000894 <__aeabi_ddiv>
 8006c00:	4632      	mov	r2, r6
 8006c02:	4604      	mov	r4, r0
 8006c04:	460d      	mov	r5, r1
 8006c06:	463b      	mov	r3, r7
 8006c08:	4640      	mov	r0, r8
 8006c0a:	4649      	mov	r1, r9
 8006c0c:	f7f9 fd18 	bl	8000640 <__aeabi_dmul>
 8006c10:	4632      	mov	r2, r6
 8006c12:	463b      	mov	r3, r7
 8006c14:	f7f9 fb5e 	bl	80002d4 <__adddf3>
 8006c18:	4602      	mov	r2, r0
 8006c1a:	460b      	mov	r3, r1
 8006c1c:	4620      	mov	r0, r4
 8006c1e:	4629      	mov	r1, r5
 8006c20:	f7f9 fb56 	bl	80002d0 <__aeabi_dsub>
 8006c24:	4642      	mov	r2, r8
 8006c26:	464b      	mov	r3, r9
 8006c28:	f7f9 fb52 	bl	80002d0 <__aeabi_dsub>
 8006c2c:	4602      	mov	r2, r0
 8006c2e:	460b      	mov	r3, r1
 8006c30:	2000      	movs	r0, #0
 8006c32:	4938      	ldr	r1, [pc, #224]	@ (8006d14 <__ieee754_pow+0xa3c>)
 8006c34:	f7f9 fb4c 	bl	80002d0 <__aeabi_dsub>
 8006c38:	eb01 540a 	add.w	r4, r1, sl, lsl #20
 8006c3c:	f5b4 1f80 	cmp.w	r4, #1048576	@ 0x100000
 8006c40:	da2e      	bge.n	8006ca0 <__ieee754_pow+0x9c8>
 8006c42:	4652      	mov	r2, sl
 8006c44:	f000 f874 	bl	8006d30 <scalbn>
 8006c48:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006c4c:	f7ff bbed 	b.w	800642a <__ieee754_pow+0x152>
 8006c50:	4c31      	ldr	r4, [pc, #196]	@ (8006d18 <__ieee754_pow+0xa40>)
 8006c52:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8006c56:	42a3      	cmp	r3, r4
 8006c58:	d91a      	bls.n	8006c90 <__ieee754_pow+0x9b8>
 8006c5a:	4b30      	ldr	r3, [pc, #192]	@ (8006d1c <__ieee754_pow+0xa44>)
 8006c5c:	440b      	add	r3, r1
 8006c5e:	4303      	orrs	r3, r0
 8006c60:	d009      	beq.n	8006c76 <__ieee754_pow+0x99e>
 8006c62:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006c66:	2200      	movs	r2, #0
 8006c68:	2300      	movs	r3, #0
 8006c6a:	f7f9 ff5b 	bl	8000b24 <__aeabi_dcmplt>
 8006c6e:	3800      	subs	r0, #0
 8006c70:	bf18      	it	ne
 8006c72:	2001      	movne	r0, #1
 8006c74:	e444      	b.n	8006500 <__ieee754_pow+0x228>
 8006c76:	4642      	mov	r2, r8
 8006c78:	464b      	mov	r3, r9
 8006c7a:	f7f9 fb29 	bl	80002d0 <__aeabi_dsub>
 8006c7e:	4632      	mov	r2, r6
 8006c80:	463b      	mov	r3, r7
 8006c82:	f7f9 ff63 	bl	8000b4c <__aeabi_dcmpge>
 8006c86:	2800      	cmp	r0, #0
 8006c88:	d1eb      	bne.n	8006c62 <__ieee754_pow+0x98a>
 8006c8a:	f8df a094 	ldr.w	sl, [pc, #148]	@ 8006d20 <__ieee754_pow+0xa48>
 8006c8e:	e6fd      	b.n	8006a8c <__ieee754_pow+0x7b4>
 8006c90:	469a      	mov	sl, r3
 8006c92:	4b24      	ldr	r3, [pc, #144]	@ (8006d24 <__ieee754_pow+0xa4c>)
 8006c94:	459a      	cmp	sl, r3
 8006c96:	f63f aef9 	bhi.w	8006a8c <__ieee754_pow+0x7b4>
 8006c9a:	f8dd a010 	ldr.w	sl, [sp, #16]
 8006c9e:	e71b      	b.n	8006ad8 <__ieee754_pow+0x800>
 8006ca0:	4621      	mov	r1, r4
 8006ca2:	e7d1      	b.n	8006c48 <__ieee754_pow+0x970>
 8006ca4:	2000      	movs	r0, #0
 8006ca6:	491b      	ldr	r1, [pc, #108]	@ (8006d14 <__ieee754_pow+0xa3c>)
 8006ca8:	f7ff bb34 	b.w	8006314 <__ieee754_pow+0x3c>
 8006cac:	2000      	movs	r0, #0
 8006cae:	2100      	movs	r1, #0
 8006cb0:	f7ff bb30 	b.w	8006314 <__ieee754_pow+0x3c>
 8006cb4:	4650      	mov	r0, sl
 8006cb6:	4659      	mov	r1, fp
 8006cb8:	f7ff bb2c 	b.w	8006314 <__ieee754_pow+0x3c>
 8006cbc:	460c      	mov	r4, r1
 8006cbe:	f7ff bb79 	b.w	80063b4 <__ieee754_pow+0xdc>
 8006cc2:	2400      	movs	r4, #0
 8006cc4:	f7ff bb64 	b.w	8006390 <__ieee754_pow+0xb8>
 8006cc8:	652b82fe 	.word	0x652b82fe
 8006ccc:	3c971547 	.word	0x3c971547
 8006cd0:	00000000 	.word	0x00000000
 8006cd4:	3fe62e43 	.word	0x3fe62e43
 8006cd8:	fefa39ef 	.word	0xfefa39ef
 8006cdc:	3fe62e42 	.word	0x3fe62e42
 8006ce0:	0ca86c39 	.word	0x0ca86c39
 8006ce4:	be205c61 	.word	0xbe205c61
 8006ce8:	72bea4d0 	.word	0x72bea4d0
 8006cec:	3e663769 	.word	0x3e663769
 8006cf0:	c5d26bf1 	.word	0xc5d26bf1
 8006cf4:	3ebbbd41 	.word	0x3ebbbd41
 8006cf8:	af25de2c 	.word	0xaf25de2c
 8006cfc:	3f11566a 	.word	0x3f11566a
 8006d00:	16bebd93 	.word	0x16bebd93
 8006d04:	3f66c16c 	.word	0x3f66c16c
 8006d08:	5555553e 	.word	0x5555553e
 8006d0c:	3fc55555 	.word	0x3fc55555
 8006d10:	fff00000 	.word	0xfff00000
 8006d14:	3ff00000 	.word	0x3ff00000
 8006d18:	4090cbff 	.word	0x4090cbff
 8006d1c:	3f6f3400 	.word	0x3f6f3400
 8006d20:	4090cc00 	.word	0x4090cc00
 8006d24:	3fe00000 	.word	0x3fe00000

08006d28 <fabs>:
 8006d28:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8006d2c:	4619      	mov	r1, r3
 8006d2e:	4770      	bx	lr

08006d30 <scalbn>:
 8006d30:	e92d 48f0 	stmdb	sp!, {r4, r5, r6, r7, fp, lr}
 8006d34:	4616      	mov	r6, r2
 8006d36:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8006d3a:	4683      	mov	fp, r0
 8006d3c:	468c      	mov	ip, r1
 8006d3e:	460b      	mov	r3, r1
 8006d40:	b982      	cbnz	r2, 8006d64 <scalbn+0x34>
 8006d42:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8006d46:	4303      	orrs	r3, r0
 8006d48:	d039      	beq.n	8006dbe <scalbn+0x8e>
 8006d4a:	4b2f      	ldr	r3, [pc, #188]	@ (8006e08 <scalbn+0xd8>)
 8006d4c:	2200      	movs	r2, #0
 8006d4e:	f7f9 fc77 	bl	8000640 <__aeabi_dmul>
 8006d52:	4b2e      	ldr	r3, [pc, #184]	@ (8006e0c <scalbn+0xdc>)
 8006d54:	4683      	mov	fp, r0
 8006d56:	429e      	cmp	r6, r3
 8006d58:	468c      	mov	ip, r1
 8006d5a:	da0d      	bge.n	8006d78 <scalbn+0x48>
 8006d5c:	a326      	add	r3, pc, #152	@ (adr r3, 8006df8 <scalbn+0xc8>)
 8006d5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d62:	e01b      	b.n	8006d9c <scalbn+0x6c>
 8006d64:	f240 77ff 	movw	r7, #2047	@ 0x7ff
 8006d68:	42ba      	cmp	r2, r7
 8006d6a:	d109      	bne.n	8006d80 <scalbn+0x50>
 8006d6c:	4602      	mov	r2, r0
 8006d6e:	f7f9 fab1 	bl	80002d4 <__adddf3>
 8006d72:	4683      	mov	fp, r0
 8006d74:	468c      	mov	ip, r1
 8006d76:	e022      	b.n	8006dbe <scalbn+0x8e>
 8006d78:	460b      	mov	r3, r1
 8006d7a:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8006d7e:	3a36      	subs	r2, #54	@ 0x36
 8006d80:	f24c 3150 	movw	r1, #50000	@ 0xc350
 8006d84:	428e      	cmp	r6, r1
 8006d86:	dd0c      	ble.n	8006da2 <scalbn+0x72>
 8006d88:	a31d      	add	r3, pc, #116	@ (adr r3, 8006e00 <scalbn+0xd0>)
 8006d8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d8e:	461c      	mov	r4, r3
 8006d90:	ea4f 71dc 	mov.w	r1, ip, lsr #31
 8006d94:	f361 74df 	bfi	r4, r1, #31, #1
 8006d98:	4621      	mov	r1, r4
 8006d9a:	481d      	ldr	r0, [pc, #116]	@ (8006e10 <scalbn+0xe0>)
 8006d9c:	f7f9 fc50 	bl	8000640 <__aeabi_dmul>
 8006da0:	e7e7      	b.n	8006d72 <scalbn+0x42>
 8006da2:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 8006da6:	4432      	add	r2, r6
 8006da8:	428a      	cmp	r2, r1
 8006daa:	dced      	bgt.n	8006d88 <scalbn+0x58>
 8006dac:	2a00      	cmp	r2, #0
 8006dae:	dd0a      	ble.n	8006dc6 <scalbn+0x96>
 8006db0:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 8006db4:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 8006db8:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8006dbc:	46ac      	mov	ip, r5
 8006dbe:	4658      	mov	r0, fp
 8006dc0:	4661      	mov	r1, ip
 8006dc2:	e8bd 88f0 	ldmia.w	sp!, {r4, r5, r6, r7, fp, pc}
 8006dc6:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 8006dca:	da09      	bge.n	8006de0 <scalbn+0xb0>
 8006dcc:	f00c 4300 	and.w	r3, ip, #2147483648	@ 0x80000000
 8006dd0:	f043 71d2 	orr.w	r1, r3, #27525120	@ 0x1a40000
 8006dd4:	f441 31b7 	orr.w	r1, r1, #93696	@ 0x16e00
 8006dd8:	480e      	ldr	r0, [pc, #56]	@ (8006e14 <scalbn+0xe4>)
 8006dda:	f041 011f 	orr.w	r1, r1, #31
 8006dde:	e7bd      	b.n	8006d5c <scalbn+0x2c>
 8006de0:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 8006de4:	3236      	adds	r2, #54	@ 0x36
 8006de6:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 8006dea:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8006dee:	4658      	mov	r0, fp
 8006df0:	4629      	mov	r1, r5
 8006df2:	2200      	movs	r2, #0
 8006df4:	4b08      	ldr	r3, [pc, #32]	@ (8006e18 <scalbn+0xe8>)
 8006df6:	e7d1      	b.n	8006d9c <scalbn+0x6c>
 8006df8:	c2f8f359 	.word	0xc2f8f359
 8006dfc:	01a56e1f 	.word	0x01a56e1f
 8006e00:	8800759c 	.word	0x8800759c
 8006e04:	7e37e43c 	.word	0x7e37e43c
 8006e08:	43500000 	.word	0x43500000
 8006e0c:	ffff3cb0 	.word	0xffff3cb0
 8006e10:	8800759c 	.word	0x8800759c
 8006e14:	c2f8f359 	.word	0xc2f8f359
 8006e18:	3c900000 	.word	0x3c900000

08006e1c <with_errno>:
 8006e1c:	b570      	push	{r4, r5, r6, lr}
 8006e1e:	4604      	mov	r4, r0
 8006e20:	460d      	mov	r5, r1
 8006e22:	4616      	mov	r6, r2
 8006e24:	f001 fcea 	bl	80087fc <__errno>
 8006e28:	4629      	mov	r1, r5
 8006e2a:	6006      	str	r6, [r0, #0]
 8006e2c:	4620      	mov	r0, r4
 8006e2e:	bd70      	pop	{r4, r5, r6, pc}

08006e30 <xflow>:
 8006e30:	b513      	push	{r0, r1, r4, lr}
 8006e32:	4604      	mov	r4, r0
 8006e34:	4619      	mov	r1, r3
 8006e36:	4610      	mov	r0, r2
 8006e38:	b10c      	cbz	r4, 8006e3e <xflow+0xe>
 8006e3a:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 8006e3e:	e9cd 2300 	strd	r2, r3, [sp]
 8006e42:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006e46:	f7f9 fbfb 	bl	8000640 <__aeabi_dmul>
 8006e4a:	2222      	movs	r2, #34	@ 0x22
 8006e4c:	b002      	add	sp, #8
 8006e4e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006e52:	f7ff bfe3 	b.w	8006e1c <with_errno>

08006e56 <__math_uflow>:
 8006e56:	2200      	movs	r2, #0
 8006e58:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8006e5c:	f7ff bfe8 	b.w	8006e30 <xflow>

08006e60 <__math_oflow>:
 8006e60:	2200      	movs	r2, #0
 8006e62:	f04f 43e0 	mov.w	r3, #1879048192	@ 0x70000000
 8006e66:	f7ff bfe3 	b.w	8006e30 <xflow>
	...

08006e6c <__ieee754_sqrt>:
 8006e6c:	4a67      	ldr	r2, [pc, #412]	@ (800700c <__ieee754_sqrt+0x1a0>)
 8006e6e:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006e72:	438a      	bics	r2, r1
 8006e74:	4606      	mov	r6, r0
 8006e76:	460f      	mov	r7, r1
 8006e78:	460b      	mov	r3, r1
 8006e7a:	4604      	mov	r4, r0
 8006e7c:	d10e      	bne.n	8006e9c <__ieee754_sqrt+0x30>
 8006e7e:	4602      	mov	r2, r0
 8006e80:	f7f9 fbde 	bl	8000640 <__aeabi_dmul>
 8006e84:	4602      	mov	r2, r0
 8006e86:	460b      	mov	r3, r1
 8006e88:	4630      	mov	r0, r6
 8006e8a:	4639      	mov	r1, r7
 8006e8c:	f7f9 fa22 	bl	80002d4 <__adddf3>
 8006e90:	4606      	mov	r6, r0
 8006e92:	460f      	mov	r7, r1
 8006e94:	4630      	mov	r0, r6
 8006e96:	4639      	mov	r1, r7
 8006e98:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006e9c:	2900      	cmp	r1, #0
 8006e9e:	dc0c      	bgt.n	8006eba <__ieee754_sqrt+0x4e>
 8006ea0:	f021 4200 	bic.w	r2, r1, #2147483648	@ 0x80000000
 8006ea4:	4302      	orrs	r2, r0
 8006ea6:	d0f5      	beq.n	8006e94 <__ieee754_sqrt+0x28>
 8006ea8:	b189      	cbz	r1, 8006ece <__ieee754_sqrt+0x62>
 8006eaa:	4602      	mov	r2, r0
 8006eac:	f7f9 fa10 	bl	80002d0 <__aeabi_dsub>
 8006eb0:	4602      	mov	r2, r0
 8006eb2:	460b      	mov	r3, r1
 8006eb4:	f7f9 fcee 	bl	8000894 <__aeabi_ddiv>
 8006eb8:	e7ea      	b.n	8006e90 <__ieee754_sqrt+0x24>
 8006eba:	150a      	asrs	r2, r1, #20
 8006ebc:	d115      	bne.n	8006eea <__ieee754_sqrt+0x7e>
 8006ebe:	2100      	movs	r1, #0
 8006ec0:	e009      	b.n	8006ed6 <__ieee754_sqrt+0x6a>
 8006ec2:	0ae3      	lsrs	r3, r4, #11
 8006ec4:	3a15      	subs	r2, #21
 8006ec6:	0564      	lsls	r4, r4, #21
 8006ec8:	2b00      	cmp	r3, #0
 8006eca:	d0fa      	beq.n	8006ec2 <__ieee754_sqrt+0x56>
 8006ecc:	e7f7      	b.n	8006ebe <__ieee754_sqrt+0x52>
 8006ece:	460a      	mov	r2, r1
 8006ed0:	e7fa      	b.n	8006ec8 <__ieee754_sqrt+0x5c>
 8006ed2:	005b      	lsls	r3, r3, #1
 8006ed4:	3101      	adds	r1, #1
 8006ed6:	02d8      	lsls	r0, r3, #11
 8006ed8:	d5fb      	bpl.n	8006ed2 <__ieee754_sqrt+0x66>
 8006eda:	1e48      	subs	r0, r1, #1
 8006edc:	1a12      	subs	r2, r2, r0
 8006ede:	f1c1 0020 	rsb	r0, r1, #32
 8006ee2:	fa24 f000 	lsr.w	r0, r4, r0
 8006ee6:	4303      	orrs	r3, r0
 8006ee8:	408c      	lsls	r4, r1
 8006eea:	2600      	movs	r6, #0
 8006eec:	f2a2 37ff 	subw	r7, r2, #1023	@ 0x3ff
 8006ef0:	2116      	movs	r1, #22
 8006ef2:	07d2      	lsls	r2, r2, #31
 8006ef4:	f44f 1000 	mov.w	r0, #2097152	@ 0x200000
 8006ef8:	4632      	mov	r2, r6
 8006efa:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006efe:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006f02:	bf5c      	itt	pl
 8006f04:	005b      	lslpl	r3, r3, #1
 8006f06:	eb03 73d4 	addpl.w	r3, r3, r4, lsr #31
 8006f0a:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8006f0e:	bf58      	it	pl
 8006f10:	0064      	lslpl	r4, r4, #1
 8006f12:	eb03 73d4 	add.w	r3, r3, r4, lsr #31
 8006f16:	107f      	asrs	r7, r7, #1
 8006f18:	0064      	lsls	r4, r4, #1
 8006f1a:	1815      	adds	r5, r2, r0
 8006f1c:	429d      	cmp	r5, r3
 8006f1e:	bfde      	ittt	le
 8006f20:	182a      	addle	r2, r5, r0
 8006f22:	1b5b      	suble	r3, r3, r5
 8006f24:	1836      	addle	r6, r6, r0
 8006f26:	0fe5      	lsrs	r5, r4, #31
 8006f28:	3901      	subs	r1, #1
 8006f2a:	eb05 0343 	add.w	r3, r5, r3, lsl #1
 8006f2e:	ea4f 0444 	mov.w	r4, r4, lsl #1
 8006f32:	ea4f 0050 	mov.w	r0, r0, lsr #1
 8006f36:	d1f0      	bne.n	8006f1a <__ieee754_sqrt+0xae>
 8006f38:	460d      	mov	r5, r1
 8006f3a:	f04f 0a20 	mov.w	sl, #32
 8006f3e:	f04f 4000 	mov.w	r0, #2147483648	@ 0x80000000
 8006f42:	429a      	cmp	r2, r3
 8006f44:	eb01 0c00 	add.w	ip, r1, r0
 8006f48:	db02      	blt.n	8006f50 <__ieee754_sqrt+0xe4>
 8006f4a:	d113      	bne.n	8006f74 <__ieee754_sqrt+0x108>
 8006f4c:	45a4      	cmp	ip, r4
 8006f4e:	d811      	bhi.n	8006f74 <__ieee754_sqrt+0x108>
 8006f50:	f1bc 0f00 	cmp.w	ip, #0
 8006f54:	eb0c 0100 	add.w	r1, ip, r0
 8006f58:	da42      	bge.n	8006fe0 <__ieee754_sqrt+0x174>
 8006f5a:	2900      	cmp	r1, #0
 8006f5c:	db40      	blt.n	8006fe0 <__ieee754_sqrt+0x174>
 8006f5e:	f102 0e01 	add.w	lr, r2, #1
 8006f62:	1a9b      	subs	r3, r3, r2
 8006f64:	4672      	mov	r2, lr
 8006f66:	45a4      	cmp	ip, r4
 8006f68:	bf88      	it	hi
 8006f6a:	f103 33ff 	addhi.w	r3, r3, #4294967295	@ 0xffffffff
 8006f6e:	eba4 040c 	sub.w	r4, r4, ip
 8006f72:	4405      	add	r5, r0
 8006f74:	ea4f 7cd4 	mov.w	ip, r4, lsr #31
 8006f78:	f1ba 0a01 	subs.w	sl, sl, #1
 8006f7c:	eb0c 0343 	add.w	r3, ip, r3, lsl #1
 8006f80:	ea4f 0444 	mov.w	r4, r4, lsl #1
 8006f84:	ea4f 0050 	mov.w	r0, r0, lsr #1
 8006f88:	d1db      	bne.n	8006f42 <__ieee754_sqrt+0xd6>
 8006f8a:	431c      	orrs	r4, r3
 8006f8c:	d01a      	beq.n	8006fc4 <__ieee754_sqrt+0x158>
 8006f8e:	4c20      	ldr	r4, [pc, #128]	@ (8007010 <__ieee754_sqrt+0x1a4>)
 8006f90:	f8df b080 	ldr.w	fp, [pc, #128]	@ 8007014 <__ieee754_sqrt+0x1a8>
 8006f94:	e9d4 0100 	ldrd	r0, r1, [r4]
 8006f98:	e9db 2300 	ldrd	r2, r3, [fp]
 8006f9c:	f7f9 f998 	bl	80002d0 <__aeabi_dsub>
 8006fa0:	e9d4 8900 	ldrd	r8, r9, [r4]
 8006fa4:	4602      	mov	r2, r0
 8006fa6:	460b      	mov	r3, r1
 8006fa8:	4640      	mov	r0, r8
 8006faa:	4649      	mov	r1, r9
 8006fac:	f7f9 fdc4 	bl	8000b38 <__aeabi_dcmple>
 8006fb0:	b140      	cbz	r0, 8006fc4 <__ieee754_sqrt+0x158>
 8006fb2:	e9d4 0100 	ldrd	r0, r1, [r4]
 8006fb6:	e9db 2300 	ldrd	r2, r3, [fp]
 8006fba:	f1b5 3fff 	cmp.w	r5, #4294967295	@ 0xffffffff
 8006fbe:	d111      	bne.n	8006fe4 <__ieee754_sqrt+0x178>
 8006fc0:	4655      	mov	r5, sl
 8006fc2:	3601      	adds	r6, #1
 8006fc4:	1072      	asrs	r2, r6, #1
 8006fc6:	086b      	lsrs	r3, r5, #1
 8006fc8:	07f1      	lsls	r1, r6, #31
 8006fca:	f102 527f 	add.w	r2, r2, #1069547520	@ 0x3fc00000
 8006fce:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
 8006fd2:	bf48      	it	mi
 8006fd4:	f043 4300 	orrmi.w	r3, r3, #2147483648	@ 0x80000000
 8006fd8:	4618      	mov	r0, r3
 8006fda:	eb02 5107 	add.w	r1, r2, r7, lsl #20
 8006fde:	e757      	b.n	8006e90 <__ieee754_sqrt+0x24>
 8006fe0:	4696      	mov	lr, r2
 8006fe2:	e7be      	b.n	8006f62 <__ieee754_sqrt+0xf6>
 8006fe4:	f7f9 f976 	bl	80002d4 <__adddf3>
 8006fe8:	e9d4 8900 	ldrd	r8, r9, [r4]
 8006fec:	4602      	mov	r2, r0
 8006fee:	460b      	mov	r3, r1
 8006ff0:	4640      	mov	r0, r8
 8006ff2:	4649      	mov	r1, r9
 8006ff4:	f7f9 fd96 	bl	8000b24 <__aeabi_dcmplt>
 8006ff8:	b120      	cbz	r0, 8007004 <__ieee754_sqrt+0x198>
 8006ffa:	1ca8      	adds	r0, r5, #2
 8006ffc:	bf08      	it	eq
 8006ffe:	3601      	addeq	r6, #1
 8007000:	3502      	adds	r5, #2
 8007002:	e7df      	b.n	8006fc4 <__ieee754_sqrt+0x158>
 8007004:	1c6b      	adds	r3, r5, #1
 8007006:	f023 0501 	bic.w	r5, r3, #1
 800700a:	e7db      	b.n	8006fc4 <__ieee754_sqrt+0x158>
 800700c:	7ff00000 	.word	0x7ff00000
 8007010:	20000188 	.word	0x20000188
 8007014:	20000180 	.word	0x20000180

08007018 <atof>:
 8007018:	2100      	movs	r1, #0
 800701a:	f000 bdf9 	b.w	8007c10 <strtod>

0800701e <sulp>:
 800701e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007022:	460f      	mov	r7, r1
 8007024:	4690      	mov	r8, r2
 8007026:	f003 fa47 	bl	800a4b8 <__ulp>
 800702a:	4604      	mov	r4, r0
 800702c:	460d      	mov	r5, r1
 800702e:	f1b8 0f00 	cmp.w	r8, #0
 8007032:	d011      	beq.n	8007058 <sulp+0x3a>
 8007034:	f3c7 530a 	ubfx	r3, r7, #20, #11
 8007038:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800703c:	2b00      	cmp	r3, #0
 800703e:	dd0b      	ble.n	8007058 <sulp+0x3a>
 8007040:	2400      	movs	r4, #0
 8007042:	051b      	lsls	r3, r3, #20
 8007044:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 8007048:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 800704c:	4622      	mov	r2, r4
 800704e:	462b      	mov	r3, r5
 8007050:	f7f9 faf6 	bl	8000640 <__aeabi_dmul>
 8007054:	4604      	mov	r4, r0
 8007056:	460d      	mov	r5, r1
 8007058:	4620      	mov	r0, r4
 800705a:	4629      	mov	r1, r5
 800705c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08007060 <_strtod_l>:
 8007060:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007064:	b09f      	sub	sp, #124	@ 0x7c
 8007066:	9217      	str	r2, [sp, #92]	@ 0x5c
 8007068:	2200      	movs	r2, #0
 800706a:	460c      	mov	r4, r1
 800706c:	921a      	str	r2, [sp, #104]	@ 0x68
 800706e:	f04f 0a00 	mov.w	sl, #0
 8007072:	f04f 0b00 	mov.w	fp, #0
 8007076:	460a      	mov	r2, r1
 8007078:	9005      	str	r0, [sp, #20]
 800707a:	9219      	str	r2, [sp, #100]	@ 0x64
 800707c:	7811      	ldrb	r1, [r2, #0]
 800707e:	292b      	cmp	r1, #43	@ 0x2b
 8007080:	d048      	beq.n	8007114 <_strtod_l+0xb4>
 8007082:	d836      	bhi.n	80070f2 <_strtod_l+0x92>
 8007084:	290d      	cmp	r1, #13
 8007086:	d830      	bhi.n	80070ea <_strtod_l+0x8a>
 8007088:	2908      	cmp	r1, #8
 800708a:	d830      	bhi.n	80070ee <_strtod_l+0x8e>
 800708c:	2900      	cmp	r1, #0
 800708e:	d039      	beq.n	8007104 <_strtod_l+0xa4>
 8007090:	2200      	movs	r2, #0
 8007092:	920b      	str	r2, [sp, #44]	@ 0x2c
 8007094:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 8007096:	782a      	ldrb	r2, [r5, #0]
 8007098:	2a30      	cmp	r2, #48	@ 0x30
 800709a:	f040 80b1 	bne.w	8007200 <_strtod_l+0x1a0>
 800709e:	786a      	ldrb	r2, [r5, #1]
 80070a0:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 80070a4:	2a58      	cmp	r2, #88	@ 0x58
 80070a6:	d16c      	bne.n	8007182 <_strtod_l+0x122>
 80070a8:	9302      	str	r3, [sp, #8]
 80070aa:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80070ac:	4a8e      	ldr	r2, [pc, #568]	@ (80072e8 <_strtod_l+0x288>)
 80070ae:	9301      	str	r3, [sp, #4]
 80070b0:	ab1a      	add	r3, sp, #104	@ 0x68
 80070b2:	9300      	str	r3, [sp, #0]
 80070b4:	9805      	ldr	r0, [sp, #20]
 80070b6:	ab1b      	add	r3, sp, #108	@ 0x6c
 80070b8:	a919      	add	r1, sp, #100	@ 0x64
 80070ba:	f002 faf1 	bl	80096a0 <__gethex>
 80070be:	f010 060f 	ands.w	r6, r0, #15
 80070c2:	4604      	mov	r4, r0
 80070c4:	d005      	beq.n	80070d2 <_strtod_l+0x72>
 80070c6:	2e06      	cmp	r6, #6
 80070c8:	d126      	bne.n	8007118 <_strtod_l+0xb8>
 80070ca:	2300      	movs	r3, #0
 80070cc:	3501      	adds	r5, #1
 80070ce:	9519      	str	r5, [sp, #100]	@ 0x64
 80070d0:	930b      	str	r3, [sp, #44]	@ 0x2c
 80070d2:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80070d4:	2b00      	cmp	r3, #0
 80070d6:	f040 8584 	bne.w	8007be2 <_strtod_l+0xb82>
 80070da:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80070dc:	b1bb      	cbz	r3, 800710e <_strtod_l+0xae>
 80070de:	4650      	mov	r0, sl
 80070e0:	f10b 4100 	add.w	r1, fp, #2147483648	@ 0x80000000
 80070e4:	b01f      	add	sp, #124	@ 0x7c
 80070e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80070ea:	2920      	cmp	r1, #32
 80070ec:	d1d0      	bne.n	8007090 <_strtod_l+0x30>
 80070ee:	3201      	adds	r2, #1
 80070f0:	e7c3      	b.n	800707a <_strtod_l+0x1a>
 80070f2:	292d      	cmp	r1, #45	@ 0x2d
 80070f4:	d1cc      	bne.n	8007090 <_strtod_l+0x30>
 80070f6:	2101      	movs	r1, #1
 80070f8:	910b      	str	r1, [sp, #44]	@ 0x2c
 80070fa:	1c51      	adds	r1, r2, #1
 80070fc:	9119      	str	r1, [sp, #100]	@ 0x64
 80070fe:	7852      	ldrb	r2, [r2, #1]
 8007100:	2a00      	cmp	r2, #0
 8007102:	d1c7      	bne.n	8007094 <_strtod_l+0x34>
 8007104:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8007106:	9419      	str	r4, [sp, #100]	@ 0x64
 8007108:	2b00      	cmp	r3, #0
 800710a:	f040 8568 	bne.w	8007bde <_strtod_l+0xb7e>
 800710e:	4650      	mov	r0, sl
 8007110:	4659      	mov	r1, fp
 8007112:	e7e7      	b.n	80070e4 <_strtod_l+0x84>
 8007114:	2100      	movs	r1, #0
 8007116:	e7ef      	b.n	80070f8 <_strtod_l+0x98>
 8007118:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800711a:	b13a      	cbz	r2, 800712c <_strtod_l+0xcc>
 800711c:	2135      	movs	r1, #53	@ 0x35
 800711e:	a81c      	add	r0, sp, #112	@ 0x70
 8007120:	f003 faba 	bl	800a698 <__copybits>
 8007124:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8007126:	9805      	ldr	r0, [sp, #20]
 8007128:	f002 fe94 	bl	8009e54 <_Bfree>
 800712c:	3e01      	subs	r6, #1
 800712e:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 8007130:	2e04      	cmp	r6, #4
 8007132:	d806      	bhi.n	8007142 <_strtod_l+0xe2>
 8007134:	e8df f006 	tbb	[pc, r6]
 8007138:	201d0314 	.word	0x201d0314
 800713c:	14          	.byte	0x14
 800713d:	00          	.byte	0x00
 800713e:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 8007142:	05e1      	lsls	r1, r4, #23
 8007144:	bf48      	it	mi
 8007146:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 800714a:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800714e:	0d1b      	lsrs	r3, r3, #20
 8007150:	051b      	lsls	r3, r3, #20
 8007152:	2b00      	cmp	r3, #0
 8007154:	d1bd      	bne.n	80070d2 <_strtod_l+0x72>
 8007156:	f001 fb51 	bl	80087fc <__errno>
 800715a:	2322      	movs	r3, #34	@ 0x22
 800715c:	6003      	str	r3, [r0, #0]
 800715e:	e7b8      	b.n	80070d2 <_strtod_l+0x72>
 8007160:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 8007164:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 8007168:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800716c:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8007170:	e7e7      	b.n	8007142 <_strtod_l+0xe2>
 8007172:	f8df b178 	ldr.w	fp, [pc, #376]	@ 80072ec <_strtod_l+0x28c>
 8007176:	e7e4      	b.n	8007142 <_strtod_l+0xe2>
 8007178:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 800717c:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 8007180:	e7df      	b.n	8007142 <_strtod_l+0xe2>
 8007182:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8007184:	1c5a      	adds	r2, r3, #1
 8007186:	9219      	str	r2, [sp, #100]	@ 0x64
 8007188:	785b      	ldrb	r3, [r3, #1]
 800718a:	2b30      	cmp	r3, #48	@ 0x30
 800718c:	d0f9      	beq.n	8007182 <_strtod_l+0x122>
 800718e:	2b00      	cmp	r3, #0
 8007190:	d09f      	beq.n	80070d2 <_strtod_l+0x72>
 8007192:	2301      	movs	r3, #1
 8007194:	9309      	str	r3, [sp, #36]	@ 0x24
 8007196:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8007198:	220a      	movs	r2, #10
 800719a:	930c      	str	r3, [sp, #48]	@ 0x30
 800719c:	2300      	movs	r3, #0
 800719e:	461f      	mov	r7, r3
 80071a0:	9308      	str	r3, [sp, #32]
 80071a2:	930a      	str	r3, [sp, #40]	@ 0x28
 80071a4:	9819      	ldr	r0, [sp, #100]	@ 0x64
 80071a6:	7805      	ldrb	r5, [r0, #0]
 80071a8:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 80071ac:	b2d9      	uxtb	r1, r3
 80071ae:	2909      	cmp	r1, #9
 80071b0:	d928      	bls.n	8007204 <_strtod_l+0x1a4>
 80071b2:	2201      	movs	r2, #1
 80071b4:	494e      	ldr	r1, [pc, #312]	@ (80072f0 <_strtod_l+0x290>)
 80071b6:	f001 fac4 	bl	8008742 <strncmp>
 80071ba:	2800      	cmp	r0, #0
 80071bc:	d032      	beq.n	8007224 <_strtod_l+0x1c4>
 80071be:	2000      	movs	r0, #0
 80071c0:	462a      	mov	r2, r5
 80071c2:	4681      	mov	r9, r0
 80071c4:	463d      	mov	r5, r7
 80071c6:	4603      	mov	r3, r0
 80071c8:	2a65      	cmp	r2, #101	@ 0x65
 80071ca:	d001      	beq.n	80071d0 <_strtod_l+0x170>
 80071cc:	2a45      	cmp	r2, #69	@ 0x45
 80071ce:	d114      	bne.n	80071fa <_strtod_l+0x19a>
 80071d0:	b91d      	cbnz	r5, 80071da <_strtod_l+0x17a>
 80071d2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80071d4:	4302      	orrs	r2, r0
 80071d6:	d095      	beq.n	8007104 <_strtod_l+0xa4>
 80071d8:	2500      	movs	r5, #0
 80071da:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 80071dc:	1c62      	adds	r2, r4, #1
 80071de:	9219      	str	r2, [sp, #100]	@ 0x64
 80071e0:	7862      	ldrb	r2, [r4, #1]
 80071e2:	2a2b      	cmp	r2, #43	@ 0x2b
 80071e4:	d077      	beq.n	80072d6 <_strtod_l+0x276>
 80071e6:	2a2d      	cmp	r2, #45	@ 0x2d
 80071e8:	d07b      	beq.n	80072e2 <_strtod_l+0x282>
 80071ea:	f04f 0c00 	mov.w	ip, #0
 80071ee:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 80071f2:	2909      	cmp	r1, #9
 80071f4:	f240 8082 	bls.w	80072fc <_strtod_l+0x29c>
 80071f8:	9419      	str	r4, [sp, #100]	@ 0x64
 80071fa:	f04f 0800 	mov.w	r8, #0
 80071fe:	e0a2      	b.n	8007346 <_strtod_l+0x2e6>
 8007200:	2300      	movs	r3, #0
 8007202:	e7c7      	b.n	8007194 <_strtod_l+0x134>
 8007204:	2f08      	cmp	r7, #8
 8007206:	bfd5      	itete	le
 8007208:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 800720a:	9908      	ldrgt	r1, [sp, #32]
 800720c:	fb02 3301 	mlale	r3, r2, r1, r3
 8007210:	fb02 3301 	mlagt	r3, r2, r1, r3
 8007214:	f100 0001 	add.w	r0, r0, #1
 8007218:	bfd4      	ite	le
 800721a:	930a      	strle	r3, [sp, #40]	@ 0x28
 800721c:	9308      	strgt	r3, [sp, #32]
 800721e:	3701      	adds	r7, #1
 8007220:	9019      	str	r0, [sp, #100]	@ 0x64
 8007222:	e7bf      	b.n	80071a4 <_strtod_l+0x144>
 8007224:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8007226:	1c5a      	adds	r2, r3, #1
 8007228:	9219      	str	r2, [sp, #100]	@ 0x64
 800722a:	785a      	ldrb	r2, [r3, #1]
 800722c:	b37f      	cbz	r7, 800728e <_strtod_l+0x22e>
 800722e:	4681      	mov	r9, r0
 8007230:	463d      	mov	r5, r7
 8007232:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 8007236:	2b09      	cmp	r3, #9
 8007238:	d912      	bls.n	8007260 <_strtod_l+0x200>
 800723a:	2301      	movs	r3, #1
 800723c:	e7c4      	b.n	80071c8 <_strtod_l+0x168>
 800723e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8007240:	3001      	adds	r0, #1
 8007242:	1c5a      	adds	r2, r3, #1
 8007244:	9219      	str	r2, [sp, #100]	@ 0x64
 8007246:	785a      	ldrb	r2, [r3, #1]
 8007248:	2a30      	cmp	r2, #48	@ 0x30
 800724a:	d0f8      	beq.n	800723e <_strtod_l+0x1de>
 800724c:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 8007250:	2b08      	cmp	r3, #8
 8007252:	f200 84cb 	bhi.w	8007bec <_strtod_l+0xb8c>
 8007256:	4681      	mov	r9, r0
 8007258:	2000      	movs	r0, #0
 800725a:	4605      	mov	r5, r0
 800725c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800725e:	930c      	str	r3, [sp, #48]	@ 0x30
 8007260:	3a30      	subs	r2, #48	@ 0x30
 8007262:	f100 0301 	add.w	r3, r0, #1
 8007266:	d02a      	beq.n	80072be <_strtod_l+0x25e>
 8007268:	4499      	add	r9, r3
 800726a:	210a      	movs	r1, #10
 800726c:	462b      	mov	r3, r5
 800726e:	eb00 0c05 	add.w	ip, r0, r5
 8007272:	4563      	cmp	r3, ip
 8007274:	d10d      	bne.n	8007292 <_strtod_l+0x232>
 8007276:	1c69      	adds	r1, r5, #1
 8007278:	4401      	add	r1, r0
 800727a:	4428      	add	r0, r5
 800727c:	2808      	cmp	r0, #8
 800727e:	dc16      	bgt.n	80072ae <_strtod_l+0x24e>
 8007280:	230a      	movs	r3, #10
 8007282:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8007284:	fb03 2300 	mla	r3, r3, r0, r2
 8007288:	930a      	str	r3, [sp, #40]	@ 0x28
 800728a:	2300      	movs	r3, #0
 800728c:	e018      	b.n	80072c0 <_strtod_l+0x260>
 800728e:	4638      	mov	r0, r7
 8007290:	e7da      	b.n	8007248 <_strtod_l+0x1e8>
 8007292:	2b08      	cmp	r3, #8
 8007294:	f103 0301 	add.w	r3, r3, #1
 8007298:	dc03      	bgt.n	80072a2 <_strtod_l+0x242>
 800729a:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 800729c:	434e      	muls	r6, r1
 800729e:	960a      	str	r6, [sp, #40]	@ 0x28
 80072a0:	e7e7      	b.n	8007272 <_strtod_l+0x212>
 80072a2:	2b10      	cmp	r3, #16
 80072a4:	bfde      	ittt	le
 80072a6:	9e08      	ldrle	r6, [sp, #32]
 80072a8:	434e      	mulle	r6, r1
 80072aa:	9608      	strle	r6, [sp, #32]
 80072ac:	e7e1      	b.n	8007272 <_strtod_l+0x212>
 80072ae:	280f      	cmp	r0, #15
 80072b0:	dceb      	bgt.n	800728a <_strtod_l+0x22a>
 80072b2:	230a      	movs	r3, #10
 80072b4:	9808      	ldr	r0, [sp, #32]
 80072b6:	fb03 2300 	mla	r3, r3, r0, r2
 80072ba:	9308      	str	r3, [sp, #32]
 80072bc:	e7e5      	b.n	800728a <_strtod_l+0x22a>
 80072be:	4629      	mov	r1, r5
 80072c0:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80072c2:	460d      	mov	r5, r1
 80072c4:	1c50      	adds	r0, r2, #1
 80072c6:	9019      	str	r0, [sp, #100]	@ 0x64
 80072c8:	7852      	ldrb	r2, [r2, #1]
 80072ca:	4618      	mov	r0, r3
 80072cc:	e7b1      	b.n	8007232 <_strtod_l+0x1d2>
 80072ce:	f04f 0900 	mov.w	r9, #0
 80072d2:	2301      	movs	r3, #1
 80072d4:	e77d      	b.n	80071d2 <_strtod_l+0x172>
 80072d6:	f04f 0c00 	mov.w	ip, #0
 80072da:	1ca2      	adds	r2, r4, #2
 80072dc:	9219      	str	r2, [sp, #100]	@ 0x64
 80072de:	78a2      	ldrb	r2, [r4, #2]
 80072e0:	e785      	b.n	80071ee <_strtod_l+0x18e>
 80072e2:	f04f 0c01 	mov.w	ip, #1
 80072e6:	e7f8      	b.n	80072da <_strtod_l+0x27a>
 80072e8:	0800b528 	.word	0x0800b528
 80072ec:	7ff00000 	.word	0x7ff00000
 80072f0:	0800b510 	.word	0x0800b510
 80072f4:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80072f6:	1c51      	adds	r1, r2, #1
 80072f8:	9119      	str	r1, [sp, #100]	@ 0x64
 80072fa:	7852      	ldrb	r2, [r2, #1]
 80072fc:	2a30      	cmp	r2, #48	@ 0x30
 80072fe:	d0f9      	beq.n	80072f4 <_strtod_l+0x294>
 8007300:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 8007304:	2908      	cmp	r1, #8
 8007306:	f63f af78 	bhi.w	80071fa <_strtod_l+0x19a>
 800730a:	f04f 080a 	mov.w	r8, #10
 800730e:	3a30      	subs	r2, #48	@ 0x30
 8007310:	920e      	str	r2, [sp, #56]	@ 0x38
 8007312:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8007314:	920f      	str	r2, [sp, #60]	@ 0x3c
 8007316:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8007318:	1c56      	adds	r6, r2, #1
 800731a:	9619      	str	r6, [sp, #100]	@ 0x64
 800731c:	7852      	ldrb	r2, [r2, #1]
 800731e:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 8007322:	f1be 0f09 	cmp.w	lr, #9
 8007326:	d939      	bls.n	800739c <_strtod_l+0x33c>
 8007328:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800732a:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 800732e:	1a76      	subs	r6, r6, r1
 8007330:	2e08      	cmp	r6, #8
 8007332:	dc03      	bgt.n	800733c <_strtod_l+0x2dc>
 8007334:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8007336:	4588      	cmp	r8, r1
 8007338:	bfa8      	it	ge
 800733a:	4688      	movge	r8, r1
 800733c:	f1bc 0f00 	cmp.w	ip, #0
 8007340:	d001      	beq.n	8007346 <_strtod_l+0x2e6>
 8007342:	f1c8 0800 	rsb	r8, r8, #0
 8007346:	2d00      	cmp	r5, #0
 8007348:	d14e      	bne.n	80073e8 <_strtod_l+0x388>
 800734a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800734c:	4308      	orrs	r0, r1
 800734e:	f47f aec0 	bne.w	80070d2 <_strtod_l+0x72>
 8007352:	2b00      	cmp	r3, #0
 8007354:	f47f aed6 	bne.w	8007104 <_strtod_l+0xa4>
 8007358:	2a69      	cmp	r2, #105	@ 0x69
 800735a:	d028      	beq.n	80073ae <_strtod_l+0x34e>
 800735c:	dc25      	bgt.n	80073aa <_strtod_l+0x34a>
 800735e:	2a49      	cmp	r2, #73	@ 0x49
 8007360:	d025      	beq.n	80073ae <_strtod_l+0x34e>
 8007362:	2a4e      	cmp	r2, #78	@ 0x4e
 8007364:	f47f aece 	bne.w	8007104 <_strtod_l+0xa4>
 8007368:	499a      	ldr	r1, [pc, #616]	@ (80075d4 <_strtod_l+0x574>)
 800736a:	a819      	add	r0, sp, #100	@ 0x64
 800736c:	f002 fbba 	bl	8009ae4 <__match>
 8007370:	2800      	cmp	r0, #0
 8007372:	f43f aec7 	beq.w	8007104 <_strtod_l+0xa4>
 8007376:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8007378:	781b      	ldrb	r3, [r3, #0]
 800737a:	2b28      	cmp	r3, #40	@ 0x28
 800737c:	d12e      	bne.n	80073dc <_strtod_l+0x37c>
 800737e:	4996      	ldr	r1, [pc, #600]	@ (80075d8 <_strtod_l+0x578>)
 8007380:	aa1c      	add	r2, sp, #112	@ 0x70
 8007382:	a819      	add	r0, sp, #100	@ 0x64
 8007384:	f002 fbc2 	bl	8009b0c <__hexnan>
 8007388:	2805      	cmp	r0, #5
 800738a:	d127      	bne.n	80073dc <_strtod_l+0x37c>
 800738c:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800738e:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 8007392:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 8007396:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 800739a:	e69a      	b.n	80070d2 <_strtod_l+0x72>
 800739c:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800739e:	fb08 2101 	mla	r1, r8, r1, r2
 80073a2:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 80073a6:	920e      	str	r2, [sp, #56]	@ 0x38
 80073a8:	e7b5      	b.n	8007316 <_strtod_l+0x2b6>
 80073aa:	2a6e      	cmp	r2, #110	@ 0x6e
 80073ac:	e7da      	b.n	8007364 <_strtod_l+0x304>
 80073ae:	498b      	ldr	r1, [pc, #556]	@ (80075dc <_strtod_l+0x57c>)
 80073b0:	a819      	add	r0, sp, #100	@ 0x64
 80073b2:	f002 fb97 	bl	8009ae4 <__match>
 80073b6:	2800      	cmp	r0, #0
 80073b8:	f43f aea4 	beq.w	8007104 <_strtod_l+0xa4>
 80073bc:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80073be:	4988      	ldr	r1, [pc, #544]	@ (80075e0 <_strtod_l+0x580>)
 80073c0:	3b01      	subs	r3, #1
 80073c2:	a819      	add	r0, sp, #100	@ 0x64
 80073c4:	9319      	str	r3, [sp, #100]	@ 0x64
 80073c6:	f002 fb8d 	bl	8009ae4 <__match>
 80073ca:	b910      	cbnz	r0, 80073d2 <_strtod_l+0x372>
 80073cc:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80073ce:	3301      	adds	r3, #1
 80073d0:	9319      	str	r3, [sp, #100]	@ 0x64
 80073d2:	f04f 0a00 	mov.w	sl, #0
 80073d6:	f8df b20c 	ldr.w	fp, [pc, #524]	@ 80075e4 <_strtod_l+0x584>
 80073da:	e67a      	b.n	80070d2 <_strtod_l+0x72>
 80073dc:	4882      	ldr	r0, [pc, #520]	@ (80075e8 <_strtod_l+0x588>)
 80073de:	f001 fa57 	bl	8008890 <nan>
 80073e2:	4682      	mov	sl, r0
 80073e4:	468b      	mov	fp, r1
 80073e6:	e674      	b.n	80070d2 <_strtod_l+0x72>
 80073e8:	eba8 0309 	sub.w	r3, r8, r9
 80073ec:	2f00      	cmp	r7, #0
 80073ee:	bf08      	it	eq
 80073f0:	462f      	moveq	r7, r5
 80073f2:	980a      	ldr	r0, [sp, #40]	@ 0x28
 80073f4:	2d10      	cmp	r5, #16
 80073f6:	462c      	mov	r4, r5
 80073f8:	9309      	str	r3, [sp, #36]	@ 0x24
 80073fa:	bfa8      	it	ge
 80073fc:	2410      	movge	r4, #16
 80073fe:	f7f9 f8a5 	bl	800054c <__aeabi_ui2d>
 8007402:	2d09      	cmp	r5, #9
 8007404:	4682      	mov	sl, r0
 8007406:	468b      	mov	fp, r1
 8007408:	dc11      	bgt.n	800742e <_strtod_l+0x3ce>
 800740a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800740c:	2b00      	cmp	r3, #0
 800740e:	f43f ae60 	beq.w	80070d2 <_strtod_l+0x72>
 8007412:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007414:	dd76      	ble.n	8007504 <_strtod_l+0x4a4>
 8007416:	2b16      	cmp	r3, #22
 8007418:	dc5d      	bgt.n	80074d6 <_strtod_l+0x476>
 800741a:	4974      	ldr	r1, [pc, #464]	@ (80075ec <_strtod_l+0x58c>)
 800741c:	4652      	mov	r2, sl
 800741e:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8007422:	465b      	mov	r3, fp
 8007424:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007428:	f7f9 f90a 	bl	8000640 <__aeabi_dmul>
 800742c:	e7d9      	b.n	80073e2 <_strtod_l+0x382>
 800742e:	4b6f      	ldr	r3, [pc, #444]	@ (80075ec <_strtod_l+0x58c>)
 8007430:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8007434:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 8007438:	f7f9 f902 	bl	8000640 <__aeabi_dmul>
 800743c:	4682      	mov	sl, r0
 800743e:	9808      	ldr	r0, [sp, #32]
 8007440:	468b      	mov	fp, r1
 8007442:	f7f9 f883 	bl	800054c <__aeabi_ui2d>
 8007446:	4602      	mov	r2, r0
 8007448:	460b      	mov	r3, r1
 800744a:	4650      	mov	r0, sl
 800744c:	4659      	mov	r1, fp
 800744e:	f7f8 ff41 	bl	80002d4 <__adddf3>
 8007452:	2d0f      	cmp	r5, #15
 8007454:	4682      	mov	sl, r0
 8007456:	468b      	mov	fp, r1
 8007458:	ddd7      	ble.n	800740a <_strtod_l+0x3aa>
 800745a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800745c:	1b2c      	subs	r4, r5, r4
 800745e:	441c      	add	r4, r3
 8007460:	2c00      	cmp	r4, #0
 8007462:	f340 8096 	ble.w	8007592 <_strtod_l+0x532>
 8007466:	f014 030f 	ands.w	r3, r4, #15
 800746a:	d00a      	beq.n	8007482 <_strtod_l+0x422>
 800746c:	495f      	ldr	r1, [pc, #380]	@ (80075ec <_strtod_l+0x58c>)
 800746e:	4652      	mov	r2, sl
 8007470:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8007474:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007478:	465b      	mov	r3, fp
 800747a:	f7f9 f8e1 	bl	8000640 <__aeabi_dmul>
 800747e:	4682      	mov	sl, r0
 8007480:	468b      	mov	fp, r1
 8007482:	f034 040f 	bics.w	r4, r4, #15
 8007486:	d073      	beq.n	8007570 <_strtod_l+0x510>
 8007488:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 800748c:	dd48      	ble.n	8007520 <_strtod_l+0x4c0>
 800748e:	2400      	movs	r4, #0
 8007490:	46a0      	mov	r8, r4
 8007492:	46a1      	mov	r9, r4
 8007494:	940a      	str	r4, [sp, #40]	@ 0x28
 8007496:	2322      	movs	r3, #34	@ 0x22
 8007498:	f04f 0a00 	mov.w	sl, #0
 800749c:	9a05      	ldr	r2, [sp, #20]
 800749e:	f8df b144 	ldr.w	fp, [pc, #324]	@ 80075e4 <_strtod_l+0x584>
 80074a2:	6013      	str	r3, [r2, #0]
 80074a4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80074a6:	2b00      	cmp	r3, #0
 80074a8:	f43f ae13 	beq.w	80070d2 <_strtod_l+0x72>
 80074ac:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80074ae:	9805      	ldr	r0, [sp, #20]
 80074b0:	f002 fcd0 	bl	8009e54 <_Bfree>
 80074b4:	4649      	mov	r1, r9
 80074b6:	9805      	ldr	r0, [sp, #20]
 80074b8:	f002 fccc 	bl	8009e54 <_Bfree>
 80074bc:	4641      	mov	r1, r8
 80074be:	9805      	ldr	r0, [sp, #20]
 80074c0:	f002 fcc8 	bl	8009e54 <_Bfree>
 80074c4:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80074c6:	9805      	ldr	r0, [sp, #20]
 80074c8:	f002 fcc4 	bl	8009e54 <_Bfree>
 80074cc:	4621      	mov	r1, r4
 80074ce:	9805      	ldr	r0, [sp, #20]
 80074d0:	f002 fcc0 	bl	8009e54 <_Bfree>
 80074d4:	e5fd      	b.n	80070d2 <_strtod_l+0x72>
 80074d6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80074d8:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 80074dc:	4293      	cmp	r3, r2
 80074de:	dbbc      	blt.n	800745a <_strtod_l+0x3fa>
 80074e0:	4c42      	ldr	r4, [pc, #264]	@ (80075ec <_strtod_l+0x58c>)
 80074e2:	f1c5 050f 	rsb	r5, r5, #15
 80074e6:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 80074ea:	4652      	mov	r2, sl
 80074ec:	e9d1 0100 	ldrd	r0, r1, [r1]
 80074f0:	465b      	mov	r3, fp
 80074f2:	f7f9 f8a5 	bl	8000640 <__aeabi_dmul>
 80074f6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80074f8:	1b5d      	subs	r5, r3, r5
 80074fa:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 80074fe:	e9d4 2300 	ldrd	r2, r3, [r4]
 8007502:	e791      	b.n	8007428 <_strtod_l+0x3c8>
 8007504:	3316      	adds	r3, #22
 8007506:	dba8      	blt.n	800745a <_strtod_l+0x3fa>
 8007508:	4b38      	ldr	r3, [pc, #224]	@ (80075ec <_strtod_l+0x58c>)
 800750a:	eba9 0808 	sub.w	r8, r9, r8
 800750e:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 8007512:	4650      	mov	r0, sl
 8007514:	e9d8 2300 	ldrd	r2, r3, [r8]
 8007518:	4659      	mov	r1, fp
 800751a:	f7f9 f9bb 	bl	8000894 <__aeabi_ddiv>
 800751e:	e760      	b.n	80073e2 <_strtod_l+0x382>
 8007520:	4b33      	ldr	r3, [pc, #204]	@ (80075f0 <_strtod_l+0x590>)
 8007522:	4650      	mov	r0, sl
 8007524:	9308      	str	r3, [sp, #32]
 8007526:	2300      	movs	r3, #0
 8007528:	4659      	mov	r1, fp
 800752a:	461e      	mov	r6, r3
 800752c:	1124      	asrs	r4, r4, #4
 800752e:	2c01      	cmp	r4, #1
 8007530:	dc21      	bgt.n	8007576 <_strtod_l+0x516>
 8007532:	b10b      	cbz	r3, 8007538 <_strtod_l+0x4d8>
 8007534:	4682      	mov	sl, r0
 8007536:	468b      	mov	fp, r1
 8007538:	492d      	ldr	r1, [pc, #180]	@ (80075f0 <_strtod_l+0x590>)
 800753a:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 800753e:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 8007542:	4652      	mov	r2, sl
 8007544:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007548:	465b      	mov	r3, fp
 800754a:	f7f9 f879 	bl	8000640 <__aeabi_dmul>
 800754e:	4b25      	ldr	r3, [pc, #148]	@ (80075e4 <_strtod_l+0x584>)
 8007550:	460a      	mov	r2, r1
 8007552:	400b      	ands	r3, r1
 8007554:	4927      	ldr	r1, [pc, #156]	@ (80075f4 <_strtod_l+0x594>)
 8007556:	4682      	mov	sl, r0
 8007558:	428b      	cmp	r3, r1
 800755a:	d898      	bhi.n	800748e <_strtod_l+0x42e>
 800755c:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 8007560:	428b      	cmp	r3, r1
 8007562:	bf86      	itte	hi
 8007564:	f04f 3aff 	movhi.w	sl, #4294967295	@ 0xffffffff
 8007568:	f8df b08c 	ldrhi.w	fp, [pc, #140]	@ 80075f8 <_strtod_l+0x598>
 800756c:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 8007570:	2300      	movs	r3, #0
 8007572:	9308      	str	r3, [sp, #32]
 8007574:	e07a      	b.n	800766c <_strtod_l+0x60c>
 8007576:	07e2      	lsls	r2, r4, #31
 8007578:	d505      	bpl.n	8007586 <_strtod_l+0x526>
 800757a:	9b08      	ldr	r3, [sp, #32]
 800757c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007580:	f7f9 f85e 	bl	8000640 <__aeabi_dmul>
 8007584:	2301      	movs	r3, #1
 8007586:	9a08      	ldr	r2, [sp, #32]
 8007588:	3601      	adds	r6, #1
 800758a:	3208      	adds	r2, #8
 800758c:	1064      	asrs	r4, r4, #1
 800758e:	9208      	str	r2, [sp, #32]
 8007590:	e7cd      	b.n	800752e <_strtod_l+0x4ce>
 8007592:	d0ed      	beq.n	8007570 <_strtod_l+0x510>
 8007594:	4264      	negs	r4, r4
 8007596:	f014 020f 	ands.w	r2, r4, #15
 800759a:	d00a      	beq.n	80075b2 <_strtod_l+0x552>
 800759c:	4b13      	ldr	r3, [pc, #76]	@ (80075ec <_strtod_l+0x58c>)
 800759e:	4650      	mov	r0, sl
 80075a0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80075a4:	4659      	mov	r1, fp
 80075a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80075aa:	f7f9 f973 	bl	8000894 <__aeabi_ddiv>
 80075ae:	4682      	mov	sl, r0
 80075b0:	468b      	mov	fp, r1
 80075b2:	1124      	asrs	r4, r4, #4
 80075b4:	d0dc      	beq.n	8007570 <_strtod_l+0x510>
 80075b6:	2c1f      	cmp	r4, #31
 80075b8:	dd20      	ble.n	80075fc <_strtod_l+0x59c>
 80075ba:	2400      	movs	r4, #0
 80075bc:	46a0      	mov	r8, r4
 80075be:	46a1      	mov	r9, r4
 80075c0:	940a      	str	r4, [sp, #40]	@ 0x28
 80075c2:	2322      	movs	r3, #34	@ 0x22
 80075c4:	9a05      	ldr	r2, [sp, #20]
 80075c6:	f04f 0a00 	mov.w	sl, #0
 80075ca:	f04f 0b00 	mov.w	fp, #0
 80075ce:	6013      	str	r3, [r2, #0]
 80075d0:	e768      	b.n	80074a4 <_strtod_l+0x444>
 80075d2:	bf00      	nop
 80075d4:	0800b575 	.word	0x0800b575
 80075d8:	0800b514 	.word	0x0800b514
 80075dc:	0800b56d 	.word	0x0800b56d
 80075e0:	0800b5a7 	.word	0x0800b5a7
 80075e4:	7ff00000 	.word	0x7ff00000
 80075e8:	0800b935 	.word	0x0800b935
 80075ec:	0800b720 	.word	0x0800b720
 80075f0:	0800b6f8 	.word	0x0800b6f8
 80075f4:	7ca00000 	.word	0x7ca00000
 80075f8:	7fefffff 	.word	0x7fefffff
 80075fc:	f014 0310 	ands.w	r3, r4, #16
 8007600:	bf18      	it	ne
 8007602:	236a      	movne	r3, #106	@ 0x6a
 8007604:	4650      	mov	r0, sl
 8007606:	9308      	str	r3, [sp, #32]
 8007608:	4659      	mov	r1, fp
 800760a:	2300      	movs	r3, #0
 800760c:	4ea9      	ldr	r6, [pc, #676]	@ (80078b4 <_strtod_l+0x854>)
 800760e:	07e2      	lsls	r2, r4, #31
 8007610:	d504      	bpl.n	800761c <_strtod_l+0x5bc>
 8007612:	e9d6 2300 	ldrd	r2, r3, [r6]
 8007616:	f7f9 f813 	bl	8000640 <__aeabi_dmul>
 800761a:	2301      	movs	r3, #1
 800761c:	1064      	asrs	r4, r4, #1
 800761e:	f106 0608 	add.w	r6, r6, #8
 8007622:	d1f4      	bne.n	800760e <_strtod_l+0x5ae>
 8007624:	b10b      	cbz	r3, 800762a <_strtod_l+0x5ca>
 8007626:	4682      	mov	sl, r0
 8007628:	468b      	mov	fp, r1
 800762a:	9b08      	ldr	r3, [sp, #32]
 800762c:	b1b3      	cbz	r3, 800765c <_strtod_l+0x5fc>
 800762e:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8007632:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 8007636:	2b00      	cmp	r3, #0
 8007638:	4659      	mov	r1, fp
 800763a:	dd0f      	ble.n	800765c <_strtod_l+0x5fc>
 800763c:	2b1f      	cmp	r3, #31
 800763e:	dd57      	ble.n	80076f0 <_strtod_l+0x690>
 8007640:	2b34      	cmp	r3, #52	@ 0x34
 8007642:	bfd8      	it	le
 8007644:	f04f 33ff 	movle.w	r3, #4294967295	@ 0xffffffff
 8007648:	f04f 0a00 	mov.w	sl, #0
 800764c:	bfcf      	iteee	gt
 800764e:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 8007652:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 8007656:	4093      	lslle	r3, r2
 8007658:	ea03 0b01 	andle.w	fp, r3, r1
 800765c:	2200      	movs	r2, #0
 800765e:	2300      	movs	r3, #0
 8007660:	4650      	mov	r0, sl
 8007662:	4659      	mov	r1, fp
 8007664:	f7f9 fa54 	bl	8000b10 <__aeabi_dcmpeq>
 8007668:	2800      	cmp	r0, #0
 800766a:	d1a6      	bne.n	80075ba <_strtod_l+0x55a>
 800766c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800766e:	463a      	mov	r2, r7
 8007670:	9300      	str	r3, [sp, #0]
 8007672:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8007674:	462b      	mov	r3, r5
 8007676:	9805      	ldr	r0, [sp, #20]
 8007678:	f002 fc54 	bl	8009f24 <__s2b>
 800767c:	900a      	str	r0, [sp, #40]	@ 0x28
 800767e:	2800      	cmp	r0, #0
 8007680:	f43f af05 	beq.w	800748e <_strtod_l+0x42e>
 8007684:	2400      	movs	r4, #0
 8007686:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007688:	eba9 0308 	sub.w	r3, r9, r8
 800768c:	2a00      	cmp	r2, #0
 800768e:	bfa8      	it	ge
 8007690:	2300      	movge	r3, #0
 8007692:	46a0      	mov	r8, r4
 8007694:	9312      	str	r3, [sp, #72]	@ 0x48
 8007696:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800769a:	9316      	str	r3, [sp, #88]	@ 0x58
 800769c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800769e:	9805      	ldr	r0, [sp, #20]
 80076a0:	6859      	ldr	r1, [r3, #4]
 80076a2:	f002 fb97 	bl	8009dd4 <_Balloc>
 80076a6:	4681      	mov	r9, r0
 80076a8:	2800      	cmp	r0, #0
 80076aa:	f43f aef4 	beq.w	8007496 <_strtod_l+0x436>
 80076ae:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80076b0:	300c      	adds	r0, #12
 80076b2:	691a      	ldr	r2, [r3, #16]
 80076b4:	f103 010c 	add.w	r1, r3, #12
 80076b8:	3202      	adds	r2, #2
 80076ba:	0092      	lsls	r2, r2, #2
 80076bc:	f001 f8d9 	bl	8008872 <memcpy>
 80076c0:	ab1c      	add	r3, sp, #112	@ 0x70
 80076c2:	9301      	str	r3, [sp, #4]
 80076c4:	ab1b      	add	r3, sp, #108	@ 0x6c
 80076c6:	9300      	str	r3, [sp, #0]
 80076c8:	4652      	mov	r2, sl
 80076ca:	465b      	mov	r3, fp
 80076cc:	9805      	ldr	r0, [sp, #20]
 80076ce:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 80076d2:	f002 ff59 	bl	800a588 <__d2b>
 80076d6:	901a      	str	r0, [sp, #104]	@ 0x68
 80076d8:	2800      	cmp	r0, #0
 80076da:	f43f aedc 	beq.w	8007496 <_strtod_l+0x436>
 80076de:	2101      	movs	r1, #1
 80076e0:	9805      	ldr	r0, [sp, #20]
 80076e2:	f002 fcb5 	bl	800a050 <__i2b>
 80076e6:	4680      	mov	r8, r0
 80076e8:	b948      	cbnz	r0, 80076fe <_strtod_l+0x69e>
 80076ea:	f04f 0800 	mov.w	r8, #0
 80076ee:	e6d2      	b.n	8007496 <_strtod_l+0x436>
 80076f0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80076f4:	fa02 f303 	lsl.w	r3, r2, r3
 80076f8:	ea03 0a0a 	and.w	sl, r3, sl
 80076fc:	e7ae      	b.n	800765c <_strtod_l+0x5fc>
 80076fe:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 8007700:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 8007702:	2d00      	cmp	r5, #0
 8007704:	bfab      	itete	ge
 8007706:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 8007708:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 800770a:	18ef      	addge	r7, r5, r3
 800770c:	1b5e      	sublt	r6, r3, r5
 800770e:	9b08      	ldr	r3, [sp, #32]
 8007710:	bfa8      	it	ge
 8007712:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 8007714:	eba5 0503 	sub.w	r5, r5, r3
 8007718:	4415      	add	r5, r2
 800771a:	4b67      	ldr	r3, [pc, #412]	@ (80078b8 <_strtod_l+0x858>)
 800771c:	f105 35ff 	add.w	r5, r5, #4294967295	@ 0xffffffff
 8007720:	bfb8      	it	lt
 8007722:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 8007724:	429d      	cmp	r5, r3
 8007726:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 800772a:	da50      	bge.n	80077ce <_strtod_l+0x76e>
 800772c:	1b5b      	subs	r3, r3, r5
 800772e:	2b1f      	cmp	r3, #31
 8007730:	f04f 0101 	mov.w	r1, #1
 8007734:	eba2 0203 	sub.w	r2, r2, r3
 8007738:	dc3d      	bgt.n	80077b6 <_strtod_l+0x756>
 800773a:	fa01 f303 	lsl.w	r3, r1, r3
 800773e:	9313      	str	r3, [sp, #76]	@ 0x4c
 8007740:	2300      	movs	r3, #0
 8007742:	9310      	str	r3, [sp, #64]	@ 0x40
 8007744:	18bd      	adds	r5, r7, r2
 8007746:	9b08      	ldr	r3, [sp, #32]
 8007748:	42af      	cmp	r7, r5
 800774a:	4416      	add	r6, r2
 800774c:	441e      	add	r6, r3
 800774e:	463b      	mov	r3, r7
 8007750:	bfa8      	it	ge
 8007752:	462b      	movge	r3, r5
 8007754:	42b3      	cmp	r3, r6
 8007756:	bfa8      	it	ge
 8007758:	4633      	movge	r3, r6
 800775a:	2b00      	cmp	r3, #0
 800775c:	bfc2      	ittt	gt
 800775e:	1aed      	subgt	r5, r5, r3
 8007760:	1af6      	subgt	r6, r6, r3
 8007762:	1aff      	subgt	r7, r7, r3
 8007764:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8007766:	2b00      	cmp	r3, #0
 8007768:	dd16      	ble.n	8007798 <_strtod_l+0x738>
 800776a:	4641      	mov	r1, r8
 800776c:	461a      	mov	r2, r3
 800776e:	9805      	ldr	r0, [sp, #20]
 8007770:	f002 fd2c 	bl	800a1cc <__pow5mult>
 8007774:	4680      	mov	r8, r0
 8007776:	2800      	cmp	r0, #0
 8007778:	d0b7      	beq.n	80076ea <_strtod_l+0x68a>
 800777a:	4601      	mov	r1, r0
 800777c:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800777e:	9805      	ldr	r0, [sp, #20]
 8007780:	f002 fc7c 	bl	800a07c <__multiply>
 8007784:	900e      	str	r0, [sp, #56]	@ 0x38
 8007786:	2800      	cmp	r0, #0
 8007788:	f43f ae85 	beq.w	8007496 <_strtod_l+0x436>
 800778c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800778e:	9805      	ldr	r0, [sp, #20]
 8007790:	f002 fb60 	bl	8009e54 <_Bfree>
 8007794:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007796:	931a      	str	r3, [sp, #104]	@ 0x68
 8007798:	2d00      	cmp	r5, #0
 800779a:	dc1d      	bgt.n	80077d8 <_strtod_l+0x778>
 800779c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800779e:	2b00      	cmp	r3, #0
 80077a0:	dd23      	ble.n	80077ea <_strtod_l+0x78a>
 80077a2:	4649      	mov	r1, r9
 80077a4:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 80077a6:	9805      	ldr	r0, [sp, #20]
 80077a8:	f002 fd10 	bl	800a1cc <__pow5mult>
 80077ac:	4681      	mov	r9, r0
 80077ae:	b9e0      	cbnz	r0, 80077ea <_strtod_l+0x78a>
 80077b0:	f04f 0900 	mov.w	r9, #0
 80077b4:	e66f      	b.n	8007496 <_strtod_l+0x436>
 80077b6:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 80077ba:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 80077be:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 80077c2:	35e2      	adds	r5, #226	@ 0xe2
 80077c4:	fa01 f305 	lsl.w	r3, r1, r5
 80077c8:	9310      	str	r3, [sp, #64]	@ 0x40
 80077ca:	9113      	str	r1, [sp, #76]	@ 0x4c
 80077cc:	e7ba      	b.n	8007744 <_strtod_l+0x6e4>
 80077ce:	2300      	movs	r3, #0
 80077d0:	9310      	str	r3, [sp, #64]	@ 0x40
 80077d2:	2301      	movs	r3, #1
 80077d4:	9313      	str	r3, [sp, #76]	@ 0x4c
 80077d6:	e7b5      	b.n	8007744 <_strtod_l+0x6e4>
 80077d8:	462a      	mov	r2, r5
 80077da:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80077dc:	9805      	ldr	r0, [sp, #20]
 80077de:	f002 fd4f 	bl	800a280 <__lshift>
 80077e2:	901a      	str	r0, [sp, #104]	@ 0x68
 80077e4:	2800      	cmp	r0, #0
 80077e6:	d1d9      	bne.n	800779c <_strtod_l+0x73c>
 80077e8:	e655      	b.n	8007496 <_strtod_l+0x436>
 80077ea:	2e00      	cmp	r6, #0
 80077ec:	dd07      	ble.n	80077fe <_strtod_l+0x79e>
 80077ee:	4649      	mov	r1, r9
 80077f0:	4632      	mov	r2, r6
 80077f2:	9805      	ldr	r0, [sp, #20]
 80077f4:	f002 fd44 	bl	800a280 <__lshift>
 80077f8:	4681      	mov	r9, r0
 80077fa:	2800      	cmp	r0, #0
 80077fc:	d0d8      	beq.n	80077b0 <_strtod_l+0x750>
 80077fe:	2f00      	cmp	r7, #0
 8007800:	dd08      	ble.n	8007814 <_strtod_l+0x7b4>
 8007802:	4641      	mov	r1, r8
 8007804:	463a      	mov	r2, r7
 8007806:	9805      	ldr	r0, [sp, #20]
 8007808:	f002 fd3a 	bl	800a280 <__lshift>
 800780c:	4680      	mov	r8, r0
 800780e:	2800      	cmp	r0, #0
 8007810:	f43f ae41 	beq.w	8007496 <_strtod_l+0x436>
 8007814:	464a      	mov	r2, r9
 8007816:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8007818:	9805      	ldr	r0, [sp, #20]
 800781a:	f002 fdb9 	bl	800a390 <__mdiff>
 800781e:	4604      	mov	r4, r0
 8007820:	2800      	cmp	r0, #0
 8007822:	f43f ae38 	beq.w	8007496 <_strtod_l+0x436>
 8007826:	68c3      	ldr	r3, [r0, #12]
 8007828:	4641      	mov	r1, r8
 800782a:	930f      	str	r3, [sp, #60]	@ 0x3c
 800782c:	2300      	movs	r3, #0
 800782e:	60c3      	str	r3, [r0, #12]
 8007830:	f002 fd92 	bl	800a358 <__mcmp>
 8007834:	2800      	cmp	r0, #0
 8007836:	da45      	bge.n	80078c4 <_strtod_l+0x864>
 8007838:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800783a:	ea53 030a 	orrs.w	r3, r3, sl
 800783e:	d16b      	bne.n	8007918 <_strtod_l+0x8b8>
 8007840:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007844:	2b00      	cmp	r3, #0
 8007846:	d167      	bne.n	8007918 <_strtod_l+0x8b8>
 8007848:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800784c:	0d1b      	lsrs	r3, r3, #20
 800784e:	051b      	lsls	r3, r3, #20
 8007850:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8007854:	d960      	bls.n	8007918 <_strtod_l+0x8b8>
 8007856:	6963      	ldr	r3, [r4, #20]
 8007858:	b913      	cbnz	r3, 8007860 <_strtod_l+0x800>
 800785a:	6923      	ldr	r3, [r4, #16]
 800785c:	2b01      	cmp	r3, #1
 800785e:	dd5b      	ble.n	8007918 <_strtod_l+0x8b8>
 8007860:	4621      	mov	r1, r4
 8007862:	2201      	movs	r2, #1
 8007864:	9805      	ldr	r0, [sp, #20]
 8007866:	f002 fd0b 	bl	800a280 <__lshift>
 800786a:	4641      	mov	r1, r8
 800786c:	4604      	mov	r4, r0
 800786e:	f002 fd73 	bl	800a358 <__mcmp>
 8007872:	2800      	cmp	r0, #0
 8007874:	dd50      	ble.n	8007918 <_strtod_l+0x8b8>
 8007876:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800787a:	9a08      	ldr	r2, [sp, #32]
 800787c:	0d1b      	lsrs	r3, r3, #20
 800787e:	051b      	lsls	r3, r3, #20
 8007880:	2a00      	cmp	r2, #0
 8007882:	d06a      	beq.n	800795a <_strtod_l+0x8fa>
 8007884:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8007888:	d867      	bhi.n	800795a <_strtod_l+0x8fa>
 800788a:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 800788e:	f67f ae98 	bls.w	80075c2 <_strtod_l+0x562>
 8007892:	4650      	mov	r0, sl
 8007894:	4659      	mov	r1, fp
 8007896:	4b09      	ldr	r3, [pc, #36]	@ (80078bc <_strtod_l+0x85c>)
 8007898:	2200      	movs	r2, #0
 800789a:	f7f8 fed1 	bl	8000640 <__aeabi_dmul>
 800789e:	4b08      	ldr	r3, [pc, #32]	@ (80078c0 <_strtod_l+0x860>)
 80078a0:	4682      	mov	sl, r0
 80078a2:	400b      	ands	r3, r1
 80078a4:	468b      	mov	fp, r1
 80078a6:	2b00      	cmp	r3, #0
 80078a8:	f47f ae00 	bne.w	80074ac <_strtod_l+0x44c>
 80078ac:	2322      	movs	r3, #34	@ 0x22
 80078ae:	9a05      	ldr	r2, [sp, #20]
 80078b0:	6013      	str	r3, [r2, #0]
 80078b2:	e5fb      	b.n	80074ac <_strtod_l+0x44c>
 80078b4:	0800b540 	.word	0x0800b540
 80078b8:	fffffc02 	.word	0xfffffc02
 80078bc:	39500000 	.word	0x39500000
 80078c0:	7ff00000 	.word	0x7ff00000
 80078c4:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 80078c8:	d165      	bne.n	8007996 <_strtod_l+0x936>
 80078ca:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 80078cc:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80078d0:	b35a      	cbz	r2, 800792a <_strtod_l+0x8ca>
 80078d2:	4a99      	ldr	r2, [pc, #612]	@ (8007b38 <_strtod_l+0xad8>)
 80078d4:	4293      	cmp	r3, r2
 80078d6:	d12b      	bne.n	8007930 <_strtod_l+0x8d0>
 80078d8:	9b08      	ldr	r3, [sp, #32]
 80078da:	4651      	mov	r1, sl
 80078dc:	b303      	cbz	r3, 8007920 <_strtod_l+0x8c0>
 80078de:	465a      	mov	r2, fp
 80078e0:	4b96      	ldr	r3, [pc, #600]	@ (8007b3c <_strtod_l+0xadc>)
 80078e2:	4013      	ands	r3, r2
 80078e4:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 80078e8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80078ec:	d81b      	bhi.n	8007926 <_strtod_l+0x8c6>
 80078ee:	0d1b      	lsrs	r3, r3, #20
 80078f0:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 80078f4:	fa02 f303 	lsl.w	r3, r2, r3
 80078f8:	4299      	cmp	r1, r3
 80078fa:	d119      	bne.n	8007930 <_strtod_l+0x8d0>
 80078fc:	4b90      	ldr	r3, [pc, #576]	@ (8007b40 <_strtod_l+0xae0>)
 80078fe:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8007900:	429a      	cmp	r2, r3
 8007902:	d102      	bne.n	800790a <_strtod_l+0x8aa>
 8007904:	3101      	adds	r1, #1
 8007906:	f43f adc6 	beq.w	8007496 <_strtod_l+0x436>
 800790a:	f04f 0a00 	mov.w	sl, #0
 800790e:	4b8b      	ldr	r3, [pc, #556]	@ (8007b3c <_strtod_l+0xadc>)
 8007910:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8007912:	401a      	ands	r2, r3
 8007914:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 8007918:	9b08      	ldr	r3, [sp, #32]
 800791a:	2b00      	cmp	r3, #0
 800791c:	d1b9      	bne.n	8007892 <_strtod_l+0x832>
 800791e:	e5c5      	b.n	80074ac <_strtod_l+0x44c>
 8007920:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8007924:	e7e8      	b.n	80078f8 <_strtod_l+0x898>
 8007926:	4613      	mov	r3, r2
 8007928:	e7e6      	b.n	80078f8 <_strtod_l+0x898>
 800792a:	ea53 030a 	orrs.w	r3, r3, sl
 800792e:	d0a2      	beq.n	8007876 <_strtod_l+0x816>
 8007930:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8007932:	b1db      	cbz	r3, 800796c <_strtod_l+0x90c>
 8007934:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8007936:	4213      	tst	r3, r2
 8007938:	d0ee      	beq.n	8007918 <_strtod_l+0x8b8>
 800793a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800793c:	4650      	mov	r0, sl
 800793e:	4659      	mov	r1, fp
 8007940:	9a08      	ldr	r2, [sp, #32]
 8007942:	b1bb      	cbz	r3, 8007974 <_strtod_l+0x914>
 8007944:	f7ff fb6b 	bl	800701e <sulp>
 8007948:	4602      	mov	r2, r0
 800794a:	460b      	mov	r3, r1
 800794c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007950:	f7f8 fcc0 	bl	80002d4 <__adddf3>
 8007954:	4682      	mov	sl, r0
 8007956:	468b      	mov	fp, r1
 8007958:	e7de      	b.n	8007918 <_strtod_l+0x8b8>
 800795a:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800795e:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8007962:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 8007966:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800796a:	e7d5      	b.n	8007918 <_strtod_l+0x8b8>
 800796c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800796e:	ea13 0f0a 	tst.w	r3, sl
 8007972:	e7e1      	b.n	8007938 <_strtod_l+0x8d8>
 8007974:	f7ff fb53 	bl	800701e <sulp>
 8007978:	4602      	mov	r2, r0
 800797a:	460b      	mov	r3, r1
 800797c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007980:	f7f8 fca6 	bl	80002d0 <__aeabi_dsub>
 8007984:	2200      	movs	r2, #0
 8007986:	2300      	movs	r3, #0
 8007988:	4682      	mov	sl, r0
 800798a:	468b      	mov	fp, r1
 800798c:	f7f9 f8c0 	bl	8000b10 <__aeabi_dcmpeq>
 8007990:	2800      	cmp	r0, #0
 8007992:	d0c1      	beq.n	8007918 <_strtod_l+0x8b8>
 8007994:	e615      	b.n	80075c2 <_strtod_l+0x562>
 8007996:	4641      	mov	r1, r8
 8007998:	4620      	mov	r0, r4
 800799a:	f002 fe4d 	bl	800a638 <__ratio>
 800799e:	2200      	movs	r2, #0
 80079a0:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80079a4:	4606      	mov	r6, r0
 80079a6:	460f      	mov	r7, r1
 80079a8:	f7f9 f8c6 	bl	8000b38 <__aeabi_dcmple>
 80079ac:	2800      	cmp	r0, #0
 80079ae:	d06d      	beq.n	8007a8c <_strtod_l+0xa2c>
 80079b0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80079b2:	2b00      	cmp	r3, #0
 80079b4:	d178      	bne.n	8007aa8 <_strtod_l+0xa48>
 80079b6:	f1ba 0f00 	cmp.w	sl, #0
 80079ba:	d156      	bne.n	8007a6a <_strtod_l+0xa0a>
 80079bc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80079be:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80079c2:	2b00      	cmp	r3, #0
 80079c4:	d158      	bne.n	8007a78 <_strtod_l+0xa18>
 80079c6:	2200      	movs	r2, #0
 80079c8:	4630      	mov	r0, r6
 80079ca:	4639      	mov	r1, r7
 80079cc:	4b5d      	ldr	r3, [pc, #372]	@ (8007b44 <_strtod_l+0xae4>)
 80079ce:	f7f9 f8a9 	bl	8000b24 <__aeabi_dcmplt>
 80079d2:	2800      	cmp	r0, #0
 80079d4:	d157      	bne.n	8007a86 <_strtod_l+0xa26>
 80079d6:	4630      	mov	r0, r6
 80079d8:	4639      	mov	r1, r7
 80079da:	2200      	movs	r2, #0
 80079dc:	4b5a      	ldr	r3, [pc, #360]	@ (8007b48 <_strtod_l+0xae8>)
 80079de:	f7f8 fe2f 	bl	8000640 <__aeabi_dmul>
 80079e2:	4606      	mov	r6, r0
 80079e4:	460f      	mov	r7, r1
 80079e6:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 80079ea:	9606      	str	r6, [sp, #24]
 80079ec:	9307      	str	r3, [sp, #28]
 80079ee:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80079f2:	4d52      	ldr	r5, [pc, #328]	@ (8007b3c <_strtod_l+0xadc>)
 80079f4:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 80079f8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80079fa:	401d      	ands	r5, r3
 80079fc:	4b53      	ldr	r3, [pc, #332]	@ (8007b4c <_strtod_l+0xaec>)
 80079fe:	429d      	cmp	r5, r3
 8007a00:	f040 80aa 	bne.w	8007b58 <_strtod_l+0xaf8>
 8007a04:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007a06:	4650      	mov	r0, sl
 8007a08:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 8007a0c:	4659      	mov	r1, fp
 8007a0e:	f002 fd53 	bl	800a4b8 <__ulp>
 8007a12:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007a16:	f7f8 fe13 	bl	8000640 <__aeabi_dmul>
 8007a1a:	4652      	mov	r2, sl
 8007a1c:	465b      	mov	r3, fp
 8007a1e:	f7f8 fc59 	bl	80002d4 <__adddf3>
 8007a22:	460b      	mov	r3, r1
 8007a24:	4945      	ldr	r1, [pc, #276]	@ (8007b3c <_strtod_l+0xadc>)
 8007a26:	4a4a      	ldr	r2, [pc, #296]	@ (8007b50 <_strtod_l+0xaf0>)
 8007a28:	4019      	ands	r1, r3
 8007a2a:	4291      	cmp	r1, r2
 8007a2c:	4682      	mov	sl, r0
 8007a2e:	d942      	bls.n	8007ab6 <_strtod_l+0xa56>
 8007a30:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8007a32:	4b43      	ldr	r3, [pc, #268]	@ (8007b40 <_strtod_l+0xae0>)
 8007a34:	429a      	cmp	r2, r3
 8007a36:	d103      	bne.n	8007a40 <_strtod_l+0x9e0>
 8007a38:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8007a3a:	3301      	adds	r3, #1
 8007a3c:	f43f ad2b 	beq.w	8007496 <_strtod_l+0x436>
 8007a40:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 8007a44:	f8df b0f8 	ldr.w	fp, [pc, #248]	@ 8007b40 <_strtod_l+0xae0>
 8007a48:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8007a4a:	9805      	ldr	r0, [sp, #20]
 8007a4c:	f002 fa02 	bl	8009e54 <_Bfree>
 8007a50:	4649      	mov	r1, r9
 8007a52:	9805      	ldr	r0, [sp, #20]
 8007a54:	f002 f9fe 	bl	8009e54 <_Bfree>
 8007a58:	4641      	mov	r1, r8
 8007a5a:	9805      	ldr	r0, [sp, #20]
 8007a5c:	f002 f9fa 	bl	8009e54 <_Bfree>
 8007a60:	4621      	mov	r1, r4
 8007a62:	9805      	ldr	r0, [sp, #20]
 8007a64:	f002 f9f6 	bl	8009e54 <_Bfree>
 8007a68:	e618      	b.n	800769c <_strtod_l+0x63c>
 8007a6a:	f1ba 0f01 	cmp.w	sl, #1
 8007a6e:	d103      	bne.n	8007a78 <_strtod_l+0xa18>
 8007a70:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007a72:	2b00      	cmp	r3, #0
 8007a74:	f43f ada5 	beq.w	80075c2 <_strtod_l+0x562>
 8007a78:	2200      	movs	r2, #0
 8007a7a:	4b36      	ldr	r3, [pc, #216]	@ (8007b54 <_strtod_l+0xaf4>)
 8007a7c:	2600      	movs	r6, #0
 8007a7e:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8007a82:	4f30      	ldr	r7, [pc, #192]	@ (8007b44 <_strtod_l+0xae4>)
 8007a84:	e7b3      	b.n	80079ee <_strtod_l+0x98e>
 8007a86:	2600      	movs	r6, #0
 8007a88:	4f2f      	ldr	r7, [pc, #188]	@ (8007b48 <_strtod_l+0xae8>)
 8007a8a:	e7ac      	b.n	80079e6 <_strtod_l+0x986>
 8007a8c:	4630      	mov	r0, r6
 8007a8e:	4639      	mov	r1, r7
 8007a90:	4b2d      	ldr	r3, [pc, #180]	@ (8007b48 <_strtod_l+0xae8>)
 8007a92:	2200      	movs	r2, #0
 8007a94:	f7f8 fdd4 	bl	8000640 <__aeabi_dmul>
 8007a98:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007a9a:	4606      	mov	r6, r0
 8007a9c:	460f      	mov	r7, r1
 8007a9e:	2b00      	cmp	r3, #0
 8007aa0:	d0a1      	beq.n	80079e6 <_strtod_l+0x986>
 8007aa2:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8007aa6:	e7a2      	b.n	80079ee <_strtod_l+0x98e>
 8007aa8:	2200      	movs	r2, #0
 8007aaa:	4b26      	ldr	r3, [pc, #152]	@ (8007b44 <_strtod_l+0xae4>)
 8007aac:	4616      	mov	r6, r2
 8007aae:	461f      	mov	r7, r3
 8007ab0:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8007ab4:	e79b      	b.n	80079ee <_strtod_l+0x98e>
 8007ab6:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 8007aba:	9b08      	ldr	r3, [sp, #32]
 8007abc:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8007ac0:	2b00      	cmp	r3, #0
 8007ac2:	d1c1      	bne.n	8007a48 <_strtod_l+0x9e8>
 8007ac4:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8007ac8:	0d1b      	lsrs	r3, r3, #20
 8007aca:	051b      	lsls	r3, r3, #20
 8007acc:	429d      	cmp	r5, r3
 8007ace:	d1bb      	bne.n	8007a48 <_strtod_l+0x9e8>
 8007ad0:	4630      	mov	r0, r6
 8007ad2:	4639      	mov	r1, r7
 8007ad4:	f7f9 fabe 	bl	8001054 <__aeabi_d2lz>
 8007ad8:	f7f8 fd84 	bl	80005e4 <__aeabi_l2d>
 8007adc:	4602      	mov	r2, r0
 8007ade:	460b      	mov	r3, r1
 8007ae0:	4630      	mov	r0, r6
 8007ae2:	4639      	mov	r1, r7
 8007ae4:	f7f8 fbf4 	bl	80002d0 <__aeabi_dsub>
 8007ae8:	460b      	mov	r3, r1
 8007aea:	4602      	mov	r2, r0
 8007aec:	f3cb 0613 	ubfx	r6, fp, #0, #20
 8007af0:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8007af4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007af6:	ea46 060a 	orr.w	r6, r6, sl
 8007afa:	431e      	orrs	r6, r3
 8007afc:	d069      	beq.n	8007bd2 <_strtod_l+0xb72>
 8007afe:	a30a      	add	r3, pc, #40	@ (adr r3, 8007b28 <_strtod_l+0xac8>)
 8007b00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b04:	f7f9 f80e 	bl	8000b24 <__aeabi_dcmplt>
 8007b08:	2800      	cmp	r0, #0
 8007b0a:	f47f accf 	bne.w	80074ac <_strtod_l+0x44c>
 8007b0e:	a308      	add	r3, pc, #32	@ (adr r3, 8007b30 <_strtod_l+0xad0>)
 8007b10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b14:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007b18:	f7f9 f822 	bl	8000b60 <__aeabi_dcmpgt>
 8007b1c:	2800      	cmp	r0, #0
 8007b1e:	d093      	beq.n	8007a48 <_strtod_l+0x9e8>
 8007b20:	e4c4      	b.n	80074ac <_strtod_l+0x44c>
 8007b22:	bf00      	nop
 8007b24:	f3af 8000 	nop.w
 8007b28:	94a03595 	.word	0x94a03595
 8007b2c:	3fdfffff 	.word	0x3fdfffff
 8007b30:	35afe535 	.word	0x35afe535
 8007b34:	3fe00000 	.word	0x3fe00000
 8007b38:	000fffff 	.word	0x000fffff
 8007b3c:	7ff00000 	.word	0x7ff00000
 8007b40:	7fefffff 	.word	0x7fefffff
 8007b44:	3ff00000 	.word	0x3ff00000
 8007b48:	3fe00000 	.word	0x3fe00000
 8007b4c:	7fe00000 	.word	0x7fe00000
 8007b50:	7c9fffff 	.word	0x7c9fffff
 8007b54:	bff00000 	.word	0xbff00000
 8007b58:	9b08      	ldr	r3, [sp, #32]
 8007b5a:	b323      	cbz	r3, 8007ba6 <_strtod_l+0xb46>
 8007b5c:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 8007b60:	d821      	bhi.n	8007ba6 <_strtod_l+0xb46>
 8007b62:	a327      	add	r3, pc, #156	@ (adr r3, 8007c00 <_strtod_l+0xba0>)
 8007b64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b68:	4630      	mov	r0, r6
 8007b6a:	4639      	mov	r1, r7
 8007b6c:	f7f8 ffe4 	bl	8000b38 <__aeabi_dcmple>
 8007b70:	b1a0      	cbz	r0, 8007b9c <_strtod_l+0xb3c>
 8007b72:	4639      	mov	r1, r7
 8007b74:	4630      	mov	r0, r6
 8007b76:	f7f9 f83b 	bl	8000bf0 <__aeabi_d2uiz>
 8007b7a:	2801      	cmp	r0, #1
 8007b7c:	bf38      	it	cc
 8007b7e:	2001      	movcc	r0, #1
 8007b80:	f7f8 fce4 	bl	800054c <__aeabi_ui2d>
 8007b84:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007b86:	4606      	mov	r6, r0
 8007b88:	460f      	mov	r7, r1
 8007b8a:	b9fb      	cbnz	r3, 8007bcc <_strtod_l+0xb6c>
 8007b8c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8007b90:	9014      	str	r0, [sp, #80]	@ 0x50
 8007b92:	9315      	str	r3, [sp, #84]	@ 0x54
 8007b94:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 8007b98:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8007b9c:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8007b9e:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 8007ba2:	1b5b      	subs	r3, r3, r5
 8007ba4:	9311      	str	r3, [sp, #68]	@ 0x44
 8007ba6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007baa:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 8007bae:	f002 fc83 	bl	800a4b8 <__ulp>
 8007bb2:	4602      	mov	r2, r0
 8007bb4:	460b      	mov	r3, r1
 8007bb6:	4650      	mov	r0, sl
 8007bb8:	4659      	mov	r1, fp
 8007bba:	f7f8 fd41 	bl	8000640 <__aeabi_dmul>
 8007bbe:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8007bc2:	f7f8 fb87 	bl	80002d4 <__adddf3>
 8007bc6:	4682      	mov	sl, r0
 8007bc8:	468b      	mov	fp, r1
 8007bca:	e776      	b.n	8007aba <_strtod_l+0xa5a>
 8007bcc:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 8007bd0:	e7e0      	b.n	8007b94 <_strtod_l+0xb34>
 8007bd2:	a30d      	add	r3, pc, #52	@ (adr r3, 8007c08 <_strtod_l+0xba8>)
 8007bd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007bd8:	f7f8 ffa4 	bl	8000b24 <__aeabi_dcmplt>
 8007bdc:	e79e      	b.n	8007b1c <_strtod_l+0xabc>
 8007bde:	2300      	movs	r3, #0
 8007be0:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007be2:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8007be4:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 8007be6:	6013      	str	r3, [r2, #0]
 8007be8:	f7ff ba77 	b.w	80070da <_strtod_l+0x7a>
 8007bec:	2a65      	cmp	r2, #101	@ 0x65
 8007bee:	f43f ab6e 	beq.w	80072ce <_strtod_l+0x26e>
 8007bf2:	2a45      	cmp	r2, #69	@ 0x45
 8007bf4:	f43f ab6b 	beq.w	80072ce <_strtod_l+0x26e>
 8007bf8:	2301      	movs	r3, #1
 8007bfa:	f7ff bba6 	b.w	800734a <_strtod_l+0x2ea>
 8007bfe:	bf00      	nop
 8007c00:	ffc00000 	.word	0xffc00000
 8007c04:	41dfffff 	.word	0x41dfffff
 8007c08:	94a03595 	.word	0x94a03595
 8007c0c:	3fcfffff 	.word	0x3fcfffff

08007c10 <strtod>:
 8007c10:	460a      	mov	r2, r1
 8007c12:	4601      	mov	r1, r0
 8007c14:	4802      	ldr	r0, [pc, #8]	@ (8007c20 <strtod+0x10>)
 8007c16:	4b03      	ldr	r3, [pc, #12]	@ (8007c24 <strtod+0x14>)
 8007c18:	6800      	ldr	r0, [r0, #0]
 8007c1a:	f7ff ba21 	b.w	8007060 <_strtod_l>
 8007c1e:	bf00      	nop
 8007c20:	20000308 	.word	0x20000308
 8007c24:	2000019c 	.word	0x2000019c

08007c28 <atoll>:
 8007c28:	220a      	movs	r2, #10
 8007c2a:	2100      	movs	r1, #0
 8007c2c:	f002 be14 	b.w	800a858 <strtoll>

08007c30 <__cvt>:
 8007c30:	2b00      	cmp	r3, #0
 8007c32:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007c36:	461d      	mov	r5, r3
 8007c38:	bfbb      	ittet	lt
 8007c3a:	f103 4300 	addlt.w	r3, r3, #2147483648	@ 0x80000000
 8007c3e:	461d      	movlt	r5, r3
 8007c40:	2300      	movge	r3, #0
 8007c42:	232d      	movlt	r3, #45	@ 0x2d
 8007c44:	b088      	sub	sp, #32
 8007c46:	4614      	mov	r4, r2
 8007c48:	bfb8      	it	lt
 8007c4a:	4614      	movlt	r4, r2
 8007c4c:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8007c4e:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 8007c50:	7013      	strb	r3, [r2, #0]
 8007c52:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8007c54:	f8dd a04c 	ldr.w	sl, [sp, #76]	@ 0x4c
 8007c58:	f023 0820 	bic.w	r8, r3, #32
 8007c5c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8007c60:	d005      	beq.n	8007c6e <__cvt+0x3e>
 8007c62:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8007c66:	d100      	bne.n	8007c6a <__cvt+0x3a>
 8007c68:	3601      	adds	r6, #1
 8007c6a:	2302      	movs	r3, #2
 8007c6c:	e000      	b.n	8007c70 <__cvt+0x40>
 8007c6e:	2303      	movs	r3, #3
 8007c70:	aa07      	add	r2, sp, #28
 8007c72:	9204      	str	r2, [sp, #16]
 8007c74:	aa06      	add	r2, sp, #24
 8007c76:	e9cd a202 	strd	sl, r2, [sp, #8]
 8007c7a:	e9cd 3600 	strd	r3, r6, [sp]
 8007c7e:	4622      	mov	r2, r4
 8007c80:	462b      	mov	r3, r5
 8007c82:	f000 fe95 	bl	80089b0 <_dtoa_r>
 8007c86:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8007c8a:	4607      	mov	r7, r0
 8007c8c:	d119      	bne.n	8007cc2 <__cvt+0x92>
 8007c8e:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8007c90:	07db      	lsls	r3, r3, #31
 8007c92:	d50e      	bpl.n	8007cb2 <__cvt+0x82>
 8007c94:	eb00 0906 	add.w	r9, r0, r6
 8007c98:	2200      	movs	r2, #0
 8007c9a:	2300      	movs	r3, #0
 8007c9c:	4620      	mov	r0, r4
 8007c9e:	4629      	mov	r1, r5
 8007ca0:	f7f8 ff36 	bl	8000b10 <__aeabi_dcmpeq>
 8007ca4:	b108      	cbz	r0, 8007caa <__cvt+0x7a>
 8007ca6:	f8cd 901c 	str.w	r9, [sp, #28]
 8007caa:	2230      	movs	r2, #48	@ 0x30
 8007cac:	9b07      	ldr	r3, [sp, #28]
 8007cae:	454b      	cmp	r3, r9
 8007cb0:	d31e      	bcc.n	8007cf0 <__cvt+0xc0>
 8007cb2:	4638      	mov	r0, r7
 8007cb4:	9b07      	ldr	r3, [sp, #28]
 8007cb6:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 8007cb8:	1bdb      	subs	r3, r3, r7
 8007cba:	6013      	str	r3, [r2, #0]
 8007cbc:	b008      	add	sp, #32
 8007cbe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007cc2:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8007cc6:	eb00 0906 	add.w	r9, r0, r6
 8007cca:	d1e5      	bne.n	8007c98 <__cvt+0x68>
 8007ccc:	7803      	ldrb	r3, [r0, #0]
 8007cce:	2b30      	cmp	r3, #48	@ 0x30
 8007cd0:	d10a      	bne.n	8007ce8 <__cvt+0xb8>
 8007cd2:	2200      	movs	r2, #0
 8007cd4:	2300      	movs	r3, #0
 8007cd6:	4620      	mov	r0, r4
 8007cd8:	4629      	mov	r1, r5
 8007cda:	f7f8 ff19 	bl	8000b10 <__aeabi_dcmpeq>
 8007cde:	b918      	cbnz	r0, 8007ce8 <__cvt+0xb8>
 8007ce0:	f1c6 0601 	rsb	r6, r6, #1
 8007ce4:	f8ca 6000 	str.w	r6, [sl]
 8007ce8:	f8da 3000 	ldr.w	r3, [sl]
 8007cec:	4499      	add	r9, r3
 8007cee:	e7d3      	b.n	8007c98 <__cvt+0x68>
 8007cf0:	1c59      	adds	r1, r3, #1
 8007cf2:	9107      	str	r1, [sp, #28]
 8007cf4:	701a      	strb	r2, [r3, #0]
 8007cf6:	e7d9      	b.n	8007cac <__cvt+0x7c>

08007cf8 <__exponent>:
 8007cf8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007cfa:	2900      	cmp	r1, #0
 8007cfc:	bfb6      	itet	lt
 8007cfe:	232d      	movlt	r3, #45	@ 0x2d
 8007d00:	232b      	movge	r3, #43	@ 0x2b
 8007d02:	4249      	neglt	r1, r1
 8007d04:	2909      	cmp	r1, #9
 8007d06:	7002      	strb	r2, [r0, #0]
 8007d08:	7043      	strb	r3, [r0, #1]
 8007d0a:	dd29      	ble.n	8007d60 <__exponent+0x68>
 8007d0c:	f10d 0307 	add.w	r3, sp, #7
 8007d10:	461d      	mov	r5, r3
 8007d12:	270a      	movs	r7, #10
 8007d14:	fbb1 f6f7 	udiv	r6, r1, r7
 8007d18:	461a      	mov	r2, r3
 8007d1a:	fb07 1416 	mls	r4, r7, r6, r1
 8007d1e:	3430      	adds	r4, #48	@ 0x30
 8007d20:	f802 4c01 	strb.w	r4, [r2, #-1]
 8007d24:	460c      	mov	r4, r1
 8007d26:	2c63      	cmp	r4, #99	@ 0x63
 8007d28:	4631      	mov	r1, r6
 8007d2a:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 8007d2e:	dcf1      	bgt.n	8007d14 <__exponent+0x1c>
 8007d30:	3130      	adds	r1, #48	@ 0x30
 8007d32:	1e94      	subs	r4, r2, #2
 8007d34:	f803 1c01 	strb.w	r1, [r3, #-1]
 8007d38:	4623      	mov	r3, r4
 8007d3a:	1c41      	adds	r1, r0, #1
 8007d3c:	42ab      	cmp	r3, r5
 8007d3e:	d30a      	bcc.n	8007d56 <__exponent+0x5e>
 8007d40:	f10d 0309 	add.w	r3, sp, #9
 8007d44:	1a9b      	subs	r3, r3, r2
 8007d46:	42ac      	cmp	r4, r5
 8007d48:	bf88      	it	hi
 8007d4a:	2300      	movhi	r3, #0
 8007d4c:	3302      	adds	r3, #2
 8007d4e:	4403      	add	r3, r0
 8007d50:	1a18      	subs	r0, r3, r0
 8007d52:	b003      	add	sp, #12
 8007d54:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007d56:	f813 6b01 	ldrb.w	r6, [r3], #1
 8007d5a:	f801 6f01 	strb.w	r6, [r1, #1]!
 8007d5e:	e7ed      	b.n	8007d3c <__exponent+0x44>
 8007d60:	2330      	movs	r3, #48	@ 0x30
 8007d62:	3130      	adds	r1, #48	@ 0x30
 8007d64:	7083      	strb	r3, [r0, #2]
 8007d66:	70c1      	strb	r1, [r0, #3]
 8007d68:	1d03      	adds	r3, r0, #4
 8007d6a:	e7f1      	b.n	8007d50 <__exponent+0x58>

08007d6c <_printf_float>:
 8007d6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007d70:	b091      	sub	sp, #68	@ 0x44
 8007d72:	460c      	mov	r4, r1
 8007d74:	f8dd 8068 	ldr.w	r8, [sp, #104]	@ 0x68
 8007d78:	4616      	mov	r6, r2
 8007d7a:	461f      	mov	r7, r3
 8007d7c:	4605      	mov	r5, r0
 8007d7e:	f000 fcf3 	bl	8008768 <_localeconv_r>
 8007d82:	6803      	ldr	r3, [r0, #0]
 8007d84:	4618      	mov	r0, r3
 8007d86:	9308      	str	r3, [sp, #32]
 8007d88:	f7f8 f9e2 	bl	8000150 <strlen>
 8007d8c:	2300      	movs	r3, #0
 8007d8e:	930e      	str	r3, [sp, #56]	@ 0x38
 8007d90:	f8d8 3000 	ldr.w	r3, [r8]
 8007d94:	9009      	str	r0, [sp, #36]	@ 0x24
 8007d96:	3307      	adds	r3, #7
 8007d98:	f023 0307 	bic.w	r3, r3, #7
 8007d9c:	f103 0208 	add.w	r2, r3, #8
 8007da0:	f894 a018 	ldrb.w	sl, [r4, #24]
 8007da4:	f8d4 b000 	ldr.w	fp, [r4]
 8007da8:	f8c8 2000 	str.w	r2, [r8]
 8007dac:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007db0:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8007db4:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007db6:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 8007dba:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8007dbe:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8007dc2:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8007dc6:	4b9c      	ldr	r3, [pc, #624]	@ (8008038 <_printf_float+0x2cc>)
 8007dc8:	f7f8 fed4 	bl	8000b74 <__aeabi_dcmpun>
 8007dcc:	bb70      	cbnz	r0, 8007e2c <_printf_float+0xc0>
 8007dce:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8007dd2:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8007dd6:	4b98      	ldr	r3, [pc, #608]	@ (8008038 <_printf_float+0x2cc>)
 8007dd8:	f7f8 feae 	bl	8000b38 <__aeabi_dcmple>
 8007ddc:	bb30      	cbnz	r0, 8007e2c <_printf_float+0xc0>
 8007dde:	2200      	movs	r2, #0
 8007de0:	2300      	movs	r3, #0
 8007de2:	4640      	mov	r0, r8
 8007de4:	4649      	mov	r1, r9
 8007de6:	f7f8 fe9d 	bl	8000b24 <__aeabi_dcmplt>
 8007dea:	b110      	cbz	r0, 8007df2 <_printf_float+0x86>
 8007dec:	232d      	movs	r3, #45	@ 0x2d
 8007dee:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007df2:	4a92      	ldr	r2, [pc, #584]	@ (800803c <_printf_float+0x2d0>)
 8007df4:	4b92      	ldr	r3, [pc, #584]	@ (8008040 <_printf_float+0x2d4>)
 8007df6:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8007dfa:	bf94      	ite	ls
 8007dfc:	4690      	movls	r8, r2
 8007dfe:	4698      	movhi	r8, r3
 8007e00:	2303      	movs	r3, #3
 8007e02:	f04f 0900 	mov.w	r9, #0
 8007e06:	6123      	str	r3, [r4, #16]
 8007e08:	f02b 0304 	bic.w	r3, fp, #4
 8007e0c:	6023      	str	r3, [r4, #0]
 8007e0e:	4633      	mov	r3, r6
 8007e10:	4621      	mov	r1, r4
 8007e12:	4628      	mov	r0, r5
 8007e14:	9700      	str	r7, [sp, #0]
 8007e16:	aa0f      	add	r2, sp, #60	@ 0x3c
 8007e18:	f000 f9d4 	bl	80081c4 <_printf_common>
 8007e1c:	3001      	adds	r0, #1
 8007e1e:	f040 8090 	bne.w	8007f42 <_printf_float+0x1d6>
 8007e22:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8007e26:	b011      	add	sp, #68	@ 0x44
 8007e28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007e2c:	4642      	mov	r2, r8
 8007e2e:	464b      	mov	r3, r9
 8007e30:	4640      	mov	r0, r8
 8007e32:	4649      	mov	r1, r9
 8007e34:	f7f8 fe9e 	bl	8000b74 <__aeabi_dcmpun>
 8007e38:	b148      	cbz	r0, 8007e4e <_printf_float+0xe2>
 8007e3a:	464b      	mov	r3, r9
 8007e3c:	2b00      	cmp	r3, #0
 8007e3e:	bfb8      	it	lt
 8007e40:	232d      	movlt	r3, #45	@ 0x2d
 8007e42:	4a80      	ldr	r2, [pc, #512]	@ (8008044 <_printf_float+0x2d8>)
 8007e44:	bfb8      	it	lt
 8007e46:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8007e4a:	4b7f      	ldr	r3, [pc, #508]	@ (8008048 <_printf_float+0x2dc>)
 8007e4c:	e7d3      	b.n	8007df6 <_printf_float+0x8a>
 8007e4e:	6863      	ldr	r3, [r4, #4]
 8007e50:	f00a 01df 	and.w	r1, sl, #223	@ 0xdf
 8007e54:	1c5a      	adds	r2, r3, #1
 8007e56:	d13f      	bne.n	8007ed8 <_printf_float+0x16c>
 8007e58:	2306      	movs	r3, #6
 8007e5a:	6063      	str	r3, [r4, #4]
 8007e5c:	2200      	movs	r2, #0
 8007e5e:	f44b 6380 	orr.w	r3, fp, #1024	@ 0x400
 8007e62:	6023      	str	r3, [r4, #0]
 8007e64:	9206      	str	r2, [sp, #24]
 8007e66:	aa0e      	add	r2, sp, #56	@ 0x38
 8007e68:	e9cd a204 	strd	sl, r2, [sp, #16]
 8007e6c:	aa0d      	add	r2, sp, #52	@ 0x34
 8007e6e:	9203      	str	r2, [sp, #12]
 8007e70:	f10d 0233 	add.w	r2, sp, #51	@ 0x33
 8007e74:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8007e78:	6863      	ldr	r3, [r4, #4]
 8007e7a:	4642      	mov	r2, r8
 8007e7c:	9300      	str	r3, [sp, #0]
 8007e7e:	4628      	mov	r0, r5
 8007e80:	464b      	mov	r3, r9
 8007e82:	910a      	str	r1, [sp, #40]	@ 0x28
 8007e84:	f7ff fed4 	bl	8007c30 <__cvt>
 8007e88:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8007e8a:	4680      	mov	r8, r0
 8007e8c:	2947      	cmp	r1, #71	@ 0x47
 8007e8e:	990d      	ldr	r1, [sp, #52]	@ 0x34
 8007e90:	d128      	bne.n	8007ee4 <_printf_float+0x178>
 8007e92:	1cc8      	adds	r0, r1, #3
 8007e94:	db02      	blt.n	8007e9c <_printf_float+0x130>
 8007e96:	6863      	ldr	r3, [r4, #4]
 8007e98:	4299      	cmp	r1, r3
 8007e9a:	dd40      	ble.n	8007f1e <_printf_float+0x1b2>
 8007e9c:	f1aa 0a02 	sub.w	sl, sl, #2
 8007ea0:	fa5f fa8a 	uxtb.w	sl, sl
 8007ea4:	4652      	mov	r2, sl
 8007ea6:	3901      	subs	r1, #1
 8007ea8:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8007eac:	910d      	str	r1, [sp, #52]	@ 0x34
 8007eae:	f7ff ff23 	bl	8007cf8 <__exponent>
 8007eb2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8007eb4:	4681      	mov	r9, r0
 8007eb6:	1813      	adds	r3, r2, r0
 8007eb8:	2a01      	cmp	r2, #1
 8007eba:	6123      	str	r3, [r4, #16]
 8007ebc:	dc02      	bgt.n	8007ec4 <_printf_float+0x158>
 8007ebe:	6822      	ldr	r2, [r4, #0]
 8007ec0:	07d2      	lsls	r2, r2, #31
 8007ec2:	d501      	bpl.n	8007ec8 <_printf_float+0x15c>
 8007ec4:	3301      	adds	r3, #1
 8007ec6:	6123      	str	r3, [r4, #16]
 8007ec8:	f89d 3033 	ldrb.w	r3, [sp, #51]	@ 0x33
 8007ecc:	2b00      	cmp	r3, #0
 8007ece:	d09e      	beq.n	8007e0e <_printf_float+0xa2>
 8007ed0:	232d      	movs	r3, #45	@ 0x2d
 8007ed2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007ed6:	e79a      	b.n	8007e0e <_printf_float+0xa2>
 8007ed8:	2947      	cmp	r1, #71	@ 0x47
 8007eda:	d1bf      	bne.n	8007e5c <_printf_float+0xf0>
 8007edc:	2b00      	cmp	r3, #0
 8007ede:	d1bd      	bne.n	8007e5c <_printf_float+0xf0>
 8007ee0:	2301      	movs	r3, #1
 8007ee2:	e7ba      	b.n	8007e5a <_printf_float+0xee>
 8007ee4:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8007ee8:	d9dc      	bls.n	8007ea4 <_printf_float+0x138>
 8007eea:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8007eee:	d118      	bne.n	8007f22 <_printf_float+0x1b6>
 8007ef0:	2900      	cmp	r1, #0
 8007ef2:	6863      	ldr	r3, [r4, #4]
 8007ef4:	dd0b      	ble.n	8007f0e <_printf_float+0x1a2>
 8007ef6:	6121      	str	r1, [r4, #16]
 8007ef8:	b913      	cbnz	r3, 8007f00 <_printf_float+0x194>
 8007efa:	6822      	ldr	r2, [r4, #0]
 8007efc:	07d0      	lsls	r0, r2, #31
 8007efe:	d502      	bpl.n	8007f06 <_printf_float+0x19a>
 8007f00:	3301      	adds	r3, #1
 8007f02:	440b      	add	r3, r1
 8007f04:	6123      	str	r3, [r4, #16]
 8007f06:	f04f 0900 	mov.w	r9, #0
 8007f0a:	65a1      	str	r1, [r4, #88]	@ 0x58
 8007f0c:	e7dc      	b.n	8007ec8 <_printf_float+0x15c>
 8007f0e:	b913      	cbnz	r3, 8007f16 <_printf_float+0x1aa>
 8007f10:	6822      	ldr	r2, [r4, #0]
 8007f12:	07d2      	lsls	r2, r2, #31
 8007f14:	d501      	bpl.n	8007f1a <_printf_float+0x1ae>
 8007f16:	3302      	adds	r3, #2
 8007f18:	e7f4      	b.n	8007f04 <_printf_float+0x198>
 8007f1a:	2301      	movs	r3, #1
 8007f1c:	e7f2      	b.n	8007f04 <_printf_float+0x198>
 8007f1e:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8007f22:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007f24:	4299      	cmp	r1, r3
 8007f26:	db05      	blt.n	8007f34 <_printf_float+0x1c8>
 8007f28:	6823      	ldr	r3, [r4, #0]
 8007f2a:	6121      	str	r1, [r4, #16]
 8007f2c:	07d8      	lsls	r0, r3, #31
 8007f2e:	d5ea      	bpl.n	8007f06 <_printf_float+0x19a>
 8007f30:	1c4b      	adds	r3, r1, #1
 8007f32:	e7e7      	b.n	8007f04 <_printf_float+0x198>
 8007f34:	2900      	cmp	r1, #0
 8007f36:	bfcc      	ite	gt
 8007f38:	2201      	movgt	r2, #1
 8007f3a:	f1c1 0202 	rsble	r2, r1, #2
 8007f3e:	4413      	add	r3, r2
 8007f40:	e7e0      	b.n	8007f04 <_printf_float+0x198>
 8007f42:	6823      	ldr	r3, [r4, #0]
 8007f44:	055a      	lsls	r2, r3, #21
 8007f46:	d407      	bmi.n	8007f58 <_printf_float+0x1ec>
 8007f48:	6923      	ldr	r3, [r4, #16]
 8007f4a:	4642      	mov	r2, r8
 8007f4c:	4631      	mov	r1, r6
 8007f4e:	4628      	mov	r0, r5
 8007f50:	47b8      	blx	r7
 8007f52:	3001      	adds	r0, #1
 8007f54:	d12b      	bne.n	8007fae <_printf_float+0x242>
 8007f56:	e764      	b.n	8007e22 <_printf_float+0xb6>
 8007f58:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8007f5c:	f240 80dc 	bls.w	8008118 <_printf_float+0x3ac>
 8007f60:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8007f64:	2200      	movs	r2, #0
 8007f66:	2300      	movs	r3, #0
 8007f68:	f7f8 fdd2 	bl	8000b10 <__aeabi_dcmpeq>
 8007f6c:	2800      	cmp	r0, #0
 8007f6e:	d033      	beq.n	8007fd8 <_printf_float+0x26c>
 8007f70:	2301      	movs	r3, #1
 8007f72:	4631      	mov	r1, r6
 8007f74:	4628      	mov	r0, r5
 8007f76:	4a35      	ldr	r2, [pc, #212]	@ (800804c <_printf_float+0x2e0>)
 8007f78:	47b8      	blx	r7
 8007f7a:	3001      	adds	r0, #1
 8007f7c:	f43f af51 	beq.w	8007e22 <_printf_float+0xb6>
 8007f80:	e9dd 380d 	ldrd	r3, r8, [sp, #52]	@ 0x34
 8007f84:	4543      	cmp	r3, r8
 8007f86:	db02      	blt.n	8007f8e <_printf_float+0x222>
 8007f88:	6823      	ldr	r3, [r4, #0]
 8007f8a:	07d8      	lsls	r0, r3, #31
 8007f8c:	d50f      	bpl.n	8007fae <_printf_float+0x242>
 8007f8e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8007f92:	4631      	mov	r1, r6
 8007f94:	4628      	mov	r0, r5
 8007f96:	47b8      	blx	r7
 8007f98:	3001      	adds	r0, #1
 8007f9a:	f43f af42 	beq.w	8007e22 <_printf_float+0xb6>
 8007f9e:	f04f 0900 	mov.w	r9, #0
 8007fa2:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 8007fa6:	f104 0a1a 	add.w	sl, r4, #26
 8007faa:	45c8      	cmp	r8, r9
 8007fac:	dc09      	bgt.n	8007fc2 <_printf_float+0x256>
 8007fae:	6823      	ldr	r3, [r4, #0]
 8007fb0:	079b      	lsls	r3, r3, #30
 8007fb2:	f100 8102 	bmi.w	80081ba <_printf_float+0x44e>
 8007fb6:	68e0      	ldr	r0, [r4, #12]
 8007fb8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007fba:	4298      	cmp	r0, r3
 8007fbc:	bfb8      	it	lt
 8007fbe:	4618      	movlt	r0, r3
 8007fc0:	e731      	b.n	8007e26 <_printf_float+0xba>
 8007fc2:	2301      	movs	r3, #1
 8007fc4:	4652      	mov	r2, sl
 8007fc6:	4631      	mov	r1, r6
 8007fc8:	4628      	mov	r0, r5
 8007fca:	47b8      	blx	r7
 8007fcc:	3001      	adds	r0, #1
 8007fce:	f43f af28 	beq.w	8007e22 <_printf_float+0xb6>
 8007fd2:	f109 0901 	add.w	r9, r9, #1
 8007fd6:	e7e8      	b.n	8007faa <_printf_float+0x23e>
 8007fd8:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007fda:	2b00      	cmp	r3, #0
 8007fdc:	dc38      	bgt.n	8008050 <_printf_float+0x2e4>
 8007fde:	2301      	movs	r3, #1
 8007fe0:	4631      	mov	r1, r6
 8007fe2:	4628      	mov	r0, r5
 8007fe4:	4a19      	ldr	r2, [pc, #100]	@ (800804c <_printf_float+0x2e0>)
 8007fe6:	47b8      	blx	r7
 8007fe8:	3001      	adds	r0, #1
 8007fea:	f43f af1a 	beq.w	8007e22 <_printf_float+0xb6>
 8007fee:	e9dd 390d 	ldrd	r3, r9, [sp, #52]	@ 0x34
 8007ff2:	ea59 0303 	orrs.w	r3, r9, r3
 8007ff6:	d102      	bne.n	8007ffe <_printf_float+0x292>
 8007ff8:	6823      	ldr	r3, [r4, #0]
 8007ffa:	07d9      	lsls	r1, r3, #31
 8007ffc:	d5d7      	bpl.n	8007fae <_printf_float+0x242>
 8007ffe:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8008002:	4631      	mov	r1, r6
 8008004:	4628      	mov	r0, r5
 8008006:	47b8      	blx	r7
 8008008:	3001      	adds	r0, #1
 800800a:	f43f af0a 	beq.w	8007e22 <_printf_float+0xb6>
 800800e:	f04f 0a00 	mov.w	sl, #0
 8008012:	f104 0b1a 	add.w	fp, r4, #26
 8008016:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8008018:	425b      	negs	r3, r3
 800801a:	4553      	cmp	r3, sl
 800801c:	dc01      	bgt.n	8008022 <_printf_float+0x2b6>
 800801e:	464b      	mov	r3, r9
 8008020:	e793      	b.n	8007f4a <_printf_float+0x1de>
 8008022:	2301      	movs	r3, #1
 8008024:	465a      	mov	r2, fp
 8008026:	4631      	mov	r1, r6
 8008028:	4628      	mov	r0, r5
 800802a:	47b8      	blx	r7
 800802c:	3001      	adds	r0, #1
 800802e:	f43f aef8 	beq.w	8007e22 <_printf_float+0xb6>
 8008032:	f10a 0a01 	add.w	sl, sl, #1
 8008036:	e7ee      	b.n	8008016 <_printf_float+0x2aa>
 8008038:	7fefffff 	.word	0x7fefffff
 800803c:	0800b568 	.word	0x0800b568
 8008040:	0800b56c 	.word	0x0800b56c
 8008044:	0800b570 	.word	0x0800b570
 8008048:	0800b574 	.word	0x0800b574
 800804c:	0800b578 	.word	0x0800b578
 8008050:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8008052:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 8008056:	4553      	cmp	r3, sl
 8008058:	bfa8      	it	ge
 800805a:	4653      	movge	r3, sl
 800805c:	2b00      	cmp	r3, #0
 800805e:	4699      	mov	r9, r3
 8008060:	dc36      	bgt.n	80080d0 <_printf_float+0x364>
 8008062:	f04f 0b00 	mov.w	fp, #0
 8008066:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800806a:	f104 021a 	add.w	r2, r4, #26
 800806e:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8008070:	930a      	str	r3, [sp, #40]	@ 0x28
 8008072:	eba3 0309 	sub.w	r3, r3, r9
 8008076:	455b      	cmp	r3, fp
 8008078:	dc31      	bgt.n	80080de <_printf_float+0x372>
 800807a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800807c:	459a      	cmp	sl, r3
 800807e:	dc3a      	bgt.n	80080f6 <_printf_float+0x38a>
 8008080:	6823      	ldr	r3, [r4, #0]
 8008082:	07da      	lsls	r2, r3, #31
 8008084:	d437      	bmi.n	80080f6 <_printf_float+0x38a>
 8008086:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8008088:	ebaa 0903 	sub.w	r9, sl, r3
 800808c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800808e:	ebaa 0303 	sub.w	r3, sl, r3
 8008092:	4599      	cmp	r9, r3
 8008094:	bfa8      	it	ge
 8008096:	4699      	movge	r9, r3
 8008098:	f1b9 0f00 	cmp.w	r9, #0
 800809c:	dc33      	bgt.n	8008106 <_printf_float+0x39a>
 800809e:	f04f 0800 	mov.w	r8, #0
 80080a2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80080a6:	f104 0b1a 	add.w	fp, r4, #26
 80080aa:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80080ac:	ebaa 0303 	sub.w	r3, sl, r3
 80080b0:	eba3 0309 	sub.w	r3, r3, r9
 80080b4:	4543      	cmp	r3, r8
 80080b6:	f77f af7a 	ble.w	8007fae <_printf_float+0x242>
 80080ba:	2301      	movs	r3, #1
 80080bc:	465a      	mov	r2, fp
 80080be:	4631      	mov	r1, r6
 80080c0:	4628      	mov	r0, r5
 80080c2:	47b8      	blx	r7
 80080c4:	3001      	adds	r0, #1
 80080c6:	f43f aeac 	beq.w	8007e22 <_printf_float+0xb6>
 80080ca:	f108 0801 	add.w	r8, r8, #1
 80080ce:	e7ec      	b.n	80080aa <_printf_float+0x33e>
 80080d0:	4642      	mov	r2, r8
 80080d2:	4631      	mov	r1, r6
 80080d4:	4628      	mov	r0, r5
 80080d6:	47b8      	blx	r7
 80080d8:	3001      	adds	r0, #1
 80080da:	d1c2      	bne.n	8008062 <_printf_float+0x2f6>
 80080dc:	e6a1      	b.n	8007e22 <_printf_float+0xb6>
 80080de:	2301      	movs	r3, #1
 80080e0:	4631      	mov	r1, r6
 80080e2:	4628      	mov	r0, r5
 80080e4:	920a      	str	r2, [sp, #40]	@ 0x28
 80080e6:	47b8      	blx	r7
 80080e8:	3001      	adds	r0, #1
 80080ea:	f43f ae9a 	beq.w	8007e22 <_printf_float+0xb6>
 80080ee:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80080f0:	f10b 0b01 	add.w	fp, fp, #1
 80080f4:	e7bb      	b.n	800806e <_printf_float+0x302>
 80080f6:	4631      	mov	r1, r6
 80080f8:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80080fc:	4628      	mov	r0, r5
 80080fe:	47b8      	blx	r7
 8008100:	3001      	adds	r0, #1
 8008102:	d1c0      	bne.n	8008086 <_printf_float+0x31a>
 8008104:	e68d      	b.n	8007e22 <_printf_float+0xb6>
 8008106:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8008108:	464b      	mov	r3, r9
 800810a:	4631      	mov	r1, r6
 800810c:	4628      	mov	r0, r5
 800810e:	4442      	add	r2, r8
 8008110:	47b8      	blx	r7
 8008112:	3001      	adds	r0, #1
 8008114:	d1c3      	bne.n	800809e <_printf_float+0x332>
 8008116:	e684      	b.n	8007e22 <_printf_float+0xb6>
 8008118:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 800811c:	f1ba 0f01 	cmp.w	sl, #1
 8008120:	dc01      	bgt.n	8008126 <_printf_float+0x3ba>
 8008122:	07db      	lsls	r3, r3, #31
 8008124:	d536      	bpl.n	8008194 <_printf_float+0x428>
 8008126:	2301      	movs	r3, #1
 8008128:	4642      	mov	r2, r8
 800812a:	4631      	mov	r1, r6
 800812c:	4628      	mov	r0, r5
 800812e:	47b8      	blx	r7
 8008130:	3001      	adds	r0, #1
 8008132:	f43f ae76 	beq.w	8007e22 <_printf_float+0xb6>
 8008136:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800813a:	4631      	mov	r1, r6
 800813c:	4628      	mov	r0, r5
 800813e:	47b8      	blx	r7
 8008140:	3001      	adds	r0, #1
 8008142:	f43f ae6e 	beq.w	8007e22 <_printf_float+0xb6>
 8008146:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800814a:	2200      	movs	r2, #0
 800814c:	2300      	movs	r3, #0
 800814e:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 8008152:	f7f8 fcdd 	bl	8000b10 <__aeabi_dcmpeq>
 8008156:	b9c0      	cbnz	r0, 800818a <_printf_float+0x41e>
 8008158:	4653      	mov	r3, sl
 800815a:	f108 0201 	add.w	r2, r8, #1
 800815e:	4631      	mov	r1, r6
 8008160:	4628      	mov	r0, r5
 8008162:	47b8      	blx	r7
 8008164:	3001      	adds	r0, #1
 8008166:	d10c      	bne.n	8008182 <_printf_float+0x416>
 8008168:	e65b      	b.n	8007e22 <_printf_float+0xb6>
 800816a:	2301      	movs	r3, #1
 800816c:	465a      	mov	r2, fp
 800816e:	4631      	mov	r1, r6
 8008170:	4628      	mov	r0, r5
 8008172:	47b8      	blx	r7
 8008174:	3001      	adds	r0, #1
 8008176:	f43f ae54 	beq.w	8007e22 <_printf_float+0xb6>
 800817a:	f108 0801 	add.w	r8, r8, #1
 800817e:	45d0      	cmp	r8, sl
 8008180:	dbf3      	blt.n	800816a <_printf_float+0x3fe>
 8008182:	464b      	mov	r3, r9
 8008184:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8008188:	e6e0      	b.n	8007f4c <_printf_float+0x1e0>
 800818a:	f04f 0800 	mov.w	r8, #0
 800818e:	f104 0b1a 	add.w	fp, r4, #26
 8008192:	e7f4      	b.n	800817e <_printf_float+0x412>
 8008194:	2301      	movs	r3, #1
 8008196:	4642      	mov	r2, r8
 8008198:	e7e1      	b.n	800815e <_printf_float+0x3f2>
 800819a:	2301      	movs	r3, #1
 800819c:	464a      	mov	r2, r9
 800819e:	4631      	mov	r1, r6
 80081a0:	4628      	mov	r0, r5
 80081a2:	47b8      	blx	r7
 80081a4:	3001      	adds	r0, #1
 80081a6:	f43f ae3c 	beq.w	8007e22 <_printf_float+0xb6>
 80081aa:	f108 0801 	add.w	r8, r8, #1
 80081ae:	68e3      	ldr	r3, [r4, #12]
 80081b0:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 80081b2:	1a5b      	subs	r3, r3, r1
 80081b4:	4543      	cmp	r3, r8
 80081b6:	dcf0      	bgt.n	800819a <_printf_float+0x42e>
 80081b8:	e6fd      	b.n	8007fb6 <_printf_float+0x24a>
 80081ba:	f04f 0800 	mov.w	r8, #0
 80081be:	f104 0919 	add.w	r9, r4, #25
 80081c2:	e7f4      	b.n	80081ae <_printf_float+0x442>

080081c4 <_printf_common>:
 80081c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80081c8:	4616      	mov	r6, r2
 80081ca:	4698      	mov	r8, r3
 80081cc:	688a      	ldr	r2, [r1, #8]
 80081ce:	690b      	ldr	r3, [r1, #16]
 80081d0:	4607      	mov	r7, r0
 80081d2:	4293      	cmp	r3, r2
 80081d4:	bfb8      	it	lt
 80081d6:	4613      	movlt	r3, r2
 80081d8:	6033      	str	r3, [r6, #0]
 80081da:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80081de:	460c      	mov	r4, r1
 80081e0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80081e4:	b10a      	cbz	r2, 80081ea <_printf_common+0x26>
 80081e6:	3301      	adds	r3, #1
 80081e8:	6033      	str	r3, [r6, #0]
 80081ea:	6823      	ldr	r3, [r4, #0]
 80081ec:	0699      	lsls	r1, r3, #26
 80081ee:	bf42      	ittt	mi
 80081f0:	6833      	ldrmi	r3, [r6, #0]
 80081f2:	3302      	addmi	r3, #2
 80081f4:	6033      	strmi	r3, [r6, #0]
 80081f6:	6825      	ldr	r5, [r4, #0]
 80081f8:	f015 0506 	ands.w	r5, r5, #6
 80081fc:	d106      	bne.n	800820c <_printf_common+0x48>
 80081fe:	f104 0a19 	add.w	sl, r4, #25
 8008202:	68e3      	ldr	r3, [r4, #12]
 8008204:	6832      	ldr	r2, [r6, #0]
 8008206:	1a9b      	subs	r3, r3, r2
 8008208:	42ab      	cmp	r3, r5
 800820a:	dc2b      	bgt.n	8008264 <_printf_common+0xa0>
 800820c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8008210:	6822      	ldr	r2, [r4, #0]
 8008212:	3b00      	subs	r3, #0
 8008214:	bf18      	it	ne
 8008216:	2301      	movne	r3, #1
 8008218:	0692      	lsls	r2, r2, #26
 800821a:	d430      	bmi.n	800827e <_printf_common+0xba>
 800821c:	4641      	mov	r1, r8
 800821e:	4638      	mov	r0, r7
 8008220:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8008224:	47c8      	blx	r9
 8008226:	3001      	adds	r0, #1
 8008228:	d023      	beq.n	8008272 <_printf_common+0xae>
 800822a:	6823      	ldr	r3, [r4, #0]
 800822c:	6922      	ldr	r2, [r4, #16]
 800822e:	f003 0306 	and.w	r3, r3, #6
 8008232:	2b04      	cmp	r3, #4
 8008234:	bf14      	ite	ne
 8008236:	2500      	movne	r5, #0
 8008238:	6833      	ldreq	r3, [r6, #0]
 800823a:	f04f 0600 	mov.w	r6, #0
 800823e:	bf08      	it	eq
 8008240:	68e5      	ldreq	r5, [r4, #12]
 8008242:	f104 041a 	add.w	r4, r4, #26
 8008246:	bf08      	it	eq
 8008248:	1aed      	subeq	r5, r5, r3
 800824a:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800824e:	bf08      	it	eq
 8008250:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008254:	4293      	cmp	r3, r2
 8008256:	bfc4      	itt	gt
 8008258:	1a9b      	subgt	r3, r3, r2
 800825a:	18ed      	addgt	r5, r5, r3
 800825c:	42b5      	cmp	r5, r6
 800825e:	d11a      	bne.n	8008296 <_printf_common+0xd2>
 8008260:	2000      	movs	r0, #0
 8008262:	e008      	b.n	8008276 <_printf_common+0xb2>
 8008264:	2301      	movs	r3, #1
 8008266:	4652      	mov	r2, sl
 8008268:	4641      	mov	r1, r8
 800826a:	4638      	mov	r0, r7
 800826c:	47c8      	blx	r9
 800826e:	3001      	adds	r0, #1
 8008270:	d103      	bne.n	800827a <_printf_common+0xb6>
 8008272:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8008276:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800827a:	3501      	adds	r5, #1
 800827c:	e7c1      	b.n	8008202 <_printf_common+0x3e>
 800827e:	2030      	movs	r0, #48	@ 0x30
 8008280:	18e1      	adds	r1, r4, r3
 8008282:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8008286:	1c5a      	adds	r2, r3, #1
 8008288:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800828c:	4422      	add	r2, r4
 800828e:	3302      	adds	r3, #2
 8008290:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8008294:	e7c2      	b.n	800821c <_printf_common+0x58>
 8008296:	2301      	movs	r3, #1
 8008298:	4622      	mov	r2, r4
 800829a:	4641      	mov	r1, r8
 800829c:	4638      	mov	r0, r7
 800829e:	47c8      	blx	r9
 80082a0:	3001      	adds	r0, #1
 80082a2:	d0e6      	beq.n	8008272 <_printf_common+0xae>
 80082a4:	3601      	adds	r6, #1
 80082a6:	e7d9      	b.n	800825c <_printf_common+0x98>

080082a8 <_printf_i>:
 80082a8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80082ac:	7e0f      	ldrb	r7, [r1, #24]
 80082ae:	4691      	mov	r9, r2
 80082b0:	2f78      	cmp	r7, #120	@ 0x78
 80082b2:	4680      	mov	r8, r0
 80082b4:	460c      	mov	r4, r1
 80082b6:	469a      	mov	sl, r3
 80082b8:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80082ba:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80082be:	d807      	bhi.n	80082d0 <_printf_i+0x28>
 80082c0:	2f62      	cmp	r7, #98	@ 0x62
 80082c2:	d80a      	bhi.n	80082da <_printf_i+0x32>
 80082c4:	2f00      	cmp	r7, #0
 80082c6:	f000 80d3 	beq.w	8008470 <_printf_i+0x1c8>
 80082ca:	2f58      	cmp	r7, #88	@ 0x58
 80082cc:	f000 80ba 	beq.w	8008444 <_printf_i+0x19c>
 80082d0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80082d4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80082d8:	e03a      	b.n	8008350 <_printf_i+0xa8>
 80082da:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80082de:	2b15      	cmp	r3, #21
 80082e0:	d8f6      	bhi.n	80082d0 <_printf_i+0x28>
 80082e2:	a101      	add	r1, pc, #4	@ (adr r1, 80082e8 <_printf_i+0x40>)
 80082e4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80082e8:	08008341 	.word	0x08008341
 80082ec:	08008355 	.word	0x08008355
 80082f0:	080082d1 	.word	0x080082d1
 80082f4:	080082d1 	.word	0x080082d1
 80082f8:	080082d1 	.word	0x080082d1
 80082fc:	080082d1 	.word	0x080082d1
 8008300:	08008355 	.word	0x08008355
 8008304:	080082d1 	.word	0x080082d1
 8008308:	080082d1 	.word	0x080082d1
 800830c:	080082d1 	.word	0x080082d1
 8008310:	080082d1 	.word	0x080082d1
 8008314:	08008457 	.word	0x08008457
 8008318:	0800837f 	.word	0x0800837f
 800831c:	08008411 	.word	0x08008411
 8008320:	080082d1 	.word	0x080082d1
 8008324:	080082d1 	.word	0x080082d1
 8008328:	08008479 	.word	0x08008479
 800832c:	080082d1 	.word	0x080082d1
 8008330:	0800837f 	.word	0x0800837f
 8008334:	080082d1 	.word	0x080082d1
 8008338:	080082d1 	.word	0x080082d1
 800833c:	08008419 	.word	0x08008419
 8008340:	6833      	ldr	r3, [r6, #0]
 8008342:	1d1a      	adds	r2, r3, #4
 8008344:	681b      	ldr	r3, [r3, #0]
 8008346:	6032      	str	r2, [r6, #0]
 8008348:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800834c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8008350:	2301      	movs	r3, #1
 8008352:	e09e      	b.n	8008492 <_printf_i+0x1ea>
 8008354:	6833      	ldr	r3, [r6, #0]
 8008356:	6820      	ldr	r0, [r4, #0]
 8008358:	1d19      	adds	r1, r3, #4
 800835a:	6031      	str	r1, [r6, #0]
 800835c:	0606      	lsls	r6, r0, #24
 800835e:	d501      	bpl.n	8008364 <_printf_i+0xbc>
 8008360:	681d      	ldr	r5, [r3, #0]
 8008362:	e003      	b.n	800836c <_printf_i+0xc4>
 8008364:	0645      	lsls	r5, r0, #25
 8008366:	d5fb      	bpl.n	8008360 <_printf_i+0xb8>
 8008368:	f9b3 5000 	ldrsh.w	r5, [r3]
 800836c:	2d00      	cmp	r5, #0
 800836e:	da03      	bge.n	8008378 <_printf_i+0xd0>
 8008370:	232d      	movs	r3, #45	@ 0x2d
 8008372:	426d      	negs	r5, r5
 8008374:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008378:	230a      	movs	r3, #10
 800837a:	4859      	ldr	r0, [pc, #356]	@ (80084e0 <_printf_i+0x238>)
 800837c:	e011      	b.n	80083a2 <_printf_i+0xfa>
 800837e:	6821      	ldr	r1, [r4, #0]
 8008380:	6833      	ldr	r3, [r6, #0]
 8008382:	0608      	lsls	r0, r1, #24
 8008384:	f853 5b04 	ldr.w	r5, [r3], #4
 8008388:	d402      	bmi.n	8008390 <_printf_i+0xe8>
 800838a:	0649      	lsls	r1, r1, #25
 800838c:	bf48      	it	mi
 800838e:	b2ad      	uxthmi	r5, r5
 8008390:	2f6f      	cmp	r7, #111	@ 0x6f
 8008392:	6033      	str	r3, [r6, #0]
 8008394:	bf14      	ite	ne
 8008396:	230a      	movne	r3, #10
 8008398:	2308      	moveq	r3, #8
 800839a:	4851      	ldr	r0, [pc, #324]	@ (80084e0 <_printf_i+0x238>)
 800839c:	2100      	movs	r1, #0
 800839e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80083a2:	6866      	ldr	r6, [r4, #4]
 80083a4:	2e00      	cmp	r6, #0
 80083a6:	bfa8      	it	ge
 80083a8:	6821      	ldrge	r1, [r4, #0]
 80083aa:	60a6      	str	r6, [r4, #8]
 80083ac:	bfa4      	itt	ge
 80083ae:	f021 0104 	bicge.w	r1, r1, #4
 80083b2:	6021      	strge	r1, [r4, #0]
 80083b4:	b90d      	cbnz	r5, 80083ba <_printf_i+0x112>
 80083b6:	2e00      	cmp	r6, #0
 80083b8:	d04b      	beq.n	8008452 <_printf_i+0x1aa>
 80083ba:	4616      	mov	r6, r2
 80083bc:	fbb5 f1f3 	udiv	r1, r5, r3
 80083c0:	fb03 5711 	mls	r7, r3, r1, r5
 80083c4:	5dc7      	ldrb	r7, [r0, r7]
 80083c6:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80083ca:	462f      	mov	r7, r5
 80083cc:	42bb      	cmp	r3, r7
 80083ce:	460d      	mov	r5, r1
 80083d0:	d9f4      	bls.n	80083bc <_printf_i+0x114>
 80083d2:	2b08      	cmp	r3, #8
 80083d4:	d10b      	bne.n	80083ee <_printf_i+0x146>
 80083d6:	6823      	ldr	r3, [r4, #0]
 80083d8:	07df      	lsls	r7, r3, #31
 80083da:	d508      	bpl.n	80083ee <_printf_i+0x146>
 80083dc:	6923      	ldr	r3, [r4, #16]
 80083de:	6861      	ldr	r1, [r4, #4]
 80083e0:	4299      	cmp	r1, r3
 80083e2:	bfde      	ittt	le
 80083e4:	2330      	movle	r3, #48	@ 0x30
 80083e6:	f806 3c01 	strble.w	r3, [r6, #-1]
 80083ea:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 80083ee:	1b92      	subs	r2, r2, r6
 80083f0:	6122      	str	r2, [r4, #16]
 80083f2:	464b      	mov	r3, r9
 80083f4:	4621      	mov	r1, r4
 80083f6:	4640      	mov	r0, r8
 80083f8:	f8cd a000 	str.w	sl, [sp]
 80083fc:	aa03      	add	r2, sp, #12
 80083fe:	f7ff fee1 	bl	80081c4 <_printf_common>
 8008402:	3001      	adds	r0, #1
 8008404:	d14a      	bne.n	800849c <_printf_i+0x1f4>
 8008406:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800840a:	b004      	add	sp, #16
 800840c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008410:	6823      	ldr	r3, [r4, #0]
 8008412:	f043 0320 	orr.w	r3, r3, #32
 8008416:	6023      	str	r3, [r4, #0]
 8008418:	2778      	movs	r7, #120	@ 0x78
 800841a:	4832      	ldr	r0, [pc, #200]	@ (80084e4 <_printf_i+0x23c>)
 800841c:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8008420:	6823      	ldr	r3, [r4, #0]
 8008422:	6831      	ldr	r1, [r6, #0]
 8008424:	061f      	lsls	r7, r3, #24
 8008426:	f851 5b04 	ldr.w	r5, [r1], #4
 800842a:	d402      	bmi.n	8008432 <_printf_i+0x18a>
 800842c:	065f      	lsls	r7, r3, #25
 800842e:	bf48      	it	mi
 8008430:	b2ad      	uxthmi	r5, r5
 8008432:	6031      	str	r1, [r6, #0]
 8008434:	07d9      	lsls	r1, r3, #31
 8008436:	bf44      	itt	mi
 8008438:	f043 0320 	orrmi.w	r3, r3, #32
 800843c:	6023      	strmi	r3, [r4, #0]
 800843e:	b11d      	cbz	r5, 8008448 <_printf_i+0x1a0>
 8008440:	2310      	movs	r3, #16
 8008442:	e7ab      	b.n	800839c <_printf_i+0xf4>
 8008444:	4826      	ldr	r0, [pc, #152]	@ (80084e0 <_printf_i+0x238>)
 8008446:	e7e9      	b.n	800841c <_printf_i+0x174>
 8008448:	6823      	ldr	r3, [r4, #0]
 800844a:	f023 0320 	bic.w	r3, r3, #32
 800844e:	6023      	str	r3, [r4, #0]
 8008450:	e7f6      	b.n	8008440 <_printf_i+0x198>
 8008452:	4616      	mov	r6, r2
 8008454:	e7bd      	b.n	80083d2 <_printf_i+0x12a>
 8008456:	6833      	ldr	r3, [r6, #0]
 8008458:	6825      	ldr	r5, [r4, #0]
 800845a:	1d18      	adds	r0, r3, #4
 800845c:	6961      	ldr	r1, [r4, #20]
 800845e:	6030      	str	r0, [r6, #0]
 8008460:	062e      	lsls	r6, r5, #24
 8008462:	681b      	ldr	r3, [r3, #0]
 8008464:	d501      	bpl.n	800846a <_printf_i+0x1c2>
 8008466:	6019      	str	r1, [r3, #0]
 8008468:	e002      	b.n	8008470 <_printf_i+0x1c8>
 800846a:	0668      	lsls	r0, r5, #25
 800846c:	d5fb      	bpl.n	8008466 <_printf_i+0x1be>
 800846e:	8019      	strh	r1, [r3, #0]
 8008470:	2300      	movs	r3, #0
 8008472:	4616      	mov	r6, r2
 8008474:	6123      	str	r3, [r4, #16]
 8008476:	e7bc      	b.n	80083f2 <_printf_i+0x14a>
 8008478:	6833      	ldr	r3, [r6, #0]
 800847a:	2100      	movs	r1, #0
 800847c:	1d1a      	adds	r2, r3, #4
 800847e:	6032      	str	r2, [r6, #0]
 8008480:	681e      	ldr	r6, [r3, #0]
 8008482:	6862      	ldr	r2, [r4, #4]
 8008484:	4630      	mov	r0, r6
 8008486:	f000 f9e6 	bl	8008856 <memchr>
 800848a:	b108      	cbz	r0, 8008490 <_printf_i+0x1e8>
 800848c:	1b80      	subs	r0, r0, r6
 800848e:	6060      	str	r0, [r4, #4]
 8008490:	6863      	ldr	r3, [r4, #4]
 8008492:	6123      	str	r3, [r4, #16]
 8008494:	2300      	movs	r3, #0
 8008496:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800849a:	e7aa      	b.n	80083f2 <_printf_i+0x14a>
 800849c:	4632      	mov	r2, r6
 800849e:	4649      	mov	r1, r9
 80084a0:	4640      	mov	r0, r8
 80084a2:	6923      	ldr	r3, [r4, #16]
 80084a4:	47d0      	blx	sl
 80084a6:	3001      	adds	r0, #1
 80084a8:	d0ad      	beq.n	8008406 <_printf_i+0x15e>
 80084aa:	6823      	ldr	r3, [r4, #0]
 80084ac:	079b      	lsls	r3, r3, #30
 80084ae:	d413      	bmi.n	80084d8 <_printf_i+0x230>
 80084b0:	68e0      	ldr	r0, [r4, #12]
 80084b2:	9b03      	ldr	r3, [sp, #12]
 80084b4:	4298      	cmp	r0, r3
 80084b6:	bfb8      	it	lt
 80084b8:	4618      	movlt	r0, r3
 80084ba:	e7a6      	b.n	800840a <_printf_i+0x162>
 80084bc:	2301      	movs	r3, #1
 80084be:	4632      	mov	r2, r6
 80084c0:	4649      	mov	r1, r9
 80084c2:	4640      	mov	r0, r8
 80084c4:	47d0      	blx	sl
 80084c6:	3001      	adds	r0, #1
 80084c8:	d09d      	beq.n	8008406 <_printf_i+0x15e>
 80084ca:	3501      	adds	r5, #1
 80084cc:	68e3      	ldr	r3, [r4, #12]
 80084ce:	9903      	ldr	r1, [sp, #12]
 80084d0:	1a5b      	subs	r3, r3, r1
 80084d2:	42ab      	cmp	r3, r5
 80084d4:	dcf2      	bgt.n	80084bc <_printf_i+0x214>
 80084d6:	e7eb      	b.n	80084b0 <_printf_i+0x208>
 80084d8:	2500      	movs	r5, #0
 80084da:	f104 0619 	add.w	r6, r4, #25
 80084de:	e7f5      	b.n	80084cc <_printf_i+0x224>
 80084e0:	0800b57a 	.word	0x0800b57a
 80084e4:	0800b58b 	.word	0x0800b58b

080084e8 <std>:
 80084e8:	2300      	movs	r3, #0
 80084ea:	b510      	push	{r4, lr}
 80084ec:	4604      	mov	r4, r0
 80084ee:	e9c0 3300 	strd	r3, r3, [r0]
 80084f2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80084f6:	6083      	str	r3, [r0, #8]
 80084f8:	8181      	strh	r1, [r0, #12]
 80084fa:	6643      	str	r3, [r0, #100]	@ 0x64
 80084fc:	81c2      	strh	r2, [r0, #14]
 80084fe:	6183      	str	r3, [r0, #24]
 8008500:	4619      	mov	r1, r3
 8008502:	2208      	movs	r2, #8
 8008504:	305c      	adds	r0, #92	@ 0x5c
 8008506:	f000 f914 	bl	8008732 <memset>
 800850a:	4b0d      	ldr	r3, [pc, #52]	@ (8008540 <std+0x58>)
 800850c:	6224      	str	r4, [r4, #32]
 800850e:	6263      	str	r3, [r4, #36]	@ 0x24
 8008510:	4b0c      	ldr	r3, [pc, #48]	@ (8008544 <std+0x5c>)
 8008512:	62a3      	str	r3, [r4, #40]	@ 0x28
 8008514:	4b0c      	ldr	r3, [pc, #48]	@ (8008548 <std+0x60>)
 8008516:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8008518:	4b0c      	ldr	r3, [pc, #48]	@ (800854c <std+0x64>)
 800851a:	6323      	str	r3, [r4, #48]	@ 0x30
 800851c:	4b0c      	ldr	r3, [pc, #48]	@ (8008550 <std+0x68>)
 800851e:	429c      	cmp	r4, r3
 8008520:	d006      	beq.n	8008530 <std+0x48>
 8008522:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8008526:	4294      	cmp	r4, r2
 8008528:	d002      	beq.n	8008530 <std+0x48>
 800852a:	33d0      	adds	r3, #208	@ 0xd0
 800852c:	429c      	cmp	r4, r3
 800852e:	d105      	bne.n	800853c <std+0x54>
 8008530:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8008534:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008538:	f000 b98a 	b.w	8008850 <__retarget_lock_init_recursive>
 800853c:	bd10      	pop	{r4, pc}
 800853e:	bf00      	nop
 8008540:	080086ad 	.word	0x080086ad
 8008544:	080086cf 	.word	0x080086cf
 8008548:	08008707 	.word	0x08008707
 800854c:	0800872b 	.word	0x0800872b
 8008550:	200011c4 	.word	0x200011c4

08008554 <stdio_exit_handler>:
 8008554:	4a02      	ldr	r2, [pc, #8]	@ (8008560 <stdio_exit_handler+0xc>)
 8008556:	4903      	ldr	r1, [pc, #12]	@ (8008564 <stdio_exit_handler+0x10>)
 8008558:	4803      	ldr	r0, [pc, #12]	@ (8008568 <stdio_exit_handler+0x14>)
 800855a:	f000 b869 	b.w	8008630 <_fwalk_sglue>
 800855e:	bf00      	nop
 8008560:	20000190 	.word	0x20000190
 8008564:	0800ac1d 	.word	0x0800ac1d
 8008568:	2000030c 	.word	0x2000030c

0800856c <cleanup_stdio>:
 800856c:	6841      	ldr	r1, [r0, #4]
 800856e:	4b0c      	ldr	r3, [pc, #48]	@ (80085a0 <cleanup_stdio+0x34>)
 8008570:	b510      	push	{r4, lr}
 8008572:	4299      	cmp	r1, r3
 8008574:	4604      	mov	r4, r0
 8008576:	d001      	beq.n	800857c <cleanup_stdio+0x10>
 8008578:	f002 fb50 	bl	800ac1c <_fflush_r>
 800857c:	68a1      	ldr	r1, [r4, #8]
 800857e:	4b09      	ldr	r3, [pc, #36]	@ (80085a4 <cleanup_stdio+0x38>)
 8008580:	4299      	cmp	r1, r3
 8008582:	d002      	beq.n	800858a <cleanup_stdio+0x1e>
 8008584:	4620      	mov	r0, r4
 8008586:	f002 fb49 	bl	800ac1c <_fflush_r>
 800858a:	68e1      	ldr	r1, [r4, #12]
 800858c:	4b06      	ldr	r3, [pc, #24]	@ (80085a8 <cleanup_stdio+0x3c>)
 800858e:	4299      	cmp	r1, r3
 8008590:	d004      	beq.n	800859c <cleanup_stdio+0x30>
 8008592:	4620      	mov	r0, r4
 8008594:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008598:	f002 bb40 	b.w	800ac1c <_fflush_r>
 800859c:	bd10      	pop	{r4, pc}
 800859e:	bf00      	nop
 80085a0:	200011c4 	.word	0x200011c4
 80085a4:	2000122c 	.word	0x2000122c
 80085a8:	20001294 	.word	0x20001294

080085ac <global_stdio_init.part.0>:
 80085ac:	b510      	push	{r4, lr}
 80085ae:	4b0b      	ldr	r3, [pc, #44]	@ (80085dc <global_stdio_init.part.0+0x30>)
 80085b0:	4c0b      	ldr	r4, [pc, #44]	@ (80085e0 <global_stdio_init.part.0+0x34>)
 80085b2:	4a0c      	ldr	r2, [pc, #48]	@ (80085e4 <global_stdio_init.part.0+0x38>)
 80085b4:	4620      	mov	r0, r4
 80085b6:	601a      	str	r2, [r3, #0]
 80085b8:	2104      	movs	r1, #4
 80085ba:	2200      	movs	r2, #0
 80085bc:	f7ff ff94 	bl	80084e8 <std>
 80085c0:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80085c4:	2201      	movs	r2, #1
 80085c6:	2109      	movs	r1, #9
 80085c8:	f7ff ff8e 	bl	80084e8 <std>
 80085cc:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80085d0:	2202      	movs	r2, #2
 80085d2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80085d6:	2112      	movs	r1, #18
 80085d8:	f7ff bf86 	b.w	80084e8 <std>
 80085dc:	200012fc 	.word	0x200012fc
 80085e0:	200011c4 	.word	0x200011c4
 80085e4:	08008555 	.word	0x08008555

080085e8 <__sfp_lock_acquire>:
 80085e8:	4801      	ldr	r0, [pc, #4]	@ (80085f0 <__sfp_lock_acquire+0x8>)
 80085ea:	f000 b932 	b.w	8008852 <__retarget_lock_acquire_recursive>
 80085ee:	bf00      	nop
 80085f0:	20001305 	.word	0x20001305

080085f4 <__sfp_lock_release>:
 80085f4:	4801      	ldr	r0, [pc, #4]	@ (80085fc <__sfp_lock_release+0x8>)
 80085f6:	f000 b92d 	b.w	8008854 <__retarget_lock_release_recursive>
 80085fa:	bf00      	nop
 80085fc:	20001305 	.word	0x20001305

08008600 <__sinit>:
 8008600:	b510      	push	{r4, lr}
 8008602:	4604      	mov	r4, r0
 8008604:	f7ff fff0 	bl	80085e8 <__sfp_lock_acquire>
 8008608:	6a23      	ldr	r3, [r4, #32]
 800860a:	b11b      	cbz	r3, 8008614 <__sinit+0x14>
 800860c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008610:	f7ff bff0 	b.w	80085f4 <__sfp_lock_release>
 8008614:	4b04      	ldr	r3, [pc, #16]	@ (8008628 <__sinit+0x28>)
 8008616:	6223      	str	r3, [r4, #32]
 8008618:	4b04      	ldr	r3, [pc, #16]	@ (800862c <__sinit+0x2c>)
 800861a:	681b      	ldr	r3, [r3, #0]
 800861c:	2b00      	cmp	r3, #0
 800861e:	d1f5      	bne.n	800860c <__sinit+0xc>
 8008620:	f7ff ffc4 	bl	80085ac <global_stdio_init.part.0>
 8008624:	e7f2      	b.n	800860c <__sinit+0xc>
 8008626:	bf00      	nop
 8008628:	0800856d 	.word	0x0800856d
 800862c:	200012fc 	.word	0x200012fc

08008630 <_fwalk_sglue>:
 8008630:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008634:	4607      	mov	r7, r0
 8008636:	4688      	mov	r8, r1
 8008638:	4614      	mov	r4, r2
 800863a:	2600      	movs	r6, #0
 800863c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008640:	f1b9 0901 	subs.w	r9, r9, #1
 8008644:	d505      	bpl.n	8008652 <_fwalk_sglue+0x22>
 8008646:	6824      	ldr	r4, [r4, #0]
 8008648:	2c00      	cmp	r4, #0
 800864a:	d1f7      	bne.n	800863c <_fwalk_sglue+0xc>
 800864c:	4630      	mov	r0, r6
 800864e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008652:	89ab      	ldrh	r3, [r5, #12]
 8008654:	2b01      	cmp	r3, #1
 8008656:	d907      	bls.n	8008668 <_fwalk_sglue+0x38>
 8008658:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800865c:	3301      	adds	r3, #1
 800865e:	d003      	beq.n	8008668 <_fwalk_sglue+0x38>
 8008660:	4629      	mov	r1, r5
 8008662:	4638      	mov	r0, r7
 8008664:	47c0      	blx	r8
 8008666:	4306      	orrs	r6, r0
 8008668:	3568      	adds	r5, #104	@ 0x68
 800866a:	e7e9      	b.n	8008640 <_fwalk_sglue+0x10>

0800866c <siprintf>:
 800866c:	b40e      	push	{r1, r2, r3}
 800866e:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8008672:	b500      	push	{lr}
 8008674:	b09c      	sub	sp, #112	@ 0x70
 8008676:	ab1d      	add	r3, sp, #116	@ 0x74
 8008678:	9002      	str	r0, [sp, #8]
 800867a:	9006      	str	r0, [sp, #24]
 800867c:	9107      	str	r1, [sp, #28]
 800867e:	9104      	str	r1, [sp, #16]
 8008680:	4808      	ldr	r0, [pc, #32]	@ (80086a4 <siprintf+0x38>)
 8008682:	4909      	ldr	r1, [pc, #36]	@ (80086a8 <siprintf+0x3c>)
 8008684:	f853 2b04 	ldr.w	r2, [r3], #4
 8008688:	9105      	str	r1, [sp, #20]
 800868a:	6800      	ldr	r0, [r0, #0]
 800868c:	a902      	add	r1, sp, #8
 800868e:	9301      	str	r3, [sp, #4]
 8008690:	f002 f948 	bl	800a924 <_svfiprintf_r>
 8008694:	2200      	movs	r2, #0
 8008696:	9b02      	ldr	r3, [sp, #8]
 8008698:	701a      	strb	r2, [r3, #0]
 800869a:	b01c      	add	sp, #112	@ 0x70
 800869c:	f85d eb04 	ldr.w	lr, [sp], #4
 80086a0:	b003      	add	sp, #12
 80086a2:	4770      	bx	lr
 80086a4:	20000308 	.word	0x20000308
 80086a8:	ffff0208 	.word	0xffff0208

080086ac <__sread>:
 80086ac:	b510      	push	{r4, lr}
 80086ae:	460c      	mov	r4, r1
 80086b0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80086b4:	f000 f87e 	bl	80087b4 <_read_r>
 80086b8:	2800      	cmp	r0, #0
 80086ba:	bfab      	itete	ge
 80086bc:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80086be:	89a3      	ldrhlt	r3, [r4, #12]
 80086c0:	181b      	addge	r3, r3, r0
 80086c2:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80086c6:	bfac      	ite	ge
 80086c8:	6563      	strge	r3, [r4, #84]	@ 0x54
 80086ca:	81a3      	strhlt	r3, [r4, #12]
 80086cc:	bd10      	pop	{r4, pc}

080086ce <__swrite>:
 80086ce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80086d2:	461f      	mov	r7, r3
 80086d4:	898b      	ldrh	r3, [r1, #12]
 80086d6:	4605      	mov	r5, r0
 80086d8:	05db      	lsls	r3, r3, #23
 80086da:	460c      	mov	r4, r1
 80086dc:	4616      	mov	r6, r2
 80086de:	d505      	bpl.n	80086ec <__swrite+0x1e>
 80086e0:	2302      	movs	r3, #2
 80086e2:	2200      	movs	r2, #0
 80086e4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80086e8:	f000 f852 	bl	8008790 <_lseek_r>
 80086ec:	89a3      	ldrh	r3, [r4, #12]
 80086ee:	4632      	mov	r2, r6
 80086f0:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80086f4:	81a3      	strh	r3, [r4, #12]
 80086f6:	4628      	mov	r0, r5
 80086f8:	463b      	mov	r3, r7
 80086fa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80086fe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008702:	f000 b869 	b.w	80087d8 <_write_r>

08008706 <__sseek>:
 8008706:	b510      	push	{r4, lr}
 8008708:	460c      	mov	r4, r1
 800870a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800870e:	f000 f83f 	bl	8008790 <_lseek_r>
 8008712:	1c43      	adds	r3, r0, #1
 8008714:	89a3      	ldrh	r3, [r4, #12]
 8008716:	bf15      	itete	ne
 8008718:	6560      	strne	r0, [r4, #84]	@ 0x54
 800871a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800871e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8008722:	81a3      	strheq	r3, [r4, #12]
 8008724:	bf18      	it	ne
 8008726:	81a3      	strhne	r3, [r4, #12]
 8008728:	bd10      	pop	{r4, pc}

0800872a <__sclose>:
 800872a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800872e:	f000 b81f 	b.w	8008770 <_close_r>

08008732 <memset>:
 8008732:	4603      	mov	r3, r0
 8008734:	4402      	add	r2, r0
 8008736:	4293      	cmp	r3, r2
 8008738:	d100      	bne.n	800873c <memset+0xa>
 800873a:	4770      	bx	lr
 800873c:	f803 1b01 	strb.w	r1, [r3], #1
 8008740:	e7f9      	b.n	8008736 <memset+0x4>

08008742 <strncmp>:
 8008742:	b510      	push	{r4, lr}
 8008744:	b16a      	cbz	r2, 8008762 <strncmp+0x20>
 8008746:	3901      	subs	r1, #1
 8008748:	1884      	adds	r4, r0, r2
 800874a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800874e:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8008752:	429a      	cmp	r2, r3
 8008754:	d103      	bne.n	800875e <strncmp+0x1c>
 8008756:	42a0      	cmp	r0, r4
 8008758:	d001      	beq.n	800875e <strncmp+0x1c>
 800875a:	2a00      	cmp	r2, #0
 800875c:	d1f5      	bne.n	800874a <strncmp+0x8>
 800875e:	1ad0      	subs	r0, r2, r3
 8008760:	bd10      	pop	{r4, pc}
 8008762:	4610      	mov	r0, r2
 8008764:	e7fc      	b.n	8008760 <strncmp+0x1e>
	...

08008768 <_localeconv_r>:
 8008768:	4800      	ldr	r0, [pc, #0]	@ (800876c <_localeconv_r+0x4>)
 800876a:	4770      	bx	lr
 800876c:	2000028c 	.word	0x2000028c

08008770 <_close_r>:
 8008770:	b538      	push	{r3, r4, r5, lr}
 8008772:	2300      	movs	r3, #0
 8008774:	4d05      	ldr	r5, [pc, #20]	@ (800878c <_close_r+0x1c>)
 8008776:	4604      	mov	r4, r0
 8008778:	4608      	mov	r0, r1
 800877a:	602b      	str	r3, [r5, #0]
 800877c:	f7f9 fa4c 	bl	8001c18 <_close>
 8008780:	1c43      	adds	r3, r0, #1
 8008782:	d102      	bne.n	800878a <_close_r+0x1a>
 8008784:	682b      	ldr	r3, [r5, #0]
 8008786:	b103      	cbz	r3, 800878a <_close_r+0x1a>
 8008788:	6023      	str	r3, [r4, #0]
 800878a:	bd38      	pop	{r3, r4, r5, pc}
 800878c:	20001300 	.word	0x20001300

08008790 <_lseek_r>:
 8008790:	b538      	push	{r3, r4, r5, lr}
 8008792:	4604      	mov	r4, r0
 8008794:	4608      	mov	r0, r1
 8008796:	4611      	mov	r1, r2
 8008798:	2200      	movs	r2, #0
 800879a:	4d05      	ldr	r5, [pc, #20]	@ (80087b0 <_lseek_r+0x20>)
 800879c:	602a      	str	r2, [r5, #0]
 800879e:	461a      	mov	r2, r3
 80087a0:	f7f9 fa44 	bl	8001c2c <_lseek>
 80087a4:	1c43      	adds	r3, r0, #1
 80087a6:	d102      	bne.n	80087ae <_lseek_r+0x1e>
 80087a8:	682b      	ldr	r3, [r5, #0]
 80087aa:	b103      	cbz	r3, 80087ae <_lseek_r+0x1e>
 80087ac:	6023      	str	r3, [r4, #0]
 80087ae:	bd38      	pop	{r3, r4, r5, pc}
 80087b0:	20001300 	.word	0x20001300

080087b4 <_read_r>:
 80087b4:	b538      	push	{r3, r4, r5, lr}
 80087b6:	4604      	mov	r4, r0
 80087b8:	4608      	mov	r0, r1
 80087ba:	4611      	mov	r1, r2
 80087bc:	2200      	movs	r2, #0
 80087be:	4d05      	ldr	r5, [pc, #20]	@ (80087d4 <_read_r+0x20>)
 80087c0:	602a      	str	r2, [r5, #0]
 80087c2:	461a      	mov	r2, r3
 80087c4:	f7f9 fa0a 	bl	8001bdc <_read>
 80087c8:	1c43      	adds	r3, r0, #1
 80087ca:	d102      	bne.n	80087d2 <_read_r+0x1e>
 80087cc:	682b      	ldr	r3, [r5, #0]
 80087ce:	b103      	cbz	r3, 80087d2 <_read_r+0x1e>
 80087d0:	6023      	str	r3, [r4, #0]
 80087d2:	bd38      	pop	{r3, r4, r5, pc}
 80087d4:	20001300 	.word	0x20001300

080087d8 <_write_r>:
 80087d8:	b538      	push	{r3, r4, r5, lr}
 80087da:	4604      	mov	r4, r0
 80087dc:	4608      	mov	r0, r1
 80087de:	4611      	mov	r1, r2
 80087e0:	2200      	movs	r2, #0
 80087e2:	4d05      	ldr	r5, [pc, #20]	@ (80087f8 <_write_r+0x20>)
 80087e4:	602a      	str	r2, [r5, #0]
 80087e6:	461a      	mov	r2, r3
 80087e8:	f7f9 fa08 	bl	8001bfc <_write>
 80087ec:	1c43      	adds	r3, r0, #1
 80087ee:	d102      	bne.n	80087f6 <_write_r+0x1e>
 80087f0:	682b      	ldr	r3, [r5, #0]
 80087f2:	b103      	cbz	r3, 80087f6 <_write_r+0x1e>
 80087f4:	6023      	str	r3, [r4, #0]
 80087f6:	bd38      	pop	{r3, r4, r5, pc}
 80087f8:	20001300 	.word	0x20001300

080087fc <__errno>:
 80087fc:	4b01      	ldr	r3, [pc, #4]	@ (8008804 <__errno+0x8>)
 80087fe:	6818      	ldr	r0, [r3, #0]
 8008800:	4770      	bx	lr
 8008802:	bf00      	nop
 8008804:	20000308 	.word	0x20000308

08008808 <__libc_init_array>:
 8008808:	b570      	push	{r4, r5, r6, lr}
 800880a:	2600      	movs	r6, #0
 800880c:	4d0c      	ldr	r5, [pc, #48]	@ (8008840 <__libc_init_array+0x38>)
 800880e:	4c0d      	ldr	r4, [pc, #52]	@ (8008844 <__libc_init_array+0x3c>)
 8008810:	1b64      	subs	r4, r4, r5
 8008812:	10a4      	asrs	r4, r4, #2
 8008814:	42a6      	cmp	r6, r4
 8008816:	d109      	bne.n	800882c <__libc_init_array+0x24>
 8008818:	f002 fd6e 	bl	800b2f8 <_init>
 800881c:	2600      	movs	r6, #0
 800881e:	4d0a      	ldr	r5, [pc, #40]	@ (8008848 <__libc_init_array+0x40>)
 8008820:	4c0a      	ldr	r4, [pc, #40]	@ (800884c <__libc_init_array+0x44>)
 8008822:	1b64      	subs	r4, r4, r5
 8008824:	10a4      	asrs	r4, r4, #2
 8008826:	42a6      	cmp	r6, r4
 8008828:	d105      	bne.n	8008836 <__libc_init_array+0x2e>
 800882a:	bd70      	pop	{r4, r5, r6, pc}
 800882c:	f855 3b04 	ldr.w	r3, [r5], #4
 8008830:	4798      	blx	r3
 8008832:	3601      	adds	r6, #1
 8008834:	e7ee      	b.n	8008814 <__libc_init_array+0xc>
 8008836:	f855 3b04 	ldr.w	r3, [r5], #4
 800883a:	4798      	blx	r3
 800883c:	3601      	adds	r6, #1
 800883e:	e7f2      	b.n	8008826 <__libc_init_array+0x1e>
 8008840:	0800b940 	.word	0x0800b940
 8008844:	0800b940 	.word	0x0800b940
 8008848:	0800b940 	.word	0x0800b940
 800884c:	0800b944 	.word	0x0800b944

08008850 <__retarget_lock_init_recursive>:
 8008850:	4770      	bx	lr

08008852 <__retarget_lock_acquire_recursive>:
 8008852:	4770      	bx	lr

08008854 <__retarget_lock_release_recursive>:
 8008854:	4770      	bx	lr

08008856 <memchr>:
 8008856:	4603      	mov	r3, r0
 8008858:	b510      	push	{r4, lr}
 800885a:	b2c9      	uxtb	r1, r1
 800885c:	4402      	add	r2, r0
 800885e:	4293      	cmp	r3, r2
 8008860:	4618      	mov	r0, r3
 8008862:	d101      	bne.n	8008868 <memchr+0x12>
 8008864:	2000      	movs	r0, #0
 8008866:	e003      	b.n	8008870 <memchr+0x1a>
 8008868:	7804      	ldrb	r4, [r0, #0]
 800886a:	3301      	adds	r3, #1
 800886c:	428c      	cmp	r4, r1
 800886e:	d1f6      	bne.n	800885e <memchr+0x8>
 8008870:	bd10      	pop	{r4, pc}

08008872 <memcpy>:
 8008872:	440a      	add	r2, r1
 8008874:	4291      	cmp	r1, r2
 8008876:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 800887a:	d100      	bne.n	800887e <memcpy+0xc>
 800887c:	4770      	bx	lr
 800887e:	b510      	push	{r4, lr}
 8008880:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008884:	4291      	cmp	r1, r2
 8008886:	f803 4f01 	strb.w	r4, [r3, #1]!
 800888a:	d1f9      	bne.n	8008880 <memcpy+0xe>
 800888c:	bd10      	pop	{r4, pc}
	...

08008890 <nan>:
 8008890:	2000      	movs	r0, #0
 8008892:	4901      	ldr	r1, [pc, #4]	@ (8008898 <nan+0x8>)
 8008894:	4770      	bx	lr
 8008896:	bf00      	nop
 8008898:	7ff80000 	.word	0x7ff80000

0800889c <quorem>:
 800889c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80088a0:	6903      	ldr	r3, [r0, #16]
 80088a2:	690c      	ldr	r4, [r1, #16]
 80088a4:	4607      	mov	r7, r0
 80088a6:	42a3      	cmp	r3, r4
 80088a8:	db7e      	blt.n	80089a8 <quorem+0x10c>
 80088aa:	3c01      	subs	r4, #1
 80088ac:	00a3      	lsls	r3, r4, #2
 80088ae:	f100 0514 	add.w	r5, r0, #20
 80088b2:	f101 0814 	add.w	r8, r1, #20
 80088b6:	9300      	str	r3, [sp, #0]
 80088b8:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80088bc:	9301      	str	r3, [sp, #4]
 80088be:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80088c2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80088c6:	3301      	adds	r3, #1
 80088c8:	429a      	cmp	r2, r3
 80088ca:	fbb2 f6f3 	udiv	r6, r2, r3
 80088ce:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80088d2:	d32e      	bcc.n	8008932 <quorem+0x96>
 80088d4:	f04f 0a00 	mov.w	sl, #0
 80088d8:	46c4      	mov	ip, r8
 80088da:	46ae      	mov	lr, r5
 80088dc:	46d3      	mov	fp, sl
 80088de:	f85c 3b04 	ldr.w	r3, [ip], #4
 80088e2:	b298      	uxth	r0, r3
 80088e4:	fb06 a000 	mla	r0, r6, r0, sl
 80088e8:	0c1b      	lsrs	r3, r3, #16
 80088ea:	0c02      	lsrs	r2, r0, #16
 80088ec:	fb06 2303 	mla	r3, r6, r3, r2
 80088f0:	f8de 2000 	ldr.w	r2, [lr]
 80088f4:	b280      	uxth	r0, r0
 80088f6:	b292      	uxth	r2, r2
 80088f8:	1a12      	subs	r2, r2, r0
 80088fa:	445a      	add	r2, fp
 80088fc:	f8de 0000 	ldr.w	r0, [lr]
 8008900:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8008904:	b29b      	uxth	r3, r3
 8008906:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800890a:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800890e:	b292      	uxth	r2, r2
 8008910:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8008914:	45e1      	cmp	r9, ip
 8008916:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800891a:	f84e 2b04 	str.w	r2, [lr], #4
 800891e:	d2de      	bcs.n	80088de <quorem+0x42>
 8008920:	9b00      	ldr	r3, [sp, #0]
 8008922:	58eb      	ldr	r3, [r5, r3]
 8008924:	b92b      	cbnz	r3, 8008932 <quorem+0x96>
 8008926:	9b01      	ldr	r3, [sp, #4]
 8008928:	3b04      	subs	r3, #4
 800892a:	429d      	cmp	r5, r3
 800892c:	461a      	mov	r2, r3
 800892e:	d32f      	bcc.n	8008990 <quorem+0xf4>
 8008930:	613c      	str	r4, [r7, #16]
 8008932:	4638      	mov	r0, r7
 8008934:	f001 fd10 	bl	800a358 <__mcmp>
 8008938:	2800      	cmp	r0, #0
 800893a:	db25      	blt.n	8008988 <quorem+0xec>
 800893c:	4629      	mov	r1, r5
 800893e:	2000      	movs	r0, #0
 8008940:	f858 2b04 	ldr.w	r2, [r8], #4
 8008944:	f8d1 c000 	ldr.w	ip, [r1]
 8008948:	fa1f fe82 	uxth.w	lr, r2
 800894c:	fa1f f38c 	uxth.w	r3, ip
 8008950:	eba3 030e 	sub.w	r3, r3, lr
 8008954:	4403      	add	r3, r0
 8008956:	0c12      	lsrs	r2, r2, #16
 8008958:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800895c:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8008960:	b29b      	uxth	r3, r3
 8008962:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008966:	45c1      	cmp	r9, r8
 8008968:	ea4f 4022 	mov.w	r0, r2, asr #16
 800896c:	f841 3b04 	str.w	r3, [r1], #4
 8008970:	d2e6      	bcs.n	8008940 <quorem+0xa4>
 8008972:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008976:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800897a:	b922      	cbnz	r2, 8008986 <quorem+0xea>
 800897c:	3b04      	subs	r3, #4
 800897e:	429d      	cmp	r5, r3
 8008980:	461a      	mov	r2, r3
 8008982:	d30b      	bcc.n	800899c <quorem+0x100>
 8008984:	613c      	str	r4, [r7, #16]
 8008986:	3601      	adds	r6, #1
 8008988:	4630      	mov	r0, r6
 800898a:	b003      	add	sp, #12
 800898c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008990:	6812      	ldr	r2, [r2, #0]
 8008992:	3b04      	subs	r3, #4
 8008994:	2a00      	cmp	r2, #0
 8008996:	d1cb      	bne.n	8008930 <quorem+0x94>
 8008998:	3c01      	subs	r4, #1
 800899a:	e7c6      	b.n	800892a <quorem+0x8e>
 800899c:	6812      	ldr	r2, [r2, #0]
 800899e:	3b04      	subs	r3, #4
 80089a0:	2a00      	cmp	r2, #0
 80089a2:	d1ef      	bne.n	8008984 <quorem+0xe8>
 80089a4:	3c01      	subs	r4, #1
 80089a6:	e7ea      	b.n	800897e <quorem+0xe2>
 80089a8:	2000      	movs	r0, #0
 80089aa:	e7ee      	b.n	800898a <quorem+0xee>
 80089ac:	0000      	movs	r0, r0
	...

080089b0 <_dtoa_r>:
 80089b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80089b4:	4614      	mov	r4, r2
 80089b6:	461d      	mov	r5, r3
 80089b8:	69c7      	ldr	r7, [r0, #28]
 80089ba:	b097      	sub	sp, #92	@ 0x5c
 80089bc:	4683      	mov	fp, r0
 80089be:	e9cd 4502 	strd	r4, r5, [sp, #8]
 80089c2:	9e23      	ldr	r6, [sp, #140]	@ 0x8c
 80089c4:	b97f      	cbnz	r7, 80089e6 <_dtoa_r+0x36>
 80089c6:	2010      	movs	r0, #16
 80089c8:	f001 f93c 	bl	8009c44 <malloc>
 80089cc:	4602      	mov	r2, r0
 80089ce:	f8cb 001c 	str.w	r0, [fp, #28]
 80089d2:	b920      	cbnz	r0, 80089de <_dtoa_r+0x2e>
 80089d4:	21ef      	movs	r1, #239	@ 0xef
 80089d6:	4ba8      	ldr	r3, [pc, #672]	@ (8008c78 <_dtoa_r+0x2c8>)
 80089d8:	48a8      	ldr	r0, [pc, #672]	@ (8008c7c <_dtoa_r+0x2cc>)
 80089da:	f002 f971 	bl	800acc0 <__assert_func>
 80089de:	e9c0 7701 	strd	r7, r7, [r0, #4]
 80089e2:	6007      	str	r7, [r0, #0]
 80089e4:	60c7      	str	r7, [r0, #12]
 80089e6:	f8db 301c 	ldr.w	r3, [fp, #28]
 80089ea:	6819      	ldr	r1, [r3, #0]
 80089ec:	b159      	cbz	r1, 8008a06 <_dtoa_r+0x56>
 80089ee:	685a      	ldr	r2, [r3, #4]
 80089f0:	2301      	movs	r3, #1
 80089f2:	4093      	lsls	r3, r2
 80089f4:	604a      	str	r2, [r1, #4]
 80089f6:	608b      	str	r3, [r1, #8]
 80089f8:	4658      	mov	r0, fp
 80089fa:	f001 fa2b 	bl	8009e54 <_Bfree>
 80089fe:	2200      	movs	r2, #0
 8008a00:	f8db 301c 	ldr.w	r3, [fp, #28]
 8008a04:	601a      	str	r2, [r3, #0]
 8008a06:	1e2b      	subs	r3, r5, #0
 8008a08:	bfaf      	iteee	ge
 8008a0a:	2300      	movge	r3, #0
 8008a0c:	2201      	movlt	r2, #1
 8008a0e:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8008a12:	9303      	strlt	r3, [sp, #12]
 8008a14:	bfa8      	it	ge
 8008a16:	6033      	strge	r3, [r6, #0]
 8008a18:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8008a1c:	4b98      	ldr	r3, [pc, #608]	@ (8008c80 <_dtoa_r+0x2d0>)
 8008a1e:	bfb8      	it	lt
 8008a20:	6032      	strlt	r2, [r6, #0]
 8008a22:	ea33 0308 	bics.w	r3, r3, r8
 8008a26:	d112      	bne.n	8008a4e <_dtoa_r+0x9e>
 8008a28:	f242 730f 	movw	r3, #9999	@ 0x270f
 8008a2c:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8008a2e:	6013      	str	r3, [r2, #0]
 8008a30:	f3c8 0313 	ubfx	r3, r8, #0, #20
 8008a34:	4323      	orrs	r3, r4
 8008a36:	f000 8550 	beq.w	80094da <_dtoa_r+0xb2a>
 8008a3a:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8008a3c:	f8df a244 	ldr.w	sl, [pc, #580]	@ 8008c84 <_dtoa_r+0x2d4>
 8008a40:	2b00      	cmp	r3, #0
 8008a42:	f000 8552 	beq.w	80094ea <_dtoa_r+0xb3a>
 8008a46:	f10a 0303 	add.w	r3, sl, #3
 8008a4a:	f000 bd4c 	b.w	80094e6 <_dtoa_r+0xb36>
 8008a4e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008a52:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8008a56:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8008a5a:	2200      	movs	r2, #0
 8008a5c:	2300      	movs	r3, #0
 8008a5e:	f7f8 f857 	bl	8000b10 <__aeabi_dcmpeq>
 8008a62:	4607      	mov	r7, r0
 8008a64:	b158      	cbz	r0, 8008a7e <_dtoa_r+0xce>
 8008a66:	2301      	movs	r3, #1
 8008a68:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8008a6a:	6013      	str	r3, [r2, #0]
 8008a6c:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8008a6e:	b113      	cbz	r3, 8008a76 <_dtoa_r+0xc6>
 8008a70:	4b85      	ldr	r3, [pc, #532]	@ (8008c88 <_dtoa_r+0x2d8>)
 8008a72:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8008a74:	6013      	str	r3, [r2, #0]
 8008a76:	f8df a214 	ldr.w	sl, [pc, #532]	@ 8008c8c <_dtoa_r+0x2dc>
 8008a7a:	f000 bd36 	b.w	80094ea <_dtoa_r+0xb3a>
 8008a7e:	ab14      	add	r3, sp, #80	@ 0x50
 8008a80:	9301      	str	r3, [sp, #4]
 8008a82:	ab15      	add	r3, sp, #84	@ 0x54
 8008a84:	9300      	str	r3, [sp, #0]
 8008a86:	4658      	mov	r0, fp
 8008a88:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8008a8c:	f001 fd7c 	bl	800a588 <__d2b>
 8008a90:	f3c8 560a 	ubfx	r6, r8, #20, #11
 8008a94:	4681      	mov	r9, r0
 8008a96:	2e00      	cmp	r6, #0
 8008a98:	d077      	beq.n	8008b8a <_dtoa_r+0x1da>
 8008a9a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8008a9e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8008aa0:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8008aa4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008aa8:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8008aac:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8008ab0:	9712      	str	r7, [sp, #72]	@ 0x48
 8008ab2:	4619      	mov	r1, r3
 8008ab4:	2200      	movs	r2, #0
 8008ab6:	4b76      	ldr	r3, [pc, #472]	@ (8008c90 <_dtoa_r+0x2e0>)
 8008ab8:	f7f7 fc0a 	bl	80002d0 <__aeabi_dsub>
 8008abc:	a368      	add	r3, pc, #416	@ (adr r3, 8008c60 <_dtoa_r+0x2b0>)
 8008abe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ac2:	f7f7 fdbd 	bl	8000640 <__aeabi_dmul>
 8008ac6:	a368      	add	r3, pc, #416	@ (adr r3, 8008c68 <_dtoa_r+0x2b8>)
 8008ac8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008acc:	f7f7 fc02 	bl	80002d4 <__adddf3>
 8008ad0:	4604      	mov	r4, r0
 8008ad2:	4630      	mov	r0, r6
 8008ad4:	460d      	mov	r5, r1
 8008ad6:	f7f7 fd49 	bl	800056c <__aeabi_i2d>
 8008ada:	a365      	add	r3, pc, #404	@ (adr r3, 8008c70 <_dtoa_r+0x2c0>)
 8008adc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ae0:	f7f7 fdae 	bl	8000640 <__aeabi_dmul>
 8008ae4:	4602      	mov	r2, r0
 8008ae6:	460b      	mov	r3, r1
 8008ae8:	4620      	mov	r0, r4
 8008aea:	4629      	mov	r1, r5
 8008aec:	f7f7 fbf2 	bl	80002d4 <__adddf3>
 8008af0:	4604      	mov	r4, r0
 8008af2:	460d      	mov	r5, r1
 8008af4:	f7f8 f854 	bl	8000ba0 <__aeabi_d2iz>
 8008af8:	2200      	movs	r2, #0
 8008afa:	4607      	mov	r7, r0
 8008afc:	2300      	movs	r3, #0
 8008afe:	4620      	mov	r0, r4
 8008b00:	4629      	mov	r1, r5
 8008b02:	f7f8 f80f 	bl	8000b24 <__aeabi_dcmplt>
 8008b06:	b140      	cbz	r0, 8008b1a <_dtoa_r+0x16a>
 8008b08:	4638      	mov	r0, r7
 8008b0a:	f7f7 fd2f 	bl	800056c <__aeabi_i2d>
 8008b0e:	4622      	mov	r2, r4
 8008b10:	462b      	mov	r3, r5
 8008b12:	f7f7 fffd 	bl	8000b10 <__aeabi_dcmpeq>
 8008b16:	b900      	cbnz	r0, 8008b1a <_dtoa_r+0x16a>
 8008b18:	3f01      	subs	r7, #1
 8008b1a:	2f16      	cmp	r7, #22
 8008b1c:	d853      	bhi.n	8008bc6 <_dtoa_r+0x216>
 8008b1e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8008b22:	4b5c      	ldr	r3, [pc, #368]	@ (8008c94 <_dtoa_r+0x2e4>)
 8008b24:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8008b28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b2c:	f7f7 fffa 	bl	8000b24 <__aeabi_dcmplt>
 8008b30:	2800      	cmp	r0, #0
 8008b32:	d04a      	beq.n	8008bca <_dtoa_r+0x21a>
 8008b34:	2300      	movs	r3, #0
 8008b36:	3f01      	subs	r7, #1
 8008b38:	930f      	str	r3, [sp, #60]	@ 0x3c
 8008b3a:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8008b3c:	1b9b      	subs	r3, r3, r6
 8008b3e:	1e5a      	subs	r2, r3, #1
 8008b40:	bf46      	itte	mi
 8008b42:	f1c3 0801 	rsbmi	r8, r3, #1
 8008b46:	2300      	movmi	r3, #0
 8008b48:	f04f 0800 	movpl.w	r8, #0
 8008b4c:	9209      	str	r2, [sp, #36]	@ 0x24
 8008b4e:	bf48      	it	mi
 8008b50:	9309      	strmi	r3, [sp, #36]	@ 0x24
 8008b52:	2f00      	cmp	r7, #0
 8008b54:	db3b      	blt.n	8008bce <_dtoa_r+0x21e>
 8008b56:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008b58:	970e      	str	r7, [sp, #56]	@ 0x38
 8008b5a:	443b      	add	r3, r7
 8008b5c:	9309      	str	r3, [sp, #36]	@ 0x24
 8008b5e:	2300      	movs	r3, #0
 8008b60:	930a      	str	r3, [sp, #40]	@ 0x28
 8008b62:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8008b64:	2b09      	cmp	r3, #9
 8008b66:	d866      	bhi.n	8008c36 <_dtoa_r+0x286>
 8008b68:	2b05      	cmp	r3, #5
 8008b6a:	bfc4      	itt	gt
 8008b6c:	3b04      	subgt	r3, #4
 8008b6e:	9320      	strgt	r3, [sp, #128]	@ 0x80
 8008b70:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8008b72:	bfc8      	it	gt
 8008b74:	2400      	movgt	r4, #0
 8008b76:	f1a3 0302 	sub.w	r3, r3, #2
 8008b7a:	bfd8      	it	le
 8008b7c:	2401      	movle	r4, #1
 8008b7e:	2b03      	cmp	r3, #3
 8008b80:	d864      	bhi.n	8008c4c <_dtoa_r+0x29c>
 8008b82:	e8df f003 	tbb	[pc, r3]
 8008b86:	382b      	.short	0x382b
 8008b88:	5636      	.short	0x5636
 8008b8a:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 8008b8e:	441e      	add	r6, r3
 8008b90:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8008b94:	2b20      	cmp	r3, #32
 8008b96:	bfc1      	itttt	gt
 8008b98:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8008b9c:	fa08 f803 	lslgt.w	r8, r8, r3
 8008ba0:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8008ba4:	fa24 f303 	lsrgt.w	r3, r4, r3
 8008ba8:	bfd6      	itet	le
 8008baa:	f1c3 0320 	rsble	r3, r3, #32
 8008bae:	ea48 0003 	orrgt.w	r0, r8, r3
 8008bb2:	fa04 f003 	lslle.w	r0, r4, r3
 8008bb6:	f7f7 fcc9 	bl	800054c <__aeabi_ui2d>
 8008bba:	2201      	movs	r2, #1
 8008bbc:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8008bc0:	3e01      	subs	r6, #1
 8008bc2:	9212      	str	r2, [sp, #72]	@ 0x48
 8008bc4:	e775      	b.n	8008ab2 <_dtoa_r+0x102>
 8008bc6:	2301      	movs	r3, #1
 8008bc8:	e7b6      	b.n	8008b38 <_dtoa_r+0x188>
 8008bca:	900f      	str	r0, [sp, #60]	@ 0x3c
 8008bcc:	e7b5      	b.n	8008b3a <_dtoa_r+0x18a>
 8008bce:	427b      	negs	r3, r7
 8008bd0:	930a      	str	r3, [sp, #40]	@ 0x28
 8008bd2:	2300      	movs	r3, #0
 8008bd4:	eba8 0807 	sub.w	r8, r8, r7
 8008bd8:	930e      	str	r3, [sp, #56]	@ 0x38
 8008bda:	e7c2      	b.n	8008b62 <_dtoa_r+0x1b2>
 8008bdc:	2300      	movs	r3, #0
 8008bde:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008be0:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8008be2:	2b00      	cmp	r3, #0
 8008be4:	dc35      	bgt.n	8008c52 <_dtoa_r+0x2a2>
 8008be6:	2301      	movs	r3, #1
 8008be8:	461a      	mov	r2, r3
 8008bea:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8008bee:	9221      	str	r2, [sp, #132]	@ 0x84
 8008bf0:	e00b      	b.n	8008c0a <_dtoa_r+0x25a>
 8008bf2:	2301      	movs	r3, #1
 8008bf4:	e7f3      	b.n	8008bde <_dtoa_r+0x22e>
 8008bf6:	2300      	movs	r3, #0
 8008bf8:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008bfa:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8008bfc:	18fb      	adds	r3, r7, r3
 8008bfe:	9308      	str	r3, [sp, #32]
 8008c00:	3301      	adds	r3, #1
 8008c02:	2b01      	cmp	r3, #1
 8008c04:	9307      	str	r3, [sp, #28]
 8008c06:	bfb8      	it	lt
 8008c08:	2301      	movlt	r3, #1
 8008c0a:	2100      	movs	r1, #0
 8008c0c:	2204      	movs	r2, #4
 8008c0e:	f8db 001c 	ldr.w	r0, [fp, #28]
 8008c12:	f102 0514 	add.w	r5, r2, #20
 8008c16:	429d      	cmp	r5, r3
 8008c18:	d91f      	bls.n	8008c5a <_dtoa_r+0x2aa>
 8008c1a:	6041      	str	r1, [r0, #4]
 8008c1c:	4658      	mov	r0, fp
 8008c1e:	f001 f8d9 	bl	8009dd4 <_Balloc>
 8008c22:	4682      	mov	sl, r0
 8008c24:	2800      	cmp	r0, #0
 8008c26:	d139      	bne.n	8008c9c <_dtoa_r+0x2ec>
 8008c28:	4602      	mov	r2, r0
 8008c2a:	f240 11af 	movw	r1, #431	@ 0x1af
 8008c2e:	4b1a      	ldr	r3, [pc, #104]	@ (8008c98 <_dtoa_r+0x2e8>)
 8008c30:	e6d2      	b.n	80089d8 <_dtoa_r+0x28>
 8008c32:	2301      	movs	r3, #1
 8008c34:	e7e0      	b.n	8008bf8 <_dtoa_r+0x248>
 8008c36:	2401      	movs	r4, #1
 8008c38:	2300      	movs	r3, #0
 8008c3a:	940b      	str	r4, [sp, #44]	@ 0x2c
 8008c3c:	9320      	str	r3, [sp, #128]	@ 0x80
 8008c3e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8008c42:	2200      	movs	r2, #0
 8008c44:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8008c48:	2312      	movs	r3, #18
 8008c4a:	e7d0      	b.n	8008bee <_dtoa_r+0x23e>
 8008c4c:	2301      	movs	r3, #1
 8008c4e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008c50:	e7f5      	b.n	8008c3e <_dtoa_r+0x28e>
 8008c52:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8008c54:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8008c58:	e7d7      	b.n	8008c0a <_dtoa_r+0x25a>
 8008c5a:	3101      	adds	r1, #1
 8008c5c:	0052      	lsls	r2, r2, #1
 8008c5e:	e7d8      	b.n	8008c12 <_dtoa_r+0x262>
 8008c60:	636f4361 	.word	0x636f4361
 8008c64:	3fd287a7 	.word	0x3fd287a7
 8008c68:	8b60c8b3 	.word	0x8b60c8b3
 8008c6c:	3fc68a28 	.word	0x3fc68a28
 8008c70:	509f79fb 	.word	0x509f79fb
 8008c74:	3fd34413 	.word	0x3fd34413
 8008c78:	0800b5b1 	.word	0x0800b5b1
 8008c7c:	0800b5c8 	.word	0x0800b5c8
 8008c80:	7ff00000 	.word	0x7ff00000
 8008c84:	0800b5ad 	.word	0x0800b5ad
 8008c88:	0800b579 	.word	0x0800b579
 8008c8c:	0800b578 	.word	0x0800b578
 8008c90:	3ff80000 	.word	0x3ff80000
 8008c94:	0800b720 	.word	0x0800b720
 8008c98:	0800b620 	.word	0x0800b620
 8008c9c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8008ca0:	6018      	str	r0, [r3, #0]
 8008ca2:	9b07      	ldr	r3, [sp, #28]
 8008ca4:	2b0e      	cmp	r3, #14
 8008ca6:	f200 80a4 	bhi.w	8008df2 <_dtoa_r+0x442>
 8008caa:	2c00      	cmp	r4, #0
 8008cac:	f000 80a1 	beq.w	8008df2 <_dtoa_r+0x442>
 8008cb0:	2f00      	cmp	r7, #0
 8008cb2:	dd33      	ble.n	8008d1c <_dtoa_r+0x36c>
 8008cb4:	4b86      	ldr	r3, [pc, #536]	@ (8008ed0 <_dtoa_r+0x520>)
 8008cb6:	f007 020f 	and.w	r2, r7, #15
 8008cba:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008cbe:	05f8      	lsls	r0, r7, #23
 8008cc0:	e9d3 3400 	ldrd	r3, r4, [r3]
 8008cc4:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8008cc8:	ea4f 1427 	mov.w	r4, r7, asr #4
 8008ccc:	d516      	bpl.n	8008cfc <_dtoa_r+0x34c>
 8008cce:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8008cd2:	4b80      	ldr	r3, [pc, #512]	@ (8008ed4 <_dtoa_r+0x524>)
 8008cd4:	2603      	movs	r6, #3
 8008cd6:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8008cda:	f7f7 fddb 	bl	8000894 <__aeabi_ddiv>
 8008cde:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008ce2:	f004 040f 	and.w	r4, r4, #15
 8008ce6:	4d7b      	ldr	r5, [pc, #492]	@ (8008ed4 <_dtoa_r+0x524>)
 8008ce8:	b954      	cbnz	r4, 8008d00 <_dtoa_r+0x350>
 8008cea:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008cee:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008cf2:	f7f7 fdcf 	bl	8000894 <__aeabi_ddiv>
 8008cf6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008cfa:	e028      	b.n	8008d4e <_dtoa_r+0x39e>
 8008cfc:	2602      	movs	r6, #2
 8008cfe:	e7f2      	b.n	8008ce6 <_dtoa_r+0x336>
 8008d00:	07e1      	lsls	r1, r4, #31
 8008d02:	d508      	bpl.n	8008d16 <_dtoa_r+0x366>
 8008d04:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008d08:	e9d5 2300 	ldrd	r2, r3, [r5]
 8008d0c:	f7f7 fc98 	bl	8000640 <__aeabi_dmul>
 8008d10:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008d14:	3601      	adds	r6, #1
 8008d16:	1064      	asrs	r4, r4, #1
 8008d18:	3508      	adds	r5, #8
 8008d1a:	e7e5      	b.n	8008ce8 <_dtoa_r+0x338>
 8008d1c:	f000 80d2 	beq.w	8008ec4 <_dtoa_r+0x514>
 8008d20:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8008d24:	427c      	negs	r4, r7
 8008d26:	4b6a      	ldr	r3, [pc, #424]	@ (8008ed0 <_dtoa_r+0x520>)
 8008d28:	f004 020f 	and.w	r2, r4, #15
 8008d2c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008d30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d34:	f7f7 fc84 	bl	8000640 <__aeabi_dmul>
 8008d38:	2602      	movs	r6, #2
 8008d3a:	2300      	movs	r3, #0
 8008d3c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008d40:	4d64      	ldr	r5, [pc, #400]	@ (8008ed4 <_dtoa_r+0x524>)
 8008d42:	1124      	asrs	r4, r4, #4
 8008d44:	2c00      	cmp	r4, #0
 8008d46:	f040 80b2 	bne.w	8008eae <_dtoa_r+0x4fe>
 8008d4a:	2b00      	cmp	r3, #0
 8008d4c:	d1d3      	bne.n	8008cf6 <_dtoa_r+0x346>
 8008d4e:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8008d52:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008d54:	2b00      	cmp	r3, #0
 8008d56:	f000 80b7 	beq.w	8008ec8 <_dtoa_r+0x518>
 8008d5a:	2200      	movs	r2, #0
 8008d5c:	4620      	mov	r0, r4
 8008d5e:	4629      	mov	r1, r5
 8008d60:	4b5d      	ldr	r3, [pc, #372]	@ (8008ed8 <_dtoa_r+0x528>)
 8008d62:	f7f7 fedf 	bl	8000b24 <__aeabi_dcmplt>
 8008d66:	2800      	cmp	r0, #0
 8008d68:	f000 80ae 	beq.w	8008ec8 <_dtoa_r+0x518>
 8008d6c:	9b07      	ldr	r3, [sp, #28]
 8008d6e:	2b00      	cmp	r3, #0
 8008d70:	f000 80aa 	beq.w	8008ec8 <_dtoa_r+0x518>
 8008d74:	9b08      	ldr	r3, [sp, #32]
 8008d76:	2b00      	cmp	r3, #0
 8008d78:	dd37      	ble.n	8008dea <_dtoa_r+0x43a>
 8008d7a:	1e7b      	subs	r3, r7, #1
 8008d7c:	4620      	mov	r0, r4
 8008d7e:	9304      	str	r3, [sp, #16]
 8008d80:	2200      	movs	r2, #0
 8008d82:	4629      	mov	r1, r5
 8008d84:	4b55      	ldr	r3, [pc, #340]	@ (8008edc <_dtoa_r+0x52c>)
 8008d86:	f7f7 fc5b 	bl	8000640 <__aeabi_dmul>
 8008d8a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008d8e:	9c08      	ldr	r4, [sp, #32]
 8008d90:	3601      	adds	r6, #1
 8008d92:	4630      	mov	r0, r6
 8008d94:	f7f7 fbea 	bl	800056c <__aeabi_i2d>
 8008d98:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008d9c:	f7f7 fc50 	bl	8000640 <__aeabi_dmul>
 8008da0:	2200      	movs	r2, #0
 8008da2:	4b4f      	ldr	r3, [pc, #316]	@ (8008ee0 <_dtoa_r+0x530>)
 8008da4:	f7f7 fa96 	bl	80002d4 <__adddf3>
 8008da8:	4605      	mov	r5, r0
 8008daa:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8008dae:	2c00      	cmp	r4, #0
 8008db0:	f040 809a 	bne.w	8008ee8 <_dtoa_r+0x538>
 8008db4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008db8:	2200      	movs	r2, #0
 8008dba:	4b4a      	ldr	r3, [pc, #296]	@ (8008ee4 <_dtoa_r+0x534>)
 8008dbc:	f7f7 fa88 	bl	80002d0 <__aeabi_dsub>
 8008dc0:	4602      	mov	r2, r0
 8008dc2:	460b      	mov	r3, r1
 8008dc4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8008dc8:	462a      	mov	r2, r5
 8008dca:	4633      	mov	r3, r6
 8008dcc:	f7f7 fec8 	bl	8000b60 <__aeabi_dcmpgt>
 8008dd0:	2800      	cmp	r0, #0
 8008dd2:	f040 828e 	bne.w	80092f2 <_dtoa_r+0x942>
 8008dd6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008dda:	462a      	mov	r2, r5
 8008ddc:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8008de0:	f7f7 fea0 	bl	8000b24 <__aeabi_dcmplt>
 8008de4:	2800      	cmp	r0, #0
 8008de6:	f040 8127 	bne.w	8009038 <_dtoa_r+0x688>
 8008dea:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8008dee:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8008df2:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8008df4:	2b00      	cmp	r3, #0
 8008df6:	f2c0 8163 	blt.w	80090c0 <_dtoa_r+0x710>
 8008dfa:	2f0e      	cmp	r7, #14
 8008dfc:	f300 8160 	bgt.w	80090c0 <_dtoa_r+0x710>
 8008e00:	4b33      	ldr	r3, [pc, #204]	@ (8008ed0 <_dtoa_r+0x520>)
 8008e02:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8008e06:	e9d3 3400 	ldrd	r3, r4, [r3]
 8008e0a:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8008e0e:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8008e10:	2b00      	cmp	r3, #0
 8008e12:	da03      	bge.n	8008e1c <_dtoa_r+0x46c>
 8008e14:	9b07      	ldr	r3, [sp, #28]
 8008e16:	2b00      	cmp	r3, #0
 8008e18:	f340 8100 	ble.w	800901c <_dtoa_r+0x66c>
 8008e1c:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8008e20:	4656      	mov	r6, sl
 8008e22:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008e26:	4620      	mov	r0, r4
 8008e28:	4629      	mov	r1, r5
 8008e2a:	f7f7 fd33 	bl	8000894 <__aeabi_ddiv>
 8008e2e:	f7f7 feb7 	bl	8000ba0 <__aeabi_d2iz>
 8008e32:	4680      	mov	r8, r0
 8008e34:	f7f7 fb9a 	bl	800056c <__aeabi_i2d>
 8008e38:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008e3c:	f7f7 fc00 	bl	8000640 <__aeabi_dmul>
 8008e40:	4602      	mov	r2, r0
 8008e42:	460b      	mov	r3, r1
 8008e44:	4620      	mov	r0, r4
 8008e46:	4629      	mov	r1, r5
 8008e48:	f7f7 fa42 	bl	80002d0 <__aeabi_dsub>
 8008e4c:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8008e50:	9d07      	ldr	r5, [sp, #28]
 8008e52:	f806 4b01 	strb.w	r4, [r6], #1
 8008e56:	eba6 040a 	sub.w	r4, r6, sl
 8008e5a:	42a5      	cmp	r5, r4
 8008e5c:	4602      	mov	r2, r0
 8008e5e:	460b      	mov	r3, r1
 8008e60:	f040 8116 	bne.w	8009090 <_dtoa_r+0x6e0>
 8008e64:	f7f7 fa36 	bl	80002d4 <__adddf3>
 8008e68:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008e6c:	4604      	mov	r4, r0
 8008e6e:	460d      	mov	r5, r1
 8008e70:	f7f7 fe76 	bl	8000b60 <__aeabi_dcmpgt>
 8008e74:	2800      	cmp	r0, #0
 8008e76:	f040 80f8 	bne.w	800906a <_dtoa_r+0x6ba>
 8008e7a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008e7e:	4620      	mov	r0, r4
 8008e80:	4629      	mov	r1, r5
 8008e82:	f7f7 fe45 	bl	8000b10 <__aeabi_dcmpeq>
 8008e86:	b118      	cbz	r0, 8008e90 <_dtoa_r+0x4e0>
 8008e88:	f018 0f01 	tst.w	r8, #1
 8008e8c:	f040 80ed 	bne.w	800906a <_dtoa_r+0x6ba>
 8008e90:	4649      	mov	r1, r9
 8008e92:	4658      	mov	r0, fp
 8008e94:	f000 ffde 	bl	8009e54 <_Bfree>
 8008e98:	2300      	movs	r3, #0
 8008e9a:	7033      	strb	r3, [r6, #0]
 8008e9c:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8008e9e:	3701      	adds	r7, #1
 8008ea0:	601f      	str	r7, [r3, #0]
 8008ea2:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8008ea4:	2b00      	cmp	r3, #0
 8008ea6:	f000 8320 	beq.w	80094ea <_dtoa_r+0xb3a>
 8008eaa:	601e      	str	r6, [r3, #0]
 8008eac:	e31d      	b.n	80094ea <_dtoa_r+0xb3a>
 8008eae:	07e2      	lsls	r2, r4, #31
 8008eb0:	d505      	bpl.n	8008ebe <_dtoa_r+0x50e>
 8008eb2:	e9d5 2300 	ldrd	r2, r3, [r5]
 8008eb6:	f7f7 fbc3 	bl	8000640 <__aeabi_dmul>
 8008eba:	2301      	movs	r3, #1
 8008ebc:	3601      	adds	r6, #1
 8008ebe:	1064      	asrs	r4, r4, #1
 8008ec0:	3508      	adds	r5, #8
 8008ec2:	e73f      	b.n	8008d44 <_dtoa_r+0x394>
 8008ec4:	2602      	movs	r6, #2
 8008ec6:	e742      	b.n	8008d4e <_dtoa_r+0x39e>
 8008ec8:	9c07      	ldr	r4, [sp, #28]
 8008eca:	9704      	str	r7, [sp, #16]
 8008ecc:	e761      	b.n	8008d92 <_dtoa_r+0x3e2>
 8008ece:	bf00      	nop
 8008ed0:	0800b720 	.word	0x0800b720
 8008ed4:	0800b6f8 	.word	0x0800b6f8
 8008ed8:	3ff00000 	.word	0x3ff00000
 8008edc:	40240000 	.word	0x40240000
 8008ee0:	401c0000 	.word	0x401c0000
 8008ee4:	40140000 	.word	0x40140000
 8008ee8:	4b70      	ldr	r3, [pc, #448]	@ (80090ac <_dtoa_r+0x6fc>)
 8008eea:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8008eec:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8008ef0:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8008ef4:	4454      	add	r4, sl
 8008ef6:	2900      	cmp	r1, #0
 8008ef8:	d045      	beq.n	8008f86 <_dtoa_r+0x5d6>
 8008efa:	2000      	movs	r0, #0
 8008efc:	496c      	ldr	r1, [pc, #432]	@ (80090b0 <_dtoa_r+0x700>)
 8008efe:	f7f7 fcc9 	bl	8000894 <__aeabi_ddiv>
 8008f02:	4633      	mov	r3, r6
 8008f04:	462a      	mov	r2, r5
 8008f06:	f7f7 f9e3 	bl	80002d0 <__aeabi_dsub>
 8008f0a:	4656      	mov	r6, sl
 8008f0c:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8008f10:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008f14:	f7f7 fe44 	bl	8000ba0 <__aeabi_d2iz>
 8008f18:	4605      	mov	r5, r0
 8008f1a:	f7f7 fb27 	bl	800056c <__aeabi_i2d>
 8008f1e:	4602      	mov	r2, r0
 8008f20:	460b      	mov	r3, r1
 8008f22:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008f26:	f7f7 f9d3 	bl	80002d0 <__aeabi_dsub>
 8008f2a:	4602      	mov	r2, r0
 8008f2c:	460b      	mov	r3, r1
 8008f2e:	3530      	adds	r5, #48	@ 0x30
 8008f30:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8008f34:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8008f38:	f806 5b01 	strb.w	r5, [r6], #1
 8008f3c:	f7f7 fdf2 	bl	8000b24 <__aeabi_dcmplt>
 8008f40:	2800      	cmp	r0, #0
 8008f42:	d163      	bne.n	800900c <_dtoa_r+0x65c>
 8008f44:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008f48:	2000      	movs	r0, #0
 8008f4a:	495a      	ldr	r1, [pc, #360]	@ (80090b4 <_dtoa_r+0x704>)
 8008f4c:	f7f7 f9c0 	bl	80002d0 <__aeabi_dsub>
 8008f50:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8008f54:	f7f7 fde6 	bl	8000b24 <__aeabi_dcmplt>
 8008f58:	2800      	cmp	r0, #0
 8008f5a:	f040 8087 	bne.w	800906c <_dtoa_r+0x6bc>
 8008f5e:	42a6      	cmp	r6, r4
 8008f60:	f43f af43 	beq.w	8008dea <_dtoa_r+0x43a>
 8008f64:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8008f68:	2200      	movs	r2, #0
 8008f6a:	4b53      	ldr	r3, [pc, #332]	@ (80090b8 <_dtoa_r+0x708>)
 8008f6c:	f7f7 fb68 	bl	8000640 <__aeabi_dmul>
 8008f70:	2200      	movs	r2, #0
 8008f72:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8008f76:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008f7a:	4b4f      	ldr	r3, [pc, #316]	@ (80090b8 <_dtoa_r+0x708>)
 8008f7c:	f7f7 fb60 	bl	8000640 <__aeabi_dmul>
 8008f80:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008f84:	e7c4      	b.n	8008f10 <_dtoa_r+0x560>
 8008f86:	4631      	mov	r1, r6
 8008f88:	4628      	mov	r0, r5
 8008f8a:	f7f7 fb59 	bl	8000640 <__aeabi_dmul>
 8008f8e:	4656      	mov	r6, sl
 8008f90:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8008f94:	9413      	str	r4, [sp, #76]	@ 0x4c
 8008f96:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008f9a:	f7f7 fe01 	bl	8000ba0 <__aeabi_d2iz>
 8008f9e:	4605      	mov	r5, r0
 8008fa0:	f7f7 fae4 	bl	800056c <__aeabi_i2d>
 8008fa4:	4602      	mov	r2, r0
 8008fa6:	460b      	mov	r3, r1
 8008fa8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008fac:	f7f7 f990 	bl	80002d0 <__aeabi_dsub>
 8008fb0:	4602      	mov	r2, r0
 8008fb2:	460b      	mov	r3, r1
 8008fb4:	3530      	adds	r5, #48	@ 0x30
 8008fb6:	f806 5b01 	strb.w	r5, [r6], #1
 8008fba:	42a6      	cmp	r6, r4
 8008fbc:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8008fc0:	f04f 0200 	mov.w	r2, #0
 8008fc4:	d124      	bne.n	8009010 <_dtoa_r+0x660>
 8008fc6:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8008fca:	4b39      	ldr	r3, [pc, #228]	@ (80090b0 <_dtoa_r+0x700>)
 8008fcc:	f7f7 f982 	bl	80002d4 <__adddf3>
 8008fd0:	4602      	mov	r2, r0
 8008fd2:	460b      	mov	r3, r1
 8008fd4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008fd8:	f7f7 fdc2 	bl	8000b60 <__aeabi_dcmpgt>
 8008fdc:	2800      	cmp	r0, #0
 8008fde:	d145      	bne.n	800906c <_dtoa_r+0x6bc>
 8008fe0:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8008fe4:	2000      	movs	r0, #0
 8008fe6:	4932      	ldr	r1, [pc, #200]	@ (80090b0 <_dtoa_r+0x700>)
 8008fe8:	f7f7 f972 	bl	80002d0 <__aeabi_dsub>
 8008fec:	4602      	mov	r2, r0
 8008fee:	460b      	mov	r3, r1
 8008ff0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008ff4:	f7f7 fd96 	bl	8000b24 <__aeabi_dcmplt>
 8008ff8:	2800      	cmp	r0, #0
 8008ffa:	f43f aef6 	beq.w	8008dea <_dtoa_r+0x43a>
 8008ffe:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 8009000:	1e73      	subs	r3, r6, #1
 8009002:	9313      	str	r3, [sp, #76]	@ 0x4c
 8009004:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8009008:	2b30      	cmp	r3, #48	@ 0x30
 800900a:	d0f8      	beq.n	8008ffe <_dtoa_r+0x64e>
 800900c:	9f04      	ldr	r7, [sp, #16]
 800900e:	e73f      	b.n	8008e90 <_dtoa_r+0x4e0>
 8009010:	4b29      	ldr	r3, [pc, #164]	@ (80090b8 <_dtoa_r+0x708>)
 8009012:	f7f7 fb15 	bl	8000640 <__aeabi_dmul>
 8009016:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800901a:	e7bc      	b.n	8008f96 <_dtoa_r+0x5e6>
 800901c:	d10c      	bne.n	8009038 <_dtoa_r+0x688>
 800901e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009022:	2200      	movs	r2, #0
 8009024:	4b25      	ldr	r3, [pc, #148]	@ (80090bc <_dtoa_r+0x70c>)
 8009026:	f7f7 fb0b 	bl	8000640 <__aeabi_dmul>
 800902a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800902e:	f7f7 fd8d 	bl	8000b4c <__aeabi_dcmpge>
 8009032:	2800      	cmp	r0, #0
 8009034:	f000 815b 	beq.w	80092ee <_dtoa_r+0x93e>
 8009038:	2400      	movs	r4, #0
 800903a:	4625      	mov	r5, r4
 800903c:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800903e:	4656      	mov	r6, sl
 8009040:	43db      	mvns	r3, r3
 8009042:	9304      	str	r3, [sp, #16]
 8009044:	2700      	movs	r7, #0
 8009046:	4621      	mov	r1, r4
 8009048:	4658      	mov	r0, fp
 800904a:	f000 ff03 	bl	8009e54 <_Bfree>
 800904e:	2d00      	cmp	r5, #0
 8009050:	d0dc      	beq.n	800900c <_dtoa_r+0x65c>
 8009052:	b12f      	cbz	r7, 8009060 <_dtoa_r+0x6b0>
 8009054:	42af      	cmp	r7, r5
 8009056:	d003      	beq.n	8009060 <_dtoa_r+0x6b0>
 8009058:	4639      	mov	r1, r7
 800905a:	4658      	mov	r0, fp
 800905c:	f000 fefa 	bl	8009e54 <_Bfree>
 8009060:	4629      	mov	r1, r5
 8009062:	4658      	mov	r0, fp
 8009064:	f000 fef6 	bl	8009e54 <_Bfree>
 8009068:	e7d0      	b.n	800900c <_dtoa_r+0x65c>
 800906a:	9704      	str	r7, [sp, #16]
 800906c:	4633      	mov	r3, r6
 800906e:	461e      	mov	r6, r3
 8009070:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009074:	2a39      	cmp	r2, #57	@ 0x39
 8009076:	d107      	bne.n	8009088 <_dtoa_r+0x6d8>
 8009078:	459a      	cmp	sl, r3
 800907a:	d1f8      	bne.n	800906e <_dtoa_r+0x6be>
 800907c:	9a04      	ldr	r2, [sp, #16]
 800907e:	3201      	adds	r2, #1
 8009080:	9204      	str	r2, [sp, #16]
 8009082:	2230      	movs	r2, #48	@ 0x30
 8009084:	f88a 2000 	strb.w	r2, [sl]
 8009088:	781a      	ldrb	r2, [r3, #0]
 800908a:	3201      	adds	r2, #1
 800908c:	701a      	strb	r2, [r3, #0]
 800908e:	e7bd      	b.n	800900c <_dtoa_r+0x65c>
 8009090:	2200      	movs	r2, #0
 8009092:	4b09      	ldr	r3, [pc, #36]	@ (80090b8 <_dtoa_r+0x708>)
 8009094:	f7f7 fad4 	bl	8000640 <__aeabi_dmul>
 8009098:	2200      	movs	r2, #0
 800909a:	2300      	movs	r3, #0
 800909c:	4604      	mov	r4, r0
 800909e:	460d      	mov	r5, r1
 80090a0:	f7f7 fd36 	bl	8000b10 <__aeabi_dcmpeq>
 80090a4:	2800      	cmp	r0, #0
 80090a6:	f43f aebc 	beq.w	8008e22 <_dtoa_r+0x472>
 80090aa:	e6f1      	b.n	8008e90 <_dtoa_r+0x4e0>
 80090ac:	0800b720 	.word	0x0800b720
 80090b0:	3fe00000 	.word	0x3fe00000
 80090b4:	3ff00000 	.word	0x3ff00000
 80090b8:	40240000 	.word	0x40240000
 80090bc:	40140000 	.word	0x40140000
 80090c0:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 80090c2:	2a00      	cmp	r2, #0
 80090c4:	f000 80db 	beq.w	800927e <_dtoa_r+0x8ce>
 80090c8:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 80090ca:	2a01      	cmp	r2, #1
 80090cc:	f300 80bf 	bgt.w	800924e <_dtoa_r+0x89e>
 80090d0:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 80090d2:	2a00      	cmp	r2, #0
 80090d4:	f000 80b7 	beq.w	8009246 <_dtoa_r+0x896>
 80090d8:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 80090dc:	4646      	mov	r6, r8
 80090de:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80090e0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80090e2:	2101      	movs	r1, #1
 80090e4:	441a      	add	r2, r3
 80090e6:	4658      	mov	r0, fp
 80090e8:	4498      	add	r8, r3
 80090ea:	9209      	str	r2, [sp, #36]	@ 0x24
 80090ec:	f000 ffb0 	bl	800a050 <__i2b>
 80090f0:	4605      	mov	r5, r0
 80090f2:	b15e      	cbz	r6, 800910c <_dtoa_r+0x75c>
 80090f4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80090f6:	2b00      	cmp	r3, #0
 80090f8:	dd08      	ble.n	800910c <_dtoa_r+0x75c>
 80090fa:	42b3      	cmp	r3, r6
 80090fc:	bfa8      	it	ge
 80090fe:	4633      	movge	r3, r6
 8009100:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009102:	eba8 0803 	sub.w	r8, r8, r3
 8009106:	1af6      	subs	r6, r6, r3
 8009108:	1ad3      	subs	r3, r2, r3
 800910a:	9309      	str	r3, [sp, #36]	@ 0x24
 800910c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800910e:	b1f3      	cbz	r3, 800914e <_dtoa_r+0x79e>
 8009110:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009112:	2b00      	cmp	r3, #0
 8009114:	f000 80b7 	beq.w	8009286 <_dtoa_r+0x8d6>
 8009118:	b18c      	cbz	r4, 800913e <_dtoa_r+0x78e>
 800911a:	4629      	mov	r1, r5
 800911c:	4622      	mov	r2, r4
 800911e:	4658      	mov	r0, fp
 8009120:	f001 f854 	bl	800a1cc <__pow5mult>
 8009124:	464a      	mov	r2, r9
 8009126:	4601      	mov	r1, r0
 8009128:	4605      	mov	r5, r0
 800912a:	4658      	mov	r0, fp
 800912c:	f000 ffa6 	bl	800a07c <__multiply>
 8009130:	4649      	mov	r1, r9
 8009132:	9004      	str	r0, [sp, #16]
 8009134:	4658      	mov	r0, fp
 8009136:	f000 fe8d 	bl	8009e54 <_Bfree>
 800913a:	9b04      	ldr	r3, [sp, #16]
 800913c:	4699      	mov	r9, r3
 800913e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009140:	1b1a      	subs	r2, r3, r4
 8009142:	d004      	beq.n	800914e <_dtoa_r+0x79e>
 8009144:	4649      	mov	r1, r9
 8009146:	4658      	mov	r0, fp
 8009148:	f001 f840 	bl	800a1cc <__pow5mult>
 800914c:	4681      	mov	r9, r0
 800914e:	2101      	movs	r1, #1
 8009150:	4658      	mov	r0, fp
 8009152:	f000 ff7d 	bl	800a050 <__i2b>
 8009156:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009158:	4604      	mov	r4, r0
 800915a:	2b00      	cmp	r3, #0
 800915c:	f000 81c9 	beq.w	80094f2 <_dtoa_r+0xb42>
 8009160:	461a      	mov	r2, r3
 8009162:	4601      	mov	r1, r0
 8009164:	4658      	mov	r0, fp
 8009166:	f001 f831 	bl	800a1cc <__pow5mult>
 800916a:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800916c:	4604      	mov	r4, r0
 800916e:	2b01      	cmp	r3, #1
 8009170:	f300 808f 	bgt.w	8009292 <_dtoa_r+0x8e2>
 8009174:	9b02      	ldr	r3, [sp, #8]
 8009176:	2b00      	cmp	r3, #0
 8009178:	f040 8087 	bne.w	800928a <_dtoa_r+0x8da>
 800917c:	9b03      	ldr	r3, [sp, #12]
 800917e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009182:	2b00      	cmp	r3, #0
 8009184:	f040 8083 	bne.w	800928e <_dtoa_r+0x8de>
 8009188:	9b03      	ldr	r3, [sp, #12]
 800918a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800918e:	0d1b      	lsrs	r3, r3, #20
 8009190:	051b      	lsls	r3, r3, #20
 8009192:	b12b      	cbz	r3, 80091a0 <_dtoa_r+0x7f0>
 8009194:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009196:	f108 0801 	add.w	r8, r8, #1
 800919a:	3301      	adds	r3, #1
 800919c:	9309      	str	r3, [sp, #36]	@ 0x24
 800919e:	2301      	movs	r3, #1
 80091a0:	930a      	str	r3, [sp, #40]	@ 0x28
 80091a2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80091a4:	2b00      	cmp	r3, #0
 80091a6:	f000 81aa 	beq.w	80094fe <_dtoa_r+0xb4e>
 80091aa:	6923      	ldr	r3, [r4, #16]
 80091ac:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80091b0:	6918      	ldr	r0, [r3, #16]
 80091b2:	f000 ff01 	bl	8009fb8 <__hi0bits>
 80091b6:	f1c0 0020 	rsb	r0, r0, #32
 80091ba:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80091bc:	4418      	add	r0, r3
 80091be:	f010 001f 	ands.w	r0, r0, #31
 80091c2:	d071      	beq.n	80092a8 <_dtoa_r+0x8f8>
 80091c4:	f1c0 0320 	rsb	r3, r0, #32
 80091c8:	2b04      	cmp	r3, #4
 80091ca:	dd65      	ble.n	8009298 <_dtoa_r+0x8e8>
 80091cc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80091ce:	f1c0 001c 	rsb	r0, r0, #28
 80091d2:	4403      	add	r3, r0
 80091d4:	4480      	add	r8, r0
 80091d6:	4406      	add	r6, r0
 80091d8:	9309      	str	r3, [sp, #36]	@ 0x24
 80091da:	f1b8 0f00 	cmp.w	r8, #0
 80091de:	dd05      	ble.n	80091ec <_dtoa_r+0x83c>
 80091e0:	4649      	mov	r1, r9
 80091e2:	4642      	mov	r2, r8
 80091e4:	4658      	mov	r0, fp
 80091e6:	f001 f84b 	bl	800a280 <__lshift>
 80091ea:	4681      	mov	r9, r0
 80091ec:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80091ee:	2b00      	cmp	r3, #0
 80091f0:	dd05      	ble.n	80091fe <_dtoa_r+0x84e>
 80091f2:	4621      	mov	r1, r4
 80091f4:	461a      	mov	r2, r3
 80091f6:	4658      	mov	r0, fp
 80091f8:	f001 f842 	bl	800a280 <__lshift>
 80091fc:	4604      	mov	r4, r0
 80091fe:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009200:	2b00      	cmp	r3, #0
 8009202:	d053      	beq.n	80092ac <_dtoa_r+0x8fc>
 8009204:	4621      	mov	r1, r4
 8009206:	4648      	mov	r0, r9
 8009208:	f001 f8a6 	bl	800a358 <__mcmp>
 800920c:	2800      	cmp	r0, #0
 800920e:	da4d      	bge.n	80092ac <_dtoa_r+0x8fc>
 8009210:	1e7b      	subs	r3, r7, #1
 8009212:	4649      	mov	r1, r9
 8009214:	9304      	str	r3, [sp, #16]
 8009216:	220a      	movs	r2, #10
 8009218:	2300      	movs	r3, #0
 800921a:	4658      	mov	r0, fp
 800921c:	f000 fe3c 	bl	8009e98 <__multadd>
 8009220:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009222:	4681      	mov	r9, r0
 8009224:	2b00      	cmp	r3, #0
 8009226:	f000 816c 	beq.w	8009502 <_dtoa_r+0xb52>
 800922a:	2300      	movs	r3, #0
 800922c:	4629      	mov	r1, r5
 800922e:	220a      	movs	r2, #10
 8009230:	4658      	mov	r0, fp
 8009232:	f000 fe31 	bl	8009e98 <__multadd>
 8009236:	9b08      	ldr	r3, [sp, #32]
 8009238:	4605      	mov	r5, r0
 800923a:	2b00      	cmp	r3, #0
 800923c:	dc61      	bgt.n	8009302 <_dtoa_r+0x952>
 800923e:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8009240:	2b02      	cmp	r3, #2
 8009242:	dc3b      	bgt.n	80092bc <_dtoa_r+0x90c>
 8009244:	e05d      	b.n	8009302 <_dtoa_r+0x952>
 8009246:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8009248:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800924c:	e746      	b.n	80090dc <_dtoa_r+0x72c>
 800924e:	9b07      	ldr	r3, [sp, #28]
 8009250:	1e5c      	subs	r4, r3, #1
 8009252:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009254:	42a3      	cmp	r3, r4
 8009256:	bfbf      	itttt	lt
 8009258:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800925a:	9a0e      	ldrlt	r2, [sp, #56]	@ 0x38
 800925c:	1ae3      	sublt	r3, r4, r3
 800925e:	18d2      	addlt	r2, r2, r3
 8009260:	bfa8      	it	ge
 8009262:	1b1c      	subge	r4, r3, r4
 8009264:	9b07      	ldr	r3, [sp, #28]
 8009266:	bfbe      	ittt	lt
 8009268:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800926a:	920e      	strlt	r2, [sp, #56]	@ 0x38
 800926c:	2400      	movlt	r4, #0
 800926e:	2b00      	cmp	r3, #0
 8009270:	bfb5      	itete	lt
 8009272:	eba8 0603 	sublt.w	r6, r8, r3
 8009276:	4646      	movge	r6, r8
 8009278:	2300      	movlt	r3, #0
 800927a:	9b07      	ldrge	r3, [sp, #28]
 800927c:	e730      	b.n	80090e0 <_dtoa_r+0x730>
 800927e:	4646      	mov	r6, r8
 8009280:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8009282:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8009284:	e735      	b.n	80090f2 <_dtoa_r+0x742>
 8009286:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8009288:	e75c      	b.n	8009144 <_dtoa_r+0x794>
 800928a:	2300      	movs	r3, #0
 800928c:	e788      	b.n	80091a0 <_dtoa_r+0x7f0>
 800928e:	9b02      	ldr	r3, [sp, #8]
 8009290:	e786      	b.n	80091a0 <_dtoa_r+0x7f0>
 8009292:	2300      	movs	r3, #0
 8009294:	930a      	str	r3, [sp, #40]	@ 0x28
 8009296:	e788      	b.n	80091aa <_dtoa_r+0x7fa>
 8009298:	d09f      	beq.n	80091da <_dtoa_r+0x82a>
 800929a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800929c:	331c      	adds	r3, #28
 800929e:	441a      	add	r2, r3
 80092a0:	4498      	add	r8, r3
 80092a2:	441e      	add	r6, r3
 80092a4:	9209      	str	r2, [sp, #36]	@ 0x24
 80092a6:	e798      	b.n	80091da <_dtoa_r+0x82a>
 80092a8:	4603      	mov	r3, r0
 80092aa:	e7f6      	b.n	800929a <_dtoa_r+0x8ea>
 80092ac:	9b07      	ldr	r3, [sp, #28]
 80092ae:	9704      	str	r7, [sp, #16]
 80092b0:	2b00      	cmp	r3, #0
 80092b2:	dc20      	bgt.n	80092f6 <_dtoa_r+0x946>
 80092b4:	9308      	str	r3, [sp, #32]
 80092b6:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80092b8:	2b02      	cmp	r3, #2
 80092ba:	dd1e      	ble.n	80092fa <_dtoa_r+0x94a>
 80092bc:	9b08      	ldr	r3, [sp, #32]
 80092be:	2b00      	cmp	r3, #0
 80092c0:	f47f aebc 	bne.w	800903c <_dtoa_r+0x68c>
 80092c4:	4621      	mov	r1, r4
 80092c6:	2205      	movs	r2, #5
 80092c8:	4658      	mov	r0, fp
 80092ca:	f000 fde5 	bl	8009e98 <__multadd>
 80092ce:	4601      	mov	r1, r0
 80092d0:	4604      	mov	r4, r0
 80092d2:	4648      	mov	r0, r9
 80092d4:	f001 f840 	bl	800a358 <__mcmp>
 80092d8:	2800      	cmp	r0, #0
 80092da:	f77f aeaf 	ble.w	800903c <_dtoa_r+0x68c>
 80092de:	2331      	movs	r3, #49	@ 0x31
 80092e0:	4656      	mov	r6, sl
 80092e2:	f806 3b01 	strb.w	r3, [r6], #1
 80092e6:	9b04      	ldr	r3, [sp, #16]
 80092e8:	3301      	adds	r3, #1
 80092ea:	9304      	str	r3, [sp, #16]
 80092ec:	e6aa      	b.n	8009044 <_dtoa_r+0x694>
 80092ee:	9c07      	ldr	r4, [sp, #28]
 80092f0:	9704      	str	r7, [sp, #16]
 80092f2:	4625      	mov	r5, r4
 80092f4:	e7f3      	b.n	80092de <_dtoa_r+0x92e>
 80092f6:	9b07      	ldr	r3, [sp, #28]
 80092f8:	9308      	str	r3, [sp, #32]
 80092fa:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80092fc:	2b00      	cmp	r3, #0
 80092fe:	f000 8104 	beq.w	800950a <_dtoa_r+0xb5a>
 8009302:	2e00      	cmp	r6, #0
 8009304:	dd05      	ble.n	8009312 <_dtoa_r+0x962>
 8009306:	4629      	mov	r1, r5
 8009308:	4632      	mov	r2, r6
 800930a:	4658      	mov	r0, fp
 800930c:	f000 ffb8 	bl	800a280 <__lshift>
 8009310:	4605      	mov	r5, r0
 8009312:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009314:	2b00      	cmp	r3, #0
 8009316:	d05a      	beq.n	80093ce <_dtoa_r+0xa1e>
 8009318:	4658      	mov	r0, fp
 800931a:	6869      	ldr	r1, [r5, #4]
 800931c:	f000 fd5a 	bl	8009dd4 <_Balloc>
 8009320:	4606      	mov	r6, r0
 8009322:	b928      	cbnz	r0, 8009330 <_dtoa_r+0x980>
 8009324:	4602      	mov	r2, r0
 8009326:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800932a:	4b83      	ldr	r3, [pc, #524]	@ (8009538 <_dtoa_r+0xb88>)
 800932c:	f7ff bb54 	b.w	80089d8 <_dtoa_r+0x28>
 8009330:	692a      	ldr	r2, [r5, #16]
 8009332:	f105 010c 	add.w	r1, r5, #12
 8009336:	3202      	adds	r2, #2
 8009338:	0092      	lsls	r2, r2, #2
 800933a:	300c      	adds	r0, #12
 800933c:	f7ff fa99 	bl	8008872 <memcpy>
 8009340:	2201      	movs	r2, #1
 8009342:	4631      	mov	r1, r6
 8009344:	4658      	mov	r0, fp
 8009346:	f000 ff9b 	bl	800a280 <__lshift>
 800934a:	462f      	mov	r7, r5
 800934c:	4605      	mov	r5, r0
 800934e:	f10a 0301 	add.w	r3, sl, #1
 8009352:	9307      	str	r3, [sp, #28]
 8009354:	9b08      	ldr	r3, [sp, #32]
 8009356:	4453      	add	r3, sl
 8009358:	930b      	str	r3, [sp, #44]	@ 0x2c
 800935a:	9b02      	ldr	r3, [sp, #8]
 800935c:	f003 0301 	and.w	r3, r3, #1
 8009360:	930a      	str	r3, [sp, #40]	@ 0x28
 8009362:	9b07      	ldr	r3, [sp, #28]
 8009364:	4621      	mov	r1, r4
 8009366:	3b01      	subs	r3, #1
 8009368:	4648      	mov	r0, r9
 800936a:	9302      	str	r3, [sp, #8]
 800936c:	f7ff fa96 	bl	800889c <quorem>
 8009370:	4639      	mov	r1, r7
 8009372:	9008      	str	r0, [sp, #32]
 8009374:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8009378:	4648      	mov	r0, r9
 800937a:	f000 ffed 	bl	800a358 <__mcmp>
 800937e:	462a      	mov	r2, r5
 8009380:	9009      	str	r0, [sp, #36]	@ 0x24
 8009382:	4621      	mov	r1, r4
 8009384:	4658      	mov	r0, fp
 8009386:	f001 f803 	bl	800a390 <__mdiff>
 800938a:	68c2      	ldr	r2, [r0, #12]
 800938c:	4606      	mov	r6, r0
 800938e:	bb02      	cbnz	r2, 80093d2 <_dtoa_r+0xa22>
 8009390:	4601      	mov	r1, r0
 8009392:	4648      	mov	r0, r9
 8009394:	f000 ffe0 	bl	800a358 <__mcmp>
 8009398:	4602      	mov	r2, r0
 800939a:	4631      	mov	r1, r6
 800939c:	4658      	mov	r0, fp
 800939e:	920c      	str	r2, [sp, #48]	@ 0x30
 80093a0:	f000 fd58 	bl	8009e54 <_Bfree>
 80093a4:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80093a6:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 80093a8:	9e07      	ldr	r6, [sp, #28]
 80093aa:	ea43 0102 	orr.w	r1, r3, r2
 80093ae:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80093b0:	4319      	orrs	r1, r3
 80093b2:	d110      	bne.n	80093d6 <_dtoa_r+0xa26>
 80093b4:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80093b8:	d029      	beq.n	800940e <_dtoa_r+0xa5e>
 80093ba:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80093bc:	2b00      	cmp	r3, #0
 80093be:	dd02      	ble.n	80093c6 <_dtoa_r+0xa16>
 80093c0:	9b08      	ldr	r3, [sp, #32]
 80093c2:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 80093c6:	9b02      	ldr	r3, [sp, #8]
 80093c8:	f883 8000 	strb.w	r8, [r3]
 80093cc:	e63b      	b.n	8009046 <_dtoa_r+0x696>
 80093ce:	4628      	mov	r0, r5
 80093d0:	e7bb      	b.n	800934a <_dtoa_r+0x99a>
 80093d2:	2201      	movs	r2, #1
 80093d4:	e7e1      	b.n	800939a <_dtoa_r+0x9ea>
 80093d6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80093d8:	2b00      	cmp	r3, #0
 80093da:	db04      	blt.n	80093e6 <_dtoa_r+0xa36>
 80093dc:	9920      	ldr	r1, [sp, #128]	@ 0x80
 80093de:	430b      	orrs	r3, r1
 80093e0:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80093e2:	430b      	orrs	r3, r1
 80093e4:	d120      	bne.n	8009428 <_dtoa_r+0xa78>
 80093e6:	2a00      	cmp	r2, #0
 80093e8:	dded      	ble.n	80093c6 <_dtoa_r+0xa16>
 80093ea:	4649      	mov	r1, r9
 80093ec:	2201      	movs	r2, #1
 80093ee:	4658      	mov	r0, fp
 80093f0:	f000 ff46 	bl	800a280 <__lshift>
 80093f4:	4621      	mov	r1, r4
 80093f6:	4681      	mov	r9, r0
 80093f8:	f000 ffae 	bl	800a358 <__mcmp>
 80093fc:	2800      	cmp	r0, #0
 80093fe:	dc03      	bgt.n	8009408 <_dtoa_r+0xa58>
 8009400:	d1e1      	bne.n	80093c6 <_dtoa_r+0xa16>
 8009402:	f018 0f01 	tst.w	r8, #1
 8009406:	d0de      	beq.n	80093c6 <_dtoa_r+0xa16>
 8009408:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800940c:	d1d8      	bne.n	80093c0 <_dtoa_r+0xa10>
 800940e:	2339      	movs	r3, #57	@ 0x39
 8009410:	9a02      	ldr	r2, [sp, #8]
 8009412:	7013      	strb	r3, [r2, #0]
 8009414:	4633      	mov	r3, r6
 8009416:	461e      	mov	r6, r3
 8009418:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800941c:	3b01      	subs	r3, #1
 800941e:	2a39      	cmp	r2, #57	@ 0x39
 8009420:	d052      	beq.n	80094c8 <_dtoa_r+0xb18>
 8009422:	3201      	adds	r2, #1
 8009424:	701a      	strb	r2, [r3, #0]
 8009426:	e60e      	b.n	8009046 <_dtoa_r+0x696>
 8009428:	2a00      	cmp	r2, #0
 800942a:	dd07      	ble.n	800943c <_dtoa_r+0xa8c>
 800942c:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8009430:	d0ed      	beq.n	800940e <_dtoa_r+0xa5e>
 8009432:	9a02      	ldr	r2, [sp, #8]
 8009434:	f108 0301 	add.w	r3, r8, #1
 8009438:	7013      	strb	r3, [r2, #0]
 800943a:	e604      	b.n	8009046 <_dtoa_r+0x696>
 800943c:	9b07      	ldr	r3, [sp, #28]
 800943e:	9a07      	ldr	r2, [sp, #28]
 8009440:	f803 8c01 	strb.w	r8, [r3, #-1]
 8009444:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009446:	4293      	cmp	r3, r2
 8009448:	d028      	beq.n	800949c <_dtoa_r+0xaec>
 800944a:	4649      	mov	r1, r9
 800944c:	2300      	movs	r3, #0
 800944e:	220a      	movs	r2, #10
 8009450:	4658      	mov	r0, fp
 8009452:	f000 fd21 	bl	8009e98 <__multadd>
 8009456:	42af      	cmp	r7, r5
 8009458:	4681      	mov	r9, r0
 800945a:	f04f 0300 	mov.w	r3, #0
 800945e:	f04f 020a 	mov.w	r2, #10
 8009462:	4639      	mov	r1, r7
 8009464:	4658      	mov	r0, fp
 8009466:	d107      	bne.n	8009478 <_dtoa_r+0xac8>
 8009468:	f000 fd16 	bl	8009e98 <__multadd>
 800946c:	4607      	mov	r7, r0
 800946e:	4605      	mov	r5, r0
 8009470:	9b07      	ldr	r3, [sp, #28]
 8009472:	3301      	adds	r3, #1
 8009474:	9307      	str	r3, [sp, #28]
 8009476:	e774      	b.n	8009362 <_dtoa_r+0x9b2>
 8009478:	f000 fd0e 	bl	8009e98 <__multadd>
 800947c:	4629      	mov	r1, r5
 800947e:	4607      	mov	r7, r0
 8009480:	2300      	movs	r3, #0
 8009482:	220a      	movs	r2, #10
 8009484:	4658      	mov	r0, fp
 8009486:	f000 fd07 	bl	8009e98 <__multadd>
 800948a:	4605      	mov	r5, r0
 800948c:	e7f0      	b.n	8009470 <_dtoa_r+0xac0>
 800948e:	9b08      	ldr	r3, [sp, #32]
 8009490:	2700      	movs	r7, #0
 8009492:	2b00      	cmp	r3, #0
 8009494:	bfcc      	ite	gt
 8009496:	461e      	movgt	r6, r3
 8009498:	2601      	movle	r6, #1
 800949a:	4456      	add	r6, sl
 800949c:	4649      	mov	r1, r9
 800949e:	2201      	movs	r2, #1
 80094a0:	4658      	mov	r0, fp
 80094a2:	f000 feed 	bl	800a280 <__lshift>
 80094a6:	4621      	mov	r1, r4
 80094a8:	4681      	mov	r9, r0
 80094aa:	f000 ff55 	bl	800a358 <__mcmp>
 80094ae:	2800      	cmp	r0, #0
 80094b0:	dcb0      	bgt.n	8009414 <_dtoa_r+0xa64>
 80094b2:	d102      	bne.n	80094ba <_dtoa_r+0xb0a>
 80094b4:	f018 0f01 	tst.w	r8, #1
 80094b8:	d1ac      	bne.n	8009414 <_dtoa_r+0xa64>
 80094ba:	4633      	mov	r3, r6
 80094bc:	461e      	mov	r6, r3
 80094be:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80094c2:	2a30      	cmp	r2, #48	@ 0x30
 80094c4:	d0fa      	beq.n	80094bc <_dtoa_r+0xb0c>
 80094c6:	e5be      	b.n	8009046 <_dtoa_r+0x696>
 80094c8:	459a      	cmp	sl, r3
 80094ca:	d1a4      	bne.n	8009416 <_dtoa_r+0xa66>
 80094cc:	9b04      	ldr	r3, [sp, #16]
 80094ce:	3301      	adds	r3, #1
 80094d0:	9304      	str	r3, [sp, #16]
 80094d2:	2331      	movs	r3, #49	@ 0x31
 80094d4:	f88a 3000 	strb.w	r3, [sl]
 80094d8:	e5b5      	b.n	8009046 <_dtoa_r+0x696>
 80094da:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 80094dc:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800953c <_dtoa_r+0xb8c>
 80094e0:	b11b      	cbz	r3, 80094ea <_dtoa_r+0xb3a>
 80094e2:	f10a 0308 	add.w	r3, sl, #8
 80094e6:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 80094e8:	6013      	str	r3, [r2, #0]
 80094ea:	4650      	mov	r0, sl
 80094ec:	b017      	add	sp, #92	@ 0x5c
 80094ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80094f2:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80094f4:	2b01      	cmp	r3, #1
 80094f6:	f77f ae3d 	ble.w	8009174 <_dtoa_r+0x7c4>
 80094fa:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80094fc:	930a      	str	r3, [sp, #40]	@ 0x28
 80094fe:	2001      	movs	r0, #1
 8009500:	e65b      	b.n	80091ba <_dtoa_r+0x80a>
 8009502:	9b08      	ldr	r3, [sp, #32]
 8009504:	2b00      	cmp	r3, #0
 8009506:	f77f aed6 	ble.w	80092b6 <_dtoa_r+0x906>
 800950a:	4656      	mov	r6, sl
 800950c:	4621      	mov	r1, r4
 800950e:	4648      	mov	r0, r9
 8009510:	f7ff f9c4 	bl	800889c <quorem>
 8009514:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8009518:	9b08      	ldr	r3, [sp, #32]
 800951a:	f806 8b01 	strb.w	r8, [r6], #1
 800951e:	eba6 020a 	sub.w	r2, r6, sl
 8009522:	4293      	cmp	r3, r2
 8009524:	ddb3      	ble.n	800948e <_dtoa_r+0xade>
 8009526:	4649      	mov	r1, r9
 8009528:	2300      	movs	r3, #0
 800952a:	220a      	movs	r2, #10
 800952c:	4658      	mov	r0, fp
 800952e:	f000 fcb3 	bl	8009e98 <__multadd>
 8009532:	4681      	mov	r9, r0
 8009534:	e7ea      	b.n	800950c <_dtoa_r+0xb5c>
 8009536:	bf00      	nop
 8009538:	0800b620 	.word	0x0800b620
 800953c:	0800b5a4 	.word	0x0800b5a4

08009540 <_free_r>:
 8009540:	b538      	push	{r3, r4, r5, lr}
 8009542:	4605      	mov	r5, r0
 8009544:	2900      	cmp	r1, #0
 8009546:	d040      	beq.n	80095ca <_free_r+0x8a>
 8009548:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800954c:	1f0c      	subs	r4, r1, #4
 800954e:	2b00      	cmp	r3, #0
 8009550:	bfb8      	it	lt
 8009552:	18e4      	addlt	r4, r4, r3
 8009554:	f000 fc32 	bl	8009dbc <__malloc_lock>
 8009558:	4a1c      	ldr	r2, [pc, #112]	@ (80095cc <_free_r+0x8c>)
 800955a:	6813      	ldr	r3, [r2, #0]
 800955c:	b933      	cbnz	r3, 800956c <_free_r+0x2c>
 800955e:	6063      	str	r3, [r4, #4]
 8009560:	6014      	str	r4, [r2, #0]
 8009562:	4628      	mov	r0, r5
 8009564:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009568:	f000 bc2e 	b.w	8009dc8 <__malloc_unlock>
 800956c:	42a3      	cmp	r3, r4
 800956e:	d908      	bls.n	8009582 <_free_r+0x42>
 8009570:	6820      	ldr	r0, [r4, #0]
 8009572:	1821      	adds	r1, r4, r0
 8009574:	428b      	cmp	r3, r1
 8009576:	bf01      	itttt	eq
 8009578:	6819      	ldreq	r1, [r3, #0]
 800957a:	685b      	ldreq	r3, [r3, #4]
 800957c:	1809      	addeq	r1, r1, r0
 800957e:	6021      	streq	r1, [r4, #0]
 8009580:	e7ed      	b.n	800955e <_free_r+0x1e>
 8009582:	461a      	mov	r2, r3
 8009584:	685b      	ldr	r3, [r3, #4]
 8009586:	b10b      	cbz	r3, 800958c <_free_r+0x4c>
 8009588:	42a3      	cmp	r3, r4
 800958a:	d9fa      	bls.n	8009582 <_free_r+0x42>
 800958c:	6811      	ldr	r1, [r2, #0]
 800958e:	1850      	adds	r0, r2, r1
 8009590:	42a0      	cmp	r0, r4
 8009592:	d10b      	bne.n	80095ac <_free_r+0x6c>
 8009594:	6820      	ldr	r0, [r4, #0]
 8009596:	4401      	add	r1, r0
 8009598:	1850      	adds	r0, r2, r1
 800959a:	4283      	cmp	r3, r0
 800959c:	6011      	str	r1, [r2, #0]
 800959e:	d1e0      	bne.n	8009562 <_free_r+0x22>
 80095a0:	6818      	ldr	r0, [r3, #0]
 80095a2:	685b      	ldr	r3, [r3, #4]
 80095a4:	4408      	add	r0, r1
 80095a6:	6010      	str	r0, [r2, #0]
 80095a8:	6053      	str	r3, [r2, #4]
 80095aa:	e7da      	b.n	8009562 <_free_r+0x22>
 80095ac:	d902      	bls.n	80095b4 <_free_r+0x74>
 80095ae:	230c      	movs	r3, #12
 80095b0:	602b      	str	r3, [r5, #0]
 80095b2:	e7d6      	b.n	8009562 <_free_r+0x22>
 80095b4:	6820      	ldr	r0, [r4, #0]
 80095b6:	1821      	adds	r1, r4, r0
 80095b8:	428b      	cmp	r3, r1
 80095ba:	bf01      	itttt	eq
 80095bc:	6819      	ldreq	r1, [r3, #0]
 80095be:	685b      	ldreq	r3, [r3, #4]
 80095c0:	1809      	addeq	r1, r1, r0
 80095c2:	6021      	streq	r1, [r4, #0]
 80095c4:	6063      	str	r3, [r4, #4]
 80095c6:	6054      	str	r4, [r2, #4]
 80095c8:	e7cb      	b.n	8009562 <_free_r+0x22>
 80095ca:	bd38      	pop	{r3, r4, r5, pc}
 80095cc:	2000130c 	.word	0x2000130c

080095d0 <rshift>:
 80095d0:	6903      	ldr	r3, [r0, #16]
 80095d2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80095d6:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 80095da:	f100 0414 	add.w	r4, r0, #20
 80095de:	ea4f 1261 	mov.w	r2, r1, asr #5
 80095e2:	dd46      	ble.n	8009672 <rshift+0xa2>
 80095e4:	f011 011f 	ands.w	r1, r1, #31
 80095e8:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 80095ec:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 80095f0:	d10c      	bne.n	800960c <rshift+0x3c>
 80095f2:	4629      	mov	r1, r5
 80095f4:	f100 0710 	add.w	r7, r0, #16
 80095f8:	42b1      	cmp	r1, r6
 80095fa:	d335      	bcc.n	8009668 <rshift+0x98>
 80095fc:	1a9b      	subs	r3, r3, r2
 80095fe:	009b      	lsls	r3, r3, #2
 8009600:	1eea      	subs	r2, r5, #3
 8009602:	4296      	cmp	r6, r2
 8009604:	bf38      	it	cc
 8009606:	2300      	movcc	r3, #0
 8009608:	4423      	add	r3, r4
 800960a:	e015      	b.n	8009638 <rshift+0x68>
 800960c:	46a1      	mov	r9, r4
 800960e:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8009612:	f1c1 0820 	rsb	r8, r1, #32
 8009616:	40cf      	lsrs	r7, r1
 8009618:	f105 0e04 	add.w	lr, r5, #4
 800961c:	4576      	cmp	r6, lr
 800961e:	46f4      	mov	ip, lr
 8009620:	d816      	bhi.n	8009650 <rshift+0x80>
 8009622:	1a9a      	subs	r2, r3, r2
 8009624:	0092      	lsls	r2, r2, #2
 8009626:	3a04      	subs	r2, #4
 8009628:	3501      	adds	r5, #1
 800962a:	42ae      	cmp	r6, r5
 800962c:	bf38      	it	cc
 800962e:	2200      	movcc	r2, #0
 8009630:	18a3      	adds	r3, r4, r2
 8009632:	50a7      	str	r7, [r4, r2]
 8009634:	b107      	cbz	r7, 8009638 <rshift+0x68>
 8009636:	3304      	adds	r3, #4
 8009638:	42a3      	cmp	r3, r4
 800963a:	eba3 0204 	sub.w	r2, r3, r4
 800963e:	bf08      	it	eq
 8009640:	2300      	moveq	r3, #0
 8009642:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8009646:	6102      	str	r2, [r0, #16]
 8009648:	bf08      	it	eq
 800964a:	6143      	streq	r3, [r0, #20]
 800964c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009650:	f8dc c000 	ldr.w	ip, [ip]
 8009654:	fa0c fc08 	lsl.w	ip, ip, r8
 8009658:	ea4c 0707 	orr.w	r7, ip, r7
 800965c:	f849 7b04 	str.w	r7, [r9], #4
 8009660:	f85e 7b04 	ldr.w	r7, [lr], #4
 8009664:	40cf      	lsrs	r7, r1
 8009666:	e7d9      	b.n	800961c <rshift+0x4c>
 8009668:	f851 cb04 	ldr.w	ip, [r1], #4
 800966c:	f847 cf04 	str.w	ip, [r7, #4]!
 8009670:	e7c2      	b.n	80095f8 <rshift+0x28>
 8009672:	4623      	mov	r3, r4
 8009674:	e7e0      	b.n	8009638 <rshift+0x68>

08009676 <__hexdig_fun>:
 8009676:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800967a:	2b09      	cmp	r3, #9
 800967c:	d802      	bhi.n	8009684 <__hexdig_fun+0xe>
 800967e:	3820      	subs	r0, #32
 8009680:	b2c0      	uxtb	r0, r0
 8009682:	4770      	bx	lr
 8009684:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 8009688:	2b05      	cmp	r3, #5
 800968a:	d801      	bhi.n	8009690 <__hexdig_fun+0x1a>
 800968c:	3847      	subs	r0, #71	@ 0x47
 800968e:	e7f7      	b.n	8009680 <__hexdig_fun+0xa>
 8009690:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 8009694:	2b05      	cmp	r3, #5
 8009696:	d801      	bhi.n	800969c <__hexdig_fun+0x26>
 8009698:	3827      	subs	r0, #39	@ 0x27
 800969a:	e7f1      	b.n	8009680 <__hexdig_fun+0xa>
 800969c:	2000      	movs	r0, #0
 800969e:	4770      	bx	lr

080096a0 <__gethex>:
 80096a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80096a4:	468a      	mov	sl, r1
 80096a6:	4690      	mov	r8, r2
 80096a8:	b085      	sub	sp, #20
 80096aa:	9302      	str	r3, [sp, #8]
 80096ac:	680b      	ldr	r3, [r1, #0]
 80096ae:	9001      	str	r0, [sp, #4]
 80096b0:	1c9c      	adds	r4, r3, #2
 80096b2:	46a1      	mov	r9, r4
 80096b4:	f814 0b01 	ldrb.w	r0, [r4], #1
 80096b8:	2830      	cmp	r0, #48	@ 0x30
 80096ba:	d0fa      	beq.n	80096b2 <__gethex+0x12>
 80096bc:	eba9 0303 	sub.w	r3, r9, r3
 80096c0:	f1a3 0b02 	sub.w	fp, r3, #2
 80096c4:	f7ff ffd7 	bl	8009676 <__hexdig_fun>
 80096c8:	4605      	mov	r5, r0
 80096ca:	2800      	cmp	r0, #0
 80096cc:	d168      	bne.n	80097a0 <__gethex+0x100>
 80096ce:	2201      	movs	r2, #1
 80096d0:	4648      	mov	r0, r9
 80096d2:	499f      	ldr	r1, [pc, #636]	@ (8009950 <__gethex+0x2b0>)
 80096d4:	f7ff f835 	bl	8008742 <strncmp>
 80096d8:	4607      	mov	r7, r0
 80096da:	2800      	cmp	r0, #0
 80096dc:	d167      	bne.n	80097ae <__gethex+0x10e>
 80096de:	f899 0001 	ldrb.w	r0, [r9, #1]
 80096e2:	4626      	mov	r6, r4
 80096e4:	f7ff ffc7 	bl	8009676 <__hexdig_fun>
 80096e8:	2800      	cmp	r0, #0
 80096ea:	d062      	beq.n	80097b2 <__gethex+0x112>
 80096ec:	4623      	mov	r3, r4
 80096ee:	7818      	ldrb	r0, [r3, #0]
 80096f0:	4699      	mov	r9, r3
 80096f2:	2830      	cmp	r0, #48	@ 0x30
 80096f4:	f103 0301 	add.w	r3, r3, #1
 80096f8:	d0f9      	beq.n	80096ee <__gethex+0x4e>
 80096fa:	f7ff ffbc 	bl	8009676 <__hexdig_fun>
 80096fe:	fab0 f580 	clz	r5, r0
 8009702:	f04f 0b01 	mov.w	fp, #1
 8009706:	096d      	lsrs	r5, r5, #5
 8009708:	464a      	mov	r2, r9
 800970a:	4616      	mov	r6, r2
 800970c:	7830      	ldrb	r0, [r6, #0]
 800970e:	3201      	adds	r2, #1
 8009710:	f7ff ffb1 	bl	8009676 <__hexdig_fun>
 8009714:	2800      	cmp	r0, #0
 8009716:	d1f8      	bne.n	800970a <__gethex+0x6a>
 8009718:	2201      	movs	r2, #1
 800971a:	4630      	mov	r0, r6
 800971c:	498c      	ldr	r1, [pc, #560]	@ (8009950 <__gethex+0x2b0>)
 800971e:	f7ff f810 	bl	8008742 <strncmp>
 8009722:	2800      	cmp	r0, #0
 8009724:	d13f      	bne.n	80097a6 <__gethex+0x106>
 8009726:	b944      	cbnz	r4, 800973a <__gethex+0x9a>
 8009728:	1c74      	adds	r4, r6, #1
 800972a:	4622      	mov	r2, r4
 800972c:	4616      	mov	r6, r2
 800972e:	7830      	ldrb	r0, [r6, #0]
 8009730:	3201      	adds	r2, #1
 8009732:	f7ff ffa0 	bl	8009676 <__hexdig_fun>
 8009736:	2800      	cmp	r0, #0
 8009738:	d1f8      	bne.n	800972c <__gethex+0x8c>
 800973a:	1ba4      	subs	r4, r4, r6
 800973c:	00a7      	lsls	r7, r4, #2
 800973e:	7833      	ldrb	r3, [r6, #0]
 8009740:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 8009744:	2b50      	cmp	r3, #80	@ 0x50
 8009746:	d13e      	bne.n	80097c6 <__gethex+0x126>
 8009748:	7873      	ldrb	r3, [r6, #1]
 800974a:	2b2b      	cmp	r3, #43	@ 0x2b
 800974c:	d033      	beq.n	80097b6 <__gethex+0x116>
 800974e:	2b2d      	cmp	r3, #45	@ 0x2d
 8009750:	d034      	beq.n	80097bc <__gethex+0x11c>
 8009752:	2400      	movs	r4, #0
 8009754:	1c71      	adds	r1, r6, #1
 8009756:	7808      	ldrb	r0, [r1, #0]
 8009758:	f7ff ff8d 	bl	8009676 <__hexdig_fun>
 800975c:	1e43      	subs	r3, r0, #1
 800975e:	b2db      	uxtb	r3, r3
 8009760:	2b18      	cmp	r3, #24
 8009762:	d830      	bhi.n	80097c6 <__gethex+0x126>
 8009764:	f1a0 0210 	sub.w	r2, r0, #16
 8009768:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800976c:	f7ff ff83 	bl	8009676 <__hexdig_fun>
 8009770:	f100 3cff 	add.w	ip, r0, #4294967295	@ 0xffffffff
 8009774:	fa5f fc8c 	uxtb.w	ip, ip
 8009778:	f1bc 0f18 	cmp.w	ip, #24
 800977c:	f04f 030a 	mov.w	r3, #10
 8009780:	d91e      	bls.n	80097c0 <__gethex+0x120>
 8009782:	b104      	cbz	r4, 8009786 <__gethex+0xe6>
 8009784:	4252      	negs	r2, r2
 8009786:	4417      	add	r7, r2
 8009788:	f8ca 1000 	str.w	r1, [sl]
 800978c:	b1ed      	cbz	r5, 80097ca <__gethex+0x12a>
 800978e:	f1bb 0f00 	cmp.w	fp, #0
 8009792:	bf0c      	ite	eq
 8009794:	2506      	moveq	r5, #6
 8009796:	2500      	movne	r5, #0
 8009798:	4628      	mov	r0, r5
 800979a:	b005      	add	sp, #20
 800979c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80097a0:	2500      	movs	r5, #0
 80097a2:	462c      	mov	r4, r5
 80097a4:	e7b0      	b.n	8009708 <__gethex+0x68>
 80097a6:	2c00      	cmp	r4, #0
 80097a8:	d1c7      	bne.n	800973a <__gethex+0x9a>
 80097aa:	4627      	mov	r7, r4
 80097ac:	e7c7      	b.n	800973e <__gethex+0x9e>
 80097ae:	464e      	mov	r6, r9
 80097b0:	462f      	mov	r7, r5
 80097b2:	2501      	movs	r5, #1
 80097b4:	e7c3      	b.n	800973e <__gethex+0x9e>
 80097b6:	2400      	movs	r4, #0
 80097b8:	1cb1      	adds	r1, r6, #2
 80097ba:	e7cc      	b.n	8009756 <__gethex+0xb6>
 80097bc:	2401      	movs	r4, #1
 80097be:	e7fb      	b.n	80097b8 <__gethex+0x118>
 80097c0:	fb03 0002 	mla	r0, r3, r2, r0
 80097c4:	e7ce      	b.n	8009764 <__gethex+0xc4>
 80097c6:	4631      	mov	r1, r6
 80097c8:	e7de      	b.n	8009788 <__gethex+0xe8>
 80097ca:	4629      	mov	r1, r5
 80097cc:	eba6 0309 	sub.w	r3, r6, r9
 80097d0:	3b01      	subs	r3, #1
 80097d2:	2b07      	cmp	r3, #7
 80097d4:	dc0a      	bgt.n	80097ec <__gethex+0x14c>
 80097d6:	9801      	ldr	r0, [sp, #4]
 80097d8:	f000 fafc 	bl	8009dd4 <_Balloc>
 80097dc:	4604      	mov	r4, r0
 80097de:	b940      	cbnz	r0, 80097f2 <__gethex+0x152>
 80097e0:	4602      	mov	r2, r0
 80097e2:	21e4      	movs	r1, #228	@ 0xe4
 80097e4:	4b5b      	ldr	r3, [pc, #364]	@ (8009954 <__gethex+0x2b4>)
 80097e6:	485c      	ldr	r0, [pc, #368]	@ (8009958 <__gethex+0x2b8>)
 80097e8:	f001 fa6a 	bl	800acc0 <__assert_func>
 80097ec:	3101      	adds	r1, #1
 80097ee:	105b      	asrs	r3, r3, #1
 80097f0:	e7ef      	b.n	80097d2 <__gethex+0x132>
 80097f2:	2300      	movs	r3, #0
 80097f4:	f100 0a14 	add.w	sl, r0, #20
 80097f8:	4655      	mov	r5, sl
 80097fa:	469b      	mov	fp, r3
 80097fc:	45b1      	cmp	r9, r6
 80097fe:	d337      	bcc.n	8009870 <__gethex+0x1d0>
 8009800:	f845 bb04 	str.w	fp, [r5], #4
 8009804:	eba5 050a 	sub.w	r5, r5, sl
 8009808:	10ad      	asrs	r5, r5, #2
 800980a:	6125      	str	r5, [r4, #16]
 800980c:	4658      	mov	r0, fp
 800980e:	f000 fbd3 	bl	8009fb8 <__hi0bits>
 8009812:	016d      	lsls	r5, r5, #5
 8009814:	f8d8 6000 	ldr.w	r6, [r8]
 8009818:	1a2d      	subs	r5, r5, r0
 800981a:	42b5      	cmp	r5, r6
 800981c:	dd54      	ble.n	80098c8 <__gethex+0x228>
 800981e:	1bad      	subs	r5, r5, r6
 8009820:	4629      	mov	r1, r5
 8009822:	4620      	mov	r0, r4
 8009824:	f000 ff5b 	bl	800a6de <__any_on>
 8009828:	4681      	mov	r9, r0
 800982a:	b178      	cbz	r0, 800984c <__gethex+0x1ac>
 800982c:	f04f 0901 	mov.w	r9, #1
 8009830:	1e6b      	subs	r3, r5, #1
 8009832:	1159      	asrs	r1, r3, #5
 8009834:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8009838:	f003 021f 	and.w	r2, r3, #31
 800983c:	fa09 f202 	lsl.w	r2, r9, r2
 8009840:	420a      	tst	r2, r1
 8009842:	d003      	beq.n	800984c <__gethex+0x1ac>
 8009844:	454b      	cmp	r3, r9
 8009846:	dc36      	bgt.n	80098b6 <__gethex+0x216>
 8009848:	f04f 0902 	mov.w	r9, #2
 800984c:	4629      	mov	r1, r5
 800984e:	4620      	mov	r0, r4
 8009850:	f7ff febe 	bl	80095d0 <rshift>
 8009854:	442f      	add	r7, r5
 8009856:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800985a:	42bb      	cmp	r3, r7
 800985c:	da42      	bge.n	80098e4 <__gethex+0x244>
 800985e:	4621      	mov	r1, r4
 8009860:	9801      	ldr	r0, [sp, #4]
 8009862:	f000 faf7 	bl	8009e54 <_Bfree>
 8009866:	2300      	movs	r3, #0
 8009868:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800986a:	25a3      	movs	r5, #163	@ 0xa3
 800986c:	6013      	str	r3, [r2, #0]
 800986e:	e793      	b.n	8009798 <__gethex+0xf8>
 8009870:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 8009874:	2a2e      	cmp	r2, #46	@ 0x2e
 8009876:	d012      	beq.n	800989e <__gethex+0x1fe>
 8009878:	2b20      	cmp	r3, #32
 800987a:	d104      	bne.n	8009886 <__gethex+0x1e6>
 800987c:	f845 bb04 	str.w	fp, [r5], #4
 8009880:	f04f 0b00 	mov.w	fp, #0
 8009884:	465b      	mov	r3, fp
 8009886:	7830      	ldrb	r0, [r6, #0]
 8009888:	9303      	str	r3, [sp, #12]
 800988a:	f7ff fef4 	bl	8009676 <__hexdig_fun>
 800988e:	9b03      	ldr	r3, [sp, #12]
 8009890:	f000 000f 	and.w	r0, r0, #15
 8009894:	4098      	lsls	r0, r3
 8009896:	ea4b 0b00 	orr.w	fp, fp, r0
 800989a:	3304      	adds	r3, #4
 800989c:	e7ae      	b.n	80097fc <__gethex+0x15c>
 800989e:	45b1      	cmp	r9, r6
 80098a0:	d8ea      	bhi.n	8009878 <__gethex+0x1d8>
 80098a2:	2201      	movs	r2, #1
 80098a4:	4630      	mov	r0, r6
 80098a6:	492a      	ldr	r1, [pc, #168]	@ (8009950 <__gethex+0x2b0>)
 80098a8:	9303      	str	r3, [sp, #12]
 80098aa:	f7fe ff4a 	bl	8008742 <strncmp>
 80098ae:	9b03      	ldr	r3, [sp, #12]
 80098b0:	2800      	cmp	r0, #0
 80098b2:	d1e1      	bne.n	8009878 <__gethex+0x1d8>
 80098b4:	e7a2      	b.n	80097fc <__gethex+0x15c>
 80098b6:	4620      	mov	r0, r4
 80098b8:	1ea9      	subs	r1, r5, #2
 80098ba:	f000 ff10 	bl	800a6de <__any_on>
 80098be:	2800      	cmp	r0, #0
 80098c0:	d0c2      	beq.n	8009848 <__gethex+0x1a8>
 80098c2:	f04f 0903 	mov.w	r9, #3
 80098c6:	e7c1      	b.n	800984c <__gethex+0x1ac>
 80098c8:	da09      	bge.n	80098de <__gethex+0x23e>
 80098ca:	1b75      	subs	r5, r6, r5
 80098cc:	4621      	mov	r1, r4
 80098ce:	462a      	mov	r2, r5
 80098d0:	9801      	ldr	r0, [sp, #4]
 80098d2:	f000 fcd5 	bl	800a280 <__lshift>
 80098d6:	4604      	mov	r4, r0
 80098d8:	1b7f      	subs	r7, r7, r5
 80098da:	f100 0a14 	add.w	sl, r0, #20
 80098de:	f04f 0900 	mov.w	r9, #0
 80098e2:	e7b8      	b.n	8009856 <__gethex+0x1b6>
 80098e4:	f8d8 5004 	ldr.w	r5, [r8, #4]
 80098e8:	42bd      	cmp	r5, r7
 80098ea:	dd6f      	ble.n	80099cc <__gethex+0x32c>
 80098ec:	1bed      	subs	r5, r5, r7
 80098ee:	42ae      	cmp	r6, r5
 80098f0:	dc34      	bgt.n	800995c <__gethex+0x2bc>
 80098f2:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80098f6:	2b02      	cmp	r3, #2
 80098f8:	d022      	beq.n	8009940 <__gethex+0x2a0>
 80098fa:	2b03      	cmp	r3, #3
 80098fc:	d024      	beq.n	8009948 <__gethex+0x2a8>
 80098fe:	2b01      	cmp	r3, #1
 8009900:	d115      	bne.n	800992e <__gethex+0x28e>
 8009902:	42ae      	cmp	r6, r5
 8009904:	d113      	bne.n	800992e <__gethex+0x28e>
 8009906:	2e01      	cmp	r6, #1
 8009908:	d10b      	bne.n	8009922 <__gethex+0x282>
 800990a:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800990e:	9a02      	ldr	r2, [sp, #8]
 8009910:	2562      	movs	r5, #98	@ 0x62
 8009912:	6013      	str	r3, [r2, #0]
 8009914:	2301      	movs	r3, #1
 8009916:	6123      	str	r3, [r4, #16]
 8009918:	f8ca 3000 	str.w	r3, [sl]
 800991c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800991e:	601c      	str	r4, [r3, #0]
 8009920:	e73a      	b.n	8009798 <__gethex+0xf8>
 8009922:	4620      	mov	r0, r4
 8009924:	1e71      	subs	r1, r6, #1
 8009926:	f000 feda 	bl	800a6de <__any_on>
 800992a:	2800      	cmp	r0, #0
 800992c:	d1ed      	bne.n	800990a <__gethex+0x26a>
 800992e:	4621      	mov	r1, r4
 8009930:	9801      	ldr	r0, [sp, #4]
 8009932:	f000 fa8f 	bl	8009e54 <_Bfree>
 8009936:	2300      	movs	r3, #0
 8009938:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800993a:	2550      	movs	r5, #80	@ 0x50
 800993c:	6013      	str	r3, [r2, #0]
 800993e:	e72b      	b.n	8009798 <__gethex+0xf8>
 8009940:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009942:	2b00      	cmp	r3, #0
 8009944:	d1f3      	bne.n	800992e <__gethex+0x28e>
 8009946:	e7e0      	b.n	800990a <__gethex+0x26a>
 8009948:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800994a:	2b00      	cmp	r3, #0
 800994c:	d1dd      	bne.n	800990a <__gethex+0x26a>
 800994e:	e7ee      	b.n	800992e <__gethex+0x28e>
 8009950:	0800b510 	.word	0x0800b510
 8009954:	0800b620 	.word	0x0800b620
 8009958:	0800b631 	.word	0x0800b631
 800995c:	1e6f      	subs	r7, r5, #1
 800995e:	f1b9 0f00 	cmp.w	r9, #0
 8009962:	d130      	bne.n	80099c6 <__gethex+0x326>
 8009964:	b127      	cbz	r7, 8009970 <__gethex+0x2d0>
 8009966:	4639      	mov	r1, r7
 8009968:	4620      	mov	r0, r4
 800996a:	f000 feb8 	bl	800a6de <__any_on>
 800996e:	4681      	mov	r9, r0
 8009970:	2301      	movs	r3, #1
 8009972:	4629      	mov	r1, r5
 8009974:	1b76      	subs	r6, r6, r5
 8009976:	2502      	movs	r5, #2
 8009978:	117a      	asrs	r2, r7, #5
 800997a:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800997e:	f007 071f 	and.w	r7, r7, #31
 8009982:	40bb      	lsls	r3, r7
 8009984:	4213      	tst	r3, r2
 8009986:	4620      	mov	r0, r4
 8009988:	bf18      	it	ne
 800998a:	f049 0902 	orrne.w	r9, r9, #2
 800998e:	f7ff fe1f 	bl	80095d0 <rshift>
 8009992:	f8d8 7004 	ldr.w	r7, [r8, #4]
 8009996:	f1b9 0f00 	cmp.w	r9, #0
 800999a:	d047      	beq.n	8009a2c <__gethex+0x38c>
 800999c:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80099a0:	2b02      	cmp	r3, #2
 80099a2:	d015      	beq.n	80099d0 <__gethex+0x330>
 80099a4:	2b03      	cmp	r3, #3
 80099a6:	d017      	beq.n	80099d8 <__gethex+0x338>
 80099a8:	2b01      	cmp	r3, #1
 80099aa:	d109      	bne.n	80099c0 <__gethex+0x320>
 80099ac:	f019 0f02 	tst.w	r9, #2
 80099b0:	d006      	beq.n	80099c0 <__gethex+0x320>
 80099b2:	f8da 3000 	ldr.w	r3, [sl]
 80099b6:	ea49 0903 	orr.w	r9, r9, r3
 80099ba:	f019 0f01 	tst.w	r9, #1
 80099be:	d10e      	bne.n	80099de <__gethex+0x33e>
 80099c0:	f045 0510 	orr.w	r5, r5, #16
 80099c4:	e032      	b.n	8009a2c <__gethex+0x38c>
 80099c6:	f04f 0901 	mov.w	r9, #1
 80099ca:	e7d1      	b.n	8009970 <__gethex+0x2d0>
 80099cc:	2501      	movs	r5, #1
 80099ce:	e7e2      	b.n	8009996 <__gethex+0x2f6>
 80099d0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80099d2:	f1c3 0301 	rsb	r3, r3, #1
 80099d6:	930f      	str	r3, [sp, #60]	@ 0x3c
 80099d8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80099da:	2b00      	cmp	r3, #0
 80099dc:	d0f0      	beq.n	80099c0 <__gethex+0x320>
 80099de:	f04f 0c00 	mov.w	ip, #0
 80099e2:	f8d4 b010 	ldr.w	fp, [r4, #16]
 80099e6:	f104 0314 	add.w	r3, r4, #20
 80099ea:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 80099ee:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 80099f2:	4618      	mov	r0, r3
 80099f4:	f853 2b04 	ldr.w	r2, [r3], #4
 80099f8:	f1b2 3fff 	cmp.w	r2, #4294967295	@ 0xffffffff
 80099fc:	d01b      	beq.n	8009a36 <__gethex+0x396>
 80099fe:	3201      	adds	r2, #1
 8009a00:	6002      	str	r2, [r0, #0]
 8009a02:	2d02      	cmp	r5, #2
 8009a04:	f104 0314 	add.w	r3, r4, #20
 8009a08:	d13c      	bne.n	8009a84 <__gethex+0x3e4>
 8009a0a:	f8d8 2000 	ldr.w	r2, [r8]
 8009a0e:	3a01      	subs	r2, #1
 8009a10:	42b2      	cmp	r2, r6
 8009a12:	d109      	bne.n	8009a28 <__gethex+0x388>
 8009a14:	2201      	movs	r2, #1
 8009a16:	1171      	asrs	r1, r6, #5
 8009a18:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8009a1c:	f006 061f 	and.w	r6, r6, #31
 8009a20:	fa02 f606 	lsl.w	r6, r2, r6
 8009a24:	421e      	tst	r6, r3
 8009a26:	d13a      	bne.n	8009a9e <__gethex+0x3fe>
 8009a28:	f045 0520 	orr.w	r5, r5, #32
 8009a2c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009a2e:	601c      	str	r4, [r3, #0]
 8009a30:	9b02      	ldr	r3, [sp, #8]
 8009a32:	601f      	str	r7, [r3, #0]
 8009a34:	e6b0      	b.n	8009798 <__gethex+0xf8>
 8009a36:	4299      	cmp	r1, r3
 8009a38:	f843 cc04 	str.w	ip, [r3, #-4]
 8009a3c:	d8d9      	bhi.n	80099f2 <__gethex+0x352>
 8009a3e:	68a3      	ldr	r3, [r4, #8]
 8009a40:	459b      	cmp	fp, r3
 8009a42:	db17      	blt.n	8009a74 <__gethex+0x3d4>
 8009a44:	6861      	ldr	r1, [r4, #4]
 8009a46:	9801      	ldr	r0, [sp, #4]
 8009a48:	3101      	adds	r1, #1
 8009a4a:	f000 f9c3 	bl	8009dd4 <_Balloc>
 8009a4e:	4681      	mov	r9, r0
 8009a50:	b918      	cbnz	r0, 8009a5a <__gethex+0x3ba>
 8009a52:	4602      	mov	r2, r0
 8009a54:	2184      	movs	r1, #132	@ 0x84
 8009a56:	4b19      	ldr	r3, [pc, #100]	@ (8009abc <__gethex+0x41c>)
 8009a58:	e6c5      	b.n	80097e6 <__gethex+0x146>
 8009a5a:	6922      	ldr	r2, [r4, #16]
 8009a5c:	f104 010c 	add.w	r1, r4, #12
 8009a60:	3202      	adds	r2, #2
 8009a62:	0092      	lsls	r2, r2, #2
 8009a64:	300c      	adds	r0, #12
 8009a66:	f7fe ff04 	bl	8008872 <memcpy>
 8009a6a:	4621      	mov	r1, r4
 8009a6c:	9801      	ldr	r0, [sp, #4]
 8009a6e:	f000 f9f1 	bl	8009e54 <_Bfree>
 8009a72:	464c      	mov	r4, r9
 8009a74:	6923      	ldr	r3, [r4, #16]
 8009a76:	1c5a      	adds	r2, r3, #1
 8009a78:	6122      	str	r2, [r4, #16]
 8009a7a:	2201      	movs	r2, #1
 8009a7c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8009a80:	615a      	str	r2, [r3, #20]
 8009a82:	e7be      	b.n	8009a02 <__gethex+0x362>
 8009a84:	6922      	ldr	r2, [r4, #16]
 8009a86:	455a      	cmp	r2, fp
 8009a88:	dd0b      	ble.n	8009aa2 <__gethex+0x402>
 8009a8a:	2101      	movs	r1, #1
 8009a8c:	4620      	mov	r0, r4
 8009a8e:	f7ff fd9f 	bl	80095d0 <rshift>
 8009a92:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8009a96:	3701      	adds	r7, #1
 8009a98:	42bb      	cmp	r3, r7
 8009a9a:	f6ff aee0 	blt.w	800985e <__gethex+0x1be>
 8009a9e:	2501      	movs	r5, #1
 8009aa0:	e7c2      	b.n	8009a28 <__gethex+0x388>
 8009aa2:	f016 061f 	ands.w	r6, r6, #31
 8009aa6:	d0fa      	beq.n	8009a9e <__gethex+0x3fe>
 8009aa8:	4453      	add	r3, sl
 8009aaa:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8009aae:	f000 fa83 	bl	8009fb8 <__hi0bits>
 8009ab2:	f1c6 0620 	rsb	r6, r6, #32
 8009ab6:	42b0      	cmp	r0, r6
 8009ab8:	dbe7      	blt.n	8009a8a <__gethex+0x3ea>
 8009aba:	e7f0      	b.n	8009a9e <__gethex+0x3fe>
 8009abc:	0800b620 	.word	0x0800b620

08009ac0 <L_shift>:
 8009ac0:	f1c2 0208 	rsb	r2, r2, #8
 8009ac4:	0092      	lsls	r2, r2, #2
 8009ac6:	b570      	push	{r4, r5, r6, lr}
 8009ac8:	f1c2 0620 	rsb	r6, r2, #32
 8009acc:	6843      	ldr	r3, [r0, #4]
 8009ace:	6804      	ldr	r4, [r0, #0]
 8009ad0:	fa03 f506 	lsl.w	r5, r3, r6
 8009ad4:	432c      	orrs	r4, r5
 8009ad6:	40d3      	lsrs	r3, r2
 8009ad8:	6004      	str	r4, [r0, #0]
 8009ada:	f840 3f04 	str.w	r3, [r0, #4]!
 8009ade:	4288      	cmp	r0, r1
 8009ae0:	d3f4      	bcc.n	8009acc <L_shift+0xc>
 8009ae2:	bd70      	pop	{r4, r5, r6, pc}

08009ae4 <__match>:
 8009ae4:	b530      	push	{r4, r5, lr}
 8009ae6:	6803      	ldr	r3, [r0, #0]
 8009ae8:	3301      	adds	r3, #1
 8009aea:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009aee:	b914      	cbnz	r4, 8009af6 <__match+0x12>
 8009af0:	6003      	str	r3, [r0, #0]
 8009af2:	2001      	movs	r0, #1
 8009af4:	bd30      	pop	{r4, r5, pc}
 8009af6:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009afa:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 8009afe:	2d19      	cmp	r5, #25
 8009b00:	bf98      	it	ls
 8009b02:	3220      	addls	r2, #32
 8009b04:	42a2      	cmp	r2, r4
 8009b06:	d0f0      	beq.n	8009aea <__match+0x6>
 8009b08:	2000      	movs	r0, #0
 8009b0a:	e7f3      	b.n	8009af4 <__match+0x10>

08009b0c <__hexnan>:
 8009b0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009b10:	2500      	movs	r5, #0
 8009b12:	680b      	ldr	r3, [r1, #0]
 8009b14:	4682      	mov	sl, r0
 8009b16:	115e      	asrs	r6, r3, #5
 8009b18:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8009b1c:	f013 031f 	ands.w	r3, r3, #31
 8009b20:	bf18      	it	ne
 8009b22:	3604      	addne	r6, #4
 8009b24:	1f37      	subs	r7, r6, #4
 8009b26:	4690      	mov	r8, r2
 8009b28:	46b9      	mov	r9, r7
 8009b2a:	463c      	mov	r4, r7
 8009b2c:	46ab      	mov	fp, r5
 8009b2e:	b087      	sub	sp, #28
 8009b30:	6801      	ldr	r1, [r0, #0]
 8009b32:	9301      	str	r3, [sp, #4]
 8009b34:	f846 5c04 	str.w	r5, [r6, #-4]
 8009b38:	9502      	str	r5, [sp, #8]
 8009b3a:	784a      	ldrb	r2, [r1, #1]
 8009b3c:	1c4b      	adds	r3, r1, #1
 8009b3e:	9303      	str	r3, [sp, #12]
 8009b40:	b342      	cbz	r2, 8009b94 <__hexnan+0x88>
 8009b42:	4610      	mov	r0, r2
 8009b44:	9105      	str	r1, [sp, #20]
 8009b46:	9204      	str	r2, [sp, #16]
 8009b48:	f7ff fd95 	bl	8009676 <__hexdig_fun>
 8009b4c:	2800      	cmp	r0, #0
 8009b4e:	d151      	bne.n	8009bf4 <__hexnan+0xe8>
 8009b50:	9a04      	ldr	r2, [sp, #16]
 8009b52:	9905      	ldr	r1, [sp, #20]
 8009b54:	2a20      	cmp	r2, #32
 8009b56:	d818      	bhi.n	8009b8a <__hexnan+0x7e>
 8009b58:	9b02      	ldr	r3, [sp, #8]
 8009b5a:	459b      	cmp	fp, r3
 8009b5c:	dd13      	ble.n	8009b86 <__hexnan+0x7a>
 8009b5e:	454c      	cmp	r4, r9
 8009b60:	d206      	bcs.n	8009b70 <__hexnan+0x64>
 8009b62:	2d07      	cmp	r5, #7
 8009b64:	dc04      	bgt.n	8009b70 <__hexnan+0x64>
 8009b66:	462a      	mov	r2, r5
 8009b68:	4649      	mov	r1, r9
 8009b6a:	4620      	mov	r0, r4
 8009b6c:	f7ff ffa8 	bl	8009ac0 <L_shift>
 8009b70:	4544      	cmp	r4, r8
 8009b72:	d952      	bls.n	8009c1a <__hexnan+0x10e>
 8009b74:	2300      	movs	r3, #0
 8009b76:	f1a4 0904 	sub.w	r9, r4, #4
 8009b7a:	f844 3c04 	str.w	r3, [r4, #-4]
 8009b7e:	461d      	mov	r5, r3
 8009b80:	464c      	mov	r4, r9
 8009b82:	f8cd b008 	str.w	fp, [sp, #8]
 8009b86:	9903      	ldr	r1, [sp, #12]
 8009b88:	e7d7      	b.n	8009b3a <__hexnan+0x2e>
 8009b8a:	2a29      	cmp	r2, #41	@ 0x29
 8009b8c:	d157      	bne.n	8009c3e <__hexnan+0x132>
 8009b8e:	3102      	adds	r1, #2
 8009b90:	f8ca 1000 	str.w	r1, [sl]
 8009b94:	f1bb 0f00 	cmp.w	fp, #0
 8009b98:	d051      	beq.n	8009c3e <__hexnan+0x132>
 8009b9a:	454c      	cmp	r4, r9
 8009b9c:	d206      	bcs.n	8009bac <__hexnan+0xa0>
 8009b9e:	2d07      	cmp	r5, #7
 8009ba0:	dc04      	bgt.n	8009bac <__hexnan+0xa0>
 8009ba2:	462a      	mov	r2, r5
 8009ba4:	4649      	mov	r1, r9
 8009ba6:	4620      	mov	r0, r4
 8009ba8:	f7ff ff8a 	bl	8009ac0 <L_shift>
 8009bac:	4544      	cmp	r4, r8
 8009bae:	d936      	bls.n	8009c1e <__hexnan+0x112>
 8009bb0:	4623      	mov	r3, r4
 8009bb2:	f1a8 0204 	sub.w	r2, r8, #4
 8009bb6:	f853 1b04 	ldr.w	r1, [r3], #4
 8009bba:	429f      	cmp	r7, r3
 8009bbc:	f842 1f04 	str.w	r1, [r2, #4]!
 8009bc0:	d2f9      	bcs.n	8009bb6 <__hexnan+0xaa>
 8009bc2:	1b3b      	subs	r3, r7, r4
 8009bc4:	f023 0303 	bic.w	r3, r3, #3
 8009bc8:	3304      	adds	r3, #4
 8009bca:	3401      	adds	r4, #1
 8009bcc:	3e03      	subs	r6, #3
 8009bce:	42b4      	cmp	r4, r6
 8009bd0:	bf88      	it	hi
 8009bd2:	2304      	movhi	r3, #4
 8009bd4:	2200      	movs	r2, #0
 8009bd6:	4443      	add	r3, r8
 8009bd8:	f843 2b04 	str.w	r2, [r3], #4
 8009bdc:	429f      	cmp	r7, r3
 8009bde:	d2fb      	bcs.n	8009bd8 <__hexnan+0xcc>
 8009be0:	683b      	ldr	r3, [r7, #0]
 8009be2:	b91b      	cbnz	r3, 8009bec <__hexnan+0xe0>
 8009be4:	4547      	cmp	r7, r8
 8009be6:	d128      	bne.n	8009c3a <__hexnan+0x12e>
 8009be8:	2301      	movs	r3, #1
 8009bea:	603b      	str	r3, [r7, #0]
 8009bec:	2005      	movs	r0, #5
 8009bee:	b007      	add	sp, #28
 8009bf0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009bf4:	3501      	adds	r5, #1
 8009bf6:	2d08      	cmp	r5, #8
 8009bf8:	f10b 0b01 	add.w	fp, fp, #1
 8009bfc:	dd06      	ble.n	8009c0c <__hexnan+0x100>
 8009bfe:	4544      	cmp	r4, r8
 8009c00:	d9c1      	bls.n	8009b86 <__hexnan+0x7a>
 8009c02:	2300      	movs	r3, #0
 8009c04:	2501      	movs	r5, #1
 8009c06:	f844 3c04 	str.w	r3, [r4, #-4]
 8009c0a:	3c04      	subs	r4, #4
 8009c0c:	6822      	ldr	r2, [r4, #0]
 8009c0e:	f000 000f 	and.w	r0, r0, #15
 8009c12:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8009c16:	6020      	str	r0, [r4, #0]
 8009c18:	e7b5      	b.n	8009b86 <__hexnan+0x7a>
 8009c1a:	2508      	movs	r5, #8
 8009c1c:	e7b3      	b.n	8009b86 <__hexnan+0x7a>
 8009c1e:	9b01      	ldr	r3, [sp, #4]
 8009c20:	2b00      	cmp	r3, #0
 8009c22:	d0dd      	beq.n	8009be0 <__hexnan+0xd4>
 8009c24:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8009c28:	f1c3 0320 	rsb	r3, r3, #32
 8009c2c:	40da      	lsrs	r2, r3
 8009c2e:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8009c32:	4013      	ands	r3, r2
 8009c34:	f846 3c04 	str.w	r3, [r6, #-4]
 8009c38:	e7d2      	b.n	8009be0 <__hexnan+0xd4>
 8009c3a:	3f04      	subs	r7, #4
 8009c3c:	e7d0      	b.n	8009be0 <__hexnan+0xd4>
 8009c3e:	2004      	movs	r0, #4
 8009c40:	e7d5      	b.n	8009bee <__hexnan+0xe2>
	...

08009c44 <malloc>:
 8009c44:	4b02      	ldr	r3, [pc, #8]	@ (8009c50 <malloc+0xc>)
 8009c46:	4601      	mov	r1, r0
 8009c48:	6818      	ldr	r0, [r3, #0]
 8009c4a:	f000 b825 	b.w	8009c98 <_malloc_r>
 8009c4e:	bf00      	nop
 8009c50:	20000308 	.word	0x20000308

08009c54 <sbrk_aligned>:
 8009c54:	b570      	push	{r4, r5, r6, lr}
 8009c56:	4e0f      	ldr	r6, [pc, #60]	@ (8009c94 <sbrk_aligned+0x40>)
 8009c58:	460c      	mov	r4, r1
 8009c5a:	6831      	ldr	r1, [r6, #0]
 8009c5c:	4605      	mov	r5, r0
 8009c5e:	b911      	cbnz	r1, 8009c66 <sbrk_aligned+0x12>
 8009c60:	f001 f81e 	bl	800aca0 <_sbrk_r>
 8009c64:	6030      	str	r0, [r6, #0]
 8009c66:	4621      	mov	r1, r4
 8009c68:	4628      	mov	r0, r5
 8009c6a:	f001 f819 	bl	800aca0 <_sbrk_r>
 8009c6e:	1c43      	adds	r3, r0, #1
 8009c70:	d103      	bne.n	8009c7a <sbrk_aligned+0x26>
 8009c72:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8009c76:	4620      	mov	r0, r4
 8009c78:	bd70      	pop	{r4, r5, r6, pc}
 8009c7a:	1cc4      	adds	r4, r0, #3
 8009c7c:	f024 0403 	bic.w	r4, r4, #3
 8009c80:	42a0      	cmp	r0, r4
 8009c82:	d0f8      	beq.n	8009c76 <sbrk_aligned+0x22>
 8009c84:	1a21      	subs	r1, r4, r0
 8009c86:	4628      	mov	r0, r5
 8009c88:	f001 f80a 	bl	800aca0 <_sbrk_r>
 8009c8c:	3001      	adds	r0, #1
 8009c8e:	d1f2      	bne.n	8009c76 <sbrk_aligned+0x22>
 8009c90:	e7ef      	b.n	8009c72 <sbrk_aligned+0x1e>
 8009c92:	bf00      	nop
 8009c94:	20001308 	.word	0x20001308

08009c98 <_malloc_r>:
 8009c98:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009c9c:	1ccd      	adds	r5, r1, #3
 8009c9e:	f025 0503 	bic.w	r5, r5, #3
 8009ca2:	3508      	adds	r5, #8
 8009ca4:	2d0c      	cmp	r5, #12
 8009ca6:	bf38      	it	cc
 8009ca8:	250c      	movcc	r5, #12
 8009caa:	2d00      	cmp	r5, #0
 8009cac:	4606      	mov	r6, r0
 8009cae:	db01      	blt.n	8009cb4 <_malloc_r+0x1c>
 8009cb0:	42a9      	cmp	r1, r5
 8009cb2:	d904      	bls.n	8009cbe <_malloc_r+0x26>
 8009cb4:	230c      	movs	r3, #12
 8009cb6:	6033      	str	r3, [r6, #0]
 8009cb8:	2000      	movs	r0, #0
 8009cba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009cbe:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8009d94 <_malloc_r+0xfc>
 8009cc2:	f000 f87b 	bl	8009dbc <__malloc_lock>
 8009cc6:	f8d8 3000 	ldr.w	r3, [r8]
 8009cca:	461c      	mov	r4, r3
 8009ccc:	bb44      	cbnz	r4, 8009d20 <_malloc_r+0x88>
 8009cce:	4629      	mov	r1, r5
 8009cd0:	4630      	mov	r0, r6
 8009cd2:	f7ff ffbf 	bl	8009c54 <sbrk_aligned>
 8009cd6:	1c43      	adds	r3, r0, #1
 8009cd8:	4604      	mov	r4, r0
 8009cda:	d158      	bne.n	8009d8e <_malloc_r+0xf6>
 8009cdc:	f8d8 4000 	ldr.w	r4, [r8]
 8009ce0:	4627      	mov	r7, r4
 8009ce2:	2f00      	cmp	r7, #0
 8009ce4:	d143      	bne.n	8009d6e <_malloc_r+0xd6>
 8009ce6:	2c00      	cmp	r4, #0
 8009ce8:	d04b      	beq.n	8009d82 <_malloc_r+0xea>
 8009cea:	6823      	ldr	r3, [r4, #0]
 8009cec:	4639      	mov	r1, r7
 8009cee:	4630      	mov	r0, r6
 8009cf0:	eb04 0903 	add.w	r9, r4, r3
 8009cf4:	f000 ffd4 	bl	800aca0 <_sbrk_r>
 8009cf8:	4581      	cmp	r9, r0
 8009cfa:	d142      	bne.n	8009d82 <_malloc_r+0xea>
 8009cfc:	6821      	ldr	r1, [r4, #0]
 8009cfe:	4630      	mov	r0, r6
 8009d00:	1a6d      	subs	r5, r5, r1
 8009d02:	4629      	mov	r1, r5
 8009d04:	f7ff ffa6 	bl	8009c54 <sbrk_aligned>
 8009d08:	3001      	adds	r0, #1
 8009d0a:	d03a      	beq.n	8009d82 <_malloc_r+0xea>
 8009d0c:	6823      	ldr	r3, [r4, #0]
 8009d0e:	442b      	add	r3, r5
 8009d10:	6023      	str	r3, [r4, #0]
 8009d12:	f8d8 3000 	ldr.w	r3, [r8]
 8009d16:	685a      	ldr	r2, [r3, #4]
 8009d18:	bb62      	cbnz	r2, 8009d74 <_malloc_r+0xdc>
 8009d1a:	f8c8 7000 	str.w	r7, [r8]
 8009d1e:	e00f      	b.n	8009d40 <_malloc_r+0xa8>
 8009d20:	6822      	ldr	r2, [r4, #0]
 8009d22:	1b52      	subs	r2, r2, r5
 8009d24:	d420      	bmi.n	8009d68 <_malloc_r+0xd0>
 8009d26:	2a0b      	cmp	r2, #11
 8009d28:	d917      	bls.n	8009d5a <_malloc_r+0xc2>
 8009d2a:	1961      	adds	r1, r4, r5
 8009d2c:	42a3      	cmp	r3, r4
 8009d2e:	6025      	str	r5, [r4, #0]
 8009d30:	bf18      	it	ne
 8009d32:	6059      	strne	r1, [r3, #4]
 8009d34:	6863      	ldr	r3, [r4, #4]
 8009d36:	bf08      	it	eq
 8009d38:	f8c8 1000 	streq.w	r1, [r8]
 8009d3c:	5162      	str	r2, [r4, r5]
 8009d3e:	604b      	str	r3, [r1, #4]
 8009d40:	4630      	mov	r0, r6
 8009d42:	f000 f841 	bl	8009dc8 <__malloc_unlock>
 8009d46:	f104 000b 	add.w	r0, r4, #11
 8009d4a:	1d23      	adds	r3, r4, #4
 8009d4c:	f020 0007 	bic.w	r0, r0, #7
 8009d50:	1ac2      	subs	r2, r0, r3
 8009d52:	bf1c      	itt	ne
 8009d54:	1a1b      	subne	r3, r3, r0
 8009d56:	50a3      	strne	r3, [r4, r2]
 8009d58:	e7af      	b.n	8009cba <_malloc_r+0x22>
 8009d5a:	6862      	ldr	r2, [r4, #4]
 8009d5c:	42a3      	cmp	r3, r4
 8009d5e:	bf0c      	ite	eq
 8009d60:	f8c8 2000 	streq.w	r2, [r8]
 8009d64:	605a      	strne	r2, [r3, #4]
 8009d66:	e7eb      	b.n	8009d40 <_malloc_r+0xa8>
 8009d68:	4623      	mov	r3, r4
 8009d6a:	6864      	ldr	r4, [r4, #4]
 8009d6c:	e7ae      	b.n	8009ccc <_malloc_r+0x34>
 8009d6e:	463c      	mov	r4, r7
 8009d70:	687f      	ldr	r7, [r7, #4]
 8009d72:	e7b6      	b.n	8009ce2 <_malloc_r+0x4a>
 8009d74:	461a      	mov	r2, r3
 8009d76:	685b      	ldr	r3, [r3, #4]
 8009d78:	42a3      	cmp	r3, r4
 8009d7a:	d1fb      	bne.n	8009d74 <_malloc_r+0xdc>
 8009d7c:	2300      	movs	r3, #0
 8009d7e:	6053      	str	r3, [r2, #4]
 8009d80:	e7de      	b.n	8009d40 <_malloc_r+0xa8>
 8009d82:	230c      	movs	r3, #12
 8009d84:	4630      	mov	r0, r6
 8009d86:	6033      	str	r3, [r6, #0]
 8009d88:	f000 f81e 	bl	8009dc8 <__malloc_unlock>
 8009d8c:	e794      	b.n	8009cb8 <_malloc_r+0x20>
 8009d8e:	6005      	str	r5, [r0, #0]
 8009d90:	e7d6      	b.n	8009d40 <_malloc_r+0xa8>
 8009d92:	bf00      	nop
 8009d94:	2000130c 	.word	0x2000130c

08009d98 <__ascii_mbtowc>:
 8009d98:	b082      	sub	sp, #8
 8009d9a:	b901      	cbnz	r1, 8009d9e <__ascii_mbtowc+0x6>
 8009d9c:	a901      	add	r1, sp, #4
 8009d9e:	b142      	cbz	r2, 8009db2 <__ascii_mbtowc+0x1a>
 8009da0:	b14b      	cbz	r3, 8009db6 <__ascii_mbtowc+0x1e>
 8009da2:	7813      	ldrb	r3, [r2, #0]
 8009da4:	600b      	str	r3, [r1, #0]
 8009da6:	7812      	ldrb	r2, [r2, #0]
 8009da8:	1e10      	subs	r0, r2, #0
 8009daa:	bf18      	it	ne
 8009dac:	2001      	movne	r0, #1
 8009dae:	b002      	add	sp, #8
 8009db0:	4770      	bx	lr
 8009db2:	4610      	mov	r0, r2
 8009db4:	e7fb      	b.n	8009dae <__ascii_mbtowc+0x16>
 8009db6:	f06f 0001 	mvn.w	r0, #1
 8009dba:	e7f8      	b.n	8009dae <__ascii_mbtowc+0x16>

08009dbc <__malloc_lock>:
 8009dbc:	4801      	ldr	r0, [pc, #4]	@ (8009dc4 <__malloc_lock+0x8>)
 8009dbe:	f7fe bd48 	b.w	8008852 <__retarget_lock_acquire_recursive>
 8009dc2:	bf00      	nop
 8009dc4:	20001304 	.word	0x20001304

08009dc8 <__malloc_unlock>:
 8009dc8:	4801      	ldr	r0, [pc, #4]	@ (8009dd0 <__malloc_unlock+0x8>)
 8009dca:	f7fe bd43 	b.w	8008854 <__retarget_lock_release_recursive>
 8009dce:	bf00      	nop
 8009dd0:	20001304 	.word	0x20001304

08009dd4 <_Balloc>:
 8009dd4:	b570      	push	{r4, r5, r6, lr}
 8009dd6:	69c6      	ldr	r6, [r0, #28]
 8009dd8:	4604      	mov	r4, r0
 8009dda:	460d      	mov	r5, r1
 8009ddc:	b976      	cbnz	r6, 8009dfc <_Balloc+0x28>
 8009dde:	2010      	movs	r0, #16
 8009de0:	f7ff ff30 	bl	8009c44 <malloc>
 8009de4:	4602      	mov	r2, r0
 8009de6:	61e0      	str	r0, [r4, #28]
 8009de8:	b920      	cbnz	r0, 8009df4 <_Balloc+0x20>
 8009dea:	216b      	movs	r1, #107	@ 0x6b
 8009dec:	4b17      	ldr	r3, [pc, #92]	@ (8009e4c <_Balloc+0x78>)
 8009dee:	4818      	ldr	r0, [pc, #96]	@ (8009e50 <_Balloc+0x7c>)
 8009df0:	f000 ff66 	bl	800acc0 <__assert_func>
 8009df4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009df8:	6006      	str	r6, [r0, #0]
 8009dfa:	60c6      	str	r6, [r0, #12]
 8009dfc:	69e6      	ldr	r6, [r4, #28]
 8009dfe:	68f3      	ldr	r3, [r6, #12]
 8009e00:	b183      	cbz	r3, 8009e24 <_Balloc+0x50>
 8009e02:	69e3      	ldr	r3, [r4, #28]
 8009e04:	68db      	ldr	r3, [r3, #12]
 8009e06:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8009e0a:	b9b8      	cbnz	r0, 8009e3c <_Balloc+0x68>
 8009e0c:	2101      	movs	r1, #1
 8009e0e:	fa01 f605 	lsl.w	r6, r1, r5
 8009e12:	1d72      	adds	r2, r6, #5
 8009e14:	4620      	mov	r0, r4
 8009e16:	0092      	lsls	r2, r2, #2
 8009e18:	f000 ff70 	bl	800acfc <_calloc_r>
 8009e1c:	b160      	cbz	r0, 8009e38 <_Balloc+0x64>
 8009e1e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8009e22:	e00e      	b.n	8009e42 <_Balloc+0x6e>
 8009e24:	2221      	movs	r2, #33	@ 0x21
 8009e26:	2104      	movs	r1, #4
 8009e28:	4620      	mov	r0, r4
 8009e2a:	f000 ff67 	bl	800acfc <_calloc_r>
 8009e2e:	69e3      	ldr	r3, [r4, #28]
 8009e30:	60f0      	str	r0, [r6, #12]
 8009e32:	68db      	ldr	r3, [r3, #12]
 8009e34:	2b00      	cmp	r3, #0
 8009e36:	d1e4      	bne.n	8009e02 <_Balloc+0x2e>
 8009e38:	2000      	movs	r0, #0
 8009e3a:	bd70      	pop	{r4, r5, r6, pc}
 8009e3c:	6802      	ldr	r2, [r0, #0]
 8009e3e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8009e42:	2300      	movs	r3, #0
 8009e44:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8009e48:	e7f7      	b.n	8009e3a <_Balloc+0x66>
 8009e4a:	bf00      	nop
 8009e4c:	0800b5b1 	.word	0x0800b5b1
 8009e50:	0800b691 	.word	0x0800b691

08009e54 <_Bfree>:
 8009e54:	b570      	push	{r4, r5, r6, lr}
 8009e56:	69c6      	ldr	r6, [r0, #28]
 8009e58:	4605      	mov	r5, r0
 8009e5a:	460c      	mov	r4, r1
 8009e5c:	b976      	cbnz	r6, 8009e7c <_Bfree+0x28>
 8009e5e:	2010      	movs	r0, #16
 8009e60:	f7ff fef0 	bl	8009c44 <malloc>
 8009e64:	4602      	mov	r2, r0
 8009e66:	61e8      	str	r0, [r5, #28]
 8009e68:	b920      	cbnz	r0, 8009e74 <_Bfree+0x20>
 8009e6a:	218f      	movs	r1, #143	@ 0x8f
 8009e6c:	4b08      	ldr	r3, [pc, #32]	@ (8009e90 <_Bfree+0x3c>)
 8009e6e:	4809      	ldr	r0, [pc, #36]	@ (8009e94 <_Bfree+0x40>)
 8009e70:	f000 ff26 	bl	800acc0 <__assert_func>
 8009e74:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009e78:	6006      	str	r6, [r0, #0]
 8009e7a:	60c6      	str	r6, [r0, #12]
 8009e7c:	b13c      	cbz	r4, 8009e8e <_Bfree+0x3a>
 8009e7e:	69eb      	ldr	r3, [r5, #28]
 8009e80:	6862      	ldr	r2, [r4, #4]
 8009e82:	68db      	ldr	r3, [r3, #12]
 8009e84:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8009e88:	6021      	str	r1, [r4, #0]
 8009e8a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8009e8e:	bd70      	pop	{r4, r5, r6, pc}
 8009e90:	0800b5b1 	.word	0x0800b5b1
 8009e94:	0800b691 	.word	0x0800b691

08009e98 <__multadd>:
 8009e98:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009e9c:	4607      	mov	r7, r0
 8009e9e:	460c      	mov	r4, r1
 8009ea0:	461e      	mov	r6, r3
 8009ea2:	2000      	movs	r0, #0
 8009ea4:	690d      	ldr	r5, [r1, #16]
 8009ea6:	f101 0c14 	add.w	ip, r1, #20
 8009eaa:	f8dc 3000 	ldr.w	r3, [ip]
 8009eae:	3001      	adds	r0, #1
 8009eb0:	b299      	uxth	r1, r3
 8009eb2:	fb02 6101 	mla	r1, r2, r1, r6
 8009eb6:	0c1e      	lsrs	r6, r3, #16
 8009eb8:	0c0b      	lsrs	r3, r1, #16
 8009eba:	fb02 3306 	mla	r3, r2, r6, r3
 8009ebe:	b289      	uxth	r1, r1
 8009ec0:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8009ec4:	4285      	cmp	r5, r0
 8009ec6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8009eca:	f84c 1b04 	str.w	r1, [ip], #4
 8009ece:	dcec      	bgt.n	8009eaa <__multadd+0x12>
 8009ed0:	b30e      	cbz	r6, 8009f16 <__multadd+0x7e>
 8009ed2:	68a3      	ldr	r3, [r4, #8]
 8009ed4:	42ab      	cmp	r3, r5
 8009ed6:	dc19      	bgt.n	8009f0c <__multadd+0x74>
 8009ed8:	6861      	ldr	r1, [r4, #4]
 8009eda:	4638      	mov	r0, r7
 8009edc:	3101      	adds	r1, #1
 8009ede:	f7ff ff79 	bl	8009dd4 <_Balloc>
 8009ee2:	4680      	mov	r8, r0
 8009ee4:	b928      	cbnz	r0, 8009ef2 <__multadd+0x5a>
 8009ee6:	4602      	mov	r2, r0
 8009ee8:	21ba      	movs	r1, #186	@ 0xba
 8009eea:	4b0c      	ldr	r3, [pc, #48]	@ (8009f1c <__multadd+0x84>)
 8009eec:	480c      	ldr	r0, [pc, #48]	@ (8009f20 <__multadd+0x88>)
 8009eee:	f000 fee7 	bl	800acc0 <__assert_func>
 8009ef2:	6922      	ldr	r2, [r4, #16]
 8009ef4:	f104 010c 	add.w	r1, r4, #12
 8009ef8:	3202      	adds	r2, #2
 8009efa:	0092      	lsls	r2, r2, #2
 8009efc:	300c      	adds	r0, #12
 8009efe:	f7fe fcb8 	bl	8008872 <memcpy>
 8009f02:	4621      	mov	r1, r4
 8009f04:	4638      	mov	r0, r7
 8009f06:	f7ff ffa5 	bl	8009e54 <_Bfree>
 8009f0a:	4644      	mov	r4, r8
 8009f0c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8009f10:	3501      	adds	r5, #1
 8009f12:	615e      	str	r6, [r3, #20]
 8009f14:	6125      	str	r5, [r4, #16]
 8009f16:	4620      	mov	r0, r4
 8009f18:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009f1c:	0800b620 	.word	0x0800b620
 8009f20:	0800b691 	.word	0x0800b691

08009f24 <__s2b>:
 8009f24:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009f28:	4615      	mov	r5, r2
 8009f2a:	2209      	movs	r2, #9
 8009f2c:	461f      	mov	r7, r3
 8009f2e:	3308      	adds	r3, #8
 8009f30:	460c      	mov	r4, r1
 8009f32:	fb93 f3f2 	sdiv	r3, r3, r2
 8009f36:	4606      	mov	r6, r0
 8009f38:	2201      	movs	r2, #1
 8009f3a:	2100      	movs	r1, #0
 8009f3c:	429a      	cmp	r2, r3
 8009f3e:	db09      	blt.n	8009f54 <__s2b+0x30>
 8009f40:	4630      	mov	r0, r6
 8009f42:	f7ff ff47 	bl	8009dd4 <_Balloc>
 8009f46:	b940      	cbnz	r0, 8009f5a <__s2b+0x36>
 8009f48:	4602      	mov	r2, r0
 8009f4a:	21d3      	movs	r1, #211	@ 0xd3
 8009f4c:	4b18      	ldr	r3, [pc, #96]	@ (8009fb0 <__s2b+0x8c>)
 8009f4e:	4819      	ldr	r0, [pc, #100]	@ (8009fb4 <__s2b+0x90>)
 8009f50:	f000 feb6 	bl	800acc0 <__assert_func>
 8009f54:	0052      	lsls	r2, r2, #1
 8009f56:	3101      	adds	r1, #1
 8009f58:	e7f0      	b.n	8009f3c <__s2b+0x18>
 8009f5a:	9b08      	ldr	r3, [sp, #32]
 8009f5c:	2d09      	cmp	r5, #9
 8009f5e:	6143      	str	r3, [r0, #20]
 8009f60:	f04f 0301 	mov.w	r3, #1
 8009f64:	6103      	str	r3, [r0, #16]
 8009f66:	dd16      	ble.n	8009f96 <__s2b+0x72>
 8009f68:	f104 0909 	add.w	r9, r4, #9
 8009f6c:	46c8      	mov	r8, r9
 8009f6e:	442c      	add	r4, r5
 8009f70:	f818 3b01 	ldrb.w	r3, [r8], #1
 8009f74:	4601      	mov	r1, r0
 8009f76:	220a      	movs	r2, #10
 8009f78:	4630      	mov	r0, r6
 8009f7a:	3b30      	subs	r3, #48	@ 0x30
 8009f7c:	f7ff ff8c 	bl	8009e98 <__multadd>
 8009f80:	45a0      	cmp	r8, r4
 8009f82:	d1f5      	bne.n	8009f70 <__s2b+0x4c>
 8009f84:	f1a5 0408 	sub.w	r4, r5, #8
 8009f88:	444c      	add	r4, r9
 8009f8a:	1b2d      	subs	r5, r5, r4
 8009f8c:	1963      	adds	r3, r4, r5
 8009f8e:	42bb      	cmp	r3, r7
 8009f90:	db04      	blt.n	8009f9c <__s2b+0x78>
 8009f92:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009f96:	2509      	movs	r5, #9
 8009f98:	340a      	adds	r4, #10
 8009f9a:	e7f6      	b.n	8009f8a <__s2b+0x66>
 8009f9c:	f814 3b01 	ldrb.w	r3, [r4], #1
 8009fa0:	4601      	mov	r1, r0
 8009fa2:	220a      	movs	r2, #10
 8009fa4:	4630      	mov	r0, r6
 8009fa6:	3b30      	subs	r3, #48	@ 0x30
 8009fa8:	f7ff ff76 	bl	8009e98 <__multadd>
 8009fac:	e7ee      	b.n	8009f8c <__s2b+0x68>
 8009fae:	bf00      	nop
 8009fb0:	0800b620 	.word	0x0800b620
 8009fb4:	0800b691 	.word	0x0800b691

08009fb8 <__hi0bits>:
 8009fb8:	4603      	mov	r3, r0
 8009fba:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8009fbe:	bf3a      	itte	cc
 8009fc0:	0403      	lslcc	r3, r0, #16
 8009fc2:	2010      	movcc	r0, #16
 8009fc4:	2000      	movcs	r0, #0
 8009fc6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8009fca:	bf3c      	itt	cc
 8009fcc:	021b      	lslcc	r3, r3, #8
 8009fce:	3008      	addcc	r0, #8
 8009fd0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009fd4:	bf3c      	itt	cc
 8009fd6:	011b      	lslcc	r3, r3, #4
 8009fd8:	3004      	addcc	r0, #4
 8009fda:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009fde:	bf3c      	itt	cc
 8009fe0:	009b      	lslcc	r3, r3, #2
 8009fe2:	3002      	addcc	r0, #2
 8009fe4:	2b00      	cmp	r3, #0
 8009fe6:	db05      	blt.n	8009ff4 <__hi0bits+0x3c>
 8009fe8:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8009fec:	f100 0001 	add.w	r0, r0, #1
 8009ff0:	bf08      	it	eq
 8009ff2:	2020      	moveq	r0, #32
 8009ff4:	4770      	bx	lr

08009ff6 <__lo0bits>:
 8009ff6:	6803      	ldr	r3, [r0, #0]
 8009ff8:	4602      	mov	r2, r0
 8009ffa:	f013 0007 	ands.w	r0, r3, #7
 8009ffe:	d00b      	beq.n	800a018 <__lo0bits+0x22>
 800a000:	07d9      	lsls	r1, r3, #31
 800a002:	d421      	bmi.n	800a048 <__lo0bits+0x52>
 800a004:	0798      	lsls	r0, r3, #30
 800a006:	bf49      	itett	mi
 800a008:	085b      	lsrmi	r3, r3, #1
 800a00a:	089b      	lsrpl	r3, r3, #2
 800a00c:	2001      	movmi	r0, #1
 800a00e:	6013      	strmi	r3, [r2, #0]
 800a010:	bf5c      	itt	pl
 800a012:	2002      	movpl	r0, #2
 800a014:	6013      	strpl	r3, [r2, #0]
 800a016:	4770      	bx	lr
 800a018:	b299      	uxth	r1, r3
 800a01a:	b909      	cbnz	r1, 800a020 <__lo0bits+0x2a>
 800a01c:	2010      	movs	r0, #16
 800a01e:	0c1b      	lsrs	r3, r3, #16
 800a020:	b2d9      	uxtb	r1, r3
 800a022:	b909      	cbnz	r1, 800a028 <__lo0bits+0x32>
 800a024:	3008      	adds	r0, #8
 800a026:	0a1b      	lsrs	r3, r3, #8
 800a028:	0719      	lsls	r1, r3, #28
 800a02a:	bf04      	itt	eq
 800a02c:	091b      	lsreq	r3, r3, #4
 800a02e:	3004      	addeq	r0, #4
 800a030:	0799      	lsls	r1, r3, #30
 800a032:	bf04      	itt	eq
 800a034:	089b      	lsreq	r3, r3, #2
 800a036:	3002      	addeq	r0, #2
 800a038:	07d9      	lsls	r1, r3, #31
 800a03a:	d403      	bmi.n	800a044 <__lo0bits+0x4e>
 800a03c:	085b      	lsrs	r3, r3, #1
 800a03e:	f100 0001 	add.w	r0, r0, #1
 800a042:	d003      	beq.n	800a04c <__lo0bits+0x56>
 800a044:	6013      	str	r3, [r2, #0]
 800a046:	4770      	bx	lr
 800a048:	2000      	movs	r0, #0
 800a04a:	4770      	bx	lr
 800a04c:	2020      	movs	r0, #32
 800a04e:	4770      	bx	lr

0800a050 <__i2b>:
 800a050:	b510      	push	{r4, lr}
 800a052:	460c      	mov	r4, r1
 800a054:	2101      	movs	r1, #1
 800a056:	f7ff febd 	bl	8009dd4 <_Balloc>
 800a05a:	4602      	mov	r2, r0
 800a05c:	b928      	cbnz	r0, 800a06a <__i2b+0x1a>
 800a05e:	f240 1145 	movw	r1, #325	@ 0x145
 800a062:	4b04      	ldr	r3, [pc, #16]	@ (800a074 <__i2b+0x24>)
 800a064:	4804      	ldr	r0, [pc, #16]	@ (800a078 <__i2b+0x28>)
 800a066:	f000 fe2b 	bl	800acc0 <__assert_func>
 800a06a:	2301      	movs	r3, #1
 800a06c:	6144      	str	r4, [r0, #20]
 800a06e:	6103      	str	r3, [r0, #16]
 800a070:	bd10      	pop	{r4, pc}
 800a072:	bf00      	nop
 800a074:	0800b620 	.word	0x0800b620
 800a078:	0800b691 	.word	0x0800b691

0800a07c <__multiply>:
 800a07c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a080:	4614      	mov	r4, r2
 800a082:	690a      	ldr	r2, [r1, #16]
 800a084:	6923      	ldr	r3, [r4, #16]
 800a086:	460f      	mov	r7, r1
 800a088:	429a      	cmp	r2, r3
 800a08a:	bfa2      	ittt	ge
 800a08c:	4623      	movge	r3, r4
 800a08e:	460c      	movge	r4, r1
 800a090:	461f      	movge	r7, r3
 800a092:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800a096:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800a09a:	68a3      	ldr	r3, [r4, #8]
 800a09c:	6861      	ldr	r1, [r4, #4]
 800a09e:	eb0a 0609 	add.w	r6, sl, r9
 800a0a2:	42b3      	cmp	r3, r6
 800a0a4:	b085      	sub	sp, #20
 800a0a6:	bfb8      	it	lt
 800a0a8:	3101      	addlt	r1, #1
 800a0aa:	f7ff fe93 	bl	8009dd4 <_Balloc>
 800a0ae:	b930      	cbnz	r0, 800a0be <__multiply+0x42>
 800a0b0:	4602      	mov	r2, r0
 800a0b2:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800a0b6:	4b43      	ldr	r3, [pc, #268]	@ (800a1c4 <__multiply+0x148>)
 800a0b8:	4843      	ldr	r0, [pc, #268]	@ (800a1c8 <__multiply+0x14c>)
 800a0ba:	f000 fe01 	bl	800acc0 <__assert_func>
 800a0be:	f100 0514 	add.w	r5, r0, #20
 800a0c2:	462b      	mov	r3, r5
 800a0c4:	2200      	movs	r2, #0
 800a0c6:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800a0ca:	4543      	cmp	r3, r8
 800a0cc:	d321      	bcc.n	800a112 <__multiply+0x96>
 800a0ce:	f107 0114 	add.w	r1, r7, #20
 800a0d2:	f104 0214 	add.w	r2, r4, #20
 800a0d6:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800a0da:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800a0de:	9302      	str	r3, [sp, #8]
 800a0e0:	1b13      	subs	r3, r2, r4
 800a0e2:	3b15      	subs	r3, #21
 800a0e4:	f023 0303 	bic.w	r3, r3, #3
 800a0e8:	3304      	adds	r3, #4
 800a0ea:	f104 0715 	add.w	r7, r4, #21
 800a0ee:	42ba      	cmp	r2, r7
 800a0f0:	bf38      	it	cc
 800a0f2:	2304      	movcc	r3, #4
 800a0f4:	9301      	str	r3, [sp, #4]
 800a0f6:	9b02      	ldr	r3, [sp, #8]
 800a0f8:	9103      	str	r1, [sp, #12]
 800a0fa:	428b      	cmp	r3, r1
 800a0fc:	d80c      	bhi.n	800a118 <__multiply+0x9c>
 800a0fe:	2e00      	cmp	r6, #0
 800a100:	dd03      	ble.n	800a10a <__multiply+0x8e>
 800a102:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800a106:	2b00      	cmp	r3, #0
 800a108:	d05a      	beq.n	800a1c0 <__multiply+0x144>
 800a10a:	6106      	str	r6, [r0, #16]
 800a10c:	b005      	add	sp, #20
 800a10e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a112:	f843 2b04 	str.w	r2, [r3], #4
 800a116:	e7d8      	b.n	800a0ca <__multiply+0x4e>
 800a118:	f8b1 a000 	ldrh.w	sl, [r1]
 800a11c:	f1ba 0f00 	cmp.w	sl, #0
 800a120:	d023      	beq.n	800a16a <__multiply+0xee>
 800a122:	46a9      	mov	r9, r5
 800a124:	f04f 0c00 	mov.w	ip, #0
 800a128:	f104 0e14 	add.w	lr, r4, #20
 800a12c:	f85e 7b04 	ldr.w	r7, [lr], #4
 800a130:	f8d9 3000 	ldr.w	r3, [r9]
 800a134:	fa1f fb87 	uxth.w	fp, r7
 800a138:	b29b      	uxth	r3, r3
 800a13a:	fb0a 330b 	mla	r3, sl, fp, r3
 800a13e:	4463      	add	r3, ip
 800a140:	f8d9 c000 	ldr.w	ip, [r9]
 800a144:	0c3f      	lsrs	r7, r7, #16
 800a146:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 800a14a:	fb0a c707 	mla	r7, sl, r7, ip
 800a14e:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800a152:	b29b      	uxth	r3, r3
 800a154:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800a158:	4572      	cmp	r2, lr
 800a15a:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800a15e:	f849 3b04 	str.w	r3, [r9], #4
 800a162:	d8e3      	bhi.n	800a12c <__multiply+0xb0>
 800a164:	9b01      	ldr	r3, [sp, #4]
 800a166:	f845 c003 	str.w	ip, [r5, r3]
 800a16a:	9b03      	ldr	r3, [sp, #12]
 800a16c:	3104      	adds	r1, #4
 800a16e:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800a172:	f1b9 0f00 	cmp.w	r9, #0
 800a176:	d021      	beq.n	800a1bc <__multiply+0x140>
 800a178:	46ae      	mov	lr, r5
 800a17a:	f04f 0a00 	mov.w	sl, #0
 800a17e:	682b      	ldr	r3, [r5, #0]
 800a180:	f104 0c14 	add.w	ip, r4, #20
 800a184:	f8bc b000 	ldrh.w	fp, [ip]
 800a188:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800a18c:	b29b      	uxth	r3, r3
 800a18e:	fb09 770b 	mla	r7, r9, fp, r7
 800a192:	4457      	add	r7, sl
 800a194:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800a198:	f84e 3b04 	str.w	r3, [lr], #4
 800a19c:	f85c 3b04 	ldr.w	r3, [ip], #4
 800a1a0:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800a1a4:	f8be 3000 	ldrh.w	r3, [lr]
 800a1a8:	4562      	cmp	r2, ip
 800a1aa:	fb09 330a 	mla	r3, r9, sl, r3
 800a1ae:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800a1b2:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800a1b6:	d8e5      	bhi.n	800a184 <__multiply+0x108>
 800a1b8:	9f01      	ldr	r7, [sp, #4]
 800a1ba:	51eb      	str	r3, [r5, r7]
 800a1bc:	3504      	adds	r5, #4
 800a1be:	e79a      	b.n	800a0f6 <__multiply+0x7a>
 800a1c0:	3e01      	subs	r6, #1
 800a1c2:	e79c      	b.n	800a0fe <__multiply+0x82>
 800a1c4:	0800b620 	.word	0x0800b620
 800a1c8:	0800b691 	.word	0x0800b691

0800a1cc <__pow5mult>:
 800a1cc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a1d0:	4615      	mov	r5, r2
 800a1d2:	f012 0203 	ands.w	r2, r2, #3
 800a1d6:	4607      	mov	r7, r0
 800a1d8:	460e      	mov	r6, r1
 800a1da:	d007      	beq.n	800a1ec <__pow5mult+0x20>
 800a1dc:	4c25      	ldr	r4, [pc, #148]	@ (800a274 <__pow5mult+0xa8>)
 800a1de:	3a01      	subs	r2, #1
 800a1e0:	2300      	movs	r3, #0
 800a1e2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800a1e6:	f7ff fe57 	bl	8009e98 <__multadd>
 800a1ea:	4606      	mov	r6, r0
 800a1ec:	10ad      	asrs	r5, r5, #2
 800a1ee:	d03d      	beq.n	800a26c <__pow5mult+0xa0>
 800a1f0:	69fc      	ldr	r4, [r7, #28]
 800a1f2:	b97c      	cbnz	r4, 800a214 <__pow5mult+0x48>
 800a1f4:	2010      	movs	r0, #16
 800a1f6:	f7ff fd25 	bl	8009c44 <malloc>
 800a1fa:	4602      	mov	r2, r0
 800a1fc:	61f8      	str	r0, [r7, #28]
 800a1fe:	b928      	cbnz	r0, 800a20c <__pow5mult+0x40>
 800a200:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800a204:	4b1c      	ldr	r3, [pc, #112]	@ (800a278 <__pow5mult+0xac>)
 800a206:	481d      	ldr	r0, [pc, #116]	@ (800a27c <__pow5mult+0xb0>)
 800a208:	f000 fd5a 	bl	800acc0 <__assert_func>
 800a20c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800a210:	6004      	str	r4, [r0, #0]
 800a212:	60c4      	str	r4, [r0, #12]
 800a214:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800a218:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800a21c:	b94c      	cbnz	r4, 800a232 <__pow5mult+0x66>
 800a21e:	f240 2171 	movw	r1, #625	@ 0x271
 800a222:	4638      	mov	r0, r7
 800a224:	f7ff ff14 	bl	800a050 <__i2b>
 800a228:	2300      	movs	r3, #0
 800a22a:	4604      	mov	r4, r0
 800a22c:	f8c8 0008 	str.w	r0, [r8, #8]
 800a230:	6003      	str	r3, [r0, #0]
 800a232:	f04f 0900 	mov.w	r9, #0
 800a236:	07eb      	lsls	r3, r5, #31
 800a238:	d50a      	bpl.n	800a250 <__pow5mult+0x84>
 800a23a:	4631      	mov	r1, r6
 800a23c:	4622      	mov	r2, r4
 800a23e:	4638      	mov	r0, r7
 800a240:	f7ff ff1c 	bl	800a07c <__multiply>
 800a244:	4680      	mov	r8, r0
 800a246:	4631      	mov	r1, r6
 800a248:	4638      	mov	r0, r7
 800a24a:	f7ff fe03 	bl	8009e54 <_Bfree>
 800a24e:	4646      	mov	r6, r8
 800a250:	106d      	asrs	r5, r5, #1
 800a252:	d00b      	beq.n	800a26c <__pow5mult+0xa0>
 800a254:	6820      	ldr	r0, [r4, #0]
 800a256:	b938      	cbnz	r0, 800a268 <__pow5mult+0x9c>
 800a258:	4622      	mov	r2, r4
 800a25a:	4621      	mov	r1, r4
 800a25c:	4638      	mov	r0, r7
 800a25e:	f7ff ff0d 	bl	800a07c <__multiply>
 800a262:	6020      	str	r0, [r4, #0]
 800a264:	f8c0 9000 	str.w	r9, [r0]
 800a268:	4604      	mov	r4, r0
 800a26a:	e7e4      	b.n	800a236 <__pow5mult+0x6a>
 800a26c:	4630      	mov	r0, r6
 800a26e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a272:	bf00      	nop
 800a274:	0800b6ec 	.word	0x0800b6ec
 800a278:	0800b5b1 	.word	0x0800b5b1
 800a27c:	0800b691 	.word	0x0800b691

0800a280 <__lshift>:
 800a280:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a284:	460c      	mov	r4, r1
 800a286:	4607      	mov	r7, r0
 800a288:	4691      	mov	r9, r2
 800a28a:	6923      	ldr	r3, [r4, #16]
 800a28c:	6849      	ldr	r1, [r1, #4]
 800a28e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800a292:	68a3      	ldr	r3, [r4, #8]
 800a294:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800a298:	f108 0601 	add.w	r6, r8, #1
 800a29c:	42b3      	cmp	r3, r6
 800a29e:	db0b      	blt.n	800a2b8 <__lshift+0x38>
 800a2a0:	4638      	mov	r0, r7
 800a2a2:	f7ff fd97 	bl	8009dd4 <_Balloc>
 800a2a6:	4605      	mov	r5, r0
 800a2a8:	b948      	cbnz	r0, 800a2be <__lshift+0x3e>
 800a2aa:	4602      	mov	r2, r0
 800a2ac:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800a2b0:	4b27      	ldr	r3, [pc, #156]	@ (800a350 <__lshift+0xd0>)
 800a2b2:	4828      	ldr	r0, [pc, #160]	@ (800a354 <__lshift+0xd4>)
 800a2b4:	f000 fd04 	bl	800acc0 <__assert_func>
 800a2b8:	3101      	adds	r1, #1
 800a2ba:	005b      	lsls	r3, r3, #1
 800a2bc:	e7ee      	b.n	800a29c <__lshift+0x1c>
 800a2be:	2300      	movs	r3, #0
 800a2c0:	f100 0114 	add.w	r1, r0, #20
 800a2c4:	f100 0210 	add.w	r2, r0, #16
 800a2c8:	4618      	mov	r0, r3
 800a2ca:	4553      	cmp	r3, sl
 800a2cc:	db33      	blt.n	800a336 <__lshift+0xb6>
 800a2ce:	6920      	ldr	r0, [r4, #16]
 800a2d0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800a2d4:	f104 0314 	add.w	r3, r4, #20
 800a2d8:	f019 091f 	ands.w	r9, r9, #31
 800a2dc:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800a2e0:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800a2e4:	d02b      	beq.n	800a33e <__lshift+0xbe>
 800a2e6:	468a      	mov	sl, r1
 800a2e8:	2200      	movs	r2, #0
 800a2ea:	f1c9 0e20 	rsb	lr, r9, #32
 800a2ee:	6818      	ldr	r0, [r3, #0]
 800a2f0:	fa00 f009 	lsl.w	r0, r0, r9
 800a2f4:	4310      	orrs	r0, r2
 800a2f6:	f84a 0b04 	str.w	r0, [sl], #4
 800a2fa:	f853 2b04 	ldr.w	r2, [r3], #4
 800a2fe:	459c      	cmp	ip, r3
 800a300:	fa22 f20e 	lsr.w	r2, r2, lr
 800a304:	d8f3      	bhi.n	800a2ee <__lshift+0x6e>
 800a306:	ebac 0304 	sub.w	r3, ip, r4
 800a30a:	3b15      	subs	r3, #21
 800a30c:	f023 0303 	bic.w	r3, r3, #3
 800a310:	3304      	adds	r3, #4
 800a312:	f104 0015 	add.w	r0, r4, #21
 800a316:	4584      	cmp	ip, r0
 800a318:	bf38      	it	cc
 800a31a:	2304      	movcc	r3, #4
 800a31c:	50ca      	str	r2, [r1, r3]
 800a31e:	b10a      	cbz	r2, 800a324 <__lshift+0xa4>
 800a320:	f108 0602 	add.w	r6, r8, #2
 800a324:	3e01      	subs	r6, #1
 800a326:	4638      	mov	r0, r7
 800a328:	4621      	mov	r1, r4
 800a32a:	612e      	str	r6, [r5, #16]
 800a32c:	f7ff fd92 	bl	8009e54 <_Bfree>
 800a330:	4628      	mov	r0, r5
 800a332:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a336:	f842 0f04 	str.w	r0, [r2, #4]!
 800a33a:	3301      	adds	r3, #1
 800a33c:	e7c5      	b.n	800a2ca <__lshift+0x4a>
 800a33e:	3904      	subs	r1, #4
 800a340:	f853 2b04 	ldr.w	r2, [r3], #4
 800a344:	459c      	cmp	ip, r3
 800a346:	f841 2f04 	str.w	r2, [r1, #4]!
 800a34a:	d8f9      	bhi.n	800a340 <__lshift+0xc0>
 800a34c:	e7ea      	b.n	800a324 <__lshift+0xa4>
 800a34e:	bf00      	nop
 800a350:	0800b620 	.word	0x0800b620
 800a354:	0800b691 	.word	0x0800b691

0800a358 <__mcmp>:
 800a358:	4603      	mov	r3, r0
 800a35a:	690a      	ldr	r2, [r1, #16]
 800a35c:	6900      	ldr	r0, [r0, #16]
 800a35e:	b530      	push	{r4, r5, lr}
 800a360:	1a80      	subs	r0, r0, r2
 800a362:	d10e      	bne.n	800a382 <__mcmp+0x2a>
 800a364:	3314      	adds	r3, #20
 800a366:	3114      	adds	r1, #20
 800a368:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800a36c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800a370:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800a374:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800a378:	4295      	cmp	r5, r2
 800a37a:	d003      	beq.n	800a384 <__mcmp+0x2c>
 800a37c:	d205      	bcs.n	800a38a <__mcmp+0x32>
 800a37e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800a382:	bd30      	pop	{r4, r5, pc}
 800a384:	42a3      	cmp	r3, r4
 800a386:	d3f3      	bcc.n	800a370 <__mcmp+0x18>
 800a388:	e7fb      	b.n	800a382 <__mcmp+0x2a>
 800a38a:	2001      	movs	r0, #1
 800a38c:	e7f9      	b.n	800a382 <__mcmp+0x2a>
	...

0800a390 <__mdiff>:
 800a390:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a394:	4689      	mov	r9, r1
 800a396:	4606      	mov	r6, r0
 800a398:	4611      	mov	r1, r2
 800a39a:	4648      	mov	r0, r9
 800a39c:	4614      	mov	r4, r2
 800a39e:	f7ff ffdb 	bl	800a358 <__mcmp>
 800a3a2:	1e05      	subs	r5, r0, #0
 800a3a4:	d112      	bne.n	800a3cc <__mdiff+0x3c>
 800a3a6:	4629      	mov	r1, r5
 800a3a8:	4630      	mov	r0, r6
 800a3aa:	f7ff fd13 	bl	8009dd4 <_Balloc>
 800a3ae:	4602      	mov	r2, r0
 800a3b0:	b928      	cbnz	r0, 800a3be <__mdiff+0x2e>
 800a3b2:	f240 2137 	movw	r1, #567	@ 0x237
 800a3b6:	4b3e      	ldr	r3, [pc, #248]	@ (800a4b0 <__mdiff+0x120>)
 800a3b8:	483e      	ldr	r0, [pc, #248]	@ (800a4b4 <__mdiff+0x124>)
 800a3ba:	f000 fc81 	bl	800acc0 <__assert_func>
 800a3be:	2301      	movs	r3, #1
 800a3c0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800a3c4:	4610      	mov	r0, r2
 800a3c6:	b003      	add	sp, #12
 800a3c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a3cc:	bfbc      	itt	lt
 800a3ce:	464b      	movlt	r3, r9
 800a3d0:	46a1      	movlt	r9, r4
 800a3d2:	4630      	mov	r0, r6
 800a3d4:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800a3d8:	bfba      	itte	lt
 800a3da:	461c      	movlt	r4, r3
 800a3dc:	2501      	movlt	r5, #1
 800a3de:	2500      	movge	r5, #0
 800a3e0:	f7ff fcf8 	bl	8009dd4 <_Balloc>
 800a3e4:	4602      	mov	r2, r0
 800a3e6:	b918      	cbnz	r0, 800a3f0 <__mdiff+0x60>
 800a3e8:	f240 2145 	movw	r1, #581	@ 0x245
 800a3ec:	4b30      	ldr	r3, [pc, #192]	@ (800a4b0 <__mdiff+0x120>)
 800a3ee:	e7e3      	b.n	800a3b8 <__mdiff+0x28>
 800a3f0:	f100 0b14 	add.w	fp, r0, #20
 800a3f4:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800a3f8:	f109 0310 	add.w	r3, r9, #16
 800a3fc:	60c5      	str	r5, [r0, #12]
 800a3fe:	f04f 0c00 	mov.w	ip, #0
 800a402:	f109 0514 	add.w	r5, r9, #20
 800a406:	46d9      	mov	r9, fp
 800a408:	6926      	ldr	r6, [r4, #16]
 800a40a:	f104 0e14 	add.w	lr, r4, #20
 800a40e:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800a412:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800a416:	9301      	str	r3, [sp, #4]
 800a418:	9b01      	ldr	r3, [sp, #4]
 800a41a:	f85e 0b04 	ldr.w	r0, [lr], #4
 800a41e:	f853 af04 	ldr.w	sl, [r3, #4]!
 800a422:	b281      	uxth	r1, r0
 800a424:	9301      	str	r3, [sp, #4]
 800a426:	fa1f f38a 	uxth.w	r3, sl
 800a42a:	1a5b      	subs	r3, r3, r1
 800a42c:	0c00      	lsrs	r0, r0, #16
 800a42e:	4463      	add	r3, ip
 800a430:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800a434:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800a438:	b29b      	uxth	r3, r3
 800a43a:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800a43e:	4576      	cmp	r6, lr
 800a440:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800a444:	f849 3b04 	str.w	r3, [r9], #4
 800a448:	d8e6      	bhi.n	800a418 <__mdiff+0x88>
 800a44a:	1b33      	subs	r3, r6, r4
 800a44c:	3b15      	subs	r3, #21
 800a44e:	f023 0303 	bic.w	r3, r3, #3
 800a452:	3415      	adds	r4, #21
 800a454:	3304      	adds	r3, #4
 800a456:	42a6      	cmp	r6, r4
 800a458:	bf38      	it	cc
 800a45a:	2304      	movcc	r3, #4
 800a45c:	441d      	add	r5, r3
 800a45e:	445b      	add	r3, fp
 800a460:	461e      	mov	r6, r3
 800a462:	462c      	mov	r4, r5
 800a464:	4544      	cmp	r4, r8
 800a466:	d30e      	bcc.n	800a486 <__mdiff+0xf6>
 800a468:	f108 0103 	add.w	r1, r8, #3
 800a46c:	1b49      	subs	r1, r1, r5
 800a46e:	f021 0103 	bic.w	r1, r1, #3
 800a472:	3d03      	subs	r5, #3
 800a474:	45a8      	cmp	r8, r5
 800a476:	bf38      	it	cc
 800a478:	2100      	movcc	r1, #0
 800a47a:	440b      	add	r3, r1
 800a47c:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800a480:	b199      	cbz	r1, 800a4aa <__mdiff+0x11a>
 800a482:	6117      	str	r7, [r2, #16]
 800a484:	e79e      	b.n	800a3c4 <__mdiff+0x34>
 800a486:	46e6      	mov	lr, ip
 800a488:	f854 1b04 	ldr.w	r1, [r4], #4
 800a48c:	fa1f fc81 	uxth.w	ip, r1
 800a490:	44f4      	add	ip, lr
 800a492:	0c08      	lsrs	r0, r1, #16
 800a494:	4471      	add	r1, lr
 800a496:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800a49a:	b289      	uxth	r1, r1
 800a49c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800a4a0:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800a4a4:	f846 1b04 	str.w	r1, [r6], #4
 800a4a8:	e7dc      	b.n	800a464 <__mdiff+0xd4>
 800a4aa:	3f01      	subs	r7, #1
 800a4ac:	e7e6      	b.n	800a47c <__mdiff+0xec>
 800a4ae:	bf00      	nop
 800a4b0:	0800b620 	.word	0x0800b620
 800a4b4:	0800b691 	.word	0x0800b691

0800a4b8 <__ulp>:
 800a4b8:	4b0e      	ldr	r3, [pc, #56]	@ (800a4f4 <__ulp+0x3c>)
 800a4ba:	400b      	ands	r3, r1
 800a4bc:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 800a4c0:	2b00      	cmp	r3, #0
 800a4c2:	dc08      	bgt.n	800a4d6 <__ulp+0x1e>
 800a4c4:	425b      	negs	r3, r3
 800a4c6:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800a4ca:	ea4f 5223 	mov.w	r2, r3, asr #20
 800a4ce:	da04      	bge.n	800a4da <__ulp+0x22>
 800a4d0:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800a4d4:	4113      	asrs	r3, r2
 800a4d6:	2200      	movs	r2, #0
 800a4d8:	e008      	b.n	800a4ec <__ulp+0x34>
 800a4da:	f1a2 0314 	sub.w	r3, r2, #20
 800a4de:	2b1e      	cmp	r3, #30
 800a4e0:	bfd6      	itet	le
 800a4e2:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 800a4e6:	2201      	movgt	r2, #1
 800a4e8:	40da      	lsrle	r2, r3
 800a4ea:	2300      	movs	r3, #0
 800a4ec:	4619      	mov	r1, r3
 800a4ee:	4610      	mov	r0, r2
 800a4f0:	4770      	bx	lr
 800a4f2:	bf00      	nop
 800a4f4:	7ff00000 	.word	0x7ff00000

0800a4f8 <__b2d>:
 800a4f8:	6902      	ldr	r2, [r0, #16]
 800a4fa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a4fc:	f100 0614 	add.w	r6, r0, #20
 800a500:	eb06 0282 	add.w	r2, r6, r2, lsl #2
 800a504:	f852 4c04 	ldr.w	r4, [r2, #-4]
 800a508:	4f1e      	ldr	r7, [pc, #120]	@ (800a584 <__b2d+0x8c>)
 800a50a:	4620      	mov	r0, r4
 800a50c:	f7ff fd54 	bl	8009fb8 <__hi0bits>
 800a510:	4603      	mov	r3, r0
 800a512:	f1c0 0020 	rsb	r0, r0, #32
 800a516:	2b0a      	cmp	r3, #10
 800a518:	f1a2 0504 	sub.w	r5, r2, #4
 800a51c:	6008      	str	r0, [r1, #0]
 800a51e:	dc12      	bgt.n	800a546 <__b2d+0x4e>
 800a520:	42ae      	cmp	r6, r5
 800a522:	bf2c      	ite	cs
 800a524:	2200      	movcs	r2, #0
 800a526:	f852 2c08 	ldrcc.w	r2, [r2, #-8]
 800a52a:	f1c3 0c0b 	rsb	ip, r3, #11
 800a52e:	3315      	adds	r3, #21
 800a530:	fa24 fe0c 	lsr.w	lr, r4, ip
 800a534:	fa04 f303 	lsl.w	r3, r4, r3
 800a538:	fa22 f20c 	lsr.w	r2, r2, ip
 800a53c:	ea4e 0107 	orr.w	r1, lr, r7
 800a540:	431a      	orrs	r2, r3
 800a542:	4610      	mov	r0, r2
 800a544:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a546:	42ae      	cmp	r6, r5
 800a548:	bf36      	itet	cc
 800a54a:	f1a2 0508 	subcc.w	r5, r2, #8
 800a54e:	2200      	movcs	r2, #0
 800a550:	f852 2c08 	ldrcc.w	r2, [r2, #-8]
 800a554:	3b0b      	subs	r3, #11
 800a556:	d012      	beq.n	800a57e <__b2d+0x86>
 800a558:	f1c3 0720 	rsb	r7, r3, #32
 800a55c:	fa22 f107 	lsr.w	r1, r2, r7
 800a560:	409c      	lsls	r4, r3
 800a562:	430c      	orrs	r4, r1
 800a564:	42b5      	cmp	r5, r6
 800a566:	f044 517f 	orr.w	r1, r4, #1069547520	@ 0x3fc00000
 800a56a:	bf94      	ite	ls
 800a56c:	2400      	movls	r4, #0
 800a56e:	f855 4c04 	ldrhi.w	r4, [r5, #-4]
 800a572:	409a      	lsls	r2, r3
 800a574:	40fc      	lsrs	r4, r7
 800a576:	f441 1140 	orr.w	r1, r1, #3145728	@ 0x300000
 800a57a:	4322      	orrs	r2, r4
 800a57c:	e7e1      	b.n	800a542 <__b2d+0x4a>
 800a57e:	ea44 0107 	orr.w	r1, r4, r7
 800a582:	e7de      	b.n	800a542 <__b2d+0x4a>
 800a584:	3ff00000 	.word	0x3ff00000

0800a588 <__d2b>:
 800a588:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
 800a58c:	2101      	movs	r1, #1
 800a58e:	4690      	mov	r8, r2
 800a590:	4699      	mov	r9, r3
 800a592:	9e08      	ldr	r6, [sp, #32]
 800a594:	f7ff fc1e 	bl	8009dd4 <_Balloc>
 800a598:	4604      	mov	r4, r0
 800a59a:	b930      	cbnz	r0, 800a5aa <__d2b+0x22>
 800a59c:	4602      	mov	r2, r0
 800a59e:	f240 310f 	movw	r1, #783	@ 0x30f
 800a5a2:	4b23      	ldr	r3, [pc, #140]	@ (800a630 <__d2b+0xa8>)
 800a5a4:	4823      	ldr	r0, [pc, #140]	@ (800a634 <__d2b+0xac>)
 800a5a6:	f000 fb8b 	bl	800acc0 <__assert_func>
 800a5aa:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800a5ae:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800a5b2:	b10d      	cbz	r5, 800a5b8 <__d2b+0x30>
 800a5b4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800a5b8:	9301      	str	r3, [sp, #4]
 800a5ba:	f1b8 0300 	subs.w	r3, r8, #0
 800a5be:	d024      	beq.n	800a60a <__d2b+0x82>
 800a5c0:	4668      	mov	r0, sp
 800a5c2:	9300      	str	r3, [sp, #0]
 800a5c4:	f7ff fd17 	bl	8009ff6 <__lo0bits>
 800a5c8:	e9dd 1200 	ldrd	r1, r2, [sp]
 800a5cc:	b1d8      	cbz	r0, 800a606 <__d2b+0x7e>
 800a5ce:	f1c0 0320 	rsb	r3, r0, #32
 800a5d2:	fa02 f303 	lsl.w	r3, r2, r3
 800a5d6:	430b      	orrs	r3, r1
 800a5d8:	40c2      	lsrs	r2, r0
 800a5da:	6163      	str	r3, [r4, #20]
 800a5dc:	9201      	str	r2, [sp, #4]
 800a5de:	9b01      	ldr	r3, [sp, #4]
 800a5e0:	2b00      	cmp	r3, #0
 800a5e2:	bf0c      	ite	eq
 800a5e4:	2201      	moveq	r2, #1
 800a5e6:	2202      	movne	r2, #2
 800a5e8:	61a3      	str	r3, [r4, #24]
 800a5ea:	6122      	str	r2, [r4, #16]
 800a5ec:	b1ad      	cbz	r5, 800a61a <__d2b+0x92>
 800a5ee:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800a5f2:	4405      	add	r5, r0
 800a5f4:	6035      	str	r5, [r6, #0]
 800a5f6:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800a5fa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a5fc:	6018      	str	r0, [r3, #0]
 800a5fe:	4620      	mov	r0, r4
 800a600:	b002      	add	sp, #8
 800a602:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 800a606:	6161      	str	r1, [r4, #20]
 800a608:	e7e9      	b.n	800a5de <__d2b+0x56>
 800a60a:	a801      	add	r0, sp, #4
 800a60c:	f7ff fcf3 	bl	8009ff6 <__lo0bits>
 800a610:	9b01      	ldr	r3, [sp, #4]
 800a612:	2201      	movs	r2, #1
 800a614:	6163      	str	r3, [r4, #20]
 800a616:	3020      	adds	r0, #32
 800a618:	e7e7      	b.n	800a5ea <__d2b+0x62>
 800a61a:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800a61e:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800a622:	6030      	str	r0, [r6, #0]
 800a624:	6918      	ldr	r0, [r3, #16]
 800a626:	f7ff fcc7 	bl	8009fb8 <__hi0bits>
 800a62a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800a62e:	e7e4      	b.n	800a5fa <__d2b+0x72>
 800a630:	0800b620 	.word	0x0800b620
 800a634:	0800b691 	.word	0x0800b691

0800a638 <__ratio>:
 800a638:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a63c:	b085      	sub	sp, #20
 800a63e:	e9cd 1000 	strd	r1, r0, [sp]
 800a642:	a902      	add	r1, sp, #8
 800a644:	f7ff ff58 	bl	800a4f8 <__b2d>
 800a648:	468b      	mov	fp, r1
 800a64a:	4606      	mov	r6, r0
 800a64c:	460f      	mov	r7, r1
 800a64e:	9800      	ldr	r0, [sp, #0]
 800a650:	a903      	add	r1, sp, #12
 800a652:	f7ff ff51 	bl	800a4f8 <__b2d>
 800a656:	460d      	mov	r5, r1
 800a658:	9b01      	ldr	r3, [sp, #4]
 800a65a:	4689      	mov	r9, r1
 800a65c:	6919      	ldr	r1, [r3, #16]
 800a65e:	9b00      	ldr	r3, [sp, #0]
 800a660:	4604      	mov	r4, r0
 800a662:	691b      	ldr	r3, [r3, #16]
 800a664:	4630      	mov	r0, r6
 800a666:	1ac9      	subs	r1, r1, r3
 800a668:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800a66c:	1a9b      	subs	r3, r3, r2
 800a66e:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 800a672:	2b00      	cmp	r3, #0
 800a674:	bfcd      	iteet	gt
 800a676:	463a      	movgt	r2, r7
 800a678:	462a      	movle	r2, r5
 800a67a:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800a67e:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
 800a682:	bfd8      	it	le
 800a684:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 800a688:	464b      	mov	r3, r9
 800a68a:	4622      	mov	r2, r4
 800a68c:	4659      	mov	r1, fp
 800a68e:	f7f6 f901 	bl	8000894 <__aeabi_ddiv>
 800a692:	b005      	add	sp, #20
 800a694:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800a698 <__copybits>:
 800a698:	3901      	subs	r1, #1
 800a69a:	b570      	push	{r4, r5, r6, lr}
 800a69c:	1149      	asrs	r1, r1, #5
 800a69e:	6914      	ldr	r4, [r2, #16]
 800a6a0:	3101      	adds	r1, #1
 800a6a2:	f102 0314 	add.w	r3, r2, #20
 800a6a6:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800a6aa:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800a6ae:	1f05      	subs	r5, r0, #4
 800a6b0:	42a3      	cmp	r3, r4
 800a6b2:	d30c      	bcc.n	800a6ce <__copybits+0x36>
 800a6b4:	1aa3      	subs	r3, r4, r2
 800a6b6:	3b11      	subs	r3, #17
 800a6b8:	f023 0303 	bic.w	r3, r3, #3
 800a6bc:	3211      	adds	r2, #17
 800a6be:	42a2      	cmp	r2, r4
 800a6c0:	bf88      	it	hi
 800a6c2:	2300      	movhi	r3, #0
 800a6c4:	4418      	add	r0, r3
 800a6c6:	2300      	movs	r3, #0
 800a6c8:	4288      	cmp	r0, r1
 800a6ca:	d305      	bcc.n	800a6d8 <__copybits+0x40>
 800a6cc:	bd70      	pop	{r4, r5, r6, pc}
 800a6ce:	f853 6b04 	ldr.w	r6, [r3], #4
 800a6d2:	f845 6f04 	str.w	r6, [r5, #4]!
 800a6d6:	e7eb      	b.n	800a6b0 <__copybits+0x18>
 800a6d8:	f840 3b04 	str.w	r3, [r0], #4
 800a6dc:	e7f4      	b.n	800a6c8 <__copybits+0x30>

0800a6de <__any_on>:
 800a6de:	f100 0214 	add.w	r2, r0, #20
 800a6e2:	6900      	ldr	r0, [r0, #16]
 800a6e4:	114b      	asrs	r3, r1, #5
 800a6e6:	4298      	cmp	r0, r3
 800a6e8:	b510      	push	{r4, lr}
 800a6ea:	db11      	blt.n	800a710 <__any_on+0x32>
 800a6ec:	dd0a      	ble.n	800a704 <__any_on+0x26>
 800a6ee:	f011 011f 	ands.w	r1, r1, #31
 800a6f2:	d007      	beq.n	800a704 <__any_on+0x26>
 800a6f4:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800a6f8:	fa24 f001 	lsr.w	r0, r4, r1
 800a6fc:	fa00 f101 	lsl.w	r1, r0, r1
 800a700:	428c      	cmp	r4, r1
 800a702:	d10b      	bne.n	800a71c <__any_on+0x3e>
 800a704:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800a708:	4293      	cmp	r3, r2
 800a70a:	d803      	bhi.n	800a714 <__any_on+0x36>
 800a70c:	2000      	movs	r0, #0
 800a70e:	bd10      	pop	{r4, pc}
 800a710:	4603      	mov	r3, r0
 800a712:	e7f7      	b.n	800a704 <__any_on+0x26>
 800a714:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800a718:	2900      	cmp	r1, #0
 800a71a:	d0f5      	beq.n	800a708 <__any_on+0x2a>
 800a71c:	2001      	movs	r0, #1
 800a71e:	e7f6      	b.n	800a70e <__any_on+0x30>

0800a720 <__ascii_wctomb>:
 800a720:	4603      	mov	r3, r0
 800a722:	4608      	mov	r0, r1
 800a724:	b141      	cbz	r1, 800a738 <__ascii_wctomb+0x18>
 800a726:	2aff      	cmp	r2, #255	@ 0xff
 800a728:	d904      	bls.n	800a734 <__ascii_wctomb+0x14>
 800a72a:	228a      	movs	r2, #138	@ 0x8a
 800a72c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800a730:	601a      	str	r2, [r3, #0]
 800a732:	4770      	bx	lr
 800a734:	2001      	movs	r0, #1
 800a736:	700a      	strb	r2, [r1, #0]
 800a738:	4770      	bx	lr
	...

0800a73c <_strtoll_l.constprop.0>:
 800a73c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a740:	4689      	mov	r9, r1
 800a742:	461e      	mov	r6, r3
 800a744:	460d      	mov	r5, r1
 800a746:	4690      	mov	r8, r2
 800a748:	b085      	sub	sp, #20
 800a74a:	4a42      	ldr	r2, [pc, #264]	@ (800a854 <_strtoll_l.constprop.0+0x118>)
 800a74c:	9002      	str	r0, [sp, #8]
 800a74e:	462b      	mov	r3, r5
 800a750:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a754:	5d17      	ldrb	r7, [r2, r4]
 800a756:	f017 0708 	ands.w	r7, r7, #8
 800a75a:	d1f8      	bne.n	800a74e <_strtoll_l.constprop.0+0x12>
 800a75c:	2c2d      	cmp	r4, #45	@ 0x2d
 800a75e:	d149      	bne.n	800a7f4 <_strtoll_l.constprop.0+0xb8>
 800a760:	2701      	movs	r7, #1
 800a762:	782c      	ldrb	r4, [r5, #0]
 800a764:	1c9d      	adds	r5, r3, #2
 800a766:	f036 0310 	bics.w	r3, r6, #16
 800a76a:	d109      	bne.n	800a780 <_strtoll_l.constprop.0+0x44>
 800a76c:	2c30      	cmp	r4, #48	@ 0x30
 800a76e:	d146      	bne.n	800a7fe <_strtoll_l.constprop.0+0xc2>
 800a770:	782b      	ldrb	r3, [r5, #0]
 800a772:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 800a776:	2b58      	cmp	r3, #88	@ 0x58
 800a778:	d141      	bne.n	800a7fe <_strtoll_l.constprop.0+0xc2>
 800a77a:	2610      	movs	r6, #16
 800a77c:	786c      	ldrb	r4, [r5, #1]
 800a77e:	3502      	adds	r5, #2
 800a780:	f107 4a00 	add.w	sl, r7, #2147483648	@ 0x80000000
 800a784:	f107 3bff 	add.w	fp, r7, #4294967295	@ 0xffffffff
 800a788:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 800a78c:	17f3      	asrs	r3, r6, #31
 800a78e:	4632      	mov	r2, r6
 800a790:	4658      	mov	r0, fp
 800a792:	4651      	mov	r1, sl
 800a794:	9303      	str	r3, [sp, #12]
 800a796:	f7f6 fc45 	bl	8001024 <__aeabi_uldivmod>
 800a79a:	9201      	str	r2, [sp, #4]
 800a79c:	2200      	movs	r2, #0
 800a79e:	468e      	mov	lr, r1
 800a7a0:	4684      	mov	ip, r0
 800a7a2:	4611      	mov	r1, r2
 800a7a4:	4610      	mov	r0, r2
 800a7a6:	f1a4 0330 	sub.w	r3, r4, #48	@ 0x30
 800a7aa:	2b09      	cmp	r3, #9
 800a7ac:	d905      	bls.n	800a7ba <_strtoll_l.constprop.0+0x7e>
 800a7ae:	f1a4 0341 	sub.w	r3, r4, #65	@ 0x41
 800a7b2:	2b19      	cmp	r3, #25
 800a7b4:	d82a      	bhi.n	800a80c <_strtoll_l.constprop.0+0xd0>
 800a7b6:	f1a4 0337 	sub.w	r3, r4, #55	@ 0x37
 800a7ba:	429e      	cmp	r6, r3
 800a7bc:	dd30      	ble.n	800a820 <_strtoll_l.constprop.0+0xe4>
 800a7be:	1c54      	adds	r4, r2, #1
 800a7c0:	d015      	beq.n	800a7ee <_strtoll_l.constprop.0+0xb2>
 800a7c2:	4584      	cmp	ip, r0
 800a7c4:	eb7e 0201 	sbcs.w	r2, lr, r1
 800a7c8:	d327      	bcc.n	800a81a <_strtoll_l.constprop.0+0xde>
 800a7ca:	458e      	cmp	lr, r1
 800a7cc:	bf08      	it	eq
 800a7ce:	4584      	cmpeq	ip, r0
 800a7d0:	d102      	bne.n	800a7d8 <_strtoll_l.constprop.0+0x9c>
 800a7d2:	9a01      	ldr	r2, [sp, #4]
 800a7d4:	429a      	cmp	r2, r3
 800a7d6:	db20      	blt.n	800a81a <_strtoll_l.constprop.0+0xde>
 800a7d8:	4371      	muls	r1, r6
 800a7da:	9a03      	ldr	r2, [sp, #12]
 800a7dc:	fb00 1102 	mla	r1, r0, r2, r1
 800a7e0:	fba6 0200 	umull	r0, r2, r6, r0
 800a7e4:	440a      	add	r2, r1
 800a7e6:	1818      	adds	r0, r3, r0
 800a7e8:	eb42 71e3 	adc.w	r1, r2, r3, asr #31
 800a7ec:	2201      	movs	r2, #1
 800a7ee:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a7f2:	e7d8      	b.n	800a7a6 <_strtoll_l.constprop.0+0x6a>
 800a7f4:	2c2b      	cmp	r4, #43	@ 0x2b
 800a7f6:	bf04      	itt	eq
 800a7f8:	782c      	ldrbeq	r4, [r5, #0]
 800a7fa:	1c9d      	addeq	r5, r3, #2
 800a7fc:	e7b3      	b.n	800a766 <_strtoll_l.constprop.0+0x2a>
 800a7fe:	2e00      	cmp	r6, #0
 800a800:	d1be      	bne.n	800a780 <_strtoll_l.constprop.0+0x44>
 800a802:	2c30      	cmp	r4, #48	@ 0x30
 800a804:	bf0c      	ite	eq
 800a806:	2608      	moveq	r6, #8
 800a808:	260a      	movne	r6, #10
 800a80a:	e7b9      	b.n	800a780 <_strtoll_l.constprop.0+0x44>
 800a80c:	f1a4 0361 	sub.w	r3, r4, #97	@ 0x61
 800a810:	2b19      	cmp	r3, #25
 800a812:	d805      	bhi.n	800a820 <_strtoll_l.constprop.0+0xe4>
 800a814:	f1a4 0357 	sub.w	r3, r4, #87	@ 0x57
 800a818:	e7cf      	b.n	800a7ba <_strtoll_l.constprop.0+0x7e>
 800a81a:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800a81e:	e7e6      	b.n	800a7ee <_strtoll_l.constprop.0+0xb2>
 800a820:	1c53      	adds	r3, r2, #1
 800a822:	d10a      	bne.n	800a83a <_strtoll_l.constprop.0+0xfe>
 800a824:	2322      	movs	r3, #34	@ 0x22
 800a826:	9a02      	ldr	r2, [sp, #8]
 800a828:	4658      	mov	r0, fp
 800a82a:	4651      	mov	r1, sl
 800a82c:	6013      	str	r3, [r2, #0]
 800a82e:	f1b8 0f00 	cmp.w	r8, #0
 800a832:	d10a      	bne.n	800a84a <_strtoll_l.constprop.0+0x10e>
 800a834:	b005      	add	sp, #20
 800a836:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a83a:	b117      	cbz	r7, 800a842 <_strtoll_l.constprop.0+0x106>
 800a83c:	4240      	negs	r0, r0
 800a83e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800a842:	f1b8 0f00 	cmp.w	r8, #0
 800a846:	d0f5      	beq.n	800a834 <_strtoll_l.constprop.0+0xf8>
 800a848:	b10a      	cbz	r2, 800a84e <_strtoll_l.constprop.0+0x112>
 800a84a:	f105 39ff 	add.w	r9, r5, #4294967295	@ 0xffffffff
 800a84e:	f8c8 9000 	str.w	r9, [r8]
 800a852:	e7ef      	b.n	800a834 <_strtoll_l.constprop.0+0xf8>
 800a854:	0800b7e9 	.word	0x0800b7e9

0800a858 <strtoll>:
 800a858:	4613      	mov	r3, r2
 800a85a:	460a      	mov	r2, r1
 800a85c:	4601      	mov	r1, r0
 800a85e:	4802      	ldr	r0, [pc, #8]	@ (800a868 <strtoll+0x10>)
 800a860:	6800      	ldr	r0, [r0, #0]
 800a862:	f7ff bf6b 	b.w	800a73c <_strtoll_l.constprop.0>
 800a866:	bf00      	nop
 800a868:	20000308 	.word	0x20000308

0800a86c <__ssputs_r>:
 800a86c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a870:	461f      	mov	r7, r3
 800a872:	688e      	ldr	r6, [r1, #8]
 800a874:	4682      	mov	sl, r0
 800a876:	42be      	cmp	r6, r7
 800a878:	460c      	mov	r4, r1
 800a87a:	4690      	mov	r8, r2
 800a87c:	680b      	ldr	r3, [r1, #0]
 800a87e:	d82d      	bhi.n	800a8dc <__ssputs_r+0x70>
 800a880:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800a884:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800a888:	d026      	beq.n	800a8d8 <__ssputs_r+0x6c>
 800a88a:	6965      	ldr	r5, [r4, #20]
 800a88c:	6909      	ldr	r1, [r1, #16]
 800a88e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a892:	eba3 0901 	sub.w	r9, r3, r1
 800a896:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800a89a:	1c7b      	adds	r3, r7, #1
 800a89c:	444b      	add	r3, r9
 800a89e:	106d      	asrs	r5, r5, #1
 800a8a0:	429d      	cmp	r5, r3
 800a8a2:	bf38      	it	cc
 800a8a4:	461d      	movcc	r5, r3
 800a8a6:	0553      	lsls	r3, r2, #21
 800a8a8:	d527      	bpl.n	800a8fa <__ssputs_r+0x8e>
 800a8aa:	4629      	mov	r1, r5
 800a8ac:	f7ff f9f4 	bl	8009c98 <_malloc_r>
 800a8b0:	4606      	mov	r6, r0
 800a8b2:	b360      	cbz	r0, 800a90e <__ssputs_r+0xa2>
 800a8b4:	464a      	mov	r2, r9
 800a8b6:	6921      	ldr	r1, [r4, #16]
 800a8b8:	f7fd ffdb 	bl	8008872 <memcpy>
 800a8bc:	89a3      	ldrh	r3, [r4, #12]
 800a8be:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800a8c2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a8c6:	81a3      	strh	r3, [r4, #12]
 800a8c8:	6126      	str	r6, [r4, #16]
 800a8ca:	444e      	add	r6, r9
 800a8cc:	6026      	str	r6, [r4, #0]
 800a8ce:	463e      	mov	r6, r7
 800a8d0:	6165      	str	r5, [r4, #20]
 800a8d2:	eba5 0509 	sub.w	r5, r5, r9
 800a8d6:	60a5      	str	r5, [r4, #8]
 800a8d8:	42be      	cmp	r6, r7
 800a8da:	d900      	bls.n	800a8de <__ssputs_r+0x72>
 800a8dc:	463e      	mov	r6, r7
 800a8de:	4632      	mov	r2, r6
 800a8e0:	4641      	mov	r1, r8
 800a8e2:	6820      	ldr	r0, [r4, #0]
 800a8e4:	f000 f9c2 	bl	800ac6c <memmove>
 800a8e8:	2000      	movs	r0, #0
 800a8ea:	68a3      	ldr	r3, [r4, #8]
 800a8ec:	1b9b      	subs	r3, r3, r6
 800a8ee:	60a3      	str	r3, [r4, #8]
 800a8f0:	6823      	ldr	r3, [r4, #0]
 800a8f2:	4433      	add	r3, r6
 800a8f4:	6023      	str	r3, [r4, #0]
 800a8f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a8fa:	462a      	mov	r2, r5
 800a8fc:	f000 fa12 	bl	800ad24 <_realloc_r>
 800a900:	4606      	mov	r6, r0
 800a902:	2800      	cmp	r0, #0
 800a904:	d1e0      	bne.n	800a8c8 <__ssputs_r+0x5c>
 800a906:	4650      	mov	r0, sl
 800a908:	6921      	ldr	r1, [r4, #16]
 800a90a:	f7fe fe19 	bl	8009540 <_free_r>
 800a90e:	230c      	movs	r3, #12
 800a910:	f8ca 3000 	str.w	r3, [sl]
 800a914:	89a3      	ldrh	r3, [r4, #12]
 800a916:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800a91a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a91e:	81a3      	strh	r3, [r4, #12]
 800a920:	e7e9      	b.n	800a8f6 <__ssputs_r+0x8a>
	...

0800a924 <_svfiprintf_r>:
 800a924:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a928:	4698      	mov	r8, r3
 800a92a:	898b      	ldrh	r3, [r1, #12]
 800a92c:	4607      	mov	r7, r0
 800a92e:	061b      	lsls	r3, r3, #24
 800a930:	460d      	mov	r5, r1
 800a932:	4614      	mov	r4, r2
 800a934:	b09d      	sub	sp, #116	@ 0x74
 800a936:	d510      	bpl.n	800a95a <_svfiprintf_r+0x36>
 800a938:	690b      	ldr	r3, [r1, #16]
 800a93a:	b973      	cbnz	r3, 800a95a <_svfiprintf_r+0x36>
 800a93c:	2140      	movs	r1, #64	@ 0x40
 800a93e:	f7ff f9ab 	bl	8009c98 <_malloc_r>
 800a942:	6028      	str	r0, [r5, #0]
 800a944:	6128      	str	r0, [r5, #16]
 800a946:	b930      	cbnz	r0, 800a956 <_svfiprintf_r+0x32>
 800a948:	230c      	movs	r3, #12
 800a94a:	603b      	str	r3, [r7, #0]
 800a94c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800a950:	b01d      	add	sp, #116	@ 0x74
 800a952:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a956:	2340      	movs	r3, #64	@ 0x40
 800a958:	616b      	str	r3, [r5, #20]
 800a95a:	2300      	movs	r3, #0
 800a95c:	9309      	str	r3, [sp, #36]	@ 0x24
 800a95e:	2320      	movs	r3, #32
 800a960:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800a964:	2330      	movs	r3, #48	@ 0x30
 800a966:	f04f 0901 	mov.w	r9, #1
 800a96a:	f8cd 800c 	str.w	r8, [sp, #12]
 800a96e:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 800ab08 <_svfiprintf_r+0x1e4>
 800a972:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800a976:	4623      	mov	r3, r4
 800a978:	469a      	mov	sl, r3
 800a97a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a97e:	b10a      	cbz	r2, 800a984 <_svfiprintf_r+0x60>
 800a980:	2a25      	cmp	r2, #37	@ 0x25
 800a982:	d1f9      	bne.n	800a978 <_svfiprintf_r+0x54>
 800a984:	ebba 0b04 	subs.w	fp, sl, r4
 800a988:	d00b      	beq.n	800a9a2 <_svfiprintf_r+0x7e>
 800a98a:	465b      	mov	r3, fp
 800a98c:	4622      	mov	r2, r4
 800a98e:	4629      	mov	r1, r5
 800a990:	4638      	mov	r0, r7
 800a992:	f7ff ff6b 	bl	800a86c <__ssputs_r>
 800a996:	3001      	adds	r0, #1
 800a998:	f000 80a7 	beq.w	800aaea <_svfiprintf_r+0x1c6>
 800a99c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a99e:	445a      	add	r2, fp
 800a9a0:	9209      	str	r2, [sp, #36]	@ 0x24
 800a9a2:	f89a 3000 	ldrb.w	r3, [sl]
 800a9a6:	2b00      	cmp	r3, #0
 800a9a8:	f000 809f 	beq.w	800aaea <_svfiprintf_r+0x1c6>
 800a9ac:	2300      	movs	r3, #0
 800a9ae:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800a9b2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a9b6:	f10a 0a01 	add.w	sl, sl, #1
 800a9ba:	9304      	str	r3, [sp, #16]
 800a9bc:	9307      	str	r3, [sp, #28]
 800a9be:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800a9c2:	931a      	str	r3, [sp, #104]	@ 0x68
 800a9c4:	4654      	mov	r4, sl
 800a9c6:	2205      	movs	r2, #5
 800a9c8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a9cc:	484e      	ldr	r0, [pc, #312]	@ (800ab08 <_svfiprintf_r+0x1e4>)
 800a9ce:	f7fd ff42 	bl	8008856 <memchr>
 800a9d2:	9a04      	ldr	r2, [sp, #16]
 800a9d4:	b9d8      	cbnz	r0, 800aa0e <_svfiprintf_r+0xea>
 800a9d6:	06d0      	lsls	r0, r2, #27
 800a9d8:	bf44      	itt	mi
 800a9da:	2320      	movmi	r3, #32
 800a9dc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a9e0:	0711      	lsls	r1, r2, #28
 800a9e2:	bf44      	itt	mi
 800a9e4:	232b      	movmi	r3, #43	@ 0x2b
 800a9e6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a9ea:	f89a 3000 	ldrb.w	r3, [sl]
 800a9ee:	2b2a      	cmp	r3, #42	@ 0x2a
 800a9f0:	d015      	beq.n	800aa1e <_svfiprintf_r+0xfa>
 800a9f2:	4654      	mov	r4, sl
 800a9f4:	2000      	movs	r0, #0
 800a9f6:	f04f 0c0a 	mov.w	ip, #10
 800a9fa:	9a07      	ldr	r2, [sp, #28]
 800a9fc:	4621      	mov	r1, r4
 800a9fe:	f811 3b01 	ldrb.w	r3, [r1], #1
 800aa02:	3b30      	subs	r3, #48	@ 0x30
 800aa04:	2b09      	cmp	r3, #9
 800aa06:	d94b      	bls.n	800aaa0 <_svfiprintf_r+0x17c>
 800aa08:	b1b0      	cbz	r0, 800aa38 <_svfiprintf_r+0x114>
 800aa0a:	9207      	str	r2, [sp, #28]
 800aa0c:	e014      	b.n	800aa38 <_svfiprintf_r+0x114>
 800aa0e:	eba0 0308 	sub.w	r3, r0, r8
 800aa12:	fa09 f303 	lsl.w	r3, r9, r3
 800aa16:	4313      	orrs	r3, r2
 800aa18:	46a2      	mov	sl, r4
 800aa1a:	9304      	str	r3, [sp, #16]
 800aa1c:	e7d2      	b.n	800a9c4 <_svfiprintf_r+0xa0>
 800aa1e:	9b03      	ldr	r3, [sp, #12]
 800aa20:	1d19      	adds	r1, r3, #4
 800aa22:	681b      	ldr	r3, [r3, #0]
 800aa24:	9103      	str	r1, [sp, #12]
 800aa26:	2b00      	cmp	r3, #0
 800aa28:	bfbb      	ittet	lt
 800aa2a:	425b      	neglt	r3, r3
 800aa2c:	f042 0202 	orrlt.w	r2, r2, #2
 800aa30:	9307      	strge	r3, [sp, #28]
 800aa32:	9307      	strlt	r3, [sp, #28]
 800aa34:	bfb8      	it	lt
 800aa36:	9204      	strlt	r2, [sp, #16]
 800aa38:	7823      	ldrb	r3, [r4, #0]
 800aa3a:	2b2e      	cmp	r3, #46	@ 0x2e
 800aa3c:	d10a      	bne.n	800aa54 <_svfiprintf_r+0x130>
 800aa3e:	7863      	ldrb	r3, [r4, #1]
 800aa40:	2b2a      	cmp	r3, #42	@ 0x2a
 800aa42:	d132      	bne.n	800aaaa <_svfiprintf_r+0x186>
 800aa44:	9b03      	ldr	r3, [sp, #12]
 800aa46:	3402      	adds	r4, #2
 800aa48:	1d1a      	adds	r2, r3, #4
 800aa4a:	681b      	ldr	r3, [r3, #0]
 800aa4c:	9203      	str	r2, [sp, #12]
 800aa4e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800aa52:	9305      	str	r3, [sp, #20]
 800aa54:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 800ab0c <_svfiprintf_r+0x1e8>
 800aa58:	2203      	movs	r2, #3
 800aa5a:	4650      	mov	r0, sl
 800aa5c:	7821      	ldrb	r1, [r4, #0]
 800aa5e:	f7fd fefa 	bl	8008856 <memchr>
 800aa62:	b138      	cbz	r0, 800aa74 <_svfiprintf_r+0x150>
 800aa64:	2240      	movs	r2, #64	@ 0x40
 800aa66:	9b04      	ldr	r3, [sp, #16]
 800aa68:	eba0 000a 	sub.w	r0, r0, sl
 800aa6c:	4082      	lsls	r2, r0
 800aa6e:	4313      	orrs	r3, r2
 800aa70:	3401      	adds	r4, #1
 800aa72:	9304      	str	r3, [sp, #16]
 800aa74:	f814 1b01 	ldrb.w	r1, [r4], #1
 800aa78:	2206      	movs	r2, #6
 800aa7a:	4825      	ldr	r0, [pc, #148]	@ (800ab10 <_svfiprintf_r+0x1ec>)
 800aa7c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800aa80:	f7fd fee9 	bl	8008856 <memchr>
 800aa84:	2800      	cmp	r0, #0
 800aa86:	d036      	beq.n	800aaf6 <_svfiprintf_r+0x1d2>
 800aa88:	4b22      	ldr	r3, [pc, #136]	@ (800ab14 <_svfiprintf_r+0x1f0>)
 800aa8a:	bb1b      	cbnz	r3, 800aad4 <_svfiprintf_r+0x1b0>
 800aa8c:	9b03      	ldr	r3, [sp, #12]
 800aa8e:	3307      	adds	r3, #7
 800aa90:	f023 0307 	bic.w	r3, r3, #7
 800aa94:	3308      	adds	r3, #8
 800aa96:	9303      	str	r3, [sp, #12]
 800aa98:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800aa9a:	4433      	add	r3, r6
 800aa9c:	9309      	str	r3, [sp, #36]	@ 0x24
 800aa9e:	e76a      	b.n	800a976 <_svfiprintf_r+0x52>
 800aaa0:	460c      	mov	r4, r1
 800aaa2:	2001      	movs	r0, #1
 800aaa4:	fb0c 3202 	mla	r2, ip, r2, r3
 800aaa8:	e7a8      	b.n	800a9fc <_svfiprintf_r+0xd8>
 800aaaa:	2300      	movs	r3, #0
 800aaac:	f04f 0c0a 	mov.w	ip, #10
 800aab0:	4619      	mov	r1, r3
 800aab2:	3401      	adds	r4, #1
 800aab4:	9305      	str	r3, [sp, #20]
 800aab6:	4620      	mov	r0, r4
 800aab8:	f810 2b01 	ldrb.w	r2, [r0], #1
 800aabc:	3a30      	subs	r2, #48	@ 0x30
 800aabe:	2a09      	cmp	r2, #9
 800aac0:	d903      	bls.n	800aaca <_svfiprintf_r+0x1a6>
 800aac2:	2b00      	cmp	r3, #0
 800aac4:	d0c6      	beq.n	800aa54 <_svfiprintf_r+0x130>
 800aac6:	9105      	str	r1, [sp, #20]
 800aac8:	e7c4      	b.n	800aa54 <_svfiprintf_r+0x130>
 800aaca:	4604      	mov	r4, r0
 800aacc:	2301      	movs	r3, #1
 800aace:	fb0c 2101 	mla	r1, ip, r1, r2
 800aad2:	e7f0      	b.n	800aab6 <_svfiprintf_r+0x192>
 800aad4:	ab03      	add	r3, sp, #12
 800aad6:	9300      	str	r3, [sp, #0]
 800aad8:	462a      	mov	r2, r5
 800aada:	4638      	mov	r0, r7
 800aadc:	4b0e      	ldr	r3, [pc, #56]	@ (800ab18 <_svfiprintf_r+0x1f4>)
 800aade:	a904      	add	r1, sp, #16
 800aae0:	f7fd f944 	bl	8007d6c <_printf_float>
 800aae4:	1c42      	adds	r2, r0, #1
 800aae6:	4606      	mov	r6, r0
 800aae8:	d1d6      	bne.n	800aa98 <_svfiprintf_r+0x174>
 800aaea:	89ab      	ldrh	r3, [r5, #12]
 800aaec:	065b      	lsls	r3, r3, #25
 800aaee:	f53f af2d 	bmi.w	800a94c <_svfiprintf_r+0x28>
 800aaf2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800aaf4:	e72c      	b.n	800a950 <_svfiprintf_r+0x2c>
 800aaf6:	ab03      	add	r3, sp, #12
 800aaf8:	9300      	str	r3, [sp, #0]
 800aafa:	462a      	mov	r2, r5
 800aafc:	4638      	mov	r0, r7
 800aafe:	4b06      	ldr	r3, [pc, #24]	@ (800ab18 <_svfiprintf_r+0x1f4>)
 800ab00:	a904      	add	r1, sp, #16
 800ab02:	f7fd fbd1 	bl	80082a8 <_printf_i>
 800ab06:	e7ed      	b.n	800aae4 <_svfiprintf_r+0x1c0>
 800ab08:	0800b8e9 	.word	0x0800b8e9
 800ab0c:	0800b8ef 	.word	0x0800b8ef
 800ab10:	0800b8f3 	.word	0x0800b8f3
 800ab14:	08007d6d 	.word	0x08007d6d
 800ab18:	0800a86d 	.word	0x0800a86d

0800ab1c <__sflush_r>:
 800ab1c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800ab20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ab22:	0716      	lsls	r6, r2, #28
 800ab24:	4605      	mov	r5, r0
 800ab26:	460c      	mov	r4, r1
 800ab28:	d454      	bmi.n	800abd4 <__sflush_r+0xb8>
 800ab2a:	684b      	ldr	r3, [r1, #4]
 800ab2c:	2b00      	cmp	r3, #0
 800ab2e:	dc02      	bgt.n	800ab36 <__sflush_r+0x1a>
 800ab30:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800ab32:	2b00      	cmp	r3, #0
 800ab34:	dd48      	ble.n	800abc8 <__sflush_r+0xac>
 800ab36:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800ab38:	2e00      	cmp	r6, #0
 800ab3a:	d045      	beq.n	800abc8 <__sflush_r+0xac>
 800ab3c:	2300      	movs	r3, #0
 800ab3e:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800ab42:	682f      	ldr	r7, [r5, #0]
 800ab44:	6a21      	ldr	r1, [r4, #32]
 800ab46:	602b      	str	r3, [r5, #0]
 800ab48:	d030      	beq.n	800abac <__sflush_r+0x90>
 800ab4a:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800ab4c:	89a3      	ldrh	r3, [r4, #12]
 800ab4e:	0759      	lsls	r1, r3, #29
 800ab50:	d505      	bpl.n	800ab5e <__sflush_r+0x42>
 800ab52:	6863      	ldr	r3, [r4, #4]
 800ab54:	1ad2      	subs	r2, r2, r3
 800ab56:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800ab58:	b10b      	cbz	r3, 800ab5e <__sflush_r+0x42>
 800ab5a:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800ab5c:	1ad2      	subs	r2, r2, r3
 800ab5e:	2300      	movs	r3, #0
 800ab60:	4628      	mov	r0, r5
 800ab62:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800ab64:	6a21      	ldr	r1, [r4, #32]
 800ab66:	47b0      	blx	r6
 800ab68:	1c43      	adds	r3, r0, #1
 800ab6a:	89a3      	ldrh	r3, [r4, #12]
 800ab6c:	d106      	bne.n	800ab7c <__sflush_r+0x60>
 800ab6e:	6829      	ldr	r1, [r5, #0]
 800ab70:	291d      	cmp	r1, #29
 800ab72:	d82b      	bhi.n	800abcc <__sflush_r+0xb0>
 800ab74:	4a28      	ldr	r2, [pc, #160]	@ (800ac18 <__sflush_r+0xfc>)
 800ab76:	410a      	asrs	r2, r1
 800ab78:	07d6      	lsls	r6, r2, #31
 800ab7a:	d427      	bmi.n	800abcc <__sflush_r+0xb0>
 800ab7c:	2200      	movs	r2, #0
 800ab7e:	6062      	str	r2, [r4, #4]
 800ab80:	6922      	ldr	r2, [r4, #16]
 800ab82:	04d9      	lsls	r1, r3, #19
 800ab84:	6022      	str	r2, [r4, #0]
 800ab86:	d504      	bpl.n	800ab92 <__sflush_r+0x76>
 800ab88:	1c42      	adds	r2, r0, #1
 800ab8a:	d101      	bne.n	800ab90 <__sflush_r+0x74>
 800ab8c:	682b      	ldr	r3, [r5, #0]
 800ab8e:	b903      	cbnz	r3, 800ab92 <__sflush_r+0x76>
 800ab90:	6560      	str	r0, [r4, #84]	@ 0x54
 800ab92:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800ab94:	602f      	str	r7, [r5, #0]
 800ab96:	b1b9      	cbz	r1, 800abc8 <__sflush_r+0xac>
 800ab98:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800ab9c:	4299      	cmp	r1, r3
 800ab9e:	d002      	beq.n	800aba6 <__sflush_r+0x8a>
 800aba0:	4628      	mov	r0, r5
 800aba2:	f7fe fccd 	bl	8009540 <_free_r>
 800aba6:	2300      	movs	r3, #0
 800aba8:	6363      	str	r3, [r4, #52]	@ 0x34
 800abaa:	e00d      	b.n	800abc8 <__sflush_r+0xac>
 800abac:	2301      	movs	r3, #1
 800abae:	4628      	mov	r0, r5
 800abb0:	47b0      	blx	r6
 800abb2:	4602      	mov	r2, r0
 800abb4:	1c50      	adds	r0, r2, #1
 800abb6:	d1c9      	bne.n	800ab4c <__sflush_r+0x30>
 800abb8:	682b      	ldr	r3, [r5, #0]
 800abba:	2b00      	cmp	r3, #0
 800abbc:	d0c6      	beq.n	800ab4c <__sflush_r+0x30>
 800abbe:	2b1d      	cmp	r3, #29
 800abc0:	d001      	beq.n	800abc6 <__sflush_r+0xaa>
 800abc2:	2b16      	cmp	r3, #22
 800abc4:	d11d      	bne.n	800ac02 <__sflush_r+0xe6>
 800abc6:	602f      	str	r7, [r5, #0]
 800abc8:	2000      	movs	r0, #0
 800abca:	e021      	b.n	800ac10 <__sflush_r+0xf4>
 800abcc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800abd0:	b21b      	sxth	r3, r3
 800abd2:	e01a      	b.n	800ac0a <__sflush_r+0xee>
 800abd4:	690f      	ldr	r7, [r1, #16]
 800abd6:	2f00      	cmp	r7, #0
 800abd8:	d0f6      	beq.n	800abc8 <__sflush_r+0xac>
 800abda:	0793      	lsls	r3, r2, #30
 800abdc:	bf18      	it	ne
 800abde:	2300      	movne	r3, #0
 800abe0:	680e      	ldr	r6, [r1, #0]
 800abe2:	bf08      	it	eq
 800abe4:	694b      	ldreq	r3, [r1, #20]
 800abe6:	1bf6      	subs	r6, r6, r7
 800abe8:	600f      	str	r7, [r1, #0]
 800abea:	608b      	str	r3, [r1, #8]
 800abec:	2e00      	cmp	r6, #0
 800abee:	ddeb      	ble.n	800abc8 <__sflush_r+0xac>
 800abf0:	4633      	mov	r3, r6
 800abf2:	463a      	mov	r2, r7
 800abf4:	4628      	mov	r0, r5
 800abf6:	6a21      	ldr	r1, [r4, #32]
 800abf8:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 800abfc:	47e0      	blx	ip
 800abfe:	2800      	cmp	r0, #0
 800ac00:	dc07      	bgt.n	800ac12 <__sflush_r+0xf6>
 800ac02:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ac06:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ac0a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800ac0e:	81a3      	strh	r3, [r4, #12]
 800ac10:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ac12:	4407      	add	r7, r0
 800ac14:	1a36      	subs	r6, r6, r0
 800ac16:	e7e9      	b.n	800abec <__sflush_r+0xd0>
 800ac18:	dfbffffe 	.word	0xdfbffffe

0800ac1c <_fflush_r>:
 800ac1c:	b538      	push	{r3, r4, r5, lr}
 800ac1e:	690b      	ldr	r3, [r1, #16]
 800ac20:	4605      	mov	r5, r0
 800ac22:	460c      	mov	r4, r1
 800ac24:	b913      	cbnz	r3, 800ac2c <_fflush_r+0x10>
 800ac26:	2500      	movs	r5, #0
 800ac28:	4628      	mov	r0, r5
 800ac2a:	bd38      	pop	{r3, r4, r5, pc}
 800ac2c:	b118      	cbz	r0, 800ac36 <_fflush_r+0x1a>
 800ac2e:	6a03      	ldr	r3, [r0, #32]
 800ac30:	b90b      	cbnz	r3, 800ac36 <_fflush_r+0x1a>
 800ac32:	f7fd fce5 	bl	8008600 <__sinit>
 800ac36:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ac3a:	2b00      	cmp	r3, #0
 800ac3c:	d0f3      	beq.n	800ac26 <_fflush_r+0xa>
 800ac3e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800ac40:	07d0      	lsls	r0, r2, #31
 800ac42:	d404      	bmi.n	800ac4e <_fflush_r+0x32>
 800ac44:	0599      	lsls	r1, r3, #22
 800ac46:	d402      	bmi.n	800ac4e <_fflush_r+0x32>
 800ac48:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800ac4a:	f7fd fe02 	bl	8008852 <__retarget_lock_acquire_recursive>
 800ac4e:	4628      	mov	r0, r5
 800ac50:	4621      	mov	r1, r4
 800ac52:	f7ff ff63 	bl	800ab1c <__sflush_r>
 800ac56:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800ac58:	4605      	mov	r5, r0
 800ac5a:	07da      	lsls	r2, r3, #31
 800ac5c:	d4e4      	bmi.n	800ac28 <_fflush_r+0xc>
 800ac5e:	89a3      	ldrh	r3, [r4, #12]
 800ac60:	059b      	lsls	r3, r3, #22
 800ac62:	d4e1      	bmi.n	800ac28 <_fflush_r+0xc>
 800ac64:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800ac66:	f7fd fdf5 	bl	8008854 <__retarget_lock_release_recursive>
 800ac6a:	e7dd      	b.n	800ac28 <_fflush_r+0xc>

0800ac6c <memmove>:
 800ac6c:	4288      	cmp	r0, r1
 800ac6e:	b510      	push	{r4, lr}
 800ac70:	eb01 0402 	add.w	r4, r1, r2
 800ac74:	d902      	bls.n	800ac7c <memmove+0x10>
 800ac76:	4284      	cmp	r4, r0
 800ac78:	4623      	mov	r3, r4
 800ac7a:	d807      	bhi.n	800ac8c <memmove+0x20>
 800ac7c:	1e43      	subs	r3, r0, #1
 800ac7e:	42a1      	cmp	r1, r4
 800ac80:	d008      	beq.n	800ac94 <memmove+0x28>
 800ac82:	f811 2b01 	ldrb.w	r2, [r1], #1
 800ac86:	f803 2f01 	strb.w	r2, [r3, #1]!
 800ac8a:	e7f8      	b.n	800ac7e <memmove+0x12>
 800ac8c:	4601      	mov	r1, r0
 800ac8e:	4402      	add	r2, r0
 800ac90:	428a      	cmp	r2, r1
 800ac92:	d100      	bne.n	800ac96 <memmove+0x2a>
 800ac94:	bd10      	pop	{r4, pc}
 800ac96:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800ac9a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800ac9e:	e7f7      	b.n	800ac90 <memmove+0x24>

0800aca0 <_sbrk_r>:
 800aca0:	b538      	push	{r3, r4, r5, lr}
 800aca2:	2300      	movs	r3, #0
 800aca4:	4d05      	ldr	r5, [pc, #20]	@ (800acbc <_sbrk_r+0x1c>)
 800aca6:	4604      	mov	r4, r0
 800aca8:	4608      	mov	r0, r1
 800acaa:	602b      	str	r3, [r5, #0]
 800acac:	f7f6 ffc0 	bl	8001c30 <_sbrk>
 800acb0:	1c43      	adds	r3, r0, #1
 800acb2:	d102      	bne.n	800acba <_sbrk_r+0x1a>
 800acb4:	682b      	ldr	r3, [r5, #0]
 800acb6:	b103      	cbz	r3, 800acba <_sbrk_r+0x1a>
 800acb8:	6023      	str	r3, [r4, #0]
 800acba:	bd38      	pop	{r3, r4, r5, pc}
 800acbc:	20001300 	.word	0x20001300

0800acc0 <__assert_func>:
 800acc0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800acc2:	4614      	mov	r4, r2
 800acc4:	461a      	mov	r2, r3
 800acc6:	4b09      	ldr	r3, [pc, #36]	@ (800acec <__assert_func+0x2c>)
 800acc8:	4605      	mov	r5, r0
 800acca:	681b      	ldr	r3, [r3, #0]
 800accc:	68d8      	ldr	r0, [r3, #12]
 800acce:	b954      	cbnz	r4, 800ace6 <__assert_func+0x26>
 800acd0:	4b07      	ldr	r3, [pc, #28]	@ (800acf0 <__assert_func+0x30>)
 800acd2:	461c      	mov	r4, r3
 800acd4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800acd8:	9100      	str	r1, [sp, #0]
 800acda:	462b      	mov	r3, r5
 800acdc:	4905      	ldr	r1, [pc, #20]	@ (800acf4 <__assert_func+0x34>)
 800acde:	f000 f84f 	bl	800ad80 <fiprintf>
 800ace2:	f000 f85f 	bl	800ada4 <abort>
 800ace6:	4b04      	ldr	r3, [pc, #16]	@ (800acf8 <__assert_func+0x38>)
 800ace8:	e7f4      	b.n	800acd4 <__assert_func+0x14>
 800acea:	bf00      	nop
 800acec:	20000308 	.word	0x20000308
 800acf0:	0800b935 	.word	0x0800b935
 800acf4:	0800b907 	.word	0x0800b907
 800acf8:	0800b8fa 	.word	0x0800b8fa

0800acfc <_calloc_r>:
 800acfc:	b570      	push	{r4, r5, r6, lr}
 800acfe:	fba1 5402 	umull	r5, r4, r1, r2
 800ad02:	b93c      	cbnz	r4, 800ad14 <_calloc_r+0x18>
 800ad04:	4629      	mov	r1, r5
 800ad06:	f7fe ffc7 	bl	8009c98 <_malloc_r>
 800ad0a:	4606      	mov	r6, r0
 800ad0c:	b928      	cbnz	r0, 800ad1a <_calloc_r+0x1e>
 800ad0e:	2600      	movs	r6, #0
 800ad10:	4630      	mov	r0, r6
 800ad12:	bd70      	pop	{r4, r5, r6, pc}
 800ad14:	220c      	movs	r2, #12
 800ad16:	6002      	str	r2, [r0, #0]
 800ad18:	e7f9      	b.n	800ad0e <_calloc_r+0x12>
 800ad1a:	462a      	mov	r2, r5
 800ad1c:	4621      	mov	r1, r4
 800ad1e:	f7fd fd08 	bl	8008732 <memset>
 800ad22:	e7f5      	b.n	800ad10 <_calloc_r+0x14>

0800ad24 <_realloc_r>:
 800ad24:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ad28:	4680      	mov	r8, r0
 800ad2a:	4615      	mov	r5, r2
 800ad2c:	460c      	mov	r4, r1
 800ad2e:	b921      	cbnz	r1, 800ad3a <_realloc_r+0x16>
 800ad30:	4611      	mov	r1, r2
 800ad32:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ad36:	f7fe bfaf 	b.w	8009c98 <_malloc_r>
 800ad3a:	b92a      	cbnz	r2, 800ad48 <_realloc_r+0x24>
 800ad3c:	f7fe fc00 	bl	8009540 <_free_r>
 800ad40:	2400      	movs	r4, #0
 800ad42:	4620      	mov	r0, r4
 800ad44:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ad48:	f000 f833 	bl	800adb2 <_malloc_usable_size_r>
 800ad4c:	4285      	cmp	r5, r0
 800ad4e:	4606      	mov	r6, r0
 800ad50:	d802      	bhi.n	800ad58 <_realloc_r+0x34>
 800ad52:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800ad56:	d8f4      	bhi.n	800ad42 <_realloc_r+0x1e>
 800ad58:	4629      	mov	r1, r5
 800ad5a:	4640      	mov	r0, r8
 800ad5c:	f7fe ff9c 	bl	8009c98 <_malloc_r>
 800ad60:	4607      	mov	r7, r0
 800ad62:	2800      	cmp	r0, #0
 800ad64:	d0ec      	beq.n	800ad40 <_realloc_r+0x1c>
 800ad66:	42b5      	cmp	r5, r6
 800ad68:	462a      	mov	r2, r5
 800ad6a:	4621      	mov	r1, r4
 800ad6c:	bf28      	it	cs
 800ad6e:	4632      	movcs	r2, r6
 800ad70:	f7fd fd7f 	bl	8008872 <memcpy>
 800ad74:	4621      	mov	r1, r4
 800ad76:	4640      	mov	r0, r8
 800ad78:	f7fe fbe2 	bl	8009540 <_free_r>
 800ad7c:	463c      	mov	r4, r7
 800ad7e:	e7e0      	b.n	800ad42 <_realloc_r+0x1e>

0800ad80 <fiprintf>:
 800ad80:	b40e      	push	{r1, r2, r3}
 800ad82:	b503      	push	{r0, r1, lr}
 800ad84:	4601      	mov	r1, r0
 800ad86:	ab03      	add	r3, sp, #12
 800ad88:	4805      	ldr	r0, [pc, #20]	@ (800ada0 <fiprintf+0x20>)
 800ad8a:	f853 2b04 	ldr.w	r2, [r3], #4
 800ad8e:	6800      	ldr	r0, [r0, #0]
 800ad90:	9301      	str	r3, [sp, #4]
 800ad92:	f000 f83d 	bl	800ae10 <_vfiprintf_r>
 800ad96:	b002      	add	sp, #8
 800ad98:	f85d eb04 	ldr.w	lr, [sp], #4
 800ad9c:	b003      	add	sp, #12
 800ad9e:	4770      	bx	lr
 800ada0:	20000308 	.word	0x20000308

0800ada4 <abort>:
 800ada4:	2006      	movs	r0, #6
 800ada6:	b508      	push	{r3, lr}
 800ada8:	f000 fa06 	bl	800b1b8 <raise>
 800adac:	2001      	movs	r0, #1
 800adae:	f7f6 ff0f 	bl	8001bd0 <_exit>

0800adb2 <_malloc_usable_size_r>:
 800adb2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800adb6:	1f18      	subs	r0, r3, #4
 800adb8:	2b00      	cmp	r3, #0
 800adba:	bfbc      	itt	lt
 800adbc:	580b      	ldrlt	r3, [r1, r0]
 800adbe:	18c0      	addlt	r0, r0, r3
 800adc0:	4770      	bx	lr

0800adc2 <__sfputc_r>:
 800adc2:	6893      	ldr	r3, [r2, #8]
 800adc4:	b410      	push	{r4}
 800adc6:	3b01      	subs	r3, #1
 800adc8:	2b00      	cmp	r3, #0
 800adca:	6093      	str	r3, [r2, #8]
 800adcc:	da07      	bge.n	800adde <__sfputc_r+0x1c>
 800adce:	6994      	ldr	r4, [r2, #24]
 800add0:	42a3      	cmp	r3, r4
 800add2:	db01      	blt.n	800add8 <__sfputc_r+0x16>
 800add4:	290a      	cmp	r1, #10
 800add6:	d102      	bne.n	800adde <__sfputc_r+0x1c>
 800add8:	bc10      	pop	{r4}
 800adda:	f000 b931 	b.w	800b040 <__swbuf_r>
 800adde:	6813      	ldr	r3, [r2, #0]
 800ade0:	1c58      	adds	r0, r3, #1
 800ade2:	6010      	str	r0, [r2, #0]
 800ade4:	7019      	strb	r1, [r3, #0]
 800ade6:	4608      	mov	r0, r1
 800ade8:	bc10      	pop	{r4}
 800adea:	4770      	bx	lr

0800adec <__sfputs_r>:
 800adec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800adee:	4606      	mov	r6, r0
 800adf0:	460f      	mov	r7, r1
 800adf2:	4614      	mov	r4, r2
 800adf4:	18d5      	adds	r5, r2, r3
 800adf6:	42ac      	cmp	r4, r5
 800adf8:	d101      	bne.n	800adfe <__sfputs_r+0x12>
 800adfa:	2000      	movs	r0, #0
 800adfc:	e007      	b.n	800ae0e <__sfputs_r+0x22>
 800adfe:	463a      	mov	r2, r7
 800ae00:	4630      	mov	r0, r6
 800ae02:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ae06:	f7ff ffdc 	bl	800adc2 <__sfputc_r>
 800ae0a:	1c43      	adds	r3, r0, #1
 800ae0c:	d1f3      	bne.n	800adf6 <__sfputs_r+0xa>
 800ae0e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800ae10 <_vfiprintf_r>:
 800ae10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ae14:	460d      	mov	r5, r1
 800ae16:	4614      	mov	r4, r2
 800ae18:	4698      	mov	r8, r3
 800ae1a:	4606      	mov	r6, r0
 800ae1c:	b09d      	sub	sp, #116	@ 0x74
 800ae1e:	b118      	cbz	r0, 800ae28 <_vfiprintf_r+0x18>
 800ae20:	6a03      	ldr	r3, [r0, #32]
 800ae22:	b90b      	cbnz	r3, 800ae28 <_vfiprintf_r+0x18>
 800ae24:	f7fd fbec 	bl	8008600 <__sinit>
 800ae28:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800ae2a:	07d9      	lsls	r1, r3, #31
 800ae2c:	d405      	bmi.n	800ae3a <_vfiprintf_r+0x2a>
 800ae2e:	89ab      	ldrh	r3, [r5, #12]
 800ae30:	059a      	lsls	r2, r3, #22
 800ae32:	d402      	bmi.n	800ae3a <_vfiprintf_r+0x2a>
 800ae34:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800ae36:	f7fd fd0c 	bl	8008852 <__retarget_lock_acquire_recursive>
 800ae3a:	89ab      	ldrh	r3, [r5, #12]
 800ae3c:	071b      	lsls	r3, r3, #28
 800ae3e:	d501      	bpl.n	800ae44 <_vfiprintf_r+0x34>
 800ae40:	692b      	ldr	r3, [r5, #16]
 800ae42:	b99b      	cbnz	r3, 800ae6c <_vfiprintf_r+0x5c>
 800ae44:	4629      	mov	r1, r5
 800ae46:	4630      	mov	r0, r6
 800ae48:	f000 f938 	bl	800b0bc <__swsetup_r>
 800ae4c:	b170      	cbz	r0, 800ae6c <_vfiprintf_r+0x5c>
 800ae4e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800ae50:	07dc      	lsls	r4, r3, #31
 800ae52:	d504      	bpl.n	800ae5e <_vfiprintf_r+0x4e>
 800ae54:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800ae58:	b01d      	add	sp, #116	@ 0x74
 800ae5a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ae5e:	89ab      	ldrh	r3, [r5, #12]
 800ae60:	0598      	lsls	r0, r3, #22
 800ae62:	d4f7      	bmi.n	800ae54 <_vfiprintf_r+0x44>
 800ae64:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800ae66:	f7fd fcf5 	bl	8008854 <__retarget_lock_release_recursive>
 800ae6a:	e7f3      	b.n	800ae54 <_vfiprintf_r+0x44>
 800ae6c:	2300      	movs	r3, #0
 800ae6e:	9309      	str	r3, [sp, #36]	@ 0x24
 800ae70:	2320      	movs	r3, #32
 800ae72:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800ae76:	2330      	movs	r3, #48	@ 0x30
 800ae78:	f04f 0901 	mov.w	r9, #1
 800ae7c:	f8cd 800c 	str.w	r8, [sp, #12]
 800ae80:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 800b02c <_vfiprintf_r+0x21c>
 800ae84:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800ae88:	4623      	mov	r3, r4
 800ae8a:	469a      	mov	sl, r3
 800ae8c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ae90:	b10a      	cbz	r2, 800ae96 <_vfiprintf_r+0x86>
 800ae92:	2a25      	cmp	r2, #37	@ 0x25
 800ae94:	d1f9      	bne.n	800ae8a <_vfiprintf_r+0x7a>
 800ae96:	ebba 0b04 	subs.w	fp, sl, r4
 800ae9a:	d00b      	beq.n	800aeb4 <_vfiprintf_r+0xa4>
 800ae9c:	465b      	mov	r3, fp
 800ae9e:	4622      	mov	r2, r4
 800aea0:	4629      	mov	r1, r5
 800aea2:	4630      	mov	r0, r6
 800aea4:	f7ff ffa2 	bl	800adec <__sfputs_r>
 800aea8:	3001      	adds	r0, #1
 800aeaa:	f000 80a7 	beq.w	800affc <_vfiprintf_r+0x1ec>
 800aeae:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800aeb0:	445a      	add	r2, fp
 800aeb2:	9209      	str	r2, [sp, #36]	@ 0x24
 800aeb4:	f89a 3000 	ldrb.w	r3, [sl]
 800aeb8:	2b00      	cmp	r3, #0
 800aeba:	f000 809f 	beq.w	800affc <_vfiprintf_r+0x1ec>
 800aebe:	2300      	movs	r3, #0
 800aec0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800aec4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800aec8:	f10a 0a01 	add.w	sl, sl, #1
 800aecc:	9304      	str	r3, [sp, #16]
 800aece:	9307      	str	r3, [sp, #28]
 800aed0:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800aed4:	931a      	str	r3, [sp, #104]	@ 0x68
 800aed6:	4654      	mov	r4, sl
 800aed8:	2205      	movs	r2, #5
 800aeda:	f814 1b01 	ldrb.w	r1, [r4], #1
 800aede:	4853      	ldr	r0, [pc, #332]	@ (800b02c <_vfiprintf_r+0x21c>)
 800aee0:	f7fd fcb9 	bl	8008856 <memchr>
 800aee4:	9a04      	ldr	r2, [sp, #16]
 800aee6:	b9d8      	cbnz	r0, 800af20 <_vfiprintf_r+0x110>
 800aee8:	06d1      	lsls	r1, r2, #27
 800aeea:	bf44      	itt	mi
 800aeec:	2320      	movmi	r3, #32
 800aeee:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800aef2:	0713      	lsls	r3, r2, #28
 800aef4:	bf44      	itt	mi
 800aef6:	232b      	movmi	r3, #43	@ 0x2b
 800aef8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800aefc:	f89a 3000 	ldrb.w	r3, [sl]
 800af00:	2b2a      	cmp	r3, #42	@ 0x2a
 800af02:	d015      	beq.n	800af30 <_vfiprintf_r+0x120>
 800af04:	4654      	mov	r4, sl
 800af06:	2000      	movs	r0, #0
 800af08:	f04f 0c0a 	mov.w	ip, #10
 800af0c:	9a07      	ldr	r2, [sp, #28]
 800af0e:	4621      	mov	r1, r4
 800af10:	f811 3b01 	ldrb.w	r3, [r1], #1
 800af14:	3b30      	subs	r3, #48	@ 0x30
 800af16:	2b09      	cmp	r3, #9
 800af18:	d94b      	bls.n	800afb2 <_vfiprintf_r+0x1a2>
 800af1a:	b1b0      	cbz	r0, 800af4a <_vfiprintf_r+0x13a>
 800af1c:	9207      	str	r2, [sp, #28]
 800af1e:	e014      	b.n	800af4a <_vfiprintf_r+0x13a>
 800af20:	eba0 0308 	sub.w	r3, r0, r8
 800af24:	fa09 f303 	lsl.w	r3, r9, r3
 800af28:	4313      	orrs	r3, r2
 800af2a:	46a2      	mov	sl, r4
 800af2c:	9304      	str	r3, [sp, #16]
 800af2e:	e7d2      	b.n	800aed6 <_vfiprintf_r+0xc6>
 800af30:	9b03      	ldr	r3, [sp, #12]
 800af32:	1d19      	adds	r1, r3, #4
 800af34:	681b      	ldr	r3, [r3, #0]
 800af36:	9103      	str	r1, [sp, #12]
 800af38:	2b00      	cmp	r3, #0
 800af3a:	bfbb      	ittet	lt
 800af3c:	425b      	neglt	r3, r3
 800af3e:	f042 0202 	orrlt.w	r2, r2, #2
 800af42:	9307      	strge	r3, [sp, #28]
 800af44:	9307      	strlt	r3, [sp, #28]
 800af46:	bfb8      	it	lt
 800af48:	9204      	strlt	r2, [sp, #16]
 800af4a:	7823      	ldrb	r3, [r4, #0]
 800af4c:	2b2e      	cmp	r3, #46	@ 0x2e
 800af4e:	d10a      	bne.n	800af66 <_vfiprintf_r+0x156>
 800af50:	7863      	ldrb	r3, [r4, #1]
 800af52:	2b2a      	cmp	r3, #42	@ 0x2a
 800af54:	d132      	bne.n	800afbc <_vfiprintf_r+0x1ac>
 800af56:	9b03      	ldr	r3, [sp, #12]
 800af58:	3402      	adds	r4, #2
 800af5a:	1d1a      	adds	r2, r3, #4
 800af5c:	681b      	ldr	r3, [r3, #0]
 800af5e:	9203      	str	r2, [sp, #12]
 800af60:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800af64:	9305      	str	r3, [sp, #20]
 800af66:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 800b030 <_vfiprintf_r+0x220>
 800af6a:	2203      	movs	r2, #3
 800af6c:	4650      	mov	r0, sl
 800af6e:	7821      	ldrb	r1, [r4, #0]
 800af70:	f7fd fc71 	bl	8008856 <memchr>
 800af74:	b138      	cbz	r0, 800af86 <_vfiprintf_r+0x176>
 800af76:	2240      	movs	r2, #64	@ 0x40
 800af78:	9b04      	ldr	r3, [sp, #16]
 800af7a:	eba0 000a 	sub.w	r0, r0, sl
 800af7e:	4082      	lsls	r2, r0
 800af80:	4313      	orrs	r3, r2
 800af82:	3401      	adds	r4, #1
 800af84:	9304      	str	r3, [sp, #16]
 800af86:	f814 1b01 	ldrb.w	r1, [r4], #1
 800af8a:	2206      	movs	r2, #6
 800af8c:	4829      	ldr	r0, [pc, #164]	@ (800b034 <_vfiprintf_r+0x224>)
 800af8e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800af92:	f7fd fc60 	bl	8008856 <memchr>
 800af96:	2800      	cmp	r0, #0
 800af98:	d03f      	beq.n	800b01a <_vfiprintf_r+0x20a>
 800af9a:	4b27      	ldr	r3, [pc, #156]	@ (800b038 <_vfiprintf_r+0x228>)
 800af9c:	bb1b      	cbnz	r3, 800afe6 <_vfiprintf_r+0x1d6>
 800af9e:	9b03      	ldr	r3, [sp, #12]
 800afa0:	3307      	adds	r3, #7
 800afa2:	f023 0307 	bic.w	r3, r3, #7
 800afa6:	3308      	adds	r3, #8
 800afa8:	9303      	str	r3, [sp, #12]
 800afaa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800afac:	443b      	add	r3, r7
 800afae:	9309      	str	r3, [sp, #36]	@ 0x24
 800afb0:	e76a      	b.n	800ae88 <_vfiprintf_r+0x78>
 800afb2:	460c      	mov	r4, r1
 800afb4:	2001      	movs	r0, #1
 800afb6:	fb0c 3202 	mla	r2, ip, r2, r3
 800afba:	e7a8      	b.n	800af0e <_vfiprintf_r+0xfe>
 800afbc:	2300      	movs	r3, #0
 800afbe:	f04f 0c0a 	mov.w	ip, #10
 800afc2:	4619      	mov	r1, r3
 800afc4:	3401      	adds	r4, #1
 800afc6:	9305      	str	r3, [sp, #20]
 800afc8:	4620      	mov	r0, r4
 800afca:	f810 2b01 	ldrb.w	r2, [r0], #1
 800afce:	3a30      	subs	r2, #48	@ 0x30
 800afd0:	2a09      	cmp	r2, #9
 800afd2:	d903      	bls.n	800afdc <_vfiprintf_r+0x1cc>
 800afd4:	2b00      	cmp	r3, #0
 800afd6:	d0c6      	beq.n	800af66 <_vfiprintf_r+0x156>
 800afd8:	9105      	str	r1, [sp, #20]
 800afda:	e7c4      	b.n	800af66 <_vfiprintf_r+0x156>
 800afdc:	4604      	mov	r4, r0
 800afde:	2301      	movs	r3, #1
 800afe0:	fb0c 2101 	mla	r1, ip, r1, r2
 800afe4:	e7f0      	b.n	800afc8 <_vfiprintf_r+0x1b8>
 800afe6:	ab03      	add	r3, sp, #12
 800afe8:	9300      	str	r3, [sp, #0]
 800afea:	462a      	mov	r2, r5
 800afec:	4630      	mov	r0, r6
 800afee:	4b13      	ldr	r3, [pc, #76]	@ (800b03c <_vfiprintf_r+0x22c>)
 800aff0:	a904      	add	r1, sp, #16
 800aff2:	f7fc febb 	bl	8007d6c <_printf_float>
 800aff6:	4607      	mov	r7, r0
 800aff8:	1c78      	adds	r0, r7, #1
 800affa:	d1d6      	bne.n	800afaa <_vfiprintf_r+0x19a>
 800affc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800affe:	07d9      	lsls	r1, r3, #31
 800b000:	d405      	bmi.n	800b00e <_vfiprintf_r+0x1fe>
 800b002:	89ab      	ldrh	r3, [r5, #12]
 800b004:	059a      	lsls	r2, r3, #22
 800b006:	d402      	bmi.n	800b00e <_vfiprintf_r+0x1fe>
 800b008:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b00a:	f7fd fc23 	bl	8008854 <__retarget_lock_release_recursive>
 800b00e:	89ab      	ldrh	r3, [r5, #12]
 800b010:	065b      	lsls	r3, r3, #25
 800b012:	f53f af1f 	bmi.w	800ae54 <_vfiprintf_r+0x44>
 800b016:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800b018:	e71e      	b.n	800ae58 <_vfiprintf_r+0x48>
 800b01a:	ab03      	add	r3, sp, #12
 800b01c:	9300      	str	r3, [sp, #0]
 800b01e:	462a      	mov	r2, r5
 800b020:	4630      	mov	r0, r6
 800b022:	4b06      	ldr	r3, [pc, #24]	@ (800b03c <_vfiprintf_r+0x22c>)
 800b024:	a904      	add	r1, sp, #16
 800b026:	f7fd f93f 	bl	80082a8 <_printf_i>
 800b02a:	e7e4      	b.n	800aff6 <_vfiprintf_r+0x1e6>
 800b02c:	0800b8e9 	.word	0x0800b8e9
 800b030:	0800b8ef 	.word	0x0800b8ef
 800b034:	0800b8f3 	.word	0x0800b8f3
 800b038:	08007d6d 	.word	0x08007d6d
 800b03c:	0800aded 	.word	0x0800aded

0800b040 <__swbuf_r>:
 800b040:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b042:	460e      	mov	r6, r1
 800b044:	4614      	mov	r4, r2
 800b046:	4605      	mov	r5, r0
 800b048:	b118      	cbz	r0, 800b052 <__swbuf_r+0x12>
 800b04a:	6a03      	ldr	r3, [r0, #32]
 800b04c:	b90b      	cbnz	r3, 800b052 <__swbuf_r+0x12>
 800b04e:	f7fd fad7 	bl	8008600 <__sinit>
 800b052:	69a3      	ldr	r3, [r4, #24]
 800b054:	60a3      	str	r3, [r4, #8]
 800b056:	89a3      	ldrh	r3, [r4, #12]
 800b058:	071a      	lsls	r2, r3, #28
 800b05a:	d501      	bpl.n	800b060 <__swbuf_r+0x20>
 800b05c:	6923      	ldr	r3, [r4, #16]
 800b05e:	b943      	cbnz	r3, 800b072 <__swbuf_r+0x32>
 800b060:	4621      	mov	r1, r4
 800b062:	4628      	mov	r0, r5
 800b064:	f000 f82a 	bl	800b0bc <__swsetup_r>
 800b068:	b118      	cbz	r0, 800b072 <__swbuf_r+0x32>
 800b06a:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 800b06e:	4638      	mov	r0, r7
 800b070:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b072:	6823      	ldr	r3, [r4, #0]
 800b074:	6922      	ldr	r2, [r4, #16]
 800b076:	b2f6      	uxtb	r6, r6
 800b078:	1a98      	subs	r0, r3, r2
 800b07a:	6963      	ldr	r3, [r4, #20]
 800b07c:	4637      	mov	r7, r6
 800b07e:	4283      	cmp	r3, r0
 800b080:	dc05      	bgt.n	800b08e <__swbuf_r+0x4e>
 800b082:	4621      	mov	r1, r4
 800b084:	4628      	mov	r0, r5
 800b086:	f7ff fdc9 	bl	800ac1c <_fflush_r>
 800b08a:	2800      	cmp	r0, #0
 800b08c:	d1ed      	bne.n	800b06a <__swbuf_r+0x2a>
 800b08e:	68a3      	ldr	r3, [r4, #8]
 800b090:	3b01      	subs	r3, #1
 800b092:	60a3      	str	r3, [r4, #8]
 800b094:	6823      	ldr	r3, [r4, #0]
 800b096:	1c5a      	adds	r2, r3, #1
 800b098:	6022      	str	r2, [r4, #0]
 800b09a:	701e      	strb	r6, [r3, #0]
 800b09c:	6962      	ldr	r2, [r4, #20]
 800b09e:	1c43      	adds	r3, r0, #1
 800b0a0:	429a      	cmp	r2, r3
 800b0a2:	d004      	beq.n	800b0ae <__swbuf_r+0x6e>
 800b0a4:	89a3      	ldrh	r3, [r4, #12]
 800b0a6:	07db      	lsls	r3, r3, #31
 800b0a8:	d5e1      	bpl.n	800b06e <__swbuf_r+0x2e>
 800b0aa:	2e0a      	cmp	r6, #10
 800b0ac:	d1df      	bne.n	800b06e <__swbuf_r+0x2e>
 800b0ae:	4621      	mov	r1, r4
 800b0b0:	4628      	mov	r0, r5
 800b0b2:	f7ff fdb3 	bl	800ac1c <_fflush_r>
 800b0b6:	2800      	cmp	r0, #0
 800b0b8:	d0d9      	beq.n	800b06e <__swbuf_r+0x2e>
 800b0ba:	e7d6      	b.n	800b06a <__swbuf_r+0x2a>

0800b0bc <__swsetup_r>:
 800b0bc:	b538      	push	{r3, r4, r5, lr}
 800b0be:	4b29      	ldr	r3, [pc, #164]	@ (800b164 <__swsetup_r+0xa8>)
 800b0c0:	4605      	mov	r5, r0
 800b0c2:	6818      	ldr	r0, [r3, #0]
 800b0c4:	460c      	mov	r4, r1
 800b0c6:	b118      	cbz	r0, 800b0d0 <__swsetup_r+0x14>
 800b0c8:	6a03      	ldr	r3, [r0, #32]
 800b0ca:	b90b      	cbnz	r3, 800b0d0 <__swsetup_r+0x14>
 800b0cc:	f7fd fa98 	bl	8008600 <__sinit>
 800b0d0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b0d4:	0719      	lsls	r1, r3, #28
 800b0d6:	d422      	bmi.n	800b11e <__swsetup_r+0x62>
 800b0d8:	06da      	lsls	r2, r3, #27
 800b0da:	d407      	bmi.n	800b0ec <__swsetup_r+0x30>
 800b0dc:	2209      	movs	r2, #9
 800b0de:	602a      	str	r2, [r5, #0]
 800b0e0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b0e4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800b0e8:	81a3      	strh	r3, [r4, #12]
 800b0ea:	e033      	b.n	800b154 <__swsetup_r+0x98>
 800b0ec:	0758      	lsls	r0, r3, #29
 800b0ee:	d512      	bpl.n	800b116 <__swsetup_r+0x5a>
 800b0f0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800b0f2:	b141      	cbz	r1, 800b106 <__swsetup_r+0x4a>
 800b0f4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800b0f8:	4299      	cmp	r1, r3
 800b0fa:	d002      	beq.n	800b102 <__swsetup_r+0x46>
 800b0fc:	4628      	mov	r0, r5
 800b0fe:	f7fe fa1f 	bl	8009540 <_free_r>
 800b102:	2300      	movs	r3, #0
 800b104:	6363      	str	r3, [r4, #52]	@ 0x34
 800b106:	89a3      	ldrh	r3, [r4, #12]
 800b108:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800b10c:	81a3      	strh	r3, [r4, #12]
 800b10e:	2300      	movs	r3, #0
 800b110:	6063      	str	r3, [r4, #4]
 800b112:	6923      	ldr	r3, [r4, #16]
 800b114:	6023      	str	r3, [r4, #0]
 800b116:	89a3      	ldrh	r3, [r4, #12]
 800b118:	f043 0308 	orr.w	r3, r3, #8
 800b11c:	81a3      	strh	r3, [r4, #12]
 800b11e:	6923      	ldr	r3, [r4, #16]
 800b120:	b94b      	cbnz	r3, 800b136 <__swsetup_r+0x7a>
 800b122:	89a3      	ldrh	r3, [r4, #12]
 800b124:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800b128:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b12c:	d003      	beq.n	800b136 <__swsetup_r+0x7a>
 800b12e:	4621      	mov	r1, r4
 800b130:	4628      	mov	r0, r5
 800b132:	f000 f882 	bl	800b23a <__smakebuf_r>
 800b136:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b13a:	f013 0201 	ands.w	r2, r3, #1
 800b13e:	d00a      	beq.n	800b156 <__swsetup_r+0x9a>
 800b140:	2200      	movs	r2, #0
 800b142:	60a2      	str	r2, [r4, #8]
 800b144:	6962      	ldr	r2, [r4, #20]
 800b146:	4252      	negs	r2, r2
 800b148:	61a2      	str	r2, [r4, #24]
 800b14a:	6922      	ldr	r2, [r4, #16]
 800b14c:	b942      	cbnz	r2, 800b160 <__swsetup_r+0xa4>
 800b14e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800b152:	d1c5      	bne.n	800b0e0 <__swsetup_r+0x24>
 800b154:	bd38      	pop	{r3, r4, r5, pc}
 800b156:	0799      	lsls	r1, r3, #30
 800b158:	bf58      	it	pl
 800b15a:	6962      	ldrpl	r2, [r4, #20]
 800b15c:	60a2      	str	r2, [r4, #8]
 800b15e:	e7f4      	b.n	800b14a <__swsetup_r+0x8e>
 800b160:	2000      	movs	r0, #0
 800b162:	e7f7      	b.n	800b154 <__swsetup_r+0x98>
 800b164:	20000308 	.word	0x20000308

0800b168 <_raise_r>:
 800b168:	291f      	cmp	r1, #31
 800b16a:	b538      	push	{r3, r4, r5, lr}
 800b16c:	4605      	mov	r5, r0
 800b16e:	460c      	mov	r4, r1
 800b170:	d904      	bls.n	800b17c <_raise_r+0x14>
 800b172:	2316      	movs	r3, #22
 800b174:	6003      	str	r3, [r0, #0]
 800b176:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800b17a:	bd38      	pop	{r3, r4, r5, pc}
 800b17c:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800b17e:	b112      	cbz	r2, 800b186 <_raise_r+0x1e>
 800b180:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800b184:	b94b      	cbnz	r3, 800b19a <_raise_r+0x32>
 800b186:	4628      	mov	r0, r5
 800b188:	f000 f830 	bl	800b1ec <_getpid_r>
 800b18c:	4622      	mov	r2, r4
 800b18e:	4601      	mov	r1, r0
 800b190:	4628      	mov	r0, r5
 800b192:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b196:	f000 b817 	b.w	800b1c8 <_kill_r>
 800b19a:	2b01      	cmp	r3, #1
 800b19c:	d00a      	beq.n	800b1b4 <_raise_r+0x4c>
 800b19e:	1c59      	adds	r1, r3, #1
 800b1a0:	d103      	bne.n	800b1aa <_raise_r+0x42>
 800b1a2:	2316      	movs	r3, #22
 800b1a4:	6003      	str	r3, [r0, #0]
 800b1a6:	2001      	movs	r0, #1
 800b1a8:	e7e7      	b.n	800b17a <_raise_r+0x12>
 800b1aa:	2100      	movs	r1, #0
 800b1ac:	4620      	mov	r0, r4
 800b1ae:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800b1b2:	4798      	blx	r3
 800b1b4:	2000      	movs	r0, #0
 800b1b6:	e7e0      	b.n	800b17a <_raise_r+0x12>

0800b1b8 <raise>:
 800b1b8:	4b02      	ldr	r3, [pc, #8]	@ (800b1c4 <raise+0xc>)
 800b1ba:	4601      	mov	r1, r0
 800b1bc:	6818      	ldr	r0, [r3, #0]
 800b1be:	f7ff bfd3 	b.w	800b168 <_raise_r>
 800b1c2:	bf00      	nop
 800b1c4:	20000308 	.word	0x20000308

0800b1c8 <_kill_r>:
 800b1c8:	b538      	push	{r3, r4, r5, lr}
 800b1ca:	2300      	movs	r3, #0
 800b1cc:	4d06      	ldr	r5, [pc, #24]	@ (800b1e8 <_kill_r+0x20>)
 800b1ce:	4604      	mov	r4, r0
 800b1d0:	4608      	mov	r0, r1
 800b1d2:	4611      	mov	r1, r2
 800b1d4:	602b      	str	r3, [r5, #0]
 800b1d6:	f7f6 fcf3 	bl	8001bc0 <_kill>
 800b1da:	1c43      	adds	r3, r0, #1
 800b1dc:	d102      	bne.n	800b1e4 <_kill_r+0x1c>
 800b1de:	682b      	ldr	r3, [r5, #0]
 800b1e0:	b103      	cbz	r3, 800b1e4 <_kill_r+0x1c>
 800b1e2:	6023      	str	r3, [r4, #0]
 800b1e4:	bd38      	pop	{r3, r4, r5, pc}
 800b1e6:	bf00      	nop
 800b1e8:	20001300 	.word	0x20001300

0800b1ec <_getpid_r>:
 800b1ec:	f7f6 bce6 	b.w	8001bbc <_getpid>

0800b1f0 <__swhatbuf_r>:
 800b1f0:	b570      	push	{r4, r5, r6, lr}
 800b1f2:	460c      	mov	r4, r1
 800b1f4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b1f8:	4615      	mov	r5, r2
 800b1fa:	2900      	cmp	r1, #0
 800b1fc:	461e      	mov	r6, r3
 800b1fe:	b096      	sub	sp, #88	@ 0x58
 800b200:	da0c      	bge.n	800b21c <__swhatbuf_r+0x2c>
 800b202:	89a3      	ldrh	r3, [r4, #12]
 800b204:	2100      	movs	r1, #0
 800b206:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800b20a:	bf14      	ite	ne
 800b20c:	2340      	movne	r3, #64	@ 0x40
 800b20e:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800b212:	2000      	movs	r0, #0
 800b214:	6031      	str	r1, [r6, #0]
 800b216:	602b      	str	r3, [r5, #0]
 800b218:	b016      	add	sp, #88	@ 0x58
 800b21a:	bd70      	pop	{r4, r5, r6, pc}
 800b21c:	466a      	mov	r2, sp
 800b21e:	f000 f849 	bl	800b2b4 <_fstat_r>
 800b222:	2800      	cmp	r0, #0
 800b224:	dbed      	blt.n	800b202 <__swhatbuf_r+0x12>
 800b226:	9901      	ldr	r1, [sp, #4]
 800b228:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800b22c:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800b230:	4259      	negs	r1, r3
 800b232:	4159      	adcs	r1, r3
 800b234:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800b238:	e7eb      	b.n	800b212 <__swhatbuf_r+0x22>

0800b23a <__smakebuf_r>:
 800b23a:	898b      	ldrh	r3, [r1, #12]
 800b23c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b23e:	079d      	lsls	r5, r3, #30
 800b240:	4606      	mov	r6, r0
 800b242:	460c      	mov	r4, r1
 800b244:	d507      	bpl.n	800b256 <__smakebuf_r+0x1c>
 800b246:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800b24a:	6023      	str	r3, [r4, #0]
 800b24c:	6123      	str	r3, [r4, #16]
 800b24e:	2301      	movs	r3, #1
 800b250:	6163      	str	r3, [r4, #20]
 800b252:	b003      	add	sp, #12
 800b254:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b256:	466a      	mov	r2, sp
 800b258:	ab01      	add	r3, sp, #4
 800b25a:	f7ff ffc9 	bl	800b1f0 <__swhatbuf_r>
 800b25e:	9f00      	ldr	r7, [sp, #0]
 800b260:	4605      	mov	r5, r0
 800b262:	4639      	mov	r1, r7
 800b264:	4630      	mov	r0, r6
 800b266:	f7fe fd17 	bl	8009c98 <_malloc_r>
 800b26a:	b948      	cbnz	r0, 800b280 <__smakebuf_r+0x46>
 800b26c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b270:	059a      	lsls	r2, r3, #22
 800b272:	d4ee      	bmi.n	800b252 <__smakebuf_r+0x18>
 800b274:	f023 0303 	bic.w	r3, r3, #3
 800b278:	f043 0302 	orr.w	r3, r3, #2
 800b27c:	81a3      	strh	r3, [r4, #12]
 800b27e:	e7e2      	b.n	800b246 <__smakebuf_r+0xc>
 800b280:	89a3      	ldrh	r3, [r4, #12]
 800b282:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800b286:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b28a:	81a3      	strh	r3, [r4, #12]
 800b28c:	9b01      	ldr	r3, [sp, #4]
 800b28e:	6020      	str	r0, [r4, #0]
 800b290:	b15b      	cbz	r3, 800b2aa <__smakebuf_r+0x70>
 800b292:	4630      	mov	r0, r6
 800b294:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b298:	f000 f81e 	bl	800b2d8 <_isatty_r>
 800b29c:	b128      	cbz	r0, 800b2aa <__smakebuf_r+0x70>
 800b29e:	89a3      	ldrh	r3, [r4, #12]
 800b2a0:	f023 0303 	bic.w	r3, r3, #3
 800b2a4:	f043 0301 	orr.w	r3, r3, #1
 800b2a8:	81a3      	strh	r3, [r4, #12]
 800b2aa:	89a3      	ldrh	r3, [r4, #12]
 800b2ac:	431d      	orrs	r5, r3
 800b2ae:	81a5      	strh	r5, [r4, #12]
 800b2b0:	e7cf      	b.n	800b252 <__smakebuf_r+0x18>
	...

0800b2b4 <_fstat_r>:
 800b2b4:	b538      	push	{r3, r4, r5, lr}
 800b2b6:	2300      	movs	r3, #0
 800b2b8:	4d06      	ldr	r5, [pc, #24]	@ (800b2d4 <_fstat_r+0x20>)
 800b2ba:	4604      	mov	r4, r0
 800b2bc:	4608      	mov	r0, r1
 800b2be:	4611      	mov	r1, r2
 800b2c0:	602b      	str	r3, [r5, #0]
 800b2c2:	f7f6 fcac 	bl	8001c1e <_fstat>
 800b2c6:	1c43      	adds	r3, r0, #1
 800b2c8:	d102      	bne.n	800b2d0 <_fstat_r+0x1c>
 800b2ca:	682b      	ldr	r3, [r5, #0]
 800b2cc:	b103      	cbz	r3, 800b2d0 <_fstat_r+0x1c>
 800b2ce:	6023      	str	r3, [r4, #0]
 800b2d0:	bd38      	pop	{r3, r4, r5, pc}
 800b2d2:	bf00      	nop
 800b2d4:	20001300 	.word	0x20001300

0800b2d8 <_isatty_r>:
 800b2d8:	b538      	push	{r3, r4, r5, lr}
 800b2da:	2300      	movs	r3, #0
 800b2dc:	4d05      	ldr	r5, [pc, #20]	@ (800b2f4 <_isatty_r+0x1c>)
 800b2de:	4604      	mov	r4, r0
 800b2e0:	4608      	mov	r0, r1
 800b2e2:	602b      	str	r3, [r5, #0]
 800b2e4:	f7f6 fca0 	bl	8001c28 <_isatty>
 800b2e8:	1c43      	adds	r3, r0, #1
 800b2ea:	d102      	bne.n	800b2f2 <_isatty_r+0x1a>
 800b2ec:	682b      	ldr	r3, [r5, #0]
 800b2ee:	b103      	cbz	r3, 800b2f2 <_isatty_r+0x1a>
 800b2f0:	6023      	str	r3, [r4, #0]
 800b2f2:	bd38      	pop	{r3, r4, r5, pc}
 800b2f4:	20001300 	.word	0x20001300

0800b2f8 <_init>:
 800b2f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b2fa:	bf00      	nop
 800b2fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b2fe:	bc08      	pop	{r3}
 800b300:	469e      	mov	lr, r3
 800b302:	4770      	bx	lr

0800b304 <_fini>:
 800b304:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b306:	bf00      	nop
 800b308:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b30a:	bc08      	pop	{r3}
 800b30c:	469e      	mov	lr, r3
 800b30e:	4770      	bx	lr
