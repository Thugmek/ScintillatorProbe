
ScintilatorProbeSoftware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e990  08000110  08000110  00001110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005a0  0800eaa0  0800eaa0  0000faa0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800f040  0800f040  00011358  2**0
                  CONTENTS
  4 .ARM          00000008  0800f040  0800f040  00010040  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800f048  0800f048  00011358  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800f048  0800f048  00010048  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800f04c  0800f04c  0001004c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000358  20000000  0800f050  00011000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000137c  20000358  0800f3a8  00011358  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200016d4  0800f3a8  000116d4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00011358  2**0
                  CONTENTS, READONLY
 12 .debug_info   000113e6  00000000  00000000  00011381  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000032ec  00000000  00000000  00022767  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000010a8  00000000  00000000  00025a58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000c90  00000000  00000000  00026b00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001afe8  00000000  00000000  00027790  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00013882  00000000  00000000  00042778  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008f405  00000000  00000000  00055ffa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000e53ff  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005c40  00000000  00000000  000e5444  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000071  00000000  00000000  000eb084  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000358 	.word	0x20000358
 800012c:	00000000 	.word	0x00000000
 8000130:	0800ea88 	.word	0x0800ea88

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	2000035c 	.word	0x2000035c
 800014c:	0800ea88 	.word	0x0800ea88

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_fmul>:
 8000160:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000164:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000168:	bf1e      	ittt	ne
 800016a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 800016e:	ea92 0f0c 	teqne	r2, ip
 8000172:	ea93 0f0c 	teqne	r3, ip
 8000176:	d06f      	beq.n	8000258 <__aeabi_fmul+0xf8>
 8000178:	441a      	add	r2, r3
 800017a:	ea80 0c01 	eor.w	ip, r0, r1
 800017e:	0240      	lsls	r0, r0, #9
 8000180:	bf18      	it	ne
 8000182:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000186:	d01e      	beq.n	80001c6 <__aeabi_fmul+0x66>
 8000188:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800018c:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000190:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000194:	fba0 3101 	umull	r3, r1, r0, r1
 8000198:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 800019c:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 80001a0:	bf3e      	ittt	cc
 80001a2:	0049      	lslcc	r1, r1, #1
 80001a4:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80001a8:	005b      	lslcc	r3, r3, #1
 80001aa:	ea40 0001 	orr.w	r0, r0, r1
 80001ae:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 80001b2:	2afd      	cmp	r2, #253	@ 0xfd
 80001b4:	d81d      	bhi.n	80001f2 <__aeabi_fmul+0x92>
 80001b6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80001ba:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80001be:	bf08      	it	eq
 80001c0:	f020 0001 	biceq.w	r0, r0, #1
 80001c4:	4770      	bx	lr
 80001c6:	f090 0f00 	teq	r0, #0
 80001ca:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 80001ce:	bf08      	it	eq
 80001d0:	0249      	lsleq	r1, r1, #9
 80001d2:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80001d6:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80001da:	3a7f      	subs	r2, #127	@ 0x7f
 80001dc:	bfc2      	ittt	gt
 80001de:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 80001e2:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80001e6:	4770      	bxgt	lr
 80001e8:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80001ec:	f04f 0300 	mov.w	r3, #0
 80001f0:	3a01      	subs	r2, #1
 80001f2:	dc5d      	bgt.n	80002b0 <__aeabi_fmul+0x150>
 80001f4:	f112 0f19 	cmn.w	r2, #25
 80001f8:	bfdc      	itt	le
 80001fa:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 80001fe:	4770      	bxle	lr
 8000200:	f1c2 0200 	rsb	r2, r2, #0
 8000204:	0041      	lsls	r1, r0, #1
 8000206:	fa21 f102 	lsr.w	r1, r1, r2
 800020a:	f1c2 0220 	rsb	r2, r2, #32
 800020e:	fa00 fc02 	lsl.w	ip, r0, r2
 8000212:	ea5f 0031 	movs.w	r0, r1, rrx
 8000216:	f140 0000 	adc.w	r0, r0, #0
 800021a:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 800021e:	bf08      	it	eq
 8000220:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000224:	4770      	bx	lr
 8000226:	f092 0f00 	teq	r2, #0
 800022a:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 800022e:	bf02      	ittt	eq
 8000230:	0040      	lsleq	r0, r0, #1
 8000232:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000236:	3a01      	subeq	r2, #1
 8000238:	d0f9      	beq.n	800022e <__aeabi_fmul+0xce>
 800023a:	ea40 000c 	orr.w	r0, r0, ip
 800023e:	f093 0f00 	teq	r3, #0
 8000242:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000246:	bf02      	ittt	eq
 8000248:	0049      	lsleq	r1, r1, #1
 800024a:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 800024e:	3b01      	subeq	r3, #1
 8000250:	d0f9      	beq.n	8000246 <__aeabi_fmul+0xe6>
 8000252:	ea41 010c 	orr.w	r1, r1, ip
 8000256:	e78f      	b.n	8000178 <__aeabi_fmul+0x18>
 8000258:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 800025c:	ea92 0f0c 	teq	r2, ip
 8000260:	bf18      	it	ne
 8000262:	ea93 0f0c 	teqne	r3, ip
 8000266:	d00a      	beq.n	800027e <__aeabi_fmul+0x11e>
 8000268:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 800026c:	bf18      	it	ne
 800026e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000272:	d1d8      	bne.n	8000226 <__aeabi_fmul+0xc6>
 8000274:	ea80 0001 	eor.w	r0, r0, r1
 8000278:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 800027c:	4770      	bx	lr
 800027e:	f090 0f00 	teq	r0, #0
 8000282:	bf17      	itett	ne
 8000284:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000288:	4608      	moveq	r0, r1
 800028a:	f091 0f00 	teqne	r1, #0
 800028e:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 8000292:	d014      	beq.n	80002be <__aeabi_fmul+0x15e>
 8000294:	ea92 0f0c 	teq	r2, ip
 8000298:	d101      	bne.n	800029e <__aeabi_fmul+0x13e>
 800029a:	0242      	lsls	r2, r0, #9
 800029c:	d10f      	bne.n	80002be <__aeabi_fmul+0x15e>
 800029e:	ea93 0f0c 	teq	r3, ip
 80002a2:	d103      	bne.n	80002ac <__aeabi_fmul+0x14c>
 80002a4:	024b      	lsls	r3, r1, #9
 80002a6:	bf18      	it	ne
 80002a8:	4608      	movne	r0, r1
 80002aa:	d108      	bne.n	80002be <__aeabi_fmul+0x15e>
 80002ac:	ea80 0001 	eor.w	r0, r0, r1
 80002b0:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 80002b4:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 80002b8:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80002bc:	4770      	bx	lr
 80002be:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 80002c2:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 80002c6:	4770      	bx	lr

080002c8 <__aeabi_drsub>:
 80002c8:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002cc:	e002      	b.n	80002d4 <__adddf3>
 80002ce:	bf00      	nop

080002d0 <__aeabi_dsub>:
 80002d0:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002d4 <__adddf3>:
 80002d4:	b530      	push	{r4, r5, lr}
 80002d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002de:	ea94 0f05 	teq	r4, r5
 80002e2:	bf08      	it	eq
 80002e4:	ea90 0f02 	teqeq	r0, r2
 80002e8:	bf1f      	itttt	ne
 80002ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002fa:	f000 80e2 	beq.w	80004c2 <__adddf3+0x1ee>
 80002fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000302:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000306:	bfb8      	it	lt
 8000308:	426d      	neglt	r5, r5
 800030a:	dd0c      	ble.n	8000326 <__adddf3+0x52>
 800030c:	442c      	add	r4, r5
 800030e:	ea80 0202 	eor.w	r2, r0, r2
 8000312:	ea81 0303 	eor.w	r3, r1, r3
 8000316:	ea82 0000 	eor.w	r0, r2, r0
 800031a:	ea83 0101 	eor.w	r1, r3, r1
 800031e:	ea80 0202 	eor.w	r2, r0, r2
 8000322:	ea81 0303 	eor.w	r3, r1, r3
 8000326:	2d36      	cmp	r5, #54	@ 0x36
 8000328:	bf88      	it	hi
 800032a:	bd30      	pophi	{r4, r5, pc}
 800032c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000330:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000334:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000338:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800033c:	d002      	beq.n	8000344 <__adddf3+0x70>
 800033e:	4240      	negs	r0, r0
 8000340:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000344:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000348:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800034c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000350:	d002      	beq.n	8000358 <__adddf3+0x84>
 8000352:	4252      	negs	r2, r2
 8000354:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000358:	ea94 0f05 	teq	r4, r5
 800035c:	f000 80a7 	beq.w	80004ae <__adddf3+0x1da>
 8000360:	f1a4 0401 	sub.w	r4, r4, #1
 8000364:	f1d5 0e20 	rsbs	lr, r5, #32
 8000368:	db0d      	blt.n	8000386 <__adddf3+0xb2>
 800036a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800036e:	fa22 f205 	lsr.w	r2, r2, r5
 8000372:	1880      	adds	r0, r0, r2
 8000374:	f141 0100 	adc.w	r1, r1, #0
 8000378:	fa03 f20e 	lsl.w	r2, r3, lr
 800037c:	1880      	adds	r0, r0, r2
 800037e:	fa43 f305 	asr.w	r3, r3, r5
 8000382:	4159      	adcs	r1, r3
 8000384:	e00e      	b.n	80003a4 <__adddf3+0xd0>
 8000386:	f1a5 0520 	sub.w	r5, r5, #32
 800038a:	f10e 0e20 	add.w	lr, lr, #32
 800038e:	2a01      	cmp	r2, #1
 8000390:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000394:	bf28      	it	cs
 8000396:	f04c 0c02 	orrcs.w	ip, ip, #2
 800039a:	fa43 f305 	asr.w	r3, r3, r5
 800039e:	18c0      	adds	r0, r0, r3
 80003a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003a4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003a8:	d507      	bpl.n	80003ba <__adddf3+0xe6>
 80003aa:	f04f 0e00 	mov.w	lr, #0
 80003ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80003b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80003ba:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003be:	d31b      	bcc.n	80003f8 <__adddf3+0x124>
 80003c0:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003c4:	d30c      	bcc.n	80003e0 <__adddf3+0x10c>
 80003c6:	0849      	lsrs	r1, r1, #1
 80003c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80003cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d0:	f104 0401 	add.w	r4, r4, #1
 80003d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d8:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003dc:	f080 809a 	bcs.w	8000514 <__adddf3+0x240>
 80003e0:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003e4:	bf08      	it	eq
 80003e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003ea:	f150 0000 	adcs.w	r0, r0, #0
 80003ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003f2:	ea41 0105 	orr.w	r1, r1, r5
 80003f6:	bd30      	pop	{r4, r5, pc}
 80003f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003fc:	4140      	adcs	r0, r0
 80003fe:	eb41 0101 	adc.w	r1, r1, r1
 8000402:	3c01      	subs	r4, #1
 8000404:	bf28      	it	cs
 8000406:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800040a:	d2e9      	bcs.n	80003e0 <__adddf3+0x10c>
 800040c:	f091 0f00 	teq	r1, #0
 8000410:	bf04      	itt	eq
 8000412:	4601      	moveq	r1, r0
 8000414:	2000      	moveq	r0, #0
 8000416:	fab1 f381 	clz	r3, r1
 800041a:	bf08      	it	eq
 800041c:	3320      	addeq	r3, #32
 800041e:	f1a3 030b 	sub.w	r3, r3, #11
 8000422:	f1b3 0220 	subs.w	r2, r3, #32
 8000426:	da0c      	bge.n	8000442 <__adddf3+0x16e>
 8000428:	320c      	adds	r2, #12
 800042a:	dd08      	ble.n	800043e <__adddf3+0x16a>
 800042c:	f102 0c14 	add.w	ip, r2, #20
 8000430:	f1c2 020c 	rsb	r2, r2, #12
 8000434:	fa01 f00c 	lsl.w	r0, r1, ip
 8000438:	fa21 f102 	lsr.w	r1, r1, r2
 800043c:	e00c      	b.n	8000458 <__adddf3+0x184>
 800043e:	f102 0214 	add.w	r2, r2, #20
 8000442:	bfd8      	it	le
 8000444:	f1c2 0c20 	rsble	ip, r2, #32
 8000448:	fa01 f102 	lsl.w	r1, r1, r2
 800044c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000450:	bfdc      	itt	le
 8000452:	ea41 010c 	orrle.w	r1, r1, ip
 8000456:	4090      	lslle	r0, r2
 8000458:	1ae4      	subs	r4, r4, r3
 800045a:	bfa2      	ittt	ge
 800045c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000460:	4329      	orrge	r1, r5
 8000462:	bd30      	popge	{r4, r5, pc}
 8000464:	ea6f 0404 	mvn.w	r4, r4
 8000468:	3c1f      	subs	r4, #31
 800046a:	da1c      	bge.n	80004a6 <__adddf3+0x1d2>
 800046c:	340c      	adds	r4, #12
 800046e:	dc0e      	bgt.n	800048e <__adddf3+0x1ba>
 8000470:	f104 0414 	add.w	r4, r4, #20
 8000474:	f1c4 0220 	rsb	r2, r4, #32
 8000478:	fa20 f004 	lsr.w	r0, r0, r4
 800047c:	fa01 f302 	lsl.w	r3, r1, r2
 8000480:	ea40 0003 	orr.w	r0, r0, r3
 8000484:	fa21 f304 	lsr.w	r3, r1, r4
 8000488:	ea45 0103 	orr.w	r1, r5, r3
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	f1c4 040c 	rsb	r4, r4, #12
 8000492:	f1c4 0220 	rsb	r2, r4, #32
 8000496:	fa20 f002 	lsr.w	r0, r0, r2
 800049a:	fa01 f304 	lsl.w	r3, r1, r4
 800049e:	ea40 0003 	orr.w	r0, r0, r3
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	fa21 f004 	lsr.w	r0, r1, r4
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	f094 0f00 	teq	r4, #0
 80004b2:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004b6:	bf06      	itte	eq
 80004b8:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004bc:	3401      	addeq	r4, #1
 80004be:	3d01      	subne	r5, #1
 80004c0:	e74e      	b.n	8000360 <__adddf3+0x8c>
 80004c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004c6:	bf18      	it	ne
 80004c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004cc:	d029      	beq.n	8000522 <__adddf3+0x24e>
 80004ce:	ea94 0f05 	teq	r4, r5
 80004d2:	bf08      	it	eq
 80004d4:	ea90 0f02 	teqeq	r0, r2
 80004d8:	d005      	beq.n	80004e6 <__adddf3+0x212>
 80004da:	ea54 0c00 	orrs.w	ip, r4, r0
 80004de:	bf04      	itt	eq
 80004e0:	4619      	moveq	r1, r3
 80004e2:	4610      	moveq	r0, r2
 80004e4:	bd30      	pop	{r4, r5, pc}
 80004e6:	ea91 0f03 	teq	r1, r3
 80004ea:	bf1e      	ittt	ne
 80004ec:	2100      	movne	r1, #0
 80004ee:	2000      	movne	r0, #0
 80004f0:	bd30      	popne	{r4, r5, pc}
 80004f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004f6:	d105      	bne.n	8000504 <__adddf3+0x230>
 80004f8:	0040      	lsls	r0, r0, #1
 80004fa:	4149      	adcs	r1, r1
 80004fc:	bf28      	it	cs
 80004fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000502:	bd30      	pop	{r4, r5, pc}
 8000504:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000508:	bf3c      	itt	cc
 800050a:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800050e:	bd30      	popcc	{r4, r5, pc}
 8000510:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000514:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000518:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800051c:	f04f 0000 	mov.w	r0, #0
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000526:	bf1a      	itte	ne
 8000528:	4619      	movne	r1, r3
 800052a:	4610      	movne	r0, r2
 800052c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000530:	bf1c      	itt	ne
 8000532:	460b      	movne	r3, r1
 8000534:	4602      	movne	r2, r0
 8000536:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800053a:	bf06      	itte	eq
 800053c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000540:	ea91 0f03 	teqeq	r1, r3
 8000544:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000548:	bd30      	pop	{r4, r5, pc}
 800054a:	bf00      	nop

0800054c <__aeabi_ui2d>:
 800054c:	f090 0f00 	teq	r0, #0
 8000550:	bf04      	itt	eq
 8000552:	2100      	moveq	r1, #0
 8000554:	4770      	bxeq	lr
 8000556:	b530      	push	{r4, r5, lr}
 8000558:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800055c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000560:	f04f 0500 	mov.w	r5, #0
 8000564:	f04f 0100 	mov.w	r1, #0
 8000568:	e750      	b.n	800040c <__adddf3+0x138>
 800056a:	bf00      	nop

0800056c <__aeabi_i2d>:
 800056c:	f090 0f00 	teq	r0, #0
 8000570:	bf04      	itt	eq
 8000572:	2100      	moveq	r1, #0
 8000574:	4770      	bxeq	lr
 8000576:	b530      	push	{r4, r5, lr}
 8000578:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800057c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000580:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000584:	bf48      	it	mi
 8000586:	4240      	negmi	r0, r0
 8000588:	f04f 0100 	mov.w	r1, #0
 800058c:	e73e      	b.n	800040c <__adddf3+0x138>
 800058e:	bf00      	nop

08000590 <__aeabi_f2d>:
 8000590:	0042      	lsls	r2, r0, #1
 8000592:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000596:	ea4f 0131 	mov.w	r1, r1, rrx
 800059a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800059e:	bf1f      	itttt	ne
 80005a0:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80005a4:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005a8:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005ac:	4770      	bxne	lr
 80005ae:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005b2:	bf08      	it	eq
 80005b4:	4770      	bxeq	lr
 80005b6:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005ba:	bf04      	itt	eq
 80005bc:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005c0:	4770      	bxeq	lr
 80005c2:	b530      	push	{r4, r5, lr}
 80005c4:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005cc:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005d0:	e71c      	b.n	800040c <__adddf3+0x138>
 80005d2:	bf00      	nop

080005d4 <__aeabi_ul2d>:
 80005d4:	ea50 0201 	orrs.w	r2, r0, r1
 80005d8:	bf08      	it	eq
 80005da:	4770      	bxeq	lr
 80005dc:	b530      	push	{r4, r5, lr}
 80005de:	f04f 0500 	mov.w	r5, #0
 80005e2:	e00a      	b.n	80005fa <__aeabi_l2d+0x16>

080005e4 <__aeabi_l2d>:
 80005e4:	ea50 0201 	orrs.w	r2, r0, r1
 80005e8:	bf08      	it	eq
 80005ea:	4770      	bxeq	lr
 80005ec:	b530      	push	{r4, r5, lr}
 80005ee:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005f2:	d502      	bpl.n	80005fa <__aeabi_l2d+0x16>
 80005f4:	4240      	negs	r0, r0
 80005f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005fa:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005fe:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000602:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000606:	f43f aed8 	beq.w	80003ba <__adddf3+0xe6>
 800060a:	f04f 0203 	mov.w	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000622:	f1c2 0320 	rsb	r3, r2, #32
 8000626:	fa00 fc03 	lsl.w	ip, r0, r3
 800062a:	fa20 f002 	lsr.w	r0, r0, r2
 800062e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000632:	ea40 000e 	orr.w	r0, r0, lr
 8000636:	fa21 f102 	lsr.w	r1, r1, r2
 800063a:	4414      	add	r4, r2
 800063c:	e6bd      	b.n	80003ba <__adddf3+0xe6>
 800063e:	bf00      	nop

08000640 <__aeabi_dmul>:
 8000640:	b570      	push	{r4, r5, r6, lr}
 8000642:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000646:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800064a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800064e:	bf1d      	ittte	ne
 8000650:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000654:	ea94 0f0c 	teqne	r4, ip
 8000658:	ea95 0f0c 	teqne	r5, ip
 800065c:	f000 f8de 	bleq	800081c <__aeabi_dmul+0x1dc>
 8000660:	442c      	add	r4, r5
 8000662:	ea81 0603 	eor.w	r6, r1, r3
 8000666:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800066a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800066e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000672:	bf18      	it	ne
 8000674:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000678:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800067c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000680:	d038      	beq.n	80006f4 <__aeabi_dmul+0xb4>
 8000682:	fba0 ce02 	umull	ip, lr, r0, r2
 8000686:	f04f 0500 	mov.w	r5, #0
 800068a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800068e:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 8000692:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000696:	f04f 0600 	mov.w	r6, #0
 800069a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800069e:	f09c 0f00 	teq	ip, #0
 80006a2:	bf18      	it	ne
 80006a4:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006ac:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006b0:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006b4:	d204      	bcs.n	80006c0 <__aeabi_dmul+0x80>
 80006b6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006ba:	416d      	adcs	r5, r5
 80006bc:	eb46 0606 	adc.w	r6, r6, r6
 80006c0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006c4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006cc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006d4:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006d8:	bf88      	it	hi
 80006da:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006de:	d81e      	bhi.n	800071e <__aeabi_dmul+0xde>
 80006e0:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006e4:	bf08      	it	eq
 80006e6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006ea:	f150 0000 	adcs.w	r0, r0, #0
 80006ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006f2:	bd70      	pop	{r4, r5, r6, pc}
 80006f4:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006f8:	ea46 0101 	orr.w	r1, r6, r1
 80006fc:	ea40 0002 	orr.w	r0, r0, r2
 8000700:	ea81 0103 	eor.w	r1, r1, r3
 8000704:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000708:	bfc2      	ittt	gt
 800070a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800070e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000712:	bd70      	popgt	{r4, r5, r6, pc}
 8000714:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000718:	f04f 0e00 	mov.w	lr, #0
 800071c:	3c01      	subs	r4, #1
 800071e:	f300 80ab 	bgt.w	8000878 <__aeabi_dmul+0x238>
 8000722:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000726:	bfde      	ittt	le
 8000728:	2000      	movle	r0, #0
 800072a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800072e:	bd70      	pople	{r4, r5, r6, pc}
 8000730:	f1c4 0400 	rsb	r4, r4, #0
 8000734:	3c20      	subs	r4, #32
 8000736:	da35      	bge.n	80007a4 <__aeabi_dmul+0x164>
 8000738:	340c      	adds	r4, #12
 800073a:	dc1b      	bgt.n	8000774 <__aeabi_dmul+0x134>
 800073c:	f104 0414 	add.w	r4, r4, #20
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f305 	lsl.w	r3, r0, r5
 8000748:	fa20 f004 	lsr.w	r0, r0, r4
 800074c:	fa01 f205 	lsl.w	r2, r1, r5
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000758:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800075c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000760:	fa21 f604 	lsr.w	r6, r1, r4
 8000764:	eb42 0106 	adc.w	r1, r2, r6
 8000768:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800076c:	bf08      	it	eq
 800076e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000772:	bd70      	pop	{r4, r5, r6, pc}
 8000774:	f1c4 040c 	rsb	r4, r4, #12
 8000778:	f1c4 0520 	rsb	r5, r4, #32
 800077c:	fa00 f304 	lsl.w	r3, r0, r4
 8000780:	fa20 f005 	lsr.w	r0, r0, r5
 8000784:	fa01 f204 	lsl.w	r2, r1, r4
 8000788:	ea40 0002 	orr.w	r0, r0, r2
 800078c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000790:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000794:	f141 0100 	adc.w	r1, r1, #0
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f1c4 0520 	rsb	r5, r4, #32
 80007a8:	fa00 f205 	lsl.w	r2, r0, r5
 80007ac:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b0:	fa20 f304 	lsr.w	r3, r0, r4
 80007b4:	fa01 f205 	lsl.w	r2, r1, r5
 80007b8:	ea43 0302 	orr.w	r3, r3, r2
 80007bc:	fa21 f004 	lsr.w	r0, r1, r4
 80007c0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007c4:	fa21 f204 	lsr.w	r2, r1, r4
 80007c8:	ea20 0002 	bic.w	r0, r0, r2
 80007cc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007d4:	bf08      	it	eq
 80007d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007da:	bd70      	pop	{r4, r5, r6, pc}
 80007dc:	f094 0f00 	teq	r4, #0
 80007e0:	d10f      	bne.n	8000802 <__aeabi_dmul+0x1c2>
 80007e2:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007e6:	0040      	lsls	r0, r0, #1
 80007e8:	eb41 0101 	adc.w	r1, r1, r1
 80007ec:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007f0:	bf08      	it	eq
 80007f2:	3c01      	subeq	r4, #1
 80007f4:	d0f7      	beq.n	80007e6 <__aeabi_dmul+0x1a6>
 80007f6:	ea41 0106 	orr.w	r1, r1, r6
 80007fa:	f095 0f00 	teq	r5, #0
 80007fe:	bf18      	it	ne
 8000800:	4770      	bxne	lr
 8000802:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000806:	0052      	lsls	r2, r2, #1
 8000808:	eb43 0303 	adc.w	r3, r3, r3
 800080c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000810:	bf08      	it	eq
 8000812:	3d01      	subeq	r5, #1
 8000814:	d0f7      	beq.n	8000806 <__aeabi_dmul+0x1c6>
 8000816:	ea43 0306 	orr.w	r3, r3, r6
 800081a:	4770      	bx	lr
 800081c:	ea94 0f0c 	teq	r4, ip
 8000820:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000824:	bf18      	it	ne
 8000826:	ea95 0f0c 	teqne	r5, ip
 800082a:	d00c      	beq.n	8000846 <__aeabi_dmul+0x206>
 800082c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000830:	bf18      	it	ne
 8000832:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000836:	d1d1      	bne.n	80007dc <__aeabi_dmul+0x19c>
 8000838:	ea81 0103 	eor.w	r1, r1, r3
 800083c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000840:	f04f 0000 	mov.w	r0, #0
 8000844:	bd70      	pop	{r4, r5, r6, pc}
 8000846:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800084a:	bf06      	itte	eq
 800084c:	4610      	moveq	r0, r2
 800084e:	4619      	moveq	r1, r3
 8000850:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000854:	d019      	beq.n	800088a <__aeabi_dmul+0x24a>
 8000856:	ea94 0f0c 	teq	r4, ip
 800085a:	d102      	bne.n	8000862 <__aeabi_dmul+0x222>
 800085c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000860:	d113      	bne.n	800088a <__aeabi_dmul+0x24a>
 8000862:	ea95 0f0c 	teq	r5, ip
 8000866:	d105      	bne.n	8000874 <__aeabi_dmul+0x234>
 8000868:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800086c:	bf1c      	itt	ne
 800086e:	4610      	movne	r0, r2
 8000870:	4619      	movne	r1, r3
 8000872:	d10a      	bne.n	800088a <__aeabi_dmul+0x24a>
 8000874:	ea81 0103 	eor.w	r1, r1, r3
 8000878:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800087c:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000880:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000884:	f04f 0000 	mov.w	r0, #0
 8000888:	bd70      	pop	{r4, r5, r6, pc}
 800088a:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 800088e:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 8000892:	bd70      	pop	{r4, r5, r6, pc}

08000894 <__aeabi_ddiv>:
 8000894:	b570      	push	{r4, r5, r6, lr}
 8000896:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800089a:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800089e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008a2:	bf1d      	ittte	ne
 80008a4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a8:	ea94 0f0c 	teqne	r4, ip
 80008ac:	ea95 0f0c 	teqne	r5, ip
 80008b0:	f000 f8a7 	bleq	8000a02 <__aeabi_ddiv+0x16e>
 80008b4:	eba4 0405 	sub.w	r4, r4, r5
 80008b8:	ea81 0e03 	eor.w	lr, r1, r3
 80008bc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008c4:	f000 8088 	beq.w	80009d8 <__aeabi_ddiv+0x144>
 80008c8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008cc:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008d0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008d4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008dc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008e4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e8:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008ec:	429d      	cmp	r5, r3
 80008ee:	bf08      	it	eq
 80008f0:	4296      	cmpeq	r6, r2
 80008f2:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008f6:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008fa:	d202      	bcs.n	8000902 <__aeabi_ddiv+0x6e>
 80008fc:	085b      	lsrs	r3, r3, #1
 80008fe:	ea4f 0232 	mov.w	r2, r2, rrx
 8000902:	1ab6      	subs	r6, r6, r2
 8000904:	eb65 0503 	sbc.w	r5, r5, r3
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000912:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 000c 	orrcs.w	r0, r0, ip
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000958:	085b      	lsrs	r3, r3, #1
 800095a:	ea4f 0232 	mov.w	r2, r2, rrx
 800095e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000962:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000966:	bf22      	ittt	cs
 8000968:	1ab6      	subcs	r6, r6, r2
 800096a:	4675      	movcs	r5, lr
 800096c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000970:	ea55 0e06 	orrs.w	lr, r5, r6
 8000974:	d018      	beq.n	80009a8 <__aeabi_ddiv+0x114>
 8000976:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800097a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800097e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000982:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000986:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800098a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800098e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000992:	d1c0      	bne.n	8000916 <__aeabi_ddiv+0x82>
 8000994:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000998:	d10b      	bne.n	80009b2 <__aeabi_ddiv+0x11e>
 800099a:	ea41 0100 	orr.w	r1, r1, r0
 800099e:	f04f 0000 	mov.w	r0, #0
 80009a2:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80009a6:	e7b6      	b.n	8000916 <__aeabi_ddiv+0x82>
 80009a8:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009ac:	bf04      	itt	eq
 80009ae:	4301      	orreq	r1, r0
 80009b0:	2000      	moveq	r0, #0
 80009b2:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009b6:	bf88      	it	hi
 80009b8:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009bc:	f63f aeaf 	bhi.w	800071e <__aeabi_dmul+0xde>
 80009c0:	ebb5 0c03 	subs.w	ip, r5, r3
 80009c4:	bf04      	itt	eq
 80009c6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009ca:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009ce:	f150 0000 	adcs.w	r0, r0, #0
 80009d2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	pop	{r4, r5, r6, pc}
 80009d8:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009dc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009e4:	bfc2      	ittt	gt
 80009e6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009ee:	bd70      	popgt	{r4, r5, r6, pc}
 80009f0:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009f4:	f04f 0e00 	mov.w	lr, #0
 80009f8:	3c01      	subs	r4, #1
 80009fa:	e690      	b.n	800071e <__aeabi_dmul+0xde>
 80009fc:	ea45 0e06 	orr.w	lr, r5, r6
 8000a00:	e68d      	b.n	800071e <__aeabi_dmul+0xde>
 8000a02:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a06:	ea94 0f0c 	teq	r4, ip
 8000a0a:	bf08      	it	eq
 8000a0c:	ea95 0f0c 	teqeq	r5, ip
 8000a10:	f43f af3b 	beq.w	800088a <__aeabi_dmul+0x24a>
 8000a14:	ea94 0f0c 	teq	r4, ip
 8000a18:	d10a      	bne.n	8000a30 <__aeabi_ddiv+0x19c>
 8000a1a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a1e:	f47f af34 	bne.w	800088a <__aeabi_dmul+0x24a>
 8000a22:	ea95 0f0c 	teq	r5, ip
 8000a26:	f47f af25 	bne.w	8000874 <__aeabi_dmul+0x234>
 8000a2a:	4610      	mov	r0, r2
 8000a2c:	4619      	mov	r1, r3
 8000a2e:	e72c      	b.n	800088a <__aeabi_dmul+0x24a>
 8000a30:	ea95 0f0c 	teq	r5, ip
 8000a34:	d106      	bne.n	8000a44 <__aeabi_ddiv+0x1b0>
 8000a36:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a3a:	f43f aefd 	beq.w	8000838 <__aeabi_dmul+0x1f8>
 8000a3e:	4610      	mov	r0, r2
 8000a40:	4619      	mov	r1, r3
 8000a42:	e722      	b.n	800088a <__aeabi_dmul+0x24a>
 8000a44:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a48:	bf18      	it	ne
 8000a4a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a4e:	f47f aec5 	bne.w	80007dc <__aeabi_dmul+0x19c>
 8000a52:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a56:	f47f af0d 	bne.w	8000874 <__aeabi_dmul+0x234>
 8000a5a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a5e:	f47f aeeb 	bne.w	8000838 <__aeabi_dmul+0x1f8>
 8000a62:	e712      	b.n	800088a <__aeabi_dmul+0x24a>

08000a64 <__gedf2>:
 8000a64:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8000a68:	e006      	b.n	8000a78 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__ledf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	e002      	b.n	8000a78 <__cmpdf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__cmpdf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a84:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a88:	bf18      	it	ne
 8000a8a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a8e:	d01b      	beq.n	8000ac8 <__cmpdf2+0x54>
 8000a90:	b001      	add	sp, #4
 8000a92:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a96:	bf0c      	ite	eq
 8000a98:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a9c:	ea91 0f03 	teqne	r1, r3
 8000aa0:	bf02      	ittt	eq
 8000aa2:	ea90 0f02 	teqeq	r0, r2
 8000aa6:	2000      	moveq	r0, #0
 8000aa8:	4770      	bxeq	lr
 8000aaa:	f110 0f00 	cmn.w	r0, #0
 8000aae:	ea91 0f03 	teq	r1, r3
 8000ab2:	bf58      	it	pl
 8000ab4:	4299      	cmppl	r1, r3
 8000ab6:	bf08      	it	eq
 8000ab8:	4290      	cmpeq	r0, r2
 8000aba:	bf2c      	ite	cs
 8000abc:	17d8      	asrcs	r0, r3, #31
 8000abe:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000ac2:	f040 0001 	orr.w	r0, r0, #1
 8000ac6:	4770      	bx	lr
 8000ac8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000acc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad0:	d102      	bne.n	8000ad8 <__cmpdf2+0x64>
 8000ad2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ad6:	d107      	bne.n	8000ae8 <__cmpdf2+0x74>
 8000ad8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000adc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae0:	d1d6      	bne.n	8000a90 <__cmpdf2+0x1c>
 8000ae2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ae6:	d0d3      	beq.n	8000a90 <__cmpdf2+0x1c>
 8000ae8:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aec:	4770      	bx	lr
 8000aee:	bf00      	nop

08000af0 <__aeabi_cdrcmple>:
 8000af0:	4684      	mov	ip, r0
 8000af2:	4610      	mov	r0, r2
 8000af4:	4662      	mov	r2, ip
 8000af6:	468c      	mov	ip, r1
 8000af8:	4619      	mov	r1, r3
 8000afa:	4663      	mov	r3, ip
 8000afc:	e000      	b.n	8000b00 <__aeabi_cdcmpeq>
 8000afe:	bf00      	nop

08000b00 <__aeabi_cdcmpeq>:
 8000b00:	b501      	push	{r0, lr}
 8000b02:	f7ff ffb7 	bl	8000a74 <__cmpdf2>
 8000b06:	2800      	cmp	r0, #0
 8000b08:	bf48      	it	mi
 8000b0a:	f110 0f00 	cmnmi.w	r0, #0
 8000b0e:	bd01      	pop	{r0, pc}

08000b10 <__aeabi_dcmpeq>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff fff4 	bl	8000b00 <__aeabi_cdcmpeq>
 8000b18:	bf0c      	ite	eq
 8000b1a:	2001      	moveq	r0, #1
 8000b1c:	2000      	movne	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmplt>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffea 	bl	8000b00 <__aeabi_cdcmpeq>
 8000b2c:	bf34      	ite	cc
 8000b2e:	2001      	movcc	r0, #1
 8000b30:	2000      	movcs	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmple>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffe0 	bl	8000b00 <__aeabi_cdcmpeq>
 8000b40:	bf94      	ite	ls
 8000b42:	2001      	movls	r0, #1
 8000b44:	2000      	movhi	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpge>:
 8000b4c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b50:	f7ff ffce 	bl	8000af0 <__aeabi_cdrcmple>
 8000b54:	bf94      	ite	ls
 8000b56:	2001      	movls	r0, #1
 8000b58:	2000      	movhi	r0, #0
 8000b5a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5e:	bf00      	nop

08000b60 <__aeabi_dcmpgt>:
 8000b60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b64:	f7ff ffc4 	bl	8000af0 <__aeabi_cdrcmple>
 8000b68:	bf34      	ite	cc
 8000b6a:	2001      	movcc	r0, #1
 8000b6c:	2000      	movcs	r0, #0
 8000b6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b72:	bf00      	nop

08000b74 <__aeabi_dcmpun>:
 8000b74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b7c:	d102      	bne.n	8000b84 <__aeabi_dcmpun+0x10>
 8000b7e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b82:	d10a      	bne.n	8000b9a <__aeabi_dcmpun+0x26>
 8000b84:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b8c:	d102      	bne.n	8000b94 <__aeabi_dcmpun+0x20>
 8000b8e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b92:	d102      	bne.n	8000b9a <__aeabi_dcmpun+0x26>
 8000b94:	f04f 0000 	mov.w	r0, #0
 8000b98:	4770      	bx	lr
 8000b9a:	f04f 0001 	mov.w	r0, #1
 8000b9e:	4770      	bx	lr

08000ba0 <__aeabi_d2iz>:
 8000ba0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ba4:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000ba8:	d215      	bcs.n	8000bd6 <__aeabi_d2iz+0x36>
 8000baa:	d511      	bpl.n	8000bd0 <__aeabi_d2iz+0x30>
 8000bac:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bb0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bb4:	d912      	bls.n	8000bdc <__aeabi_d2iz+0x3c>
 8000bb6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bba:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bbe:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bc2:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bc6:	fa23 f002 	lsr.w	r0, r3, r2
 8000bca:	bf18      	it	ne
 8000bcc:	4240      	negne	r0, r0
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d105      	bne.n	8000be8 <__aeabi_d2iz+0x48>
 8000bdc:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000be0:	bf08      	it	eq
 8000be2:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000be6:	4770      	bx	lr
 8000be8:	f04f 0000 	mov.w	r0, #0
 8000bec:	4770      	bx	lr
 8000bee:	bf00      	nop

08000bf0 <__aeabi_d2uiz>:
 8000bf0:	004a      	lsls	r2, r1, #1
 8000bf2:	d211      	bcs.n	8000c18 <__aeabi_d2uiz+0x28>
 8000bf4:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bf8:	d211      	bcs.n	8000c1e <__aeabi_d2uiz+0x2e>
 8000bfa:	d50d      	bpl.n	8000c18 <__aeabi_d2uiz+0x28>
 8000bfc:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000c00:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c04:	d40e      	bmi.n	8000c24 <__aeabi_d2uiz+0x34>
 8000c06:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c0a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000c0e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c12:	fa23 f002 	lsr.w	r0, r3, r2
 8000c16:	4770      	bx	lr
 8000c18:	f04f 0000 	mov.w	r0, #0
 8000c1c:	4770      	bx	lr
 8000c1e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c22:	d102      	bne.n	8000c2a <__aeabi_d2uiz+0x3a>
 8000c24:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000c28:	4770      	bx	lr
 8000c2a:	f04f 0000 	mov.w	r0, #0
 8000c2e:	4770      	bx	lr

08000c30 <__aeabi_d2f>:
 8000c30:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c34:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c38:	bf24      	itt	cs
 8000c3a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c3e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c42:	d90d      	bls.n	8000c60 <__aeabi_d2f+0x30>
 8000c44:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c48:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c4c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c50:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c54:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c58:	bf08      	it	eq
 8000c5a:	f020 0001 	biceq.w	r0, r0, #1
 8000c5e:	4770      	bx	lr
 8000c60:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c64:	d121      	bne.n	8000caa <__aeabi_d2f+0x7a>
 8000c66:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c6a:	bfbc      	itt	lt
 8000c6c:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c70:	4770      	bxlt	lr
 8000c72:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c76:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c7a:	f1c2 0218 	rsb	r2, r2, #24
 8000c7e:	f1c2 0c20 	rsb	ip, r2, #32
 8000c82:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c86:	fa20 f002 	lsr.w	r0, r0, r2
 8000c8a:	bf18      	it	ne
 8000c8c:	f040 0001 	orrne.w	r0, r0, #1
 8000c90:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c94:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c98:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c9c:	ea40 000c 	orr.w	r0, r0, ip
 8000ca0:	fa23 f302 	lsr.w	r3, r3, r2
 8000ca4:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ca8:	e7cc      	b.n	8000c44 <__aeabi_d2f+0x14>
 8000caa:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000cae:	d107      	bne.n	8000cc0 <__aeabi_d2f+0x90>
 8000cb0:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cb4:	bf1e      	ittt	ne
 8000cb6:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000cba:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000cbe:	4770      	bxne	lr
 8000cc0:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000cc4:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000cc8:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ccc:	4770      	bx	lr
 8000cce:	bf00      	nop

08000cd0 <__aeabi_frsub>:
 8000cd0:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000cd4:	e002      	b.n	8000cdc <__addsf3>
 8000cd6:	bf00      	nop

08000cd8 <__aeabi_fsub>:
 8000cd8:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000cdc <__addsf3>:
 8000cdc:	0042      	lsls	r2, r0, #1
 8000cde:	bf1f      	itttt	ne
 8000ce0:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000ce4:	ea92 0f03 	teqne	r2, r3
 8000ce8:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000cec:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000cf0:	d06a      	beq.n	8000dc8 <__addsf3+0xec>
 8000cf2:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000cf6:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000cfa:	bfc1      	itttt	gt
 8000cfc:	18d2      	addgt	r2, r2, r3
 8000cfe:	4041      	eorgt	r1, r0
 8000d00:	4048      	eorgt	r0, r1
 8000d02:	4041      	eorgt	r1, r0
 8000d04:	bfb8      	it	lt
 8000d06:	425b      	neglt	r3, r3
 8000d08:	2b19      	cmp	r3, #25
 8000d0a:	bf88      	it	hi
 8000d0c:	4770      	bxhi	lr
 8000d0e:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000d12:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000d16:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000d1a:	bf18      	it	ne
 8000d1c:	4240      	negne	r0, r0
 8000d1e:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000d22:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000d26:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000d2a:	bf18      	it	ne
 8000d2c:	4249      	negne	r1, r1
 8000d2e:	ea92 0f03 	teq	r2, r3
 8000d32:	d03f      	beq.n	8000db4 <__addsf3+0xd8>
 8000d34:	f1a2 0201 	sub.w	r2, r2, #1
 8000d38:	fa41 fc03 	asr.w	ip, r1, r3
 8000d3c:	eb10 000c 	adds.w	r0, r0, ip
 8000d40:	f1c3 0320 	rsb	r3, r3, #32
 8000d44:	fa01 f103 	lsl.w	r1, r1, r3
 8000d48:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000d4c:	d502      	bpl.n	8000d54 <__addsf3+0x78>
 8000d4e:	4249      	negs	r1, r1
 8000d50:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000d54:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000d58:	d313      	bcc.n	8000d82 <__addsf3+0xa6>
 8000d5a:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000d5e:	d306      	bcc.n	8000d6e <__addsf3+0x92>
 8000d60:	0840      	lsrs	r0, r0, #1
 8000d62:	ea4f 0131 	mov.w	r1, r1, rrx
 8000d66:	f102 0201 	add.w	r2, r2, #1
 8000d6a:	2afe      	cmp	r2, #254	@ 0xfe
 8000d6c:	d251      	bcs.n	8000e12 <__addsf3+0x136>
 8000d6e:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000d72:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d76:	bf08      	it	eq
 8000d78:	f020 0001 	biceq.w	r0, r0, #1
 8000d7c:	ea40 0003 	orr.w	r0, r0, r3
 8000d80:	4770      	bx	lr
 8000d82:	0049      	lsls	r1, r1, #1
 8000d84:	eb40 0000 	adc.w	r0, r0, r0
 8000d88:	3a01      	subs	r2, #1
 8000d8a:	bf28      	it	cs
 8000d8c:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000d90:	d2ed      	bcs.n	8000d6e <__addsf3+0x92>
 8000d92:	fab0 fc80 	clz	ip, r0
 8000d96:	f1ac 0c08 	sub.w	ip, ip, #8
 8000d9a:	ebb2 020c 	subs.w	r2, r2, ip
 8000d9e:	fa00 f00c 	lsl.w	r0, r0, ip
 8000da2:	bfaa      	itet	ge
 8000da4:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000da8:	4252      	neglt	r2, r2
 8000daa:	4318      	orrge	r0, r3
 8000dac:	bfbc      	itt	lt
 8000dae:	40d0      	lsrlt	r0, r2
 8000db0:	4318      	orrlt	r0, r3
 8000db2:	4770      	bx	lr
 8000db4:	f092 0f00 	teq	r2, #0
 8000db8:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000dbc:	bf06      	itte	eq
 8000dbe:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000dc2:	3201      	addeq	r2, #1
 8000dc4:	3b01      	subne	r3, #1
 8000dc6:	e7b5      	b.n	8000d34 <__addsf3+0x58>
 8000dc8:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000dcc:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000dd0:	bf18      	it	ne
 8000dd2:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000dd6:	d021      	beq.n	8000e1c <__addsf3+0x140>
 8000dd8:	ea92 0f03 	teq	r2, r3
 8000ddc:	d004      	beq.n	8000de8 <__addsf3+0x10c>
 8000dde:	f092 0f00 	teq	r2, #0
 8000de2:	bf08      	it	eq
 8000de4:	4608      	moveq	r0, r1
 8000de6:	4770      	bx	lr
 8000de8:	ea90 0f01 	teq	r0, r1
 8000dec:	bf1c      	itt	ne
 8000dee:	2000      	movne	r0, #0
 8000df0:	4770      	bxne	lr
 8000df2:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000df6:	d104      	bne.n	8000e02 <__addsf3+0x126>
 8000df8:	0040      	lsls	r0, r0, #1
 8000dfa:	bf28      	it	cs
 8000dfc:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000e00:	4770      	bx	lr
 8000e02:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000e06:	bf3c      	itt	cc
 8000e08:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000e0c:	4770      	bxcc	lr
 8000e0e:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000e12:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000e16:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000e1a:	4770      	bx	lr
 8000e1c:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000e20:	bf16      	itet	ne
 8000e22:	4608      	movne	r0, r1
 8000e24:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000e28:	4601      	movne	r1, r0
 8000e2a:	0242      	lsls	r2, r0, #9
 8000e2c:	bf06      	itte	eq
 8000e2e:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000e32:	ea90 0f01 	teqeq	r0, r1
 8000e36:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000e3a:	4770      	bx	lr

08000e3c <__aeabi_ui2f>:
 8000e3c:	f04f 0300 	mov.w	r3, #0
 8000e40:	e004      	b.n	8000e4c <__aeabi_i2f+0x8>
 8000e42:	bf00      	nop

08000e44 <__aeabi_i2f>:
 8000e44:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000e48:	bf48      	it	mi
 8000e4a:	4240      	negmi	r0, r0
 8000e4c:	ea5f 0c00 	movs.w	ip, r0
 8000e50:	bf08      	it	eq
 8000e52:	4770      	bxeq	lr
 8000e54:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000e58:	4601      	mov	r1, r0
 8000e5a:	f04f 0000 	mov.w	r0, #0
 8000e5e:	e01c      	b.n	8000e9a <__aeabi_l2f+0x2a>

08000e60 <__aeabi_ul2f>:
 8000e60:	ea50 0201 	orrs.w	r2, r0, r1
 8000e64:	bf08      	it	eq
 8000e66:	4770      	bxeq	lr
 8000e68:	f04f 0300 	mov.w	r3, #0
 8000e6c:	e00a      	b.n	8000e84 <__aeabi_l2f+0x14>
 8000e6e:	bf00      	nop

08000e70 <__aeabi_l2f>:
 8000e70:	ea50 0201 	orrs.w	r2, r0, r1
 8000e74:	bf08      	it	eq
 8000e76:	4770      	bxeq	lr
 8000e78:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000e7c:	d502      	bpl.n	8000e84 <__aeabi_l2f+0x14>
 8000e7e:	4240      	negs	r0, r0
 8000e80:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000e84:	ea5f 0c01 	movs.w	ip, r1
 8000e88:	bf02      	ittt	eq
 8000e8a:	4684      	moveq	ip, r0
 8000e8c:	4601      	moveq	r1, r0
 8000e8e:	2000      	moveq	r0, #0
 8000e90:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000e94:	bf08      	it	eq
 8000e96:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000e9a:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000e9e:	fabc f28c 	clz	r2, ip
 8000ea2:	3a08      	subs	r2, #8
 8000ea4:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000ea8:	db10      	blt.n	8000ecc <__aeabi_l2f+0x5c>
 8000eaa:	fa01 fc02 	lsl.w	ip, r1, r2
 8000eae:	4463      	add	r3, ip
 8000eb0:	fa00 fc02 	lsl.w	ip, r0, r2
 8000eb4:	f1c2 0220 	rsb	r2, r2, #32
 8000eb8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000ebc:	fa20 f202 	lsr.w	r2, r0, r2
 8000ec0:	eb43 0002 	adc.w	r0, r3, r2
 8000ec4:	bf08      	it	eq
 8000ec6:	f020 0001 	biceq.w	r0, r0, #1
 8000eca:	4770      	bx	lr
 8000ecc:	f102 0220 	add.w	r2, r2, #32
 8000ed0:	fa01 fc02 	lsl.w	ip, r1, r2
 8000ed4:	f1c2 0220 	rsb	r2, r2, #32
 8000ed8:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000edc:	fa21 f202 	lsr.w	r2, r1, r2
 8000ee0:	eb43 0002 	adc.w	r0, r3, r2
 8000ee4:	bf08      	it	eq
 8000ee6:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000eea:	4770      	bx	lr

08000eec <__aeabi_f2iz>:
 8000eec:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000ef0:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 8000ef4:	d30f      	bcc.n	8000f16 <__aeabi_f2iz+0x2a>
 8000ef6:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 8000efa:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000efe:	d90d      	bls.n	8000f1c <__aeabi_f2iz+0x30>
 8000f00:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000f04:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000f08:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000f0c:	fa23 f002 	lsr.w	r0, r3, r2
 8000f10:	bf18      	it	ne
 8000f12:	4240      	negne	r0, r0
 8000f14:	4770      	bx	lr
 8000f16:	f04f 0000 	mov.w	r0, #0
 8000f1a:	4770      	bx	lr
 8000f1c:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 8000f20:	d101      	bne.n	8000f26 <__aeabi_f2iz+0x3a>
 8000f22:	0242      	lsls	r2, r0, #9
 8000f24:	d105      	bne.n	8000f32 <__aeabi_f2iz+0x46>
 8000f26:	f010 4000 	ands.w	r0, r0, #2147483648	@ 0x80000000
 8000f2a:	bf08      	it	eq
 8000f2c:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000f30:	4770      	bx	lr
 8000f32:	f04f 0000 	mov.w	r0, #0
 8000f36:	4770      	bx	lr

08000f38 <__aeabi_uldivmod>:
 8000f38:	b953      	cbnz	r3, 8000f50 <__aeabi_uldivmod+0x18>
 8000f3a:	b94a      	cbnz	r2, 8000f50 <__aeabi_uldivmod+0x18>
 8000f3c:	2900      	cmp	r1, #0
 8000f3e:	bf08      	it	eq
 8000f40:	2800      	cmpeq	r0, #0
 8000f42:	bf1c      	itt	ne
 8000f44:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000f48:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000f4c:	f000 b99e 	b.w	800128c <__aeabi_idiv0>
 8000f50:	f1ad 0c08 	sub.w	ip, sp, #8
 8000f54:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000f58:	f000 f83c 	bl	8000fd4 <__udivmoddi4>
 8000f5c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000f60:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000f64:	b004      	add	sp, #16
 8000f66:	4770      	bx	lr

08000f68 <__aeabi_d2lz>:
 8000f68:	b538      	push	{r3, r4, r5, lr}
 8000f6a:	2200      	movs	r2, #0
 8000f6c:	2300      	movs	r3, #0
 8000f6e:	4604      	mov	r4, r0
 8000f70:	460d      	mov	r5, r1
 8000f72:	f7ff fdd7 	bl	8000b24 <__aeabi_dcmplt>
 8000f76:	b928      	cbnz	r0, 8000f84 <__aeabi_d2lz+0x1c>
 8000f78:	4620      	mov	r0, r4
 8000f7a:	4629      	mov	r1, r5
 8000f7c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000f80:	f000 b80a 	b.w	8000f98 <__aeabi_d2ulz>
 8000f84:	4620      	mov	r0, r4
 8000f86:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000f8a:	f000 f805 	bl	8000f98 <__aeabi_d2ulz>
 8000f8e:	4240      	negs	r0, r0
 8000f90:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000f94:	bd38      	pop	{r3, r4, r5, pc}
 8000f96:	bf00      	nop

08000f98 <__aeabi_d2ulz>:
 8000f98:	b5d0      	push	{r4, r6, r7, lr}
 8000f9a:	2200      	movs	r2, #0
 8000f9c:	4b0b      	ldr	r3, [pc, #44]	@ (8000fcc <__aeabi_d2ulz+0x34>)
 8000f9e:	4606      	mov	r6, r0
 8000fa0:	460f      	mov	r7, r1
 8000fa2:	f7ff fb4d 	bl	8000640 <__aeabi_dmul>
 8000fa6:	f7ff fe23 	bl	8000bf0 <__aeabi_d2uiz>
 8000faa:	4604      	mov	r4, r0
 8000fac:	f7ff face 	bl	800054c <__aeabi_ui2d>
 8000fb0:	2200      	movs	r2, #0
 8000fb2:	4b07      	ldr	r3, [pc, #28]	@ (8000fd0 <__aeabi_d2ulz+0x38>)
 8000fb4:	f7ff fb44 	bl	8000640 <__aeabi_dmul>
 8000fb8:	4602      	mov	r2, r0
 8000fba:	460b      	mov	r3, r1
 8000fbc:	4630      	mov	r0, r6
 8000fbe:	4639      	mov	r1, r7
 8000fc0:	f7ff f986 	bl	80002d0 <__aeabi_dsub>
 8000fc4:	f7ff fe14 	bl	8000bf0 <__aeabi_d2uiz>
 8000fc8:	4621      	mov	r1, r4
 8000fca:	bdd0      	pop	{r4, r6, r7, pc}
 8000fcc:	3df00000 	.word	0x3df00000
 8000fd0:	41f00000 	.word	0x41f00000

08000fd4 <__udivmoddi4>:
 8000fd4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000fd8:	9d08      	ldr	r5, [sp, #32]
 8000fda:	460c      	mov	r4, r1
 8000fdc:	2b00      	cmp	r3, #0
 8000fde:	d14e      	bne.n	800107e <__udivmoddi4+0xaa>
 8000fe0:	4694      	mov	ip, r2
 8000fe2:	458c      	cmp	ip, r1
 8000fe4:	4686      	mov	lr, r0
 8000fe6:	fab2 f282 	clz	r2, r2
 8000fea:	d962      	bls.n	80010b2 <__udivmoddi4+0xde>
 8000fec:	b14a      	cbz	r2, 8001002 <__udivmoddi4+0x2e>
 8000fee:	f1c2 0320 	rsb	r3, r2, #32
 8000ff2:	4091      	lsls	r1, r2
 8000ff4:	fa20 f303 	lsr.w	r3, r0, r3
 8000ff8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ffc:	4319      	orrs	r1, r3
 8000ffe:	fa00 fe02 	lsl.w	lr, r0, r2
 8001002:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8001006:	fbb1 f4f7 	udiv	r4, r1, r7
 800100a:	fb07 1114 	mls	r1, r7, r4, r1
 800100e:	fa1f f68c 	uxth.w	r6, ip
 8001012:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8001016:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800101a:	fb04 f106 	mul.w	r1, r4, r6
 800101e:	4299      	cmp	r1, r3
 8001020:	d90a      	bls.n	8001038 <__udivmoddi4+0x64>
 8001022:	eb1c 0303 	adds.w	r3, ip, r3
 8001026:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 800102a:	f080 8110 	bcs.w	800124e <__udivmoddi4+0x27a>
 800102e:	4299      	cmp	r1, r3
 8001030:	f240 810d 	bls.w	800124e <__udivmoddi4+0x27a>
 8001034:	3c02      	subs	r4, #2
 8001036:	4463      	add	r3, ip
 8001038:	1a59      	subs	r1, r3, r1
 800103a:	fbb1 f0f7 	udiv	r0, r1, r7
 800103e:	fb07 1110 	mls	r1, r7, r0, r1
 8001042:	fb00 f606 	mul.w	r6, r0, r6
 8001046:	fa1f f38e 	uxth.w	r3, lr
 800104a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800104e:	429e      	cmp	r6, r3
 8001050:	d90a      	bls.n	8001068 <__udivmoddi4+0x94>
 8001052:	eb1c 0303 	adds.w	r3, ip, r3
 8001056:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 800105a:	f080 80fa 	bcs.w	8001252 <__udivmoddi4+0x27e>
 800105e:	429e      	cmp	r6, r3
 8001060:	f240 80f7 	bls.w	8001252 <__udivmoddi4+0x27e>
 8001064:	4463      	add	r3, ip
 8001066:	3802      	subs	r0, #2
 8001068:	2100      	movs	r1, #0
 800106a:	1b9b      	subs	r3, r3, r6
 800106c:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8001070:	b11d      	cbz	r5, 800107a <__udivmoddi4+0xa6>
 8001072:	40d3      	lsrs	r3, r2
 8001074:	2200      	movs	r2, #0
 8001076:	e9c5 3200 	strd	r3, r2, [r5]
 800107a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800107e:	428b      	cmp	r3, r1
 8001080:	d905      	bls.n	800108e <__udivmoddi4+0xba>
 8001082:	b10d      	cbz	r5, 8001088 <__udivmoddi4+0xb4>
 8001084:	e9c5 0100 	strd	r0, r1, [r5]
 8001088:	2100      	movs	r1, #0
 800108a:	4608      	mov	r0, r1
 800108c:	e7f5      	b.n	800107a <__udivmoddi4+0xa6>
 800108e:	fab3 f183 	clz	r1, r3
 8001092:	2900      	cmp	r1, #0
 8001094:	d146      	bne.n	8001124 <__udivmoddi4+0x150>
 8001096:	42a3      	cmp	r3, r4
 8001098:	d302      	bcc.n	80010a0 <__udivmoddi4+0xcc>
 800109a:	4290      	cmp	r0, r2
 800109c:	f0c0 80ee 	bcc.w	800127c <__udivmoddi4+0x2a8>
 80010a0:	1a86      	subs	r6, r0, r2
 80010a2:	eb64 0303 	sbc.w	r3, r4, r3
 80010a6:	2001      	movs	r0, #1
 80010a8:	2d00      	cmp	r5, #0
 80010aa:	d0e6      	beq.n	800107a <__udivmoddi4+0xa6>
 80010ac:	e9c5 6300 	strd	r6, r3, [r5]
 80010b0:	e7e3      	b.n	800107a <__udivmoddi4+0xa6>
 80010b2:	2a00      	cmp	r2, #0
 80010b4:	f040 808f 	bne.w	80011d6 <__udivmoddi4+0x202>
 80010b8:	eba1 040c 	sub.w	r4, r1, ip
 80010bc:	2101      	movs	r1, #1
 80010be:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80010c2:	fa1f f78c 	uxth.w	r7, ip
 80010c6:	fbb4 f6f8 	udiv	r6, r4, r8
 80010ca:	fb08 4416 	mls	r4, r8, r6, r4
 80010ce:	fb07 f006 	mul.w	r0, r7, r6
 80010d2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80010d6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80010da:	4298      	cmp	r0, r3
 80010dc:	d908      	bls.n	80010f0 <__udivmoddi4+0x11c>
 80010de:	eb1c 0303 	adds.w	r3, ip, r3
 80010e2:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 80010e6:	d202      	bcs.n	80010ee <__udivmoddi4+0x11a>
 80010e8:	4298      	cmp	r0, r3
 80010ea:	f200 80cb 	bhi.w	8001284 <__udivmoddi4+0x2b0>
 80010ee:	4626      	mov	r6, r4
 80010f0:	1a1c      	subs	r4, r3, r0
 80010f2:	fbb4 f0f8 	udiv	r0, r4, r8
 80010f6:	fb08 4410 	mls	r4, r8, r0, r4
 80010fa:	fb00 f707 	mul.w	r7, r0, r7
 80010fe:	fa1f f38e 	uxth.w	r3, lr
 8001102:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8001106:	429f      	cmp	r7, r3
 8001108:	d908      	bls.n	800111c <__udivmoddi4+0x148>
 800110a:	eb1c 0303 	adds.w	r3, ip, r3
 800110e:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 8001112:	d202      	bcs.n	800111a <__udivmoddi4+0x146>
 8001114:	429f      	cmp	r7, r3
 8001116:	f200 80ae 	bhi.w	8001276 <__udivmoddi4+0x2a2>
 800111a:	4620      	mov	r0, r4
 800111c:	1bdb      	subs	r3, r3, r7
 800111e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8001122:	e7a5      	b.n	8001070 <__udivmoddi4+0x9c>
 8001124:	f1c1 0720 	rsb	r7, r1, #32
 8001128:	408b      	lsls	r3, r1
 800112a:	fa22 fc07 	lsr.w	ip, r2, r7
 800112e:	ea4c 0c03 	orr.w	ip, ip, r3
 8001132:	fa24 f607 	lsr.w	r6, r4, r7
 8001136:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800113a:	fbb6 f8f9 	udiv	r8, r6, r9
 800113e:	fa1f fe8c 	uxth.w	lr, ip
 8001142:	fb09 6618 	mls	r6, r9, r8, r6
 8001146:	fa20 f307 	lsr.w	r3, r0, r7
 800114a:	408c      	lsls	r4, r1
 800114c:	fa00 fa01 	lsl.w	sl, r0, r1
 8001150:	fb08 f00e 	mul.w	r0, r8, lr
 8001154:	431c      	orrs	r4, r3
 8001156:	0c23      	lsrs	r3, r4, #16
 8001158:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800115c:	4298      	cmp	r0, r3
 800115e:	fa02 f201 	lsl.w	r2, r2, r1
 8001162:	d90a      	bls.n	800117a <__udivmoddi4+0x1a6>
 8001164:	eb1c 0303 	adds.w	r3, ip, r3
 8001168:	f108 36ff 	add.w	r6, r8, #4294967295	@ 0xffffffff
 800116c:	f080 8081 	bcs.w	8001272 <__udivmoddi4+0x29e>
 8001170:	4298      	cmp	r0, r3
 8001172:	d97e      	bls.n	8001272 <__udivmoddi4+0x29e>
 8001174:	f1a8 0802 	sub.w	r8, r8, #2
 8001178:	4463      	add	r3, ip
 800117a:	1a1e      	subs	r6, r3, r0
 800117c:	fbb6 f3f9 	udiv	r3, r6, r9
 8001180:	fb09 6613 	mls	r6, r9, r3, r6
 8001184:	fb03 fe0e 	mul.w	lr, r3, lr
 8001188:	b2a4      	uxth	r4, r4
 800118a:	ea44 4406 	orr.w	r4, r4, r6, lsl #16
 800118e:	45a6      	cmp	lr, r4
 8001190:	d908      	bls.n	80011a4 <__udivmoddi4+0x1d0>
 8001192:	eb1c 0404 	adds.w	r4, ip, r4
 8001196:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 800119a:	d266      	bcs.n	800126a <__udivmoddi4+0x296>
 800119c:	45a6      	cmp	lr, r4
 800119e:	d964      	bls.n	800126a <__udivmoddi4+0x296>
 80011a0:	3b02      	subs	r3, #2
 80011a2:	4464      	add	r4, ip
 80011a4:	ea43 4008 	orr.w	r0, r3, r8, lsl #16
 80011a8:	fba0 8302 	umull	r8, r3, r0, r2
 80011ac:	eba4 040e 	sub.w	r4, r4, lr
 80011b0:	429c      	cmp	r4, r3
 80011b2:	46c6      	mov	lr, r8
 80011b4:	461e      	mov	r6, r3
 80011b6:	d350      	bcc.n	800125a <__udivmoddi4+0x286>
 80011b8:	d04d      	beq.n	8001256 <__udivmoddi4+0x282>
 80011ba:	b155      	cbz	r5, 80011d2 <__udivmoddi4+0x1fe>
 80011bc:	ebba 030e 	subs.w	r3, sl, lr
 80011c0:	eb64 0406 	sbc.w	r4, r4, r6
 80011c4:	fa04 f707 	lsl.w	r7, r4, r7
 80011c8:	40cb      	lsrs	r3, r1
 80011ca:	431f      	orrs	r7, r3
 80011cc:	40cc      	lsrs	r4, r1
 80011ce:	e9c5 7400 	strd	r7, r4, [r5]
 80011d2:	2100      	movs	r1, #0
 80011d4:	e751      	b.n	800107a <__udivmoddi4+0xa6>
 80011d6:	fa0c fc02 	lsl.w	ip, ip, r2
 80011da:	f1c2 0320 	rsb	r3, r2, #32
 80011de:	40d9      	lsrs	r1, r3
 80011e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80011e4:	fa20 f303 	lsr.w	r3, r0, r3
 80011e8:	fa00 fe02 	lsl.w	lr, r0, r2
 80011ec:	fbb1 f0f8 	udiv	r0, r1, r8
 80011f0:	fb08 1110 	mls	r1, r8, r0, r1
 80011f4:	4094      	lsls	r4, r2
 80011f6:	431c      	orrs	r4, r3
 80011f8:	fa1f f78c 	uxth.w	r7, ip
 80011fc:	0c23      	lsrs	r3, r4, #16
 80011fe:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8001202:	fb00 f107 	mul.w	r1, r0, r7
 8001206:	4299      	cmp	r1, r3
 8001208:	d908      	bls.n	800121c <__udivmoddi4+0x248>
 800120a:	eb1c 0303 	adds.w	r3, ip, r3
 800120e:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8001212:	d22c      	bcs.n	800126e <__udivmoddi4+0x29a>
 8001214:	4299      	cmp	r1, r3
 8001216:	d92a      	bls.n	800126e <__udivmoddi4+0x29a>
 8001218:	3802      	subs	r0, #2
 800121a:	4463      	add	r3, ip
 800121c:	1a5b      	subs	r3, r3, r1
 800121e:	fbb3 f1f8 	udiv	r1, r3, r8
 8001222:	fb08 3311 	mls	r3, r8, r1, r3
 8001226:	b2a4      	uxth	r4, r4
 8001228:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800122c:	fb01 f307 	mul.w	r3, r1, r7
 8001230:	42a3      	cmp	r3, r4
 8001232:	d908      	bls.n	8001246 <__udivmoddi4+0x272>
 8001234:	eb1c 0404 	adds.w	r4, ip, r4
 8001238:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 800123c:	d213      	bcs.n	8001266 <__udivmoddi4+0x292>
 800123e:	42a3      	cmp	r3, r4
 8001240:	d911      	bls.n	8001266 <__udivmoddi4+0x292>
 8001242:	3902      	subs	r1, #2
 8001244:	4464      	add	r4, ip
 8001246:	1ae4      	subs	r4, r4, r3
 8001248:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800124c:	e73b      	b.n	80010c6 <__udivmoddi4+0xf2>
 800124e:	4604      	mov	r4, r0
 8001250:	e6f2      	b.n	8001038 <__udivmoddi4+0x64>
 8001252:	4608      	mov	r0, r1
 8001254:	e708      	b.n	8001068 <__udivmoddi4+0x94>
 8001256:	45c2      	cmp	sl, r8
 8001258:	d2af      	bcs.n	80011ba <__udivmoddi4+0x1e6>
 800125a:	ebb8 0e02 	subs.w	lr, r8, r2
 800125e:	eb63 060c 	sbc.w	r6, r3, ip
 8001262:	3801      	subs	r0, #1
 8001264:	e7a9      	b.n	80011ba <__udivmoddi4+0x1e6>
 8001266:	4631      	mov	r1, r6
 8001268:	e7ed      	b.n	8001246 <__udivmoddi4+0x272>
 800126a:	4603      	mov	r3, r0
 800126c:	e79a      	b.n	80011a4 <__udivmoddi4+0x1d0>
 800126e:	4630      	mov	r0, r6
 8001270:	e7d4      	b.n	800121c <__udivmoddi4+0x248>
 8001272:	46b0      	mov	r8, r6
 8001274:	e781      	b.n	800117a <__udivmoddi4+0x1a6>
 8001276:	4463      	add	r3, ip
 8001278:	3802      	subs	r0, #2
 800127a:	e74f      	b.n	800111c <__udivmoddi4+0x148>
 800127c:	4606      	mov	r6, r0
 800127e:	4623      	mov	r3, r4
 8001280:	4608      	mov	r0, r1
 8001282:	e711      	b.n	80010a8 <__udivmoddi4+0xd4>
 8001284:	3e02      	subs	r6, #2
 8001286:	4463      	add	r3, ip
 8001288:	e732      	b.n	80010f0 <__udivmoddi4+0x11c>
 800128a:	bf00      	nop

0800128c <__aeabi_idiv0>:
 800128c:	4770      	bx	lr
 800128e:	bf00      	nop

08001290 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001290:	b580      	push	{r7, lr}
 8001292:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001294:	f000 fe6a 	bl	8001f6c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001298:	f000 f816 	bl	80012c8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800129c:	f000 f8f2 	bl	8001484 <MX_GPIO_Init>
  MX_USB_DEVICE_Init();
 80012a0:	f007 feca 	bl	8009038 <MX_USB_DEVICE_Init>
  MX_TIM1_Init();
 80012a4:	f000 f86a 	bl	800137c <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  TIM1->CCR1 = pwm_value;
 80012a8:	4b04      	ldr	r3, [pc, #16]	@ (80012bc <main+0x2c>)
 80012aa:	681a      	ldr	r2, [r3, #0]
 80012ac:	4b04      	ldr	r3, [pc, #16]	@ (80012c0 <main+0x30>)
 80012ae:	635a      	str	r2, [r3, #52]	@ 0x34
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 80012b0:	2100      	movs	r1, #0
 80012b2:	4804      	ldr	r0, [pc, #16]	@ (80012c4 <main+0x34>)
 80012b4:	f003 fb92 	bl	80049dc <HAL_TIM_PWM_Start>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80012b8:	bf00      	nop
 80012ba:	e7fd      	b.n	80012b8 <main+0x28>
 80012bc:	200003bc 	.word	0x200003bc
 80012c0:	40012c00 	.word	0x40012c00
 80012c4:	20000374 	.word	0x20000374

080012c8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80012c8:	b580      	push	{r7, lr}
 80012ca:	b094      	sub	sp, #80	@ 0x50
 80012cc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80012ce:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80012d2:	2228      	movs	r2, #40	@ 0x28
 80012d4:	2100      	movs	r1, #0
 80012d6:	4618      	mov	r0, r3
 80012d8:	f00a fdf3 	bl	800bec2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80012dc:	f107 0314 	add.w	r3, r7, #20
 80012e0:	2200      	movs	r2, #0
 80012e2:	601a      	str	r2, [r3, #0]
 80012e4:	605a      	str	r2, [r3, #4]
 80012e6:	609a      	str	r2, [r3, #8]
 80012e8:	60da      	str	r2, [r3, #12]
 80012ea:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80012ec:	1d3b      	adds	r3, r7, #4
 80012ee:	2200      	movs	r2, #0
 80012f0:	601a      	str	r2, [r3, #0]
 80012f2:	605a      	str	r2, [r3, #4]
 80012f4:	609a      	str	r2, [r3, #8]
 80012f6:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80012f8:	2301      	movs	r3, #1
 80012fa:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80012fc:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001300:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001302:	2300      	movs	r3, #0
 8001304:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001306:	2301      	movs	r3, #1
 8001308:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800130a:	2302      	movs	r3, #2
 800130c:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800130e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001312:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001314:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8001318:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800131a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800131e:	4618      	mov	r0, r3
 8001320:	f002 fe78 	bl	8004014 <HAL_RCC_OscConfig>
 8001324:	4603      	mov	r3, r0
 8001326:	2b00      	cmp	r3, #0
 8001328:	d001      	beq.n	800132e <SystemClock_Config+0x66>
  {
    Error_Handler();
 800132a:	f000 fc71 	bl	8001c10 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800132e:	230f      	movs	r3, #15
 8001330:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001332:	2302      	movs	r3, #2
 8001334:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001336:	2300      	movs	r3, #0
 8001338:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800133a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800133e:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001340:	2300      	movs	r3, #0
 8001342:	627b      	str	r3, [r7, #36]	@ 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001344:	f107 0314 	add.w	r3, r7, #20
 8001348:	2102      	movs	r1, #2
 800134a:	4618      	mov	r0, r3
 800134c:	f003 f8e4 	bl	8004518 <HAL_RCC_ClockConfig>
 8001350:	4603      	mov	r3, r0
 8001352:	2b00      	cmp	r3, #0
 8001354:	d001      	beq.n	800135a <SystemClock_Config+0x92>
  {
    Error_Handler();
 8001356:	f000 fc5b 	bl	8001c10 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800135a:	2310      	movs	r3, #16
 800135c:	607b      	str	r3, [r7, #4]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 800135e:	2300      	movs	r3, #0
 8001360:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001362:	1d3b      	adds	r3, r7, #4
 8001364:	4618      	mov	r0, r3
 8001366:	f003 fa33 	bl	80047d0 <HAL_RCCEx_PeriphCLKConfig>
 800136a:	4603      	mov	r3, r0
 800136c:	2b00      	cmp	r3, #0
 800136e:	d001      	beq.n	8001374 <SystemClock_Config+0xac>
  {
    Error_Handler();
 8001370:	f000 fc4e 	bl	8001c10 <Error_Handler>
  }
}
 8001374:	bf00      	nop
 8001376:	3750      	adds	r7, #80	@ 0x50
 8001378:	46bd      	mov	sp, r7
 800137a:	bd80      	pop	{r7, pc}

0800137c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800137c:	b580      	push	{r7, lr}
 800137e:	b092      	sub	sp, #72	@ 0x48
 8001380:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001382:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8001386:	2200      	movs	r2, #0
 8001388:	601a      	str	r2, [r3, #0]
 800138a:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800138c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001390:	2200      	movs	r2, #0
 8001392:	601a      	str	r2, [r3, #0]
 8001394:	605a      	str	r2, [r3, #4]
 8001396:	609a      	str	r2, [r3, #8]
 8001398:	60da      	str	r2, [r3, #12]
 800139a:	611a      	str	r2, [r3, #16]
 800139c:	615a      	str	r2, [r3, #20]
 800139e:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80013a0:	1d3b      	adds	r3, r7, #4
 80013a2:	2220      	movs	r2, #32
 80013a4:	2100      	movs	r1, #0
 80013a6:	4618      	mov	r0, r3
 80013a8:	f00a fd8b 	bl	800bec2 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80013ac:	4b33      	ldr	r3, [pc, #204]	@ (800147c <MX_TIM1_Init+0x100>)
 80013ae:	4a34      	ldr	r2, [pc, #208]	@ (8001480 <MX_TIM1_Init+0x104>)
 80013b0:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80013b2:	4b32      	ldr	r3, [pc, #200]	@ (800147c <MX_TIM1_Init+0x100>)
 80013b4:	2200      	movs	r2, #0
 80013b6:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80013b8:	4b30      	ldr	r3, [pc, #192]	@ (800147c <MX_TIM1_Init+0x100>)
 80013ba:	2200      	movs	r2, #0
 80013bc:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 3600;
 80013be:	4b2f      	ldr	r3, [pc, #188]	@ (800147c <MX_TIM1_Init+0x100>)
 80013c0:	f44f 6261 	mov.w	r2, #3600	@ 0xe10
 80013c4:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80013c6:	4b2d      	ldr	r3, [pc, #180]	@ (800147c <MX_TIM1_Init+0x100>)
 80013c8:	2200      	movs	r2, #0
 80013ca:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80013cc:	4b2b      	ldr	r3, [pc, #172]	@ (800147c <MX_TIM1_Init+0x100>)
 80013ce:	2200      	movs	r2, #0
 80013d0:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80013d2:	4b2a      	ldr	r3, [pc, #168]	@ (800147c <MX_TIM1_Init+0x100>)
 80013d4:	2280      	movs	r2, #128	@ 0x80
 80013d6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80013d8:	4828      	ldr	r0, [pc, #160]	@ (800147c <MX_TIM1_Init+0x100>)
 80013da:	f003 faaf 	bl	800493c <HAL_TIM_PWM_Init>
 80013de:	4603      	mov	r3, r0
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	d001      	beq.n	80013e8 <MX_TIM1_Init+0x6c>
  {
    Error_Handler();
 80013e4:	f000 fc14 	bl	8001c10 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80013e8:	2300      	movs	r3, #0
 80013ea:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80013ec:	2300      	movs	r3, #0
 80013ee:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80013f0:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80013f4:	4619      	mov	r1, r3
 80013f6:	4821      	ldr	r0, [pc, #132]	@ (800147c <MX_TIM1_Init+0x100>)
 80013f8:	f003 fe6e 	bl	80050d8 <HAL_TIMEx_MasterConfigSynchronization>
 80013fc:	4603      	mov	r3, r0
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d001      	beq.n	8001406 <MX_TIM1_Init+0x8a>
  {
    Error_Handler();
 8001402:	f000 fc05 	bl	8001c10 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001406:	2360      	movs	r3, #96	@ 0x60
 8001408:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 800140a:	2300      	movs	r3, #0
 800140c:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800140e:	2300      	movs	r3, #0
 8001410:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001412:	2300      	movs	r3, #0
 8001414:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001416:	2300      	movs	r3, #0
 8001418:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800141a:	2300      	movs	r3, #0
 800141c:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800141e:	2300      	movs	r3, #0
 8001420:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001422:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001426:	2200      	movs	r2, #0
 8001428:	4619      	mov	r1, r3
 800142a:	4814      	ldr	r0, [pc, #80]	@ (800147c <MX_TIM1_Init+0x100>)
 800142c:	f003 fb78 	bl	8004b20 <HAL_TIM_PWM_ConfigChannel>
 8001430:	4603      	mov	r3, r0
 8001432:	2b00      	cmp	r3, #0
 8001434:	d001      	beq.n	800143a <MX_TIM1_Init+0xbe>
  {
    Error_Handler();
 8001436:	f000 fbeb 	bl	8001c10 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800143a:	2300      	movs	r3, #0
 800143c:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800143e:	2300      	movs	r3, #0
 8001440:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001442:	2300      	movs	r3, #0
 8001444:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001446:	2300      	movs	r3, #0
 8001448:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800144a:	2300      	movs	r3, #0
 800144c:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800144e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001452:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001454:	2300      	movs	r3, #0
 8001456:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001458:	1d3b      	adds	r3, r7, #4
 800145a:	4619      	mov	r1, r3
 800145c:	4807      	ldr	r0, [pc, #28]	@ (800147c <MX_TIM1_Init+0x100>)
 800145e:	f003 fe99 	bl	8005194 <HAL_TIMEx_ConfigBreakDeadTime>
 8001462:	4603      	mov	r3, r0
 8001464:	2b00      	cmp	r3, #0
 8001466:	d001      	beq.n	800146c <MX_TIM1_Init+0xf0>
  {
    Error_Handler();
 8001468:	f000 fbd2 	bl	8001c10 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800146c:	4803      	ldr	r0, [pc, #12]	@ (800147c <MX_TIM1_Init+0x100>)
 800146e:	f000 fc25 	bl	8001cbc <HAL_TIM_MspPostInit>

}
 8001472:	bf00      	nop
 8001474:	3748      	adds	r7, #72	@ 0x48
 8001476:	46bd      	mov	sp, r7
 8001478:	bd80      	pop	{r7, pc}
 800147a:	bf00      	nop
 800147c:	20000374 	.word	0x20000374
 8001480:	40012c00 	.word	0x40012c00

08001484 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001484:	b480      	push	{r7}
 8001486:	b085      	sub	sp, #20
 8001488:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800148a:	4b14      	ldr	r3, [pc, #80]	@ (80014dc <MX_GPIO_Init+0x58>)
 800148c:	699b      	ldr	r3, [r3, #24]
 800148e:	4a13      	ldr	r2, [pc, #76]	@ (80014dc <MX_GPIO_Init+0x58>)
 8001490:	f043 0310 	orr.w	r3, r3, #16
 8001494:	6193      	str	r3, [r2, #24]
 8001496:	4b11      	ldr	r3, [pc, #68]	@ (80014dc <MX_GPIO_Init+0x58>)
 8001498:	699b      	ldr	r3, [r3, #24]
 800149a:	f003 0310 	and.w	r3, r3, #16
 800149e:	60fb      	str	r3, [r7, #12]
 80014a0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80014a2:	4b0e      	ldr	r3, [pc, #56]	@ (80014dc <MX_GPIO_Init+0x58>)
 80014a4:	699b      	ldr	r3, [r3, #24]
 80014a6:	4a0d      	ldr	r2, [pc, #52]	@ (80014dc <MX_GPIO_Init+0x58>)
 80014a8:	f043 0320 	orr.w	r3, r3, #32
 80014ac:	6193      	str	r3, [r2, #24]
 80014ae:	4b0b      	ldr	r3, [pc, #44]	@ (80014dc <MX_GPIO_Init+0x58>)
 80014b0:	699b      	ldr	r3, [r3, #24]
 80014b2:	f003 0320 	and.w	r3, r3, #32
 80014b6:	60bb      	str	r3, [r7, #8]
 80014b8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80014ba:	4b08      	ldr	r3, [pc, #32]	@ (80014dc <MX_GPIO_Init+0x58>)
 80014bc:	699b      	ldr	r3, [r3, #24]
 80014be:	4a07      	ldr	r2, [pc, #28]	@ (80014dc <MX_GPIO_Init+0x58>)
 80014c0:	f043 0304 	orr.w	r3, r3, #4
 80014c4:	6193      	str	r3, [r2, #24]
 80014c6:	4b05      	ldr	r3, [pc, #20]	@ (80014dc <MX_GPIO_Init+0x58>)
 80014c8:	699b      	ldr	r3, [r3, #24]
 80014ca:	f003 0304 	and.w	r3, r3, #4
 80014ce:	607b      	str	r3, [r7, #4]
 80014d0:	687b      	ldr	r3, [r7, #4]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80014d2:	bf00      	nop
 80014d4:	3714      	adds	r7, #20
 80014d6:	46bd      	mov	sp, r7
 80014d8:	bc80      	pop	{r7}
 80014da:	4770      	bx	lr
 80014dc:	40021000 	.word	0x40021000

080014e0 <parse_gcode>:

/* USER CODE BEGIN 4 */

Gcode parse_gcode(char* buff, int len){
 80014e0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80014e4:	b0cc      	sub	sp, #304	@ 0x130
 80014e6:	af00      	add	r7, sp, #0
 80014e8:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80014ec:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 80014f0:	6018      	str	r0, [r3, #0]
 80014f2:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80014f6:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 80014fa:	6019      	str	r1, [r3, #0]
 80014fc:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8001500:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8001504:	601a      	str	r2, [r3, #0]
    Gcode gcode;
    gcode.valid = 1;
 8001506:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800150a:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 800150e:	2201      	movs	r2, #1
 8001510:	601a      	str	r2, [r3, #0]
    gcode.arg_len = 0;
 8001512:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8001516:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 800151a:	2200      	movs	r2, #0
 800151c:	60da      	str	r2, [r3, #12]
    char* index = buff;
 800151e:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8001522:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c

    if(buff[0] >= 'A' && buff[0] <= 'Z'){
 800152c:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8001530:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	781b      	ldrb	r3, [r3, #0]
 8001538:	2b40      	cmp	r3, #64	@ 0x40
 800153a:	d913      	bls.n	8001564 <parse_gcode+0x84>
 800153c:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8001540:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	781b      	ldrb	r3, [r3, #0]
 8001548:	2b5a      	cmp	r3, #90	@ 0x5a
 800154a:	d80b      	bhi.n	8001564 <parse_gcode+0x84>
        gcode.letter = buff[0];
 800154c:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8001550:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	781a      	ldrb	r2, [r3, #0]
 8001558:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800155c:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8001560:	711a      	strb	r2, [r3, #4]
 8001562:	e034      	b.n	80015ce <parse_gcode+0xee>
    }else if(buff[0] >= 'a' && buff[0] <= 'z'){
 8001564:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8001568:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	781b      	ldrb	r3, [r3, #0]
 8001570:	2b60      	cmp	r3, #96	@ 0x60
 8001572:	d915      	bls.n	80015a0 <parse_gcode+0xc0>
 8001574:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8001578:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	781b      	ldrb	r3, [r3, #0]
 8001580:	2b7a      	cmp	r3, #122	@ 0x7a
 8001582:	d80d      	bhi.n	80015a0 <parse_gcode+0xc0>
        gcode.letter = buff[0] - ('a'-'A');
 8001584:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8001588:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	781b      	ldrb	r3, [r3, #0]
 8001590:	3b20      	subs	r3, #32
 8001592:	b2da      	uxtb	r2, r3
 8001594:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8001598:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 800159c:	711a      	strb	r2, [r3, #4]
 800159e:	e016      	b.n	80015ce <parse_gcode+0xee>
    }else{
        gcode.valid = 0;
 80015a0:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80015a4:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 80015a8:	2200      	movs	r2, #0
 80015aa:	601a      	str	r2, [r3, #0]
        return gcode;
 80015ac:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80015b0:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 80015b4:	681a      	ldr	r2, [r3, #0]
 80015b6:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80015ba:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 80015be:	4610      	mov	r0, r2
 80015c0:	4619      	mov	r1, r3
 80015c2:	f44f 7388 	mov.w	r3, #272	@ 0x110
 80015c6:	461a      	mov	r2, r3
 80015c8:	f00a fd1b 	bl	800c002 <memcpy>
 80015cc:	e20a      	b.n	80019e4 <parse_gcode+0x504>
    }
    index++;
 80015ce:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80015d2:	3301      	adds	r3, #1
 80015d4:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c

    gcode.number = 0;
 80015d8:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80015dc:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 80015e0:	2200      	movs	r2, #0
 80015e2:	609a      	str	r2, [r3, #8]
    while(index < buff+len){
 80015e4:	e04a      	b.n	800167c <parse_gcode+0x19c>
        if(*index >= '0' && *index <= '9'){
 80015e6:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80015ea:	781b      	ldrb	r3, [r3, #0]
 80015ec:	2b2f      	cmp	r3, #47	@ 0x2f
 80015ee:	d91e      	bls.n	800162e <parse_gcode+0x14e>
 80015f0:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80015f4:	781b      	ldrb	r3, [r3, #0]
 80015f6:	2b39      	cmp	r3, #57	@ 0x39
 80015f8:	d819      	bhi.n	800162e <parse_gcode+0x14e>
            gcode.number = gcode.number*10 + (*index - '0');
 80015fa:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80015fe:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8001602:	689a      	ldr	r2, [r3, #8]
 8001604:	4613      	mov	r3, r2
 8001606:	009b      	lsls	r3, r3, #2
 8001608:	4413      	add	r3, r2
 800160a:	005b      	lsls	r3, r3, #1
 800160c:	461a      	mov	r2, r3
 800160e:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8001612:	781b      	ldrb	r3, [r3, #0]
 8001614:	3b30      	subs	r3, #48	@ 0x30
 8001616:	441a      	add	r2, r3
 8001618:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800161c:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8001620:	609a      	str	r2, [r3, #8]
            break;
        }else{
            gcode.valid = 0;
            return gcode;
        }
        index++;
 8001622:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8001626:	3301      	adds	r3, #1
 8001628:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
 800162c:	e026      	b.n	800167c <parse_gcode+0x19c>
        }else if (*index == ' ' || *index == '\n'){
 800162e:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8001632:	781b      	ldrb	r3, [r3, #0]
 8001634:	2b20      	cmp	r3, #32
 8001636:	d004      	beq.n	8001642 <parse_gcode+0x162>
 8001638:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800163c:	781b      	ldrb	r3, [r3, #0]
 800163e:	2b0a      	cmp	r3, #10
 8001640:	d105      	bne.n	800164e <parse_gcode+0x16e>
            index++;
 8001642:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8001646:	3301      	adds	r3, #1
 8001648:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
            break;
 800164c:	e025      	b.n	800169a <parse_gcode+0x1ba>
            gcode.valid = 0;
 800164e:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8001652:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8001656:	2200      	movs	r2, #0
 8001658:	601a      	str	r2, [r3, #0]
            return gcode;
 800165a:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800165e:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8001662:	681a      	ldr	r2, [r3, #0]
 8001664:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8001668:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 800166c:	4610      	mov	r0, r2
 800166e:	4619      	mov	r1, r3
 8001670:	f44f 7388 	mov.w	r3, #272	@ 0x110
 8001674:	461a      	mov	r2, r3
 8001676:	f00a fcc4 	bl	800c002 <memcpy>
 800167a:	e1b3      	b.n	80019e4 <parse_gcode+0x504>
    while(index < buff+len){
 800167c:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8001680:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800168a:	f5a2 7294 	sub.w	r2, r2, #296	@ 0x128
 800168e:	6812      	ldr	r2, [r2, #0]
 8001690:	4413      	add	r3, r2
 8001692:	f8d7 212c 	ldr.w	r2, [r7, #300]	@ 0x12c
 8001696:	429a      	cmp	r2, r3
 8001698:	d3a5      	bcc.n	80015e6 <parse_gcode+0x106>
    }

    int arg_index = -1;
 800169a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800169e:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    int inside_arg = 0;
 80016a2:	2300      	movs	r3, #0
 80016a4:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
    int decimals = 0;
 80016a8:	2300      	movs	r3, #0
 80016aa:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
    while(index < buff+len){
 80016ae:	e179      	b.n	80019a4 <parse_gcode+0x4c4>
        if(inside_arg){
 80016b0:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	f000 80de 	beq.w	8001876 <parse_gcode+0x396>
            if(*index >= '0' && *index <= '9'){
 80016ba:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80016be:	781b      	ldrb	r3, [r3, #0]
 80016c0:	2b2f      	cmp	r3, #47	@ 0x2f
 80016c2:	d97b      	bls.n	80017bc <parse_gcode+0x2dc>
 80016c4:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80016c8:	781b      	ldrb	r3, [r3, #0]
 80016ca:	2b39      	cmp	r3, #57	@ 0x39
 80016cc:	d876      	bhi.n	80017bc <parse_gcode+0x2dc>
                if(decimals == 0){
 80016ce:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d128      	bne.n	8001728 <parse_gcode+0x248>
                    gcode.arguments[arg_index].value = gcode.arguments[arg_index].value*10 + (*index - '0');
 80016d6:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80016da:	f5a3 7290 	sub.w	r2, r3, #288	@ 0x120
 80016de:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80016e2:	3302      	adds	r3, #2
 80016e4:	00db      	lsls	r3, r3, #3
 80016e6:	4413      	add	r3, r2
 80016e8:	685b      	ldr	r3, [r3, #4]
 80016ea:	49c5      	ldr	r1, [pc, #788]	@ (8001a00 <parse_gcode+0x520>)
 80016ec:	4618      	mov	r0, r3
 80016ee:	f7fe fd37 	bl	8000160 <__aeabi_fmul>
 80016f2:	4603      	mov	r3, r0
 80016f4:	461c      	mov	r4, r3
 80016f6:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80016fa:	781b      	ldrb	r3, [r3, #0]
 80016fc:	3b30      	subs	r3, #48	@ 0x30
 80016fe:	4618      	mov	r0, r3
 8001700:	f7ff fba0 	bl	8000e44 <__aeabi_i2f>
 8001704:	4603      	mov	r3, r0
 8001706:	4619      	mov	r1, r3
 8001708:	4620      	mov	r0, r4
 800170a:	f7ff fae7 	bl	8000cdc <__addsf3>
 800170e:	4603      	mov	r3, r0
 8001710:	4619      	mov	r1, r3
 8001712:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8001716:	f5a3 7290 	sub.w	r2, r3, #288	@ 0x120
 800171a:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800171e:	3302      	adds	r3, #2
 8001720:	00db      	lsls	r3, r3, #3
 8001722:	4413      	add	r3, r2
 8001724:	6059      	str	r1, [r3, #4]
                if(decimals == 0){
 8001726:	e138      	b.n	800199a <parse_gcode+0x4ba>
                }else{
                    gcode.arguments[arg_index].value = gcode.arguments[arg_index].value + ((float)(*index - '0') * pow(0.1,decimals));
 8001728:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800172c:	f5a3 7290 	sub.w	r2, r3, #288	@ 0x120
 8001730:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8001734:	3302      	adds	r3, #2
 8001736:	00db      	lsls	r3, r3, #3
 8001738:	4413      	add	r3, r2
 800173a:	685b      	ldr	r3, [r3, #4]
 800173c:	4618      	mov	r0, r3
 800173e:	f7fe ff27 	bl	8000590 <__aeabi_f2d>
 8001742:	4604      	mov	r4, r0
 8001744:	460d      	mov	r5, r1
 8001746:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800174a:	781b      	ldrb	r3, [r3, #0]
 800174c:	3b30      	subs	r3, #48	@ 0x30
 800174e:	4618      	mov	r0, r3
 8001750:	f7ff fb78 	bl	8000e44 <__aeabi_i2f>
 8001754:	4603      	mov	r3, r0
 8001756:	4618      	mov	r0, r3
 8001758:	f7fe ff1a 	bl	8000590 <__aeabi_f2d>
 800175c:	4680      	mov	r8, r0
 800175e:	4689      	mov	r9, r1
 8001760:	f8d7 0120 	ldr.w	r0, [r7, #288]	@ 0x120
 8001764:	f7fe ff02 	bl	800056c <__aeabi_i2d>
 8001768:	4602      	mov	r2, r0
 800176a:	460b      	mov	r3, r1
 800176c:	a1a2      	add	r1, pc, #648	@ (adr r1, 80019f8 <parse_gcode+0x518>)
 800176e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001772:	f008 f90b 	bl	800998c <pow>
 8001776:	4602      	mov	r2, r0
 8001778:	460b      	mov	r3, r1
 800177a:	4640      	mov	r0, r8
 800177c:	4649      	mov	r1, r9
 800177e:	f7fe ff5f 	bl	8000640 <__aeabi_dmul>
 8001782:	4602      	mov	r2, r0
 8001784:	460b      	mov	r3, r1
 8001786:	4620      	mov	r0, r4
 8001788:	4629      	mov	r1, r5
 800178a:	f7fe fda3 	bl	80002d4 <__adddf3>
 800178e:	4602      	mov	r2, r0
 8001790:	460b      	mov	r3, r1
 8001792:	4610      	mov	r0, r2
 8001794:	4619      	mov	r1, r3
 8001796:	f7ff fa4b 	bl	8000c30 <__aeabi_d2f>
 800179a:	4601      	mov	r1, r0
 800179c:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80017a0:	f5a3 7290 	sub.w	r2, r3, #288	@ 0x120
 80017a4:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80017a8:	3302      	adds	r3, #2
 80017aa:	00db      	lsls	r3, r3, #3
 80017ac:	4413      	add	r3, r2
 80017ae:	6059      	str	r1, [r3, #4]
                    decimals++;
 80017b0:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80017b4:	3301      	adds	r3, #1
 80017b6:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
                if(decimals == 0){
 80017ba:	e0ee      	b.n	800199a <parse_gcode+0x4ba>
                }
            }else if(*index == '.'){
 80017bc:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80017c0:	781b      	ldrb	r3, [r3, #0]
 80017c2:	2b2e      	cmp	r3, #46	@ 0x2e
 80017c4:	d11e      	bne.n	8001804 <parse_gcode+0x324>
                if(decimals > 0){
 80017c6:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	dd16      	ble.n	80017fc <parse_gcode+0x31c>
                    gcode.valid = 0;
 80017ce:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80017d2:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 80017d6:	2200      	movs	r2, #0
 80017d8:	601a      	str	r2, [r3, #0]
                    return gcode;
 80017da:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80017de:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 80017e2:	681a      	ldr	r2, [r3, #0]
 80017e4:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80017e8:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 80017ec:	4610      	mov	r0, r2
 80017ee:	4619      	mov	r1, r3
 80017f0:	f44f 7388 	mov.w	r3, #272	@ 0x110
 80017f4:	461a      	mov	r2, r3
 80017f6:	f00a fc04 	bl	800c002 <memcpy>
 80017fa:	e0f3      	b.n	80019e4 <parse_gcode+0x504>
                }
                decimals = 1;
 80017fc:	2301      	movs	r3, #1
 80017fe:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 8001802:	e0ca      	b.n	800199a <parse_gcode+0x4ba>
            }else if (*index == ' '){
 8001804:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8001808:	781b      	ldrb	r3, [r3, #0]
 800180a:	2b20      	cmp	r3, #32
 800180c:	d106      	bne.n	800181c <parse_gcode+0x33c>
                decimals = 0;
 800180e:	2300      	movs	r3, #0
 8001810:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
                inside_arg = 0;
 8001814:	2300      	movs	r3, #0
 8001816:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 800181a:	e0be      	b.n	800199a <parse_gcode+0x4ba>
            }else if(*index == '\n'){
 800181c:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8001820:	781b      	ldrb	r3, [r3, #0]
 8001822:	2b0a      	cmp	r3, #10
 8001824:	d110      	bne.n	8001848 <parse_gcode+0x368>
                return gcode;
 8001826:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800182a:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 800182e:	681a      	ldr	r2, [r3, #0]
 8001830:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8001834:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8001838:	4610      	mov	r0, r2
 800183a:	4619      	mov	r1, r3
 800183c:	f44f 7388 	mov.w	r3, #272	@ 0x110
 8001840:	461a      	mov	r2, r3
 8001842:	f00a fbde 	bl	800c002 <memcpy>
 8001846:	e0cd      	b.n	80019e4 <parse_gcode+0x504>
            }else{
                gcode.valid = 0;
 8001848:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800184c:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8001850:	2200      	movs	r2, #0
 8001852:	601a      	str	r2, [r3, #0]
                return gcode;
 8001854:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8001858:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 800185c:	681a      	ldr	r2, [r3, #0]
 800185e:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8001862:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8001866:	4610      	mov	r0, r2
 8001868:	4619      	mov	r1, r3
 800186a:	f44f 7388 	mov.w	r3, #272	@ 0x110
 800186e:	461a      	mov	r2, r3
 8001870:	f00a fbc7 	bl	800c002 <memcpy>
 8001874:	e0b6      	b.n	80019e4 <parse_gcode+0x504>
            }
        }else{
            if(*index >= 'A' && *index <= 'Z'){
 8001876:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800187a:	781b      	ldrb	r3, [r3, #0]
 800187c:	2b40      	cmp	r3, #64	@ 0x40
 800187e:	d92d      	bls.n	80018dc <parse_gcode+0x3fc>
 8001880:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8001884:	781b      	ldrb	r3, [r3, #0]
 8001886:	2b5a      	cmp	r3, #90	@ 0x5a
 8001888:	d828      	bhi.n	80018dc <parse_gcode+0x3fc>
                arg_index++;
 800188a:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800188e:	3301      	adds	r3, #1
 8001890:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
                gcode.arguments[arg_index].name = *index;
 8001894:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8001898:	7819      	ldrb	r1, [r3, #0]
 800189a:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800189e:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 80018a2:	f8d7 2128 	ldr.w	r2, [r7, #296]	@ 0x128
 80018a6:	3202      	adds	r2, #2
 80018a8:	f803 1032 	strb.w	r1, [r3, r2, lsl #3]
                gcode.arguments[arg_index].value = 0;
 80018ac:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80018b0:	f5a3 7290 	sub.w	r2, r3, #288	@ 0x120
 80018b4:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80018b8:	3302      	adds	r3, #2
 80018ba:	00db      	lsls	r3, r3, #3
 80018bc:	4413      	add	r3, r2
 80018be:	f04f 0200 	mov.w	r2, #0
 80018c2:	605a      	str	r2, [r3, #4]
                gcode.arg_len = arg_index+1;
 80018c4:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80018c8:	1c5a      	adds	r2, r3, #1
 80018ca:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80018ce:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 80018d2:	60da      	str	r2, [r3, #12]
                inside_arg = 1;
 80018d4:	2301      	movs	r3, #1
 80018d6:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 80018da:	e05e      	b.n	800199a <parse_gcode+0x4ba>
            }else if(*index >= 'a' && *index <= 'z'){
 80018dc:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80018e0:	781b      	ldrb	r3, [r3, #0]
 80018e2:	2b60      	cmp	r3, #96	@ 0x60
 80018e4:	d927      	bls.n	8001936 <parse_gcode+0x456>
 80018e6:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80018ea:	781b      	ldrb	r3, [r3, #0]
 80018ec:	2b7a      	cmp	r3, #122	@ 0x7a
 80018ee:	d822      	bhi.n	8001936 <parse_gcode+0x456>
                arg_index++;
 80018f0:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80018f4:	3301      	adds	r3, #1
 80018f6:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
                gcode.arguments[arg_index].name = *index - ('a' - 'A');
 80018fa:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80018fe:	781b      	ldrb	r3, [r3, #0]
 8001900:	3b20      	subs	r3, #32
 8001902:	b2d9      	uxtb	r1, r3
 8001904:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8001908:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 800190c:	f8d7 2128 	ldr.w	r2, [r7, #296]	@ 0x128
 8001910:	3202      	adds	r2, #2
 8001912:	f803 1032 	strb.w	r1, [r3, r2, lsl #3]
                gcode.arguments[arg_index].value = 0;
 8001916:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800191a:	f5a3 7290 	sub.w	r2, r3, #288	@ 0x120
 800191e:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8001922:	3302      	adds	r3, #2
 8001924:	00db      	lsls	r3, r3, #3
 8001926:	4413      	add	r3, r2
 8001928:	f04f 0200 	mov.w	r2, #0
 800192c:	605a      	str	r2, [r3, #4]
                inside_arg = 1;
 800192e:	2301      	movs	r3, #1
 8001930:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 8001934:	e031      	b.n	800199a <parse_gcode+0x4ba>
            }else if (*index == ' '){
 8001936:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800193a:	781b      	ldrb	r3, [r3, #0]
 800193c:	2b20      	cmp	r3, #32
 800193e:	d02c      	beq.n	800199a <parse_gcode+0x4ba>

            }else if (*index == '\n'){
 8001940:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8001944:	781b      	ldrb	r3, [r3, #0]
 8001946:	2b0a      	cmp	r3, #10
 8001948:	d110      	bne.n	800196c <parse_gcode+0x48c>
                return gcode;
 800194a:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800194e:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8001952:	681a      	ldr	r2, [r3, #0]
 8001954:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8001958:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 800195c:	4610      	mov	r0, r2
 800195e:	4619      	mov	r1, r3
 8001960:	f44f 7388 	mov.w	r3, #272	@ 0x110
 8001964:	461a      	mov	r2, r3
 8001966:	f00a fb4c 	bl	800c002 <memcpy>
 800196a:	e03b      	b.n	80019e4 <parse_gcode+0x504>
            }else{
                gcode.valid = 0;
 800196c:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8001970:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8001974:	2200      	movs	r2, #0
 8001976:	601a      	str	r2, [r3, #0]
                return gcode;
 8001978:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800197c:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8001980:	681a      	ldr	r2, [r3, #0]
 8001982:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8001986:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 800198a:	4610      	mov	r0, r2
 800198c:	4619      	mov	r1, r3
 800198e:	f44f 7388 	mov.w	r3, #272	@ 0x110
 8001992:	461a      	mov	r2, r3
 8001994:	f00a fb35 	bl	800c002 <memcpy>
 8001998:	e024      	b.n	80019e4 <parse_gcode+0x504>
            }

        }
        index++;
 800199a:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800199e:	3301      	adds	r3, #1
 80019a0:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
    while(index < buff+len){
 80019a4:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80019a8:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 80019b2:	f5a2 7294 	sub.w	r2, r2, #296	@ 0x128
 80019b6:	6812      	ldr	r2, [r2, #0]
 80019b8:	4413      	add	r3, r2
 80019ba:	f8d7 212c 	ldr.w	r2, [r7, #300]	@ 0x12c
 80019be:	429a      	cmp	r2, r3
 80019c0:	f4ff ae76 	bcc.w	80016b0 <parse_gcode+0x1d0>
    }

    return gcode;
 80019c4:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80019c8:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 80019cc:	681a      	ldr	r2, [r3, #0]
 80019ce:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80019d2:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 80019d6:	4610      	mov	r0, r2
 80019d8:	4619      	mov	r1, r3
 80019da:	f44f 7388 	mov.w	r3, #272	@ 0x110
 80019de:	461a      	mov	r2, r3
 80019e0:	f00a fb0f 	bl	800c002 <memcpy>
}
 80019e4:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80019e8:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 80019ec:	6818      	ldr	r0, [r3, #0]
 80019ee:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 80019f2:	46bd      	mov	sp, r7
 80019f4:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80019f8:	9999999a 	.word	0x9999999a
 80019fc:	3fb99999 	.word	0x3fb99999
 8001a00:	41200000 	.word	0x41200000

08001a04 <get_gcode_arg>:

int get_gcode_arg(Gcode* gcode, char arg_name, float* out){
 8001a04:	b480      	push	{r7}
 8001a06:	b087      	sub	sp, #28
 8001a08:	af00      	add	r7, sp, #0
 8001a0a:	60f8      	str	r0, [r7, #12]
 8001a0c:	460b      	mov	r3, r1
 8001a0e:	607a      	str	r2, [r7, #4]
 8001a10:	72fb      	strb	r3, [r7, #11]
	int i = 0;
 8001a12:	2300      	movs	r3, #0
 8001a14:	617b      	str	r3, [r7, #20]
	while(i<gcode->arg_len){
 8001a16:	e014      	b.n	8001a42 <get_gcode_arg+0x3e>
		if(gcode->arguments[i].name == arg_name){
 8001a18:	68fb      	ldr	r3, [r7, #12]
 8001a1a:	697a      	ldr	r2, [r7, #20]
 8001a1c:	3202      	adds	r2, #2
 8001a1e:	f813 3032 	ldrb.w	r3, [r3, r2, lsl #3]
 8001a22:	7afa      	ldrb	r2, [r7, #11]
 8001a24:	429a      	cmp	r2, r3
 8001a26:	d109      	bne.n	8001a3c <get_gcode_arg+0x38>
			*out = gcode->arguments[i].value;
 8001a28:	68fa      	ldr	r2, [r7, #12]
 8001a2a:	697b      	ldr	r3, [r7, #20]
 8001a2c:	3302      	adds	r3, #2
 8001a2e:	00db      	lsls	r3, r3, #3
 8001a30:	4413      	add	r3, r2
 8001a32:	685a      	ldr	r2, [r3, #4]
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	601a      	str	r2, [r3, #0]
			return 1;
 8001a38:	2301      	movs	r3, #1
 8001a3a:	e008      	b.n	8001a4e <get_gcode_arg+0x4a>
		}
		i++;
 8001a3c:	697b      	ldr	r3, [r7, #20]
 8001a3e:	3301      	adds	r3, #1
 8001a40:	617b      	str	r3, [r7, #20]
	while(i<gcode->arg_len){
 8001a42:	68fb      	ldr	r3, [r7, #12]
 8001a44:	68db      	ldr	r3, [r3, #12]
 8001a46:	697a      	ldr	r2, [r7, #20]
 8001a48:	429a      	cmp	r2, r3
 8001a4a:	dbe5      	blt.n	8001a18 <get_gcode_arg+0x14>
	}
	return 0;
 8001a4c:	2300      	movs	r3, #0
}
 8001a4e:	4618      	mov	r0, r3
 8001a50:	371c      	adds	r7, #28
 8001a52:	46bd      	mov	sp, r7
 8001a54:	bc80      	pop	{r7}
 8001a56:	4770      	bx	lr

08001a58 <USB_CDC_RxHandler>:

void USB_CDC_RxHandler(uint8_t* Buf, uint32_t Len)
{
 8001a58:	b580      	push	{r7, lr}
 8001a5a:	f5ad 6da5 	sub.w	sp, sp, #1320	@ 0x528
 8001a5e:	af00      	add	r7, sp, #0
 8001a60:	f507 63a5 	add.w	r3, r7, #1320	@ 0x528
 8001a64:	f2a3 5324 	subw	r3, r3, #1316	@ 0x524
 8001a68:	6018      	str	r0, [r3, #0]
 8001a6a:	f507 63a5 	add.w	r3, r7, #1320	@ 0x528
 8001a6e:	f5a3 63a5 	sub.w	r3, r3, #1320	@ 0x528
 8001a72:	6019      	str	r1, [r3, #0]
	Gcode gcode = parse_gcode((char*)Buf, Len);
 8001a74:	f507 63a5 	add.w	r3, r7, #1320	@ 0x528
 8001a78:	f5a3 63a5 	sub.w	r3, r3, #1320	@ 0x528
 8001a7c:	681a      	ldr	r2, [r3, #0]
 8001a7e:	f507 63a5 	add.w	r3, r7, #1320	@ 0x528
 8001a82:	f5a3 708e 	sub.w	r0, r3, #284	@ 0x11c
 8001a86:	f507 63a5 	add.w	r3, r7, #1320	@ 0x528
 8001a8a:	f2a3 5324 	subw	r3, r3, #1316	@ 0x524
 8001a8e:	6819      	ldr	r1, [r3, #0]
 8001a90:	f7ff fd26 	bl	80014e0 <parse_gcode>

	char TxBuffer[1024];
	if(Buf[0] == 'A'){
 8001a94:	f507 63a5 	add.w	r3, r7, #1320	@ 0x528
 8001a98:	f2a3 5324 	subw	r3, r3, #1316	@ 0x524
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	781b      	ldrb	r3, [r3, #0]
 8001aa0:	2b41      	cmp	r3, #65	@ 0x41
 8001aa2:	d11d      	bne.n	8001ae0 <USB_CDC_RxHandler+0x88>
		float value = atof((char*)(Buf+1));
 8001aa4:	f507 63a5 	add.w	r3, r7, #1320	@ 0x528
 8001aa8:	f2a3 5324 	subw	r3, r3, #1316	@ 0x524
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	3301      	adds	r3, #1
 8001ab0:	4618      	mov	r0, r3
 8001ab2:	f008 fe79 	bl	800a7a8 <atof>
 8001ab6:	4602      	mov	r2, r0
 8001ab8:	460b      	mov	r3, r1
 8001aba:	4610      	mov	r0, r2
 8001abc:	4619      	mov	r1, r3
 8001abe:	f7ff f8b7 	bl	8000c30 <__aeabi_d2f>
 8001ac2:	4603      	mov	r3, r0
 8001ac4:	f8c7 3520 	str.w	r3, [r7, #1312]	@ 0x520
		sprintf(TxBuffer, "Received data starting with A and value %f\n", value);
 8001ac8:	f8d7 0520 	ldr.w	r0, [r7, #1312]	@ 0x520
 8001acc:	f7fe fd60 	bl	8000590 <__aeabi_f2d>
 8001ad0:	4602      	mov	r2, r0
 8001ad2:	460b      	mov	r3, r1
 8001ad4:	f107 000c 	add.w	r0, r7, #12
 8001ad8:	4946      	ldr	r1, [pc, #280]	@ (8001bf4 <USB_CDC_RxHandler+0x19c>)
 8001ada:	f00a f98f 	bl	800bdfc <siprintf>
 8001ade:	e02d      	b.n	8001b3c <USB_CDC_RxHandler+0xe4>
	}else if (Buf[0] == 'B'){
 8001ae0:	f507 63a5 	add.w	r3, r7, #1320	@ 0x528
 8001ae4:	f2a3 5324 	subw	r3, r3, #1316	@ 0x524
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	781b      	ldrb	r3, [r3, #0]
 8001aec:	2b42      	cmp	r3, #66	@ 0x42
 8001aee:	d116      	bne.n	8001b1e <USB_CDC_RxHandler+0xc6>
		int value = atoll((char*)(Buf+1));
 8001af0:	f507 63a5 	add.w	r3, r7, #1320	@ 0x528
 8001af4:	f2a3 5324 	subw	r3, r3, #1316	@ 0x524
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	3301      	adds	r3, #1
 8001afc:	4618      	mov	r0, r3
 8001afe:	f009 fc5b 	bl	800b3b8 <atoll>
 8001b02:	4602      	mov	r2, r0
 8001b04:	460b      	mov	r3, r1
 8001b06:	4613      	mov	r3, r2
 8001b08:	f8c7 3524 	str.w	r3, [r7, #1316]	@ 0x524
		sprintf(TxBuffer, "Received data starting with B and value %i\n", value);
 8001b0c:	f107 030c 	add.w	r3, r7, #12
 8001b10:	f8d7 2524 	ldr.w	r2, [r7, #1316]	@ 0x524
 8001b14:	4938      	ldr	r1, [pc, #224]	@ (8001bf8 <USB_CDC_RxHandler+0x1a0>)
 8001b16:	4618      	mov	r0, r3
 8001b18:	f00a f970 	bl	800bdfc <siprintf>
 8001b1c:	e00e      	b.n	8001b3c <USB_CDC_RxHandler+0xe4>
	}else{
		sprintf(TxBuffer, "Received data not starting with A or B '%s' with len %i\n", Buf, (int)Len);
 8001b1e:	f507 63a5 	add.w	r3, r7, #1320	@ 0x528
 8001b22:	f5a3 63a5 	sub.w	r3, r3, #1320	@ 0x528
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	f507 62a5 	add.w	r2, r7, #1320	@ 0x528
 8001b2c:	f2a2 5224 	subw	r2, r2, #1316	@ 0x524
 8001b30:	f107 000c 	add.w	r0, r7, #12
 8001b34:	6812      	ldr	r2, [r2, #0]
 8001b36:	4931      	ldr	r1, [pc, #196]	@ (8001bfc <USB_CDC_RxHandler+0x1a4>)
 8001b38:	f00a f960 	bl	800bdfc <siprintf>
	}

	if(gcode.letter == 'P'){
 8001b3c:	f507 63a5 	add.w	r3, r7, #1320	@ 0x528
 8001b40:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8001b44:	791b      	ldrb	r3, [r3, #4]
 8001b46:	2b50      	cmp	r3, #80	@ 0x50
 8001b48:	d13f      	bne.n	8001bca <USB_CDC_RxHandler+0x172>
		switch(gcode.number){
 8001b4a:	f507 63a5 	add.w	r3, r7, #1320	@ 0x528
 8001b4e:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8001b52:	689b      	ldr	r3, [r3, #8]
 8001b54:	2b01      	cmp	r3, #1
 8001b56:	d002      	beq.n	8001b5e <USB_CDC_RxHandler+0x106>
 8001b58:	2b02      	cmp	r3, #2
 8001b5a:	d02f      	beq.n	8001bbc <USB_CDC_RxHandler+0x164>
 8001b5c:	e035      	b.n	8001bca <USB_CDC_RxHandler+0x172>
			case 1:
				float val = 0;
 8001b5e:	f507 63a5 	add.w	r3, r7, #1320	@ 0x528
 8001b62:	f5a3 63a4 	sub.w	r3, r3, #1312	@ 0x520
 8001b66:	f04f 0200 	mov.w	r2, #0
 8001b6a:	601a      	str	r2, [r3, #0]
				if(get_gcode_arg(&gcode,'A', &val)){
 8001b6c:	f107 0208 	add.w	r2, r7, #8
 8001b70:	f207 430c 	addw	r3, r7, #1036	@ 0x40c
 8001b74:	2141      	movs	r1, #65	@ 0x41
 8001b76:	4618      	mov	r0, r3
 8001b78:	f7ff ff44 	bl	8001a04 <get_gcode_arg>
 8001b7c:	4603      	mov	r3, r0
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d013      	beq.n	8001baa <USB_CDC_RxHandler+0x152>
					TIM1->CCR1 = (int)val;
 8001b82:	f507 63a5 	add.w	r3, r7, #1320	@ 0x528
 8001b86:	f5a3 63a4 	sub.w	r3, r3, #1312	@ 0x520
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	4618      	mov	r0, r3
 8001b8e:	f7ff f9ad 	bl	8000eec <__aeabi_f2iz>
 8001b92:	4602      	mov	r2, r0
 8001b94:	4b1a      	ldr	r3, [pc, #104]	@ (8001c00 <USB_CDC_RxHandler+0x1a8>)
 8001b96:	635a      	str	r2, [r3, #52]	@ 0x34
					sprintf(TxBuffer, "Called P1 - set pwm to %ld\n", TIM1->CCR1);
 8001b98:	4b19      	ldr	r3, [pc, #100]	@ (8001c00 <USB_CDC_RxHandler+0x1a8>)
 8001b9a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001b9c:	f107 030c 	add.w	r3, r7, #12
 8001ba0:	4918      	ldr	r1, [pc, #96]	@ (8001c04 <USB_CDC_RxHandler+0x1ac>)
 8001ba2:	4618      	mov	r0, r3
 8001ba4:	f00a f92a 	bl	800bdfc <siprintf>
				}else{
					sprintf(TxBuffer, "Called P1 - actual pwm: %ld\n",TIM1->CCR1);
				}
				break;
 8001ba8:	e00f      	b.n	8001bca <USB_CDC_RxHandler+0x172>
					sprintf(TxBuffer, "Called P1 - actual pwm: %ld\n",TIM1->CCR1);
 8001baa:	4b15      	ldr	r3, [pc, #84]	@ (8001c00 <USB_CDC_RxHandler+0x1a8>)
 8001bac:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001bae:	f107 030c 	add.w	r3, r7, #12
 8001bb2:	4915      	ldr	r1, [pc, #84]	@ (8001c08 <USB_CDC_RxHandler+0x1b0>)
 8001bb4:	4618      	mov	r0, r3
 8001bb6:	f00a f921 	bl	800bdfc <siprintf>
				break;
 8001bba:	e006      	b.n	8001bca <USB_CDC_RxHandler+0x172>
			case 2:
				sprintf(TxBuffer, "Called P2\n");
 8001bbc:	f107 030c 	add.w	r3, r7, #12
 8001bc0:	4912      	ldr	r1, [pc, #72]	@ (8001c0c <USB_CDC_RxHandler+0x1b4>)
 8001bc2:	4618      	mov	r0, r3
 8001bc4:	f00a f91a 	bl	800bdfc <siprintf>
				break;
 8001bc8:	bf00      	nop
		}
	}

	uint32_t l = strlen(TxBuffer);
 8001bca:	f107 030c 	add.w	r3, r7, #12
 8001bce:	4618      	mov	r0, r3
 8001bd0:	f7fe fabe 	bl	8000150 <strlen>
 8001bd4:	f8c7 051c 	str.w	r0, [r7, #1308]	@ 0x51c
    CDC_Transmit_FS((uint8_t*)TxBuffer, l);
 8001bd8:	f8d7 351c 	ldr.w	r3, [r7, #1308]	@ 0x51c
 8001bdc:	b29a      	uxth	r2, r3
 8001bde:	f107 030c 	add.w	r3, r7, #12
 8001be2:	4611      	mov	r1, r2
 8001be4:	4618      	mov	r0, r3
 8001be6:	f007 faf3 	bl	80091d0 <CDC_Transmit_FS>
}
 8001bea:	bf00      	nop
 8001bec:	f507 67a5 	add.w	r7, r7, #1320	@ 0x528
 8001bf0:	46bd      	mov	sp, r7
 8001bf2:	bd80      	pop	{r7, pc}
 8001bf4:	0800eaa0 	.word	0x0800eaa0
 8001bf8:	0800eacc 	.word	0x0800eacc
 8001bfc:	0800eaf8 	.word	0x0800eaf8
 8001c00:	40012c00 	.word	0x40012c00
 8001c04:	0800eb34 	.word	0x0800eb34
 8001c08:	0800eb50 	.word	0x0800eb50
 8001c0c:	0800eb70 	.word	0x0800eb70

08001c10 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001c10:	b480      	push	{r7}
 8001c12:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001c14:	b672      	cpsid	i
}
 8001c16:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001c18:	bf00      	nop
 8001c1a:	e7fd      	b.n	8001c18 <Error_Handler+0x8>

08001c1c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001c1c:	b480      	push	{r7}
 8001c1e:	b085      	sub	sp, #20
 8001c20:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001c22:	4b15      	ldr	r3, [pc, #84]	@ (8001c78 <HAL_MspInit+0x5c>)
 8001c24:	699b      	ldr	r3, [r3, #24]
 8001c26:	4a14      	ldr	r2, [pc, #80]	@ (8001c78 <HAL_MspInit+0x5c>)
 8001c28:	f043 0301 	orr.w	r3, r3, #1
 8001c2c:	6193      	str	r3, [r2, #24]
 8001c2e:	4b12      	ldr	r3, [pc, #72]	@ (8001c78 <HAL_MspInit+0x5c>)
 8001c30:	699b      	ldr	r3, [r3, #24]
 8001c32:	f003 0301 	and.w	r3, r3, #1
 8001c36:	60bb      	str	r3, [r7, #8]
 8001c38:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001c3a:	4b0f      	ldr	r3, [pc, #60]	@ (8001c78 <HAL_MspInit+0x5c>)
 8001c3c:	69db      	ldr	r3, [r3, #28]
 8001c3e:	4a0e      	ldr	r2, [pc, #56]	@ (8001c78 <HAL_MspInit+0x5c>)
 8001c40:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001c44:	61d3      	str	r3, [r2, #28]
 8001c46:	4b0c      	ldr	r3, [pc, #48]	@ (8001c78 <HAL_MspInit+0x5c>)
 8001c48:	69db      	ldr	r3, [r3, #28]
 8001c4a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001c4e:	607b      	str	r3, [r7, #4]
 8001c50:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001c52:	4b0a      	ldr	r3, [pc, #40]	@ (8001c7c <HAL_MspInit+0x60>)
 8001c54:	685b      	ldr	r3, [r3, #4]
 8001c56:	60fb      	str	r3, [r7, #12]
 8001c58:	68fb      	ldr	r3, [r7, #12]
 8001c5a:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8001c5e:	60fb      	str	r3, [r7, #12]
 8001c60:	68fb      	ldr	r3, [r7, #12]
 8001c62:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001c66:	60fb      	str	r3, [r7, #12]
 8001c68:	4a04      	ldr	r2, [pc, #16]	@ (8001c7c <HAL_MspInit+0x60>)
 8001c6a:	68fb      	ldr	r3, [r7, #12]
 8001c6c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001c6e:	bf00      	nop
 8001c70:	3714      	adds	r7, #20
 8001c72:	46bd      	mov	sp, r7
 8001c74:	bc80      	pop	{r7}
 8001c76:	4770      	bx	lr
 8001c78:	40021000 	.word	0x40021000
 8001c7c:	40010000 	.word	0x40010000

08001c80 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001c80:	b480      	push	{r7}
 8001c82:	b085      	sub	sp, #20
 8001c84:	af00      	add	r7, sp, #0
 8001c86:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	4a09      	ldr	r2, [pc, #36]	@ (8001cb4 <HAL_TIM_PWM_MspInit+0x34>)
 8001c8e:	4293      	cmp	r3, r2
 8001c90:	d10b      	bne.n	8001caa <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001c92:	4b09      	ldr	r3, [pc, #36]	@ (8001cb8 <HAL_TIM_PWM_MspInit+0x38>)
 8001c94:	699b      	ldr	r3, [r3, #24]
 8001c96:	4a08      	ldr	r2, [pc, #32]	@ (8001cb8 <HAL_TIM_PWM_MspInit+0x38>)
 8001c98:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001c9c:	6193      	str	r3, [r2, #24]
 8001c9e:	4b06      	ldr	r3, [pc, #24]	@ (8001cb8 <HAL_TIM_PWM_MspInit+0x38>)
 8001ca0:	699b      	ldr	r3, [r3, #24]
 8001ca2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001ca6:	60fb      	str	r3, [r7, #12]
 8001ca8:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM1_MspInit 1 */

  }

}
 8001caa:	bf00      	nop
 8001cac:	3714      	adds	r7, #20
 8001cae:	46bd      	mov	sp, r7
 8001cb0:	bc80      	pop	{r7}
 8001cb2:	4770      	bx	lr
 8001cb4:	40012c00 	.word	0x40012c00
 8001cb8:	40021000 	.word	0x40021000

08001cbc <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001cbc:	b580      	push	{r7, lr}
 8001cbe:	b088      	sub	sp, #32
 8001cc0:	af00      	add	r7, sp, #0
 8001cc2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cc4:	f107 0310 	add.w	r3, r7, #16
 8001cc8:	2200      	movs	r2, #0
 8001cca:	601a      	str	r2, [r3, #0]
 8001ccc:	605a      	str	r2, [r3, #4]
 8001cce:	609a      	str	r2, [r3, #8]
 8001cd0:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM1)
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	4a10      	ldr	r2, [pc, #64]	@ (8001d18 <HAL_TIM_MspPostInit+0x5c>)
 8001cd8:	4293      	cmp	r3, r2
 8001cda:	d118      	bne.n	8001d0e <HAL_TIM_MspPostInit+0x52>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001cdc:	4b0f      	ldr	r3, [pc, #60]	@ (8001d1c <HAL_TIM_MspPostInit+0x60>)
 8001cde:	699b      	ldr	r3, [r3, #24]
 8001ce0:	4a0e      	ldr	r2, [pc, #56]	@ (8001d1c <HAL_TIM_MspPostInit+0x60>)
 8001ce2:	f043 0304 	orr.w	r3, r3, #4
 8001ce6:	6193      	str	r3, [r2, #24]
 8001ce8:	4b0c      	ldr	r3, [pc, #48]	@ (8001d1c <HAL_TIM_MspPostInit+0x60>)
 8001cea:	699b      	ldr	r3, [r3, #24]
 8001cec:	f003 0304 	and.w	r3, r3, #4
 8001cf0:	60fb      	str	r3, [r7, #12]
 8001cf2:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001cf4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001cf8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cfa:	2302      	movs	r3, #2
 8001cfc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cfe:	2302      	movs	r3, #2
 8001d00:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d02:	f107 0310 	add.w	r3, r7, #16
 8001d06:	4619      	mov	r1, r3
 8001d08:	4805      	ldr	r0, [pc, #20]	@ (8001d20 <HAL_TIM_MspPostInit+0x64>)
 8001d0a:	f000 fa9f 	bl	800224c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8001d0e:	bf00      	nop
 8001d10:	3720      	adds	r7, #32
 8001d12:	46bd      	mov	sp, r7
 8001d14:	bd80      	pop	{r7, pc}
 8001d16:	bf00      	nop
 8001d18:	40012c00 	.word	0x40012c00
 8001d1c:	40021000 	.word	0x40021000
 8001d20:	40010800 	.word	0x40010800

08001d24 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001d24:	b480      	push	{r7}
 8001d26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001d28:	bf00      	nop
 8001d2a:	e7fd      	b.n	8001d28 <NMI_Handler+0x4>

08001d2c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001d2c:	b480      	push	{r7}
 8001d2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001d30:	bf00      	nop
 8001d32:	e7fd      	b.n	8001d30 <HardFault_Handler+0x4>

08001d34 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001d34:	b480      	push	{r7}
 8001d36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001d38:	bf00      	nop
 8001d3a:	e7fd      	b.n	8001d38 <MemManage_Handler+0x4>

08001d3c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001d3c:	b480      	push	{r7}
 8001d3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001d40:	bf00      	nop
 8001d42:	e7fd      	b.n	8001d40 <BusFault_Handler+0x4>

08001d44 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001d44:	b480      	push	{r7}
 8001d46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001d48:	bf00      	nop
 8001d4a:	e7fd      	b.n	8001d48 <UsageFault_Handler+0x4>

08001d4c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001d4c:	b480      	push	{r7}
 8001d4e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001d50:	bf00      	nop
 8001d52:	46bd      	mov	sp, r7
 8001d54:	bc80      	pop	{r7}
 8001d56:	4770      	bx	lr

08001d58 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001d58:	b480      	push	{r7}
 8001d5a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001d5c:	bf00      	nop
 8001d5e:	46bd      	mov	sp, r7
 8001d60:	bc80      	pop	{r7}
 8001d62:	4770      	bx	lr

08001d64 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001d64:	b480      	push	{r7}
 8001d66:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001d68:	bf00      	nop
 8001d6a:	46bd      	mov	sp, r7
 8001d6c:	bc80      	pop	{r7}
 8001d6e:	4770      	bx	lr

08001d70 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001d70:	b580      	push	{r7, lr}
 8001d72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001d74:	f000 f940 	bl	8001ff8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001d78:	bf00      	nop
 8001d7a:	bd80      	pop	{r7, pc}

08001d7c <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8001d7c:	b580      	push	{r7, lr}
 8001d7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8001d80:	4802      	ldr	r0, [pc, #8]	@ (8001d8c <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 8001d82:	f000 fd03 	bl	800278c <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 8001d86:	bf00      	nop
 8001d88:	bd80      	pop	{r7, pc}
 8001d8a:	bf00      	nop
 8001d8c:	20001090 	.word	0x20001090

08001d90 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001d90:	b480      	push	{r7}
 8001d92:	af00      	add	r7, sp, #0
  return 1;
 8001d94:	2301      	movs	r3, #1
}
 8001d96:	4618      	mov	r0, r3
 8001d98:	46bd      	mov	sp, r7
 8001d9a:	bc80      	pop	{r7}
 8001d9c:	4770      	bx	lr

08001d9e <_kill>:

int _kill(int pid, int sig)
{
 8001d9e:	b580      	push	{r7, lr}
 8001da0:	b082      	sub	sp, #8
 8001da2:	af00      	add	r7, sp, #0
 8001da4:	6078      	str	r0, [r7, #4]
 8001da6:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001da8:	f00a f8f0 	bl	800bf8c <__errno>
 8001dac:	4603      	mov	r3, r0
 8001dae:	2216      	movs	r2, #22
 8001db0:	601a      	str	r2, [r3, #0]
  return -1;
 8001db2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8001db6:	4618      	mov	r0, r3
 8001db8:	3708      	adds	r7, #8
 8001dba:	46bd      	mov	sp, r7
 8001dbc:	bd80      	pop	{r7, pc}

08001dbe <_exit>:

void _exit (int status)
{
 8001dbe:	b580      	push	{r7, lr}
 8001dc0:	b082      	sub	sp, #8
 8001dc2:	af00      	add	r7, sp, #0
 8001dc4:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001dc6:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001dca:	6878      	ldr	r0, [r7, #4]
 8001dcc:	f7ff ffe7 	bl	8001d9e <_kill>
  while (1) {}    /* Make sure we hang here */
 8001dd0:	bf00      	nop
 8001dd2:	e7fd      	b.n	8001dd0 <_exit+0x12>

08001dd4 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001dd4:	b580      	push	{r7, lr}
 8001dd6:	b086      	sub	sp, #24
 8001dd8:	af00      	add	r7, sp, #0
 8001dda:	60f8      	str	r0, [r7, #12]
 8001ddc:	60b9      	str	r1, [r7, #8]
 8001dde:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001de0:	2300      	movs	r3, #0
 8001de2:	617b      	str	r3, [r7, #20]
 8001de4:	e00a      	b.n	8001dfc <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001de6:	f3af 8000 	nop.w
 8001dea:	4601      	mov	r1, r0
 8001dec:	68bb      	ldr	r3, [r7, #8]
 8001dee:	1c5a      	adds	r2, r3, #1
 8001df0:	60ba      	str	r2, [r7, #8]
 8001df2:	b2ca      	uxtb	r2, r1
 8001df4:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001df6:	697b      	ldr	r3, [r7, #20]
 8001df8:	3301      	adds	r3, #1
 8001dfa:	617b      	str	r3, [r7, #20]
 8001dfc:	697a      	ldr	r2, [r7, #20]
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	429a      	cmp	r2, r3
 8001e02:	dbf0      	blt.n	8001de6 <_read+0x12>
  }

  return len;
 8001e04:	687b      	ldr	r3, [r7, #4]
}
 8001e06:	4618      	mov	r0, r3
 8001e08:	3718      	adds	r7, #24
 8001e0a:	46bd      	mov	sp, r7
 8001e0c:	bd80      	pop	{r7, pc}

08001e0e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001e0e:	b580      	push	{r7, lr}
 8001e10:	b086      	sub	sp, #24
 8001e12:	af00      	add	r7, sp, #0
 8001e14:	60f8      	str	r0, [r7, #12]
 8001e16:	60b9      	str	r1, [r7, #8]
 8001e18:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e1a:	2300      	movs	r3, #0
 8001e1c:	617b      	str	r3, [r7, #20]
 8001e1e:	e009      	b.n	8001e34 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001e20:	68bb      	ldr	r3, [r7, #8]
 8001e22:	1c5a      	adds	r2, r3, #1
 8001e24:	60ba      	str	r2, [r7, #8]
 8001e26:	781b      	ldrb	r3, [r3, #0]
 8001e28:	4618      	mov	r0, r3
 8001e2a:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e2e:	697b      	ldr	r3, [r7, #20]
 8001e30:	3301      	adds	r3, #1
 8001e32:	617b      	str	r3, [r7, #20]
 8001e34:	697a      	ldr	r2, [r7, #20]
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	429a      	cmp	r2, r3
 8001e3a:	dbf1      	blt.n	8001e20 <_write+0x12>
  }
  return len;
 8001e3c:	687b      	ldr	r3, [r7, #4]
}
 8001e3e:	4618      	mov	r0, r3
 8001e40:	3718      	adds	r7, #24
 8001e42:	46bd      	mov	sp, r7
 8001e44:	bd80      	pop	{r7, pc}

08001e46 <_close>:

int _close(int file)
{
 8001e46:	b480      	push	{r7}
 8001e48:	b083      	sub	sp, #12
 8001e4a:	af00      	add	r7, sp, #0
 8001e4c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001e4e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8001e52:	4618      	mov	r0, r3
 8001e54:	370c      	adds	r7, #12
 8001e56:	46bd      	mov	sp, r7
 8001e58:	bc80      	pop	{r7}
 8001e5a:	4770      	bx	lr

08001e5c <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001e5c:	b480      	push	{r7}
 8001e5e:	b083      	sub	sp, #12
 8001e60:	af00      	add	r7, sp, #0
 8001e62:	6078      	str	r0, [r7, #4]
 8001e64:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001e66:	683b      	ldr	r3, [r7, #0]
 8001e68:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001e6c:	605a      	str	r2, [r3, #4]
  return 0;
 8001e6e:	2300      	movs	r3, #0
}
 8001e70:	4618      	mov	r0, r3
 8001e72:	370c      	adds	r7, #12
 8001e74:	46bd      	mov	sp, r7
 8001e76:	bc80      	pop	{r7}
 8001e78:	4770      	bx	lr

08001e7a <_isatty>:

int _isatty(int file)
{
 8001e7a:	b480      	push	{r7}
 8001e7c:	b083      	sub	sp, #12
 8001e7e:	af00      	add	r7, sp, #0
 8001e80:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001e82:	2301      	movs	r3, #1
}
 8001e84:	4618      	mov	r0, r3
 8001e86:	370c      	adds	r7, #12
 8001e88:	46bd      	mov	sp, r7
 8001e8a:	bc80      	pop	{r7}
 8001e8c:	4770      	bx	lr

08001e8e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001e8e:	b480      	push	{r7}
 8001e90:	b085      	sub	sp, #20
 8001e92:	af00      	add	r7, sp, #0
 8001e94:	60f8      	str	r0, [r7, #12]
 8001e96:	60b9      	str	r1, [r7, #8]
 8001e98:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001e9a:	2300      	movs	r3, #0
}
 8001e9c:	4618      	mov	r0, r3
 8001e9e:	3714      	adds	r7, #20
 8001ea0:	46bd      	mov	sp, r7
 8001ea2:	bc80      	pop	{r7}
 8001ea4:	4770      	bx	lr
	...

08001ea8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001ea8:	b580      	push	{r7, lr}
 8001eaa:	b086      	sub	sp, #24
 8001eac:	af00      	add	r7, sp, #0
 8001eae:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001eb0:	4a14      	ldr	r2, [pc, #80]	@ (8001f04 <_sbrk+0x5c>)
 8001eb2:	4b15      	ldr	r3, [pc, #84]	@ (8001f08 <_sbrk+0x60>)
 8001eb4:	1ad3      	subs	r3, r2, r3
 8001eb6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001eb8:	697b      	ldr	r3, [r7, #20]
 8001eba:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001ebc:	4b13      	ldr	r3, [pc, #76]	@ (8001f0c <_sbrk+0x64>)
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d102      	bne.n	8001eca <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001ec4:	4b11      	ldr	r3, [pc, #68]	@ (8001f0c <_sbrk+0x64>)
 8001ec6:	4a12      	ldr	r2, [pc, #72]	@ (8001f10 <_sbrk+0x68>)
 8001ec8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001eca:	4b10      	ldr	r3, [pc, #64]	@ (8001f0c <_sbrk+0x64>)
 8001ecc:	681a      	ldr	r2, [r3, #0]
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	4413      	add	r3, r2
 8001ed2:	693a      	ldr	r2, [r7, #16]
 8001ed4:	429a      	cmp	r2, r3
 8001ed6:	d207      	bcs.n	8001ee8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001ed8:	f00a f858 	bl	800bf8c <__errno>
 8001edc:	4603      	mov	r3, r0
 8001ede:	220c      	movs	r2, #12
 8001ee0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001ee2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001ee6:	e009      	b.n	8001efc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001ee8:	4b08      	ldr	r3, [pc, #32]	@ (8001f0c <_sbrk+0x64>)
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001eee:	4b07      	ldr	r3, [pc, #28]	@ (8001f0c <_sbrk+0x64>)
 8001ef0:	681a      	ldr	r2, [r3, #0]
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	4413      	add	r3, r2
 8001ef6:	4a05      	ldr	r2, [pc, #20]	@ (8001f0c <_sbrk+0x64>)
 8001ef8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001efa:	68fb      	ldr	r3, [r7, #12]
}
 8001efc:	4618      	mov	r0, r3
 8001efe:	3718      	adds	r7, #24
 8001f00:	46bd      	mov	sp, r7
 8001f02:	bd80      	pop	{r7, pc}
 8001f04:	20005000 	.word	0x20005000
 8001f08:	00000400 	.word	0x00000400
 8001f0c:	200003c0 	.word	0x200003c0
 8001f10:	200016d8 	.word	0x200016d8

08001f14 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001f14:	b480      	push	{r7}
 8001f16:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001f18:	bf00      	nop
 8001f1a:	46bd      	mov	sp, r7
 8001f1c:	bc80      	pop	{r7}
 8001f1e:	4770      	bx	lr

08001f20 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001f20:	f7ff fff8 	bl	8001f14 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001f24:	480b      	ldr	r0, [pc, #44]	@ (8001f54 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001f26:	490c      	ldr	r1, [pc, #48]	@ (8001f58 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001f28:	4a0c      	ldr	r2, [pc, #48]	@ (8001f5c <LoopFillZerobss+0x16>)
  movs r3, #0
 8001f2a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001f2c:	e002      	b.n	8001f34 <LoopCopyDataInit>

08001f2e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001f2e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001f30:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001f32:	3304      	adds	r3, #4

08001f34 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001f34:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001f36:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001f38:	d3f9      	bcc.n	8001f2e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001f3a:	4a09      	ldr	r2, [pc, #36]	@ (8001f60 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001f3c:	4c09      	ldr	r4, [pc, #36]	@ (8001f64 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001f3e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001f40:	e001      	b.n	8001f46 <LoopFillZerobss>

08001f42 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001f42:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001f44:	3204      	adds	r2, #4

08001f46 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001f46:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001f48:	d3fb      	bcc.n	8001f42 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001f4a:	f00a f825 	bl	800bf98 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001f4e:	f7ff f99f 	bl	8001290 <main>
  bx lr
 8001f52:	4770      	bx	lr
  ldr r0, =_sdata
 8001f54:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001f58:	20000358 	.word	0x20000358
  ldr r2, =_sidata
 8001f5c:	0800f050 	.word	0x0800f050
  ldr r2, =_sbss
 8001f60:	20000358 	.word	0x20000358
  ldr r4, =_ebss
 8001f64:	200016d4 	.word	0x200016d4

08001f68 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001f68:	e7fe      	b.n	8001f68 <ADC1_2_IRQHandler>
	...

08001f6c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001f6c:	b580      	push	{r7, lr}
 8001f6e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001f70:	4b08      	ldr	r3, [pc, #32]	@ (8001f94 <HAL_Init+0x28>)
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	4a07      	ldr	r2, [pc, #28]	@ (8001f94 <HAL_Init+0x28>)
 8001f76:	f043 0310 	orr.w	r3, r3, #16
 8001f7a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001f7c:	2003      	movs	r0, #3
 8001f7e:	f000 f923 	bl	80021c8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001f82:	200f      	movs	r0, #15
 8001f84:	f000 f808 	bl	8001f98 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001f88:	f7ff fe48 	bl	8001c1c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001f8c:	2300      	movs	r3, #0
}
 8001f8e:	4618      	mov	r0, r3
 8001f90:	bd80      	pop	{r7, pc}
 8001f92:	bf00      	nop
 8001f94:	40022000 	.word	0x40022000

08001f98 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001f98:	b580      	push	{r7, lr}
 8001f9a:	b082      	sub	sp, #8
 8001f9c:	af00      	add	r7, sp, #0
 8001f9e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001fa0:	4b12      	ldr	r3, [pc, #72]	@ (8001fec <HAL_InitTick+0x54>)
 8001fa2:	681a      	ldr	r2, [r3, #0]
 8001fa4:	4b12      	ldr	r3, [pc, #72]	@ (8001ff0 <HAL_InitTick+0x58>)
 8001fa6:	781b      	ldrb	r3, [r3, #0]
 8001fa8:	4619      	mov	r1, r3
 8001faa:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001fae:	fbb3 f3f1 	udiv	r3, r3, r1
 8001fb2:	fbb2 f3f3 	udiv	r3, r2, r3
 8001fb6:	4618      	mov	r0, r3
 8001fb8:	f000 f93b 	bl	8002232 <HAL_SYSTICK_Config>
 8001fbc:	4603      	mov	r3, r0
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d001      	beq.n	8001fc6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001fc2:	2301      	movs	r3, #1
 8001fc4:	e00e      	b.n	8001fe4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	2b0f      	cmp	r3, #15
 8001fca:	d80a      	bhi.n	8001fe2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001fcc:	2200      	movs	r2, #0
 8001fce:	6879      	ldr	r1, [r7, #4]
 8001fd0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001fd4:	f000 f903 	bl	80021de <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001fd8:	4a06      	ldr	r2, [pc, #24]	@ (8001ff4 <HAL_InitTick+0x5c>)
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001fde:	2300      	movs	r3, #0
 8001fe0:	e000      	b.n	8001fe4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001fe2:	2301      	movs	r3, #1
}
 8001fe4:	4618      	mov	r0, r3
 8001fe6:	3708      	adds	r7, #8
 8001fe8:	46bd      	mov	sp, r7
 8001fea:	bd80      	pop	{r7, pc}
 8001fec:	20000000 	.word	0x20000000
 8001ff0:	20000008 	.word	0x20000008
 8001ff4:	20000004 	.word	0x20000004

08001ff8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001ff8:	b480      	push	{r7}
 8001ffa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001ffc:	4b05      	ldr	r3, [pc, #20]	@ (8002014 <HAL_IncTick+0x1c>)
 8001ffe:	781b      	ldrb	r3, [r3, #0]
 8002000:	461a      	mov	r2, r3
 8002002:	4b05      	ldr	r3, [pc, #20]	@ (8002018 <HAL_IncTick+0x20>)
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	4413      	add	r3, r2
 8002008:	4a03      	ldr	r2, [pc, #12]	@ (8002018 <HAL_IncTick+0x20>)
 800200a:	6013      	str	r3, [r2, #0]
}
 800200c:	bf00      	nop
 800200e:	46bd      	mov	sp, r7
 8002010:	bc80      	pop	{r7}
 8002012:	4770      	bx	lr
 8002014:	20000008 	.word	0x20000008
 8002018:	200003c4 	.word	0x200003c4

0800201c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800201c:	b480      	push	{r7}
 800201e:	af00      	add	r7, sp, #0
  return uwTick;
 8002020:	4b02      	ldr	r3, [pc, #8]	@ (800202c <HAL_GetTick+0x10>)
 8002022:	681b      	ldr	r3, [r3, #0]
}
 8002024:	4618      	mov	r0, r3
 8002026:	46bd      	mov	sp, r7
 8002028:	bc80      	pop	{r7}
 800202a:	4770      	bx	lr
 800202c:	200003c4 	.word	0x200003c4

08002030 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002030:	b480      	push	{r7}
 8002032:	b085      	sub	sp, #20
 8002034:	af00      	add	r7, sp, #0
 8002036:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	f003 0307 	and.w	r3, r3, #7
 800203e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002040:	4b0c      	ldr	r3, [pc, #48]	@ (8002074 <__NVIC_SetPriorityGrouping+0x44>)
 8002042:	68db      	ldr	r3, [r3, #12]
 8002044:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002046:	68ba      	ldr	r2, [r7, #8]
 8002048:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800204c:	4013      	ands	r3, r2
 800204e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002054:	68bb      	ldr	r3, [r7, #8]
 8002056:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002058:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800205c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002060:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002062:	4a04      	ldr	r2, [pc, #16]	@ (8002074 <__NVIC_SetPriorityGrouping+0x44>)
 8002064:	68bb      	ldr	r3, [r7, #8]
 8002066:	60d3      	str	r3, [r2, #12]
}
 8002068:	bf00      	nop
 800206a:	3714      	adds	r7, #20
 800206c:	46bd      	mov	sp, r7
 800206e:	bc80      	pop	{r7}
 8002070:	4770      	bx	lr
 8002072:	bf00      	nop
 8002074:	e000ed00 	.word	0xe000ed00

08002078 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002078:	b480      	push	{r7}
 800207a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800207c:	4b04      	ldr	r3, [pc, #16]	@ (8002090 <__NVIC_GetPriorityGrouping+0x18>)
 800207e:	68db      	ldr	r3, [r3, #12]
 8002080:	0a1b      	lsrs	r3, r3, #8
 8002082:	f003 0307 	and.w	r3, r3, #7
}
 8002086:	4618      	mov	r0, r3
 8002088:	46bd      	mov	sp, r7
 800208a:	bc80      	pop	{r7}
 800208c:	4770      	bx	lr
 800208e:	bf00      	nop
 8002090:	e000ed00 	.word	0xe000ed00

08002094 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002094:	b480      	push	{r7}
 8002096:	b083      	sub	sp, #12
 8002098:	af00      	add	r7, sp, #0
 800209a:	4603      	mov	r3, r0
 800209c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800209e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	db0b      	blt.n	80020be <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80020a6:	79fb      	ldrb	r3, [r7, #7]
 80020a8:	f003 021f 	and.w	r2, r3, #31
 80020ac:	4906      	ldr	r1, [pc, #24]	@ (80020c8 <__NVIC_EnableIRQ+0x34>)
 80020ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020b2:	095b      	lsrs	r3, r3, #5
 80020b4:	2001      	movs	r0, #1
 80020b6:	fa00 f202 	lsl.w	r2, r0, r2
 80020ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80020be:	bf00      	nop
 80020c0:	370c      	adds	r7, #12
 80020c2:	46bd      	mov	sp, r7
 80020c4:	bc80      	pop	{r7}
 80020c6:	4770      	bx	lr
 80020c8:	e000e100 	.word	0xe000e100

080020cc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80020cc:	b480      	push	{r7}
 80020ce:	b083      	sub	sp, #12
 80020d0:	af00      	add	r7, sp, #0
 80020d2:	4603      	mov	r3, r0
 80020d4:	6039      	str	r1, [r7, #0]
 80020d6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80020d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020dc:	2b00      	cmp	r3, #0
 80020de:	db0a      	blt.n	80020f6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80020e0:	683b      	ldr	r3, [r7, #0]
 80020e2:	b2da      	uxtb	r2, r3
 80020e4:	490c      	ldr	r1, [pc, #48]	@ (8002118 <__NVIC_SetPriority+0x4c>)
 80020e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020ea:	0112      	lsls	r2, r2, #4
 80020ec:	b2d2      	uxtb	r2, r2
 80020ee:	440b      	add	r3, r1
 80020f0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80020f4:	e00a      	b.n	800210c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80020f6:	683b      	ldr	r3, [r7, #0]
 80020f8:	b2da      	uxtb	r2, r3
 80020fa:	4908      	ldr	r1, [pc, #32]	@ (800211c <__NVIC_SetPriority+0x50>)
 80020fc:	79fb      	ldrb	r3, [r7, #7]
 80020fe:	f003 030f 	and.w	r3, r3, #15
 8002102:	3b04      	subs	r3, #4
 8002104:	0112      	lsls	r2, r2, #4
 8002106:	b2d2      	uxtb	r2, r2
 8002108:	440b      	add	r3, r1
 800210a:	761a      	strb	r2, [r3, #24]
}
 800210c:	bf00      	nop
 800210e:	370c      	adds	r7, #12
 8002110:	46bd      	mov	sp, r7
 8002112:	bc80      	pop	{r7}
 8002114:	4770      	bx	lr
 8002116:	bf00      	nop
 8002118:	e000e100 	.word	0xe000e100
 800211c:	e000ed00 	.word	0xe000ed00

08002120 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002120:	b480      	push	{r7}
 8002122:	b089      	sub	sp, #36	@ 0x24
 8002124:	af00      	add	r7, sp, #0
 8002126:	60f8      	str	r0, [r7, #12]
 8002128:	60b9      	str	r1, [r7, #8]
 800212a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	f003 0307 	and.w	r3, r3, #7
 8002132:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002134:	69fb      	ldr	r3, [r7, #28]
 8002136:	f1c3 0307 	rsb	r3, r3, #7
 800213a:	2b04      	cmp	r3, #4
 800213c:	bf28      	it	cs
 800213e:	2304      	movcs	r3, #4
 8002140:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002142:	69fb      	ldr	r3, [r7, #28]
 8002144:	3304      	adds	r3, #4
 8002146:	2b06      	cmp	r3, #6
 8002148:	d902      	bls.n	8002150 <NVIC_EncodePriority+0x30>
 800214a:	69fb      	ldr	r3, [r7, #28]
 800214c:	3b03      	subs	r3, #3
 800214e:	e000      	b.n	8002152 <NVIC_EncodePriority+0x32>
 8002150:	2300      	movs	r3, #0
 8002152:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002154:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8002158:	69bb      	ldr	r3, [r7, #24]
 800215a:	fa02 f303 	lsl.w	r3, r2, r3
 800215e:	43da      	mvns	r2, r3
 8002160:	68bb      	ldr	r3, [r7, #8]
 8002162:	401a      	ands	r2, r3
 8002164:	697b      	ldr	r3, [r7, #20]
 8002166:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002168:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 800216c:	697b      	ldr	r3, [r7, #20]
 800216e:	fa01 f303 	lsl.w	r3, r1, r3
 8002172:	43d9      	mvns	r1, r3
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002178:	4313      	orrs	r3, r2
         );
}
 800217a:	4618      	mov	r0, r3
 800217c:	3724      	adds	r7, #36	@ 0x24
 800217e:	46bd      	mov	sp, r7
 8002180:	bc80      	pop	{r7}
 8002182:	4770      	bx	lr

08002184 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002184:	b580      	push	{r7, lr}
 8002186:	b082      	sub	sp, #8
 8002188:	af00      	add	r7, sp, #0
 800218a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	3b01      	subs	r3, #1
 8002190:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002194:	d301      	bcc.n	800219a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002196:	2301      	movs	r3, #1
 8002198:	e00f      	b.n	80021ba <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800219a:	4a0a      	ldr	r2, [pc, #40]	@ (80021c4 <SysTick_Config+0x40>)
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	3b01      	subs	r3, #1
 80021a0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80021a2:	210f      	movs	r1, #15
 80021a4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80021a8:	f7ff ff90 	bl	80020cc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80021ac:	4b05      	ldr	r3, [pc, #20]	@ (80021c4 <SysTick_Config+0x40>)
 80021ae:	2200      	movs	r2, #0
 80021b0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80021b2:	4b04      	ldr	r3, [pc, #16]	@ (80021c4 <SysTick_Config+0x40>)
 80021b4:	2207      	movs	r2, #7
 80021b6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80021b8:	2300      	movs	r3, #0
}
 80021ba:	4618      	mov	r0, r3
 80021bc:	3708      	adds	r7, #8
 80021be:	46bd      	mov	sp, r7
 80021c0:	bd80      	pop	{r7, pc}
 80021c2:	bf00      	nop
 80021c4:	e000e010 	.word	0xe000e010

080021c8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80021c8:	b580      	push	{r7, lr}
 80021ca:	b082      	sub	sp, #8
 80021cc:	af00      	add	r7, sp, #0
 80021ce:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80021d0:	6878      	ldr	r0, [r7, #4]
 80021d2:	f7ff ff2d 	bl	8002030 <__NVIC_SetPriorityGrouping>
}
 80021d6:	bf00      	nop
 80021d8:	3708      	adds	r7, #8
 80021da:	46bd      	mov	sp, r7
 80021dc:	bd80      	pop	{r7, pc}

080021de <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80021de:	b580      	push	{r7, lr}
 80021e0:	b086      	sub	sp, #24
 80021e2:	af00      	add	r7, sp, #0
 80021e4:	4603      	mov	r3, r0
 80021e6:	60b9      	str	r1, [r7, #8]
 80021e8:	607a      	str	r2, [r7, #4]
 80021ea:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80021ec:	2300      	movs	r3, #0
 80021ee:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80021f0:	f7ff ff42 	bl	8002078 <__NVIC_GetPriorityGrouping>
 80021f4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80021f6:	687a      	ldr	r2, [r7, #4]
 80021f8:	68b9      	ldr	r1, [r7, #8]
 80021fa:	6978      	ldr	r0, [r7, #20]
 80021fc:	f7ff ff90 	bl	8002120 <NVIC_EncodePriority>
 8002200:	4602      	mov	r2, r0
 8002202:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002206:	4611      	mov	r1, r2
 8002208:	4618      	mov	r0, r3
 800220a:	f7ff ff5f 	bl	80020cc <__NVIC_SetPriority>
}
 800220e:	bf00      	nop
 8002210:	3718      	adds	r7, #24
 8002212:	46bd      	mov	sp, r7
 8002214:	bd80      	pop	{r7, pc}

08002216 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002216:	b580      	push	{r7, lr}
 8002218:	b082      	sub	sp, #8
 800221a:	af00      	add	r7, sp, #0
 800221c:	4603      	mov	r3, r0
 800221e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002220:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002224:	4618      	mov	r0, r3
 8002226:	f7ff ff35 	bl	8002094 <__NVIC_EnableIRQ>
}
 800222a:	bf00      	nop
 800222c:	3708      	adds	r7, #8
 800222e:	46bd      	mov	sp, r7
 8002230:	bd80      	pop	{r7, pc}

08002232 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002232:	b580      	push	{r7, lr}
 8002234:	b082      	sub	sp, #8
 8002236:	af00      	add	r7, sp, #0
 8002238:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800223a:	6878      	ldr	r0, [r7, #4]
 800223c:	f7ff ffa2 	bl	8002184 <SysTick_Config>
 8002240:	4603      	mov	r3, r0
}
 8002242:	4618      	mov	r0, r3
 8002244:	3708      	adds	r7, #8
 8002246:	46bd      	mov	sp, r7
 8002248:	bd80      	pop	{r7, pc}
	...

0800224c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800224c:	b480      	push	{r7}
 800224e:	b08b      	sub	sp, #44	@ 0x2c
 8002250:	af00      	add	r7, sp, #0
 8002252:	6078      	str	r0, [r7, #4]
 8002254:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002256:	2300      	movs	r3, #0
 8002258:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800225a:	2300      	movs	r3, #0
 800225c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800225e:	e169      	b.n	8002534 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002260:	2201      	movs	r2, #1
 8002262:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002264:	fa02 f303 	lsl.w	r3, r2, r3
 8002268:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800226a:	683b      	ldr	r3, [r7, #0]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	69fa      	ldr	r2, [r7, #28]
 8002270:	4013      	ands	r3, r2
 8002272:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002274:	69ba      	ldr	r2, [r7, #24]
 8002276:	69fb      	ldr	r3, [r7, #28]
 8002278:	429a      	cmp	r2, r3
 800227a:	f040 8158 	bne.w	800252e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800227e:	683b      	ldr	r3, [r7, #0]
 8002280:	685b      	ldr	r3, [r3, #4]
 8002282:	4a9a      	ldr	r2, [pc, #616]	@ (80024ec <HAL_GPIO_Init+0x2a0>)
 8002284:	4293      	cmp	r3, r2
 8002286:	d05e      	beq.n	8002346 <HAL_GPIO_Init+0xfa>
 8002288:	4a98      	ldr	r2, [pc, #608]	@ (80024ec <HAL_GPIO_Init+0x2a0>)
 800228a:	4293      	cmp	r3, r2
 800228c:	d875      	bhi.n	800237a <HAL_GPIO_Init+0x12e>
 800228e:	4a98      	ldr	r2, [pc, #608]	@ (80024f0 <HAL_GPIO_Init+0x2a4>)
 8002290:	4293      	cmp	r3, r2
 8002292:	d058      	beq.n	8002346 <HAL_GPIO_Init+0xfa>
 8002294:	4a96      	ldr	r2, [pc, #600]	@ (80024f0 <HAL_GPIO_Init+0x2a4>)
 8002296:	4293      	cmp	r3, r2
 8002298:	d86f      	bhi.n	800237a <HAL_GPIO_Init+0x12e>
 800229a:	4a96      	ldr	r2, [pc, #600]	@ (80024f4 <HAL_GPIO_Init+0x2a8>)
 800229c:	4293      	cmp	r3, r2
 800229e:	d052      	beq.n	8002346 <HAL_GPIO_Init+0xfa>
 80022a0:	4a94      	ldr	r2, [pc, #592]	@ (80024f4 <HAL_GPIO_Init+0x2a8>)
 80022a2:	4293      	cmp	r3, r2
 80022a4:	d869      	bhi.n	800237a <HAL_GPIO_Init+0x12e>
 80022a6:	4a94      	ldr	r2, [pc, #592]	@ (80024f8 <HAL_GPIO_Init+0x2ac>)
 80022a8:	4293      	cmp	r3, r2
 80022aa:	d04c      	beq.n	8002346 <HAL_GPIO_Init+0xfa>
 80022ac:	4a92      	ldr	r2, [pc, #584]	@ (80024f8 <HAL_GPIO_Init+0x2ac>)
 80022ae:	4293      	cmp	r3, r2
 80022b0:	d863      	bhi.n	800237a <HAL_GPIO_Init+0x12e>
 80022b2:	4a92      	ldr	r2, [pc, #584]	@ (80024fc <HAL_GPIO_Init+0x2b0>)
 80022b4:	4293      	cmp	r3, r2
 80022b6:	d046      	beq.n	8002346 <HAL_GPIO_Init+0xfa>
 80022b8:	4a90      	ldr	r2, [pc, #576]	@ (80024fc <HAL_GPIO_Init+0x2b0>)
 80022ba:	4293      	cmp	r3, r2
 80022bc:	d85d      	bhi.n	800237a <HAL_GPIO_Init+0x12e>
 80022be:	2b12      	cmp	r3, #18
 80022c0:	d82a      	bhi.n	8002318 <HAL_GPIO_Init+0xcc>
 80022c2:	2b12      	cmp	r3, #18
 80022c4:	d859      	bhi.n	800237a <HAL_GPIO_Init+0x12e>
 80022c6:	a201      	add	r2, pc, #4	@ (adr r2, 80022cc <HAL_GPIO_Init+0x80>)
 80022c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80022cc:	08002347 	.word	0x08002347
 80022d0:	08002321 	.word	0x08002321
 80022d4:	08002333 	.word	0x08002333
 80022d8:	08002375 	.word	0x08002375
 80022dc:	0800237b 	.word	0x0800237b
 80022e0:	0800237b 	.word	0x0800237b
 80022e4:	0800237b 	.word	0x0800237b
 80022e8:	0800237b 	.word	0x0800237b
 80022ec:	0800237b 	.word	0x0800237b
 80022f0:	0800237b 	.word	0x0800237b
 80022f4:	0800237b 	.word	0x0800237b
 80022f8:	0800237b 	.word	0x0800237b
 80022fc:	0800237b 	.word	0x0800237b
 8002300:	0800237b 	.word	0x0800237b
 8002304:	0800237b 	.word	0x0800237b
 8002308:	0800237b 	.word	0x0800237b
 800230c:	0800237b 	.word	0x0800237b
 8002310:	08002329 	.word	0x08002329
 8002314:	0800233d 	.word	0x0800233d
 8002318:	4a79      	ldr	r2, [pc, #484]	@ (8002500 <HAL_GPIO_Init+0x2b4>)
 800231a:	4293      	cmp	r3, r2
 800231c:	d013      	beq.n	8002346 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800231e:	e02c      	b.n	800237a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002320:	683b      	ldr	r3, [r7, #0]
 8002322:	68db      	ldr	r3, [r3, #12]
 8002324:	623b      	str	r3, [r7, #32]
          break;
 8002326:	e029      	b.n	800237c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002328:	683b      	ldr	r3, [r7, #0]
 800232a:	68db      	ldr	r3, [r3, #12]
 800232c:	3304      	adds	r3, #4
 800232e:	623b      	str	r3, [r7, #32]
          break;
 8002330:	e024      	b.n	800237c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002332:	683b      	ldr	r3, [r7, #0]
 8002334:	68db      	ldr	r3, [r3, #12]
 8002336:	3308      	adds	r3, #8
 8002338:	623b      	str	r3, [r7, #32]
          break;
 800233a:	e01f      	b.n	800237c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800233c:	683b      	ldr	r3, [r7, #0]
 800233e:	68db      	ldr	r3, [r3, #12]
 8002340:	330c      	adds	r3, #12
 8002342:	623b      	str	r3, [r7, #32]
          break;
 8002344:	e01a      	b.n	800237c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002346:	683b      	ldr	r3, [r7, #0]
 8002348:	689b      	ldr	r3, [r3, #8]
 800234a:	2b00      	cmp	r3, #0
 800234c:	d102      	bne.n	8002354 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800234e:	2304      	movs	r3, #4
 8002350:	623b      	str	r3, [r7, #32]
          break;
 8002352:	e013      	b.n	800237c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002354:	683b      	ldr	r3, [r7, #0]
 8002356:	689b      	ldr	r3, [r3, #8]
 8002358:	2b01      	cmp	r3, #1
 800235a:	d105      	bne.n	8002368 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800235c:	2308      	movs	r3, #8
 800235e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	69fa      	ldr	r2, [r7, #28]
 8002364:	611a      	str	r2, [r3, #16]
          break;
 8002366:	e009      	b.n	800237c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002368:	2308      	movs	r3, #8
 800236a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	69fa      	ldr	r2, [r7, #28]
 8002370:	615a      	str	r2, [r3, #20]
          break;
 8002372:	e003      	b.n	800237c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002374:	2300      	movs	r3, #0
 8002376:	623b      	str	r3, [r7, #32]
          break;
 8002378:	e000      	b.n	800237c <HAL_GPIO_Init+0x130>
          break;
 800237a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800237c:	69bb      	ldr	r3, [r7, #24]
 800237e:	2bff      	cmp	r3, #255	@ 0xff
 8002380:	d801      	bhi.n	8002386 <HAL_GPIO_Init+0x13a>
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	e001      	b.n	800238a <HAL_GPIO_Init+0x13e>
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	3304      	adds	r3, #4
 800238a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800238c:	69bb      	ldr	r3, [r7, #24]
 800238e:	2bff      	cmp	r3, #255	@ 0xff
 8002390:	d802      	bhi.n	8002398 <HAL_GPIO_Init+0x14c>
 8002392:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002394:	009b      	lsls	r3, r3, #2
 8002396:	e002      	b.n	800239e <HAL_GPIO_Init+0x152>
 8002398:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800239a:	3b08      	subs	r3, #8
 800239c:	009b      	lsls	r3, r3, #2
 800239e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80023a0:	697b      	ldr	r3, [r7, #20]
 80023a2:	681a      	ldr	r2, [r3, #0]
 80023a4:	210f      	movs	r1, #15
 80023a6:	693b      	ldr	r3, [r7, #16]
 80023a8:	fa01 f303 	lsl.w	r3, r1, r3
 80023ac:	43db      	mvns	r3, r3
 80023ae:	401a      	ands	r2, r3
 80023b0:	6a39      	ldr	r1, [r7, #32]
 80023b2:	693b      	ldr	r3, [r7, #16]
 80023b4:	fa01 f303 	lsl.w	r3, r1, r3
 80023b8:	431a      	orrs	r2, r3
 80023ba:	697b      	ldr	r3, [r7, #20]
 80023bc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80023be:	683b      	ldr	r3, [r7, #0]
 80023c0:	685b      	ldr	r3, [r3, #4]
 80023c2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	f000 80b1 	beq.w	800252e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80023cc:	4b4d      	ldr	r3, [pc, #308]	@ (8002504 <HAL_GPIO_Init+0x2b8>)
 80023ce:	699b      	ldr	r3, [r3, #24]
 80023d0:	4a4c      	ldr	r2, [pc, #304]	@ (8002504 <HAL_GPIO_Init+0x2b8>)
 80023d2:	f043 0301 	orr.w	r3, r3, #1
 80023d6:	6193      	str	r3, [r2, #24]
 80023d8:	4b4a      	ldr	r3, [pc, #296]	@ (8002504 <HAL_GPIO_Init+0x2b8>)
 80023da:	699b      	ldr	r3, [r3, #24]
 80023dc:	f003 0301 	and.w	r3, r3, #1
 80023e0:	60bb      	str	r3, [r7, #8]
 80023e2:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80023e4:	4a48      	ldr	r2, [pc, #288]	@ (8002508 <HAL_GPIO_Init+0x2bc>)
 80023e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80023e8:	089b      	lsrs	r3, r3, #2
 80023ea:	3302      	adds	r3, #2
 80023ec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80023f0:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80023f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80023f4:	f003 0303 	and.w	r3, r3, #3
 80023f8:	009b      	lsls	r3, r3, #2
 80023fa:	220f      	movs	r2, #15
 80023fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002400:	43db      	mvns	r3, r3
 8002402:	68fa      	ldr	r2, [r7, #12]
 8002404:	4013      	ands	r3, r2
 8002406:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	4a40      	ldr	r2, [pc, #256]	@ (800250c <HAL_GPIO_Init+0x2c0>)
 800240c:	4293      	cmp	r3, r2
 800240e:	d013      	beq.n	8002438 <HAL_GPIO_Init+0x1ec>
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	4a3f      	ldr	r2, [pc, #252]	@ (8002510 <HAL_GPIO_Init+0x2c4>)
 8002414:	4293      	cmp	r3, r2
 8002416:	d00d      	beq.n	8002434 <HAL_GPIO_Init+0x1e8>
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	4a3e      	ldr	r2, [pc, #248]	@ (8002514 <HAL_GPIO_Init+0x2c8>)
 800241c:	4293      	cmp	r3, r2
 800241e:	d007      	beq.n	8002430 <HAL_GPIO_Init+0x1e4>
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	4a3d      	ldr	r2, [pc, #244]	@ (8002518 <HAL_GPIO_Init+0x2cc>)
 8002424:	4293      	cmp	r3, r2
 8002426:	d101      	bne.n	800242c <HAL_GPIO_Init+0x1e0>
 8002428:	2303      	movs	r3, #3
 800242a:	e006      	b.n	800243a <HAL_GPIO_Init+0x1ee>
 800242c:	2304      	movs	r3, #4
 800242e:	e004      	b.n	800243a <HAL_GPIO_Init+0x1ee>
 8002430:	2302      	movs	r3, #2
 8002432:	e002      	b.n	800243a <HAL_GPIO_Init+0x1ee>
 8002434:	2301      	movs	r3, #1
 8002436:	e000      	b.n	800243a <HAL_GPIO_Init+0x1ee>
 8002438:	2300      	movs	r3, #0
 800243a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800243c:	f002 0203 	and.w	r2, r2, #3
 8002440:	0092      	lsls	r2, r2, #2
 8002442:	4093      	lsls	r3, r2
 8002444:	68fa      	ldr	r2, [r7, #12]
 8002446:	4313      	orrs	r3, r2
 8002448:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800244a:	492f      	ldr	r1, [pc, #188]	@ (8002508 <HAL_GPIO_Init+0x2bc>)
 800244c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800244e:	089b      	lsrs	r3, r3, #2
 8002450:	3302      	adds	r3, #2
 8002452:	68fa      	ldr	r2, [r7, #12]
 8002454:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002458:	683b      	ldr	r3, [r7, #0]
 800245a:	685b      	ldr	r3, [r3, #4]
 800245c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002460:	2b00      	cmp	r3, #0
 8002462:	d006      	beq.n	8002472 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002464:	4b2d      	ldr	r3, [pc, #180]	@ (800251c <HAL_GPIO_Init+0x2d0>)
 8002466:	689a      	ldr	r2, [r3, #8]
 8002468:	492c      	ldr	r1, [pc, #176]	@ (800251c <HAL_GPIO_Init+0x2d0>)
 800246a:	69bb      	ldr	r3, [r7, #24]
 800246c:	4313      	orrs	r3, r2
 800246e:	608b      	str	r3, [r1, #8]
 8002470:	e006      	b.n	8002480 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002472:	4b2a      	ldr	r3, [pc, #168]	@ (800251c <HAL_GPIO_Init+0x2d0>)
 8002474:	689a      	ldr	r2, [r3, #8]
 8002476:	69bb      	ldr	r3, [r7, #24]
 8002478:	43db      	mvns	r3, r3
 800247a:	4928      	ldr	r1, [pc, #160]	@ (800251c <HAL_GPIO_Init+0x2d0>)
 800247c:	4013      	ands	r3, r2
 800247e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002480:	683b      	ldr	r3, [r7, #0]
 8002482:	685b      	ldr	r3, [r3, #4]
 8002484:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002488:	2b00      	cmp	r3, #0
 800248a:	d006      	beq.n	800249a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800248c:	4b23      	ldr	r3, [pc, #140]	@ (800251c <HAL_GPIO_Init+0x2d0>)
 800248e:	68da      	ldr	r2, [r3, #12]
 8002490:	4922      	ldr	r1, [pc, #136]	@ (800251c <HAL_GPIO_Init+0x2d0>)
 8002492:	69bb      	ldr	r3, [r7, #24]
 8002494:	4313      	orrs	r3, r2
 8002496:	60cb      	str	r3, [r1, #12]
 8002498:	e006      	b.n	80024a8 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800249a:	4b20      	ldr	r3, [pc, #128]	@ (800251c <HAL_GPIO_Init+0x2d0>)
 800249c:	68da      	ldr	r2, [r3, #12]
 800249e:	69bb      	ldr	r3, [r7, #24]
 80024a0:	43db      	mvns	r3, r3
 80024a2:	491e      	ldr	r1, [pc, #120]	@ (800251c <HAL_GPIO_Init+0x2d0>)
 80024a4:	4013      	ands	r3, r2
 80024a6:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80024a8:	683b      	ldr	r3, [r7, #0]
 80024aa:	685b      	ldr	r3, [r3, #4]
 80024ac:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d006      	beq.n	80024c2 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80024b4:	4b19      	ldr	r3, [pc, #100]	@ (800251c <HAL_GPIO_Init+0x2d0>)
 80024b6:	685a      	ldr	r2, [r3, #4]
 80024b8:	4918      	ldr	r1, [pc, #96]	@ (800251c <HAL_GPIO_Init+0x2d0>)
 80024ba:	69bb      	ldr	r3, [r7, #24]
 80024bc:	4313      	orrs	r3, r2
 80024be:	604b      	str	r3, [r1, #4]
 80024c0:	e006      	b.n	80024d0 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80024c2:	4b16      	ldr	r3, [pc, #88]	@ (800251c <HAL_GPIO_Init+0x2d0>)
 80024c4:	685a      	ldr	r2, [r3, #4]
 80024c6:	69bb      	ldr	r3, [r7, #24]
 80024c8:	43db      	mvns	r3, r3
 80024ca:	4914      	ldr	r1, [pc, #80]	@ (800251c <HAL_GPIO_Init+0x2d0>)
 80024cc:	4013      	ands	r3, r2
 80024ce:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80024d0:	683b      	ldr	r3, [r7, #0]
 80024d2:	685b      	ldr	r3, [r3, #4]
 80024d4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d021      	beq.n	8002520 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80024dc:	4b0f      	ldr	r3, [pc, #60]	@ (800251c <HAL_GPIO_Init+0x2d0>)
 80024de:	681a      	ldr	r2, [r3, #0]
 80024e0:	490e      	ldr	r1, [pc, #56]	@ (800251c <HAL_GPIO_Init+0x2d0>)
 80024e2:	69bb      	ldr	r3, [r7, #24]
 80024e4:	4313      	orrs	r3, r2
 80024e6:	600b      	str	r3, [r1, #0]
 80024e8:	e021      	b.n	800252e <HAL_GPIO_Init+0x2e2>
 80024ea:	bf00      	nop
 80024ec:	10320000 	.word	0x10320000
 80024f0:	10310000 	.word	0x10310000
 80024f4:	10220000 	.word	0x10220000
 80024f8:	10210000 	.word	0x10210000
 80024fc:	10120000 	.word	0x10120000
 8002500:	10110000 	.word	0x10110000
 8002504:	40021000 	.word	0x40021000
 8002508:	40010000 	.word	0x40010000
 800250c:	40010800 	.word	0x40010800
 8002510:	40010c00 	.word	0x40010c00
 8002514:	40011000 	.word	0x40011000
 8002518:	40011400 	.word	0x40011400
 800251c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002520:	4b0b      	ldr	r3, [pc, #44]	@ (8002550 <HAL_GPIO_Init+0x304>)
 8002522:	681a      	ldr	r2, [r3, #0]
 8002524:	69bb      	ldr	r3, [r7, #24]
 8002526:	43db      	mvns	r3, r3
 8002528:	4909      	ldr	r1, [pc, #36]	@ (8002550 <HAL_GPIO_Init+0x304>)
 800252a:	4013      	ands	r3, r2
 800252c:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800252e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002530:	3301      	adds	r3, #1
 8002532:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002534:	683b      	ldr	r3, [r7, #0]
 8002536:	681a      	ldr	r2, [r3, #0]
 8002538:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800253a:	fa22 f303 	lsr.w	r3, r2, r3
 800253e:	2b00      	cmp	r3, #0
 8002540:	f47f ae8e 	bne.w	8002260 <HAL_GPIO_Init+0x14>
  }
}
 8002544:	bf00      	nop
 8002546:	bf00      	nop
 8002548:	372c      	adds	r7, #44	@ 0x2c
 800254a:	46bd      	mov	sp, r7
 800254c:	bc80      	pop	{r7}
 800254e:	4770      	bx	lr
 8002550:	40010400 	.word	0x40010400

08002554 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002554:	b580      	push	{r7, lr}
 8002556:	b084      	sub	sp, #16
 8002558:	af00      	add	r7, sp, #0
 800255a:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	2b00      	cmp	r3, #0
 8002560:	d101      	bne.n	8002566 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002562:	2301      	movs	r3, #1
 8002564:	e0e8      	b.n	8002738 <HAL_PCD_Init+0x1e4>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	f893 3291 	ldrb.w	r3, [r3, #657]	@ 0x291
 800256c:	b2db      	uxtb	r3, r3
 800256e:	2b00      	cmp	r3, #0
 8002570:	d106      	bne.n	8002580 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	2200      	movs	r2, #0
 8002576:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800257a:	6878      	ldr	r0, [r7, #4]
 800257c:	f006 ff5c 	bl	8009438 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	2203      	movs	r2, #3
 8002584:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Disable DMA mode for FS instance */
  hpcd->Init.dma_enable = 0U;
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	2200      	movs	r2, #0
 800258c:	715a      	strb	r2, [r3, #5]

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	4618      	mov	r0, r3
 8002594:	f002 fe72 	bl	800527c <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	6818      	ldr	r0, [r3, #0]
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	3304      	adds	r3, #4
 80025a0:	cb0e      	ldmia	r3, {r1, r2, r3}
 80025a2:	f002 fe48 	bl	8005236 <USB_CoreInit>
 80025a6:	4603      	mov	r3, r0
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d005      	beq.n	80025b8 <HAL_PCD_Init+0x64>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	2202      	movs	r2, #2
 80025b0:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291
    return HAL_ERROR;
 80025b4:	2301      	movs	r3, #1
 80025b6:	e0bf      	b.n	8002738 <HAL_PCD_Init+0x1e4>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	2100      	movs	r1, #0
 80025be:	4618      	mov	r0, r3
 80025c0:	f002 fe76 	bl	80052b0 <USB_SetCurrentMode>
 80025c4:	4603      	mov	r3, r0
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d005      	beq.n	80025d6 <HAL_PCD_Init+0x82>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	2202      	movs	r2, #2
 80025ce:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291
    return HAL_ERROR;
 80025d2:	2301      	movs	r3, #1
 80025d4:	e0b0      	b.n	8002738 <HAL_PCD_Init+0x1e4>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80025d6:	2300      	movs	r3, #0
 80025d8:	73fb      	strb	r3, [r7, #15]
 80025da:	e03e      	b.n	800265a <HAL_PCD_Init+0x106>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80025dc:	7bfa      	ldrb	r2, [r7, #15]
 80025de:	6879      	ldr	r1, [r7, #4]
 80025e0:	4613      	mov	r3, r2
 80025e2:	009b      	lsls	r3, r3, #2
 80025e4:	4413      	add	r3, r2
 80025e6:	00db      	lsls	r3, r3, #3
 80025e8:	440b      	add	r3, r1
 80025ea:	3311      	adds	r3, #17
 80025ec:	2201      	movs	r2, #1
 80025ee:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80025f0:	7bfa      	ldrb	r2, [r7, #15]
 80025f2:	6879      	ldr	r1, [r7, #4]
 80025f4:	4613      	mov	r3, r2
 80025f6:	009b      	lsls	r3, r3, #2
 80025f8:	4413      	add	r3, r2
 80025fa:	00db      	lsls	r3, r3, #3
 80025fc:	440b      	add	r3, r1
 80025fe:	3310      	adds	r3, #16
 8002600:	7bfa      	ldrb	r2, [r7, #15]
 8002602:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS)
    hpcd->IN_ep[i].tx_fifo_num = i;
#endif /* defined (USB_OTG_FS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002604:	7bfa      	ldrb	r2, [r7, #15]
 8002606:	6879      	ldr	r1, [r7, #4]
 8002608:	4613      	mov	r3, r2
 800260a:	009b      	lsls	r3, r3, #2
 800260c:	4413      	add	r3, r2
 800260e:	00db      	lsls	r3, r3, #3
 8002610:	440b      	add	r3, r1
 8002612:	3313      	adds	r3, #19
 8002614:	2200      	movs	r2, #0
 8002616:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002618:	7bfa      	ldrb	r2, [r7, #15]
 800261a:	6879      	ldr	r1, [r7, #4]
 800261c:	4613      	mov	r3, r2
 800261e:	009b      	lsls	r3, r3, #2
 8002620:	4413      	add	r3, r2
 8002622:	00db      	lsls	r3, r3, #3
 8002624:	440b      	add	r3, r1
 8002626:	3320      	adds	r3, #32
 8002628:	2200      	movs	r2, #0
 800262a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800262c:	7bfa      	ldrb	r2, [r7, #15]
 800262e:	6879      	ldr	r1, [r7, #4]
 8002630:	4613      	mov	r3, r2
 8002632:	009b      	lsls	r3, r3, #2
 8002634:	4413      	add	r3, r2
 8002636:	00db      	lsls	r3, r3, #3
 8002638:	440b      	add	r3, r1
 800263a:	3324      	adds	r3, #36	@ 0x24
 800263c:	2200      	movs	r2, #0
 800263e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002640:	7bfb      	ldrb	r3, [r7, #15]
 8002642:	6879      	ldr	r1, [r7, #4]
 8002644:	1c5a      	adds	r2, r3, #1
 8002646:	4613      	mov	r3, r2
 8002648:	009b      	lsls	r3, r3, #2
 800264a:	4413      	add	r3, r2
 800264c:	00db      	lsls	r3, r3, #3
 800264e:	440b      	add	r3, r1
 8002650:	2200      	movs	r2, #0
 8002652:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002654:	7bfb      	ldrb	r3, [r7, #15]
 8002656:	3301      	adds	r3, #1
 8002658:	73fb      	strb	r3, [r7, #15]
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	791b      	ldrb	r3, [r3, #4]
 800265e:	7bfa      	ldrb	r2, [r7, #15]
 8002660:	429a      	cmp	r2, r3
 8002662:	d3bb      	bcc.n	80025dc <HAL_PCD_Init+0x88>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002664:	2300      	movs	r3, #0
 8002666:	73fb      	strb	r3, [r7, #15]
 8002668:	e044      	b.n	80026f4 <HAL_PCD_Init+0x1a0>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800266a:	7bfa      	ldrb	r2, [r7, #15]
 800266c:	6879      	ldr	r1, [r7, #4]
 800266e:	4613      	mov	r3, r2
 8002670:	009b      	lsls	r3, r3, #2
 8002672:	4413      	add	r3, r2
 8002674:	00db      	lsls	r3, r3, #3
 8002676:	440b      	add	r3, r1
 8002678:	f203 1351 	addw	r3, r3, #337	@ 0x151
 800267c:	2200      	movs	r2, #0
 800267e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002680:	7bfa      	ldrb	r2, [r7, #15]
 8002682:	6879      	ldr	r1, [r7, #4]
 8002684:	4613      	mov	r3, r2
 8002686:	009b      	lsls	r3, r3, #2
 8002688:	4413      	add	r3, r2
 800268a:	00db      	lsls	r3, r3, #3
 800268c:	440b      	add	r3, r1
 800268e:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8002692:	7bfa      	ldrb	r2, [r7, #15]
 8002694:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002696:	7bfa      	ldrb	r2, [r7, #15]
 8002698:	6879      	ldr	r1, [r7, #4]
 800269a:	4613      	mov	r3, r2
 800269c:	009b      	lsls	r3, r3, #2
 800269e:	4413      	add	r3, r2
 80026a0:	00db      	lsls	r3, r3, #3
 80026a2:	440b      	add	r3, r1
 80026a4:	f203 1353 	addw	r3, r3, #339	@ 0x153
 80026a8:	2200      	movs	r2, #0
 80026aa:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80026ac:	7bfa      	ldrb	r2, [r7, #15]
 80026ae:	6879      	ldr	r1, [r7, #4]
 80026b0:	4613      	mov	r3, r2
 80026b2:	009b      	lsls	r3, r3, #2
 80026b4:	4413      	add	r3, r2
 80026b6:	00db      	lsls	r3, r3, #3
 80026b8:	440b      	add	r3, r1
 80026ba:	f503 73b0 	add.w	r3, r3, #352	@ 0x160
 80026be:	2200      	movs	r2, #0
 80026c0:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80026c2:	7bfa      	ldrb	r2, [r7, #15]
 80026c4:	6879      	ldr	r1, [r7, #4]
 80026c6:	4613      	mov	r3, r2
 80026c8:	009b      	lsls	r3, r3, #2
 80026ca:	4413      	add	r3, r2
 80026cc:	00db      	lsls	r3, r3, #3
 80026ce:	440b      	add	r3, r1
 80026d0:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 80026d4:	2200      	movs	r2, #0
 80026d6:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80026d8:	7bfa      	ldrb	r2, [r7, #15]
 80026da:	6879      	ldr	r1, [r7, #4]
 80026dc:	4613      	mov	r3, r2
 80026de:	009b      	lsls	r3, r3, #2
 80026e0:	4413      	add	r3, r2
 80026e2:	00db      	lsls	r3, r3, #3
 80026e4:	440b      	add	r3, r1
 80026e6:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 80026ea:	2200      	movs	r2, #0
 80026ec:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80026ee:	7bfb      	ldrb	r3, [r7, #15]
 80026f0:	3301      	adds	r3, #1
 80026f2:	73fb      	strb	r3, [r7, #15]
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	791b      	ldrb	r3, [r3, #4]
 80026f8:	7bfa      	ldrb	r2, [r7, #15]
 80026fa:	429a      	cmp	r2, r3
 80026fc:	d3b5      	bcc.n	800266a <HAL_PCD_Init+0x116>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	6818      	ldr	r0, [r3, #0]
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	3304      	adds	r3, #4
 8002706:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002708:	f002 fdde 	bl	80052c8 <USB_DevInit>
 800270c:	4603      	mov	r3, r0
 800270e:	2b00      	cmp	r3, #0
 8002710:	d005      	beq.n	800271e <HAL_PCD_Init+0x1ca>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	2202      	movs	r2, #2
 8002716:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291
    return HAL_ERROR;
 800271a:	2301      	movs	r3, #1
 800271c:	e00c      	b.n	8002738 <HAL_PCD_Init+0x1e4>
  }

  hpcd->USB_Address = 0U;
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	2200      	movs	r2, #0
 8002722:	735a      	strb	r2, [r3, #13]
  hpcd->State = HAL_PCD_STATE_READY;
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	2201      	movs	r2, #1
 8002728:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291
  (void)USB_DevDisconnect(hpcd->Instance);
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	4618      	mov	r0, r3
 8002732:	f005 f85e 	bl	80077f2 <USB_DevDisconnect>

  return HAL_OK;
 8002736:	2300      	movs	r3, #0
}
 8002738:	4618      	mov	r0, r3
 800273a:	3710      	adds	r7, #16
 800273c:	46bd      	mov	sp, r7
 800273e:	bd80      	pop	{r7, pc}

08002740 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8002740:	b580      	push	{r7, lr}
 8002742:	b082      	sub	sp, #8
 8002744:	af00      	add	r7, sp, #0
 8002746:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 800274e:	2b01      	cmp	r3, #1
 8002750:	d101      	bne.n	8002756 <HAL_PCD_Start+0x16>
 8002752:	2302      	movs	r3, #2
 8002754:	e016      	b.n	8002784 <HAL_PCD_Start+0x44>
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	2201      	movs	r2, #1
 800275a:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  __HAL_PCD_ENABLE(hpcd);
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	4618      	mov	r0, r3
 8002764:	f002 fd74 	bl	8005250 <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 8002768:	2101      	movs	r1, #1
 800276a:	6878      	ldr	r0, [r7, #4]
 800276c:	f007 f8d7 	bl	800991e <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	4618      	mov	r0, r3
 8002776:	f005 f832 	bl	80077de <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	2200      	movs	r2, #0
 800277e:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8002782:	2300      	movs	r3, #0
}
 8002784:	4618      	mov	r0, r3
 8002786:	3708      	adds	r7, #8
 8002788:	46bd      	mov	sp, r7
 800278a:	bd80      	pop	{r7, pc}

0800278c <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800278c:	b580      	push	{r7, lr}
 800278e:	b088      	sub	sp, #32
 8002790:	af00      	add	r7, sp, #0
 8002792:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	4618      	mov	r0, r3
 800279a:	f005 f834 	bl	8007806 <USB_ReadInterrupts>
 800279e:	61b8      	str	r0, [r7, #24]
  uint16_t store_ep[8];
  uint8_t i;

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 80027a0:	69bb      	ldr	r3, [r7, #24]
 80027a2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d003      	beq.n	80027b2 <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 80027aa:	6878      	ldr	r0, [r7, #4]
 80027ac:	f000 fb1a 	bl	8002de4 <PCD_EP_ISR_Handler>

    return;
 80027b0:	e119      	b.n	80029e6 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 80027b2:	69bb      	ldr	r3, [r7, #24]
 80027b4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d013      	beq.n	80027e4 <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80027c4:	b29a      	uxth	r2, r3
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80027ce:	b292      	uxth	r2, r2
 80027d0:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 80027d4:	6878      	ldr	r0, [r7, #4]
 80027d6:	f006 feaa 	bl	800952e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 80027da:	2100      	movs	r1, #0
 80027dc:	6878      	ldr	r0, [r7, #4]
 80027de:	f000 f905 	bl	80029ec <HAL_PCD_SetAddress>

    return;
 80027e2:	e100      	b.n	80029e6 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 80027e4:	69bb      	ldr	r3, [r7, #24]
 80027e6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d00c      	beq.n	8002808 <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80027f6:	b29a      	uxth	r2, r3
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8002800:	b292      	uxth	r2, r2
 8002802:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8002806:	e0ee      	b.n	80029e6 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 8002808:	69bb      	ldr	r3, [r7, #24]
 800280a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800280e:	2b00      	cmp	r3, #0
 8002810:	d00c      	beq.n	800282c <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800281a:	b29a      	uxth	r2, r3
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002824:	b292      	uxth	r2, r2
 8002826:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 800282a:	e0dc      	b.n	80029e6 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 800282c:	69bb      	ldr	r3, [r7, #24]
 800282e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002832:	2b00      	cmp	r3, #0
 8002834:	d027      	beq.n	8002886 <HAL_PCD_IRQHandler+0xfa>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800283e:	b29a      	uxth	r2, r3
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	f022 0204 	bic.w	r2, r2, #4
 8002848:	b292      	uxth	r2, r2
 800284a:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8002856:	b29a      	uxth	r2, r3
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	f022 0208 	bic.w	r2, r2, #8
 8002860:	b292      	uxth	r2, r2
 8002862:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8002866:	6878      	ldr	r0, [r7, #4]
 8002868:	f006 fe9a 	bl	80095a0 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002874:	b29a      	uxth	r2, r3
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800287e:	b292      	uxth	r2, r2
 8002880:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8002884:	e0af      	b.n	80029e6 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 8002886:	69bb      	ldr	r3, [r7, #24]
 8002888:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800288c:	2b00      	cmp	r3, #0
 800288e:	f000 8083 	beq.w	8002998 <HAL_PCD_IRQHandler+0x20c>
  {
    /* WA: To Clear Wakeup flag if raised with suspend signal */

    /* Store Endpoint registers */
    for (i = 0U; i < 8U; i++)
 8002892:	2300      	movs	r3, #0
 8002894:	77fb      	strb	r3, [r7, #31]
 8002896:	e010      	b.n	80028ba <HAL_PCD_IRQHandler+0x12e>
    {
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	461a      	mov	r2, r3
 800289e:	7ffb      	ldrb	r3, [r7, #31]
 80028a0:	009b      	lsls	r3, r3, #2
 80028a2:	441a      	add	r2, r3
 80028a4:	7ffb      	ldrb	r3, [r7, #31]
 80028a6:	8812      	ldrh	r2, [r2, #0]
 80028a8:	b292      	uxth	r2, r2
 80028aa:	005b      	lsls	r3, r3, #1
 80028ac:	3320      	adds	r3, #32
 80028ae:	443b      	add	r3, r7
 80028b0:	f823 2c18 	strh.w	r2, [r3, #-24]
    for (i = 0U; i < 8U; i++)
 80028b4:	7ffb      	ldrb	r3, [r7, #31]
 80028b6:	3301      	adds	r3, #1
 80028b8:	77fb      	strb	r3, [r7, #31]
 80028ba:	7ffb      	ldrb	r3, [r7, #31]
 80028bc:	2b07      	cmp	r3, #7
 80028be:	d9eb      	bls.n	8002898 <HAL_PCD_IRQHandler+0x10c>
    }

    /* FORCE RESET */
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80028c8:	b29a      	uxth	r2, r3
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	f042 0201 	orr.w	r2, r2, #1
 80028d2:	b292      	uxth	r2, r2
 80028d4:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* CLEAR RESET */
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80028e0:	b29a      	uxth	r2, r3
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	f022 0201 	bic.w	r2, r2, #1
 80028ea:	b292      	uxth	r2, r2
 80028ec:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* wait for reset flag in ISTR */
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 80028f0:	bf00      	nop
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80028fa:	b29b      	uxth	r3, r3
 80028fc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002900:	2b00      	cmp	r3, #0
 8002902:	d0f6      	beq.n	80028f2 <HAL_PCD_IRQHandler+0x166>
    {
    }

    /* Clear Reset Flag */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800290c:	b29a      	uxth	r2, r3
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002916:	b292      	uxth	r2, r2
 8002918:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    /* Restore Registre */
    for (i = 0U; i < 8U; i++)
 800291c:	2300      	movs	r3, #0
 800291e:	77fb      	strb	r3, [r7, #31]
 8002920:	e00f      	b.n	8002942 <HAL_PCD_IRQHandler+0x1b6>
    {
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 8002922:	7ffb      	ldrb	r3, [r7, #31]
 8002924:	687a      	ldr	r2, [r7, #4]
 8002926:	6812      	ldr	r2, [r2, #0]
 8002928:	4611      	mov	r1, r2
 800292a:	7ffa      	ldrb	r2, [r7, #31]
 800292c:	0092      	lsls	r2, r2, #2
 800292e:	440a      	add	r2, r1
 8002930:	005b      	lsls	r3, r3, #1
 8002932:	3320      	adds	r3, #32
 8002934:	443b      	add	r3, r7
 8002936:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 800293a:	8013      	strh	r3, [r2, #0]
    for (i = 0U; i < 8U; i++)
 800293c:	7ffb      	ldrb	r3, [r7, #31]
 800293e:	3301      	adds	r3, #1
 8002940:	77fb      	strb	r3, [r7, #31]
 8002942:	7ffb      	ldrb	r3, [r7, #31]
 8002944:	2b07      	cmp	r3, #7
 8002946:	d9ec      	bls.n	8002922 <HAL_PCD_IRQHandler+0x196>
    }

    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8002950:	b29a      	uxth	r2, r3
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	f042 0208 	orr.w	r2, r2, #8
 800295a:	b292      	uxth	r2, r2
 800295c:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002968:	b29a      	uxth	r2, r3
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002972:	b292      	uxth	r2, r2
 8002974:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8002980:	b29a      	uxth	r2, r3
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	f042 0204 	orr.w	r2, r2, #4
 800298a:	b292      	uxth	r2, r2
 800298c:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8002990:	6878      	ldr	r0, [r7, #4]
 8002992:	f006 fdeb 	bl	800956c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8002996:	e026      	b.n	80029e6 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 8002998:	69bb      	ldr	r3, [r7, #24]
 800299a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d00f      	beq.n	80029c2 <HAL_PCD_IRQHandler+0x236>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80029aa:	b29a      	uxth	r2, r3
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 80029b4:	b292      	uxth	r2, r2
 80029b6:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 80029ba:	6878      	ldr	r0, [r7, #4]
 80029bc:	f006 fda9 	bl	8009512 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 80029c0:	e011      	b.n	80029e6 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 80029c2:	69bb      	ldr	r3, [r7, #24]
 80029c4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d00c      	beq.n	80029e6 <HAL_PCD_IRQHandler+0x25a>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80029d4:	b29a      	uxth	r2, r3
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80029de:	b292      	uxth	r2, r2
 80029e0:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 80029e4:	bf00      	nop
  }
}
 80029e6:	3720      	adds	r7, #32
 80029e8:	46bd      	mov	sp, r7
 80029ea:	bd80      	pop	{r7, pc}

080029ec <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80029ec:	b580      	push	{r7, lr}
 80029ee:	b082      	sub	sp, #8
 80029f0:	af00      	add	r7, sp, #0
 80029f2:	6078      	str	r0, [r7, #4]
 80029f4:	460b      	mov	r3, r1
 80029f6:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 80029fe:	2b01      	cmp	r3, #1
 8002a00:	d101      	bne.n	8002a06 <HAL_PCD_SetAddress+0x1a>
 8002a02:	2302      	movs	r3, #2
 8002a04:	e012      	b.n	8002a2c <HAL_PCD_SetAddress+0x40>
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	2201      	movs	r2, #1
 8002a0a:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  hpcd->USB_Address = address;
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	78fa      	ldrb	r2, [r7, #3]
 8002a12:	735a      	strb	r2, [r3, #13]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	78fa      	ldrb	r2, [r7, #3]
 8002a1a:	4611      	mov	r1, r2
 8002a1c:	4618      	mov	r0, r3
 8002a1e:	f004 fecb 	bl	80077b8 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	2200      	movs	r2, #0
 8002a26:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8002a2a:	2300      	movs	r3, #0
}
 8002a2c:	4618      	mov	r0, r3
 8002a2e:	3708      	adds	r7, #8
 8002a30:	46bd      	mov	sp, r7
 8002a32:	bd80      	pop	{r7, pc}

08002a34 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8002a34:	b580      	push	{r7, lr}
 8002a36:	b084      	sub	sp, #16
 8002a38:	af00      	add	r7, sp, #0
 8002a3a:	6078      	str	r0, [r7, #4]
 8002a3c:	4608      	mov	r0, r1
 8002a3e:	4611      	mov	r1, r2
 8002a40:	461a      	mov	r2, r3
 8002a42:	4603      	mov	r3, r0
 8002a44:	70fb      	strb	r3, [r7, #3]
 8002a46:	460b      	mov	r3, r1
 8002a48:	803b      	strh	r3, [r7, #0]
 8002a4a:	4613      	mov	r3, r2
 8002a4c:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8002a4e:	2300      	movs	r3, #0
 8002a50:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002a52:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	da0e      	bge.n	8002a78 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002a5a:	78fb      	ldrb	r3, [r7, #3]
 8002a5c:	f003 0207 	and.w	r2, r3, #7
 8002a60:	4613      	mov	r3, r2
 8002a62:	009b      	lsls	r3, r3, #2
 8002a64:	4413      	add	r3, r2
 8002a66:	00db      	lsls	r3, r3, #3
 8002a68:	3310      	adds	r3, #16
 8002a6a:	687a      	ldr	r2, [r7, #4]
 8002a6c:	4413      	add	r3, r2
 8002a6e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	2201      	movs	r2, #1
 8002a74:	705a      	strb	r2, [r3, #1]
 8002a76:	e00e      	b.n	8002a96 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002a78:	78fb      	ldrb	r3, [r7, #3]
 8002a7a:	f003 0207 	and.w	r2, r3, #7
 8002a7e:	4613      	mov	r3, r2
 8002a80:	009b      	lsls	r3, r3, #2
 8002a82:	4413      	add	r3, r2
 8002a84:	00db      	lsls	r3, r3, #3
 8002a86:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8002a8a:	687a      	ldr	r2, [r7, #4]
 8002a8c:	4413      	add	r3, r2
 8002a8e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	2200      	movs	r2, #0
 8002a94:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8002a96:	78fb      	ldrb	r3, [r7, #3]
 8002a98:	f003 0307 	and.w	r3, r3, #7
 8002a9c:	b2da      	uxtb	r2, r3
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8002aa2:	883a      	ldrh	r2, [r7, #0]
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	78ba      	ldrb	r2, [r7, #2]
 8002aac:	70da      	strb	r2, [r3, #3]
    ep->tx_fifo_num = ep->num;
  }
#endif /* defined (USB_OTG_FS) */

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8002aae:	78bb      	ldrb	r3, [r7, #2]
 8002ab0:	2b02      	cmp	r3, #2
 8002ab2:	d102      	bne.n	8002aba <HAL_PCD_EP_Open+0x86>
  {
    ep->data_pid_start = 0U;
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	2200      	movs	r2, #0
 8002ab8:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8002ac0:	2b01      	cmp	r3, #1
 8002ac2:	d101      	bne.n	8002ac8 <HAL_PCD_EP_Open+0x94>
 8002ac4:	2302      	movs	r3, #2
 8002ac6:	e00e      	b.n	8002ae6 <HAL_PCD_EP_Open+0xb2>
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	2201      	movs	r2, #1
 8002acc:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	68f9      	ldr	r1, [r7, #12]
 8002ad6:	4618      	mov	r0, r3
 8002ad8:	f002 fc14 	bl	8005304 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	2200      	movs	r2, #0
 8002ae0:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return ret;
 8002ae4:	7afb      	ldrb	r3, [r7, #11]
}
 8002ae6:	4618      	mov	r0, r3
 8002ae8:	3710      	adds	r7, #16
 8002aea:	46bd      	mov	sp, r7
 8002aec:	bd80      	pop	{r7, pc}

08002aee <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002aee:	b580      	push	{r7, lr}
 8002af0:	b084      	sub	sp, #16
 8002af2:	af00      	add	r7, sp, #0
 8002af4:	6078      	str	r0, [r7, #4]
 8002af6:	460b      	mov	r3, r1
 8002af8:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002afa:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	da0e      	bge.n	8002b20 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002b02:	78fb      	ldrb	r3, [r7, #3]
 8002b04:	f003 0207 	and.w	r2, r3, #7
 8002b08:	4613      	mov	r3, r2
 8002b0a:	009b      	lsls	r3, r3, #2
 8002b0c:	4413      	add	r3, r2
 8002b0e:	00db      	lsls	r3, r3, #3
 8002b10:	3310      	adds	r3, #16
 8002b12:	687a      	ldr	r2, [r7, #4]
 8002b14:	4413      	add	r3, r2
 8002b16:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	2201      	movs	r2, #1
 8002b1c:	705a      	strb	r2, [r3, #1]
 8002b1e:	e00e      	b.n	8002b3e <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002b20:	78fb      	ldrb	r3, [r7, #3]
 8002b22:	f003 0207 	and.w	r2, r3, #7
 8002b26:	4613      	mov	r3, r2
 8002b28:	009b      	lsls	r3, r3, #2
 8002b2a:	4413      	add	r3, r2
 8002b2c:	00db      	lsls	r3, r3, #3
 8002b2e:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8002b32:	687a      	ldr	r2, [r7, #4]
 8002b34:	4413      	add	r3, r2
 8002b36:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	2200      	movs	r2, #0
 8002b3c:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8002b3e:	78fb      	ldrb	r3, [r7, #3]
 8002b40:	f003 0307 	and.w	r3, r3, #7
 8002b44:	b2da      	uxtb	r2, r3
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8002b50:	2b01      	cmp	r3, #1
 8002b52:	d101      	bne.n	8002b58 <HAL_PCD_EP_Close+0x6a>
 8002b54:	2302      	movs	r3, #2
 8002b56:	e00e      	b.n	8002b76 <HAL_PCD_EP_Close+0x88>
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	2201      	movs	r2, #1
 8002b5c:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	68f9      	ldr	r1, [r7, #12]
 8002b66:	4618      	mov	r0, r3
 8002b68:	f002 ff8c 	bl	8005a84 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	2200      	movs	r2, #0
 8002b70:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  return HAL_OK;
 8002b74:	2300      	movs	r3, #0
}
 8002b76:	4618      	mov	r0, r3
 8002b78:	3710      	adds	r7, #16
 8002b7a:	46bd      	mov	sp, r7
 8002b7c:	bd80      	pop	{r7, pc}

08002b7e <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002b7e:	b580      	push	{r7, lr}
 8002b80:	b086      	sub	sp, #24
 8002b82:	af00      	add	r7, sp, #0
 8002b84:	60f8      	str	r0, [r7, #12]
 8002b86:	607a      	str	r2, [r7, #4]
 8002b88:	603b      	str	r3, [r7, #0]
 8002b8a:	460b      	mov	r3, r1
 8002b8c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002b8e:	7afb      	ldrb	r3, [r7, #11]
 8002b90:	f003 0207 	and.w	r2, r3, #7
 8002b94:	4613      	mov	r3, r2
 8002b96:	009b      	lsls	r3, r3, #2
 8002b98:	4413      	add	r3, r2
 8002b9a:	00db      	lsls	r3, r3, #3
 8002b9c:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8002ba0:	68fa      	ldr	r2, [r7, #12]
 8002ba2:	4413      	add	r3, r2
 8002ba4:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002ba6:	697b      	ldr	r3, [r7, #20]
 8002ba8:	687a      	ldr	r2, [r7, #4]
 8002baa:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8002bac:	697b      	ldr	r3, [r7, #20]
 8002bae:	683a      	ldr	r2, [r7, #0]
 8002bb0:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8002bb2:	697b      	ldr	r3, [r7, #20]
 8002bb4:	2200      	movs	r2, #0
 8002bb6:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8002bb8:	697b      	ldr	r3, [r7, #20]
 8002bba:	2200      	movs	r2, #0
 8002bbc:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002bbe:	7afb      	ldrb	r3, [r7, #11]
 8002bc0:	f003 0307 	and.w	r3, r3, #7
 8002bc4:	b2da      	uxtb	r2, r3
 8002bc6:	697b      	ldr	r3, [r7, #20]
 8002bc8:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	6979      	ldr	r1, [r7, #20]
 8002bd0:	4618      	mov	r0, r3
 8002bd2:	f003 f943 	bl	8005e5c <USB_EPStartXfer>

  return HAL_OK;
 8002bd6:	2300      	movs	r3, #0
}
 8002bd8:	4618      	mov	r0, r3
 8002bda:	3718      	adds	r7, #24
 8002bdc:	46bd      	mov	sp, r7
 8002bde:	bd80      	pop	{r7, pc}

08002be0 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8002be0:	b480      	push	{r7}
 8002be2:	b083      	sub	sp, #12
 8002be4:	af00      	add	r7, sp, #0
 8002be6:	6078      	str	r0, [r7, #4]
 8002be8:	460b      	mov	r3, r1
 8002bea:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8002bec:	78fb      	ldrb	r3, [r7, #3]
 8002bee:	f003 0207 	and.w	r2, r3, #7
 8002bf2:	6879      	ldr	r1, [r7, #4]
 8002bf4:	4613      	mov	r3, r2
 8002bf6:	009b      	lsls	r3, r3, #2
 8002bf8:	4413      	add	r3, r2
 8002bfa:	00db      	lsls	r3, r3, #3
 8002bfc:	440b      	add	r3, r1
 8002bfe:	f503 73b6 	add.w	r3, r3, #364	@ 0x16c
 8002c02:	681b      	ldr	r3, [r3, #0]
}
 8002c04:	4618      	mov	r0, r3
 8002c06:	370c      	adds	r7, #12
 8002c08:	46bd      	mov	sp, r7
 8002c0a:	bc80      	pop	{r7}
 8002c0c:	4770      	bx	lr

08002c0e <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002c0e:	b580      	push	{r7, lr}
 8002c10:	b086      	sub	sp, #24
 8002c12:	af00      	add	r7, sp, #0
 8002c14:	60f8      	str	r0, [r7, #12]
 8002c16:	607a      	str	r2, [r7, #4]
 8002c18:	603b      	str	r3, [r7, #0]
 8002c1a:	460b      	mov	r3, r1
 8002c1c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002c1e:	7afb      	ldrb	r3, [r7, #11]
 8002c20:	f003 0207 	and.w	r2, r3, #7
 8002c24:	4613      	mov	r3, r2
 8002c26:	009b      	lsls	r3, r3, #2
 8002c28:	4413      	add	r3, r2
 8002c2a:	00db      	lsls	r3, r3, #3
 8002c2c:	3310      	adds	r3, #16
 8002c2e:	68fa      	ldr	r2, [r7, #12]
 8002c30:	4413      	add	r3, r2
 8002c32:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002c34:	697b      	ldr	r3, [r7, #20]
 8002c36:	687a      	ldr	r2, [r7, #4]
 8002c38:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8002c3a:	697b      	ldr	r3, [r7, #20]
 8002c3c:	683a      	ldr	r2, [r7, #0]
 8002c3e:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 8002c40:	697b      	ldr	r3, [r7, #20]
 8002c42:	2201      	movs	r2, #1
 8002c44:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  ep->xfer_len_db = len;
 8002c48:	697b      	ldr	r3, [r7, #20]
 8002c4a:	683a      	ldr	r2, [r7, #0]
 8002c4c:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 8002c4e:	697b      	ldr	r3, [r7, #20]
 8002c50:	2200      	movs	r2, #0
 8002c52:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8002c54:	697b      	ldr	r3, [r7, #20]
 8002c56:	2201      	movs	r2, #1
 8002c58:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002c5a:	7afb      	ldrb	r3, [r7, #11]
 8002c5c:	f003 0307 	and.w	r3, r3, #7
 8002c60:	b2da      	uxtb	r2, r3
 8002c62:	697b      	ldr	r3, [r7, #20]
 8002c64:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	6979      	ldr	r1, [r7, #20]
 8002c6c:	4618      	mov	r0, r3
 8002c6e:	f003 f8f5 	bl	8005e5c <USB_EPStartXfer>

  return HAL_OK;
 8002c72:	2300      	movs	r3, #0
}
 8002c74:	4618      	mov	r0, r3
 8002c76:	3718      	adds	r7, #24
 8002c78:	46bd      	mov	sp, r7
 8002c7a:	bd80      	pop	{r7, pc}

08002c7c <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002c7c:	b580      	push	{r7, lr}
 8002c7e:	b084      	sub	sp, #16
 8002c80:	af00      	add	r7, sp, #0
 8002c82:	6078      	str	r0, [r7, #4]
 8002c84:	460b      	mov	r3, r1
 8002c86:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8002c88:	78fb      	ldrb	r3, [r7, #3]
 8002c8a:	f003 0307 	and.w	r3, r3, #7
 8002c8e:	687a      	ldr	r2, [r7, #4]
 8002c90:	7912      	ldrb	r2, [r2, #4]
 8002c92:	4293      	cmp	r3, r2
 8002c94:	d901      	bls.n	8002c9a <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8002c96:	2301      	movs	r3, #1
 8002c98:	e04c      	b.n	8002d34 <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002c9a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	da0e      	bge.n	8002cc0 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002ca2:	78fb      	ldrb	r3, [r7, #3]
 8002ca4:	f003 0207 	and.w	r2, r3, #7
 8002ca8:	4613      	mov	r3, r2
 8002caa:	009b      	lsls	r3, r3, #2
 8002cac:	4413      	add	r3, r2
 8002cae:	00db      	lsls	r3, r3, #3
 8002cb0:	3310      	adds	r3, #16
 8002cb2:	687a      	ldr	r2, [r7, #4]
 8002cb4:	4413      	add	r3, r2
 8002cb6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	2201      	movs	r2, #1
 8002cbc:	705a      	strb	r2, [r3, #1]
 8002cbe:	e00c      	b.n	8002cda <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002cc0:	78fa      	ldrb	r2, [r7, #3]
 8002cc2:	4613      	mov	r3, r2
 8002cc4:	009b      	lsls	r3, r3, #2
 8002cc6:	4413      	add	r3, r2
 8002cc8:	00db      	lsls	r3, r3, #3
 8002cca:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8002cce:	687a      	ldr	r2, [r7, #4]
 8002cd0:	4413      	add	r3, r2
 8002cd2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	2200      	movs	r2, #0
 8002cd8:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	2201      	movs	r2, #1
 8002cde:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002ce0:	78fb      	ldrb	r3, [r7, #3]
 8002ce2:	f003 0307 	and.w	r3, r3, #7
 8002ce6:	b2da      	uxtb	r2, r3
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8002cf2:	2b01      	cmp	r3, #1
 8002cf4:	d101      	bne.n	8002cfa <HAL_PCD_EP_SetStall+0x7e>
 8002cf6:	2302      	movs	r3, #2
 8002cf8:	e01c      	b.n	8002d34 <HAL_PCD_EP_SetStall+0xb8>
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	2201      	movs	r2, #1
 8002cfe:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	68f9      	ldr	r1, [r7, #12]
 8002d08:	4618      	mov	r0, r3
 8002d0a:	f004 fc58 	bl	80075be <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002d0e:	78fb      	ldrb	r3, [r7, #3]
 8002d10:	f003 0307 	and.w	r3, r3, #7
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d108      	bne.n	8002d2a <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681a      	ldr	r2, [r3, #0]
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	f503 7326 	add.w	r3, r3, #664	@ 0x298
 8002d22:	4619      	mov	r1, r3
 8002d24:	4610      	mov	r0, r2
 8002d26:	f004 fd7d 	bl	8007824 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	2200      	movs	r2, #0
 8002d2e:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8002d32:	2300      	movs	r3, #0
}
 8002d34:	4618      	mov	r0, r3
 8002d36:	3710      	adds	r7, #16
 8002d38:	46bd      	mov	sp, r7
 8002d3a:	bd80      	pop	{r7, pc}

08002d3c <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002d3c:	b580      	push	{r7, lr}
 8002d3e:	b084      	sub	sp, #16
 8002d40:	af00      	add	r7, sp, #0
 8002d42:	6078      	str	r0, [r7, #4]
 8002d44:	460b      	mov	r3, r1
 8002d46:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8002d48:	78fb      	ldrb	r3, [r7, #3]
 8002d4a:	f003 030f 	and.w	r3, r3, #15
 8002d4e:	687a      	ldr	r2, [r7, #4]
 8002d50:	7912      	ldrb	r2, [r2, #4]
 8002d52:	4293      	cmp	r3, r2
 8002d54:	d901      	bls.n	8002d5a <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8002d56:	2301      	movs	r3, #1
 8002d58:	e040      	b.n	8002ddc <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002d5a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	da0e      	bge.n	8002d80 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002d62:	78fb      	ldrb	r3, [r7, #3]
 8002d64:	f003 0207 	and.w	r2, r3, #7
 8002d68:	4613      	mov	r3, r2
 8002d6a:	009b      	lsls	r3, r3, #2
 8002d6c:	4413      	add	r3, r2
 8002d6e:	00db      	lsls	r3, r3, #3
 8002d70:	3310      	adds	r3, #16
 8002d72:	687a      	ldr	r2, [r7, #4]
 8002d74:	4413      	add	r3, r2
 8002d76:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	2201      	movs	r2, #1
 8002d7c:	705a      	strb	r2, [r3, #1]
 8002d7e:	e00e      	b.n	8002d9e <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002d80:	78fb      	ldrb	r3, [r7, #3]
 8002d82:	f003 0207 	and.w	r2, r3, #7
 8002d86:	4613      	mov	r3, r2
 8002d88:	009b      	lsls	r3, r3, #2
 8002d8a:	4413      	add	r3, r2
 8002d8c:	00db      	lsls	r3, r3, #3
 8002d8e:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8002d92:	687a      	ldr	r2, [r7, #4]
 8002d94:	4413      	add	r3, r2
 8002d96:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	2200      	movs	r2, #0
 8002d9c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	2200      	movs	r2, #0
 8002da2:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002da4:	78fb      	ldrb	r3, [r7, #3]
 8002da6:	f003 0307 	and.w	r3, r3, #7
 8002daa:	b2da      	uxtb	r2, r3
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8002db6:	2b01      	cmp	r3, #1
 8002db8:	d101      	bne.n	8002dbe <HAL_PCD_EP_ClrStall+0x82>
 8002dba:	2302      	movs	r3, #2
 8002dbc:	e00e      	b.n	8002ddc <HAL_PCD_EP_ClrStall+0xa0>
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	2201      	movs	r2, #1
 8002dc2:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	68f9      	ldr	r1, [r7, #12]
 8002dcc:	4618      	mov	r0, r3
 8002dce:	f004 fc46 	bl	800765e <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	2200      	movs	r2, #0
 8002dd6:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8002dda:	2300      	movs	r3, #0
}
 8002ddc:	4618      	mov	r0, r3
 8002dde:	3710      	adds	r7, #16
 8002de0:	46bd      	mov	sp, r7
 8002de2:	bd80      	pop	{r7, pc}

08002de4 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8002de4:	b580      	push	{r7, lr}
 8002de6:	b096      	sub	sp, #88	@ 0x58
 8002de8:	af00      	add	r7, sp, #0
 8002dea:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8002dec:	e3bb      	b.n	8003566 <PCD_EP_ISR_Handler+0x782>
  {
    wIstr = hpcd->Instance->ISTR;
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002df6:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8002dfa:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8002dfe:	b2db      	uxtb	r3, r3
 8002e00:	f003 030f 	and.w	r3, r3, #15
 8002e04:	f887 304d 	strb.w	r3, [r7, #77]	@ 0x4d

    if (epindex == 0U)
 8002e08:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	f040 8175 	bne.w	80030fc <PCD_EP_ISR_Handler+0x318>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8002e12:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8002e16:	f003 0310 	and.w	r3, r3, #16
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d14e      	bne.n	8002ebc <PCD_EP_ISR_Handler+0xd8>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	881b      	ldrh	r3, [r3, #0]
 8002e24:	b29b      	uxth	r3, r3
 8002e26:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 8002e2a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002e2e:	81fb      	strh	r3, [r7, #14]
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681a      	ldr	r2, [r3, #0]
 8002e34:	89fb      	ldrh	r3, [r7, #14]
 8002e36:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002e3a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002e3e:	b29b      	uxth	r3, r3
 8002e40:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	3310      	adds	r3, #16
 8002e46:	657b      	str	r3, [r7, #84]	@ 0x54

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002e50:	b29b      	uxth	r3, r3
 8002e52:	461a      	mov	r2, r3
 8002e54:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002e56:	781b      	ldrb	r3, [r3, #0]
 8002e58:	00db      	lsls	r3, r3, #3
 8002e5a:	4413      	add	r3, r2
 8002e5c:	3302      	adds	r3, #2
 8002e5e:	005b      	lsls	r3, r3, #1
 8002e60:	687a      	ldr	r2, [r7, #4]
 8002e62:	6812      	ldr	r2, [r2, #0]
 8002e64:	4413      	add	r3, r2
 8002e66:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8002e6a:	881b      	ldrh	r3, [r3, #0]
 8002e6c:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002e70:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002e72:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8002e74:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002e76:	695a      	ldr	r2, [r3, #20]
 8002e78:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002e7a:	69db      	ldr	r3, [r3, #28]
 8002e7c:	441a      	add	r2, r3
 8002e7e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002e80:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8002e82:	2100      	movs	r1, #0
 8002e84:	6878      	ldr	r0, [r7, #4]
 8002e86:	f006 fb2a 	bl	80094de <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	7b5b      	ldrb	r3, [r3, #13]
 8002e8e:	b2db      	uxtb	r3, r3
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	f000 8368 	beq.w	8003566 <PCD_EP_ISR_Handler+0x782>
 8002e96:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002e98:	699b      	ldr	r3, [r3, #24]
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	f040 8363 	bne.w	8003566 <PCD_EP_ISR_Handler+0x782>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	7b5b      	ldrb	r3, [r3, #13]
 8002ea4:	b2db      	uxtb	r3, r3
 8002ea6:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8002eaa:	b2da      	uxtb	r2, r3
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
          hpcd->USB_Address = 0U;
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	2200      	movs	r2, #0
 8002eb8:	735a      	strb	r2, [r3, #13]
 8002eba:	e354      	b.n	8003566 <PCD_EP_ISR_Handler+0x782>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8002ec2:	657b      	str	r3, [r7, #84]	@ 0x54
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	881b      	ldrh	r3, [r3, #0]
 8002eca:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8002ece:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8002ed2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d034      	beq.n	8002f44 <PCD_EP_ISR_Handler+0x160>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002ee2:	b29b      	uxth	r3, r3
 8002ee4:	461a      	mov	r2, r3
 8002ee6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002ee8:	781b      	ldrb	r3, [r3, #0]
 8002eea:	00db      	lsls	r3, r3, #3
 8002eec:	4413      	add	r3, r2
 8002eee:	3306      	adds	r3, #6
 8002ef0:	005b      	lsls	r3, r3, #1
 8002ef2:	687a      	ldr	r2, [r7, #4]
 8002ef4:	6812      	ldr	r2, [r2, #0]
 8002ef6:	4413      	add	r3, r2
 8002ef8:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8002efc:	881b      	ldrh	r3, [r3, #0]
 8002efe:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002f02:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002f04:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	6818      	ldr	r0, [r3, #0]
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	f503 7126 	add.w	r1, r3, #664	@ 0x298
 8002f10:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002f12:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8002f14:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002f16:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8002f18:	b29b      	uxth	r3, r3
 8002f1a:	f004 fcd3 	bl	80078c4 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	881b      	ldrh	r3, [r3, #0]
 8002f24:	b29a      	uxth	r2, r3
 8002f26:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8002f2a:	4013      	ands	r3, r2
 8002f2c:	823b      	strh	r3, [r7, #16]
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	8a3a      	ldrh	r2, [r7, #16]
 8002f34:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8002f38:	b292      	uxth	r2, r2
 8002f3a:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8002f3c:	6878      	ldr	r0, [r7, #4]
 8002f3e:	f006 faa1 	bl	8009484 <HAL_PCD_SetupStageCallback>
 8002f42:	e310      	b.n	8003566 <PCD_EP_ISR_Handler+0x782>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8002f44:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	@ 0x4a
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	f280 830c 	bge.w	8003566 <PCD_EP_ISR_Handler+0x782>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	881b      	ldrh	r3, [r3, #0]
 8002f54:	b29a      	uxth	r2, r3
 8002f56:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8002f5a:	4013      	ands	r3, r2
 8002f5c:	83fb      	strh	r3, [r7, #30]
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	8bfa      	ldrh	r2, [r7, #30]
 8002f64:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8002f68:	b292      	uxth	r2, r2
 8002f6a:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002f74:	b29b      	uxth	r3, r3
 8002f76:	461a      	mov	r2, r3
 8002f78:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002f7a:	781b      	ldrb	r3, [r3, #0]
 8002f7c:	00db      	lsls	r3, r3, #3
 8002f7e:	4413      	add	r3, r2
 8002f80:	3306      	adds	r3, #6
 8002f82:	005b      	lsls	r3, r3, #1
 8002f84:	687a      	ldr	r2, [r7, #4]
 8002f86:	6812      	ldr	r2, [r2, #0]
 8002f88:	4413      	add	r3, r2
 8002f8a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8002f8e:	881b      	ldrh	r3, [r3, #0]
 8002f90:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002f94:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002f96:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8002f98:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002f9a:	69db      	ldr	r3, [r3, #28]
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d019      	beq.n	8002fd4 <PCD_EP_ISR_Handler+0x1f0>
 8002fa0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002fa2:	695b      	ldr	r3, [r3, #20]
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d015      	beq.n	8002fd4 <PCD_EP_ISR_Handler+0x1f0>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	6818      	ldr	r0, [r3, #0]
 8002fac:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002fae:	6959      	ldr	r1, [r3, #20]
 8002fb0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002fb2:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8002fb4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002fb6:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8002fb8:	b29b      	uxth	r3, r3
 8002fba:	f004 fc83 	bl	80078c4 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8002fbe:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002fc0:	695a      	ldr	r2, [r3, #20]
 8002fc2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002fc4:	69db      	ldr	r3, [r3, #28]
 8002fc6:	441a      	add	r2, r3
 8002fc8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002fca:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8002fcc:	2100      	movs	r1, #0
 8002fce:	6878      	ldr	r0, [r7, #4]
 8002fd0:	f006 fa6a 	bl	80094a8 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	881b      	ldrh	r3, [r3, #0]
 8002fda:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 8002fde:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8002fe2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	f040 82bd 	bne.w	8003566 <PCD_EP_ISR_Handler+0x782>
 8002fec:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8002ff0:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8002ff4:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8002ff8:	f000 82b5 	beq.w	8003566 <PCD_EP_ISR_Handler+0x782>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	61bb      	str	r3, [r7, #24]
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800300a:	b29b      	uxth	r3, r3
 800300c:	461a      	mov	r2, r3
 800300e:	69bb      	ldr	r3, [r7, #24]
 8003010:	4413      	add	r3, r2
 8003012:	61bb      	str	r3, [r7, #24]
 8003014:	69bb      	ldr	r3, [r7, #24]
 8003016:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800301a:	617b      	str	r3, [r7, #20]
 800301c:	697b      	ldr	r3, [r7, #20]
 800301e:	881b      	ldrh	r3, [r3, #0]
 8003020:	b29b      	uxth	r3, r3
 8003022:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003026:	b29a      	uxth	r2, r3
 8003028:	697b      	ldr	r3, [r7, #20]
 800302a:	801a      	strh	r2, [r3, #0]
 800302c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800302e:	691b      	ldr	r3, [r3, #16]
 8003030:	2b3e      	cmp	r3, #62	@ 0x3e
 8003032:	d91d      	bls.n	8003070 <PCD_EP_ISR_Handler+0x28c>
 8003034:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003036:	691b      	ldr	r3, [r3, #16]
 8003038:	095b      	lsrs	r3, r3, #5
 800303a:	647b      	str	r3, [r7, #68]	@ 0x44
 800303c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800303e:	691b      	ldr	r3, [r3, #16]
 8003040:	f003 031f 	and.w	r3, r3, #31
 8003044:	2b00      	cmp	r3, #0
 8003046:	d102      	bne.n	800304e <PCD_EP_ISR_Handler+0x26a>
 8003048:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800304a:	3b01      	subs	r3, #1
 800304c:	647b      	str	r3, [r7, #68]	@ 0x44
 800304e:	697b      	ldr	r3, [r7, #20]
 8003050:	881b      	ldrh	r3, [r3, #0]
 8003052:	b29a      	uxth	r2, r3
 8003054:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003056:	b29b      	uxth	r3, r3
 8003058:	029b      	lsls	r3, r3, #10
 800305a:	b29b      	uxth	r3, r3
 800305c:	4313      	orrs	r3, r2
 800305e:	b29b      	uxth	r3, r3
 8003060:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003064:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003068:	b29a      	uxth	r2, r3
 800306a:	697b      	ldr	r3, [r7, #20]
 800306c:	801a      	strh	r2, [r3, #0]
 800306e:	e026      	b.n	80030be <PCD_EP_ISR_Handler+0x2da>
 8003070:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003072:	691b      	ldr	r3, [r3, #16]
 8003074:	2b00      	cmp	r3, #0
 8003076:	d10a      	bne.n	800308e <PCD_EP_ISR_Handler+0x2aa>
 8003078:	697b      	ldr	r3, [r7, #20]
 800307a:	881b      	ldrh	r3, [r3, #0]
 800307c:	b29b      	uxth	r3, r3
 800307e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003082:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003086:	b29a      	uxth	r2, r3
 8003088:	697b      	ldr	r3, [r7, #20]
 800308a:	801a      	strh	r2, [r3, #0]
 800308c:	e017      	b.n	80030be <PCD_EP_ISR_Handler+0x2da>
 800308e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003090:	691b      	ldr	r3, [r3, #16]
 8003092:	085b      	lsrs	r3, r3, #1
 8003094:	647b      	str	r3, [r7, #68]	@ 0x44
 8003096:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003098:	691b      	ldr	r3, [r3, #16]
 800309a:	f003 0301 	and.w	r3, r3, #1
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d002      	beq.n	80030a8 <PCD_EP_ISR_Handler+0x2c4>
 80030a2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80030a4:	3301      	adds	r3, #1
 80030a6:	647b      	str	r3, [r7, #68]	@ 0x44
 80030a8:	697b      	ldr	r3, [r7, #20]
 80030aa:	881b      	ldrh	r3, [r3, #0]
 80030ac:	b29a      	uxth	r2, r3
 80030ae:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80030b0:	b29b      	uxth	r3, r3
 80030b2:	029b      	lsls	r3, r3, #10
 80030b4:	b29b      	uxth	r3, r3
 80030b6:	4313      	orrs	r3, r2
 80030b8:	b29a      	uxth	r2, r3
 80030ba:	697b      	ldr	r3, [r7, #20]
 80030bc:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	881b      	ldrh	r3, [r3, #0]
 80030c4:	b29b      	uxth	r3, r3
 80030c6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80030ca:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80030ce:	827b      	strh	r3, [r7, #18]
 80030d0:	8a7b      	ldrh	r3, [r7, #18]
 80030d2:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 80030d6:	827b      	strh	r3, [r7, #18]
 80030d8:	8a7b      	ldrh	r3, [r7, #18]
 80030da:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 80030de:	827b      	strh	r3, [r7, #18]
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681a      	ldr	r2, [r3, #0]
 80030e4:	8a7b      	ldrh	r3, [r7, #18]
 80030e6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80030ea:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80030ee:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80030f2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80030f6:	b29b      	uxth	r3, r3
 80030f8:	8013      	strh	r3, [r2, #0]
 80030fa:	e234      	b.n	8003566 <PCD_EP_ISR_Handler+0x782>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	461a      	mov	r2, r3
 8003102:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8003106:	009b      	lsls	r3, r3, #2
 8003108:	4413      	add	r3, r2
 800310a:	881b      	ldrh	r3, [r3, #0]
 800310c:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8003110:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	@ 0x4a
 8003114:	2b00      	cmp	r3, #0
 8003116:	f280 80fc 	bge.w	8003312 <PCD_EP_ISR_Handler+0x52e>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	461a      	mov	r2, r3
 8003120:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8003124:	009b      	lsls	r3, r3, #2
 8003126:	4413      	add	r3, r2
 8003128:	881b      	ldrh	r3, [r3, #0]
 800312a:	b29a      	uxth	r2, r3
 800312c:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8003130:	4013      	ands	r3, r2
 8003132:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	461a      	mov	r2, r3
 800313c:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8003140:	009b      	lsls	r3, r3, #2
 8003142:	4413      	add	r3, r2
 8003144:	f8b7 2048 	ldrh.w	r2, [r7, #72]	@ 0x48
 8003148:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800314c:	b292      	uxth	r2, r2
 800314e:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8003150:	f897 204d 	ldrb.w	r2, [r7, #77]	@ 0x4d
 8003154:	4613      	mov	r3, r2
 8003156:	009b      	lsls	r3, r3, #2
 8003158:	4413      	add	r3, r2
 800315a:	00db      	lsls	r3, r3, #3
 800315c:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8003160:	687a      	ldr	r2, [r7, #4]
 8003162:	4413      	add	r3, r2
 8003164:	657b      	str	r3, [r7, #84]	@ 0x54

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8003166:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003168:	7b1b      	ldrb	r3, [r3, #12]
 800316a:	2b00      	cmp	r3, #0
 800316c:	d125      	bne.n	80031ba <PCD_EP_ISR_Handler+0x3d6>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003176:	b29b      	uxth	r3, r3
 8003178:	461a      	mov	r2, r3
 800317a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800317c:	781b      	ldrb	r3, [r3, #0]
 800317e:	00db      	lsls	r3, r3, #3
 8003180:	4413      	add	r3, r2
 8003182:	3306      	adds	r3, #6
 8003184:	005b      	lsls	r3, r3, #1
 8003186:	687a      	ldr	r2, [r7, #4]
 8003188:	6812      	ldr	r2, [r2, #0]
 800318a:	4413      	add	r3, r2
 800318c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8003190:	881b      	ldrh	r3, [r3, #0]
 8003192:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003196:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

          if (count != 0U)
 800319a:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 800319e:	2b00      	cmp	r3, #0
 80031a0:	f000 8092 	beq.w	80032c8 <PCD_EP_ISR_Handler+0x4e4>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	6818      	ldr	r0, [r3, #0]
 80031a8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80031aa:	6959      	ldr	r1, [r3, #20]
 80031ac:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80031ae:	88da      	ldrh	r2, [r3, #6]
 80031b0:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 80031b4:	f004 fb86 	bl	80078c4 <USB_ReadPMA>
 80031b8:	e086      	b.n	80032c8 <PCD_EP_ISR_Handler+0x4e4>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 80031ba:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80031bc:	78db      	ldrb	r3, [r3, #3]
 80031be:	2b02      	cmp	r3, #2
 80031c0:	d10a      	bne.n	80031d8 <PCD_EP_ISR_Handler+0x3f4>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 80031c2:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 80031c6:	461a      	mov	r2, r3
 80031c8:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80031ca:	6878      	ldr	r0, [r7, #4]
 80031cc:	f000 f9d9 	bl	8003582 <HAL_PCD_EP_DB_Receive>
 80031d0:	4603      	mov	r3, r0
 80031d2:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50
 80031d6:	e077      	b.n	80032c8 <PCD_EP_ISR_Handler+0x4e4>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	461a      	mov	r2, r3
 80031de:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80031e0:	781b      	ldrb	r3, [r3, #0]
 80031e2:	009b      	lsls	r3, r3, #2
 80031e4:	4413      	add	r3, r2
 80031e6:	881b      	ldrh	r3, [r3, #0]
 80031e8:	b29b      	uxth	r3, r3
 80031ea:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80031ee:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80031f2:	f8a7 3052 	strh.w	r3, [r7, #82]	@ 0x52
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	461a      	mov	r2, r3
 80031fc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80031fe:	781b      	ldrb	r3, [r3, #0]
 8003200:	009b      	lsls	r3, r3, #2
 8003202:	441a      	add	r2, r3
 8003204:	f8b7 3052 	ldrh.w	r3, [r7, #82]	@ 0x52
 8003208:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800320c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003210:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003214:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8003218:	b29b      	uxth	r3, r3
 800321a:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	461a      	mov	r2, r3
 8003222:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003224:	781b      	ldrb	r3, [r3, #0]
 8003226:	009b      	lsls	r3, r3, #2
 8003228:	4413      	add	r3, r2
 800322a:	881b      	ldrh	r3, [r3, #0]
 800322c:	b29b      	uxth	r3, r3
 800322e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003232:	2b00      	cmp	r3, #0
 8003234:	d024      	beq.n	8003280 <PCD_EP_ISR_Handler+0x49c>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800323e:	b29b      	uxth	r3, r3
 8003240:	461a      	mov	r2, r3
 8003242:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003244:	781b      	ldrb	r3, [r3, #0]
 8003246:	00db      	lsls	r3, r3, #3
 8003248:	4413      	add	r3, r2
 800324a:	3302      	adds	r3, #2
 800324c:	005b      	lsls	r3, r3, #1
 800324e:	687a      	ldr	r2, [r7, #4]
 8003250:	6812      	ldr	r2, [r2, #0]
 8003252:	4413      	add	r3, r2
 8003254:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8003258:	881b      	ldrh	r3, [r3, #0]
 800325a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800325e:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

              if (count != 0U)
 8003262:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8003266:	2b00      	cmp	r3, #0
 8003268:	d02e      	beq.n	80032c8 <PCD_EP_ISR_Handler+0x4e4>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	6818      	ldr	r0, [r3, #0]
 800326e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003270:	6959      	ldr	r1, [r3, #20]
 8003272:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003274:	891a      	ldrh	r2, [r3, #8]
 8003276:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 800327a:	f004 fb23 	bl	80078c4 <USB_ReadPMA>
 800327e:	e023      	b.n	80032c8 <PCD_EP_ISR_Handler+0x4e4>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003288:	b29b      	uxth	r3, r3
 800328a:	461a      	mov	r2, r3
 800328c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800328e:	781b      	ldrb	r3, [r3, #0]
 8003290:	00db      	lsls	r3, r3, #3
 8003292:	4413      	add	r3, r2
 8003294:	3306      	adds	r3, #6
 8003296:	005b      	lsls	r3, r3, #1
 8003298:	687a      	ldr	r2, [r7, #4]
 800329a:	6812      	ldr	r2, [r2, #0]
 800329c:	4413      	add	r3, r2
 800329e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80032a2:	881b      	ldrh	r3, [r3, #0]
 80032a4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80032a8:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

              if (count != 0U)
 80032ac:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d009      	beq.n	80032c8 <PCD_EP_ISR_Handler+0x4e4>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	6818      	ldr	r0, [r3, #0]
 80032b8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80032ba:	6959      	ldr	r1, [r3, #20]
 80032bc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80032be:	895a      	ldrh	r2, [r3, #10]
 80032c0:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 80032c4:	f004 fafe 	bl	80078c4 <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 80032c8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80032ca:	69da      	ldr	r2, [r3, #28]
 80032cc:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 80032d0:	441a      	add	r2, r3
 80032d2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80032d4:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 80032d6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80032d8:	695a      	ldr	r2, [r3, #20]
 80032da:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 80032de:	441a      	add	r2, r3
 80032e0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80032e2:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 80032e4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80032e6:	699b      	ldr	r3, [r3, #24]
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d005      	beq.n	80032f8 <PCD_EP_ISR_Handler+0x514>
 80032ec:	f8b7 2050 	ldrh.w	r2, [r7, #80]	@ 0x50
 80032f0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80032f2:	691b      	ldr	r3, [r3, #16]
 80032f4:	429a      	cmp	r2, r3
 80032f6:	d206      	bcs.n	8003306 <PCD_EP_ISR_Handler+0x522>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 80032f8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80032fa:	781b      	ldrb	r3, [r3, #0]
 80032fc:	4619      	mov	r1, r3
 80032fe:	6878      	ldr	r0, [r7, #4]
 8003300:	f006 f8d2 	bl	80094a8 <HAL_PCD_DataOutStageCallback>
 8003304:	e005      	b.n	8003312 <PCD_EP_ISR_Handler+0x52e>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800330c:	4618      	mov	r0, r3
 800330e:	f002 fda5 	bl	8005e5c <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8003312:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8003316:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800331a:	2b00      	cmp	r3, #0
 800331c:	f000 8123 	beq.w	8003566 <PCD_EP_ISR_Handler+0x782>
      {
        ep = &hpcd->IN_ep[epindex];
 8003320:	f897 204d 	ldrb.w	r2, [r7, #77]	@ 0x4d
 8003324:	4613      	mov	r3, r2
 8003326:	009b      	lsls	r3, r3, #2
 8003328:	4413      	add	r3, r2
 800332a:	00db      	lsls	r3, r3, #3
 800332c:	3310      	adds	r3, #16
 800332e:	687a      	ldr	r2, [r7, #4]
 8003330:	4413      	add	r3, r2
 8003332:	657b      	str	r3, [r7, #84]	@ 0x54

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	461a      	mov	r2, r3
 800333a:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 800333e:	009b      	lsls	r3, r3, #2
 8003340:	4413      	add	r3, r2
 8003342:	881b      	ldrh	r3, [r3, #0]
 8003344:	b29b      	uxth	r3, r3
 8003346:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 800334a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800334e:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	461a      	mov	r2, r3
 8003358:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 800335c:	009b      	lsls	r3, r3, #2
 800335e:	441a      	add	r2, r3
 8003360:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8003364:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003368:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800336c:	b29b      	uxth	r3, r3
 800336e:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 8003370:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003372:	78db      	ldrb	r3, [r3, #3]
 8003374:	2b01      	cmp	r3, #1
 8003376:	f040 80a2 	bne.w	80034be <PCD_EP_ISR_Handler+0x6da>
        {
          ep->xfer_len = 0U;
 800337a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800337c:	2200      	movs	r2, #0
 800337e:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 8003380:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003382:	7b1b      	ldrb	r3, [r3, #12]
 8003384:	2b00      	cmp	r3, #0
 8003386:	f000 8093 	beq.w	80034b0 <PCD_EP_ISR_Handler+0x6cc>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800338a:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 800338e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003392:	2b00      	cmp	r3, #0
 8003394:	d046      	beq.n	8003424 <PCD_EP_ISR_Handler+0x640>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003396:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003398:	785b      	ldrb	r3, [r3, #1]
 800339a:	2b00      	cmp	r3, #0
 800339c:	d126      	bne.n	80033ec <PCD_EP_ISR_Handler+0x608>
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	627b      	str	r3, [r7, #36]	@ 0x24
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80033ac:	b29b      	uxth	r3, r3
 80033ae:	461a      	mov	r2, r3
 80033b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033b2:	4413      	add	r3, r2
 80033b4:	627b      	str	r3, [r7, #36]	@ 0x24
 80033b6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80033b8:	781b      	ldrb	r3, [r3, #0]
 80033ba:	011a      	lsls	r2, r3, #4
 80033bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033be:	4413      	add	r3, r2
 80033c0:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80033c4:	623b      	str	r3, [r7, #32]
 80033c6:	6a3b      	ldr	r3, [r7, #32]
 80033c8:	881b      	ldrh	r3, [r3, #0]
 80033ca:	b29b      	uxth	r3, r3
 80033cc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80033d0:	b29a      	uxth	r2, r3
 80033d2:	6a3b      	ldr	r3, [r7, #32]
 80033d4:	801a      	strh	r2, [r3, #0]
 80033d6:	6a3b      	ldr	r3, [r7, #32]
 80033d8:	881b      	ldrh	r3, [r3, #0]
 80033da:	b29b      	uxth	r3, r3
 80033dc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80033e0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80033e4:	b29a      	uxth	r2, r3
 80033e6:	6a3b      	ldr	r3, [r7, #32]
 80033e8:	801a      	strh	r2, [r3, #0]
 80033ea:	e061      	b.n	80034b0 <PCD_EP_ISR_Handler+0x6cc>
 80033ec:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80033ee:	785b      	ldrb	r3, [r3, #1]
 80033f0:	2b01      	cmp	r3, #1
 80033f2:	d15d      	bne.n	80034b0 <PCD_EP_ISR_Handler+0x6cc>
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003402:	b29b      	uxth	r3, r3
 8003404:	461a      	mov	r2, r3
 8003406:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003408:	4413      	add	r3, r2
 800340a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800340c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800340e:	781b      	ldrb	r3, [r3, #0]
 8003410:	011a      	lsls	r2, r3, #4
 8003412:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003414:	4413      	add	r3, r2
 8003416:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800341a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800341c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800341e:	2200      	movs	r2, #0
 8003420:	801a      	strh	r2, [r3, #0]
 8003422:	e045      	b.n	80034b0 <PCD_EP_ISR_Handler+0x6cc>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800342a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800342c:	785b      	ldrb	r3, [r3, #1]
 800342e:	2b00      	cmp	r3, #0
 8003430:	d126      	bne.n	8003480 <PCD_EP_ISR_Handler+0x69c>
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	637b      	str	r3, [r7, #52]	@ 0x34
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003440:	b29b      	uxth	r3, r3
 8003442:	461a      	mov	r2, r3
 8003444:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003446:	4413      	add	r3, r2
 8003448:	637b      	str	r3, [r7, #52]	@ 0x34
 800344a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800344c:	781b      	ldrb	r3, [r3, #0]
 800344e:	011a      	lsls	r2, r3, #4
 8003450:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003452:	4413      	add	r3, r2
 8003454:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8003458:	633b      	str	r3, [r7, #48]	@ 0x30
 800345a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800345c:	881b      	ldrh	r3, [r3, #0]
 800345e:	b29b      	uxth	r3, r3
 8003460:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003464:	b29a      	uxth	r2, r3
 8003466:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003468:	801a      	strh	r2, [r3, #0]
 800346a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800346c:	881b      	ldrh	r3, [r3, #0]
 800346e:	b29b      	uxth	r3, r3
 8003470:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003474:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003478:	b29a      	uxth	r2, r3
 800347a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800347c:	801a      	strh	r2, [r3, #0]
 800347e:	e017      	b.n	80034b0 <PCD_EP_ISR_Handler+0x6cc>
 8003480:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003482:	785b      	ldrb	r3, [r3, #1]
 8003484:	2b01      	cmp	r3, #1
 8003486:	d113      	bne.n	80034b0 <PCD_EP_ISR_Handler+0x6cc>
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003490:	b29b      	uxth	r3, r3
 8003492:	461a      	mov	r2, r3
 8003494:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003496:	4413      	add	r3, r2
 8003498:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800349a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800349c:	781b      	ldrb	r3, [r3, #0]
 800349e:	011a      	lsls	r2, r3, #4
 80034a0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80034a2:	4413      	add	r3, r2
 80034a4:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80034a8:	63bb      	str	r3, [r7, #56]	@ 0x38
 80034aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80034ac:	2200      	movs	r2, #0
 80034ae:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80034b0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80034b2:	781b      	ldrb	r3, [r3, #0]
 80034b4:	4619      	mov	r1, r3
 80034b6:	6878      	ldr	r0, [r7, #4]
 80034b8:	f006 f811 	bl	80094de <HAL_PCD_DataInStageCallback>
 80034bc:	e053      	b.n	8003566 <PCD_EP_ISR_Handler+0x782>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 80034be:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 80034c2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d146      	bne.n	8003558 <PCD_EP_ISR_Handler+0x774>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80034d2:	b29b      	uxth	r3, r3
 80034d4:	461a      	mov	r2, r3
 80034d6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80034d8:	781b      	ldrb	r3, [r3, #0]
 80034da:	00db      	lsls	r3, r3, #3
 80034dc:	4413      	add	r3, r2
 80034de:	3302      	adds	r3, #2
 80034e0:	005b      	lsls	r3, r3, #1
 80034e2:	687a      	ldr	r2, [r7, #4]
 80034e4:	6812      	ldr	r2, [r2, #0]
 80034e6:	4413      	add	r3, r2
 80034e8:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80034ec:	881b      	ldrh	r3, [r3, #0]
 80034ee:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80034f2:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40

            if (ep->xfer_len > TxPctSize)
 80034f6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80034f8:	699a      	ldr	r2, [r3, #24]
 80034fa:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 80034fe:	429a      	cmp	r2, r3
 8003500:	d907      	bls.n	8003512 <PCD_EP_ISR_Handler+0x72e>
            {
              ep->xfer_len -= TxPctSize;
 8003502:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003504:	699a      	ldr	r2, [r3, #24]
 8003506:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 800350a:	1ad2      	subs	r2, r2, r3
 800350c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800350e:	619a      	str	r2, [r3, #24]
 8003510:	e002      	b.n	8003518 <PCD_EP_ISR_Handler+0x734>
            }
            else
            {
              ep->xfer_len = 0U;
 8003512:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003514:	2200      	movs	r2, #0
 8003516:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 8003518:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800351a:	699b      	ldr	r3, [r3, #24]
 800351c:	2b00      	cmp	r3, #0
 800351e:	d106      	bne.n	800352e <PCD_EP_ISR_Handler+0x74a>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003520:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003522:	781b      	ldrb	r3, [r3, #0]
 8003524:	4619      	mov	r1, r3
 8003526:	6878      	ldr	r0, [r7, #4]
 8003528:	f005 ffd9 	bl	80094de <HAL_PCD_DataInStageCallback>
 800352c:	e01b      	b.n	8003566 <PCD_EP_ISR_Handler+0x782>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 800352e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003530:	695a      	ldr	r2, [r3, #20]
 8003532:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8003536:	441a      	add	r2, r3
 8003538:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800353a:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 800353c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800353e:	69da      	ldr	r2, [r3, #28]
 8003540:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8003544:	441a      	add	r2, r3
 8003546:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003548:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8003550:	4618      	mov	r0, r3
 8003552:	f002 fc83 	bl	8005e5c <USB_EPStartXfer>
 8003556:	e006      	b.n	8003566 <PCD_EP_ISR_Handler+0x782>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8003558:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 800355c:	461a      	mov	r2, r3
 800355e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8003560:	6878      	ldr	r0, [r7, #4]
 8003562:	f000 f91b 	bl	800379c <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800356e:	b29b      	uxth	r3, r3
 8003570:	b21b      	sxth	r3, r3
 8003572:	2b00      	cmp	r3, #0
 8003574:	f6ff ac3b 	blt.w	8002dee <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8003578:	2300      	movs	r3, #0
}
 800357a:	4618      	mov	r0, r3
 800357c:	3758      	adds	r7, #88	@ 0x58
 800357e:	46bd      	mov	sp, r7
 8003580:	bd80      	pop	{r7, pc}

08003582 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8003582:	b580      	push	{r7, lr}
 8003584:	b088      	sub	sp, #32
 8003586:	af00      	add	r7, sp, #0
 8003588:	60f8      	str	r0, [r7, #12]
 800358a:	60b9      	str	r1, [r7, #8]
 800358c:	4613      	mov	r3, r2
 800358e:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8003590:	88fb      	ldrh	r3, [r7, #6]
 8003592:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003596:	2b00      	cmp	r3, #0
 8003598:	d07e      	beq.n	8003698 <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80035a2:	b29b      	uxth	r3, r3
 80035a4:	461a      	mov	r2, r3
 80035a6:	68bb      	ldr	r3, [r7, #8]
 80035a8:	781b      	ldrb	r3, [r3, #0]
 80035aa:	00db      	lsls	r3, r3, #3
 80035ac:	4413      	add	r3, r2
 80035ae:	3302      	adds	r3, #2
 80035b0:	005b      	lsls	r3, r3, #1
 80035b2:	68fa      	ldr	r2, [r7, #12]
 80035b4:	6812      	ldr	r2, [r2, #0]
 80035b6:	4413      	add	r3, r2
 80035b8:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80035bc:	881b      	ldrh	r3, [r3, #0]
 80035be:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80035c2:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 80035c4:	68bb      	ldr	r3, [r7, #8]
 80035c6:	699a      	ldr	r2, [r3, #24]
 80035c8:	8b7b      	ldrh	r3, [r7, #26]
 80035ca:	429a      	cmp	r2, r3
 80035cc:	d306      	bcc.n	80035dc <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 80035ce:	68bb      	ldr	r3, [r7, #8]
 80035d0:	699a      	ldr	r2, [r3, #24]
 80035d2:	8b7b      	ldrh	r3, [r7, #26]
 80035d4:	1ad2      	subs	r2, r2, r3
 80035d6:	68bb      	ldr	r3, [r7, #8]
 80035d8:	619a      	str	r2, [r3, #24]
 80035da:	e002      	b.n	80035e2 <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 80035dc:	68bb      	ldr	r3, [r7, #8]
 80035de:	2200      	movs	r2, #0
 80035e0:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 80035e2:	68bb      	ldr	r3, [r7, #8]
 80035e4:	699b      	ldr	r3, [r3, #24]
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d123      	bne.n	8003632 <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	461a      	mov	r2, r3
 80035f0:	68bb      	ldr	r3, [r7, #8]
 80035f2:	781b      	ldrb	r3, [r3, #0]
 80035f4:	009b      	lsls	r3, r3, #2
 80035f6:	4413      	add	r3, r2
 80035f8:	881b      	ldrh	r3, [r3, #0]
 80035fa:	b29b      	uxth	r3, r3
 80035fc:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003600:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003604:	833b      	strh	r3, [r7, #24]
 8003606:	8b3b      	ldrh	r3, [r7, #24]
 8003608:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800360c:	833b      	strh	r3, [r7, #24]
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	461a      	mov	r2, r3
 8003614:	68bb      	ldr	r3, [r7, #8]
 8003616:	781b      	ldrb	r3, [r3, #0]
 8003618:	009b      	lsls	r3, r3, #2
 800361a:	441a      	add	r2, r3
 800361c:	8b3b      	ldrh	r3, [r7, #24]
 800361e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003622:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003626:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800362a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800362e:	b29b      	uxth	r3, r3
 8003630:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8003632:	88fb      	ldrh	r3, [r7, #6]
 8003634:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003638:	2b00      	cmp	r3, #0
 800363a:	d01f      	beq.n	800367c <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	461a      	mov	r2, r3
 8003642:	68bb      	ldr	r3, [r7, #8]
 8003644:	781b      	ldrb	r3, [r3, #0]
 8003646:	009b      	lsls	r3, r3, #2
 8003648:	4413      	add	r3, r2
 800364a:	881b      	ldrh	r3, [r3, #0]
 800364c:	b29b      	uxth	r3, r3
 800364e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003652:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003656:	82fb      	strh	r3, [r7, #22]
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	461a      	mov	r2, r3
 800365e:	68bb      	ldr	r3, [r7, #8]
 8003660:	781b      	ldrb	r3, [r3, #0]
 8003662:	009b      	lsls	r3, r3, #2
 8003664:	441a      	add	r2, r3
 8003666:	8afb      	ldrh	r3, [r7, #22]
 8003668:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800366c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003670:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003674:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8003678:	b29b      	uxth	r3, r3
 800367a:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 800367c:	8b7b      	ldrh	r3, [r7, #26]
 800367e:	2b00      	cmp	r3, #0
 8003680:	f000 8087 	beq.w	8003792 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	6818      	ldr	r0, [r3, #0]
 8003688:	68bb      	ldr	r3, [r7, #8]
 800368a:	6959      	ldr	r1, [r3, #20]
 800368c:	68bb      	ldr	r3, [r7, #8]
 800368e:	891a      	ldrh	r2, [r3, #8]
 8003690:	8b7b      	ldrh	r3, [r7, #26]
 8003692:	f004 f917 	bl	80078c4 <USB_ReadPMA>
 8003696:	e07c      	b.n	8003792 <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80036a0:	b29b      	uxth	r3, r3
 80036a2:	461a      	mov	r2, r3
 80036a4:	68bb      	ldr	r3, [r7, #8]
 80036a6:	781b      	ldrb	r3, [r3, #0]
 80036a8:	00db      	lsls	r3, r3, #3
 80036aa:	4413      	add	r3, r2
 80036ac:	3306      	adds	r3, #6
 80036ae:	005b      	lsls	r3, r3, #1
 80036b0:	68fa      	ldr	r2, [r7, #12]
 80036b2:	6812      	ldr	r2, [r2, #0]
 80036b4:	4413      	add	r3, r2
 80036b6:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80036ba:	881b      	ldrh	r3, [r3, #0]
 80036bc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80036c0:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 80036c2:	68bb      	ldr	r3, [r7, #8]
 80036c4:	699a      	ldr	r2, [r3, #24]
 80036c6:	8b7b      	ldrh	r3, [r7, #26]
 80036c8:	429a      	cmp	r2, r3
 80036ca:	d306      	bcc.n	80036da <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 80036cc:	68bb      	ldr	r3, [r7, #8]
 80036ce:	699a      	ldr	r2, [r3, #24]
 80036d0:	8b7b      	ldrh	r3, [r7, #26]
 80036d2:	1ad2      	subs	r2, r2, r3
 80036d4:	68bb      	ldr	r3, [r7, #8]
 80036d6:	619a      	str	r2, [r3, #24]
 80036d8:	e002      	b.n	80036e0 <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 80036da:	68bb      	ldr	r3, [r7, #8]
 80036dc:	2200      	movs	r2, #0
 80036de:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 80036e0:	68bb      	ldr	r3, [r7, #8]
 80036e2:	699b      	ldr	r3, [r3, #24]
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d123      	bne.n	8003730 <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	461a      	mov	r2, r3
 80036ee:	68bb      	ldr	r3, [r7, #8]
 80036f0:	781b      	ldrb	r3, [r3, #0]
 80036f2:	009b      	lsls	r3, r3, #2
 80036f4:	4413      	add	r3, r2
 80036f6:	881b      	ldrh	r3, [r3, #0]
 80036f8:	b29b      	uxth	r3, r3
 80036fa:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80036fe:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003702:	83fb      	strh	r3, [r7, #30]
 8003704:	8bfb      	ldrh	r3, [r7, #30]
 8003706:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800370a:	83fb      	strh	r3, [r7, #30]
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	461a      	mov	r2, r3
 8003712:	68bb      	ldr	r3, [r7, #8]
 8003714:	781b      	ldrb	r3, [r3, #0]
 8003716:	009b      	lsls	r3, r3, #2
 8003718:	441a      	add	r2, r3
 800371a:	8bfb      	ldrh	r3, [r7, #30]
 800371c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003720:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003724:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003728:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800372c:	b29b      	uxth	r3, r3
 800372e:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8003730:	88fb      	ldrh	r3, [r7, #6]
 8003732:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003736:	2b00      	cmp	r3, #0
 8003738:	d11f      	bne.n	800377a <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	461a      	mov	r2, r3
 8003740:	68bb      	ldr	r3, [r7, #8]
 8003742:	781b      	ldrb	r3, [r3, #0]
 8003744:	009b      	lsls	r3, r3, #2
 8003746:	4413      	add	r3, r2
 8003748:	881b      	ldrh	r3, [r3, #0]
 800374a:	b29b      	uxth	r3, r3
 800374c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003750:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003754:	83bb      	strh	r3, [r7, #28]
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	461a      	mov	r2, r3
 800375c:	68bb      	ldr	r3, [r7, #8]
 800375e:	781b      	ldrb	r3, [r3, #0]
 8003760:	009b      	lsls	r3, r3, #2
 8003762:	441a      	add	r2, r3
 8003764:	8bbb      	ldrh	r3, [r7, #28]
 8003766:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800376a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800376e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003772:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8003776:	b29b      	uxth	r3, r3
 8003778:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 800377a:	8b7b      	ldrh	r3, [r7, #26]
 800377c:	2b00      	cmp	r3, #0
 800377e:	d008      	beq.n	8003792 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	6818      	ldr	r0, [r3, #0]
 8003784:	68bb      	ldr	r3, [r7, #8]
 8003786:	6959      	ldr	r1, [r3, #20]
 8003788:	68bb      	ldr	r3, [r7, #8]
 800378a:	895a      	ldrh	r2, [r3, #10]
 800378c:	8b7b      	ldrh	r3, [r7, #26]
 800378e:	f004 f899 	bl	80078c4 <USB_ReadPMA>
    }
  }

  return count;
 8003792:	8b7b      	ldrh	r3, [r7, #26]
}
 8003794:	4618      	mov	r0, r3
 8003796:	3720      	adds	r7, #32
 8003798:	46bd      	mov	sp, r7
 800379a:	bd80      	pop	{r7, pc}

0800379c <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 800379c:	b580      	push	{r7, lr}
 800379e:	b0a4      	sub	sp, #144	@ 0x90
 80037a0:	af00      	add	r7, sp, #0
 80037a2:	60f8      	str	r0, [r7, #12]
 80037a4:	60b9      	str	r1, [r7, #8]
 80037a6:	4613      	mov	r3, r2
 80037a8:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80037aa:	88fb      	ldrh	r3, [r7, #6]
 80037ac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	f000 81dd 	beq.w	8003b70 <HAL_PCD_EP_DB_Transmit+0x3d4>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80037be:	b29b      	uxth	r3, r3
 80037c0:	461a      	mov	r2, r3
 80037c2:	68bb      	ldr	r3, [r7, #8]
 80037c4:	781b      	ldrb	r3, [r3, #0]
 80037c6:	00db      	lsls	r3, r3, #3
 80037c8:	4413      	add	r3, r2
 80037ca:	3302      	adds	r3, #2
 80037cc:	005b      	lsls	r3, r3, #1
 80037ce:	68fa      	ldr	r2, [r7, #12]
 80037d0:	6812      	ldr	r2, [r2, #0]
 80037d2:	4413      	add	r3, r2
 80037d4:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80037d8:	881b      	ldrh	r3, [r3, #0]
 80037da:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80037de:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86

    if (ep->xfer_len > TxPctSize)
 80037e2:	68bb      	ldr	r3, [r7, #8]
 80037e4:	699a      	ldr	r2, [r3, #24]
 80037e6:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 80037ea:	429a      	cmp	r2, r3
 80037ec:	d907      	bls.n	80037fe <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxPctSize;
 80037ee:	68bb      	ldr	r3, [r7, #8]
 80037f0:	699a      	ldr	r2, [r3, #24]
 80037f2:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 80037f6:	1ad2      	subs	r2, r2, r3
 80037f8:	68bb      	ldr	r3, [r7, #8]
 80037fa:	619a      	str	r2, [r3, #24]
 80037fc:	e002      	b.n	8003804 <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 80037fe:	68bb      	ldr	r3, [r7, #8]
 8003800:	2200      	movs	r2, #0
 8003802:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8003804:	68bb      	ldr	r3, [r7, #8]
 8003806:	699b      	ldr	r3, [r3, #24]
 8003808:	2b00      	cmp	r3, #0
 800380a:	f040 80b9 	bne.w	8003980 <HAL_PCD_EP_DB_Transmit+0x1e4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800380e:	68bb      	ldr	r3, [r7, #8]
 8003810:	785b      	ldrb	r3, [r3, #1]
 8003812:	2b00      	cmp	r3, #0
 8003814:	d126      	bne.n	8003864 <HAL_PCD_EP_DB_Transmit+0xc8>
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003824:	b29b      	uxth	r3, r3
 8003826:	461a      	mov	r2, r3
 8003828:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800382a:	4413      	add	r3, r2
 800382c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800382e:	68bb      	ldr	r3, [r7, #8]
 8003830:	781b      	ldrb	r3, [r3, #0]
 8003832:	011a      	lsls	r2, r3, #4
 8003834:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003836:	4413      	add	r3, r2
 8003838:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800383c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800383e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003840:	881b      	ldrh	r3, [r3, #0]
 8003842:	b29b      	uxth	r3, r3
 8003844:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003848:	b29a      	uxth	r2, r3
 800384a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800384c:	801a      	strh	r2, [r3, #0]
 800384e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003850:	881b      	ldrh	r3, [r3, #0]
 8003852:	b29b      	uxth	r3, r3
 8003854:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003858:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800385c:	b29a      	uxth	r2, r3
 800385e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003860:	801a      	strh	r2, [r3, #0]
 8003862:	e01a      	b.n	800389a <HAL_PCD_EP_DB_Transmit+0xfe>
 8003864:	68bb      	ldr	r3, [r7, #8]
 8003866:	785b      	ldrb	r3, [r3, #1]
 8003868:	2b01      	cmp	r3, #1
 800386a:	d116      	bne.n	800389a <HAL_PCD_EP_DB_Transmit+0xfe>
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	637b      	str	r3, [r7, #52]	@ 0x34
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800387a:	b29b      	uxth	r3, r3
 800387c:	461a      	mov	r2, r3
 800387e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003880:	4413      	add	r3, r2
 8003882:	637b      	str	r3, [r7, #52]	@ 0x34
 8003884:	68bb      	ldr	r3, [r7, #8]
 8003886:	781b      	ldrb	r3, [r3, #0]
 8003888:	011a      	lsls	r2, r3, #4
 800388a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800388c:	4413      	add	r3, r2
 800388e:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8003892:	633b      	str	r3, [r7, #48]	@ 0x30
 8003894:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003896:	2200      	movs	r2, #0
 8003898:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	627b      	str	r3, [r7, #36]	@ 0x24
 80038a0:	68bb      	ldr	r3, [r7, #8]
 80038a2:	785b      	ldrb	r3, [r3, #1]
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d126      	bne.n	80038f6 <HAL_PCD_EP_DB_Transmit+0x15a>
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	61fb      	str	r3, [r7, #28]
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80038b6:	b29b      	uxth	r3, r3
 80038b8:	461a      	mov	r2, r3
 80038ba:	69fb      	ldr	r3, [r7, #28]
 80038bc:	4413      	add	r3, r2
 80038be:	61fb      	str	r3, [r7, #28]
 80038c0:	68bb      	ldr	r3, [r7, #8]
 80038c2:	781b      	ldrb	r3, [r3, #0]
 80038c4:	011a      	lsls	r2, r3, #4
 80038c6:	69fb      	ldr	r3, [r7, #28]
 80038c8:	4413      	add	r3, r2
 80038ca:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80038ce:	61bb      	str	r3, [r7, #24]
 80038d0:	69bb      	ldr	r3, [r7, #24]
 80038d2:	881b      	ldrh	r3, [r3, #0]
 80038d4:	b29b      	uxth	r3, r3
 80038d6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80038da:	b29a      	uxth	r2, r3
 80038dc:	69bb      	ldr	r3, [r7, #24]
 80038de:	801a      	strh	r2, [r3, #0]
 80038e0:	69bb      	ldr	r3, [r7, #24]
 80038e2:	881b      	ldrh	r3, [r3, #0]
 80038e4:	b29b      	uxth	r3, r3
 80038e6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80038ea:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80038ee:	b29a      	uxth	r2, r3
 80038f0:	69bb      	ldr	r3, [r7, #24]
 80038f2:	801a      	strh	r2, [r3, #0]
 80038f4:	e017      	b.n	8003926 <HAL_PCD_EP_DB_Transmit+0x18a>
 80038f6:	68bb      	ldr	r3, [r7, #8]
 80038f8:	785b      	ldrb	r3, [r3, #1]
 80038fa:	2b01      	cmp	r3, #1
 80038fc:	d113      	bne.n	8003926 <HAL_PCD_EP_DB_Transmit+0x18a>
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003906:	b29b      	uxth	r3, r3
 8003908:	461a      	mov	r2, r3
 800390a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800390c:	4413      	add	r3, r2
 800390e:	627b      	str	r3, [r7, #36]	@ 0x24
 8003910:	68bb      	ldr	r3, [r7, #8]
 8003912:	781b      	ldrb	r3, [r3, #0]
 8003914:	011a      	lsls	r2, r3, #4
 8003916:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003918:	4413      	add	r3, r2
 800391a:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800391e:	623b      	str	r3, [r7, #32]
 8003920:	6a3b      	ldr	r3, [r7, #32]
 8003922:	2200      	movs	r2, #0
 8003924:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003926:	68bb      	ldr	r3, [r7, #8]
 8003928:	781b      	ldrb	r3, [r3, #0]
 800392a:	4619      	mov	r1, r3
 800392c:	68f8      	ldr	r0, [r7, #12]
 800392e:	f005 fdd6 	bl	80094de <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8003932:	88fb      	ldrh	r3, [r7, #6]
 8003934:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003938:	2b00      	cmp	r3, #0
 800393a:	f000 82fc 	beq.w	8003f36 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	461a      	mov	r2, r3
 8003944:	68bb      	ldr	r3, [r7, #8]
 8003946:	781b      	ldrb	r3, [r3, #0]
 8003948:	009b      	lsls	r3, r3, #2
 800394a:	4413      	add	r3, r2
 800394c:	881b      	ldrh	r3, [r3, #0]
 800394e:	b29b      	uxth	r3, r3
 8003950:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003954:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003958:	82fb      	strh	r3, [r7, #22]
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	461a      	mov	r2, r3
 8003960:	68bb      	ldr	r3, [r7, #8]
 8003962:	781b      	ldrb	r3, [r3, #0]
 8003964:	009b      	lsls	r3, r3, #2
 8003966:	441a      	add	r2, r3
 8003968:	8afb      	ldrh	r3, [r7, #22]
 800396a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800396e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003972:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003976:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800397a:	b29b      	uxth	r3, r3
 800397c:	8013      	strh	r3, [r2, #0]
 800397e:	e2da      	b.n	8003f36 <HAL_PCD_EP_DB_Transmit+0x79a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8003980:	88fb      	ldrh	r3, [r7, #6]
 8003982:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003986:	2b00      	cmp	r3, #0
 8003988:	d021      	beq.n	80039ce <HAL_PCD_EP_DB_Transmit+0x232>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	461a      	mov	r2, r3
 8003990:	68bb      	ldr	r3, [r7, #8]
 8003992:	781b      	ldrb	r3, [r3, #0]
 8003994:	009b      	lsls	r3, r3, #2
 8003996:	4413      	add	r3, r2
 8003998:	881b      	ldrh	r3, [r3, #0]
 800399a:	b29b      	uxth	r3, r3
 800399c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80039a0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80039a4:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	461a      	mov	r2, r3
 80039ae:	68bb      	ldr	r3, [r7, #8]
 80039b0:	781b      	ldrb	r3, [r3, #0]
 80039b2:	009b      	lsls	r3, r3, #2
 80039b4:	441a      	add	r2, r3
 80039b6:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 80039ba:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80039be:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80039c2:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80039c6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80039ca:	b29b      	uxth	r3, r3
 80039cc:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 80039ce:	68bb      	ldr	r3, [r7, #8]
 80039d0:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80039d4:	2b01      	cmp	r3, #1
 80039d6:	f040 82ae 	bne.w	8003f36 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        ep->xfer_buff += TxPctSize;
 80039da:	68bb      	ldr	r3, [r7, #8]
 80039dc:	695a      	ldr	r2, [r3, #20]
 80039de:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 80039e2:	441a      	add	r2, r3
 80039e4:	68bb      	ldr	r3, [r7, #8]
 80039e6:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 80039e8:	68bb      	ldr	r3, [r7, #8]
 80039ea:	69da      	ldr	r2, [r3, #28]
 80039ec:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 80039f0:	441a      	add	r2, r3
 80039f2:	68bb      	ldr	r3, [r7, #8]
 80039f4:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 80039f6:	68bb      	ldr	r3, [r7, #8]
 80039f8:	6a1a      	ldr	r2, [r3, #32]
 80039fa:	68bb      	ldr	r3, [r7, #8]
 80039fc:	691b      	ldr	r3, [r3, #16]
 80039fe:	429a      	cmp	r2, r3
 8003a00:	d30b      	bcc.n	8003a1a <HAL_PCD_EP_DB_Transmit+0x27e>
        {
          len = ep->maxpacket;
 8003a02:	68bb      	ldr	r3, [r7, #8]
 8003a04:	691b      	ldr	r3, [r3, #16]
 8003a06:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db -= len;
 8003a0a:	68bb      	ldr	r3, [r7, #8]
 8003a0c:	6a1a      	ldr	r2, [r3, #32]
 8003a0e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003a12:	1ad2      	subs	r2, r2, r3
 8003a14:	68bb      	ldr	r3, [r7, #8]
 8003a16:	621a      	str	r2, [r3, #32]
 8003a18:	e017      	b.n	8003a4a <HAL_PCD_EP_DB_Transmit+0x2ae>
        }
        else if (ep->xfer_len_db == 0U)
 8003a1a:	68bb      	ldr	r3, [r7, #8]
 8003a1c:	6a1b      	ldr	r3, [r3, #32]
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d108      	bne.n	8003a34 <HAL_PCD_EP_DB_Transmit+0x298>
        {
          len = TxPctSize;
 8003a22:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8003a26:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_fill_db = 0U;
 8003a2a:	68bb      	ldr	r3, [r7, #8]
 8003a2c:	2200      	movs	r2, #0
 8003a2e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 8003a32:	e00a      	b.n	8003a4a <HAL_PCD_EP_DB_Transmit+0x2ae>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8003a34:	68bb      	ldr	r3, [r7, #8]
 8003a36:	2200      	movs	r2, #0
 8003a38:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
          len = ep->xfer_len_db;
 8003a3c:	68bb      	ldr	r3, [r7, #8]
 8003a3e:	6a1b      	ldr	r3, [r3, #32]
 8003a40:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db = 0U;
 8003a44:	68bb      	ldr	r3, [r7, #8]
 8003a46:	2200      	movs	r2, #0
 8003a48:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8003a4a:	68bb      	ldr	r3, [r7, #8]
 8003a4c:	785b      	ldrb	r3, [r3, #1]
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d165      	bne.n	8003b1e <HAL_PCD_EP_DB_Transmit+0x382>
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003a60:	b29b      	uxth	r3, r3
 8003a62:	461a      	mov	r2, r3
 8003a64:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003a66:	4413      	add	r3, r2
 8003a68:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003a6a:	68bb      	ldr	r3, [r7, #8]
 8003a6c:	781b      	ldrb	r3, [r3, #0]
 8003a6e:	011a      	lsls	r2, r3, #4
 8003a70:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003a72:	4413      	add	r3, r2
 8003a74:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8003a78:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003a7a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003a7c:	881b      	ldrh	r3, [r3, #0]
 8003a7e:	b29b      	uxth	r3, r3
 8003a80:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003a84:	b29a      	uxth	r2, r3
 8003a86:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003a88:	801a      	strh	r2, [r3, #0]
 8003a8a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003a8e:	2b3e      	cmp	r3, #62	@ 0x3e
 8003a90:	d91d      	bls.n	8003ace <HAL_PCD_EP_DB_Transmit+0x332>
 8003a92:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003a96:	095b      	lsrs	r3, r3, #5
 8003a98:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003a9a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003a9e:	f003 031f 	and.w	r3, r3, #31
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d102      	bne.n	8003aac <HAL_PCD_EP_DB_Transmit+0x310>
 8003aa6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003aa8:	3b01      	subs	r3, #1
 8003aaa:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003aac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003aae:	881b      	ldrh	r3, [r3, #0]
 8003ab0:	b29a      	uxth	r2, r3
 8003ab2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003ab4:	b29b      	uxth	r3, r3
 8003ab6:	029b      	lsls	r3, r3, #10
 8003ab8:	b29b      	uxth	r3, r3
 8003aba:	4313      	orrs	r3, r2
 8003abc:	b29b      	uxth	r3, r3
 8003abe:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003ac2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003ac6:	b29a      	uxth	r2, r3
 8003ac8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003aca:	801a      	strh	r2, [r3, #0]
 8003acc:	e044      	b.n	8003b58 <HAL_PCD_EP_DB_Transmit+0x3bc>
 8003ace:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d10a      	bne.n	8003aec <HAL_PCD_EP_DB_Transmit+0x350>
 8003ad6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003ad8:	881b      	ldrh	r3, [r3, #0]
 8003ada:	b29b      	uxth	r3, r3
 8003adc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003ae0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003ae4:	b29a      	uxth	r2, r3
 8003ae6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003ae8:	801a      	strh	r2, [r3, #0]
 8003aea:	e035      	b.n	8003b58 <HAL_PCD_EP_DB_Transmit+0x3bc>
 8003aec:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003af0:	085b      	lsrs	r3, r3, #1
 8003af2:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003af4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003af8:	f003 0301 	and.w	r3, r3, #1
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	d002      	beq.n	8003b06 <HAL_PCD_EP_DB_Transmit+0x36a>
 8003b00:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003b02:	3301      	adds	r3, #1
 8003b04:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003b06:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003b08:	881b      	ldrh	r3, [r3, #0]
 8003b0a:	b29a      	uxth	r2, r3
 8003b0c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003b0e:	b29b      	uxth	r3, r3
 8003b10:	029b      	lsls	r3, r3, #10
 8003b12:	b29b      	uxth	r3, r3
 8003b14:	4313      	orrs	r3, r2
 8003b16:	b29a      	uxth	r2, r3
 8003b18:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003b1a:	801a      	strh	r2, [r3, #0]
 8003b1c:	e01c      	b.n	8003b58 <HAL_PCD_EP_DB_Transmit+0x3bc>
 8003b1e:	68bb      	ldr	r3, [r7, #8]
 8003b20:	785b      	ldrb	r3, [r3, #1]
 8003b22:	2b01      	cmp	r3, #1
 8003b24:	d118      	bne.n	8003b58 <HAL_PCD_EP_DB_Transmit+0x3bc>
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	647b      	str	r3, [r7, #68]	@ 0x44
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003b34:	b29b      	uxth	r3, r3
 8003b36:	461a      	mov	r2, r3
 8003b38:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003b3a:	4413      	add	r3, r2
 8003b3c:	647b      	str	r3, [r7, #68]	@ 0x44
 8003b3e:	68bb      	ldr	r3, [r7, #8]
 8003b40:	781b      	ldrb	r3, [r3, #0]
 8003b42:	011a      	lsls	r2, r3, #4
 8003b44:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003b46:	4413      	add	r3, r2
 8003b48:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8003b4c:	643b      	str	r3, [r7, #64]	@ 0x40
 8003b4e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003b52:	b29a      	uxth	r2, r3
 8003b54:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003b56:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	6818      	ldr	r0, [r3, #0]
 8003b5c:	68bb      	ldr	r3, [r7, #8]
 8003b5e:	6959      	ldr	r1, [r3, #20]
 8003b60:	68bb      	ldr	r3, [r7, #8]
 8003b62:	891a      	ldrh	r2, [r3, #8]
 8003b64:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003b68:	b29b      	uxth	r3, r3
 8003b6a:	f003 fe66 	bl	800783a <USB_WritePMA>
 8003b6e:	e1e2      	b.n	8003f36 <HAL_PCD_EP_DB_Transmit+0x79a>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003b78:	b29b      	uxth	r3, r3
 8003b7a:	461a      	mov	r2, r3
 8003b7c:	68bb      	ldr	r3, [r7, #8]
 8003b7e:	781b      	ldrb	r3, [r3, #0]
 8003b80:	00db      	lsls	r3, r3, #3
 8003b82:	4413      	add	r3, r2
 8003b84:	3306      	adds	r3, #6
 8003b86:	005b      	lsls	r3, r3, #1
 8003b88:	68fa      	ldr	r2, [r7, #12]
 8003b8a:	6812      	ldr	r2, [r2, #0]
 8003b8c:	4413      	add	r3, r2
 8003b8e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8003b92:	881b      	ldrh	r3, [r3, #0]
 8003b94:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003b98:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86

    if (ep->xfer_len >= TxPctSize)
 8003b9c:	68bb      	ldr	r3, [r7, #8]
 8003b9e:	699a      	ldr	r2, [r3, #24]
 8003ba0:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8003ba4:	429a      	cmp	r2, r3
 8003ba6:	d307      	bcc.n	8003bb8 <HAL_PCD_EP_DB_Transmit+0x41c>
    {
      ep->xfer_len -= TxPctSize;
 8003ba8:	68bb      	ldr	r3, [r7, #8]
 8003baa:	699a      	ldr	r2, [r3, #24]
 8003bac:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8003bb0:	1ad2      	subs	r2, r2, r3
 8003bb2:	68bb      	ldr	r3, [r7, #8]
 8003bb4:	619a      	str	r2, [r3, #24]
 8003bb6:	e002      	b.n	8003bbe <HAL_PCD_EP_DB_Transmit+0x422>
    }
    else
    {
      ep->xfer_len = 0U;
 8003bb8:	68bb      	ldr	r3, [r7, #8]
 8003bba:	2200      	movs	r2, #0
 8003bbc:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8003bbe:	68bb      	ldr	r3, [r7, #8]
 8003bc0:	699b      	ldr	r3, [r3, #24]
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	f040 80c0 	bne.w	8003d48 <HAL_PCD_EP_DB_Transmit+0x5ac>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003bc8:	68bb      	ldr	r3, [r7, #8]
 8003bca:	785b      	ldrb	r3, [r3, #1]
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d126      	bne.n	8003c1e <HAL_PCD_EP_DB_Transmit+0x482>
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003bde:	b29b      	uxth	r3, r3
 8003be0:	461a      	mov	r2, r3
 8003be2:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003be4:	4413      	add	r3, r2
 8003be6:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8003be8:	68bb      	ldr	r3, [r7, #8]
 8003bea:	781b      	ldrb	r3, [r3, #0]
 8003bec:	011a      	lsls	r2, r3, #4
 8003bee:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003bf0:	4413      	add	r3, r2
 8003bf2:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8003bf6:	67bb      	str	r3, [r7, #120]	@ 0x78
 8003bf8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003bfa:	881b      	ldrh	r3, [r3, #0]
 8003bfc:	b29b      	uxth	r3, r3
 8003bfe:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003c02:	b29a      	uxth	r2, r3
 8003c04:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003c06:	801a      	strh	r2, [r3, #0]
 8003c08:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003c0a:	881b      	ldrh	r3, [r3, #0]
 8003c0c:	b29b      	uxth	r3, r3
 8003c0e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003c12:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003c16:	b29a      	uxth	r2, r3
 8003c18:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003c1a:	801a      	strh	r2, [r3, #0]
 8003c1c:	e01a      	b.n	8003c54 <HAL_PCD_EP_DB_Transmit+0x4b8>
 8003c1e:	68bb      	ldr	r3, [r7, #8]
 8003c20:	785b      	ldrb	r3, [r3, #1]
 8003c22:	2b01      	cmp	r3, #1
 8003c24:	d116      	bne.n	8003c54 <HAL_PCD_EP_DB_Transmit+0x4b8>
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	667b      	str	r3, [r7, #100]	@ 0x64
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003c34:	b29b      	uxth	r3, r3
 8003c36:	461a      	mov	r2, r3
 8003c38:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003c3a:	4413      	add	r3, r2
 8003c3c:	667b      	str	r3, [r7, #100]	@ 0x64
 8003c3e:	68bb      	ldr	r3, [r7, #8]
 8003c40:	781b      	ldrb	r3, [r3, #0]
 8003c42:	011a      	lsls	r2, r3, #4
 8003c44:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003c46:	4413      	add	r3, r2
 8003c48:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8003c4c:	663b      	str	r3, [r7, #96]	@ 0x60
 8003c4e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003c50:	2200      	movs	r2, #0
 8003c52:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	677b      	str	r3, [r7, #116]	@ 0x74
 8003c5a:	68bb      	ldr	r3, [r7, #8]
 8003c5c:	785b      	ldrb	r3, [r3, #1]
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d12b      	bne.n	8003cba <HAL_PCD_EP_DB_Transmit+0x51e>
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003c70:	b29b      	uxth	r3, r3
 8003c72:	461a      	mov	r2, r3
 8003c74:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003c76:	4413      	add	r3, r2
 8003c78:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8003c7a:	68bb      	ldr	r3, [r7, #8]
 8003c7c:	781b      	ldrb	r3, [r3, #0]
 8003c7e:	011a      	lsls	r2, r3, #4
 8003c80:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003c82:	4413      	add	r3, r2
 8003c84:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8003c88:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003c8c:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8003c90:	881b      	ldrh	r3, [r3, #0]
 8003c92:	b29b      	uxth	r3, r3
 8003c94:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003c98:	b29a      	uxth	r2, r3
 8003c9a:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8003c9e:	801a      	strh	r2, [r3, #0]
 8003ca0:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8003ca4:	881b      	ldrh	r3, [r3, #0]
 8003ca6:	b29b      	uxth	r3, r3
 8003ca8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003cac:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003cb0:	b29a      	uxth	r2, r3
 8003cb2:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8003cb6:	801a      	strh	r2, [r3, #0]
 8003cb8:	e017      	b.n	8003cea <HAL_PCD_EP_DB_Transmit+0x54e>
 8003cba:	68bb      	ldr	r3, [r7, #8]
 8003cbc:	785b      	ldrb	r3, [r3, #1]
 8003cbe:	2b01      	cmp	r3, #1
 8003cc0:	d113      	bne.n	8003cea <HAL_PCD_EP_DB_Transmit+0x54e>
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003cca:	b29b      	uxth	r3, r3
 8003ccc:	461a      	mov	r2, r3
 8003cce:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003cd0:	4413      	add	r3, r2
 8003cd2:	677b      	str	r3, [r7, #116]	@ 0x74
 8003cd4:	68bb      	ldr	r3, [r7, #8]
 8003cd6:	781b      	ldrb	r3, [r3, #0]
 8003cd8:	011a      	lsls	r2, r3, #4
 8003cda:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003cdc:	4413      	add	r3, r2
 8003cde:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8003ce2:	673b      	str	r3, [r7, #112]	@ 0x70
 8003ce4:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003ce6:	2200      	movs	r2, #0
 8003ce8:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003cea:	68bb      	ldr	r3, [r7, #8]
 8003cec:	781b      	ldrb	r3, [r3, #0]
 8003cee:	4619      	mov	r1, r3
 8003cf0:	68f8      	ldr	r0, [r7, #12]
 8003cf2:	f005 fbf4 	bl	80094de <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8003cf6:	88fb      	ldrh	r3, [r7, #6]
 8003cf8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	f040 811a 	bne.w	8003f36 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	461a      	mov	r2, r3
 8003d08:	68bb      	ldr	r3, [r7, #8]
 8003d0a:	781b      	ldrb	r3, [r3, #0]
 8003d0c:	009b      	lsls	r3, r3, #2
 8003d0e:	4413      	add	r3, r2
 8003d10:	881b      	ldrh	r3, [r3, #0]
 8003d12:	b29b      	uxth	r3, r3
 8003d14:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003d18:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003d1c:	f8a7 3088 	strh.w	r3, [r7, #136]	@ 0x88
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	461a      	mov	r2, r3
 8003d26:	68bb      	ldr	r3, [r7, #8]
 8003d28:	781b      	ldrb	r3, [r3, #0]
 8003d2a:	009b      	lsls	r3, r3, #2
 8003d2c:	441a      	add	r2, r3
 8003d2e:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 8003d32:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003d36:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003d3a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003d3e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003d42:	b29b      	uxth	r3, r3
 8003d44:	8013      	strh	r3, [r2, #0]
 8003d46:	e0f6      	b.n	8003f36 <HAL_PCD_EP_DB_Transmit+0x79a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8003d48:	88fb      	ldrh	r3, [r7, #6]
 8003d4a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d121      	bne.n	8003d96 <HAL_PCD_EP_DB_Transmit+0x5fa>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	461a      	mov	r2, r3
 8003d58:	68bb      	ldr	r3, [r7, #8]
 8003d5a:	781b      	ldrb	r3, [r3, #0]
 8003d5c:	009b      	lsls	r3, r3, #2
 8003d5e:	4413      	add	r3, r2
 8003d60:	881b      	ldrh	r3, [r3, #0]
 8003d62:	b29b      	uxth	r3, r3
 8003d64:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003d68:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003d6c:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	461a      	mov	r2, r3
 8003d76:	68bb      	ldr	r3, [r7, #8]
 8003d78:	781b      	ldrb	r3, [r3, #0]
 8003d7a:	009b      	lsls	r3, r3, #2
 8003d7c:	441a      	add	r2, r3
 8003d7e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8003d82:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003d86:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003d8a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003d8e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003d92:	b29b      	uxth	r3, r3
 8003d94:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8003d96:	68bb      	ldr	r3, [r7, #8]
 8003d98:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8003d9c:	2b01      	cmp	r3, #1
 8003d9e:	f040 80ca 	bne.w	8003f36 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        ep->xfer_buff += TxPctSize;
 8003da2:	68bb      	ldr	r3, [r7, #8]
 8003da4:	695a      	ldr	r2, [r3, #20]
 8003da6:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8003daa:	441a      	add	r2, r3
 8003dac:	68bb      	ldr	r3, [r7, #8]
 8003dae:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8003db0:	68bb      	ldr	r3, [r7, #8]
 8003db2:	69da      	ldr	r2, [r3, #28]
 8003db4:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8003db8:	441a      	add	r2, r3
 8003dba:	68bb      	ldr	r3, [r7, #8]
 8003dbc:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8003dbe:	68bb      	ldr	r3, [r7, #8]
 8003dc0:	6a1a      	ldr	r2, [r3, #32]
 8003dc2:	68bb      	ldr	r3, [r7, #8]
 8003dc4:	691b      	ldr	r3, [r3, #16]
 8003dc6:	429a      	cmp	r2, r3
 8003dc8:	d30b      	bcc.n	8003de2 <HAL_PCD_EP_DB_Transmit+0x646>
        {
          len = ep->maxpacket;
 8003dca:	68bb      	ldr	r3, [r7, #8]
 8003dcc:	691b      	ldr	r3, [r3, #16]
 8003dce:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db -= len;
 8003dd2:	68bb      	ldr	r3, [r7, #8]
 8003dd4:	6a1a      	ldr	r2, [r3, #32]
 8003dd6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003dda:	1ad2      	subs	r2, r2, r3
 8003ddc:	68bb      	ldr	r3, [r7, #8]
 8003dde:	621a      	str	r2, [r3, #32]
 8003de0:	e017      	b.n	8003e12 <HAL_PCD_EP_DB_Transmit+0x676>
        }
        else if (ep->xfer_len_db == 0U)
 8003de2:	68bb      	ldr	r3, [r7, #8]
 8003de4:	6a1b      	ldr	r3, [r3, #32]
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d108      	bne.n	8003dfc <HAL_PCD_EP_DB_Transmit+0x660>
        {
          len = TxPctSize;
 8003dea:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8003dee:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_fill_db = 0U;
 8003df2:	68bb      	ldr	r3, [r7, #8]
 8003df4:	2200      	movs	r2, #0
 8003df6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 8003dfa:	e00a      	b.n	8003e12 <HAL_PCD_EP_DB_Transmit+0x676>
        }
        else
        {
          len = ep->xfer_len_db;
 8003dfc:	68bb      	ldr	r3, [r7, #8]
 8003dfe:	6a1b      	ldr	r3, [r3, #32]
 8003e00:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db = 0U;
 8003e04:	68bb      	ldr	r3, [r7, #8]
 8003e06:	2200      	movs	r2, #0
 8003e08:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8003e0a:	68bb      	ldr	r3, [r7, #8]
 8003e0c:	2200      	movs	r2, #0
 8003e0e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	657b      	str	r3, [r7, #84]	@ 0x54
 8003e18:	68bb      	ldr	r3, [r7, #8]
 8003e1a:	785b      	ldrb	r3, [r3, #1]
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d165      	bne.n	8003eec <HAL_PCD_EP_DB_Transmit+0x750>
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003e2e:	b29b      	uxth	r3, r3
 8003e30:	461a      	mov	r2, r3
 8003e32:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003e34:	4413      	add	r3, r2
 8003e36:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003e38:	68bb      	ldr	r3, [r7, #8]
 8003e3a:	781b      	ldrb	r3, [r3, #0]
 8003e3c:	011a      	lsls	r2, r3, #4
 8003e3e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003e40:	4413      	add	r3, r2
 8003e42:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8003e46:	65bb      	str	r3, [r7, #88]	@ 0x58
 8003e48:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003e4a:	881b      	ldrh	r3, [r3, #0]
 8003e4c:	b29b      	uxth	r3, r3
 8003e4e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003e52:	b29a      	uxth	r2, r3
 8003e54:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003e56:	801a      	strh	r2, [r3, #0]
 8003e58:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003e5c:	2b3e      	cmp	r3, #62	@ 0x3e
 8003e5e:	d91d      	bls.n	8003e9c <HAL_PCD_EP_DB_Transmit+0x700>
 8003e60:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003e64:	095b      	lsrs	r3, r3, #5
 8003e66:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003e68:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003e6c:	f003 031f 	and.w	r3, r3, #31
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d102      	bne.n	8003e7a <HAL_PCD_EP_DB_Transmit+0x6de>
 8003e74:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003e76:	3b01      	subs	r3, #1
 8003e78:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003e7a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003e7c:	881b      	ldrh	r3, [r3, #0]
 8003e7e:	b29a      	uxth	r2, r3
 8003e80:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003e82:	b29b      	uxth	r3, r3
 8003e84:	029b      	lsls	r3, r3, #10
 8003e86:	b29b      	uxth	r3, r3
 8003e88:	4313      	orrs	r3, r2
 8003e8a:	b29b      	uxth	r3, r3
 8003e8c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003e90:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003e94:	b29a      	uxth	r2, r3
 8003e96:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003e98:	801a      	strh	r2, [r3, #0]
 8003e9a:	e041      	b.n	8003f20 <HAL_PCD_EP_DB_Transmit+0x784>
 8003e9c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d10a      	bne.n	8003eba <HAL_PCD_EP_DB_Transmit+0x71e>
 8003ea4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003ea6:	881b      	ldrh	r3, [r3, #0]
 8003ea8:	b29b      	uxth	r3, r3
 8003eaa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003eae:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003eb2:	b29a      	uxth	r2, r3
 8003eb4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003eb6:	801a      	strh	r2, [r3, #0]
 8003eb8:	e032      	b.n	8003f20 <HAL_PCD_EP_DB_Transmit+0x784>
 8003eba:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003ebe:	085b      	lsrs	r3, r3, #1
 8003ec0:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003ec2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003ec6:	f003 0301 	and.w	r3, r3, #1
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d002      	beq.n	8003ed4 <HAL_PCD_EP_DB_Transmit+0x738>
 8003ece:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003ed0:	3301      	adds	r3, #1
 8003ed2:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003ed4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003ed6:	881b      	ldrh	r3, [r3, #0]
 8003ed8:	b29a      	uxth	r2, r3
 8003eda:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003edc:	b29b      	uxth	r3, r3
 8003ede:	029b      	lsls	r3, r3, #10
 8003ee0:	b29b      	uxth	r3, r3
 8003ee2:	4313      	orrs	r3, r2
 8003ee4:	b29a      	uxth	r2, r3
 8003ee6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003ee8:	801a      	strh	r2, [r3, #0]
 8003eea:	e019      	b.n	8003f20 <HAL_PCD_EP_DB_Transmit+0x784>
 8003eec:	68bb      	ldr	r3, [r7, #8]
 8003eee:	785b      	ldrb	r3, [r3, #1]
 8003ef0:	2b01      	cmp	r3, #1
 8003ef2:	d115      	bne.n	8003f20 <HAL_PCD_EP_DB_Transmit+0x784>
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003efc:	b29b      	uxth	r3, r3
 8003efe:	461a      	mov	r2, r3
 8003f00:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003f02:	4413      	add	r3, r2
 8003f04:	657b      	str	r3, [r7, #84]	@ 0x54
 8003f06:	68bb      	ldr	r3, [r7, #8]
 8003f08:	781b      	ldrb	r3, [r3, #0]
 8003f0a:	011a      	lsls	r2, r3, #4
 8003f0c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003f0e:	4413      	add	r3, r2
 8003f10:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8003f14:	653b      	str	r3, [r7, #80]	@ 0x50
 8003f16:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003f1a:	b29a      	uxth	r2, r3
 8003f1c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003f1e:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	6818      	ldr	r0, [r3, #0]
 8003f24:	68bb      	ldr	r3, [r7, #8]
 8003f26:	6959      	ldr	r1, [r3, #20]
 8003f28:	68bb      	ldr	r3, [r7, #8]
 8003f2a:	895a      	ldrh	r2, [r3, #10]
 8003f2c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003f30:	b29b      	uxth	r3, r3
 8003f32:	f003 fc82 	bl	800783a <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	461a      	mov	r2, r3
 8003f3c:	68bb      	ldr	r3, [r7, #8]
 8003f3e:	781b      	ldrb	r3, [r3, #0]
 8003f40:	009b      	lsls	r3, r3, #2
 8003f42:	4413      	add	r3, r2
 8003f44:	881b      	ldrh	r3, [r3, #0]
 8003f46:	b29b      	uxth	r3, r3
 8003f48:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003f4c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003f50:	82bb      	strh	r3, [r7, #20]
 8003f52:	8abb      	ldrh	r3, [r7, #20]
 8003f54:	f083 0310 	eor.w	r3, r3, #16
 8003f58:	82bb      	strh	r3, [r7, #20]
 8003f5a:	8abb      	ldrh	r3, [r7, #20]
 8003f5c:	f083 0320 	eor.w	r3, r3, #32
 8003f60:	82bb      	strh	r3, [r7, #20]
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	461a      	mov	r2, r3
 8003f68:	68bb      	ldr	r3, [r7, #8]
 8003f6a:	781b      	ldrb	r3, [r3, #0]
 8003f6c:	009b      	lsls	r3, r3, #2
 8003f6e:	441a      	add	r2, r3
 8003f70:	8abb      	ldrh	r3, [r7, #20]
 8003f72:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003f76:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003f7a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003f7e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003f82:	b29b      	uxth	r3, r3
 8003f84:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8003f86:	2300      	movs	r3, #0
}
 8003f88:	4618      	mov	r0, r3
 8003f8a:	3790      	adds	r7, #144	@ 0x90
 8003f8c:	46bd      	mov	sp, r7
 8003f8e:	bd80      	pop	{r7, pc}

08003f90 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8003f90:	b480      	push	{r7}
 8003f92:	b087      	sub	sp, #28
 8003f94:	af00      	add	r7, sp, #0
 8003f96:	60f8      	str	r0, [r7, #12]
 8003f98:	607b      	str	r3, [r7, #4]
 8003f9a:	460b      	mov	r3, r1
 8003f9c:	817b      	strh	r3, [r7, #10]
 8003f9e:	4613      	mov	r3, r2
 8003fa0:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8003fa2:	897b      	ldrh	r3, [r7, #10]
 8003fa4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003fa8:	b29b      	uxth	r3, r3
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d00b      	beq.n	8003fc6 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003fae:	897b      	ldrh	r3, [r7, #10]
 8003fb0:	f003 0207 	and.w	r2, r3, #7
 8003fb4:	4613      	mov	r3, r2
 8003fb6:	009b      	lsls	r3, r3, #2
 8003fb8:	4413      	add	r3, r2
 8003fba:	00db      	lsls	r3, r3, #3
 8003fbc:	3310      	adds	r3, #16
 8003fbe:	68fa      	ldr	r2, [r7, #12]
 8003fc0:	4413      	add	r3, r2
 8003fc2:	617b      	str	r3, [r7, #20]
 8003fc4:	e009      	b.n	8003fda <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003fc6:	897a      	ldrh	r2, [r7, #10]
 8003fc8:	4613      	mov	r3, r2
 8003fca:	009b      	lsls	r3, r3, #2
 8003fcc:	4413      	add	r3, r2
 8003fce:	00db      	lsls	r3, r3, #3
 8003fd0:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8003fd4:	68fa      	ldr	r2, [r7, #12]
 8003fd6:	4413      	add	r3, r2
 8003fd8:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8003fda:	893b      	ldrh	r3, [r7, #8]
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	d107      	bne.n	8003ff0 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8003fe0:	697b      	ldr	r3, [r7, #20]
 8003fe2:	2200      	movs	r2, #0
 8003fe4:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	b29a      	uxth	r2, r3
 8003fea:	697b      	ldr	r3, [r7, #20]
 8003fec:	80da      	strh	r2, [r3, #6]
 8003fee:	e00b      	b.n	8004008 <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8003ff0:	697b      	ldr	r3, [r7, #20]
 8003ff2:	2201      	movs	r2, #1
 8003ff4:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	b29a      	uxth	r2, r3
 8003ffa:	697b      	ldr	r3, [r7, #20]
 8003ffc:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	0c1b      	lsrs	r3, r3, #16
 8004002:	b29a      	uxth	r2, r3
 8004004:	697b      	ldr	r3, [r7, #20]
 8004006:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8004008:	2300      	movs	r3, #0
}
 800400a:	4618      	mov	r0, r3
 800400c:	371c      	adds	r7, #28
 800400e:	46bd      	mov	sp, r7
 8004010:	bc80      	pop	{r7}
 8004012:	4770      	bx	lr

08004014 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004014:	b580      	push	{r7, lr}
 8004016:	b086      	sub	sp, #24
 8004018:	af00      	add	r7, sp, #0
 800401a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	2b00      	cmp	r3, #0
 8004020:	d101      	bne.n	8004026 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004022:	2301      	movs	r3, #1
 8004024:	e272      	b.n	800450c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	f003 0301 	and.w	r3, r3, #1
 800402e:	2b00      	cmp	r3, #0
 8004030:	f000 8087 	beq.w	8004142 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004034:	4b92      	ldr	r3, [pc, #584]	@ (8004280 <HAL_RCC_OscConfig+0x26c>)
 8004036:	685b      	ldr	r3, [r3, #4]
 8004038:	f003 030c 	and.w	r3, r3, #12
 800403c:	2b04      	cmp	r3, #4
 800403e:	d00c      	beq.n	800405a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8004040:	4b8f      	ldr	r3, [pc, #572]	@ (8004280 <HAL_RCC_OscConfig+0x26c>)
 8004042:	685b      	ldr	r3, [r3, #4]
 8004044:	f003 030c 	and.w	r3, r3, #12
 8004048:	2b08      	cmp	r3, #8
 800404a:	d112      	bne.n	8004072 <HAL_RCC_OscConfig+0x5e>
 800404c:	4b8c      	ldr	r3, [pc, #560]	@ (8004280 <HAL_RCC_OscConfig+0x26c>)
 800404e:	685b      	ldr	r3, [r3, #4]
 8004050:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004054:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004058:	d10b      	bne.n	8004072 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800405a:	4b89      	ldr	r3, [pc, #548]	@ (8004280 <HAL_RCC_OscConfig+0x26c>)
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004062:	2b00      	cmp	r3, #0
 8004064:	d06c      	beq.n	8004140 <HAL_RCC_OscConfig+0x12c>
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	685b      	ldr	r3, [r3, #4]
 800406a:	2b00      	cmp	r3, #0
 800406c:	d168      	bne.n	8004140 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800406e:	2301      	movs	r3, #1
 8004070:	e24c      	b.n	800450c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	685b      	ldr	r3, [r3, #4]
 8004076:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800407a:	d106      	bne.n	800408a <HAL_RCC_OscConfig+0x76>
 800407c:	4b80      	ldr	r3, [pc, #512]	@ (8004280 <HAL_RCC_OscConfig+0x26c>)
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	4a7f      	ldr	r2, [pc, #508]	@ (8004280 <HAL_RCC_OscConfig+0x26c>)
 8004082:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004086:	6013      	str	r3, [r2, #0]
 8004088:	e02e      	b.n	80040e8 <HAL_RCC_OscConfig+0xd4>
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	685b      	ldr	r3, [r3, #4]
 800408e:	2b00      	cmp	r3, #0
 8004090:	d10c      	bne.n	80040ac <HAL_RCC_OscConfig+0x98>
 8004092:	4b7b      	ldr	r3, [pc, #492]	@ (8004280 <HAL_RCC_OscConfig+0x26c>)
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	4a7a      	ldr	r2, [pc, #488]	@ (8004280 <HAL_RCC_OscConfig+0x26c>)
 8004098:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800409c:	6013      	str	r3, [r2, #0]
 800409e:	4b78      	ldr	r3, [pc, #480]	@ (8004280 <HAL_RCC_OscConfig+0x26c>)
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	4a77      	ldr	r2, [pc, #476]	@ (8004280 <HAL_RCC_OscConfig+0x26c>)
 80040a4:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80040a8:	6013      	str	r3, [r2, #0]
 80040aa:	e01d      	b.n	80040e8 <HAL_RCC_OscConfig+0xd4>
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	685b      	ldr	r3, [r3, #4]
 80040b0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80040b4:	d10c      	bne.n	80040d0 <HAL_RCC_OscConfig+0xbc>
 80040b6:	4b72      	ldr	r3, [pc, #456]	@ (8004280 <HAL_RCC_OscConfig+0x26c>)
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	4a71      	ldr	r2, [pc, #452]	@ (8004280 <HAL_RCC_OscConfig+0x26c>)
 80040bc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80040c0:	6013      	str	r3, [r2, #0]
 80040c2:	4b6f      	ldr	r3, [pc, #444]	@ (8004280 <HAL_RCC_OscConfig+0x26c>)
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	4a6e      	ldr	r2, [pc, #440]	@ (8004280 <HAL_RCC_OscConfig+0x26c>)
 80040c8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80040cc:	6013      	str	r3, [r2, #0]
 80040ce:	e00b      	b.n	80040e8 <HAL_RCC_OscConfig+0xd4>
 80040d0:	4b6b      	ldr	r3, [pc, #428]	@ (8004280 <HAL_RCC_OscConfig+0x26c>)
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	4a6a      	ldr	r2, [pc, #424]	@ (8004280 <HAL_RCC_OscConfig+0x26c>)
 80040d6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80040da:	6013      	str	r3, [r2, #0]
 80040dc:	4b68      	ldr	r3, [pc, #416]	@ (8004280 <HAL_RCC_OscConfig+0x26c>)
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	4a67      	ldr	r2, [pc, #412]	@ (8004280 <HAL_RCC_OscConfig+0x26c>)
 80040e2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80040e6:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	685b      	ldr	r3, [r3, #4]
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d013      	beq.n	8004118 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80040f0:	f7fd ff94 	bl	800201c <HAL_GetTick>
 80040f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80040f6:	e008      	b.n	800410a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80040f8:	f7fd ff90 	bl	800201c <HAL_GetTick>
 80040fc:	4602      	mov	r2, r0
 80040fe:	693b      	ldr	r3, [r7, #16]
 8004100:	1ad3      	subs	r3, r2, r3
 8004102:	2b64      	cmp	r3, #100	@ 0x64
 8004104:	d901      	bls.n	800410a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8004106:	2303      	movs	r3, #3
 8004108:	e200      	b.n	800450c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800410a:	4b5d      	ldr	r3, [pc, #372]	@ (8004280 <HAL_RCC_OscConfig+0x26c>)
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004112:	2b00      	cmp	r3, #0
 8004114:	d0f0      	beq.n	80040f8 <HAL_RCC_OscConfig+0xe4>
 8004116:	e014      	b.n	8004142 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004118:	f7fd ff80 	bl	800201c <HAL_GetTick>
 800411c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800411e:	e008      	b.n	8004132 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004120:	f7fd ff7c 	bl	800201c <HAL_GetTick>
 8004124:	4602      	mov	r2, r0
 8004126:	693b      	ldr	r3, [r7, #16]
 8004128:	1ad3      	subs	r3, r2, r3
 800412a:	2b64      	cmp	r3, #100	@ 0x64
 800412c:	d901      	bls.n	8004132 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800412e:	2303      	movs	r3, #3
 8004130:	e1ec      	b.n	800450c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004132:	4b53      	ldr	r3, [pc, #332]	@ (8004280 <HAL_RCC_OscConfig+0x26c>)
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800413a:	2b00      	cmp	r3, #0
 800413c:	d1f0      	bne.n	8004120 <HAL_RCC_OscConfig+0x10c>
 800413e:	e000      	b.n	8004142 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004140:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	f003 0302 	and.w	r3, r3, #2
 800414a:	2b00      	cmp	r3, #0
 800414c:	d063      	beq.n	8004216 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800414e:	4b4c      	ldr	r3, [pc, #304]	@ (8004280 <HAL_RCC_OscConfig+0x26c>)
 8004150:	685b      	ldr	r3, [r3, #4]
 8004152:	f003 030c 	and.w	r3, r3, #12
 8004156:	2b00      	cmp	r3, #0
 8004158:	d00b      	beq.n	8004172 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800415a:	4b49      	ldr	r3, [pc, #292]	@ (8004280 <HAL_RCC_OscConfig+0x26c>)
 800415c:	685b      	ldr	r3, [r3, #4]
 800415e:	f003 030c 	and.w	r3, r3, #12
 8004162:	2b08      	cmp	r3, #8
 8004164:	d11c      	bne.n	80041a0 <HAL_RCC_OscConfig+0x18c>
 8004166:	4b46      	ldr	r3, [pc, #280]	@ (8004280 <HAL_RCC_OscConfig+0x26c>)
 8004168:	685b      	ldr	r3, [r3, #4]
 800416a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800416e:	2b00      	cmp	r3, #0
 8004170:	d116      	bne.n	80041a0 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004172:	4b43      	ldr	r3, [pc, #268]	@ (8004280 <HAL_RCC_OscConfig+0x26c>)
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	f003 0302 	and.w	r3, r3, #2
 800417a:	2b00      	cmp	r3, #0
 800417c:	d005      	beq.n	800418a <HAL_RCC_OscConfig+0x176>
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	691b      	ldr	r3, [r3, #16]
 8004182:	2b01      	cmp	r3, #1
 8004184:	d001      	beq.n	800418a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8004186:	2301      	movs	r3, #1
 8004188:	e1c0      	b.n	800450c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800418a:	4b3d      	ldr	r3, [pc, #244]	@ (8004280 <HAL_RCC_OscConfig+0x26c>)
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	695b      	ldr	r3, [r3, #20]
 8004196:	00db      	lsls	r3, r3, #3
 8004198:	4939      	ldr	r1, [pc, #228]	@ (8004280 <HAL_RCC_OscConfig+0x26c>)
 800419a:	4313      	orrs	r3, r2
 800419c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800419e:	e03a      	b.n	8004216 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	691b      	ldr	r3, [r3, #16]
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	d020      	beq.n	80041ea <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80041a8:	4b36      	ldr	r3, [pc, #216]	@ (8004284 <HAL_RCC_OscConfig+0x270>)
 80041aa:	2201      	movs	r2, #1
 80041ac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80041ae:	f7fd ff35 	bl	800201c <HAL_GetTick>
 80041b2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80041b4:	e008      	b.n	80041c8 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80041b6:	f7fd ff31 	bl	800201c <HAL_GetTick>
 80041ba:	4602      	mov	r2, r0
 80041bc:	693b      	ldr	r3, [r7, #16]
 80041be:	1ad3      	subs	r3, r2, r3
 80041c0:	2b02      	cmp	r3, #2
 80041c2:	d901      	bls.n	80041c8 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80041c4:	2303      	movs	r3, #3
 80041c6:	e1a1      	b.n	800450c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80041c8:	4b2d      	ldr	r3, [pc, #180]	@ (8004280 <HAL_RCC_OscConfig+0x26c>)
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	f003 0302 	and.w	r3, r3, #2
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	d0f0      	beq.n	80041b6 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80041d4:	4b2a      	ldr	r3, [pc, #168]	@ (8004280 <HAL_RCC_OscConfig+0x26c>)
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	695b      	ldr	r3, [r3, #20]
 80041e0:	00db      	lsls	r3, r3, #3
 80041e2:	4927      	ldr	r1, [pc, #156]	@ (8004280 <HAL_RCC_OscConfig+0x26c>)
 80041e4:	4313      	orrs	r3, r2
 80041e6:	600b      	str	r3, [r1, #0]
 80041e8:	e015      	b.n	8004216 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80041ea:	4b26      	ldr	r3, [pc, #152]	@ (8004284 <HAL_RCC_OscConfig+0x270>)
 80041ec:	2200      	movs	r2, #0
 80041ee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80041f0:	f7fd ff14 	bl	800201c <HAL_GetTick>
 80041f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80041f6:	e008      	b.n	800420a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80041f8:	f7fd ff10 	bl	800201c <HAL_GetTick>
 80041fc:	4602      	mov	r2, r0
 80041fe:	693b      	ldr	r3, [r7, #16]
 8004200:	1ad3      	subs	r3, r2, r3
 8004202:	2b02      	cmp	r3, #2
 8004204:	d901      	bls.n	800420a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8004206:	2303      	movs	r3, #3
 8004208:	e180      	b.n	800450c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800420a:	4b1d      	ldr	r3, [pc, #116]	@ (8004280 <HAL_RCC_OscConfig+0x26c>)
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	f003 0302 	and.w	r3, r3, #2
 8004212:	2b00      	cmp	r3, #0
 8004214:	d1f0      	bne.n	80041f8 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	f003 0308 	and.w	r3, r3, #8
 800421e:	2b00      	cmp	r3, #0
 8004220:	d03a      	beq.n	8004298 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	699b      	ldr	r3, [r3, #24]
 8004226:	2b00      	cmp	r3, #0
 8004228:	d019      	beq.n	800425e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800422a:	4b17      	ldr	r3, [pc, #92]	@ (8004288 <HAL_RCC_OscConfig+0x274>)
 800422c:	2201      	movs	r2, #1
 800422e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004230:	f7fd fef4 	bl	800201c <HAL_GetTick>
 8004234:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004236:	e008      	b.n	800424a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004238:	f7fd fef0 	bl	800201c <HAL_GetTick>
 800423c:	4602      	mov	r2, r0
 800423e:	693b      	ldr	r3, [r7, #16]
 8004240:	1ad3      	subs	r3, r2, r3
 8004242:	2b02      	cmp	r3, #2
 8004244:	d901      	bls.n	800424a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8004246:	2303      	movs	r3, #3
 8004248:	e160      	b.n	800450c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800424a:	4b0d      	ldr	r3, [pc, #52]	@ (8004280 <HAL_RCC_OscConfig+0x26c>)
 800424c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800424e:	f003 0302 	and.w	r3, r3, #2
 8004252:	2b00      	cmp	r3, #0
 8004254:	d0f0      	beq.n	8004238 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8004256:	2001      	movs	r0, #1
 8004258:	f000 fa9c 	bl	8004794 <RCC_Delay>
 800425c:	e01c      	b.n	8004298 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800425e:	4b0a      	ldr	r3, [pc, #40]	@ (8004288 <HAL_RCC_OscConfig+0x274>)
 8004260:	2200      	movs	r2, #0
 8004262:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004264:	f7fd feda 	bl	800201c <HAL_GetTick>
 8004268:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800426a:	e00f      	b.n	800428c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800426c:	f7fd fed6 	bl	800201c <HAL_GetTick>
 8004270:	4602      	mov	r2, r0
 8004272:	693b      	ldr	r3, [r7, #16]
 8004274:	1ad3      	subs	r3, r2, r3
 8004276:	2b02      	cmp	r3, #2
 8004278:	d908      	bls.n	800428c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800427a:	2303      	movs	r3, #3
 800427c:	e146      	b.n	800450c <HAL_RCC_OscConfig+0x4f8>
 800427e:	bf00      	nop
 8004280:	40021000 	.word	0x40021000
 8004284:	42420000 	.word	0x42420000
 8004288:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800428c:	4b92      	ldr	r3, [pc, #584]	@ (80044d8 <HAL_RCC_OscConfig+0x4c4>)
 800428e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004290:	f003 0302 	and.w	r3, r3, #2
 8004294:	2b00      	cmp	r3, #0
 8004296:	d1e9      	bne.n	800426c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	f003 0304 	and.w	r3, r3, #4
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	f000 80a6 	beq.w	80043f2 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80042a6:	2300      	movs	r3, #0
 80042a8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80042aa:	4b8b      	ldr	r3, [pc, #556]	@ (80044d8 <HAL_RCC_OscConfig+0x4c4>)
 80042ac:	69db      	ldr	r3, [r3, #28]
 80042ae:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d10d      	bne.n	80042d2 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80042b6:	4b88      	ldr	r3, [pc, #544]	@ (80044d8 <HAL_RCC_OscConfig+0x4c4>)
 80042b8:	69db      	ldr	r3, [r3, #28]
 80042ba:	4a87      	ldr	r2, [pc, #540]	@ (80044d8 <HAL_RCC_OscConfig+0x4c4>)
 80042bc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80042c0:	61d3      	str	r3, [r2, #28]
 80042c2:	4b85      	ldr	r3, [pc, #532]	@ (80044d8 <HAL_RCC_OscConfig+0x4c4>)
 80042c4:	69db      	ldr	r3, [r3, #28]
 80042c6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80042ca:	60bb      	str	r3, [r7, #8]
 80042cc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80042ce:	2301      	movs	r3, #1
 80042d0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80042d2:	4b82      	ldr	r3, [pc, #520]	@ (80044dc <HAL_RCC_OscConfig+0x4c8>)
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d118      	bne.n	8004310 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80042de:	4b7f      	ldr	r3, [pc, #508]	@ (80044dc <HAL_RCC_OscConfig+0x4c8>)
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	4a7e      	ldr	r2, [pc, #504]	@ (80044dc <HAL_RCC_OscConfig+0x4c8>)
 80042e4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80042e8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80042ea:	f7fd fe97 	bl	800201c <HAL_GetTick>
 80042ee:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80042f0:	e008      	b.n	8004304 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80042f2:	f7fd fe93 	bl	800201c <HAL_GetTick>
 80042f6:	4602      	mov	r2, r0
 80042f8:	693b      	ldr	r3, [r7, #16]
 80042fa:	1ad3      	subs	r3, r2, r3
 80042fc:	2b64      	cmp	r3, #100	@ 0x64
 80042fe:	d901      	bls.n	8004304 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8004300:	2303      	movs	r3, #3
 8004302:	e103      	b.n	800450c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004304:	4b75      	ldr	r3, [pc, #468]	@ (80044dc <HAL_RCC_OscConfig+0x4c8>)
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800430c:	2b00      	cmp	r3, #0
 800430e:	d0f0      	beq.n	80042f2 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	68db      	ldr	r3, [r3, #12]
 8004314:	2b01      	cmp	r3, #1
 8004316:	d106      	bne.n	8004326 <HAL_RCC_OscConfig+0x312>
 8004318:	4b6f      	ldr	r3, [pc, #444]	@ (80044d8 <HAL_RCC_OscConfig+0x4c4>)
 800431a:	6a1b      	ldr	r3, [r3, #32]
 800431c:	4a6e      	ldr	r2, [pc, #440]	@ (80044d8 <HAL_RCC_OscConfig+0x4c4>)
 800431e:	f043 0301 	orr.w	r3, r3, #1
 8004322:	6213      	str	r3, [r2, #32]
 8004324:	e02d      	b.n	8004382 <HAL_RCC_OscConfig+0x36e>
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	68db      	ldr	r3, [r3, #12]
 800432a:	2b00      	cmp	r3, #0
 800432c:	d10c      	bne.n	8004348 <HAL_RCC_OscConfig+0x334>
 800432e:	4b6a      	ldr	r3, [pc, #424]	@ (80044d8 <HAL_RCC_OscConfig+0x4c4>)
 8004330:	6a1b      	ldr	r3, [r3, #32]
 8004332:	4a69      	ldr	r2, [pc, #420]	@ (80044d8 <HAL_RCC_OscConfig+0x4c4>)
 8004334:	f023 0301 	bic.w	r3, r3, #1
 8004338:	6213      	str	r3, [r2, #32]
 800433a:	4b67      	ldr	r3, [pc, #412]	@ (80044d8 <HAL_RCC_OscConfig+0x4c4>)
 800433c:	6a1b      	ldr	r3, [r3, #32]
 800433e:	4a66      	ldr	r2, [pc, #408]	@ (80044d8 <HAL_RCC_OscConfig+0x4c4>)
 8004340:	f023 0304 	bic.w	r3, r3, #4
 8004344:	6213      	str	r3, [r2, #32]
 8004346:	e01c      	b.n	8004382 <HAL_RCC_OscConfig+0x36e>
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	68db      	ldr	r3, [r3, #12]
 800434c:	2b05      	cmp	r3, #5
 800434e:	d10c      	bne.n	800436a <HAL_RCC_OscConfig+0x356>
 8004350:	4b61      	ldr	r3, [pc, #388]	@ (80044d8 <HAL_RCC_OscConfig+0x4c4>)
 8004352:	6a1b      	ldr	r3, [r3, #32]
 8004354:	4a60      	ldr	r2, [pc, #384]	@ (80044d8 <HAL_RCC_OscConfig+0x4c4>)
 8004356:	f043 0304 	orr.w	r3, r3, #4
 800435a:	6213      	str	r3, [r2, #32]
 800435c:	4b5e      	ldr	r3, [pc, #376]	@ (80044d8 <HAL_RCC_OscConfig+0x4c4>)
 800435e:	6a1b      	ldr	r3, [r3, #32]
 8004360:	4a5d      	ldr	r2, [pc, #372]	@ (80044d8 <HAL_RCC_OscConfig+0x4c4>)
 8004362:	f043 0301 	orr.w	r3, r3, #1
 8004366:	6213      	str	r3, [r2, #32]
 8004368:	e00b      	b.n	8004382 <HAL_RCC_OscConfig+0x36e>
 800436a:	4b5b      	ldr	r3, [pc, #364]	@ (80044d8 <HAL_RCC_OscConfig+0x4c4>)
 800436c:	6a1b      	ldr	r3, [r3, #32]
 800436e:	4a5a      	ldr	r2, [pc, #360]	@ (80044d8 <HAL_RCC_OscConfig+0x4c4>)
 8004370:	f023 0301 	bic.w	r3, r3, #1
 8004374:	6213      	str	r3, [r2, #32]
 8004376:	4b58      	ldr	r3, [pc, #352]	@ (80044d8 <HAL_RCC_OscConfig+0x4c4>)
 8004378:	6a1b      	ldr	r3, [r3, #32]
 800437a:	4a57      	ldr	r2, [pc, #348]	@ (80044d8 <HAL_RCC_OscConfig+0x4c4>)
 800437c:	f023 0304 	bic.w	r3, r3, #4
 8004380:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	68db      	ldr	r3, [r3, #12]
 8004386:	2b00      	cmp	r3, #0
 8004388:	d015      	beq.n	80043b6 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800438a:	f7fd fe47 	bl	800201c <HAL_GetTick>
 800438e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004390:	e00a      	b.n	80043a8 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004392:	f7fd fe43 	bl	800201c <HAL_GetTick>
 8004396:	4602      	mov	r2, r0
 8004398:	693b      	ldr	r3, [r7, #16]
 800439a:	1ad3      	subs	r3, r2, r3
 800439c:	f241 3288 	movw	r2, #5000	@ 0x1388
 80043a0:	4293      	cmp	r3, r2
 80043a2:	d901      	bls.n	80043a8 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80043a4:	2303      	movs	r3, #3
 80043a6:	e0b1      	b.n	800450c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80043a8:	4b4b      	ldr	r3, [pc, #300]	@ (80044d8 <HAL_RCC_OscConfig+0x4c4>)
 80043aa:	6a1b      	ldr	r3, [r3, #32]
 80043ac:	f003 0302 	and.w	r3, r3, #2
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d0ee      	beq.n	8004392 <HAL_RCC_OscConfig+0x37e>
 80043b4:	e014      	b.n	80043e0 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80043b6:	f7fd fe31 	bl	800201c <HAL_GetTick>
 80043ba:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80043bc:	e00a      	b.n	80043d4 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80043be:	f7fd fe2d 	bl	800201c <HAL_GetTick>
 80043c2:	4602      	mov	r2, r0
 80043c4:	693b      	ldr	r3, [r7, #16]
 80043c6:	1ad3      	subs	r3, r2, r3
 80043c8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80043cc:	4293      	cmp	r3, r2
 80043ce:	d901      	bls.n	80043d4 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80043d0:	2303      	movs	r3, #3
 80043d2:	e09b      	b.n	800450c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80043d4:	4b40      	ldr	r3, [pc, #256]	@ (80044d8 <HAL_RCC_OscConfig+0x4c4>)
 80043d6:	6a1b      	ldr	r3, [r3, #32]
 80043d8:	f003 0302 	and.w	r3, r3, #2
 80043dc:	2b00      	cmp	r3, #0
 80043de:	d1ee      	bne.n	80043be <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80043e0:	7dfb      	ldrb	r3, [r7, #23]
 80043e2:	2b01      	cmp	r3, #1
 80043e4:	d105      	bne.n	80043f2 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80043e6:	4b3c      	ldr	r3, [pc, #240]	@ (80044d8 <HAL_RCC_OscConfig+0x4c4>)
 80043e8:	69db      	ldr	r3, [r3, #28]
 80043ea:	4a3b      	ldr	r2, [pc, #236]	@ (80044d8 <HAL_RCC_OscConfig+0x4c4>)
 80043ec:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80043f0:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	69db      	ldr	r3, [r3, #28]
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	f000 8087 	beq.w	800450a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80043fc:	4b36      	ldr	r3, [pc, #216]	@ (80044d8 <HAL_RCC_OscConfig+0x4c4>)
 80043fe:	685b      	ldr	r3, [r3, #4]
 8004400:	f003 030c 	and.w	r3, r3, #12
 8004404:	2b08      	cmp	r3, #8
 8004406:	d061      	beq.n	80044cc <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	69db      	ldr	r3, [r3, #28]
 800440c:	2b02      	cmp	r3, #2
 800440e:	d146      	bne.n	800449e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004410:	4b33      	ldr	r3, [pc, #204]	@ (80044e0 <HAL_RCC_OscConfig+0x4cc>)
 8004412:	2200      	movs	r2, #0
 8004414:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004416:	f7fd fe01 	bl	800201c <HAL_GetTick>
 800441a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800441c:	e008      	b.n	8004430 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800441e:	f7fd fdfd 	bl	800201c <HAL_GetTick>
 8004422:	4602      	mov	r2, r0
 8004424:	693b      	ldr	r3, [r7, #16]
 8004426:	1ad3      	subs	r3, r2, r3
 8004428:	2b02      	cmp	r3, #2
 800442a:	d901      	bls.n	8004430 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800442c:	2303      	movs	r3, #3
 800442e:	e06d      	b.n	800450c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004430:	4b29      	ldr	r3, [pc, #164]	@ (80044d8 <HAL_RCC_OscConfig+0x4c4>)
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004438:	2b00      	cmp	r3, #0
 800443a:	d1f0      	bne.n	800441e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	6a1b      	ldr	r3, [r3, #32]
 8004440:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004444:	d108      	bne.n	8004458 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8004446:	4b24      	ldr	r3, [pc, #144]	@ (80044d8 <HAL_RCC_OscConfig+0x4c4>)
 8004448:	685b      	ldr	r3, [r3, #4]
 800444a:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	689b      	ldr	r3, [r3, #8]
 8004452:	4921      	ldr	r1, [pc, #132]	@ (80044d8 <HAL_RCC_OscConfig+0x4c4>)
 8004454:	4313      	orrs	r3, r2
 8004456:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004458:	4b1f      	ldr	r3, [pc, #124]	@ (80044d8 <HAL_RCC_OscConfig+0x4c4>)
 800445a:	685b      	ldr	r3, [r3, #4]
 800445c:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	6a19      	ldr	r1, [r3, #32]
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004468:	430b      	orrs	r3, r1
 800446a:	491b      	ldr	r1, [pc, #108]	@ (80044d8 <HAL_RCC_OscConfig+0x4c4>)
 800446c:	4313      	orrs	r3, r2
 800446e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004470:	4b1b      	ldr	r3, [pc, #108]	@ (80044e0 <HAL_RCC_OscConfig+0x4cc>)
 8004472:	2201      	movs	r2, #1
 8004474:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004476:	f7fd fdd1 	bl	800201c <HAL_GetTick>
 800447a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800447c:	e008      	b.n	8004490 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800447e:	f7fd fdcd 	bl	800201c <HAL_GetTick>
 8004482:	4602      	mov	r2, r0
 8004484:	693b      	ldr	r3, [r7, #16]
 8004486:	1ad3      	subs	r3, r2, r3
 8004488:	2b02      	cmp	r3, #2
 800448a:	d901      	bls.n	8004490 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800448c:	2303      	movs	r3, #3
 800448e:	e03d      	b.n	800450c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004490:	4b11      	ldr	r3, [pc, #68]	@ (80044d8 <HAL_RCC_OscConfig+0x4c4>)
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004498:	2b00      	cmp	r3, #0
 800449a:	d0f0      	beq.n	800447e <HAL_RCC_OscConfig+0x46a>
 800449c:	e035      	b.n	800450a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800449e:	4b10      	ldr	r3, [pc, #64]	@ (80044e0 <HAL_RCC_OscConfig+0x4cc>)
 80044a0:	2200      	movs	r2, #0
 80044a2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80044a4:	f7fd fdba 	bl	800201c <HAL_GetTick>
 80044a8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80044aa:	e008      	b.n	80044be <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80044ac:	f7fd fdb6 	bl	800201c <HAL_GetTick>
 80044b0:	4602      	mov	r2, r0
 80044b2:	693b      	ldr	r3, [r7, #16]
 80044b4:	1ad3      	subs	r3, r2, r3
 80044b6:	2b02      	cmp	r3, #2
 80044b8:	d901      	bls.n	80044be <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80044ba:	2303      	movs	r3, #3
 80044bc:	e026      	b.n	800450c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80044be:	4b06      	ldr	r3, [pc, #24]	@ (80044d8 <HAL_RCC_OscConfig+0x4c4>)
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d1f0      	bne.n	80044ac <HAL_RCC_OscConfig+0x498>
 80044ca:	e01e      	b.n	800450a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	69db      	ldr	r3, [r3, #28]
 80044d0:	2b01      	cmp	r3, #1
 80044d2:	d107      	bne.n	80044e4 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80044d4:	2301      	movs	r3, #1
 80044d6:	e019      	b.n	800450c <HAL_RCC_OscConfig+0x4f8>
 80044d8:	40021000 	.word	0x40021000
 80044dc:	40007000 	.word	0x40007000
 80044e0:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80044e4:	4b0b      	ldr	r3, [pc, #44]	@ (8004514 <HAL_RCC_OscConfig+0x500>)
 80044e6:	685b      	ldr	r3, [r3, #4]
 80044e8:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	6a1b      	ldr	r3, [r3, #32]
 80044f4:	429a      	cmp	r2, r3
 80044f6:	d106      	bne.n	8004506 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004502:	429a      	cmp	r2, r3
 8004504:	d001      	beq.n	800450a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8004506:	2301      	movs	r3, #1
 8004508:	e000      	b.n	800450c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800450a:	2300      	movs	r3, #0
}
 800450c:	4618      	mov	r0, r3
 800450e:	3718      	adds	r7, #24
 8004510:	46bd      	mov	sp, r7
 8004512:	bd80      	pop	{r7, pc}
 8004514:	40021000 	.word	0x40021000

08004518 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004518:	b580      	push	{r7, lr}
 800451a:	b084      	sub	sp, #16
 800451c:	af00      	add	r7, sp, #0
 800451e:	6078      	str	r0, [r7, #4]
 8004520:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	2b00      	cmp	r3, #0
 8004526:	d101      	bne.n	800452c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004528:	2301      	movs	r3, #1
 800452a:	e0d0      	b.n	80046ce <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800452c:	4b6a      	ldr	r3, [pc, #424]	@ (80046d8 <HAL_RCC_ClockConfig+0x1c0>)
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	f003 0307 	and.w	r3, r3, #7
 8004534:	683a      	ldr	r2, [r7, #0]
 8004536:	429a      	cmp	r2, r3
 8004538:	d910      	bls.n	800455c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800453a:	4b67      	ldr	r3, [pc, #412]	@ (80046d8 <HAL_RCC_ClockConfig+0x1c0>)
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	f023 0207 	bic.w	r2, r3, #7
 8004542:	4965      	ldr	r1, [pc, #404]	@ (80046d8 <HAL_RCC_ClockConfig+0x1c0>)
 8004544:	683b      	ldr	r3, [r7, #0]
 8004546:	4313      	orrs	r3, r2
 8004548:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800454a:	4b63      	ldr	r3, [pc, #396]	@ (80046d8 <HAL_RCC_ClockConfig+0x1c0>)
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	f003 0307 	and.w	r3, r3, #7
 8004552:	683a      	ldr	r2, [r7, #0]
 8004554:	429a      	cmp	r2, r3
 8004556:	d001      	beq.n	800455c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8004558:	2301      	movs	r3, #1
 800455a:	e0b8      	b.n	80046ce <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	f003 0302 	and.w	r3, r3, #2
 8004564:	2b00      	cmp	r3, #0
 8004566:	d020      	beq.n	80045aa <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	f003 0304 	and.w	r3, r3, #4
 8004570:	2b00      	cmp	r3, #0
 8004572:	d005      	beq.n	8004580 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004574:	4b59      	ldr	r3, [pc, #356]	@ (80046dc <HAL_RCC_ClockConfig+0x1c4>)
 8004576:	685b      	ldr	r3, [r3, #4]
 8004578:	4a58      	ldr	r2, [pc, #352]	@ (80046dc <HAL_RCC_ClockConfig+0x1c4>)
 800457a:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800457e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	f003 0308 	and.w	r3, r3, #8
 8004588:	2b00      	cmp	r3, #0
 800458a:	d005      	beq.n	8004598 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800458c:	4b53      	ldr	r3, [pc, #332]	@ (80046dc <HAL_RCC_ClockConfig+0x1c4>)
 800458e:	685b      	ldr	r3, [r3, #4]
 8004590:	4a52      	ldr	r2, [pc, #328]	@ (80046dc <HAL_RCC_ClockConfig+0x1c4>)
 8004592:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8004596:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004598:	4b50      	ldr	r3, [pc, #320]	@ (80046dc <HAL_RCC_ClockConfig+0x1c4>)
 800459a:	685b      	ldr	r3, [r3, #4]
 800459c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	689b      	ldr	r3, [r3, #8]
 80045a4:	494d      	ldr	r1, [pc, #308]	@ (80046dc <HAL_RCC_ClockConfig+0x1c4>)
 80045a6:	4313      	orrs	r3, r2
 80045a8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	f003 0301 	and.w	r3, r3, #1
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d040      	beq.n	8004638 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	685b      	ldr	r3, [r3, #4]
 80045ba:	2b01      	cmp	r3, #1
 80045bc:	d107      	bne.n	80045ce <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80045be:	4b47      	ldr	r3, [pc, #284]	@ (80046dc <HAL_RCC_ClockConfig+0x1c4>)
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d115      	bne.n	80045f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80045ca:	2301      	movs	r3, #1
 80045cc:	e07f      	b.n	80046ce <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	685b      	ldr	r3, [r3, #4]
 80045d2:	2b02      	cmp	r3, #2
 80045d4:	d107      	bne.n	80045e6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80045d6:	4b41      	ldr	r3, [pc, #260]	@ (80046dc <HAL_RCC_ClockConfig+0x1c4>)
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d109      	bne.n	80045f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80045e2:	2301      	movs	r3, #1
 80045e4:	e073      	b.n	80046ce <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80045e6:	4b3d      	ldr	r3, [pc, #244]	@ (80046dc <HAL_RCC_ClockConfig+0x1c4>)
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	f003 0302 	and.w	r3, r3, #2
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d101      	bne.n	80045f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80045f2:	2301      	movs	r3, #1
 80045f4:	e06b      	b.n	80046ce <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80045f6:	4b39      	ldr	r3, [pc, #228]	@ (80046dc <HAL_RCC_ClockConfig+0x1c4>)
 80045f8:	685b      	ldr	r3, [r3, #4]
 80045fa:	f023 0203 	bic.w	r2, r3, #3
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	685b      	ldr	r3, [r3, #4]
 8004602:	4936      	ldr	r1, [pc, #216]	@ (80046dc <HAL_RCC_ClockConfig+0x1c4>)
 8004604:	4313      	orrs	r3, r2
 8004606:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004608:	f7fd fd08 	bl	800201c <HAL_GetTick>
 800460c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800460e:	e00a      	b.n	8004626 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004610:	f7fd fd04 	bl	800201c <HAL_GetTick>
 8004614:	4602      	mov	r2, r0
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	1ad3      	subs	r3, r2, r3
 800461a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800461e:	4293      	cmp	r3, r2
 8004620:	d901      	bls.n	8004626 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004622:	2303      	movs	r3, #3
 8004624:	e053      	b.n	80046ce <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004626:	4b2d      	ldr	r3, [pc, #180]	@ (80046dc <HAL_RCC_ClockConfig+0x1c4>)
 8004628:	685b      	ldr	r3, [r3, #4]
 800462a:	f003 020c 	and.w	r2, r3, #12
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	685b      	ldr	r3, [r3, #4]
 8004632:	009b      	lsls	r3, r3, #2
 8004634:	429a      	cmp	r2, r3
 8004636:	d1eb      	bne.n	8004610 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004638:	4b27      	ldr	r3, [pc, #156]	@ (80046d8 <HAL_RCC_ClockConfig+0x1c0>)
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	f003 0307 	and.w	r3, r3, #7
 8004640:	683a      	ldr	r2, [r7, #0]
 8004642:	429a      	cmp	r2, r3
 8004644:	d210      	bcs.n	8004668 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004646:	4b24      	ldr	r3, [pc, #144]	@ (80046d8 <HAL_RCC_ClockConfig+0x1c0>)
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	f023 0207 	bic.w	r2, r3, #7
 800464e:	4922      	ldr	r1, [pc, #136]	@ (80046d8 <HAL_RCC_ClockConfig+0x1c0>)
 8004650:	683b      	ldr	r3, [r7, #0]
 8004652:	4313      	orrs	r3, r2
 8004654:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004656:	4b20      	ldr	r3, [pc, #128]	@ (80046d8 <HAL_RCC_ClockConfig+0x1c0>)
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	f003 0307 	and.w	r3, r3, #7
 800465e:	683a      	ldr	r2, [r7, #0]
 8004660:	429a      	cmp	r2, r3
 8004662:	d001      	beq.n	8004668 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8004664:	2301      	movs	r3, #1
 8004666:	e032      	b.n	80046ce <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	f003 0304 	and.w	r3, r3, #4
 8004670:	2b00      	cmp	r3, #0
 8004672:	d008      	beq.n	8004686 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004674:	4b19      	ldr	r3, [pc, #100]	@ (80046dc <HAL_RCC_ClockConfig+0x1c4>)
 8004676:	685b      	ldr	r3, [r3, #4]
 8004678:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	68db      	ldr	r3, [r3, #12]
 8004680:	4916      	ldr	r1, [pc, #88]	@ (80046dc <HAL_RCC_ClockConfig+0x1c4>)
 8004682:	4313      	orrs	r3, r2
 8004684:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	f003 0308 	and.w	r3, r3, #8
 800468e:	2b00      	cmp	r3, #0
 8004690:	d009      	beq.n	80046a6 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004692:	4b12      	ldr	r3, [pc, #72]	@ (80046dc <HAL_RCC_ClockConfig+0x1c4>)
 8004694:	685b      	ldr	r3, [r3, #4]
 8004696:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	691b      	ldr	r3, [r3, #16]
 800469e:	00db      	lsls	r3, r3, #3
 80046a0:	490e      	ldr	r1, [pc, #56]	@ (80046dc <HAL_RCC_ClockConfig+0x1c4>)
 80046a2:	4313      	orrs	r3, r2
 80046a4:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80046a6:	f000 f821 	bl	80046ec <HAL_RCC_GetSysClockFreq>
 80046aa:	4602      	mov	r2, r0
 80046ac:	4b0b      	ldr	r3, [pc, #44]	@ (80046dc <HAL_RCC_ClockConfig+0x1c4>)
 80046ae:	685b      	ldr	r3, [r3, #4]
 80046b0:	091b      	lsrs	r3, r3, #4
 80046b2:	f003 030f 	and.w	r3, r3, #15
 80046b6:	490a      	ldr	r1, [pc, #40]	@ (80046e0 <HAL_RCC_ClockConfig+0x1c8>)
 80046b8:	5ccb      	ldrb	r3, [r1, r3]
 80046ba:	fa22 f303 	lsr.w	r3, r2, r3
 80046be:	4a09      	ldr	r2, [pc, #36]	@ (80046e4 <HAL_RCC_ClockConfig+0x1cc>)
 80046c0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80046c2:	4b09      	ldr	r3, [pc, #36]	@ (80046e8 <HAL_RCC_ClockConfig+0x1d0>)
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	4618      	mov	r0, r3
 80046c8:	f7fd fc66 	bl	8001f98 <HAL_InitTick>

  return HAL_OK;
 80046cc:	2300      	movs	r3, #0
}
 80046ce:	4618      	mov	r0, r3
 80046d0:	3710      	adds	r7, #16
 80046d2:	46bd      	mov	sp, r7
 80046d4:	bd80      	pop	{r7, pc}
 80046d6:	bf00      	nop
 80046d8:	40022000 	.word	0x40022000
 80046dc:	40021000 	.word	0x40021000
 80046e0:	0800ebc4 	.word	0x0800ebc4
 80046e4:	20000000 	.word	0x20000000
 80046e8:	20000004 	.word	0x20000004

080046ec <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80046ec:	b480      	push	{r7}
 80046ee:	b087      	sub	sp, #28
 80046f0:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80046f2:	2300      	movs	r3, #0
 80046f4:	60fb      	str	r3, [r7, #12]
 80046f6:	2300      	movs	r3, #0
 80046f8:	60bb      	str	r3, [r7, #8]
 80046fa:	2300      	movs	r3, #0
 80046fc:	617b      	str	r3, [r7, #20]
 80046fe:	2300      	movs	r3, #0
 8004700:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8004702:	2300      	movs	r3, #0
 8004704:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8004706:	4b1e      	ldr	r3, [pc, #120]	@ (8004780 <HAL_RCC_GetSysClockFreq+0x94>)
 8004708:	685b      	ldr	r3, [r3, #4]
 800470a:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	f003 030c 	and.w	r3, r3, #12
 8004712:	2b04      	cmp	r3, #4
 8004714:	d002      	beq.n	800471c <HAL_RCC_GetSysClockFreq+0x30>
 8004716:	2b08      	cmp	r3, #8
 8004718:	d003      	beq.n	8004722 <HAL_RCC_GetSysClockFreq+0x36>
 800471a:	e027      	b.n	800476c <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800471c:	4b19      	ldr	r3, [pc, #100]	@ (8004784 <HAL_RCC_GetSysClockFreq+0x98>)
 800471e:	613b      	str	r3, [r7, #16]
      break;
 8004720:	e027      	b.n	8004772 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	0c9b      	lsrs	r3, r3, #18
 8004726:	f003 030f 	and.w	r3, r3, #15
 800472a:	4a17      	ldr	r2, [pc, #92]	@ (8004788 <HAL_RCC_GetSysClockFreq+0x9c>)
 800472c:	5cd3      	ldrb	r3, [r2, r3]
 800472e:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004736:	2b00      	cmp	r3, #0
 8004738:	d010      	beq.n	800475c <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800473a:	4b11      	ldr	r3, [pc, #68]	@ (8004780 <HAL_RCC_GetSysClockFreq+0x94>)
 800473c:	685b      	ldr	r3, [r3, #4]
 800473e:	0c5b      	lsrs	r3, r3, #17
 8004740:	f003 0301 	and.w	r3, r3, #1
 8004744:	4a11      	ldr	r2, [pc, #68]	@ (800478c <HAL_RCC_GetSysClockFreq+0xa0>)
 8004746:	5cd3      	ldrb	r3, [r2, r3]
 8004748:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	4a0d      	ldr	r2, [pc, #52]	@ (8004784 <HAL_RCC_GetSysClockFreq+0x98>)
 800474e:	fb03 f202 	mul.w	r2, r3, r2
 8004752:	68bb      	ldr	r3, [r7, #8]
 8004754:	fbb2 f3f3 	udiv	r3, r2, r3
 8004758:	617b      	str	r3, [r7, #20]
 800475a:	e004      	b.n	8004766 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	4a0c      	ldr	r2, [pc, #48]	@ (8004790 <HAL_RCC_GetSysClockFreq+0xa4>)
 8004760:	fb02 f303 	mul.w	r3, r2, r3
 8004764:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8004766:	697b      	ldr	r3, [r7, #20]
 8004768:	613b      	str	r3, [r7, #16]
      break;
 800476a:	e002      	b.n	8004772 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800476c:	4b05      	ldr	r3, [pc, #20]	@ (8004784 <HAL_RCC_GetSysClockFreq+0x98>)
 800476e:	613b      	str	r3, [r7, #16]
      break;
 8004770:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004772:	693b      	ldr	r3, [r7, #16]
}
 8004774:	4618      	mov	r0, r3
 8004776:	371c      	adds	r7, #28
 8004778:	46bd      	mov	sp, r7
 800477a:	bc80      	pop	{r7}
 800477c:	4770      	bx	lr
 800477e:	bf00      	nop
 8004780:	40021000 	.word	0x40021000
 8004784:	007a1200 	.word	0x007a1200
 8004788:	0800ebd4 	.word	0x0800ebd4
 800478c:	0800ebe4 	.word	0x0800ebe4
 8004790:	003d0900 	.word	0x003d0900

08004794 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8004794:	b480      	push	{r7}
 8004796:	b085      	sub	sp, #20
 8004798:	af00      	add	r7, sp, #0
 800479a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800479c:	4b0a      	ldr	r3, [pc, #40]	@ (80047c8 <RCC_Delay+0x34>)
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	4a0a      	ldr	r2, [pc, #40]	@ (80047cc <RCC_Delay+0x38>)
 80047a2:	fba2 2303 	umull	r2, r3, r2, r3
 80047a6:	0a5b      	lsrs	r3, r3, #9
 80047a8:	687a      	ldr	r2, [r7, #4]
 80047aa:	fb02 f303 	mul.w	r3, r2, r3
 80047ae:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80047b0:	bf00      	nop
  }
  while (Delay --);
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	1e5a      	subs	r2, r3, #1
 80047b6:	60fa      	str	r2, [r7, #12]
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	d1f9      	bne.n	80047b0 <RCC_Delay+0x1c>
}
 80047bc:	bf00      	nop
 80047be:	bf00      	nop
 80047c0:	3714      	adds	r7, #20
 80047c2:	46bd      	mov	sp, r7
 80047c4:	bc80      	pop	{r7}
 80047c6:	4770      	bx	lr
 80047c8:	20000000 	.word	0x20000000
 80047cc:	10624dd3 	.word	0x10624dd3

080047d0 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80047d0:	b580      	push	{r7, lr}
 80047d2:	b086      	sub	sp, #24
 80047d4:	af00      	add	r7, sp, #0
 80047d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 80047d8:	2300      	movs	r3, #0
 80047da:	613b      	str	r3, [r7, #16]
 80047dc:	2300      	movs	r3, #0
 80047de:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	f003 0301 	and.w	r3, r3, #1
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	d07d      	beq.n	80048e8 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 80047ec:	2300      	movs	r3, #0
 80047ee:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80047f0:	4b4f      	ldr	r3, [pc, #316]	@ (8004930 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80047f2:	69db      	ldr	r3, [r3, #28]
 80047f4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	d10d      	bne.n	8004818 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80047fc:	4b4c      	ldr	r3, [pc, #304]	@ (8004930 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80047fe:	69db      	ldr	r3, [r3, #28]
 8004800:	4a4b      	ldr	r2, [pc, #300]	@ (8004930 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004802:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004806:	61d3      	str	r3, [r2, #28]
 8004808:	4b49      	ldr	r3, [pc, #292]	@ (8004930 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800480a:	69db      	ldr	r3, [r3, #28]
 800480c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004810:	60bb      	str	r3, [r7, #8]
 8004812:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004814:	2301      	movs	r3, #1
 8004816:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004818:	4b46      	ldr	r3, [pc, #280]	@ (8004934 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004820:	2b00      	cmp	r3, #0
 8004822:	d118      	bne.n	8004856 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004824:	4b43      	ldr	r3, [pc, #268]	@ (8004934 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	4a42      	ldr	r2, [pc, #264]	@ (8004934 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800482a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800482e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004830:	f7fd fbf4 	bl	800201c <HAL_GetTick>
 8004834:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004836:	e008      	b.n	800484a <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004838:	f7fd fbf0 	bl	800201c <HAL_GetTick>
 800483c:	4602      	mov	r2, r0
 800483e:	693b      	ldr	r3, [r7, #16]
 8004840:	1ad3      	subs	r3, r2, r3
 8004842:	2b64      	cmp	r3, #100	@ 0x64
 8004844:	d901      	bls.n	800484a <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8004846:	2303      	movs	r3, #3
 8004848:	e06d      	b.n	8004926 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800484a:	4b3a      	ldr	r3, [pc, #232]	@ (8004934 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004852:	2b00      	cmp	r3, #0
 8004854:	d0f0      	beq.n	8004838 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004856:	4b36      	ldr	r3, [pc, #216]	@ (8004930 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004858:	6a1b      	ldr	r3, [r3, #32]
 800485a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800485e:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	2b00      	cmp	r3, #0
 8004864:	d02e      	beq.n	80048c4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	685b      	ldr	r3, [r3, #4]
 800486a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800486e:	68fa      	ldr	r2, [r7, #12]
 8004870:	429a      	cmp	r2, r3
 8004872:	d027      	beq.n	80048c4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004874:	4b2e      	ldr	r3, [pc, #184]	@ (8004930 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004876:	6a1b      	ldr	r3, [r3, #32]
 8004878:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800487c:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800487e:	4b2e      	ldr	r3, [pc, #184]	@ (8004938 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004880:	2201      	movs	r2, #1
 8004882:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004884:	4b2c      	ldr	r3, [pc, #176]	@ (8004938 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004886:	2200      	movs	r2, #0
 8004888:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800488a:	4a29      	ldr	r2, [pc, #164]	@ (8004930 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	f003 0301 	and.w	r3, r3, #1
 8004896:	2b00      	cmp	r3, #0
 8004898:	d014      	beq.n	80048c4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800489a:	f7fd fbbf 	bl	800201c <HAL_GetTick>
 800489e:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80048a0:	e00a      	b.n	80048b8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80048a2:	f7fd fbbb 	bl	800201c <HAL_GetTick>
 80048a6:	4602      	mov	r2, r0
 80048a8:	693b      	ldr	r3, [r7, #16]
 80048aa:	1ad3      	subs	r3, r2, r3
 80048ac:	f241 3288 	movw	r2, #5000	@ 0x1388
 80048b0:	4293      	cmp	r3, r2
 80048b2:	d901      	bls.n	80048b8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 80048b4:	2303      	movs	r3, #3
 80048b6:	e036      	b.n	8004926 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80048b8:	4b1d      	ldr	r3, [pc, #116]	@ (8004930 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80048ba:	6a1b      	ldr	r3, [r3, #32]
 80048bc:	f003 0302 	and.w	r3, r3, #2
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	d0ee      	beq.n	80048a2 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80048c4:	4b1a      	ldr	r3, [pc, #104]	@ (8004930 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80048c6:	6a1b      	ldr	r3, [r3, #32]
 80048c8:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	685b      	ldr	r3, [r3, #4]
 80048d0:	4917      	ldr	r1, [pc, #92]	@ (8004930 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80048d2:	4313      	orrs	r3, r2
 80048d4:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80048d6:	7dfb      	ldrb	r3, [r7, #23]
 80048d8:	2b01      	cmp	r3, #1
 80048da:	d105      	bne.n	80048e8 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80048dc:	4b14      	ldr	r3, [pc, #80]	@ (8004930 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80048de:	69db      	ldr	r3, [r3, #28]
 80048e0:	4a13      	ldr	r2, [pc, #76]	@ (8004930 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80048e2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80048e6:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	f003 0302 	and.w	r3, r3, #2
 80048f0:	2b00      	cmp	r3, #0
 80048f2:	d008      	beq.n	8004906 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80048f4:	4b0e      	ldr	r3, [pc, #56]	@ (8004930 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80048f6:	685b      	ldr	r3, [r3, #4]
 80048f8:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	689b      	ldr	r3, [r3, #8]
 8004900:	490b      	ldr	r1, [pc, #44]	@ (8004930 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004902:	4313      	orrs	r3, r2
 8004904:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	f003 0310 	and.w	r3, r3, #16
 800490e:	2b00      	cmp	r3, #0
 8004910:	d008      	beq.n	8004924 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004912:	4b07      	ldr	r3, [pc, #28]	@ (8004930 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004914:	685b      	ldr	r3, [r3, #4]
 8004916:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	68db      	ldr	r3, [r3, #12]
 800491e:	4904      	ldr	r1, [pc, #16]	@ (8004930 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004920:	4313      	orrs	r3, r2
 8004922:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8004924:	2300      	movs	r3, #0
}
 8004926:	4618      	mov	r0, r3
 8004928:	3718      	adds	r7, #24
 800492a:	46bd      	mov	sp, r7
 800492c:	bd80      	pop	{r7, pc}
 800492e:	bf00      	nop
 8004930:	40021000 	.word	0x40021000
 8004934:	40007000 	.word	0x40007000
 8004938:	42420440 	.word	0x42420440

0800493c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800493c:	b580      	push	{r7, lr}
 800493e:	b082      	sub	sp, #8
 8004940:	af00      	add	r7, sp, #0
 8004942:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	2b00      	cmp	r3, #0
 8004948:	d101      	bne.n	800494e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800494a:	2301      	movs	r3, #1
 800494c:	e041      	b.n	80049d2 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004954:	b2db      	uxtb	r3, r3
 8004956:	2b00      	cmp	r3, #0
 8004958:	d106      	bne.n	8004968 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	2200      	movs	r2, #0
 800495e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004962:	6878      	ldr	r0, [r7, #4]
 8004964:	f7fd f98c 	bl	8001c80 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	2202      	movs	r2, #2
 800496c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	681a      	ldr	r2, [r3, #0]
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	3304      	adds	r3, #4
 8004978:	4619      	mov	r1, r3
 800497a:	4610      	mov	r0, r2
 800497c:	f000 f992 	bl	8004ca4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	2201      	movs	r2, #1
 8004984:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	2201      	movs	r2, #1
 800498c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	2201      	movs	r2, #1
 8004994:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	2201      	movs	r2, #1
 800499c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	2201      	movs	r2, #1
 80049a4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	2201      	movs	r2, #1
 80049ac:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	2201      	movs	r2, #1
 80049b4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	2201      	movs	r2, #1
 80049bc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	2201      	movs	r2, #1
 80049c4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	2201      	movs	r2, #1
 80049cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80049d0:	2300      	movs	r3, #0
}
 80049d2:	4618      	mov	r0, r3
 80049d4:	3708      	adds	r7, #8
 80049d6:	46bd      	mov	sp, r7
 80049d8:	bd80      	pop	{r7, pc}
	...

080049dc <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80049dc:	b580      	push	{r7, lr}
 80049de:	b084      	sub	sp, #16
 80049e0:	af00      	add	r7, sp, #0
 80049e2:	6078      	str	r0, [r7, #4]
 80049e4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80049e6:	683b      	ldr	r3, [r7, #0]
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	d109      	bne.n	8004a00 <HAL_TIM_PWM_Start+0x24>
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80049f2:	b2db      	uxtb	r3, r3
 80049f4:	2b01      	cmp	r3, #1
 80049f6:	bf14      	ite	ne
 80049f8:	2301      	movne	r3, #1
 80049fa:	2300      	moveq	r3, #0
 80049fc:	b2db      	uxtb	r3, r3
 80049fe:	e022      	b.n	8004a46 <HAL_TIM_PWM_Start+0x6a>
 8004a00:	683b      	ldr	r3, [r7, #0]
 8004a02:	2b04      	cmp	r3, #4
 8004a04:	d109      	bne.n	8004a1a <HAL_TIM_PWM_Start+0x3e>
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8004a0c:	b2db      	uxtb	r3, r3
 8004a0e:	2b01      	cmp	r3, #1
 8004a10:	bf14      	ite	ne
 8004a12:	2301      	movne	r3, #1
 8004a14:	2300      	moveq	r3, #0
 8004a16:	b2db      	uxtb	r3, r3
 8004a18:	e015      	b.n	8004a46 <HAL_TIM_PWM_Start+0x6a>
 8004a1a:	683b      	ldr	r3, [r7, #0]
 8004a1c:	2b08      	cmp	r3, #8
 8004a1e:	d109      	bne.n	8004a34 <HAL_TIM_PWM_Start+0x58>
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004a26:	b2db      	uxtb	r3, r3
 8004a28:	2b01      	cmp	r3, #1
 8004a2a:	bf14      	ite	ne
 8004a2c:	2301      	movne	r3, #1
 8004a2e:	2300      	moveq	r3, #0
 8004a30:	b2db      	uxtb	r3, r3
 8004a32:	e008      	b.n	8004a46 <HAL_TIM_PWM_Start+0x6a>
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004a3a:	b2db      	uxtb	r3, r3
 8004a3c:	2b01      	cmp	r3, #1
 8004a3e:	bf14      	ite	ne
 8004a40:	2301      	movne	r3, #1
 8004a42:	2300      	moveq	r3, #0
 8004a44:	b2db      	uxtb	r3, r3
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d001      	beq.n	8004a4e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8004a4a:	2301      	movs	r3, #1
 8004a4c:	e05e      	b.n	8004b0c <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004a4e:	683b      	ldr	r3, [r7, #0]
 8004a50:	2b00      	cmp	r3, #0
 8004a52:	d104      	bne.n	8004a5e <HAL_TIM_PWM_Start+0x82>
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	2202      	movs	r2, #2
 8004a58:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004a5c:	e013      	b.n	8004a86 <HAL_TIM_PWM_Start+0xaa>
 8004a5e:	683b      	ldr	r3, [r7, #0]
 8004a60:	2b04      	cmp	r3, #4
 8004a62:	d104      	bne.n	8004a6e <HAL_TIM_PWM_Start+0x92>
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	2202      	movs	r2, #2
 8004a68:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004a6c:	e00b      	b.n	8004a86 <HAL_TIM_PWM_Start+0xaa>
 8004a6e:	683b      	ldr	r3, [r7, #0]
 8004a70:	2b08      	cmp	r3, #8
 8004a72:	d104      	bne.n	8004a7e <HAL_TIM_PWM_Start+0xa2>
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	2202      	movs	r2, #2
 8004a78:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004a7c:	e003      	b.n	8004a86 <HAL_TIM_PWM_Start+0xaa>
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	2202      	movs	r2, #2
 8004a82:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	2201      	movs	r2, #1
 8004a8c:	6839      	ldr	r1, [r7, #0]
 8004a8e:	4618      	mov	r0, r3
 8004a90:	f000 fafe 	bl	8005090 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	4a1e      	ldr	r2, [pc, #120]	@ (8004b14 <HAL_TIM_PWM_Start+0x138>)
 8004a9a:	4293      	cmp	r3, r2
 8004a9c:	d107      	bne.n	8004aae <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004aac:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	4a18      	ldr	r2, [pc, #96]	@ (8004b14 <HAL_TIM_PWM_Start+0x138>)
 8004ab4:	4293      	cmp	r3, r2
 8004ab6:	d00e      	beq.n	8004ad6 <HAL_TIM_PWM_Start+0xfa>
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004ac0:	d009      	beq.n	8004ad6 <HAL_TIM_PWM_Start+0xfa>
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	4a14      	ldr	r2, [pc, #80]	@ (8004b18 <HAL_TIM_PWM_Start+0x13c>)
 8004ac8:	4293      	cmp	r3, r2
 8004aca:	d004      	beq.n	8004ad6 <HAL_TIM_PWM_Start+0xfa>
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	4a12      	ldr	r2, [pc, #72]	@ (8004b1c <HAL_TIM_PWM_Start+0x140>)
 8004ad2:	4293      	cmp	r3, r2
 8004ad4:	d111      	bne.n	8004afa <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	689b      	ldr	r3, [r3, #8]
 8004adc:	f003 0307 	and.w	r3, r3, #7
 8004ae0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	2b06      	cmp	r3, #6
 8004ae6:	d010      	beq.n	8004b0a <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	681a      	ldr	r2, [r3, #0]
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	f042 0201 	orr.w	r2, r2, #1
 8004af6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004af8:	e007      	b.n	8004b0a <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	681a      	ldr	r2, [r3, #0]
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	f042 0201 	orr.w	r2, r2, #1
 8004b08:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004b0a:	2300      	movs	r3, #0
}
 8004b0c:	4618      	mov	r0, r3
 8004b0e:	3710      	adds	r7, #16
 8004b10:	46bd      	mov	sp, r7
 8004b12:	bd80      	pop	{r7, pc}
 8004b14:	40012c00 	.word	0x40012c00
 8004b18:	40000400 	.word	0x40000400
 8004b1c:	40000800 	.word	0x40000800

08004b20 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004b20:	b580      	push	{r7, lr}
 8004b22:	b086      	sub	sp, #24
 8004b24:	af00      	add	r7, sp, #0
 8004b26:	60f8      	str	r0, [r7, #12]
 8004b28:	60b9      	str	r1, [r7, #8]
 8004b2a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004b2c:	2300      	movs	r3, #0
 8004b2e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004b36:	2b01      	cmp	r3, #1
 8004b38:	d101      	bne.n	8004b3e <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004b3a:	2302      	movs	r3, #2
 8004b3c:	e0ae      	b.n	8004c9c <HAL_TIM_PWM_ConfigChannel+0x17c>
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	2201      	movs	r2, #1
 8004b42:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	2b0c      	cmp	r3, #12
 8004b4a:	f200 809f 	bhi.w	8004c8c <HAL_TIM_PWM_ConfigChannel+0x16c>
 8004b4e:	a201      	add	r2, pc, #4	@ (adr r2, 8004b54 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004b50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b54:	08004b89 	.word	0x08004b89
 8004b58:	08004c8d 	.word	0x08004c8d
 8004b5c:	08004c8d 	.word	0x08004c8d
 8004b60:	08004c8d 	.word	0x08004c8d
 8004b64:	08004bc9 	.word	0x08004bc9
 8004b68:	08004c8d 	.word	0x08004c8d
 8004b6c:	08004c8d 	.word	0x08004c8d
 8004b70:	08004c8d 	.word	0x08004c8d
 8004b74:	08004c0b 	.word	0x08004c0b
 8004b78:	08004c8d 	.word	0x08004c8d
 8004b7c:	08004c8d 	.word	0x08004c8d
 8004b80:	08004c8d 	.word	0x08004c8d
 8004b84:	08004c4b 	.word	0x08004c4b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	68b9      	ldr	r1, [r7, #8]
 8004b8e:	4618      	mov	r0, r3
 8004b90:	f000 f8f6 	bl	8004d80 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	699a      	ldr	r2, [r3, #24]
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	f042 0208 	orr.w	r2, r2, #8
 8004ba2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	699a      	ldr	r2, [r3, #24]
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	f022 0204 	bic.w	r2, r2, #4
 8004bb2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	6999      	ldr	r1, [r3, #24]
 8004bba:	68bb      	ldr	r3, [r7, #8]
 8004bbc:	691a      	ldr	r2, [r3, #16]
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	430a      	orrs	r2, r1
 8004bc4:	619a      	str	r2, [r3, #24]
      break;
 8004bc6:	e064      	b.n	8004c92 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	68b9      	ldr	r1, [r7, #8]
 8004bce:	4618      	mov	r0, r3
 8004bd0:	f000 f93c 	bl	8004e4c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	699a      	ldr	r2, [r3, #24]
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004be2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	699a      	ldr	r2, [r3, #24]
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004bf2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	6999      	ldr	r1, [r3, #24]
 8004bfa:	68bb      	ldr	r3, [r7, #8]
 8004bfc:	691b      	ldr	r3, [r3, #16]
 8004bfe:	021a      	lsls	r2, r3, #8
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	430a      	orrs	r2, r1
 8004c06:	619a      	str	r2, [r3, #24]
      break;
 8004c08:	e043      	b.n	8004c92 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	68b9      	ldr	r1, [r7, #8]
 8004c10:	4618      	mov	r0, r3
 8004c12:	f000 f985 	bl	8004f20 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	69da      	ldr	r2, [r3, #28]
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	f042 0208 	orr.w	r2, r2, #8
 8004c24:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	69da      	ldr	r2, [r3, #28]
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	f022 0204 	bic.w	r2, r2, #4
 8004c34:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	69d9      	ldr	r1, [r3, #28]
 8004c3c:	68bb      	ldr	r3, [r7, #8]
 8004c3e:	691a      	ldr	r2, [r3, #16]
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	430a      	orrs	r2, r1
 8004c46:	61da      	str	r2, [r3, #28]
      break;
 8004c48:	e023      	b.n	8004c92 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	68b9      	ldr	r1, [r7, #8]
 8004c50:	4618      	mov	r0, r3
 8004c52:	f000 f9cf 	bl	8004ff4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	69da      	ldr	r2, [r3, #28]
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004c64:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	69da      	ldr	r2, [r3, #28]
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004c74:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	69d9      	ldr	r1, [r3, #28]
 8004c7c:	68bb      	ldr	r3, [r7, #8]
 8004c7e:	691b      	ldr	r3, [r3, #16]
 8004c80:	021a      	lsls	r2, r3, #8
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	430a      	orrs	r2, r1
 8004c88:	61da      	str	r2, [r3, #28]
      break;
 8004c8a:	e002      	b.n	8004c92 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8004c8c:	2301      	movs	r3, #1
 8004c8e:	75fb      	strb	r3, [r7, #23]
      break;
 8004c90:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	2200      	movs	r2, #0
 8004c96:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004c9a:	7dfb      	ldrb	r3, [r7, #23]
}
 8004c9c:	4618      	mov	r0, r3
 8004c9e:	3718      	adds	r7, #24
 8004ca0:	46bd      	mov	sp, r7
 8004ca2:	bd80      	pop	{r7, pc}

08004ca4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004ca4:	b480      	push	{r7}
 8004ca6:	b085      	sub	sp, #20
 8004ca8:	af00      	add	r7, sp, #0
 8004caa:	6078      	str	r0, [r7, #4]
 8004cac:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	4a2f      	ldr	r2, [pc, #188]	@ (8004d74 <TIM_Base_SetConfig+0xd0>)
 8004cb8:	4293      	cmp	r3, r2
 8004cba:	d00b      	beq.n	8004cd4 <TIM_Base_SetConfig+0x30>
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004cc2:	d007      	beq.n	8004cd4 <TIM_Base_SetConfig+0x30>
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	4a2c      	ldr	r2, [pc, #176]	@ (8004d78 <TIM_Base_SetConfig+0xd4>)
 8004cc8:	4293      	cmp	r3, r2
 8004cca:	d003      	beq.n	8004cd4 <TIM_Base_SetConfig+0x30>
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	4a2b      	ldr	r2, [pc, #172]	@ (8004d7c <TIM_Base_SetConfig+0xd8>)
 8004cd0:	4293      	cmp	r3, r2
 8004cd2:	d108      	bne.n	8004ce6 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004cda:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004cdc:	683b      	ldr	r3, [r7, #0]
 8004cde:	685b      	ldr	r3, [r3, #4]
 8004ce0:	68fa      	ldr	r2, [r7, #12]
 8004ce2:	4313      	orrs	r3, r2
 8004ce4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	4a22      	ldr	r2, [pc, #136]	@ (8004d74 <TIM_Base_SetConfig+0xd0>)
 8004cea:	4293      	cmp	r3, r2
 8004cec:	d00b      	beq.n	8004d06 <TIM_Base_SetConfig+0x62>
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004cf4:	d007      	beq.n	8004d06 <TIM_Base_SetConfig+0x62>
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	4a1f      	ldr	r2, [pc, #124]	@ (8004d78 <TIM_Base_SetConfig+0xd4>)
 8004cfa:	4293      	cmp	r3, r2
 8004cfc:	d003      	beq.n	8004d06 <TIM_Base_SetConfig+0x62>
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	4a1e      	ldr	r2, [pc, #120]	@ (8004d7c <TIM_Base_SetConfig+0xd8>)
 8004d02:	4293      	cmp	r3, r2
 8004d04:	d108      	bne.n	8004d18 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004d0c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004d0e:	683b      	ldr	r3, [r7, #0]
 8004d10:	68db      	ldr	r3, [r3, #12]
 8004d12:	68fa      	ldr	r2, [r7, #12]
 8004d14:	4313      	orrs	r3, r2
 8004d16:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004d1e:	683b      	ldr	r3, [r7, #0]
 8004d20:	695b      	ldr	r3, [r3, #20]
 8004d22:	4313      	orrs	r3, r2
 8004d24:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	68fa      	ldr	r2, [r7, #12]
 8004d2a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004d2c:	683b      	ldr	r3, [r7, #0]
 8004d2e:	689a      	ldr	r2, [r3, #8]
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004d34:	683b      	ldr	r3, [r7, #0]
 8004d36:	681a      	ldr	r2, [r3, #0]
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	4a0d      	ldr	r2, [pc, #52]	@ (8004d74 <TIM_Base_SetConfig+0xd0>)
 8004d40:	4293      	cmp	r3, r2
 8004d42:	d103      	bne.n	8004d4c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004d44:	683b      	ldr	r3, [r7, #0]
 8004d46:	691a      	ldr	r2, [r3, #16]
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	2201      	movs	r2, #1
 8004d50:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	691b      	ldr	r3, [r3, #16]
 8004d56:	f003 0301 	and.w	r3, r3, #1
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	d005      	beq.n	8004d6a <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	691b      	ldr	r3, [r3, #16]
 8004d62:	f023 0201 	bic.w	r2, r3, #1
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	611a      	str	r2, [r3, #16]
  }
}
 8004d6a:	bf00      	nop
 8004d6c:	3714      	adds	r7, #20
 8004d6e:	46bd      	mov	sp, r7
 8004d70:	bc80      	pop	{r7}
 8004d72:	4770      	bx	lr
 8004d74:	40012c00 	.word	0x40012c00
 8004d78:	40000400 	.word	0x40000400
 8004d7c:	40000800 	.word	0x40000800

08004d80 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004d80:	b480      	push	{r7}
 8004d82:	b087      	sub	sp, #28
 8004d84:	af00      	add	r7, sp, #0
 8004d86:	6078      	str	r0, [r7, #4]
 8004d88:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	6a1b      	ldr	r3, [r3, #32]
 8004d8e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	6a1b      	ldr	r3, [r3, #32]
 8004d94:	f023 0201 	bic.w	r2, r3, #1
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	685b      	ldr	r3, [r3, #4]
 8004da0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	699b      	ldr	r3, [r3, #24]
 8004da6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004dae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	f023 0303 	bic.w	r3, r3, #3
 8004db6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004db8:	683b      	ldr	r3, [r7, #0]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	68fa      	ldr	r2, [r7, #12]
 8004dbe:	4313      	orrs	r3, r2
 8004dc0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004dc2:	697b      	ldr	r3, [r7, #20]
 8004dc4:	f023 0302 	bic.w	r3, r3, #2
 8004dc8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004dca:	683b      	ldr	r3, [r7, #0]
 8004dcc:	689b      	ldr	r3, [r3, #8]
 8004dce:	697a      	ldr	r2, [r7, #20]
 8004dd0:	4313      	orrs	r3, r2
 8004dd2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	4a1c      	ldr	r2, [pc, #112]	@ (8004e48 <TIM_OC1_SetConfig+0xc8>)
 8004dd8:	4293      	cmp	r3, r2
 8004dda:	d10c      	bne.n	8004df6 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004ddc:	697b      	ldr	r3, [r7, #20]
 8004dde:	f023 0308 	bic.w	r3, r3, #8
 8004de2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004de4:	683b      	ldr	r3, [r7, #0]
 8004de6:	68db      	ldr	r3, [r3, #12]
 8004de8:	697a      	ldr	r2, [r7, #20]
 8004dea:	4313      	orrs	r3, r2
 8004dec:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004dee:	697b      	ldr	r3, [r7, #20]
 8004df0:	f023 0304 	bic.w	r3, r3, #4
 8004df4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	4a13      	ldr	r2, [pc, #76]	@ (8004e48 <TIM_OC1_SetConfig+0xc8>)
 8004dfa:	4293      	cmp	r3, r2
 8004dfc:	d111      	bne.n	8004e22 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004dfe:	693b      	ldr	r3, [r7, #16]
 8004e00:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004e04:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004e06:	693b      	ldr	r3, [r7, #16]
 8004e08:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004e0c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004e0e:	683b      	ldr	r3, [r7, #0]
 8004e10:	695b      	ldr	r3, [r3, #20]
 8004e12:	693a      	ldr	r2, [r7, #16]
 8004e14:	4313      	orrs	r3, r2
 8004e16:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004e18:	683b      	ldr	r3, [r7, #0]
 8004e1a:	699b      	ldr	r3, [r3, #24]
 8004e1c:	693a      	ldr	r2, [r7, #16]
 8004e1e:	4313      	orrs	r3, r2
 8004e20:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	693a      	ldr	r2, [r7, #16]
 8004e26:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	68fa      	ldr	r2, [r7, #12]
 8004e2c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004e2e:	683b      	ldr	r3, [r7, #0]
 8004e30:	685a      	ldr	r2, [r3, #4]
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	697a      	ldr	r2, [r7, #20]
 8004e3a:	621a      	str	r2, [r3, #32]
}
 8004e3c:	bf00      	nop
 8004e3e:	371c      	adds	r7, #28
 8004e40:	46bd      	mov	sp, r7
 8004e42:	bc80      	pop	{r7}
 8004e44:	4770      	bx	lr
 8004e46:	bf00      	nop
 8004e48:	40012c00 	.word	0x40012c00

08004e4c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004e4c:	b480      	push	{r7}
 8004e4e:	b087      	sub	sp, #28
 8004e50:	af00      	add	r7, sp, #0
 8004e52:	6078      	str	r0, [r7, #4]
 8004e54:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	6a1b      	ldr	r3, [r3, #32]
 8004e5a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	6a1b      	ldr	r3, [r3, #32]
 8004e60:	f023 0210 	bic.w	r2, r3, #16
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	685b      	ldr	r3, [r3, #4]
 8004e6c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	699b      	ldr	r3, [r3, #24]
 8004e72:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004e7a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004e82:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004e84:	683b      	ldr	r3, [r7, #0]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	021b      	lsls	r3, r3, #8
 8004e8a:	68fa      	ldr	r2, [r7, #12]
 8004e8c:	4313      	orrs	r3, r2
 8004e8e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004e90:	697b      	ldr	r3, [r7, #20]
 8004e92:	f023 0320 	bic.w	r3, r3, #32
 8004e96:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004e98:	683b      	ldr	r3, [r7, #0]
 8004e9a:	689b      	ldr	r3, [r3, #8]
 8004e9c:	011b      	lsls	r3, r3, #4
 8004e9e:	697a      	ldr	r2, [r7, #20]
 8004ea0:	4313      	orrs	r3, r2
 8004ea2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	4a1d      	ldr	r2, [pc, #116]	@ (8004f1c <TIM_OC2_SetConfig+0xd0>)
 8004ea8:	4293      	cmp	r3, r2
 8004eaa:	d10d      	bne.n	8004ec8 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004eac:	697b      	ldr	r3, [r7, #20]
 8004eae:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004eb2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004eb4:	683b      	ldr	r3, [r7, #0]
 8004eb6:	68db      	ldr	r3, [r3, #12]
 8004eb8:	011b      	lsls	r3, r3, #4
 8004eba:	697a      	ldr	r2, [r7, #20]
 8004ebc:	4313      	orrs	r3, r2
 8004ebe:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004ec0:	697b      	ldr	r3, [r7, #20]
 8004ec2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004ec6:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	4a14      	ldr	r2, [pc, #80]	@ (8004f1c <TIM_OC2_SetConfig+0xd0>)
 8004ecc:	4293      	cmp	r3, r2
 8004ece:	d113      	bne.n	8004ef8 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004ed0:	693b      	ldr	r3, [r7, #16]
 8004ed2:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004ed6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004ed8:	693b      	ldr	r3, [r7, #16]
 8004eda:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004ede:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004ee0:	683b      	ldr	r3, [r7, #0]
 8004ee2:	695b      	ldr	r3, [r3, #20]
 8004ee4:	009b      	lsls	r3, r3, #2
 8004ee6:	693a      	ldr	r2, [r7, #16]
 8004ee8:	4313      	orrs	r3, r2
 8004eea:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004eec:	683b      	ldr	r3, [r7, #0]
 8004eee:	699b      	ldr	r3, [r3, #24]
 8004ef0:	009b      	lsls	r3, r3, #2
 8004ef2:	693a      	ldr	r2, [r7, #16]
 8004ef4:	4313      	orrs	r3, r2
 8004ef6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	693a      	ldr	r2, [r7, #16]
 8004efc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	68fa      	ldr	r2, [r7, #12]
 8004f02:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004f04:	683b      	ldr	r3, [r7, #0]
 8004f06:	685a      	ldr	r2, [r3, #4]
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	697a      	ldr	r2, [r7, #20]
 8004f10:	621a      	str	r2, [r3, #32]
}
 8004f12:	bf00      	nop
 8004f14:	371c      	adds	r7, #28
 8004f16:	46bd      	mov	sp, r7
 8004f18:	bc80      	pop	{r7}
 8004f1a:	4770      	bx	lr
 8004f1c:	40012c00 	.word	0x40012c00

08004f20 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004f20:	b480      	push	{r7}
 8004f22:	b087      	sub	sp, #28
 8004f24:	af00      	add	r7, sp, #0
 8004f26:	6078      	str	r0, [r7, #4]
 8004f28:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	6a1b      	ldr	r3, [r3, #32]
 8004f2e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	6a1b      	ldr	r3, [r3, #32]
 8004f34:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	685b      	ldr	r3, [r3, #4]
 8004f40:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	69db      	ldr	r3, [r3, #28]
 8004f46:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004f4e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	f023 0303 	bic.w	r3, r3, #3
 8004f56:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004f58:	683b      	ldr	r3, [r7, #0]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	68fa      	ldr	r2, [r7, #12]
 8004f5e:	4313      	orrs	r3, r2
 8004f60:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004f62:	697b      	ldr	r3, [r7, #20]
 8004f64:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004f68:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004f6a:	683b      	ldr	r3, [r7, #0]
 8004f6c:	689b      	ldr	r3, [r3, #8]
 8004f6e:	021b      	lsls	r3, r3, #8
 8004f70:	697a      	ldr	r2, [r7, #20]
 8004f72:	4313      	orrs	r3, r2
 8004f74:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	4a1d      	ldr	r2, [pc, #116]	@ (8004ff0 <TIM_OC3_SetConfig+0xd0>)
 8004f7a:	4293      	cmp	r3, r2
 8004f7c:	d10d      	bne.n	8004f9a <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004f7e:	697b      	ldr	r3, [r7, #20]
 8004f80:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004f84:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004f86:	683b      	ldr	r3, [r7, #0]
 8004f88:	68db      	ldr	r3, [r3, #12]
 8004f8a:	021b      	lsls	r3, r3, #8
 8004f8c:	697a      	ldr	r2, [r7, #20]
 8004f8e:	4313      	orrs	r3, r2
 8004f90:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004f92:	697b      	ldr	r3, [r7, #20]
 8004f94:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004f98:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	4a14      	ldr	r2, [pc, #80]	@ (8004ff0 <TIM_OC3_SetConfig+0xd0>)
 8004f9e:	4293      	cmp	r3, r2
 8004fa0:	d113      	bne.n	8004fca <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004fa2:	693b      	ldr	r3, [r7, #16]
 8004fa4:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004fa8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004faa:	693b      	ldr	r3, [r7, #16]
 8004fac:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004fb0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004fb2:	683b      	ldr	r3, [r7, #0]
 8004fb4:	695b      	ldr	r3, [r3, #20]
 8004fb6:	011b      	lsls	r3, r3, #4
 8004fb8:	693a      	ldr	r2, [r7, #16]
 8004fba:	4313      	orrs	r3, r2
 8004fbc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004fbe:	683b      	ldr	r3, [r7, #0]
 8004fc0:	699b      	ldr	r3, [r3, #24]
 8004fc2:	011b      	lsls	r3, r3, #4
 8004fc4:	693a      	ldr	r2, [r7, #16]
 8004fc6:	4313      	orrs	r3, r2
 8004fc8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	693a      	ldr	r2, [r7, #16]
 8004fce:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	68fa      	ldr	r2, [r7, #12]
 8004fd4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004fd6:	683b      	ldr	r3, [r7, #0]
 8004fd8:	685a      	ldr	r2, [r3, #4]
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	697a      	ldr	r2, [r7, #20]
 8004fe2:	621a      	str	r2, [r3, #32]
}
 8004fe4:	bf00      	nop
 8004fe6:	371c      	adds	r7, #28
 8004fe8:	46bd      	mov	sp, r7
 8004fea:	bc80      	pop	{r7}
 8004fec:	4770      	bx	lr
 8004fee:	bf00      	nop
 8004ff0:	40012c00 	.word	0x40012c00

08004ff4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004ff4:	b480      	push	{r7}
 8004ff6:	b087      	sub	sp, #28
 8004ff8:	af00      	add	r7, sp, #0
 8004ffa:	6078      	str	r0, [r7, #4]
 8004ffc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	6a1b      	ldr	r3, [r3, #32]
 8005002:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	6a1b      	ldr	r3, [r3, #32]
 8005008:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	685b      	ldr	r3, [r3, #4]
 8005014:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	69db      	ldr	r3, [r3, #28]
 800501a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005022:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800502a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800502c:	683b      	ldr	r3, [r7, #0]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	021b      	lsls	r3, r3, #8
 8005032:	68fa      	ldr	r2, [r7, #12]
 8005034:	4313      	orrs	r3, r2
 8005036:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005038:	693b      	ldr	r3, [r7, #16]
 800503a:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800503e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005040:	683b      	ldr	r3, [r7, #0]
 8005042:	689b      	ldr	r3, [r3, #8]
 8005044:	031b      	lsls	r3, r3, #12
 8005046:	693a      	ldr	r2, [r7, #16]
 8005048:	4313      	orrs	r3, r2
 800504a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	4a0f      	ldr	r2, [pc, #60]	@ (800508c <TIM_OC4_SetConfig+0x98>)
 8005050:	4293      	cmp	r3, r2
 8005052:	d109      	bne.n	8005068 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005054:	697b      	ldr	r3, [r7, #20]
 8005056:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800505a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800505c:	683b      	ldr	r3, [r7, #0]
 800505e:	695b      	ldr	r3, [r3, #20]
 8005060:	019b      	lsls	r3, r3, #6
 8005062:	697a      	ldr	r2, [r7, #20]
 8005064:	4313      	orrs	r3, r2
 8005066:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	697a      	ldr	r2, [r7, #20]
 800506c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	68fa      	ldr	r2, [r7, #12]
 8005072:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005074:	683b      	ldr	r3, [r7, #0]
 8005076:	685a      	ldr	r2, [r3, #4]
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	693a      	ldr	r2, [r7, #16]
 8005080:	621a      	str	r2, [r3, #32]
}
 8005082:	bf00      	nop
 8005084:	371c      	adds	r7, #28
 8005086:	46bd      	mov	sp, r7
 8005088:	bc80      	pop	{r7}
 800508a:	4770      	bx	lr
 800508c:	40012c00 	.word	0x40012c00

08005090 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005090:	b480      	push	{r7}
 8005092:	b087      	sub	sp, #28
 8005094:	af00      	add	r7, sp, #0
 8005096:	60f8      	str	r0, [r7, #12]
 8005098:	60b9      	str	r1, [r7, #8]
 800509a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800509c:	68bb      	ldr	r3, [r7, #8]
 800509e:	f003 031f 	and.w	r3, r3, #31
 80050a2:	2201      	movs	r2, #1
 80050a4:	fa02 f303 	lsl.w	r3, r2, r3
 80050a8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	6a1a      	ldr	r2, [r3, #32]
 80050ae:	697b      	ldr	r3, [r7, #20]
 80050b0:	43db      	mvns	r3, r3
 80050b2:	401a      	ands	r2, r3
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	6a1a      	ldr	r2, [r3, #32]
 80050bc:	68bb      	ldr	r3, [r7, #8]
 80050be:	f003 031f 	and.w	r3, r3, #31
 80050c2:	6879      	ldr	r1, [r7, #4]
 80050c4:	fa01 f303 	lsl.w	r3, r1, r3
 80050c8:	431a      	orrs	r2, r3
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	621a      	str	r2, [r3, #32]
}
 80050ce:	bf00      	nop
 80050d0:	371c      	adds	r7, #28
 80050d2:	46bd      	mov	sp, r7
 80050d4:	bc80      	pop	{r7}
 80050d6:	4770      	bx	lr

080050d8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80050d8:	b480      	push	{r7}
 80050da:	b085      	sub	sp, #20
 80050dc:	af00      	add	r7, sp, #0
 80050de:	6078      	str	r0, [r7, #4]
 80050e0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80050e8:	2b01      	cmp	r3, #1
 80050ea:	d101      	bne.n	80050f0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80050ec:	2302      	movs	r3, #2
 80050ee:	e046      	b.n	800517e <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	2201      	movs	r2, #1
 80050f4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	2202      	movs	r2, #2
 80050fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	685b      	ldr	r3, [r3, #4]
 8005106:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	689b      	ldr	r3, [r3, #8]
 800510e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005116:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005118:	683b      	ldr	r3, [r7, #0]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	68fa      	ldr	r2, [r7, #12]
 800511e:	4313      	orrs	r3, r2
 8005120:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	68fa      	ldr	r2, [r7, #12]
 8005128:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	4a16      	ldr	r2, [pc, #88]	@ (8005188 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8005130:	4293      	cmp	r3, r2
 8005132:	d00e      	beq.n	8005152 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800513c:	d009      	beq.n	8005152 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	4a12      	ldr	r2, [pc, #72]	@ (800518c <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8005144:	4293      	cmp	r3, r2
 8005146:	d004      	beq.n	8005152 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	4a10      	ldr	r2, [pc, #64]	@ (8005190 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800514e:	4293      	cmp	r3, r2
 8005150:	d10c      	bne.n	800516c <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005152:	68bb      	ldr	r3, [r7, #8]
 8005154:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005158:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800515a:	683b      	ldr	r3, [r7, #0]
 800515c:	685b      	ldr	r3, [r3, #4]
 800515e:	68ba      	ldr	r2, [r7, #8]
 8005160:	4313      	orrs	r3, r2
 8005162:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	68ba      	ldr	r2, [r7, #8]
 800516a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	2201      	movs	r2, #1
 8005170:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	2200      	movs	r2, #0
 8005178:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800517c:	2300      	movs	r3, #0
}
 800517e:	4618      	mov	r0, r3
 8005180:	3714      	adds	r7, #20
 8005182:	46bd      	mov	sp, r7
 8005184:	bc80      	pop	{r7}
 8005186:	4770      	bx	lr
 8005188:	40012c00 	.word	0x40012c00
 800518c:	40000400 	.word	0x40000400
 8005190:	40000800 	.word	0x40000800

08005194 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8005194:	b480      	push	{r7}
 8005196:	b085      	sub	sp, #20
 8005198:	af00      	add	r7, sp, #0
 800519a:	6078      	str	r0, [r7, #4]
 800519c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800519e:	2300      	movs	r3, #0
 80051a0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80051a8:	2b01      	cmp	r3, #1
 80051aa:	d101      	bne.n	80051b0 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80051ac:	2302      	movs	r3, #2
 80051ae:	e03d      	b.n	800522c <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	2201      	movs	r2, #1
 80051b4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 80051be:	683b      	ldr	r3, [r7, #0]
 80051c0:	68db      	ldr	r3, [r3, #12]
 80051c2:	4313      	orrs	r3, r2
 80051c4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80051cc:	683b      	ldr	r3, [r7, #0]
 80051ce:	689b      	ldr	r3, [r3, #8]
 80051d0:	4313      	orrs	r3, r2
 80051d2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 80051da:	683b      	ldr	r3, [r7, #0]
 80051dc:	685b      	ldr	r3, [r3, #4]
 80051de:	4313      	orrs	r3, r2
 80051e0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 80051e8:	683b      	ldr	r3, [r7, #0]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	4313      	orrs	r3, r2
 80051ee:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80051f6:	683b      	ldr	r3, [r7, #0]
 80051f8:	691b      	ldr	r3, [r3, #16]
 80051fa:	4313      	orrs	r3, r2
 80051fc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8005204:	683b      	ldr	r3, [r7, #0]
 8005206:	695b      	ldr	r3, [r3, #20]
 8005208:	4313      	orrs	r3, r2
 800520a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8005212:	683b      	ldr	r3, [r7, #0]
 8005214:	69db      	ldr	r3, [r3, #28]
 8005216:	4313      	orrs	r3, r2
 8005218:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	68fa      	ldr	r2, [r7, #12]
 8005220:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	2200      	movs	r2, #0
 8005226:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800522a:	2300      	movs	r3, #0
}
 800522c:	4618      	mov	r0, r3
 800522e:	3714      	adds	r7, #20
 8005230:	46bd      	mov	sp, r7
 8005232:	bc80      	pop	{r7}
 8005234:	4770      	bx	lr

08005236 <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8005236:	b480      	push	{r7}
 8005238:	b085      	sub	sp, #20
 800523a:	af00      	add	r7, sp, #0
 800523c:	60f8      	str	r0, [r7, #12]
 800523e:	4638      	mov	r0, r7
 8005240:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8005244:	2300      	movs	r3, #0
}
 8005246:	4618      	mov	r0, r3
 8005248:	3714      	adds	r7, #20
 800524a:	46bd      	mov	sp, r7
 800524c:	bc80      	pop	{r7}
 800524e:	4770      	bx	lr

08005250 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8005250:	b480      	push	{r7}
 8005252:	b085      	sub	sp, #20
 8005254:	af00      	add	r7, sp, #0
 8005256:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	2200      	movs	r2, #0
 800525c:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8005260:	f44f 433f 	mov.w	r3, #48896	@ 0xbf00
 8005264:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	b29a      	uxth	r2, r3
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8005270:	2300      	movs	r3, #0
}
 8005272:	4618      	mov	r0, r3
 8005274:	3714      	adds	r7, #20
 8005276:	46bd      	mov	sp, r7
 8005278:	bc80      	pop	{r7}
 800527a:	4770      	bx	lr

0800527c <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 800527c:	b480      	push	{r7}
 800527e:	b085      	sub	sp, #20
 8005280:	af00      	add	r7, sp, #0
 8005282:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8005284:	f44f 433f 	mov.w	r3, #48896	@ 0xbf00
 8005288:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8005290:	b29a      	uxth	r2, r3
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	b29b      	uxth	r3, r3
 8005296:	43db      	mvns	r3, r3
 8005298:	b29b      	uxth	r3, r3
 800529a:	4013      	ands	r3, r2
 800529c:	b29a      	uxth	r2, r3
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 80052a4:	2300      	movs	r3, #0
}
 80052a6:	4618      	mov	r0, r3
 80052a8:	3714      	adds	r7, #20
 80052aa:	46bd      	mov	sp, r7
 80052ac:	bc80      	pop	{r7}
 80052ae:	4770      	bx	lr

080052b0 <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 80052b0:	b480      	push	{r7}
 80052b2:	b083      	sub	sp, #12
 80052b4:	af00      	add	r7, sp, #0
 80052b6:	6078      	str	r0, [r7, #4]
 80052b8:	460b      	mov	r3, r1
 80052ba:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 80052bc:	2300      	movs	r3, #0
}
 80052be:	4618      	mov	r0, r3
 80052c0:	370c      	adds	r7, #12
 80052c2:	46bd      	mov	sp, r7
 80052c4:	bc80      	pop	{r7}
 80052c6:	4770      	bx	lr

080052c8 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80052c8:	b480      	push	{r7}
 80052ca:	b085      	sub	sp, #20
 80052cc:	af00      	add	r7, sp, #0
 80052ce:	60f8      	str	r0, [r7, #12]
 80052d0:	4638      	mov	r0, r7
 80052d2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	2201      	movs	r2, #1
 80052da:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	2200      	movs	r2, #0
 80052e2:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	2200      	movs	r2, #0
 80052ea:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	2200      	movs	r2, #0
 80052f2:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 80052f6:	2300      	movs	r3, #0
}
 80052f8:	4618      	mov	r0, r3
 80052fa:	3714      	adds	r7, #20
 80052fc:	46bd      	mov	sp, r7
 80052fe:	bc80      	pop	{r7}
 8005300:	4770      	bx	lr
	...

08005304 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005304:	b480      	push	{r7}
 8005306:	b09d      	sub	sp, #116	@ 0x74
 8005308:	af00      	add	r7, sp, #0
 800530a:	6078      	str	r0, [r7, #4]
 800530c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 800530e:	2300      	movs	r3, #0
 8005310:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8005314:	687a      	ldr	r2, [r7, #4]
 8005316:	683b      	ldr	r3, [r7, #0]
 8005318:	781b      	ldrb	r3, [r3, #0]
 800531a:	009b      	lsls	r3, r3, #2
 800531c:	4413      	add	r3, r2
 800531e:	881b      	ldrh	r3, [r3, #0]
 8005320:	b29b      	uxth	r3, r3
 8005322:	f423 43ec 	bic.w	r3, r3, #30208	@ 0x7600
 8005326:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800532a:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 800532e:	683b      	ldr	r3, [r7, #0]
 8005330:	78db      	ldrb	r3, [r3, #3]
 8005332:	2b03      	cmp	r3, #3
 8005334:	d81f      	bhi.n	8005376 <USB_ActivateEndpoint+0x72>
 8005336:	a201      	add	r2, pc, #4	@ (adr r2, 800533c <USB_ActivateEndpoint+0x38>)
 8005338:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800533c:	0800534d 	.word	0x0800534d
 8005340:	08005369 	.word	0x08005369
 8005344:	0800537f 	.word	0x0800537f
 8005348:	0800535b 	.word	0x0800535b
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 800534c:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8005350:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8005354:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 8005358:	e012      	b.n	8005380 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 800535a:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 800535e:	f443 63c0 	orr.w	r3, r3, #1536	@ 0x600
 8005362:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 8005366:	e00b      	b.n	8005380 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8005368:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 800536c:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8005370:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 8005374:	e004      	b.n	8005380 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 8005376:	2301      	movs	r3, #1
 8005378:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
      break;
 800537c:	e000      	b.n	8005380 <USB_ActivateEndpoint+0x7c>
      break;
 800537e:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8005380:	687a      	ldr	r2, [r7, #4]
 8005382:	683b      	ldr	r3, [r7, #0]
 8005384:	781b      	ldrb	r3, [r3, #0]
 8005386:	009b      	lsls	r3, r3, #2
 8005388:	441a      	add	r2, r3
 800538a:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 800538e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005392:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005396:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800539a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800539e:	b29b      	uxth	r3, r3
 80053a0:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 80053a2:	687a      	ldr	r2, [r7, #4]
 80053a4:	683b      	ldr	r3, [r7, #0]
 80053a6:	781b      	ldrb	r3, [r3, #0]
 80053a8:	009b      	lsls	r3, r3, #2
 80053aa:	4413      	add	r3, r2
 80053ac:	881b      	ldrh	r3, [r3, #0]
 80053ae:	b29b      	uxth	r3, r3
 80053b0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80053b4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80053b8:	b29b      	uxth	r3, r3
 80053ba:	683a      	ldr	r2, [r7, #0]
 80053bc:	7812      	ldrb	r2, [r2, #0]
 80053be:	4313      	orrs	r3, r2
 80053c0:	f8a7 3066 	strh.w	r3, [r7, #102]	@ 0x66
 80053c4:	687a      	ldr	r2, [r7, #4]
 80053c6:	683b      	ldr	r3, [r7, #0]
 80053c8:	781b      	ldrb	r3, [r3, #0]
 80053ca:	009b      	lsls	r3, r3, #2
 80053cc:	441a      	add	r2, r3
 80053ce:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 80053d2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80053d6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80053da:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80053de:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80053e2:	b29b      	uxth	r3, r3
 80053e4:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 80053e6:	683b      	ldr	r3, [r7, #0]
 80053e8:	7b1b      	ldrb	r3, [r3, #12]
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	f040 8178 	bne.w	80056e0 <USB_ActivateEndpoint+0x3dc>
  {
    if (ep->is_in != 0U)
 80053f0:	683b      	ldr	r3, [r7, #0]
 80053f2:	785b      	ldrb	r3, [r3, #1]
 80053f4:	2b00      	cmp	r3, #0
 80053f6:	f000 8084 	beq.w	8005502 <USB_ActivateEndpoint+0x1fe>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	61bb      	str	r3, [r7, #24]
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005404:	b29b      	uxth	r3, r3
 8005406:	461a      	mov	r2, r3
 8005408:	69bb      	ldr	r3, [r7, #24]
 800540a:	4413      	add	r3, r2
 800540c:	61bb      	str	r3, [r7, #24]
 800540e:	683b      	ldr	r3, [r7, #0]
 8005410:	781b      	ldrb	r3, [r3, #0]
 8005412:	011a      	lsls	r2, r3, #4
 8005414:	69bb      	ldr	r3, [r7, #24]
 8005416:	4413      	add	r3, r2
 8005418:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800541c:	617b      	str	r3, [r7, #20]
 800541e:	683b      	ldr	r3, [r7, #0]
 8005420:	88db      	ldrh	r3, [r3, #6]
 8005422:	085b      	lsrs	r3, r3, #1
 8005424:	b29b      	uxth	r3, r3
 8005426:	005b      	lsls	r3, r3, #1
 8005428:	b29a      	uxth	r2, r3
 800542a:	697b      	ldr	r3, [r7, #20]
 800542c:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800542e:	687a      	ldr	r2, [r7, #4]
 8005430:	683b      	ldr	r3, [r7, #0]
 8005432:	781b      	ldrb	r3, [r3, #0]
 8005434:	009b      	lsls	r3, r3, #2
 8005436:	4413      	add	r3, r2
 8005438:	881b      	ldrh	r3, [r3, #0]
 800543a:	827b      	strh	r3, [r7, #18]
 800543c:	8a7b      	ldrh	r3, [r7, #18]
 800543e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005442:	2b00      	cmp	r3, #0
 8005444:	d01b      	beq.n	800547e <USB_ActivateEndpoint+0x17a>
 8005446:	687a      	ldr	r2, [r7, #4]
 8005448:	683b      	ldr	r3, [r7, #0]
 800544a:	781b      	ldrb	r3, [r3, #0]
 800544c:	009b      	lsls	r3, r3, #2
 800544e:	4413      	add	r3, r2
 8005450:	881b      	ldrh	r3, [r3, #0]
 8005452:	b29b      	uxth	r3, r3
 8005454:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005458:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800545c:	823b      	strh	r3, [r7, #16]
 800545e:	687a      	ldr	r2, [r7, #4]
 8005460:	683b      	ldr	r3, [r7, #0]
 8005462:	781b      	ldrb	r3, [r3, #0]
 8005464:	009b      	lsls	r3, r3, #2
 8005466:	441a      	add	r2, r3
 8005468:	8a3b      	ldrh	r3, [r7, #16]
 800546a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800546e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005472:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005476:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800547a:	b29b      	uxth	r3, r3
 800547c:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800547e:	683b      	ldr	r3, [r7, #0]
 8005480:	78db      	ldrb	r3, [r3, #3]
 8005482:	2b01      	cmp	r3, #1
 8005484:	d020      	beq.n	80054c8 <USB_ActivateEndpoint+0x1c4>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8005486:	687a      	ldr	r2, [r7, #4]
 8005488:	683b      	ldr	r3, [r7, #0]
 800548a:	781b      	ldrb	r3, [r3, #0]
 800548c:	009b      	lsls	r3, r3, #2
 800548e:	4413      	add	r3, r2
 8005490:	881b      	ldrh	r3, [r3, #0]
 8005492:	b29b      	uxth	r3, r3
 8005494:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005498:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800549c:	81bb      	strh	r3, [r7, #12]
 800549e:	89bb      	ldrh	r3, [r7, #12]
 80054a0:	f083 0320 	eor.w	r3, r3, #32
 80054a4:	81bb      	strh	r3, [r7, #12]
 80054a6:	687a      	ldr	r2, [r7, #4]
 80054a8:	683b      	ldr	r3, [r7, #0]
 80054aa:	781b      	ldrb	r3, [r3, #0]
 80054ac:	009b      	lsls	r3, r3, #2
 80054ae:	441a      	add	r2, r3
 80054b0:	89bb      	ldrh	r3, [r7, #12]
 80054b2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80054b6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80054ba:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80054be:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80054c2:	b29b      	uxth	r3, r3
 80054c4:	8013      	strh	r3, [r2, #0]
 80054c6:	e2d5      	b.n	8005a74 <USB_ActivateEndpoint+0x770>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80054c8:	687a      	ldr	r2, [r7, #4]
 80054ca:	683b      	ldr	r3, [r7, #0]
 80054cc:	781b      	ldrb	r3, [r3, #0]
 80054ce:	009b      	lsls	r3, r3, #2
 80054d0:	4413      	add	r3, r2
 80054d2:	881b      	ldrh	r3, [r3, #0]
 80054d4:	b29b      	uxth	r3, r3
 80054d6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80054da:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80054de:	81fb      	strh	r3, [r7, #14]
 80054e0:	687a      	ldr	r2, [r7, #4]
 80054e2:	683b      	ldr	r3, [r7, #0]
 80054e4:	781b      	ldrb	r3, [r3, #0]
 80054e6:	009b      	lsls	r3, r3, #2
 80054e8:	441a      	add	r2, r3
 80054ea:	89fb      	ldrh	r3, [r7, #14]
 80054ec:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80054f0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80054f4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80054f8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80054fc:	b29b      	uxth	r3, r3
 80054fe:	8013      	strh	r3, [r2, #0]
 8005500:	e2b8      	b.n	8005a74 <USB_ActivateEndpoint+0x770>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	633b      	str	r3, [r7, #48]	@ 0x30
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800550c:	b29b      	uxth	r3, r3
 800550e:	461a      	mov	r2, r3
 8005510:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005512:	4413      	add	r3, r2
 8005514:	633b      	str	r3, [r7, #48]	@ 0x30
 8005516:	683b      	ldr	r3, [r7, #0]
 8005518:	781b      	ldrb	r3, [r3, #0]
 800551a:	011a      	lsls	r2, r3, #4
 800551c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800551e:	4413      	add	r3, r2
 8005520:	f503 6381 	add.w	r3, r3, #1032	@ 0x408
 8005524:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005526:	683b      	ldr	r3, [r7, #0]
 8005528:	88db      	ldrh	r3, [r3, #6]
 800552a:	085b      	lsrs	r3, r3, #1
 800552c:	b29b      	uxth	r3, r3
 800552e:	005b      	lsls	r3, r3, #1
 8005530:	b29a      	uxth	r2, r3
 8005532:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005534:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	62bb      	str	r3, [r7, #40]	@ 0x28
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005540:	b29b      	uxth	r3, r3
 8005542:	461a      	mov	r2, r3
 8005544:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005546:	4413      	add	r3, r2
 8005548:	62bb      	str	r3, [r7, #40]	@ 0x28
 800554a:	683b      	ldr	r3, [r7, #0]
 800554c:	781b      	ldrb	r3, [r3, #0]
 800554e:	011a      	lsls	r2, r3, #4
 8005550:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005552:	4413      	add	r3, r2
 8005554:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8005558:	627b      	str	r3, [r7, #36]	@ 0x24
 800555a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800555c:	881b      	ldrh	r3, [r3, #0]
 800555e:	b29b      	uxth	r3, r3
 8005560:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005564:	b29a      	uxth	r2, r3
 8005566:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005568:	801a      	strh	r2, [r3, #0]
 800556a:	683b      	ldr	r3, [r7, #0]
 800556c:	691b      	ldr	r3, [r3, #16]
 800556e:	2b3e      	cmp	r3, #62	@ 0x3e
 8005570:	d91d      	bls.n	80055ae <USB_ActivateEndpoint+0x2aa>
 8005572:	683b      	ldr	r3, [r7, #0]
 8005574:	691b      	ldr	r3, [r3, #16]
 8005576:	095b      	lsrs	r3, r3, #5
 8005578:	66bb      	str	r3, [r7, #104]	@ 0x68
 800557a:	683b      	ldr	r3, [r7, #0]
 800557c:	691b      	ldr	r3, [r3, #16]
 800557e:	f003 031f 	and.w	r3, r3, #31
 8005582:	2b00      	cmp	r3, #0
 8005584:	d102      	bne.n	800558c <USB_ActivateEndpoint+0x288>
 8005586:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005588:	3b01      	subs	r3, #1
 800558a:	66bb      	str	r3, [r7, #104]	@ 0x68
 800558c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800558e:	881b      	ldrh	r3, [r3, #0]
 8005590:	b29a      	uxth	r2, r3
 8005592:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005594:	b29b      	uxth	r3, r3
 8005596:	029b      	lsls	r3, r3, #10
 8005598:	b29b      	uxth	r3, r3
 800559a:	4313      	orrs	r3, r2
 800559c:	b29b      	uxth	r3, r3
 800559e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80055a2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80055a6:	b29a      	uxth	r2, r3
 80055a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80055aa:	801a      	strh	r2, [r3, #0]
 80055ac:	e026      	b.n	80055fc <USB_ActivateEndpoint+0x2f8>
 80055ae:	683b      	ldr	r3, [r7, #0]
 80055b0:	691b      	ldr	r3, [r3, #16]
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	d10a      	bne.n	80055cc <USB_ActivateEndpoint+0x2c8>
 80055b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80055b8:	881b      	ldrh	r3, [r3, #0]
 80055ba:	b29b      	uxth	r3, r3
 80055bc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80055c0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80055c4:	b29a      	uxth	r2, r3
 80055c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80055c8:	801a      	strh	r2, [r3, #0]
 80055ca:	e017      	b.n	80055fc <USB_ActivateEndpoint+0x2f8>
 80055cc:	683b      	ldr	r3, [r7, #0]
 80055ce:	691b      	ldr	r3, [r3, #16]
 80055d0:	085b      	lsrs	r3, r3, #1
 80055d2:	66bb      	str	r3, [r7, #104]	@ 0x68
 80055d4:	683b      	ldr	r3, [r7, #0]
 80055d6:	691b      	ldr	r3, [r3, #16]
 80055d8:	f003 0301 	and.w	r3, r3, #1
 80055dc:	2b00      	cmp	r3, #0
 80055de:	d002      	beq.n	80055e6 <USB_ActivateEndpoint+0x2e2>
 80055e0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80055e2:	3301      	adds	r3, #1
 80055e4:	66bb      	str	r3, [r7, #104]	@ 0x68
 80055e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80055e8:	881b      	ldrh	r3, [r3, #0]
 80055ea:	b29a      	uxth	r2, r3
 80055ec:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80055ee:	b29b      	uxth	r3, r3
 80055f0:	029b      	lsls	r3, r3, #10
 80055f2:	b29b      	uxth	r3, r3
 80055f4:	4313      	orrs	r3, r2
 80055f6:	b29a      	uxth	r2, r3
 80055f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80055fa:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80055fc:	687a      	ldr	r2, [r7, #4]
 80055fe:	683b      	ldr	r3, [r7, #0]
 8005600:	781b      	ldrb	r3, [r3, #0]
 8005602:	009b      	lsls	r3, r3, #2
 8005604:	4413      	add	r3, r2
 8005606:	881b      	ldrh	r3, [r3, #0]
 8005608:	847b      	strh	r3, [r7, #34]	@ 0x22
 800560a:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800560c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005610:	2b00      	cmp	r3, #0
 8005612:	d01b      	beq.n	800564c <USB_ActivateEndpoint+0x348>
 8005614:	687a      	ldr	r2, [r7, #4]
 8005616:	683b      	ldr	r3, [r7, #0]
 8005618:	781b      	ldrb	r3, [r3, #0]
 800561a:	009b      	lsls	r3, r3, #2
 800561c:	4413      	add	r3, r2
 800561e:	881b      	ldrh	r3, [r3, #0]
 8005620:	b29b      	uxth	r3, r3
 8005622:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005626:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800562a:	843b      	strh	r3, [r7, #32]
 800562c:	687a      	ldr	r2, [r7, #4]
 800562e:	683b      	ldr	r3, [r7, #0]
 8005630:	781b      	ldrb	r3, [r3, #0]
 8005632:	009b      	lsls	r3, r3, #2
 8005634:	441a      	add	r2, r3
 8005636:	8c3b      	ldrh	r3, [r7, #32]
 8005638:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800563c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005640:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8005644:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005648:	b29b      	uxth	r3, r3
 800564a:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 800564c:	683b      	ldr	r3, [r7, #0]
 800564e:	781b      	ldrb	r3, [r3, #0]
 8005650:	2b00      	cmp	r3, #0
 8005652:	d124      	bne.n	800569e <USB_ActivateEndpoint+0x39a>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8005654:	687a      	ldr	r2, [r7, #4]
 8005656:	683b      	ldr	r3, [r7, #0]
 8005658:	781b      	ldrb	r3, [r3, #0]
 800565a:	009b      	lsls	r3, r3, #2
 800565c:	4413      	add	r3, r2
 800565e:	881b      	ldrh	r3, [r3, #0]
 8005660:	b29b      	uxth	r3, r3
 8005662:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005666:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800566a:	83bb      	strh	r3, [r7, #28]
 800566c:	8bbb      	ldrh	r3, [r7, #28]
 800566e:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8005672:	83bb      	strh	r3, [r7, #28]
 8005674:	8bbb      	ldrh	r3, [r7, #28]
 8005676:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800567a:	83bb      	strh	r3, [r7, #28]
 800567c:	687a      	ldr	r2, [r7, #4]
 800567e:	683b      	ldr	r3, [r7, #0]
 8005680:	781b      	ldrb	r3, [r3, #0]
 8005682:	009b      	lsls	r3, r3, #2
 8005684:	441a      	add	r2, r3
 8005686:	8bbb      	ldrh	r3, [r7, #28]
 8005688:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800568c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005690:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005694:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005698:	b29b      	uxth	r3, r3
 800569a:	8013      	strh	r3, [r2, #0]
 800569c:	e1ea      	b.n	8005a74 <USB_ActivateEndpoint+0x770>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 800569e:	687a      	ldr	r2, [r7, #4]
 80056a0:	683b      	ldr	r3, [r7, #0]
 80056a2:	781b      	ldrb	r3, [r3, #0]
 80056a4:	009b      	lsls	r3, r3, #2
 80056a6:	4413      	add	r3, r2
 80056a8:	881b      	ldrh	r3, [r3, #0]
 80056aa:	b29b      	uxth	r3, r3
 80056ac:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80056b0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80056b4:	83fb      	strh	r3, [r7, #30]
 80056b6:	8bfb      	ldrh	r3, [r7, #30]
 80056b8:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 80056bc:	83fb      	strh	r3, [r7, #30]
 80056be:	687a      	ldr	r2, [r7, #4]
 80056c0:	683b      	ldr	r3, [r7, #0]
 80056c2:	781b      	ldrb	r3, [r3, #0]
 80056c4:	009b      	lsls	r3, r3, #2
 80056c6:	441a      	add	r2, r3
 80056c8:	8bfb      	ldrh	r3, [r7, #30]
 80056ca:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80056ce:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80056d2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80056d6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80056da:	b29b      	uxth	r3, r3
 80056dc:	8013      	strh	r3, [r2, #0]
 80056de:	e1c9      	b.n	8005a74 <USB_ActivateEndpoint+0x770>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 80056e0:	683b      	ldr	r3, [r7, #0]
 80056e2:	78db      	ldrb	r3, [r3, #3]
 80056e4:	2b02      	cmp	r3, #2
 80056e6:	d11e      	bne.n	8005726 <USB_ActivateEndpoint+0x422>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 80056e8:	687a      	ldr	r2, [r7, #4]
 80056ea:	683b      	ldr	r3, [r7, #0]
 80056ec:	781b      	ldrb	r3, [r3, #0]
 80056ee:	009b      	lsls	r3, r3, #2
 80056f0:	4413      	add	r3, r2
 80056f2:	881b      	ldrh	r3, [r3, #0]
 80056f4:	b29b      	uxth	r3, r3
 80056f6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80056fa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80056fe:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 8005702:	687a      	ldr	r2, [r7, #4]
 8005704:	683b      	ldr	r3, [r7, #0]
 8005706:	781b      	ldrb	r3, [r3, #0]
 8005708:	009b      	lsls	r3, r3, #2
 800570a:	441a      	add	r2, r3
 800570c:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 8005710:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005714:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005718:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 800571c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005720:	b29b      	uxth	r3, r3
 8005722:	8013      	strh	r3, [r2, #0]
 8005724:	e01d      	b.n	8005762 <USB_ActivateEndpoint+0x45e>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 8005726:	687a      	ldr	r2, [r7, #4]
 8005728:	683b      	ldr	r3, [r7, #0]
 800572a:	781b      	ldrb	r3, [r3, #0]
 800572c:	009b      	lsls	r3, r3, #2
 800572e:	4413      	add	r3, r2
 8005730:	881b      	ldrh	r3, [r3, #0]
 8005732:	b29b      	uxth	r3, r3
 8005734:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 8005738:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800573c:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64
 8005740:	687a      	ldr	r2, [r7, #4]
 8005742:	683b      	ldr	r3, [r7, #0]
 8005744:	781b      	ldrb	r3, [r3, #0]
 8005746:	009b      	lsls	r3, r3, #2
 8005748:	441a      	add	r2, r3
 800574a:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 800574e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005752:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005756:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800575a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800575e:	b29b      	uxth	r3, r3
 8005760:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800576c:	b29b      	uxth	r3, r3
 800576e:	461a      	mov	r2, r3
 8005770:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005772:	4413      	add	r3, r2
 8005774:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005776:	683b      	ldr	r3, [r7, #0]
 8005778:	781b      	ldrb	r3, [r3, #0]
 800577a:	011a      	lsls	r2, r3, #4
 800577c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800577e:	4413      	add	r3, r2
 8005780:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005784:	65bb      	str	r3, [r7, #88]	@ 0x58
 8005786:	683b      	ldr	r3, [r7, #0]
 8005788:	891b      	ldrh	r3, [r3, #8]
 800578a:	085b      	lsrs	r3, r3, #1
 800578c:	b29b      	uxth	r3, r3
 800578e:	005b      	lsls	r3, r3, #1
 8005790:	b29a      	uxth	r2, r3
 8005792:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005794:	801a      	strh	r2, [r3, #0]
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	657b      	str	r3, [r7, #84]	@ 0x54
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80057a0:	b29b      	uxth	r3, r3
 80057a2:	461a      	mov	r2, r3
 80057a4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80057a6:	4413      	add	r3, r2
 80057a8:	657b      	str	r3, [r7, #84]	@ 0x54
 80057aa:	683b      	ldr	r3, [r7, #0]
 80057ac:	781b      	ldrb	r3, [r3, #0]
 80057ae:	011a      	lsls	r2, r3, #4
 80057b0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80057b2:	4413      	add	r3, r2
 80057b4:	f503 6381 	add.w	r3, r3, #1032	@ 0x408
 80057b8:	653b      	str	r3, [r7, #80]	@ 0x50
 80057ba:	683b      	ldr	r3, [r7, #0]
 80057bc:	895b      	ldrh	r3, [r3, #10]
 80057be:	085b      	lsrs	r3, r3, #1
 80057c0:	b29b      	uxth	r3, r3
 80057c2:	005b      	lsls	r3, r3, #1
 80057c4:	b29a      	uxth	r2, r3
 80057c6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80057c8:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 80057ca:	683b      	ldr	r3, [r7, #0]
 80057cc:	785b      	ldrb	r3, [r3, #1]
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	f040 8093 	bne.w	80058fa <USB_ActivateEndpoint+0x5f6>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80057d4:	687a      	ldr	r2, [r7, #4]
 80057d6:	683b      	ldr	r3, [r7, #0]
 80057d8:	781b      	ldrb	r3, [r3, #0]
 80057da:	009b      	lsls	r3, r3, #2
 80057dc:	4413      	add	r3, r2
 80057de:	881b      	ldrh	r3, [r3, #0]
 80057e0:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
 80057e4:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 80057e8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80057ec:	2b00      	cmp	r3, #0
 80057ee:	d01b      	beq.n	8005828 <USB_ActivateEndpoint+0x524>
 80057f0:	687a      	ldr	r2, [r7, #4]
 80057f2:	683b      	ldr	r3, [r7, #0]
 80057f4:	781b      	ldrb	r3, [r3, #0]
 80057f6:	009b      	lsls	r3, r3, #2
 80057f8:	4413      	add	r3, r2
 80057fa:	881b      	ldrh	r3, [r3, #0]
 80057fc:	b29b      	uxth	r3, r3
 80057fe:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005802:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005806:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 8005808:	687a      	ldr	r2, [r7, #4]
 800580a:	683b      	ldr	r3, [r7, #0]
 800580c:	781b      	ldrb	r3, [r3, #0]
 800580e:	009b      	lsls	r3, r3, #2
 8005810:	441a      	add	r2, r3
 8005812:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8005814:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005818:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800581c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8005820:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005824:	b29b      	uxth	r3, r3
 8005826:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005828:	687a      	ldr	r2, [r7, #4]
 800582a:	683b      	ldr	r3, [r7, #0]
 800582c:	781b      	ldrb	r3, [r3, #0]
 800582e:	009b      	lsls	r3, r3, #2
 8005830:	4413      	add	r3, r2
 8005832:	881b      	ldrh	r3, [r3, #0]
 8005834:	87bb      	strh	r3, [r7, #60]	@ 0x3c
 8005836:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8005838:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800583c:	2b00      	cmp	r3, #0
 800583e:	d01b      	beq.n	8005878 <USB_ActivateEndpoint+0x574>
 8005840:	687a      	ldr	r2, [r7, #4]
 8005842:	683b      	ldr	r3, [r7, #0]
 8005844:	781b      	ldrb	r3, [r3, #0]
 8005846:	009b      	lsls	r3, r3, #2
 8005848:	4413      	add	r3, r2
 800584a:	881b      	ldrh	r3, [r3, #0]
 800584c:	b29b      	uxth	r3, r3
 800584e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005852:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005856:	877b      	strh	r3, [r7, #58]	@ 0x3a
 8005858:	687a      	ldr	r2, [r7, #4]
 800585a:	683b      	ldr	r3, [r7, #0]
 800585c:	781b      	ldrb	r3, [r3, #0]
 800585e:	009b      	lsls	r3, r3, #2
 8005860:	441a      	add	r2, r3
 8005862:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8005864:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005868:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800586c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005870:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8005874:	b29b      	uxth	r3, r3
 8005876:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8005878:	687a      	ldr	r2, [r7, #4]
 800587a:	683b      	ldr	r3, [r7, #0]
 800587c:	781b      	ldrb	r3, [r3, #0]
 800587e:	009b      	lsls	r3, r3, #2
 8005880:	4413      	add	r3, r2
 8005882:	881b      	ldrh	r3, [r3, #0]
 8005884:	b29b      	uxth	r3, r3
 8005886:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800588a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800588e:	873b      	strh	r3, [r7, #56]	@ 0x38
 8005890:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8005892:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8005896:	873b      	strh	r3, [r7, #56]	@ 0x38
 8005898:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 800589a:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800589e:	873b      	strh	r3, [r7, #56]	@ 0x38
 80058a0:	687a      	ldr	r2, [r7, #4]
 80058a2:	683b      	ldr	r3, [r7, #0]
 80058a4:	781b      	ldrb	r3, [r3, #0]
 80058a6:	009b      	lsls	r3, r3, #2
 80058a8:	441a      	add	r2, r3
 80058aa:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 80058ac:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80058b0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80058b4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80058b8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80058bc:	b29b      	uxth	r3, r3
 80058be:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80058c0:	687a      	ldr	r2, [r7, #4]
 80058c2:	683b      	ldr	r3, [r7, #0]
 80058c4:	781b      	ldrb	r3, [r3, #0]
 80058c6:	009b      	lsls	r3, r3, #2
 80058c8:	4413      	add	r3, r2
 80058ca:	881b      	ldrh	r3, [r3, #0]
 80058cc:	b29b      	uxth	r3, r3
 80058ce:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80058d2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80058d6:	86fb      	strh	r3, [r7, #54]	@ 0x36
 80058d8:	687a      	ldr	r2, [r7, #4]
 80058da:	683b      	ldr	r3, [r7, #0]
 80058dc:	781b      	ldrb	r3, [r3, #0]
 80058de:	009b      	lsls	r3, r3, #2
 80058e0:	441a      	add	r2, r3
 80058e2:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80058e4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80058e8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80058ec:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80058f0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80058f4:	b29b      	uxth	r3, r3
 80058f6:	8013      	strh	r3, [r2, #0]
 80058f8:	e0bc      	b.n	8005a74 <USB_ActivateEndpoint+0x770>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80058fa:	687a      	ldr	r2, [r7, #4]
 80058fc:	683b      	ldr	r3, [r7, #0]
 80058fe:	781b      	ldrb	r3, [r3, #0]
 8005900:	009b      	lsls	r3, r3, #2
 8005902:	4413      	add	r3, r2
 8005904:	881b      	ldrh	r3, [r3, #0]
 8005906:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 800590a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 800590e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005912:	2b00      	cmp	r3, #0
 8005914:	d01d      	beq.n	8005952 <USB_ActivateEndpoint+0x64e>
 8005916:	687a      	ldr	r2, [r7, #4]
 8005918:	683b      	ldr	r3, [r7, #0]
 800591a:	781b      	ldrb	r3, [r3, #0]
 800591c:	009b      	lsls	r3, r3, #2
 800591e:	4413      	add	r3, r2
 8005920:	881b      	ldrh	r3, [r3, #0]
 8005922:	b29b      	uxth	r3, r3
 8005924:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005928:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800592c:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c
 8005930:	687a      	ldr	r2, [r7, #4]
 8005932:	683b      	ldr	r3, [r7, #0]
 8005934:	781b      	ldrb	r3, [r3, #0]
 8005936:	009b      	lsls	r3, r3, #2
 8005938:	441a      	add	r2, r3
 800593a:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 800593e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005942:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005946:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800594a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800594e:	b29b      	uxth	r3, r3
 8005950:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005952:	687a      	ldr	r2, [r7, #4]
 8005954:	683b      	ldr	r3, [r7, #0]
 8005956:	781b      	ldrb	r3, [r3, #0]
 8005958:	009b      	lsls	r3, r3, #2
 800595a:	4413      	add	r3, r2
 800595c:	881b      	ldrh	r3, [r3, #0]
 800595e:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a
 8005962:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8005966:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800596a:	2b00      	cmp	r3, #0
 800596c:	d01d      	beq.n	80059aa <USB_ActivateEndpoint+0x6a6>
 800596e:	687a      	ldr	r2, [r7, #4]
 8005970:	683b      	ldr	r3, [r7, #0]
 8005972:	781b      	ldrb	r3, [r3, #0]
 8005974:	009b      	lsls	r3, r3, #2
 8005976:	4413      	add	r3, r2
 8005978:	881b      	ldrh	r3, [r3, #0]
 800597a:	b29b      	uxth	r3, r3
 800597c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005980:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005984:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
 8005988:	687a      	ldr	r2, [r7, #4]
 800598a:	683b      	ldr	r3, [r7, #0]
 800598c:	781b      	ldrb	r3, [r3, #0]
 800598e:	009b      	lsls	r3, r3, #2
 8005990:	441a      	add	r2, r3
 8005992:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 8005996:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800599a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800599e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80059a2:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80059a6:	b29b      	uxth	r3, r3
 80059a8:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80059aa:	683b      	ldr	r3, [r7, #0]
 80059ac:	78db      	ldrb	r3, [r3, #3]
 80059ae:	2b01      	cmp	r3, #1
 80059b0:	d024      	beq.n	80059fc <USB_ActivateEndpoint+0x6f8>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80059b2:	687a      	ldr	r2, [r7, #4]
 80059b4:	683b      	ldr	r3, [r7, #0]
 80059b6:	781b      	ldrb	r3, [r3, #0]
 80059b8:	009b      	lsls	r3, r3, #2
 80059ba:	4413      	add	r3, r2
 80059bc:	881b      	ldrh	r3, [r3, #0]
 80059be:	b29b      	uxth	r3, r3
 80059c0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80059c4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80059c8:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
 80059cc:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 80059d0:	f083 0320 	eor.w	r3, r3, #32
 80059d4:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
 80059d8:	687a      	ldr	r2, [r7, #4]
 80059da:	683b      	ldr	r3, [r7, #0]
 80059dc:	781b      	ldrb	r3, [r3, #0]
 80059de:	009b      	lsls	r3, r3, #2
 80059e0:	441a      	add	r2, r3
 80059e2:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 80059e6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80059ea:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80059ee:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80059f2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80059f6:	b29b      	uxth	r3, r3
 80059f8:	8013      	strh	r3, [r2, #0]
 80059fa:	e01d      	b.n	8005a38 <USB_ActivateEndpoint+0x734>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80059fc:	687a      	ldr	r2, [r7, #4]
 80059fe:	683b      	ldr	r3, [r7, #0]
 8005a00:	781b      	ldrb	r3, [r3, #0]
 8005a02:	009b      	lsls	r3, r3, #2
 8005a04:	4413      	add	r3, r2
 8005a06:	881b      	ldrh	r3, [r3, #0]
 8005a08:	b29b      	uxth	r3, r3
 8005a0a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005a0e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005a12:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
 8005a16:	687a      	ldr	r2, [r7, #4]
 8005a18:	683b      	ldr	r3, [r7, #0]
 8005a1a:	781b      	ldrb	r3, [r3, #0]
 8005a1c:	009b      	lsls	r3, r3, #2
 8005a1e:	441a      	add	r2, r3
 8005a20:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8005a24:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005a28:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005a2c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005a30:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005a34:	b29b      	uxth	r3, r3
 8005a36:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005a38:	687a      	ldr	r2, [r7, #4]
 8005a3a:	683b      	ldr	r3, [r7, #0]
 8005a3c:	781b      	ldrb	r3, [r3, #0]
 8005a3e:	009b      	lsls	r3, r3, #2
 8005a40:	4413      	add	r3, r2
 8005a42:	881b      	ldrh	r3, [r3, #0]
 8005a44:	b29b      	uxth	r3, r3
 8005a46:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005a4a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005a4e:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 8005a52:	687a      	ldr	r2, [r7, #4]
 8005a54:	683b      	ldr	r3, [r7, #0]
 8005a56:	781b      	ldrb	r3, [r3, #0]
 8005a58:	009b      	lsls	r3, r3, #2
 8005a5a:	441a      	add	r2, r3
 8005a5c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8005a60:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005a64:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005a68:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005a6c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005a70:	b29b      	uxth	r3, r3
 8005a72:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 8005a74:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
}
 8005a78:	4618      	mov	r0, r3
 8005a7a:	3774      	adds	r7, #116	@ 0x74
 8005a7c:	46bd      	mov	sp, r7
 8005a7e:	bc80      	pop	{r7}
 8005a80:	4770      	bx	lr
 8005a82:	bf00      	nop

08005a84 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005a84:	b480      	push	{r7}
 8005a86:	b08d      	sub	sp, #52	@ 0x34
 8005a88:	af00      	add	r7, sp, #0
 8005a8a:	6078      	str	r0, [r7, #4]
 8005a8c:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8005a8e:	683b      	ldr	r3, [r7, #0]
 8005a90:	7b1b      	ldrb	r3, [r3, #12]
 8005a92:	2b00      	cmp	r3, #0
 8005a94:	f040 808e 	bne.w	8005bb4 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8005a98:	683b      	ldr	r3, [r7, #0]
 8005a9a:	785b      	ldrb	r3, [r3, #1]
 8005a9c:	2b00      	cmp	r3, #0
 8005a9e:	d044      	beq.n	8005b2a <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005aa0:	687a      	ldr	r2, [r7, #4]
 8005aa2:	683b      	ldr	r3, [r7, #0]
 8005aa4:	781b      	ldrb	r3, [r3, #0]
 8005aa6:	009b      	lsls	r3, r3, #2
 8005aa8:	4413      	add	r3, r2
 8005aaa:	881b      	ldrh	r3, [r3, #0]
 8005aac:	81bb      	strh	r3, [r7, #12]
 8005aae:	89bb      	ldrh	r3, [r7, #12]
 8005ab0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005ab4:	2b00      	cmp	r3, #0
 8005ab6:	d01b      	beq.n	8005af0 <USB_DeactivateEndpoint+0x6c>
 8005ab8:	687a      	ldr	r2, [r7, #4]
 8005aba:	683b      	ldr	r3, [r7, #0]
 8005abc:	781b      	ldrb	r3, [r3, #0]
 8005abe:	009b      	lsls	r3, r3, #2
 8005ac0:	4413      	add	r3, r2
 8005ac2:	881b      	ldrh	r3, [r3, #0]
 8005ac4:	b29b      	uxth	r3, r3
 8005ac6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005aca:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005ace:	817b      	strh	r3, [r7, #10]
 8005ad0:	687a      	ldr	r2, [r7, #4]
 8005ad2:	683b      	ldr	r3, [r7, #0]
 8005ad4:	781b      	ldrb	r3, [r3, #0]
 8005ad6:	009b      	lsls	r3, r3, #2
 8005ad8:	441a      	add	r2, r3
 8005ada:	897b      	ldrh	r3, [r7, #10]
 8005adc:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005ae0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005ae4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005ae8:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8005aec:	b29b      	uxth	r3, r3
 8005aee:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005af0:	687a      	ldr	r2, [r7, #4]
 8005af2:	683b      	ldr	r3, [r7, #0]
 8005af4:	781b      	ldrb	r3, [r3, #0]
 8005af6:	009b      	lsls	r3, r3, #2
 8005af8:	4413      	add	r3, r2
 8005afa:	881b      	ldrh	r3, [r3, #0]
 8005afc:	b29b      	uxth	r3, r3
 8005afe:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005b02:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005b06:	813b      	strh	r3, [r7, #8]
 8005b08:	687a      	ldr	r2, [r7, #4]
 8005b0a:	683b      	ldr	r3, [r7, #0]
 8005b0c:	781b      	ldrb	r3, [r3, #0]
 8005b0e:	009b      	lsls	r3, r3, #2
 8005b10:	441a      	add	r2, r3
 8005b12:	893b      	ldrh	r3, [r7, #8]
 8005b14:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005b18:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005b1c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005b20:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005b24:	b29b      	uxth	r3, r3
 8005b26:	8013      	strh	r3, [r2, #0]
 8005b28:	e192      	b.n	8005e50 <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005b2a:	687a      	ldr	r2, [r7, #4]
 8005b2c:	683b      	ldr	r3, [r7, #0]
 8005b2e:	781b      	ldrb	r3, [r3, #0]
 8005b30:	009b      	lsls	r3, r3, #2
 8005b32:	4413      	add	r3, r2
 8005b34:	881b      	ldrh	r3, [r3, #0]
 8005b36:	827b      	strh	r3, [r7, #18]
 8005b38:	8a7b      	ldrh	r3, [r7, #18]
 8005b3a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005b3e:	2b00      	cmp	r3, #0
 8005b40:	d01b      	beq.n	8005b7a <USB_DeactivateEndpoint+0xf6>
 8005b42:	687a      	ldr	r2, [r7, #4]
 8005b44:	683b      	ldr	r3, [r7, #0]
 8005b46:	781b      	ldrb	r3, [r3, #0]
 8005b48:	009b      	lsls	r3, r3, #2
 8005b4a:	4413      	add	r3, r2
 8005b4c:	881b      	ldrh	r3, [r3, #0]
 8005b4e:	b29b      	uxth	r3, r3
 8005b50:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005b54:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005b58:	823b      	strh	r3, [r7, #16]
 8005b5a:	687a      	ldr	r2, [r7, #4]
 8005b5c:	683b      	ldr	r3, [r7, #0]
 8005b5e:	781b      	ldrb	r3, [r3, #0]
 8005b60:	009b      	lsls	r3, r3, #2
 8005b62:	441a      	add	r2, r3
 8005b64:	8a3b      	ldrh	r3, [r7, #16]
 8005b66:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005b6a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005b6e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8005b72:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005b76:	b29b      	uxth	r3, r3
 8005b78:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005b7a:	687a      	ldr	r2, [r7, #4]
 8005b7c:	683b      	ldr	r3, [r7, #0]
 8005b7e:	781b      	ldrb	r3, [r3, #0]
 8005b80:	009b      	lsls	r3, r3, #2
 8005b82:	4413      	add	r3, r2
 8005b84:	881b      	ldrh	r3, [r3, #0]
 8005b86:	b29b      	uxth	r3, r3
 8005b88:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005b8c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005b90:	81fb      	strh	r3, [r7, #14]
 8005b92:	687a      	ldr	r2, [r7, #4]
 8005b94:	683b      	ldr	r3, [r7, #0]
 8005b96:	781b      	ldrb	r3, [r3, #0]
 8005b98:	009b      	lsls	r3, r3, #2
 8005b9a:	441a      	add	r2, r3
 8005b9c:	89fb      	ldrh	r3, [r7, #14]
 8005b9e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005ba2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005ba6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005baa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005bae:	b29b      	uxth	r3, r3
 8005bb0:	8013      	strh	r3, [r2, #0]
 8005bb2:	e14d      	b.n	8005e50 <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 8005bb4:	683b      	ldr	r3, [r7, #0]
 8005bb6:	785b      	ldrb	r3, [r3, #1]
 8005bb8:	2b00      	cmp	r3, #0
 8005bba:	f040 80a5 	bne.w	8005d08 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005bbe:	687a      	ldr	r2, [r7, #4]
 8005bc0:	683b      	ldr	r3, [r7, #0]
 8005bc2:	781b      	ldrb	r3, [r3, #0]
 8005bc4:	009b      	lsls	r3, r3, #2
 8005bc6:	4413      	add	r3, r2
 8005bc8:	881b      	ldrh	r3, [r3, #0]
 8005bca:	843b      	strh	r3, [r7, #32]
 8005bcc:	8c3b      	ldrh	r3, [r7, #32]
 8005bce:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005bd2:	2b00      	cmp	r3, #0
 8005bd4:	d01b      	beq.n	8005c0e <USB_DeactivateEndpoint+0x18a>
 8005bd6:	687a      	ldr	r2, [r7, #4]
 8005bd8:	683b      	ldr	r3, [r7, #0]
 8005bda:	781b      	ldrb	r3, [r3, #0]
 8005bdc:	009b      	lsls	r3, r3, #2
 8005bde:	4413      	add	r3, r2
 8005be0:	881b      	ldrh	r3, [r3, #0]
 8005be2:	b29b      	uxth	r3, r3
 8005be4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005be8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005bec:	83fb      	strh	r3, [r7, #30]
 8005bee:	687a      	ldr	r2, [r7, #4]
 8005bf0:	683b      	ldr	r3, [r7, #0]
 8005bf2:	781b      	ldrb	r3, [r3, #0]
 8005bf4:	009b      	lsls	r3, r3, #2
 8005bf6:	441a      	add	r2, r3
 8005bf8:	8bfb      	ldrh	r3, [r7, #30]
 8005bfa:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005bfe:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005c02:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8005c06:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005c0a:	b29b      	uxth	r3, r3
 8005c0c:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005c0e:	687a      	ldr	r2, [r7, #4]
 8005c10:	683b      	ldr	r3, [r7, #0]
 8005c12:	781b      	ldrb	r3, [r3, #0]
 8005c14:	009b      	lsls	r3, r3, #2
 8005c16:	4413      	add	r3, r2
 8005c18:	881b      	ldrh	r3, [r3, #0]
 8005c1a:	83bb      	strh	r3, [r7, #28]
 8005c1c:	8bbb      	ldrh	r3, [r7, #28]
 8005c1e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005c22:	2b00      	cmp	r3, #0
 8005c24:	d01b      	beq.n	8005c5e <USB_DeactivateEndpoint+0x1da>
 8005c26:	687a      	ldr	r2, [r7, #4]
 8005c28:	683b      	ldr	r3, [r7, #0]
 8005c2a:	781b      	ldrb	r3, [r3, #0]
 8005c2c:	009b      	lsls	r3, r3, #2
 8005c2e:	4413      	add	r3, r2
 8005c30:	881b      	ldrh	r3, [r3, #0]
 8005c32:	b29b      	uxth	r3, r3
 8005c34:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005c38:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005c3c:	837b      	strh	r3, [r7, #26]
 8005c3e:	687a      	ldr	r2, [r7, #4]
 8005c40:	683b      	ldr	r3, [r7, #0]
 8005c42:	781b      	ldrb	r3, [r3, #0]
 8005c44:	009b      	lsls	r3, r3, #2
 8005c46:	441a      	add	r2, r3
 8005c48:	8b7b      	ldrh	r3, [r7, #26]
 8005c4a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005c4e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005c52:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005c56:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8005c5a:	b29b      	uxth	r3, r3
 8005c5c:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8005c5e:	687a      	ldr	r2, [r7, #4]
 8005c60:	683b      	ldr	r3, [r7, #0]
 8005c62:	781b      	ldrb	r3, [r3, #0]
 8005c64:	009b      	lsls	r3, r3, #2
 8005c66:	4413      	add	r3, r2
 8005c68:	881b      	ldrh	r3, [r3, #0]
 8005c6a:	b29b      	uxth	r3, r3
 8005c6c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005c70:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005c74:	833b      	strh	r3, [r7, #24]
 8005c76:	687a      	ldr	r2, [r7, #4]
 8005c78:	683b      	ldr	r3, [r7, #0]
 8005c7a:	781b      	ldrb	r3, [r3, #0]
 8005c7c:	009b      	lsls	r3, r3, #2
 8005c7e:	441a      	add	r2, r3
 8005c80:	8b3b      	ldrh	r3, [r7, #24]
 8005c82:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005c86:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005c8a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005c8e:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8005c92:	b29b      	uxth	r3, r3
 8005c94:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005c96:	687a      	ldr	r2, [r7, #4]
 8005c98:	683b      	ldr	r3, [r7, #0]
 8005c9a:	781b      	ldrb	r3, [r3, #0]
 8005c9c:	009b      	lsls	r3, r3, #2
 8005c9e:	4413      	add	r3, r2
 8005ca0:	881b      	ldrh	r3, [r3, #0]
 8005ca2:	b29b      	uxth	r3, r3
 8005ca4:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005ca8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005cac:	82fb      	strh	r3, [r7, #22]
 8005cae:	687a      	ldr	r2, [r7, #4]
 8005cb0:	683b      	ldr	r3, [r7, #0]
 8005cb2:	781b      	ldrb	r3, [r3, #0]
 8005cb4:	009b      	lsls	r3, r3, #2
 8005cb6:	441a      	add	r2, r3
 8005cb8:	8afb      	ldrh	r3, [r7, #22]
 8005cba:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005cbe:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005cc2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005cc6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005cca:	b29b      	uxth	r3, r3
 8005ccc:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005cce:	687a      	ldr	r2, [r7, #4]
 8005cd0:	683b      	ldr	r3, [r7, #0]
 8005cd2:	781b      	ldrb	r3, [r3, #0]
 8005cd4:	009b      	lsls	r3, r3, #2
 8005cd6:	4413      	add	r3, r2
 8005cd8:	881b      	ldrh	r3, [r3, #0]
 8005cda:	b29b      	uxth	r3, r3
 8005cdc:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005ce0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005ce4:	82bb      	strh	r3, [r7, #20]
 8005ce6:	687a      	ldr	r2, [r7, #4]
 8005ce8:	683b      	ldr	r3, [r7, #0]
 8005cea:	781b      	ldrb	r3, [r3, #0]
 8005cec:	009b      	lsls	r3, r3, #2
 8005cee:	441a      	add	r2, r3
 8005cf0:	8abb      	ldrh	r3, [r7, #20]
 8005cf2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005cf6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005cfa:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005cfe:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005d02:	b29b      	uxth	r3, r3
 8005d04:	8013      	strh	r3, [r2, #0]
 8005d06:	e0a3      	b.n	8005e50 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005d08:	687a      	ldr	r2, [r7, #4]
 8005d0a:	683b      	ldr	r3, [r7, #0]
 8005d0c:	781b      	ldrb	r3, [r3, #0]
 8005d0e:	009b      	lsls	r3, r3, #2
 8005d10:	4413      	add	r3, r2
 8005d12:	881b      	ldrh	r3, [r3, #0]
 8005d14:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 8005d16:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8005d18:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005d1c:	2b00      	cmp	r3, #0
 8005d1e:	d01b      	beq.n	8005d58 <USB_DeactivateEndpoint+0x2d4>
 8005d20:	687a      	ldr	r2, [r7, #4]
 8005d22:	683b      	ldr	r3, [r7, #0]
 8005d24:	781b      	ldrb	r3, [r3, #0]
 8005d26:	009b      	lsls	r3, r3, #2
 8005d28:	4413      	add	r3, r2
 8005d2a:	881b      	ldrh	r3, [r3, #0]
 8005d2c:	b29b      	uxth	r3, r3
 8005d2e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005d32:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005d36:	85bb      	strh	r3, [r7, #44]	@ 0x2c
 8005d38:	687a      	ldr	r2, [r7, #4]
 8005d3a:	683b      	ldr	r3, [r7, #0]
 8005d3c:	781b      	ldrb	r3, [r3, #0]
 8005d3e:	009b      	lsls	r3, r3, #2
 8005d40:	441a      	add	r2, r3
 8005d42:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8005d44:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005d48:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005d4c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8005d50:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005d54:	b29b      	uxth	r3, r3
 8005d56:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005d58:	687a      	ldr	r2, [r7, #4]
 8005d5a:	683b      	ldr	r3, [r7, #0]
 8005d5c:	781b      	ldrb	r3, [r3, #0]
 8005d5e:	009b      	lsls	r3, r3, #2
 8005d60:	4413      	add	r3, r2
 8005d62:	881b      	ldrh	r3, [r3, #0]
 8005d64:	857b      	strh	r3, [r7, #42]	@ 0x2a
 8005d66:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8005d68:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005d6c:	2b00      	cmp	r3, #0
 8005d6e:	d01b      	beq.n	8005da8 <USB_DeactivateEndpoint+0x324>
 8005d70:	687a      	ldr	r2, [r7, #4]
 8005d72:	683b      	ldr	r3, [r7, #0]
 8005d74:	781b      	ldrb	r3, [r3, #0]
 8005d76:	009b      	lsls	r3, r3, #2
 8005d78:	4413      	add	r3, r2
 8005d7a:	881b      	ldrh	r3, [r3, #0]
 8005d7c:	b29b      	uxth	r3, r3
 8005d7e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005d82:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005d86:	853b      	strh	r3, [r7, #40]	@ 0x28
 8005d88:	687a      	ldr	r2, [r7, #4]
 8005d8a:	683b      	ldr	r3, [r7, #0]
 8005d8c:	781b      	ldrb	r3, [r3, #0]
 8005d8e:	009b      	lsls	r3, r3, #2
 8005d90:	441a      	add	r2, r3
 8005d92:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8005d94:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005d98:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005d9c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005da0:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8005da4:	b29b      	uxth	r3, r3
 8005da6:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8005da8:	687a      	ldr	r2, [r7, #4]
 8005daa:	683b      	ldr	r3, [r7, #0]
 8005dac:	781b      	ldrb	r3, [r3, #0]
 8005dae:	009b      	lsls	r3, r3, #2
 8005db0:	4413      	add	r3, r2
 8005db2:	881b      	ldrh	r3, [r3, #0]
 8005db4:	b29b      	uxth	r3, r3
 8005db6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005dba:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005dbe:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8005dc0:	687a      	ldr	r2, [r7, #4]
 8005dc2:	683b      	ldr	r3, [r7, #0]
 8005dc4:	781b      	ldrb	r3, [r3, #0]
 8005dc6:	009b      	lsls	r3, r3, #2
 8005dc8:	441a      	add	r2, r3
 8005dca:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8005dcc:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005dd0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005dd4:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8005dd8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005ddc:	b29b      	uxth	r3, r3
 8005dde:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005de0:	687a      	ldr	r2, [r7, #4]
 8005de2:	683b      	ldr	r3, [r7, #0]
 8005de4:	781b      	ldrb	r3, [r3, #0]
 8005de6:	009b      	lsls	r3, r3, #2
 8005de8:	4413      	add	r3, r2
 8005dea:	881b      	ldrh	r3, [r3, #0]
 8005dec:	b29b      	uxth	r3, r3
 8005dee:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005df2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005df6:	84bb      	strh	r3, [r7, #36]	@ 0x24
 8005df8:	687a      	ldr	r2, [r7, #4]
 8005dfa:	683b      	ldr	r3, [r7, #0]
 8005dfc:	781b      	ldrb	r3, [r3, #0]
 8005dfe:	009b      	lsls	r3, r3, #2
 8005e00:	441a      	add	r2, r3
 8005e02:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8005e04:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005e08:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005e0c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005e10:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005e14:	b29b      	uxth	r3, r3
 8005e16:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005e18:	687a      	ldr	r2, [r7, #4]
 8005e1a:	683b      	ldr	r3, [r7, #0]
 8005e1c:	781b      	ldrb	r3, [r3, #0]
 8005e1e:	009b      	lsls	r3, r3, #2
 8005e20:	4413      	add	r3, r2
 8005e22:	881b      	ldrh	r3, [r3, #0]
 8005e24:	b29b      	uxth	r3, r3
 8005e26:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005e2a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005e2e:	847b      	strh	r3, [r7, #34]	@ 0x22
 8005e30:	687a      	ldr	r2, [r7, #4]
 8005e32:	683b      	ldr	r3, [r7, #0]
 8005e34:	781b      	ldrb	r3, [r3, #0]
 8005e36:	009b      	lsls	r3, r3, #2
 8005e38:	441a      	add	r2, r3
 8005e3a:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8005e3c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005e40:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005e44:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005e48:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005e4c:	b29b      	uxth	r3, r3
 8005e4e:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8005e50:	2300      	movs	r3, #0
}
 8005e52:	4618      	mov	r0, r3
 8005e54:	3734      	adds	r7, #52	@ 0x34
 8005e56:	46bd      	mov	sp, r7
 8005e58:	bc80      	pop	{r7}
 8005e5a:	4770      	bx	lr

08005e5c <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005e5c:	b580      	push	{r7, lr}
 8005e5e:	b0c2      	sub	sp, #264	@ 0x108
 8005e60:	af00      	add	r7, sp, #0
 8005e62:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005e66:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005e6a:	6018      	str	r0, [r3, #0]
 8005e6c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005e70:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005e74:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005e76:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005e7a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	785b      	ldrb	r3, [r3, #1]
 8005e82:	2b01      	cmp	r3, #1
 8005e84:	f040 86b7 	bne.w	8006bf6 <USB_EPStartXfer+0xd9a>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8005e88:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005e8c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	699a      	ldr	r2, [r3, #24]
 8005e94:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005e98:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	691b      	ldr	r3, [r3, #16]
 8005ea0:	429a      	cmp	r2, r3
 8005ea2:	d908      	bls.n	8005eb6 <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 8005ea4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005ea8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	691b      	ldr	r3, [r3, #16]
 8005eb0:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8005eb4:	e007      	b.n	8005ec6 <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 8005eb6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005eba:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	699b      	ldr	r3, [r3, #24]
 8005ec2:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8005ec6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005eca:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	7b1b      	ldrb	r3, [r3, #12]
 8005ed2:	2b00      	cmp	r3, #0
 8005ed4:	d13a      	bne.n	8005f4c <USB_EPStartXfer+0xf0>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8005ed6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005eda:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	6959      	ldr	r1, [r3, #20]
 8005ee2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005ee6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	88da      	ldrh	r2, [r3, #6]
 8005eee:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005ef2:	b29b      	uxth	r3, r3
 8005ef4:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8005ef8:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8005efc:	6800      	ldr	r0, [r0, #0]
 8005efe:	f001 fc9c 	bl	800783a <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8005f02:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005f06:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	613b      	str	r3, [r7, #16]
 8005f0e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005f12:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005f1c:	b29b      	uxth	r3, r3
 8005f1e:	461a      	mov	r2, r3
 8005f20:	693b      	ldr	r3, [r7, #16]
 8005f22:	4413      	add	r3, r2
 8005f24:	613b      	str	r3, [r7, #16]
 8005f26:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005f2a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	781b      	ldrb	r3, [r3, #0]
 8005f32:	011a      	lsls	r2, r3, #4
 8005f34:	693b      	ldr	r3, [r7, #16]
 8005f36:	4413      	add	r3, r2
 8005f38:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8005f3c:	60fb      	str	r3, [r7, #12]
 8005f3e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005f42:	b29a      	uxth	r2, r3
 8005f44:	68fb      	ldr	r3, [r7, #12]
 8005f46:	801a      	strh	r2, [r3, #0]
 8005f48:	f000 be1f 	b.w	8006b8a <USB_EPStartXfer+0xd2e>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8005f4c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005f50:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	78db      	ldrb	r3, [r3, #3]
 8005f58:	2b02      	cmp	r3, #2
 8005f5a:	f040 8462 	bne.w	8006822 <USB_EPStartXfer+0x9c6>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8005f5e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005f62:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	6a1a      	ldr	r2, [r3, #32]
 8005f6a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005f6e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	691b      	ldr	r3, [r3, #16]
 8005f76:	429a      	cmp	r2, r3
 8005f78:	f240 83df 	bls.w	800673a <USB_EPStartXfer+0x8de>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8005f7c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005f80:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005f84:	681a      	ldr	r2, [r3, #0]
 8005f86:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005f8a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	781b      	ldrb	r3, [r3, #0]
 8005f92:	009b      	lsls	r3, r3, #2
 8005f94:	4413      	add	r3, r2
 8005f96:	881b      	ldrh	r3, [r3, #0]
 8005f98:	b29b      	uxth	r3, r3
 8005f9a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005f9e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005fa2:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
 8005fa6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005faa:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005fae:	681a      	ldr	r2, [r3, #0]
 8005fb0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005fb4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	781b      	ldrb	r3, [r3, #0]
 8005fbc:	009b      	lsls	r3, r3, #2
 8005fbe:	441a      	add	r2, r3
 8005fc0:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 8005fc4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005fc8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005fcc:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 8005fd0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005fd4:	b29b      	uxth	r3, r3
 8005fd6:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8005fd8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005fdc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	6a1a      	ldr	r2, [r3, #32]
 8005fe4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005fe8:	1ad2      	subs	r2, r2, r3
 8005fea:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005fee:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8005ff6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005ffa:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005ffe:	681a      	ldr	r2, [r3, #0]
 8006000:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006004:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	781b      	ldrb	r3, [r3, #0]
 800600c:	009b      	lsls	r3, r3, #2
 800600e:	4413      	add	r3, r2
 8006010:	881b      	ldrh	r3, [r3, #0]
 8006012:	b29b      	uxth	r3, r3
 8006014:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006018:	2b00      	cmp	r3, #0
 800601a:	f000 81c7 	beq.w	80063ac <USB_EPStartXfer+0x550>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800601e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006022:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	633b      	str	r3, [r7, #48]	@ 0x30
 800602a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800602e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	785b      	ldrb	r3, [r3, #1]
 8006036:	2b00      	cmp	r3, #0
 8006038:	d177      	bne.n	800612a <USB_EPStartXfer+0x2ce>
 800603a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800603e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006046:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800604a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006054:	b29b      	uxth	r3, r3
 8006056:	461a      	mov	r2, r3
 8006058:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800605a:	4413      	add	r3, r2
 800605c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800605e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006062:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	781b      	ldrb	r3, [r3, #0]
 800606a:	011a      	lsls	r2, r3, #4
 800606c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800606e:	4413      	add	r3, r2
 8006070:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8006074:	627b      	str	r3, [r7, #36]	@ 0x24
 8006076:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006078:	881b      	ldrh	r3, [r3, #0]
 800607a:	b29b      	uxth	r3, r3
 800607c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006080:	b29a      	uxth	r2, r3
 8006082:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006084:	801a      	strh	r2, [r3, #0]
 8006086:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800608a:	2b3e      	cmp	r3, #62	@ 0x3e
 800608c:	d921      	bls.n	80060d2 <USB_EPStartXfer+0x276>
 800608e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006092:	095b      	lsrs	r3, r3, #5
 8006094:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8006098:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800609c:	f003 031f 	and.w	r3, r3, #31
 80060a0:	2b00      	cmp	r3, #0
 80060a2:	d104      	bne.n	80060ae <USB_EPStartXfer+0x252>
 80060a4:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 80060a8:	3b01      	subs	r3, #1
 80060aa:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 80060ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80060b0:	881b      	ldrh	r3, [r3, #0]
 80060b2:	b29a      	uxth	r2, r3
 80060b4:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 80060b8:	b29b      	uxth	r3, r3
 80060ba:	029b      	lsls	r3, r3, #10
 80060bc:	b29b      	uxth	r3, r3
 80060be:	4313      	orrs	r3, r2
 80060c0:	b29b      	uxth	r3, r3
 80060c2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80060c6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80060ca:	b29a      	uxth	r2, r3
 80060cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80060ce:	801a      	strh	r2, [r3, #0]
 80060d0:	e050      	b.n	8006174 <USB_EPStartXfer+0x318>
 80060d2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80060d6:	2b00      	cmp	r3, #0
 80060d8:	d10a      	bne.n	80060f0 <USB_EPStartXfer+0x294>
 80060da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80060dc:	881b      	ldrh	r3, [r3, #0]
 80060de:	b29b      	uxth	r3, r3
 80060e0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80060e4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80060e8:	b29a      	uxth	r2, r3
 80060ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80060ec:	801a      	strh	r2, [r3, #0]
 80060ee:	e041      	b.n	8006174 <USB_EPStartXfer+0x318>
 80060f0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80060f4:	085b      	lsrs	r3, r3, #1
 80060f6:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 80060fa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80060fe:	f003 0301 	and.w	r3, r3, #1
 8006102:	2b00      	cmp	r3, #0
 8006104:	d004      	beq.n	8006110 <USB_EPStartXfer+0x2b4>
 8006106:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 800610a:	3301      	adds	r3, #1
 800610c:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8006110:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006112:	881b      	ldrh	r3, [r3, #0]
 8006114:	b29a      	uxth	r2, r3
 8006116:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 800611a:	b29b      	uxth	r3, r3
 800611c:	029b      	lsls	r3, r3, #10
 800611e:	b29b      	uxth	r3, r3
 8006120:	4313      	orrs	r3, r2
 8006122:	b29a      	uxth	r2, r3
 8006124:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006126:	801a      	strh	r2, [r3, #0]
 8006128:	e024      	b.n	8006174 <USB_EPStartXfer+0x318>
 800612a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800612e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	785b      	ldrb	r3, [r3, #1]
 8006136:	2b01      	cmp	r3, #1
 8006138:	d11c      	bne.n	8006174 <USB_EPStartXfer+0x318>
 800613a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800613e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006148:	b29b      	uxth	r3, r3
 800614a:	461a      	mov	r2, r3
 800614c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800614e:	4413      	add	r3, r2
 8006150:	633b      	str	r3, [r7, #48]	@ 0x30
 8006152:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006156:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	781b      	ldrb	r3, [r3, #0]
 800615e:	011a      	lsls	r2, r3, #4
 8006160:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006162:	4413      	add	r3, r2
 8006164:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8006168:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800616a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800616e:	b29a      	uxth	r2, r3
 8006170:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006172:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8006174:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006178:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	895b      	ldrh	r3, [r3, #10]
 8006180:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006184:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006188:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	6959      	ldr	r1, [r3, #20]
 8006190:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006194:	b29b      	uxth	r3, r3
 8006196:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800619a:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800619e:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 80061a2:	6800      	ldr	r0, [r0, #0]
 80061a4:	f001 fb49 	bl	800783a <USB_WritePMA>
            ep->xfer_buff += len;
 80061a8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80061ac:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	695a      	ldr	r2, [r3, #20]
 80061b4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80061b8:	441a      	add	r2, r3
 80061ba:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80061be:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 80061c6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80061ca:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	6a1a      	ldr	r2, [r3, #32]
 80061d2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80061d6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	691b      	ldr	r3, [r3, #16]
 80061de:	429a      	cmp	r2, r3
 80061e0:	d90f      	bls.n	8006202 <USB_EPStartXfer+0x3a6>
            {
              ep->xfer_len_db -= len;
 80061e2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80061e6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	6a1a      	ldr	r2, [r3, #32]
 80061ee:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80061f2:	1ad2      	subs	r2, r2, r3
 80061f4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80061f8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	621a      	str	r2, [r3, #32]
 8006200:	e00e      	b.n	8006220 <USB_EPStartXfer+0x3c4>
            }
            else
            {
              len = ep->xfer_len_db;
 8006202:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006206:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	6a1b      	ldr	r3, [r3, #32]
 800620e:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
              ep->xfer_len_db = 0U;
 8006212:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006216:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	2200      	movs	r2, #0
 800621e:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8006220:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006224:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	785b      	ldrb	r3, [r3, #1]
 800622c:	2b00      	cmp	r3, #0
 800622e:	d177      	bne.n	8006320 <USB_EPStartXfer+0x4c4>
 8006230:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006234:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	61bb      	str	r3, [r7, #24]
 800623c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006240:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800624a:	b29b      	uxth	r3, r3
 800624c:	461a      	mov	r2, r3
 800624e:	69bb      	ldr	r3, [r7, #24]
 8006250:	4413      	add	r3, r2
 8006252:	61bb      	str	r3, [r7, #24]
 8006254:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006258:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	781b      	ldrb	r3, [r3, #0]
 8006260:	011a      	lsls	r2, r3, #4
 8006262:	69bb      	ldr	r3, [r7, #24]
 8006264:	4413      	add	r3, r2
 8006266:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800626a:	617b      	str	r3, [r7, #20]
 800626c:	697b      	ldr	r3, [r7, #20]
 800626e:	881b      	ldrh	r3, [r3, #0]
 8006270:	b29b      	uxth	r3, r3
 8006272:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006276:	b29a      	uxth	r2, r3
 8006278:	697b      	ldr	r3, [r7, #20]
 800627a:	801a      	strh	r2, [r3, #0]
 800627c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006280:	2b3e      	cmp	r3, #62	@ 0x3e
 8006282:	d921      	bls.n	80062c8 <USB_EPStartXfer+0x46c>
 8006284:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006288:	095b      	lsrs	r3, r3, #5
 800628a:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800628e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006292:	f003 031f 	and.w	r3, r3, #31
 8006296:	2b00      	cmp	r3, #0
 8006298:	d104      	bne.n	80062a4 <USB_EPStartXfer+0x448>
 800629a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800629e:	3b01      	subs	r3, #1
 80062a0:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 80062a4:	697b      	ldr	r3, [r7, #20]
 80062a6:	881b      	ldrh	r3, [r3, #0]
 80062a8:	b29a      	uxth	r2, r3
 80062aa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80062ae:	b29b      	uxth	r3, r3
 80062b0:	029b      	lsls	r3, r3, #10
 80062b2:	b29b      	uxth	r3, r3
 80062b4:	4313      	orrs	r3, r2
 80062b6:	b29b      	uxth	r3, r3
 80062b8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80062bc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80062c0:	b29a      	uxth	r2, r3
 80062c2:	697b      	ldr	r3, [r7, #20]
 80062c4:	801a      	strh	r2, [r3, #0]
 80062c6:	e056      	b.n	8006376 <USB_EPStartXfer+0x51a>
 80062c8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80062cc:	2b00      	cmp	r3, #0
 80062ce:	d10a      	bne.n	80062e6 <USB_EPStartXfer+0x48a>
 80062d0:	697b      	ldr	r3, [r7, #20]
 80062d2:	881b      	ldrh	r3, [r3, #0]
 80062d4:	b29b      	uxth	r3, r3
 80062d6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80062da:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80062de:	b29a      	uxth	r2, r3
 80062e0:	697b      	ldr	r3, [r7, #20]
 80062e2:	801a      	strh	r2, [r3, #0]
 80062e4:	e047      	b.n	8006376 <USB_EPStartXfer+0x51a>
 80062e6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80062ea:	085b      	lsrs	r3, r3, #1
 80062ec:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 80062f0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80062f4:	f003 0301 	and.w	r3, r3, #1
 80062f8:	2b00      	cmp	r3, #0
 80062fa:	d004      	beq.n	8006306 <USB_EPStartXfer+0x4aa>
 80062fc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006300:	3301      	adds	r3, #1
 8006302:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8006306:	697b      	ldr	r3, [r7, #20]
 8006308:	881b      	ldrh	r3, [r3, #0]
 800630a:	b29a      	uxth	r2, r3
 800630c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006310:	b29b      	uxth	r3, r3
 8006312:	029b      	lsls	r3, r3, #10
 8006314:	b29b      	uxth	r3, r3
 8006316:	4313      	orrs	r3, r2
 8006318:	b29a      	uxth	r2, r3
 800631a:	697b      	ldr	r3, [r7, #20]
 800631c:	801a      	strh	r2, [r3, #0]
 800631e:	e02a      	b.n	8006376 <USB_EPStartXfer+0x51a>
 8006320:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006324:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	785b      	ldrb	r3, [r3, #1]
 800632c:	2b01      	cmp	r3, #1
 800632e:	d122      	bne.n	8006376 <USB_EPStartXfer+0x51a>
 8006330:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006334:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	623b      	str	r3, [r7, #32]
 800633c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006340:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800634a:	b29b      	uxth	r3, r3
 800634c:	461a      	mov	r2, r3
 800634e:	6a3b      	ldr	r3, [r7, #32]
 8006350:	4413      	add	r3, r2
 8006352:	623b      	str	r3, [r7, #32]
 8006354:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006358:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	781b      	ldrb	r3, [r3, #0]
 8006360:	011a      	lsls	r2, r3, #4
 8006362:	6a3b      	ldr	r3, [r7, #32]
 8006364:	4413      	add	r3, r2
 8006366:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800636a:	61fb      	str	r3, [r7, #28]
 800636c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006370:	b29a      	uxth	r2, r3
 8006372:	69fb      	ldr	r3, [r7, #28]
 8006374:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8006376:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800637a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	891b      	ldrh	r3, [r3, #8]
 8006382:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006386:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800638a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	6959      	ldr	r1, [r3, #20]
 8006392:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006396:	b29b      	uxth	r3, r3
 8006398:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800639c:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 80063a0:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 80063a4:	6800      	ldr	r0, [r0, #0]
 80063a6:	f001 fa48 	bl	800783a <USB_WritePMA>
 80063aa:	e3ee      	b.n	8006b8a <USB_EPStartXfer+0xd2e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80063ac:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80063b0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	785b      	ldrb	r3, [r3, #1]
 80063b8:	2b00      	cmp	r3, #0
 80063ba:	d177      	bne.n	80064ac <USB_EPStartXfer+0x650>
 80063bc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80063c0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	64bb      	str	r3, [r7, #72]	@ 0x48
 80063c8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80063cc:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80063d6:	b29b      	uxth	r3, r3
 80063d8:	461a      	mov	r2, r3
 80063da:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80063dc:	4413      	add	r3, r2
 80063de:	64bb      	str	r3, [r7, #72]	@ 0x48
 80063e0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80063e4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	781b      	ldrb	r3, [r3, #0]
 80063ec:	011a      	lsls	r2, r3, #4
 80063ee:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80063f0:	4413      	add	r3, r2
 80063f2:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80063f6:	647b      	str	r3, [r7, #68]	@ 0x44
 80063f8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80063fa:	881b      	ldrh	r3, [r3, #0]
 80063fc:	b29b      	uxth	r3, r3
 80063fe:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006402:	b29a      	uxth	r2, r3
 8006404:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006406:	801a      	strh	r2, [r3, #0]
 8006408:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800640c:	2b3e      	cmp	r3, #62	@ 0x3e
 800640e:	d921      	bls.n	8006454 <USB_EPStartXfer+0x5f8>
 8006410:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006414:	095b      	lsrs	r3, r3, #5
 8006416:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 800641a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800641e:	f003 031f 	and.w	r3, r3, #31
 8006422:	2b00      	cmp	r3, #0
 8006424:	d104      	bne.n	8006430 <USB_EPStartXfer+0x5d4>
 8006426:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800642a:	3b01      	subs	r3, #1
 800642c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8006430:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006432:	881b      	ldrh	r3, [r3, #0]
 8006434:	b29a      	uxth	r2, r3
 8006436:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800643a:	b29b      	uxth	r3, r3
 800643c:	029b      	lsls	r3, r3, #10
 800643e:	b29b      	uxth	r3, r3
 8006440:	4313      	orrs	r3, r2
 8006442:	b29b      	uxth	r3, r3
 8006444:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006448:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800644c:	b29a      	uxth	r2, r3
 800644e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006450:	801a      	strh	r2, [r3, #0]
 8006452:	e056      	b.n	8006502 <USB_EPStartXfer+0x6a6>
 8006454:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006458:	2b00      	cmp	r3, #0
 800645a:	d10a      	bne.n	8006472 <USB_EPStartXfer+0x616>
 800645c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800645e:	881b      	ldrh	r3, [r3, #0]
 8006460:	b29b      	uxth	r3, r3
 8006462:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006466:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800646a:	b29a      	uxth	r2, r3
 800646c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800646e:	801a      	strh	r2, [r3, #0]
 8006470:	e047      	b.n	8006502 <USB_EPStartXfer+0x6a6>
 8006472:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006476:	085b      	lsrs	r3, r3, #1
 8006478:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 800647c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006480:	f003 0301 	and.w	r3, r3, #1
 8006484:	2b00      	cmp	r3, #0
 8006486:	d004      	beq.n	8006492 <USB_EPStartXfer+0x636>
 8006488:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800648c:	3301      	adds	r3, #1
 800648e:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8006492:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006494:	881b      	ldrh	r3, [r3, #0]
 8006496:	b29a      	uxth	r2, r3
 8006498:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800649c:	b29b      	uxth	r3, r3
 800649e:	029b      	lsls	r3, r3, #10
 80064a0:	b29b      	uxth	r3, r3
 80064a2:	4313      	orrs	r3, r2
 80064a4:	b29a      	uxth	r2, r3
 80064a6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80064a8:	801a      	strh	r2, [r3, #0]
 80064aa:	e02a      	b.n	8006502 <USB_EPStartXfer+0x6a6>
 80064ac:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80064b0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	785b      	ldrb	r3, [r3, #1]
 80064b8:	2b01      	cmp	r3, #1
 80064ba:	d122      	bne.n	8006502 <USB_EPStartXfer+0x6a6>
 80064bc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80064c0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	653b      	str	r3, [r7, #80]	@ 0x50
 80064c8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80064cc:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80064d6:	b29b      	uxth	r3, r3
 80064d8:	461a      	mov	r2, r3
 80064da:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80064dc:	4413      	add	r3, r2
 80064de:	653b      	str	r3, [r7, #80]	@ 0x50
 80064e0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80064e4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	781b      	ldrb	r3, [r3, #0]
 80064ec:	011a      	lsls	r2, r3, #4
 80064ee:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80064f0:	4413      	add	r3, r2
 80064f2:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80064f6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80064f8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80064fc:	b29a      	uxth	r2, r3
 80064fe:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006500:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8006502:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006506:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	891b      	ldrh	r3, [r3, #8]
 800650e:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006512:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006516:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	6959      	ldr	r1, [r3, #20]
 800651e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006522:	b29b      	uxth	r3, r3
 8006524:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8006528:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800652c:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8006530:	6800      	ldr	r0, [r0, #0]
 8006532:	f001 f982 	bl	800783a <USB_WritePMA>
            ep->xfer_buff += len;
 8006536:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800653a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	695a      	ldr	r2, [r3, #20]
 8006542:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006546:	441a      	add	r2, r3
 8006548:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800654c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8006554:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006558:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	6a1a      	ldr	r2, [r3, #32]
 8006560:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006564:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	691b      	ldr	r3, [r3, #16]
 800656c:	429a      	cmp	r2, r3
 800656e:	d90f      	bls.n	8006590 <USB_EPStartXfer+0x734>
            {
              ep->xfer_len_db -= len;
 8006570:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006574:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	6a1a      	ldr	r2, [r3, #32]
 800657c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006580:	1ad2      	subs	r2, r2, r3
 8006582:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006586:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	621a      	str	r2, [r3, #32]
 800658e:	e00e      	b.n	80065ae <USB_EPStartXfer+0x752>
            }
            else
            {
              len = ep->xfer_len_db;
 8006590:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006594:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	6a1b      	ldr	r3, [r3, #32]
 800659c:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
              ep->xfer_len_db = 0U;
 80065a0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80065a4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	2200      	movs	r2, #0
 80065ac:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80065ae:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80065b2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	643b      	str	r3, [r7, #64]	@ 0x40
 80065ba:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80065be:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	785b      	ldrb	r3, [r3, #1]
 80065c6:	2b00      	cmp	r3, #0
 80065c8:	d177      	bne.n	80066ba <USB_EPStartXfer+0x85e>
 80065ca:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80065ce:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	63bb      	str	r3, [r7, #56]	@ 0x38
 80065d6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80065da:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80065e4:	b29b      	uxth	r3, r3
 80065e6:	461a      	mov	r2, r3
 80065e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80065ea:	4413      	add	r3, r2
 80065ec:	63bb      	str	r3, [r7, #56]	@ 0x38
 80065ee:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80065f2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	781b      	ldrb	r3, [r3, #0]
 80065fa:	011a      	lsls	r2, r3, #4
 80065fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80065fe:	4413      	add	r3, r2
 8006600:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8006604:	637b      	str	r3, [r7, #52]	@ 0x34
 8006606:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006608:	881b      	ldrh	r3, [r3, #0]
 800660a:	b29b      	uxth	r3, r3
 800660c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006610:	b29a      	uxth	r2, r3
 8006612:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006614:	801a      	strh	r2, [r3, #0]
 8006616:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800661a:	2b3e      	cmp	r3, #62	@ 0x3e
 800661c:	d921      	bls.n	8006662 <USB_EPStartXfer+0x806>
 800661e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006622:	095b      	lsrs	r3, r3, #5
 8006624:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8006628:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800662c:	f003 031f 	and.w	r3, r3, #31
 8006630:	2b00      	cmp	r3, #0
 8006632:	d104      	bne.n	800663e <USB_EPStartXfer+0x7e2>
 8006634:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006638:	3b01      	subs	r3, #1
 800663a:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800663e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006640:	881b      	ldrh	r3, [r3, #0]
 8006642:	b29a      	uxth	r2, r3
 8006644:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006648:	b29b      	uxth	r3, r3
 800664a:	029b      	lsls	r3, r3, #10
 800664c:	b29b      	uxth	r3, r3
 800664e:	4313      	orrs	r3, r2
 8006650:	b29b      	uxth	r3, r3
 8006652:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006656:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800665a:	b29a      	uxth	r2, r3
 800665c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800665e:	801a      	strh	r2, [r3, #0]
 8006660:	e050      	b.n	8006704 <USB_EPStartXfer+0x8a8>
 8006662:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006666:	2b00      	cmp	r3, #0
 8006668:	d10a      	bne.n	8006680 <USB_EPStartXfer+0x824>
 800666a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800666c:	881b      	ldrh	r3, [r3, #0]
 800666e:	b29b      	uxth	r3, r3
 8006670:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006674:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006678:	b29a      	uxth	r2, r3
 800667a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800667c:	801a      	strh	r2, [r3, #0]
 800667e:	e041      	b.n	8006704 <USB_EPStartXfer+0x8a8>
 8006680:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006684:	085b      	lsrs	r3, r3, #1
 8006686:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800668a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800668e:	f003 0301 	and.w	r3, r3, #1
 8006692:	2b00      	cmp	r3, #0
 8006694:	d004      	beq.n	80066a0 <USB_EPStartXfer+0x844>
 8006696:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800669a:	3301      	adds	r3, #1
 800669c:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 80066a0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80066a2:	881b      	ldrh	r3, [r3, #0]
 80066a4:	b29a      	uxth	r2, r3
 80066a6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80066aa:	b29b      	uxth	r3, r3
 80066ac:	029b      	lsls	r3, r3, #10
 80066ae:	b29b      	uxth	r3, r3
 80066b0:	4313      	orrs	r3, r2
 80066b2:	b29a      	uxth	r2, r3
 80066b4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80066b6:	801a      	strh	r2, [r3, #0]
 80066b8:	e024      	b.n	8006704 <USB_EPStartXfer+0x8a8>
 80066ba:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80066be:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	785b      	ldrb	r3, [r3, #1]
 80066c6:	2b01      	cmp	r3, #1
 80066c8:	d11c      	bne.n	8006704 <USB_EPStartXfer+0x8a8>
 80066ca:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80066ce:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80066d8:	b29b      	uxth	r3, r3
 80066da:	461a      	mov	r2, r3
 80066dc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80066de:	4413      	add	r3, r2
 80066e0:	643b      	str	r3, [r7, #64]	@ 0x40
 80066e2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80066e6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	781b      	ldrb	r3, [r3, #0]
 80066ee:	011a      	lsls	r2, r3, #4
 80066f0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80066f2:	4413      	add	r3, r2
 80066f4:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80066f8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80066fa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80066fe:	b29a      	uxth	r2, r3
 8006700:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006702:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8006704:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006708:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	895b      	ldrh	r3, [r3, #10]
 8006710:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006714:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006718:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	6959      	ldr	r1, [r3, #20]
 8006720:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006724:	b29b      	uxth	r3, r3
 8006726:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800672a:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800672e:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8006732:	6800      	ldr	r0, [r0, #0]
 8006734:	f001 f881 	bl	800783a <USB_WritePMA>
 8006738:	e227      	b.n	8006b8a <USB_EPStartXfer+0xd2e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 800673a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800673e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	6a1b      	ldr	r3, [r3, #32]
 8006746:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 800674a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800674e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006752:	681a      	ldr	r2, [r3, #0]
 8006754:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006758:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	781b      	ldrb	r3, [r3, #0]
 8006760:	009b      	lsls	r3, r3, #2
 8006762:	4413      	add	r3, r2
 8006764:	881b      	ldrh	r3, [r3, #0]
 8006766:	b29b      	uxth	r3, r3
 8006768:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 800676c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006770:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 8006774:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006778:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800677c:	681a      	ldr	r2, [r3, #0]
 800677e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006782:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	781b      	ldrb	r3, [r3, #0]
 800678a:	009b      	lsls	r3, r3, #2
 800678c:	441a      	add	r2, r3
 800678e:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 8006792:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006796:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800679a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800679e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80067a2:	b29b      	uxth	r3, r3
 80067a4:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80067a6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80067aa:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80067b2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80067b6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80067c0:	b29b      	uxth	r3, r3
 80067c2:	461a      	mov	r2, r3
 80067c4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80067c6:	4413      	add	r3, r2
 80067c8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80067ca:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80067ce:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	781b      	ldrb	r3, [r3, #0]
 80067d6:	011a      	lsls	r2, r3, #4
 80067d8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80067da:	4413      	add	r3, r2
 80067dc:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80067e0:	65bb      	str	r3, [r7, #88]	@ 0x58
 80067e2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80067e6:	b29a      	uxth	r2, r3
 80067e8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80067ea:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 80067ec:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80067f0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	891b      	ldrh	r3, [r3, #8]
 80067f8:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80067fc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006800:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	6959      	ldr	r1, [r3, #20]
 8006808:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800680c:	b29b      	uxth	r3, r3
 800680e:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8006812:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8006816:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800681a:	6800      	ldr	r0, [r0, #0]
 800681c:	f001 f80d 	bl	800783a <USB_WritePMA>
 8006820:	e1b3      	b.n	8006b8a <USB_EPStartXfer+0xd2e>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 8006822:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006826:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	6a1a      	ldr	r2, [r3, #32]
 800682e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006832:	1ad2      	subs	r2, r2, r3
 8006834:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006838:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8006840:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006844:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006848:	681a      	ldr	r2, [r3, #0]
 800684a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800684e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	781b      	ldrb	r3, [r3, #0]
 8006856:	009b      	lsls	r3, r3, #2
 8006858:	4413      	add	r3, r2
 800685a:	881b      	ldrh	r3, [r3, #0]
 800685c:	b29b      	uxth	r3, r3
 800685e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006862:	2b00      	cmp	r3, #0
 8006864:	f000 80c6 	beq.w	80069f4 <USB_EPStartXfer+0xb98>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8006868:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800686c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	673b      	str	r3, [r7, #112]	@ 0x70
 8006874:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006878:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	785b      	ldrb	r3, [r3, #1]
 8006880:	2b00      	cmp	r3, #0
 8006882:	d177      	bne.n	8006974 <USB_EPStartXfer+0xb18>
 8006884:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006888:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006890:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006894:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800689e:	b29b      	uxth	r3, r3
 80068a0:	461a      	mov	r2, r3
 80068a2:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80068a4:	4413      	add	r3, r2
 80068a6:	66bb      	str	r3, [r7, #104]	@ 0x68
 80068a8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80068ac:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	781b      	ldrb	r3, [r3, #0]
 80068b4:	011a      	lsls	r2, r3, #4
 80068b6:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80068b8:	4413      	add	r3, r2
 80068ba:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80068be:	667b      	str	r3, [r7, #100]	@ 0x64
 80068c0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80068c2:	881b      	ldrh	r3, [r3, #0]
 80068c4:	b29b      	uxth	r3, r3
 80068c6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80068ca:	b29a      	uxth	r2, r3
 80068cc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80068ce:	801a      	strh	r2, [r3, #0]
 80068d0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80068d4:	2b3e      	cmp	r3, #62	@ 0x3e
 80068d6:	d921      	bls.n	800691c <USB_EPStartXfer+0xac0>
 80068d8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80068dc:	095b      	lsrs	r3, r3, #5
 80068de:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 80068e2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80068e6:	f003 031f 	and.w	r3, r3, #31
 80068ea:	2b00      	cmp	r3, #0
 80068ec:	d104      	bne.n	80068f8 <USB_EPStartXfer+0xa9c>
 80068ee:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 80068f2:	3b01      	subs	r3, #1
 80068f4:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 80068f8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80068fa:	881b      	ldrh	r3, [r3, #0]
 80068fc:	b29a      	uxth	r2, r3
 80068fe:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8006902:	b29b      	uxth	r3, r3
 8006904:	029b      	lsls	r3, r3, #10
 8006906:	b29b      	uxth	r3, r3
 8006908:	4313      	orrs	r3, r2
 800690a:	b29b      	uxth	r3, r3
 800690c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006910:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006914:	b29a      	uxth	r2, r3
 8006916:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006918:	801a      	strh	r2, [r3, #0]
 800691a:	e050      	b.n	80069be <USB_EPStartXfer+0xb62>
 800691c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006920:	2b00      	cmp	r3, #0
 8006922:	d10a      	bne.n	800693a <USB_EPStartXfer+0xade>
 8006924:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006926:	881b      	ldrh	r3, [r3, #0]
 8006928:	b29b      	uxth	r3, r3
 800692a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800692e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006932:	b29a      	uxth	r2, r3
 8006934:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006936:	801a      	strh	r2, [r3, #0]
 8006938:	e041      	b.n	80069be <USB_EPStartXfer+0xb62>
 800693a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800693e:	085b      	lsrs	r3, r3, #1
 8006940:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8006944:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006948:	f003 0301 	and.w	r3, r3, #1
 800694c:	2b00      	cmp	r3, #0
 800694e:	d004      	beq.n	800695a <USB_EPStartXfer+0xafe>
 8006950:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8006954:	3301      	adds	r3, #1
 8006956:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800695a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800695c:	881b      	ldrh	r3, [r3, #0]
 800695e:	b29a      	uxth	r2, r3
 8006960:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8006964:	b29b      	uxth	r3, r3
 8006966:	029b      	lsls	r3, r3, #10
 8006968:	b29b      	uxth	r3, r3
 800696a:	4313      	orrs	r3, r2
 800696c:	b29a      	uxth	r2, r3
 800696e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006970:	801a      	strh	r2, [r3, #0]
 8006972:	e024      	b.n	80069be <USB_EPStartXfer+0xb62>
 8006974:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006978:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	785b      	ldrb	r3, [r3, #1]
 8006980:	2b01      	cmp	r3, #1
 8006982:	d11c      	bne.n	80069be <USB_EPStartXfer+0xb62>
 8006984:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006988:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006992:	b29b      	uxth	r3, r3
 8006994:	461a      	mov	r2, r3
 8006996:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8006998:	4413      	add	r3, r2
 800699a:	673b      	str	r3, [r7, #112]	@ 0x70
 800699c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80069a0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80069a4:	681b      	ldr	r3, [r3, #0]
 80069a6:	781b      	ldrb	r3, [r3, #0]
 80069a8:	011a      	lsls	r2, r3, #4
 80069aa:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80069ac:	4413      	add	r3, r2
 80069ae:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80069b2:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80069b4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80069b8:	b29a      	uxth	r2, r3
 80069ba:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80069bc:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 80069be:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80069c2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	895b      	ldrh	r3, [r3, #10]
 80069ca:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80069ce:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80069d2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	6959      	ldr	r1, [r3, #20]
 80069da:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80069de:	b29b      	uxth	r3, r3
 80069e0:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 80069e4:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 80069e8:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 80069ec:	6800      	ldr	r0, [r0, #0]
 80069ee:	f000 ff24 	bl	800783a <USB_WritePMA>
 80069f2:	e0ca      	b.n	8006b8a <USB_EPStartXfer+0xd2e>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80069f4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80069f8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	785b      	ldrb	r3, [r3, #1]
 8006a00:	2b00      	cmp	r3, #0
 8006a02:	d177      	bne.n	8006af4 <USB_EPStartXfer+0xc98>
 8006a04:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006a08:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8006a10:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006a14:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006a1e:	b29b      	uxth	r3, r3
 8006a20:	461a      	mov	r2, r3
 8006a22:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8006a24:	4413      	add	r3, r2
 8006a26:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8006a28:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006a2c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006a30:	681b      	ldr	r3, [r3, #0]
 8006a32:	781b      	ldrb	r3, [r3, #0]
 8006a34:	011a      	lsls	r2, r3, #4
 8006a36:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8006a38:	4413      	add	r3, r2
 8006a3a:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8006a3e:	67bb      	str	r3, [r7, #120]	@ 0x78
 8006a40:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006a42:	881b      	ldrh	r3, [r3, #0]
 8006a44:	b29b      	uxth	r3, r3
 8006a46:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006a4a:	b29a      	uxth	r2, r3
 8006a4c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006a4e:	801a      	strh	r2, [r3, #0]
 8006a50:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006a54:	2b3e      	cmp	r3, #62	@ 0x3e
 8006a56:	d921      	bls.n	8006a9c <USB_EPStartXfer+0xc40>
 8006a58:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006a5c:	095b      	lsrs	r3, r3, #5
 8006a5e:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8006a62:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006a66:	f003 031f 	and.w	r3, r3, #31
 8006a6a:	2b00      	cmp	r3, #0
 8006a6c:	d104      	bne.n	8006a78 <USB_EPStartXfer+0xc1c>
 8006a6e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8006a72:	3b01      	subs	r3, #1
 8006a74:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8006a78:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006a7a:	881b      	ldrh	r3, [r3, #0]
 8006a7c:	b29a      	uxth	r2, r3
 8006a7e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8006a82:	b29b      	uxth	r3, r3
 8006a84:	029b      	lsls	r3, r3, #10
 8006a86:	b29b      	uxth	r3, r3
 8006a88:	4313      	orrs	r3, r2
 8006a8a:	b29b      	uxth	r3, r3
 8006a8c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006a90:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006a94:	b29a      	uxth	r2, r3
 8006a96:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006a98:	801a      	strh	r2, [r3, #0]
 8006a9a:	e05c      	b.n	8006b56 <USB_EPStartXfer+0xcfa>
 8006a9c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006aa0:	2b00      	cmp	r3, #0
 8006aa2:	d10a      	bne.n	8006aba <USB_EPStartXfer+0xc5e>
 8006aa4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006aa6:	881b      	ldrh	r3, [r3, #0]
 8006aa8:	b29b      	uxth	r3, r3
 8006aaa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006aae:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006ab2:	b29a      	uxth	r2, r3
 8006ab4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006ab6:	801a      	strh	r2, [r3, #0]
 8006ab8:	e04d      	b.n	8006b56 <USB_EPStartXfer+0xcfa>
 8006aba:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006abe:	085b      	lsrs	r3, r3, #1
 8006ac0:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8006ac4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006ac8:	f003 0301 	and.w	r3, r3, #1
 8006acc:	2b00      	cmp	r3, #0
 8006ace:	d004      	beq.n	8006ada <USB_EPStartXfer+0xc7e>
 8006ad0:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8006ad4:	3301      	adds	r3, #1
 8006ad6:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8006ada:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006adc:	881b      	ldrh	r3, [r3, #0]
 8006ade:	b29a      	uxth	r2, r3
 8006ae0:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8006ae4:	b29b      	uxth	r3, r3
 8006ae6:	029b      	lsls	r3, r3, #10
 8006ae8:	b29b      	uxth	r3, r3
 8006aea:	4313      	orrs	r3, r2
 8006aec:	b29a      	uxth	r2, r3
 8006aee:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006af0:	801a      	strh	r2, [r3, #0]
 8006af2:	e030      	b.n	8006b56 <USB_EPStartXfer+0xcfa>
 8006af4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006af8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006afc:	681b      	ldr	r3, [r3, #0]
 8006afe:	785b      	ldrb	r3, [r3, #1]
 8006b00:	2b01      	cmp	r3, #1
 8006b02:	d128      	bne.n	8006b56 <USB_EPStartXfer+0xcfa>
 8006b04:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006b08:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8006b12:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006b16:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006b20:	b29b      	uxth	r3, r3
 8006b22:	461a      	mov	r2, r3
 8006b24:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8006b28:	4413      	add	r3, r2
 8006b2a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8006b2e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006b32:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	781b      	ldrb	r3, [r3, #0]
 8006b3a:	011a      	lsls	r2, r3, #4
 8006b3c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8006b40:	4413      	add	r3, r2
 8006b42:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8006b46:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8006b4a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006b4e:	b29a      	uxth	r2, r3
 8006b50:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8006b54:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8006b56:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006b5a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	891b      	ldrh	r3, [r3, #8]
 8006b62:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006b66:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006b6a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	6959      	ldr	r1, [r3, #20]
 8006b72:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006b76:	b29b      	uxth	r3, r3
 8006b78:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8006b7c:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8006b80:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8006b84:	6800      	ldr	r0, [r0, #0]
 8006b86:	f000 fe58 	bl	800783a <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8006b8a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006b8e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006b92:	681a      	ldr	r2, [r3, #0]
 8006b94:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006b98:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006b9c:	681b      	ldr	r3, [r3, #0]
 8006b9e:	781b      	ldrb	r3, [r3, #0]
 8006ba0:	009b      	lsls	r3, r3, #2
 8006ba2:	4413      	add	r3, r2
 8006ba4:	881b      	ldrh	r3, [r3, #0]
 8006ba6:	b29b      	uxth	r3, r3
 8006ba8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006bac:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006bb0:	817b      	strh	r3, [r7, #10]
 8006bb2:	897b      	ldrh	r3, [r7, #10]
 8006bb4:	f083 0310 	eor.w	r3, r3, #16
 8006bb8:	817b      	strh	r3, [r7, #10]
 8006bba:	897b      	ldrh	r3, [r7, #10]
 8006bbc:	f083 0320 	eor.w	r3, r3, #32
 8006bc0:	817b      	strh	r3, [r7, #10]
 8006bc2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006bc6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006bca:	681a      	ldr	r2, [r3, #0]
 8006bcc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006bd0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006bd4:	681b      	ldr	r3, [r3, #0]
 8006bd6:	781b      	ldrb	r3, [r3, #0]
 8006bd8:	009b      	lsls	r3, r3, #2
 8006bda:	441a      	add	r2, r3
 8006bdc:	897b      	ldrh	r3, [r7, #10]
 8006bde:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006be2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006be6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006bea:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006bee:	b29b      	uxth	r3, r3
 8006bf0:	8013      	strh	r3, [r2, #0]
 8006bf2:	f000 bcde 	b.w	80075b2 <USB_EPStartXfer+0x1756>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8006bf6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006bfa:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006bfe:	681b      	ldr	r3, [r3, #0]
 8006c00:	7b1b      	ldrb	r3, [r3, #12]
 8006c02:	2b00      	cmp	r3, #0
 8006c04:	f040 80bb 	bne.w	8006d7e <USB_EPStartXfer+0xf22>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8006c08:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006c0c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006c10:	681b      	ldr	r3, [r3, #0]
 8006c12:	699a      	ldr	r2, [r3, #24]
 8006c14:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006c18:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	691b      	ldr	r3, [r3, #16]
 8006c20:	429a      	cmp	r2, r3
 8006c22:	d917      	bls.n	8006c54 <USB_EPStartXfer+0xdf8>
      {
        len = ep->maxpacket;
 8006c24:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006c28:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	691b      	ldr	r3, [r3, #16]
 8006c30:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
        ep->xfer_len -= len;
 8006c34:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006c38:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006c3c:	681b      	ldr	r3, [r3, #0]
 8006c3e:	699a      	ldr	r2, [r3, #24]
 8006c40:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006c44:	1ad2      	subs	r2, r2, r3
 8006c46:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006c4a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	619a      	str	r2, [r3, #24]
 8006c52:	e00e      	b.n	8006c72 <USB_EPStartXfer+0xe16>
      }
      else
      {
        len = ep->xfer_len;
 8006c54:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006c58:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006c5c:	681b      	ldr	r3, [r3, #0]
 8006c5e:	699b      	ldr	r3, [r3, #24]
 8006c60:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
        ep->xfer_len = 0U;
 8006c64:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006c68:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006c6c:	681b      	ldr	r3, [r3, #0]
 8006c6e:	2200      	movs	r2, #0
 8006c70:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8006c72:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006c76:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8006c80:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006c84:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006c8e:	b29b      	uxth	r3, r3
 8006c90:	461a      	mov	r2, r3
 8006c92:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8006c96:	4413      	add	r3, r2
 8006c98:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8006c9c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006ca0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	781b      	ldrb	r3, [r3, #0]
 8006ca8:	011a      	lsls	r2, r3, #4
 8006caa:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8006cae:	4413      	add	r3, r2
 8006cb0:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8006cb4:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8006cb8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006cbc:	881b      	ldrh	r3, [r3, #0]
 8006cbe:	b29b      	uxth	r3, r3
 8006cc0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006cc4:	b29a      	uxth	r2, r3
 8006cc6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006cca:	801a      	strh	r2, [r3, #0]
 8006ccc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006cd0:	2b3e      	cmp	r3, #62	@ 0x3e
 8006cd2:	d924      	bls.n	8006d1e <USB_EPStartXfer+0xec2>
 8006cd4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006cd8:	095b      	lsrs	r3, r3, #5
 8006cda:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8006cde:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006ce2:	f003 031f 	and.w	r3, r3, #31
 8006ce6:	2b00      	cmp	r3, #0
 8006ce8:	d104      	bne.n	8006cf4 <USB_EPStartXfer+0xe98>
 8006cea:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8006cee:	3b01      	subs	r3, #1
 8006cf0:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8006cf4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006cf8:	881b      	ldrh	r3, [r3, #0]
 8006cfa:	b29a      	uxth	r2, r3
 8006cfc:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8006d00:	b29b      	uxth	r3, r3
 8006d02:	029b      	lsls	r3, r3, #10
 8006d04:	b29b      	uxth	r3, r3
 8006d06:	4313      	orrs	r3, r2
 8006d08:	b29b      	uxth	r3, r3
 8006d0a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006d0e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006d12:	b29a      	uxth	r2, r3
 8006d14:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006d18:	801a      	strh	r2, [r3, #0]
 8006d1a:	f000 bc10 	b.w	800753e <USB_EPStartXfer+0x16e2>
 8006d1e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006d22:	2b00      	cmp	r3, #0
 8006d24:	d10c      	bne.n	8006d40 <USB_EPStartXfer+0xee4>
 8006d26:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006d2a:	881b      	ldrh	r3, [r3, #0]
 8006d2c:	b29b      	uxth	r3, r3
 8006d2e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006d32:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006d36:	b29a      	uxth	r2, r3
 8006d38:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006d3c:	801a      	strh	r2, [r3, #0]
 8006d3e:	e3fe      	b.n	800753e <USB_EPStartXfer+0x16e2>
 8006d40:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006d44:	085b      	lsrs	r3, r3, #1
 8006d46:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8006d4a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006d4e:	f003 0301 	and.w	r3, r3, #1
 8006d52:	2b00      	cmp	r3, #0
 8006d54:	d004      	beq.n	8006d60 <USB_EPStartXfer+0xf04>
 8006d56:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8006d5a:	3301      	adds	r3, #1
 8006d5c:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8006d60:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006d64:	881b      	ldrh	r3, [r3, #0]
 8006d66:	b29a      	uxth	r2, r3
 8006d68:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8006d6c:	b29b      	uxth	r3, r3
 8006d6e:	029b      	lsls	r3, r3, #10
 8006d70:	b29b      	uxth	r3, r3
 8006d72:	4313      	orrs	r3, r2
 8006d74:	b29a      	uxth	r2, r3
 8006d76:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006d7a:	801a      	strh	r2, [r3, #0]
 8006d7c:	e3df      	b.n	800753e <USB_EPStartXfer+0x16e2>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8006d7e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006d82:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	78db      	ldrb	r3, [r3, #3]
 8006d8a:	2b02      	cmp	r3, #2
 8006d8c:	f040 8218 	bne.w	80071c0 <USB_EPStartXfer+0x1364>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8006d90:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006d94:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006d98:	681b      	ldr	r3, [r3, #0]
 8006d9a:	785b      	ldrb	r3, [r3, #1]
 8006d9c:	2b00      	cmp	r3, #0
 8006d9e:	f040 809d 	bne.w	8006edc <USB_EPStartXfer+0x1080>
 8006da2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006da6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006daa:	681b      	ldr	r3, [r3, #0]
 8006dac:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8006db0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006db4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006dbe:	b29b      	uxth	r3, r3
 8006dc0:	461a      	mov	r2, r3
 8006dc2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006dc6:	4413      	add	r3, r2
 8006dc8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8006dcc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006dd0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006dd4:	681b      	ldr	r3, [r3, #0]
 8006dd6:	781b      	ldrb	r3, [r3, #0]
 8006dd8:	011a      	lsls	r2, r3, #4
 8006dda:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006dde:	4413      	add	r3, r2
 8006de0:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8006de4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8006de8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8006dec:	881b      	ldrh	r3, [r3, #0]
 8006dee:	b29b      	uxth	r3, r3
 8006df0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006df4:	b29a      	uxth	r2, r3
 8006df6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8006dfa:	801a      	strh	r2, [r3, #0]
 8006dfc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006e00:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006e04:	681b      	ldr	r3, [r3, #0]
 8006e06:	691b      	ldr	r3, [r3, #16]
 8006e08:	2b3e      	cmp	r3, #62	@ 0x3e
 8006e0a:	d92b      	bls.n	8006e64 <USB_EPStartXfer+0x1008>
 8006e0c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006e10:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006e14:	681b      	ldr	r3, [r3, #0]
 8006e16:	691b      	ldr	r3, [r3, #16]
 8006e18:	095b      	lsrs	r3, r3, #5
 8006e1a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8006e1e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006e22:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006e26:	681b      	ldr	r3, [r3, #0]
 8006e28:	691b      	ldr	r3, [r3, #16]
 8006e2a:	f003 031f 	and.w	r3, r3, #31
 8006e2e:	2b00      	cmp	r3, #0
 8006e30:	d104      	bne.n	8006e3c <USB_EPStartXfer+0xfe0>
 8006e32:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006e36:	3b01      	subs	r3, #1
 8006e38:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8006e3c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8006e40:	881b      	ldrh	r3, [r3, #0]
 8006e42:	b29a      	uxth	r2, r3
 8006e44:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006e48:	b29b      	uxth	r3, r3
 8006e4a:	029b      	lsls	r3, r3, #10
 8006e4c:	b29b      	uxth	r3, r3
 8006e4e:	4313      	orrs	r3, r2
 8006e50:	b29b      	uxth	r3, r3
 8006e52:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006e56:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006e5a:	b29a      	uxth	r2, r3
 8006e5c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8006e60:	801a      	strh	r2, [r3, #0]
 8006e62:	e070      	b.n	8006f46 <USB_EPStartXfer+0x10ea>
 8006e64:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006e68:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006e6c:	681b      	ldr	r3, [r3, #0]
 8006e6e:	691b      	ldr	r3, [r3, #16]
 8006e70:	2b00      	cmp	r3, #0
 8006e72:	d10c      	bne.n	8006e8e <USB_EPStartXfer+0x1032>
 8006e74:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8006e78:	881b      	ldrh	r3, [r3, #0]
 8006e7a:	b29b      	uxth	r3, r3
 8006e7c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006e80:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006e84:	b29a      	uxth	r2, r3
 8006e86:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8006e8a:	801a      	strh	r2, [r3, #0]
 8006e8c:	e05b      	b.n	8006f46 <USB_EPStartXfer+0x10ea>
 8006e8e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006e92:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006e96:	681b      	ldr	r3, [r3, #0]
 8006e98:	691b      	ldr	r3, [r3, #16]
 8006e9a:	085b      	lsrs	r3, r3, #1
 8006e9c:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8006ea0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006ea4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006ea8:	681b      	ldr	r3, [r3, #0]
 8006eaa:	691b      	ldr	r3, [r3, #16]
 8006eac:	f003 0301 	and.w	r3, r3, #1
 8006eb0:	2b00      	cmp	r3, #0
 8006eb2:	d004      	beq.n	8006ebe <USB_EPStartXfer+0x1062>
 8006eb4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006eb8:	3301      	adds	r3, #1
 8006eba:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8006ebe:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8006ec2:	881b      	ldrh	r3, [r3, #0]
 8006ec4:	b29a      	uxth	r2, r3
 8006ec6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006eca:	b29b      	uxth	r3, r3
 8006ecc:	029b      	lsls	r3, r3, #10
 8006ece:	b29b      	uxth	r3, r3
 8006ed0:	4313      	orrs	r3, r2
 8006ed2:	b29a      	uxth	r2, r3
 8006ed4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8006ed8:	801a      	strh	r2, [r3, #0]
 8006eda:	e034      	b.n	8006f46 <USB_EPStartXfer+0x10ea>
 8006edc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006ee0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	785b      	ldrb	r3, [r3, #1]
 8006ee8:	2b01      	cmp	r3, #1
 8006eea:	d12c      	bne.n	8006f46 <USB_EPStartXfer+0x10ea>
 8006eec:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006ef0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006ef4:	681b      	ldr	r3, [r3, #0]
 8006ef6:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006efa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006efe:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006f02:	681b      	ldr	r3, [r3, #0]
 8006f04:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006f08:	b29b      	uxth	r3, r3
 8006f0a:	461a      	mov	r2, r3
 8006f0c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8006f10:	4413      	add	r3, r2
 8006f12:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006f16:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006f1a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006f1e:	681b      	ldr	r3, [r3, #0]
 8006f20:	781b      	ldrb	r3, [r3, #0]
 8006f22:	011a      	lsls	r2, r3, #4
 8006f24:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8006f28:	4413      	add	r3, r2
 8006f2a:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8006f2e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8006f32:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006f36:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006f3a:	681b      	ldr	r3, [r3, #0]
 8006f3c:	691b      	ldr	r3, [r3, #16]
 8006f3e:	b29a      	uxth	r2, r3
 8006f40:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8006f44:	801a      	strh	r2, [r3, #0]
 8006f46:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006f4a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8006f54:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006f58:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006f5c:	681b      	ldr	r3, [r3, #0]
 8006f5e:	785b      	ldrb	r3, [r3, #1]
 8006f60:	2b00      	cmp	r3, #0
 8006f62:	f040 809d 	bne.w	80070a0 <USB_EPStartXfer+0x1244>
 8006f66:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006f6a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006f6e:	681b      	ldr	r3, [r3, #0]
 8006f70:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8006f74:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006f78:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006f7c:	681b      	ldr	r3, [r3, #0]
 8006f7e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006f82:	b29b      	uxth	r3, r3
 8006f84:	461a      	mov	r2, r3
 8006f86:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8006f8a:	4413      	add	r3, r2
 8006f8c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8006f90:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006f94:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006f98:	681b      	ldr	r3, [r3, #0]
 8006f9a:	781b      	ldrb	r3, [r3, #0]
 8006f9c:	011a      	lsls	r2, r3, #4
 8006f9e:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8006fa2:	4413      	add	r3, r2
 8006fa4:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8006fa8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8006fac:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8006fb0:	881b      	ldrh	r3, [r3, #0]
 8006fb2:	b29b      	uxth	r3, r3
 8006fb4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006fb8:	b29a      	uxth	r2, r3
 8006fba:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8006fbe:	801a      	strh	r2, [r3, #0]
 8006fc0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006fc4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006fc8:	681b      	ldr	r3, [r3, #0]
 8006fca:	691b      	ldr	r3, [r3, #16]
 8006fcc:	2b3e      	cmp	r3, #62	@ 0x3e
 8006fce:	d92b      	bls.n	8007028 <USB_EPStartXfer+0x11cc>
 8006fd0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006fd4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	691b      	ldr	r3, [r3, #16]
 8006fdc:	095b      	lsrs	r3, r3, #5
 8006fde:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8006fe2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006fe6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006fea:	681b      	ldr	r3, [r3, #0]
 8006fec:	691b      	ldr	r3, [r3, #16]
 8006fee:	f003 031f 	and.w	r3, r3, #31
 8006ff2:	2b00      	cmp	r3, #0
 8006ff4:	d104      	bne.n	8007000 <USB_EPStartXfer+0x11a4>
 8006ff6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006ffa:	3b01      	subs	r3, #1
 8006ffc:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8007000:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8007004:	881b      	ldrh	r3, [r3, #0]
 8007006:	b29a      	uxth	r2, r3
 8007008:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800700c:	b29b      	uxth	r3, r3
 800700e:	029b      	lsls	r3, r3, #10
 8007010:	b29b      	uxth	r3, r3
 8007012:	4313      	orrs	r3, r2
 8007014:	b29b      	uxth	r3, r3
 8007016:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800701a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800701e:	b29a      	uxth	r2, r3
 8007020:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8007024:	801a      	strh	r2, [r3, #0]
 8007026:	e069      	b.n	80070fc <USB_EPStartXfer+0x12a0>
 8007028:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800702c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007030:	681b      	ldr	r3, [r3, #0]
 8007032:	691b      	ldr	r3, [r3, #16]
 8007034:	2b00      	cmp	r3, #0
 8007036:	d10c      	bne.n	8007052 <USB_EPStartXfer+0x11f6>
 8007038:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800703c:	881b      	ldrh	r3, [r3, #0]
 800703e:	b29b      	uxth	r3, r3
 8007040:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007044:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007048:	b29a      	uxth	r2, r3
 800704a:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800704e:	801a      	strh	r2, [r3, #0]
 8007050:	e054      	b.n	80070fc <USB_EPStartXfer+0x12a0>
 8007052:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007056:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800705a:	681b      	ldr	r3, [r3, #0]
 800705c:	691b      	ldr	r3, [r3, #16]
 800705e:	085b      	lsrs	r3, r3, #1
 8007060:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8007064:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007068:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800706c:	681b      	ldr	r3, [r3, #0]
 800706e:	691b      	ldr	r3, [r3, #16]
 8007070:	f003 0301 	and.w	r3, r3, #1
 8007074:	2b00      	cmp	r3, #0
 8007076:	d004      	beq.n	8007082 <USB_EPStartXfer+0x1226>
 8007078:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800707c:	3301      	adds	r3, #1
 800707e:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8007082:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8007086:	881b      	ldrh	r3, [r3, #0]
 8007088:	b29a      	uxth	r2, r3
 800708a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800708e:	b29b      	uxth	r3, r3
 8007090:	029b      	lsls	r3, r3, #10
 8007092:	b29b      	uxth	r3, r3
 8007094:	4313      	orrs	r3, r2
 8007096:	b29a      	uxth	r2, r3
 8007098:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800709c:	801a      	strh	r2, [r3, #0]
 800709e:	e02d      	b.n	80070fc <USB_EPStartXfer+0x12a0>
 80070a0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80070a4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80070a8:	681b      	ldr	r3, [r3, #0]
 80070aa:	785b      	ldrb	r3, [r3, #1]
 80070ac:	2b01      	cmp	r3, #1
 80070ae:	d125      	bne.n	80070fc <USB_EPStartXfer+0x12a0>
 80070b0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80070b4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80070b8:	681b      	ldr	r3, [r3, #0]
 80070ba:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80070be:	b29b      	uxth	r3, r3
 80070c0:	461a      	mov	r2, r3
 80070c2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80070c6:	4413      	add	r3, r2
 80070c8:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 80070cc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80070d0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80070d4:	681b      	ldr	r3, [r3, #0]
 80070d6:	781b      	ldrb	r3, [r3, #0]
 80070d8:	011a      	lsls	r2, r3, #4
 80070da:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80070de:	4413      	add	r3, r2
 80070e0:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80070e4:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80070e8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80070ec:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80070f0:	681b      	ldr	r3, [r3, #0]
 80070f2:	691b      	ldr	r3, [r3, #16]
 80070f4:	b29a      	uxth	r2, r3
 80070f6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80070fa:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 80070fc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007100:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007104:	681b      	ldr	r3, [r3, #0]
 8007106:	69db      	ldr	r3, [r3, #28]
 8007108:	2b00      	cmp	r3, #0
 800710a:	f000 8218 	beq.w	800753e <USB_EPStartXfer+0x16e2>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 800710e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007112:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007116:	681a      	ldr	r2, [r3, #0]
 8007118:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800711c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007120:	681b      	ldr	r3, [r3, #0]
 8007122:	781b      	ldrb	r3, [r3, #0]
 8007124:	009b      	lsls	r3, r3, #2
 8007126:	4413      	add	r3, r2
 8007128:	881b      	ldrh	r3, [r3, #0]
 800712a:	f8a7 3096 	strh.w	r3, [r7, #150]	@ 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800712e:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8007132:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007136:	2b00      	cmp	r3, #0
 8007138:	d005      	beq.n	8007146 <USB_EPStartXfer+0x12ea>
 800713a:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800713e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007142:	2b00      	cmp	r3, #0
 8007144:	d10d      	bne.n	8007162 <USB_EPStartXfer+0x1306>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8007146:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800714a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800714e:	2b00      	cmp	r3, #0
 8007150:	f040 81f5 	bne.w	800753e <USB_EPStartXfer+0x16e2>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8007154:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8007158:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800715c:	2b00      	cmp	r3, #0
 800715e:	f040 81ee 	bne.w	800753e <USB_EPStartXfer+0x16e2>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 8007162:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007166:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800716a:	681a      	ldr	r2, [r3, #0]
 800716c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007170:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007174:	681b      	ldr	r3, [r3, #0]
 8007176:	781b      	ldrb	r3, [r3, #0]
 8007178:	009b      	lsls	r3, r3, #2
 800717a:	4413      	add	r3, r2
 800717c:	881b      	ldrh	r3, [r3, #0]
 800717e:	b29b      	uxth	r3, r3
 8007180:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007184:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007188:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
 800718c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007190:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007194:	681a      	ldr	r2, [r3, #0]
 8007196:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800719a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800719e:	681b      	ldr	r3, [r3, #0]
 80071a0:	781b      	ldrb	r3, [r3, #0]
 80071a2:	009b      	lsls	r3, r3, #2
 80071a4:	441a      	add	r2, r3
 80071a6:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 80071aa:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80071ae:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80071b2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80071b6:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80071ba:	b29b      	uxth	r3, r3
 80071bc:	8013      	strh	r3, [r2, #0]
 80071be:	e1be      	b.n	800753e <USB_EPStartXfer+0x16e2>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 80071c0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80071c4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80071c8:	681b      	ldr	r3, [r3, #0]
 80071ca:	78db      	ldrb	r3, [r3, #3]
 80071cc:	2b01      	cmp	r3, #1
 80071ce:	f040 81b4 	bne.w	800753a <USB_EPStartXfer+0x16de>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 80071d2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80071d6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80071da:	681b      	ldr	r3, [r3, #0]
 80071dc:	699a      	ldr	r2, [r3, #24]
 80071de:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80071e2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80071e6:	681b      	ldr	r3, [r3, #0]
 80071e8:	691b      	ldr	r3, [r3, #16]
 80071ea:	429a      	cmp	r2, r3
 80071ec:	d917      	bls.n	800721e <USB_EPStartXfer+0x13c2>
        {
          len = ep->maxpacket;
 80071ee:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80071f2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80071f6:	681b      	ldr	r3, [r3, #0]
 80071f8:	691b      	ldr	r3, [r3, #16]
 80071fa:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
          ep->xfer_len -= len;
 80071fe:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007202:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007206:	681b      	ldr	r3, [r3, #0]
 8007208:	699a      	ldr	r2, [r3, #24]
 800720a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800720e:	1ad2      	subs	r2, r2, r3
 8007210:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007214:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007218:	681b      	ldr	r3, [r3, #0]
 800721a:	619a      	str	r2, [r3, #24]
 800721c:	e00e      	b.n	800723c <USB_EPStartXfer+0x13e0>
        }
        else
        {
          len = ep->xfer_len;
 800721e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007222:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007226:	681b      	ldr	r3, [r3, #0]
 8007228:	699b      	ldr	r3, [r3, #24]
 800722a:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
          ep->xfer_len = 0U;
 800722e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007232:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007236:	681b      	ldr	r3, [r3, #0]
 8007238:	2200      	movs	r2, #0
 800723a:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 800723c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007240:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007244:	681b      	ldr	r3, [r3, #0]
 8007246:	785b      	ldrb	r3, [r3, #1]
 8007248:	2b00      	cmp	r3, #0
 800724a:	f040 8085 	bne.w	8007358 <USB_EPStartXfer+0x14fc>
 800724e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007252:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007256:	681b      	ldr	r3, [r3, #0]
 8007258:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800725c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007260:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007264:	681b      	ldr	r3, [r3, #0]
 8007266:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800726a:	b29b      	uxth	r3, r3
 800726c:	461a      	mov	r2, r3
 800726e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8007272:	4413      	add	r3, r2
 8007274:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8007278:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800727c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007280:	681b      	ldr	r3, [r3, #0]
 8007282:	781b      	ldrb	r3, [r3, #0]
 8007284:	011a      	lsls	r2, r3, #4
 8007286:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800728a:	4413      	add	r3, r2
 800728c:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8007290:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8007294:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8007298:	881b      	ldrh	r3, [r3, #0]
 800729a:	b29b      	uxth	r3, r3
 800729c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80072a0:	b29a      	uxth	r2, r3
 80072a2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80072a6:	801a      	strh	r2, [r3, #0]
 80072a8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80072ac:	2b3e      	cmp	r3, #62	@ 0x3e
 80072ae:	d923      	bls.n	80072f8 <USB_EPStartXfer+0x149c>
 80072b0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80072b4:	095b      	lsrs	r3, r3, #5
 80072b6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 80072ba:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80072be:	f003 031f 	and.w	r3, r3, #31
 80072c2:	2b00      	cmp	r3, #0
 80072c4:	d104      	bne.n	80072d0 <USB_EPStartXfer+0x1474>
 80072c6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80072ca:	3b01      	subs	r3, #1
 80072cc:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 80072d0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80072d4:	881b      	ldrh	r3, [r3, #0]
 80072d6:	b29a      	uxth	r2, r3
 80072d8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80072dc:	b29b      	uxth	r3, r3
 80072de:	029b      	lsls	r3, r3, #10
 80072e0:	b29b      	uxth	r3, r3
 80072e2:	4313      	orrs	r3, r2
 80072e4:	b29b      	uxth	r3, r3
 80072e6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80072ea:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80072ee:	b29a      	uxth	r2, r3
 80072f0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80072f4:	801a      	strh	r2, [r3, #0]
 80072f6:	e060      	b.n	80073ba <USB_EPStartXfer+0x155e>
 80072f8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80072fc:	2b00      	cmp	r3, #0
 80072fe:	d10c      	bne.n	800731a <USB_EPStartXfer+0x14be>
 8007300:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8007304:	881b      	ldrh	r3, [r3, #0]
 8007306:	b29b      	uxth	r3, r3
 8007308:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800730c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007310:	b29a      	uxth	r2, r3
 8007312:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8007316:	801a      	strh	r2, [r3, #0]
 8007318:	e04f      	b.n	80073ba <USB_EPStartXfer+0x155e>
 800731a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800731e:	085b      	lsrs	r3, r3, #1
 8007320:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8007324:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007328:	f003 0301 	and.w	r3, r3, #1
 800732c:	2b00      	cmp	r3, #0
 800732e:	d004      	beq.n	800733a <USB_EPStartXfer+0x14de>
 8007330:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007334:	3301      	adds	r3, #1
 8007336:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800733a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800733e:	881b      	ldrh	r3, [r3, #0]
 8007340:	b29a      	uxth	r2, r3
 8007342:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007346:	b29b      	uxth	r3, r3
 8007348:	029b      	lsls	r3, r3, #10
 800734a:	b29b      	uxth	r3, r3
 800734c:	4313      	orrs	r3, r2
 800734e:	b29a      	uxth	r2, r3
 8007350:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8007354:	801a      	strh	r2, [r3, #0]
 8007356:	e030      	b.n	80073ba <USB_EPStartXfer+0x155e>
 8007358:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800735c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007360:	681b      	ldr	r3, [r3, #0]
 8007362:	785b      	ldrb	r3, [r3, #1]
 8007364:	2b01      	cmp	r3, #1
 8007366:	d128      	bne.n	80073ba <USB_EPStartXfer+0x155e>
 8007368:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800736c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007370:	681b      	ldr	r3, [r3, #0]
 8007372:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8007376:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800737a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800737e:	681b      	ldr	r3, [r3, #0]
 8007380:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007384:	b29b      	uxth	r3, r3
 8007386:	461a      	mov	r2, r3
 8007388:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800738c:	4413      	add	r3, r2
 800738e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8007392:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007396:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800739a:	681b      	ldr	r3, [r3, #0]
 800739c:	781b      	ldrb	r3, [r3, #0]
 800739e:	011a      	lsls	r2, r3, #4
 80073a0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80073a4:	4413      	add	r3, r2
 80073a6:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80073aa:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80073ae:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80073b2:	b29a      	uxth	r2, r3
 80073b4:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 80073b8:	801a      	strh	r2, [r3, #0]
 80073ba:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80073be:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80073c2:	681b      	ldr	r3, [r3, #0]
 80073c4:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80073c8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80073cc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80073d0:	681b      	ldr	r3, [r3, #0]
 80073d2:	785b      	ldrb	r3, [r3, #1]
 80073d4:	2b00      	cmp	r3, #0
 80073d6:	f040 8085 	bne.w	80074e4 <USB_EPStartXfer+0x1688>
 80073da:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80073de:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80073e2:	681b      	ldr	r3, [r3, #0]
 80073e4:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 80073e8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80073ec:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80073f0:	681b      	ldr	r3, [r3, #0]
 80073f2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80073f6:	b29b      	uxth	r3, r3
 80073f8:	461a      	mov	r2, r3
 80073fa:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80073fe:	4413      	add	r3, r2
 8007400:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8007404:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007408:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800740c:	681b      	ldr	r3, [r3, #0]
 800740e:	781b      	ldrb	r3, [r3, #0]
 8007410:	011a      	lsls	r2, r3, #4
 8007412:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8007416:	4413      	add	r3, r2
 8007418:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800741c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8007420:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8007424:	881b      	ldrh	r3, [r3, #0]
 8007426:	b29b      	uxth	r3, r3
 8007428:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800742c:	b29a      	uxth	r2, r3
 800742e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8007432:	801a      	strh	r2, [r3, #0]
 8007434:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007438:	2b3e      	cmp	r3, #62	@ 0x3e
 800743a:	d923      	bls.n	8007484 <USB_EPStartXfer+0x1628>
 800743c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007440:	095b      	lsrs	r3, r3, #5
 8007442:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8007446:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800744a:	f003 031f 	and.w	r3, r3, #31
 800744e:	2b00      	cmp	r3, #0
 8007450:	d104      	bne.n	800745c <USB_EPStartXfer+0x1600>
 8007452:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8007456:	3b01      	subs	r3, #1
 8007458:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800745c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8007460:	881b      	ldrh	r3, [r3, #0]
 8007462:	b29a      	uxth	r2, r3
 8007464:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8007468:	b29b      	uxth	r3, r3
 800746a:	029b      	lsls	r3, r3, #10
 800746c:	b29b      	uxth	r3, r3
 800746e:	4313      	orrs	r3, r2
 8007470:	b29b      	uxth	r3, r3
 8007472:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007476:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800747a:	b29a      	uxth	r2, r3
 800747c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8007480:	801a      	strh	r2, [r3, #0]
 8007482:	e05c      	b.n	800753e <USB_EPStartXfer+0x16e2>
 8007484:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007488:	2b00      	cmp	r3, #0
 800748a:	d10c      	bne.n	80074a6 <USB_EPStartXfer+0x164a>
 800748c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8007490:	881b      	ldrh	r3, [r3, #0]
 8007492:	b29b      	uxth	r3, r3
 8007494:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007498:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800749c:	b29a      	uxth	r2, r3
 800749e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80074a2:	801a      	strh	r2, [r3, #0]
 80074a4:	e04b      	b.n	800753e <USB_EPStartXfer+0x16e2>
 80074a6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80074aa:	085b      	lsrs	r3, r3, #1
 80074ac:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80074b0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80074b4:	f003 0301 	and.w	r3, r3, #1
 80074b8:	2b00      	cmp	r3, #0
 80074ba:	d004      	beq.n	80074c6 <USB_EPStartXfer+0x166a>
 80074bc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80074c0:	3301      	adds	r3, #1
 80074c2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80074c6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80074ca:	881b      	ldrh	r3, [r3, #0]
 80074cc:	b29a      	uxth	r2, r3
 80074ce:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80074d2:	b29b      	uxth	r3, r3
 80074d4:	029b      	lsls	r3, r3, #10
 80074d6:	b29b      	uxth	r3, r3
 80074d8:	4313      	orrs	r3, r2
 80074da:	b29a      	uxth	r2, r3
 80074dc:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80074e0:	801a      	strh	r2, [r3, #0]
 80074e2:	e02c      	b.n	800753e <USB_EPStartXfer+0x16e2>
 80074e4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80074e8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80074ec:	681b      	ldr	r3, [r3, #0]
 80074ee:	785b      	ldrb	r3, [r3, #1]
 80074f0:	2b01      	cmp	r3, #1
 80074f2:	d124      	bne.n	800753e <USB_EPStartXfer+0x16e2>
 80074f4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80074f8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80074fc:	681b      	ldr	r3, [r3, #0]
 80074fe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007502:	b29b      	uxth	r3, r3
 8007504:	461a      	mov	r2, r3
 8007506:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800750a:	4413      	add	r3, r2
 800750c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8007510:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007514:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007518:	681b      	ldr	r3, [r3, #0]
 800751a:	781b      	ldrb	r3, [r3, #0]
 800751c:	011a      	lsls	r2, r3, #4
 800751e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8007522:	4413      	add	r3, r2
 8007524:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8007528:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800752c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007530:	b29a      	uxth	r2, r3
 8007532:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8007536:	801a      	strh	r2, [r3, #0]
 8007538:	e001      	b.n	800753e <USB_EPStartXfer+0x16e2>
      }
      else
      {
        return HAL_ERROR;
 800753a:	2301      	movs	r3, #1
 800753c:	e03a      	b.n	80075b4 <USB_EPStartXfer+0x1758>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800753e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007542:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007546:	681a      	ldr	r2, [r3, #0]
 8007548:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800754c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007550:	681b      	ldr	r3, [r3, #0]
 8007552:	781b      	ldrb	r3, [r3, #0]
 8007554:	009b      	lsls	r3, r3, #2
 8007556:	4413      	add	r3, r2
 8007558:	881b      	ldrh	r3, [r3, #0]
 800755a:	b29b      	uxth	r3, r3
 800755c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8007560:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007564:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8007568:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800756c:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8007570:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8007574:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8007578:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800757c:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8007580:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007584:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007588:	681a      	ldr	r2, [r3, #0]
 800758a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800758e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007592:	681b      	ldr	r3, [r3, #0]
 8007594:	781b      	ldrb	r3, [r3, #0]
 8007596:	009b      	lsls	r3, r3, #2
 8007598:	441a      	add	r2, r3
 800759a:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800759e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80075a2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80075a6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80075aa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80075ae:	b29b      	uxth	r3, r3
 80075b0:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 80075b2:	2300      	movs	r3, #0
}
 80075b4:	4618      	mov	r0, r3
 80075b6:	f507 7784 	add.w	r7, r7, #264	@ 0x108
 80075ba:	46bd      	mov	sp, r7
 80075bc:	bd80      	pop	{r7, pc}

080075be <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80075be:	b480      	push	{r7}
 80075c0:	b085      	sub	sp, #20
 80075c2:	af00      	add	r7, sp, #0
 80075c4:	6078      	str	r0, [r7, #4]
 80075c6:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 80075c8:	683b      	ldr	r3, [r7, #0]
 80075ca:	785b      	ldrb	r3, [r3, #1]
 80075cc:	2b00      	cmp	r3, #0
 80075ce:	d020      	beq.n	8007612 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 80075d0:	687a      	ldr	r2, [r7, #4]
 80075d2:	683b      	ldr	r3, [r7, #0]
 80075d4:	781b      	ldrb	r3, [r3, #0]
 80075d6:	009b      	lsls	r3, r3, #2
 80075d8:	4413      	add	r3, r2
 80075da:	881b      	ldrh	r3, [r3, #0]
 80075dc:	b29b      	uxth	r3, r3
 80075de:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80075e2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80075e6:	81bb      	strh	r3, [r7, #12]
 80075e8:	89bb      	ldrh	r3, [r7, #12]
 80075ea:	f083 0310 	eor.w	r3, r3, #16
 80075ee:	81bb      	strh	r3, [r7, #12]
 80075f0:	687a      	ldr	r2, [r7, #4]
 80075f2:	683b      	ldr	r3, [r7, #0]
 80075f4:	781b      	ldrb	r3, [r3, #0]
 80075f6:	009b      	lsls	r3, r3, #2
 80075f8:	441a      	add	r2, r3
 80075fa:	89bb      	ldrh	r3, [r7, #12]
 80075fc:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007600:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007604:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007608:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800760c:	b29b      	uxth	r3, r3
 800760e:	8013      	strh	r3, [r2, #0]
 8007610:	e01f      	b.n	8007652 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8007612:	687a      	ldr	r2, [r7, #4]
 8007614:	683b      	ldr	r3, [r7, #0]
 8007616:	781b      	ldrb	r3, [r3, #0]
 8007618:	009b      	lsls	r3, r3, #2
 800761a:	4413      	add	r3, r2
 800761c:	881b      	ldrh	r3, [r3, #0]
 800761e:	b29b      	uxth	r3, r3
 8007620:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8007624:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007628:	81fb      	strh	r3, [r7, #14]
 800762a:	89fb      	ldrh	r3, [r7, #14]
 800762c:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8007630:	81fb      	strh	r3, [r7, #14]
 8007632:	687a      	ldr	r2, [r7, #4]
 8007634:	683b      	ldr	r3, [r7, #0]
 8007636:	781b      	ldrb	r3, [r3, #0]
 8007638:	009b      	lsls	r3, r3, #2
 800763a:	441a      	add	r2, r3
 800763c:	89fb      	ldrh	r3, [r7, #14]
 800763e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007642:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007646:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800764a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800764e:	b29b      	uxth	r3, r3
 8007650:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8007652:	2300      	movs	r3, #0
}
 8007654:	4618      	mov	r0, r3
 8007656:	3714      	adds	r7, #20
 8007658:	46bd      	mov	sp, r7
 800765a:	bc80      	pop	{r7}
 800765c:	4770      	bx	lr

0800765e <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800765e:	b480      	push	{r7}
 8007660:	b087      	sub	sp, #28
 8007662:	af00      	add	r7, sp, #0
 8007664:	6078      	str	r0, [r7, #4]
 8007666:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8007668:	683b      	ldr	r3, [r7, #0]
 800766a:	7b1b      	ldrb	r3, [r3, #12]
 800766c:	2b00      	cmp	r3, #0
 800766e:	f040 809d 	bne.w	80077ac <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 8007672:	683b      	ldr	r3, [r7, #0]
 8007674:	785b      	ldrb	r3, [r3, #1]
 8007676:	2b00      	cmp	r3, #0
 8007678:	d04c      	beq.n	8007714 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800767a:	687a      	ldr	r2, [r7, #4]
 800767c:	683b      	ldr	r3, [r7, #0]
 800767e:	781b      	ldrb	r3, [r3, #0]
 8007680:	009b      	lsls	r3, r3, #2
 8007682:	4413      	add	r3, r2
 8007684:	881b      	ldrh	r3, [r3, #0]
 8007686:	823b      	strh	r3, [r7, #16]
 8007688:	8a3b      	ldrh	r3, [r7, #16]
 800768a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800768e:	2b00      	cmp	r3, #0
 8007690:	d01b      	beq.n	80076ca <USB_EPClearStall+0x6c>
 8007692:	687a      	ldr	r2, [r7, #4]
 8007694:	683b      	ldr	r3, [r7, #0]
 8007696:	781b      	ldrb	r3, [r3, #0]
 8007698:	009b      	lsls	r3, r3, #2
 800769a:	4413      	add	r3, r2
 800769c:	881b      	ldrh	r3, [r3, #0]
 800769e:	b29b      	uxth	r3, r3
 80076a0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80076a4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80076a8:	81fb      	strh	r3, [r7, #14]
 80076aa:	687a      	ldr	r2, [r7, #4]
 80076ac:	683b      	ldr	r3, [r7, #0]
 80076ae:	781b      	ldrb	r3, [r3, #0]
 80076b0:	009b      	lsls	r3, r3, #2
 80076b2:	441a      	add	r2, r3
 80076b4:	89fb      	ldrh	r3, [r7, #14]
 80076b6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80076ba:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80076be:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80076c2:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80076c6:	b29b      	uxth	r3, r3
 80076c8:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80076ca:	683b      	ldr	r3, [r7, #0]
 80076cc:	78db      	ldrb	r3, [r3, #3]
 80076ce:	2b01      	cmp	r3, #1
 80076d0:	d06c      	beq.n	80077ac <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80076d2:	687a      	ldr	r2, [r7, #4]
 80076d4:	683b      	ldr	r3, [r7, #0]
 80076d6:	781b      	ldrb	r3, [r3, #0]
 80076d8:	009b      	lsls	r3, r3, #2
 80076da:	4413      	add	r3, r2
 80076dc:	881b      	ldrh	r3, [r3, #0]
 80076de:	b29b      	uxth	r3, r3
 80076e0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80076e4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80076e8:	81bb      	strh	r3, [r7, #12]
 80076ea:	89bb      	ldrh	r3, [r7, #12]
 80076ec:	f083 0320 	eor.w	r3, r3, #32
 80076f0:	81bb      	strh	r3, [r7, #12]
 80076f2:	687a      	ldr	r2, [r7, #4]
 80076f4:	683b      	ldr	r3, [r7, #0]
 80076f6:	781b      	ldrb	r3, [r3, #0]
 80076f8:	009b      	lsls	r3, r3, #2
 80076fa:	441a      	add	r2, r3
 80076fc:	89bb      	ldrh	r3, [r7, #12]
 80076fe:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007702:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007706:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800770a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800770e:	b29b      	uxth	r3, r3
 8007710:	8013      	strh	r3, [r2, #0]
 8007712:	e04b      	b.n	80077ac <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007714:	687a      	ldr	r2, [r7, #4]
 8007716:	683b      	ldr	r3, [r7, #0]
 8007718:	781b      	ldrb	r3, [r3, #0]
 800771a:	009b      	lsls	r3, r3, #2
 800771c:	4413      	add	r3, r2
 800771e:	881b      	ldrh	r3, [r3, #0]
 8007720:	82fb      	strh	r3, [r7, #22]
 8007722:	8afb      	ldrh	r3, [r7, #22]
 8007724:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007728:	2b00      	cmp	r3, #0
 800772a:	d01b      	beq.n	8007764 <USB_EPClearStall+0x106>
 800772c:	687a      	ldr	r2, [r7, #4]
 800772e:	683b      	ldr	r3, [r7, #0]
 8007730:	781b      	ldrb	r3, [r3, #0]
 8007732:	009b      	lsls	r3, r3, #2
 8007734:	4413      	add	r3, r2
 8007736:	881b      	ldrh	r3, [r3, #0]
 8007738:	b29b      	uxth	r3, r3
 800773a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800773e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007742:	82bb      	strh	r3, [r7, #20]
 8007744:	687a      	ldr	r2, [r7, #4]
 8007746:	683b      	ldr	r3, [r7, #0]
 8007748:	781b      	ldrb	r3, [r3, #0]
 800774a:	009b      	lsls	r3, r3, #2
 800774c:	441a      	add	r2, r3
 800774e:	8abb      	ldrh	r3, [r7, #20]
 8007750:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007754:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007758:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800775c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007760:	b29b      	uxth	r3, r3
 8007762:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8007764:	687a      	ldr	r2, [r7, #4]
 8007766:	683b      	ldr	r3, [r7, #0]
 8007768:	781b      	ldrb	r3, [r3, #0]
 800776a:	009b      	lsls	r3, r3, #2
 800776c:	4413      	add	r3, r2
 800776e:	881b      	ldrh	r3, [r3, #0]
 8007770:	b29b      	uxth	r3, r3
 8007772:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8007776:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800777a:	827b      	strh	r3, [r7, #18]
 800777c:	8a7b      	ldrh	r3, [r7, #18]
 800777e:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8007782:	827b      	strh	r3, [r7, #18]
 8007784:	8a7b      	ldrh	r3, [r7, #18]
 8007786:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800778a:	827b      	strh	r3, [r7, #18]
 800778c:	687a      	ldr	r2, [r7, #4]
 800778e:	683b      	ldr	r3, [r7, #0]
 8007790:	781b      	ldrb	r3, [r3, #0]
 8007792:	009b      	lsls	r3, r3, #2
 8007794:	441a      	add	r2, r3
 8007796:	8a7b      	ldrh	r3, [r7, #18]
 8007798:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800779c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80077a0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80077a4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80077a8:	b29b      	uxth	r3, r3
 80077aa:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 80077ac:	2300      	movs	r3, #0
}
 80077ae:	4618      	mov	r0, r3
 80077b0:	371c      	adds	r7, #28
 80077b2:	46bd      	mov	sp, r7
 80077b4:	bc80      	pop	{r7}
 80077b6:	4770      	bx	lr

080077b8 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 80077b8:	b480      	push	{r7}
 80077ba:	b083      	sub	sp, #12
 80077bc:	af00      	add	r7, sp, #0
 80077be:	6078      	str	r0, [r7, #4]
 80077c0:	460b      	mov	r3, r1
 80077c2:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 80077c4:	78fb      	ldrb	r3, [r7, #3]
 80077c6:	2b00      	cmp	r3, #0
 80077c8:	d103      	bne.n	80077d2 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	2280      	movs	r2, #128	@ 0x80
 80077ce:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 80077d2:	2300      	movs	r3, #0
}
 80077d4:	4618      	mov	r0, r3
 80077d6:	370c      	adds	r7, #12
 80077d8:	46bd      	mov	sp, r7
 80077da:	bc80      	pop	{r7}
 80077dc:	4770      	bx	lr

080077de <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 80077de:	b480      	push	{r7}
 80077e0:	b083      	sub	sp, #12
 80077e2:	af00      	add	r7, sp, #0
 80077e4:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 80077e6:	2300      	movs	r3, #0
}
 80077e8:	4618      	mov	r0, r3
 80077ea:	370c      	adds	r7, #12
 80077ec:	46bd      	mov	sp, r7
 80077ee:	bc80      	pop	{r7}
 80077f0:	4770      	bx	lr

080077f2 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 80077f2:	b480      	push	{r7}
 80077f4:	b083      	sub	sp, #12
 80077f6:	af00      	add	r7, sp, #0
 80077f8:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 80077fa:	2300      	movs	r3, #0
}
 80077fc:	4618      	mov	r0, r3
 80077fe:	370c      	adds	r7, #12
 8007800:	46bd      	mov	sp, r7
 8007802:	bc80      	pop	{r7}
 8007804:	4770      	bx	lr

08007806 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
 8007806:	b480      	push	{r7}
 8007808:	b085      	sub	sp, #20
 800780a:	af00      	add	r7, sp, #0
 800780c:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8007814:	b29b      	uxth	r3, r3
 8007816:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8007818:	68fb      	ldr	r3, [r7, #12]
}
 800781a:	4618      	mov	r0, r3
 800781c:	3714      	adds	r7, #20
 800781e:	46bd      	mov	sp, r7
 8007820:	bc80      	pop	{r7}
 8007822:	4770      	bx	lr

08007824 <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 8007824:	b480      	push	{r7}
 8007826:	b083      	sub	sp, #12
 8007828:	af00      	add	r7, sp, #0
 800782a:	6078      	str	r0, [r7, #4]
 800782c:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 800782e:	2300      	movs	r3, #0
}
 8007830:	4618      	mov	r0, r3
 8007832:	370c      	adds	r7, #12
 8007834:	46bd      	mov	sp, r7
 8007836:	bc80      	pop	{r7}
 8007838:	4770      	bx	lr

0800783a <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800783a:	b480      	push	{r7}
 800783c:	b08b      	sub	sp, #44	@ 0x2c
 800783e:	af00      	add	r7, sp, #0
 8007840:	60f8      	str	r0, [r7, #12]
 8007842:	60b9      	str	r1, [r7, #8]
 8007844:	4611      	mov	r1, r2
 8007846:	461a      	mov	r2, r3
 8007848:	460b      	mov	r3, r1
 800784a:	80fb      	strh	r3, [r7, #6]
 800784c:	4613      	mov	r3, r2
 800784e:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8007850:	88bb      	ldrh	r3, [r7, #4]
 8007852:	3301      	adds	r3, #1
 8007854:	085b      	lsrs	r3, r3, #1
 8007856:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8007858:	68fb      	ldr	r3, [r7, #12]
 800785a:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800785c:	68bb      	ldr	r3, [r7, #8]
 800785e:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8007860:	88fb      	ldrh	r3, [r7, #6]
 8007862:	005a      	lsls	r2, r3, #1
 8007864:	697b      	ldr	r3, [r7, #20]
 8007866:	4413      	add	r3, r2
 8007868:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800786c:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 800786e:	69bb      	ldr	r3, [r7, #24]
 8007870:	627b      	str	r3, [r7, #36]	@ 0x24
 8007872:	e01e      	b.n	80078b2 <USB_WritePMA+0x78>
  {
    WrVal = pBuf[0];
 8007874:	69fb      	ldr	r3, [r7, #28]
 8007876:	781b      	ldrb	r3, [r3, #0]
 8007878:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 800787a:	69fb      	ldr	r3, [r7, #28]
 800787c:	3301      	adds	r3, #1
 800787e:	781b      	ldrb	r3, [r3, #0]
 8007880:	021b      	lsls	r3, r3, #8
 8007882:	b21a      	sxth	r2, r3
 8007884:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8007888:	4313      	orrs	r3, r2
 800788a:	b21b      	sxth	r3, r3
 800788c:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 800788e:	6a3b      	ldr	r3, [r7, #32]
 8007890:	8a7a      	ldrh	r2, [r7, #18]
 8007892:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8007894:	6a3b      	ldr	r3, [r7, #32]
 8007896:	3302      	adds	r3, #2
 8007898:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
 800789a:	6a3b      	ldr	r3, [r7, #32]
 800789c:	3302      	adds	r3, #2
 800789e:	623b      	str	r3, [r7, #32]
#endif /* PMA_ACCESS */

    pBuf++;
 80078a0:	69fb      	ldr	r3, [r7, #28]
 80078a2:	3301      	adds	r3, #1
 80078a4:	61fb      	str	r3, [r7, #28]
    pBuf++;
 80078a6:	69fb      	ldr	r3, [r7, #28]
 80078a8:	3301      	adds	r3, #1
 80078aa:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 80078ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80078ae:	3b01      	subs	r3, #1
 80078b0:	627b      	str	r3, [r7, #36]	@ 0x24
 80078b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80078b4:	2b00      	cmp	r3, #0
 80078b6:	d1dd      	bne.n	8007874 <USB_WritePMA+0x3a>
  }
}
 80078b8:	bf00      	nop
 80078ba:	bf00      	nop
 80078bc:	372c      	adds	r7, #44	@ 0x2c
 80078be:	46bd      	mov	sp, r7
 80078c0:	bc80      	pop	{r7}
 80078c2:	4770      	bx	lr

080078c4 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 80078c4:	b480      	push	{r7}
 80078c6:	b08b      	sub	sp, #44	@ 0x2c
 80078c8:	af00      	add	r7, sp, #0
 80078ca:	60f8      	str	r0, [r7, #12]
 80078cc:	60b9      	str	r1, [r7, #8]
 80078ce:	4611      	mov	r1, r2
 80078d0:	461a      	mov	r2, r3
 80078d2:	460b      	mov	r3, r1
 80078d4:	80fb      	strh	r3, [r7, #6]
 80078d6:	4613      	mov	r3, r2
 80078d8:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 80078da:	88bb      	ldrh	r3, [r7, #4]
 80078dc:	085b      	lsrs	r3, r3, #1
 80078de:	b29b      	uxth	r3, r3
 80078e0:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 80078e2:	68fb      	ldr	r3, [r7, #12]
 80078e4:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 80078e6:	68bb      	ldr	r3, [r7, #8]
 80078e8:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80078ea:	88fb      	ldrh	r3, [r7, #6]
 80078ec:	005a      	lsls	r2, r3, #1
 80078ee:	697b      	ldr	r3, [r7, #20]
 80078f0:	4413      	add	r3, r2
 80078f2:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80078f6:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 80078f8:	69bb      	ldr	r3, [r7, #24]
 80078fa:	627b      	str	r3, [r7, #36]	@ 0x24
 80078fc:	e01b      	b.n	8007936 <USB_ReadPMA+0x72>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 80078fe:	6a3b      	ldr	r3, [r7, #32]
 8007900:	881b      	ldrh	r3, [r3, #0]
 8007902:	b29b      	uxth	r3, r3
 8007904:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8007906:	6a3b      	ldr	r3, [r7, #32]
 8007908:	3302      	adds	r3, #2
 800790a:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 800790c:	693b      	ldr	r3, [r7, #16]
 800790e:	b2da      	uxtb	r2, r3
 8007910:	69fb      	ldr	r3, [r7, #28]
 8007912:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8007914:	69fb      	ldr	r3, [r7, #28]
 8007916:	3301      	adds	r3, #1
 8007918:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 800791a:	693b      	ldr	r3, [r7, #16]
 800791c:	0a1b      	lsrs	r3, r3, #8
 800791e:	b2da      	uxtb	r2, r3
 8007920:	69fb      	ldr	r3, [r7, #28]
 8007922:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8007924:	69fb      	ldr	r3, [r7, #28]
 8007926:	3301      	adds	r3, #1
 8007928:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 800792a:	6a3b      	ldr	r3, [r7, #32]
 800792c:	3302      	adds	r3, #2
 800792e:	623b      	str	r3, [r7, #32]
  for (count = n; count != 0U; count--)
 8007930:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007932:	3b01      	subs	r3, #1
 8007934:	627b      	str	r3, [r7, #36]	@ 0x24
 8007936:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007938:	2b00      	cmp	r3, #0
 800793a:	d1e0      	bne.n	80078fe <USB_ReadPMA+0x3a>
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 800793c:	88bb      	ldrh	r3, [r7, #4]
 800793e:	f003 0301 	and.w	r3, r3, #1
 8007942:	b29b      	uxth	r3, r3
 8007944:	2b00      	cmp	r3, #0
 8007946:	d007      	beq.n	8007958 <USB_ReadPMA+0x94>
  {
    RdVal = *pdwVal;
 8007948:	6a3b      	ldr	r3, [r7, #32]
 800794a:	881b      	ldrh	r3, [r3, #0]
 800794c:	b29b      	uxth	r3, r3
 800794e:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8007950:	693b      	ldr	r3, [r7, #16]
 8007952:	b2da      	uxtb	r2, r3
 8007954:	69fb      	ldr	r3, [r7, #28]
 8007956:	701a      	strb	r2, [r3, #0]
  }
}
 8007958:	bf00      	nop
 800795a:	372c      	adds	r7, #44	@ 0x2c
 800795c:	46bd      	mov	sp, r7
 800795e:	bc80      	pop	{r7}
 8007960:	4770      	bx	lr

08007962 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007962:	b580      	push	{r7, lr}
 8007964:	b084      	sub	sp, #16
 8007966:	af00      	add	r7, sp, #0
 8007968:	6078      	str	r0, [r7, #4]
 800796a:	460b      	mov	r3, r1
 800796c:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 800796e:	2300      	movs	r3, #0
 8007970:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	7c1b      	ldrb	r3, [r3, #16]
 8007976:	2b00      	cmp	r3, #0
 8007978:	d115      	bne.n	80079a6 <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800797a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800797e:	2202      	movs	r2, #2
 8007980:	2181      	movs	r1, #129	@ 0x81
 8007982:	6878      	ldr	r0, [r7, #4]
 8007984:	f001 fe8f 	bl	80096a6 <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	2201      	movs	r2, #1
 800798c:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800798e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8007992:	2202      	movs	r2, #2
 8007994:	2101      	movs	r1, #1
 8007996:	6878      	ldr	r0, [r7, #4]
 8007998:	f001 fe85 	bl	80096a6 <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	2201      	movs	r2, #1
 80079a0:	f8c3 216c 	str.w	r2, [r3, #364]	@ 0x16c
 80079a4:	e012      	b.n	80079cc <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80079a6:	2340      	movs	r3, #64	@ 0x40
 80079a8:	2202      	movs	r2, #2
 80079aa:	2181      	movs	r1, #129	@ 0x81
 80079ac:	6878      	ldr	r0, [r7, #4]
 80079ae:	f001 fe7a 	bl	80096a6 <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	2201      	movs	r2, #1
 80079b6:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80079b8:	2340      	movs	r3, #64	@ 0x40
 80079ba:	2202      	movs	r2, #2
 80079bc:	2101      	movs	r1, #1
 80079be:	6878      	ldr	r0, [r7, #4]
 80079c0:	f001 fe71 	bl	80096a6 <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	2201      	movs	r2, #1
 80079c8:	f8c3 216c 	str.w	r2, [r3, #364]	@ 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80079cc:	2308      	movs	r3, #8
 80079ce:	2203      	movs	r2, #3
 80079d0:	2182      	movs	r1, #130	@ 0x82
 80079d2:	6878      	ldr	r0, [r7, #4]
 80079d4:	f001 fe67 	bl	80096a6 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	2201      	movs	r2, #1
 80079dc:	641a      	str	r2, [r3, #64]	@ 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 80079de:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 80079e2:	f001 ff87 	bl	80098f4 <USBD_static_malloc>
 80079e6:	4602      	mov	r2, r0
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8

  if (pdev->pClassData == NULL)
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80079f4:	2b00      	cmp	r3, #0
 80079f6:	d102      	bne.n	80079fe <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 80079f8:	2301      	movs	r3, #1
 80079fa:	73fb      	strb	r3, [r7, #15]
 80079fc:	e026      	b.n	8007a4c <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007a04:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8007a0c:	681b      	ldr	r3, [r3, #0]
 8007a0e:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 8007a10:	68bb      	ldr	r3, [r7, #8]
 8007a12:	2200      	movs	r2, #0
 8007a14:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    hcdc->RxState = 0U;
 8007a18:	68bb      	ldr	r3, [r7, #8]
 8007a1a:	2200      	movs	r2, #0
 8007a1c:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	7c1b      	ldrb	r3, [r3, #16]
 8007a24:	2b00      	cmp	r3, #0
 8007a26:	d109      	bne.n	8007a3c <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8007a28:	68bb      	ldr	r3, [r7, #8]
 8007a2a:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8007a2e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8007a32:	2101      	movs	r1, #1
 8007a34:	6878      	ldr	r0, [r7, #4]
 8007a36:	f001 ff26 	bl	8009886 <USBD_LL_PrepareReceive>
 8007a3a:	e007      	b.n	8007a4c <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8007a3c:	68bb      	ldr	r3, [r7, #8]
 8007a3e:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8007a42:	2340      	movs	r3, #64	@ 0x40
 8007a44:	2101      	movs	r1, #1
 8007a46:	6878      	ldr	r0, [r7, #4]
 8007a48:	f001 ff1d 	bl	8009886 <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 8007a4c:	7bfb      	ldrb	r3, [r7, #15]
}
 8007a4e:	4618      	mov	r0, r3
 8007a50:	3710      	adds	r7, #16
 8007a52:	46bd      	mov	sp, r7
 8007a54:	bd80      	pop	{r7, pc}

08007a56 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007a56:	b580      	push	{r7, lr}
 8007a58:	b084      	sub	sp, #16
 8007a5a:	af00      	add	r7, sp, #0
 8007a5c:	6078      	str	r0, [r7, #4]
 8007a5e:	460b      	mov	r3, r1
 8007a60:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8007a62:	2300      	movs	r3, #0
 8007a64:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8007a66:	2181      	movs	r1, #129	@ 0x81
 8007a68:	6878      	ldr	r0, [r7, #4]
 8007a6a:	f001 fe42 	bl	80096f2 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	2200      	movs	r2, #0
 8007a72:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8007a74:	2101      	movs	r1, #1
 8007a76:	6878      	ldr	r0, [r7, #4]
 8007a78:	f001 fe3b 	bl	80096f2 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	2200      	movs	r2, #0
 8007a80:	f8c3 216c 	str.w	r2, [r3, #364]	@ 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8007a84:	2182      	movs	r1, #130	@ 0x82
 8007a86:	6878      	ldr	r0, [r7, #4]
 8007a88:	f001 fe33 	bl	80096f2 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	2200      	movs	r2, #0
 8007a90:	641a      	str	r2, [r3, #64]	@ 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007a98:	2b00      	cmp	r3, #0
 8007a9a:	d00e      	beq.n	8007aba <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8007aa2:	685b      	ldr	r3, [r3, #4]
 8007aa4:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007aac:	4618      	mov	r0, r3
 8007aae:	f001 ff2d 	bl	800990c <USBD_static_free>
    pdev->pClassData = NULL;
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	2200      	movs	r2, #0
 8007ab6:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  }

  return ret;
 8007aba:	7bfb      	ldrb	r3, [r7, #15]
}
 8007abc:	4618      	mov	r0, r3
 8007abe:	3710      	adds	r7, #16
 8007ac0:	46bd      	mov	sp, r7
 8007ac2:	bd80      	pop	{r7, pc}

08007ac4 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8007ac4:	b580      	push	{r7, lr}
 8007ac6:	b086      	sub	sp, #24
 8007ac8:	af00      	add	r7, sp, #0
 8007aca:	6078      	str	r0, [r7, #4]
 8007acc:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007ad4:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 8007ad6:	2300      	movs	r3, #0
 8007ad8:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 8007ada:	2300      	movs	r3, #0
 8007adc:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 8007ade:	2300      	movs	r3, #0
 8007ae0:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007ae2:	683b      	ldr	r3, [r7, #0]
 8007ae4:	781b      	ldrb	r3, [r3, #0]
 8007ae6:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8007aea:	2b00      	cmp	r3, #0
 8007aec:	d039      	beq.n	8007b62 <USBD_CDC_Setup+0x9e>
 8007aee:	2b20      	cmp	r3, #32
 8007af0:	d17f      	bne.n	8007bf2 <USBD_CDC_Setup+0x12e>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 8007af2:	683b      	ldr	r3, [r7, #0]
 8007af4:	88db      	ldrh	r3, [r3, #6]
 8007af6:	2b00      	cmp	r3, #0
 8007af8:	d029      	beq.n	8007b4e <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 8007afa:	683b      	ldr	r3, [r7, #0]
 8007afc:	781b      	ldrb	r3, [r3, #0]
 8007afe:	b25b      	sxtb	r3, r3
 8007b00:	2b00      	cmp	r3, #0
 8007b02:	da11      	bge.n	8007b28 <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8007b0a:	689b      	ldr	r3, [r3, #8]
 8007b0c:	683a      	ldr	r2, [r7, #0]
 8007b0e:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 8007b10:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8007b12:	683a      	ldr	r2, [r7, #0]
 8007b14:	88d2      	ldrh	r2, [r2, #6]
 8007b16:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8007b18:	6939      	ldr	r1, [r7, #16]
 8007b1a:	683b      	ldr	r3, [r7, #0]
 8007b1c:	88db      	ldrh	r3, [r3, #6]
 8007b1e:	461a      	mov	r2, r3
 8007b20:	6878      	ldr	r0, [r7, #4]
 8007b22:	f001 fa05 	bl	8008f30 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 8007b26:	e06b      	b.n	8007c00 <USBD_CDC_Setup+0x13c>
          hcdc->CmdOpCode = req->bRequest;
 8007b28:	683b      	ldr	r3, [r7, #0]
 8007b2a:	785a      	ldrb	r2, [r3, #1]
 8007b2c:	693b      	ldr	r3, [r7, #16]
 8007b2e:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8007b32:	683b      	ldr	r3, [r7, #0]
 8007b34:	88db      	ldrh	r3, [r3, #6]
 8007b36:	b2da      	uxtb	r2, r3
 8007b38:	693b      	ldr	r3, [r7, #16]
 8007b3a:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8007b3e:	6939      	ldr	r1, [r7, #16]
 8007b40:	683b      	ldr	r3, [r7, #0]
 8007b42:	88db      	ldrh	r3, [r3, #6]
 8007b44:	461a      	mov	r2, r3
 8007b46:	6878      	ldr	r0, [r7, #4]
 8007b48:	f001 fa20 	bl	8008f8c <USBD_CtlPrepareRx>
      break;
 8007b4c:	e058      	b.n	8007c00 <USBD_CDC_Setup+0x13c>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8007b54:	689b      	ldr	r3, [r3, #8]
 8007b56:	683a      	ldr	r2, [r7, #0]
 8007b58:	7850      	ldrb	r0, [r2, #1]
 8007b5a:	2200      	movs	r2, #0
 8007b5c:	6839      	ldr	r1, [r7, #0]
 8007b5e:	4798      	blx	r3
      break;
 8007b60:	e04e      	b.n	8007c00 <USBD_CDC_Setup+0x13c>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007b62:	683b      	ldr	r3, [r7, #0]
 8007b64:	785b      	ldrb	r3, [r3, #1]
 8007b66:	2b0b      	cmp	r3, #11
 8007b68:	d02e      	beq.n	8007bc8 <USBD_CDC_Setup+0x104>
 8007b6a:	2b0b      	cmp	r3, #11
 8007b6c:	dc38      	bgt.n	8007be0 <USBD_CDC_Setup+0x11c>
 8007b6e:	2b00      	cmp	r3, #0
 8007b70:	d002      	beq.n	8007b78 <USBD_CDC_Setup+0xb4>
 8007b72:	2b0a      	cmp	r3, #10
 8007b74:	d014      	beq.n	8007ba0 <USBD_CDC_Setup+0xdc>
 8007b76:	e033      	b.n	8007be0 <USBD_CDC_Setup+0x11c>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007b7e:	2b03      	cmp	r3, #3
 8007b80:	d107      	bne.n	8007b92 <USBD_CDC_Setup+0xce>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 8007b82:	f107 030c 	add.w	r3, r7, #12
 8007b86:	2202      	movs	r2, #2
 8007b88:	4619      	mov	r1, r3
 8007b8a:	6878      	ldr	r0, [r7, #4]
 8007b8c:	f001 f9d0 	bl	8008f30 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007b90:	e02e      	b.n	8007bf0 <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 8007b92:	6839      	ldr	r1, [r7, #0]
 8007b94:	6878      	ldr	r0, [r7, #4]
 8007b96:	f001 f961 	bl	8008e5c <USBD_CtlError>
            ret = USBD_FAIL;
 8007b9a:	2302      	movs	r3, #2
 8007b9c:	75fb      	strb	r3, [r7, #23]
          break;
 8007b9e:	e027      	b.n	8007bf0 <USBD_CDC_Setup+0x12c>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007ba6:	2b03      	cmp	r3, #3
 8007ba8:	d107      	bne.n	8007bba <USBD_CDC_Setup+0xf6>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 8007baa:	f107 030f 	add.w	r3, r7, #15
 8007bae:	2201      	movs	r2, #1
 8007bb0:	4619      	mov	r1, r3
 8007bb2:	6878      	ldr	r0, [r7, #4]
 8007bb4:	f001 f9bc 	bl	8008f30 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007bb8:	e01a      	b.n	8007bf0 <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 8007bba:	6839      	ldr	r1, [r7, #0]
 8007bbc:	6878      	ldr	r0, [r7, #4]
 8007bbe:	f001 f94d 	bl	8008e5c <USBD_CtlError>
            ret = USBD_FAIL;
 8007bc2:	2302      	movs	r3, #2
 8007bc4:	75fb      	strb	r3, [r7, #23]
          break;
 8007bc6:	e013      	b.n	8007bf0 <USBD_CDC_Setup+0x12c>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007bce:	2b03      	cmp	r3, #3
 8007bd0:	d00d      	beq.n	8007bee <USBD_CDC_Setup+0x12a>
          {
            USBD_CtlError(pdev, req);
 8007bd2:	6839      	ldr	r1, [r7, #0]
 8007bd4:	6878      	ldr	r0, [r7, #4]
 8007bd6:	f001 f941 	bl	8008e5c <USBD_CtlError>
            ret = USBD_FAIL;
 8007bda:	2302      	movs	r3, #2
 8007bdc:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8007bde:	e006      	b.n	8007bee <USBD_CDC_Setup+0x12a>

        default:
          USBD_CtlError(pdev, req);
 8007be0:	6839      	ldr	r1, [r7, #0]
 8007be2:	6878      	ldr	r0, [r7, #4]
 8007be4:	f001 f93a 	bl	8008e5c <USBD_CtlError>
          ret = USBD_FAIL;
 8007be8:	2302      	movs	r3, #2
 8007bea:	75fb      	strb	r3, [r7, #23]
          break;
 8007bec:	e000      	b.n	8007bf0 <USBD_CDC_Setup+0x12c>
          break;
 8007bee:	bf00      	nop
      }
      break;
 8007bf0:	e006      	b.n	8007c00 <USBD_CDC_Setup+0x13c>

    default:
      USBD_CtlError(pdev, req);
 8007bf2:	6839      	ldr	r1, [r7, #0]
 8007bf4:	6878      	ldr	r0, [r7, #4]
 8007bf6:	f001 f931 	bl	8008e5c <USBD_CtlError>
      ret = USBD_FAIL;
 8007bfa:	2302      	movs	r3, #2
 8007bfc:	75fb      	strb	r3, [r7, #23]
      break;
 8007bfe:	bf00      	nop
  }

  return ret;
 8007c00:	7dfb      	ldrb	r3, [r7, #23]
}
 8007c02:	4618      	mov	r0, r3
 8007c04:	3718      	adds	r7, #24
 8007c06:	46bd      	mov	sp, r7
 8007c08:	bd80      	pop	{r7, pc}

08007c0a <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007c0a:	b580      	push	{r7, lr}
 8007c0c:	b084      	sub	sp, #16
 8007c0e:	af00      	add	r7, sp, #0
 8007c10:	6078      	str	r0, [r7, #4]
 8007c12:	460b      	mov	r3, r1
 8007c14:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007c1c:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8007c24:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007c2c:	2b00      	cmp	r3, #0
 8007c2e:	d03a      	beq.n	8007ca6 <USBD_CDC_DataIn+0x9c>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8007c30:	78fa      	ldrb	r2, [r7, #3]
 8007c32:	6879      	ldr	r1, [r7, #4]
 8007c34:	4613      	mov	r3, r2
 8007c36:	009b      	lsls	r3, r3, #2
 8007c38:	4413      	add	r3, r2
 8007c3a:	009b      	lsls	r3, r3, #2
 8007c3c:	440b      	add	r3, r1
 8007c3e:	331c      	adds	r3, #28
 8007c40:	681b      	ldr	r3, [r3, #0]
 8007c42:	2b00      	cmp	r3, #0
 8007c44:	d029      	beq.n	8007c9a <USBD_CDC_DataIn+0x90>
 8007c46:	78fa      	ldrb	r2, [r7, #3]
 8007c48:	6879      	ldr	r1, [r7, #4]
 8007c4a:	4613      	mov	r3, r2
 8007c4c:	009b      	lsls	r3, r3, #2
 8007c4e:	4413      	add	r3, r2
 8007c50:	009b      	lsls	r3, r3, #2
 8007c52:	440b      	add	r3, r1
 8007c54:	331c      	adds	r3, #28
 8007c56:	681a      	ldr	r2, [r3, #0]
 8007c58:	78f9      	ldrb	r1, [r7, #3]
 8007c5a:	68b8      	ldr	r0, [r7, #8]
 8007c5c:	460b      	mov	r3, r1
 8007c5e:	009b      	lsls	r3, r3, #2
 8007c60:	440b      	add	r3, r1
 8007c62:	00db      	lsls	r3, r3, #3
 8007c64:	4403      	add	r3, r0
 8007c66:	3320      	adds	r3, #32
 8007c68:	681b      	ldr	r3, [r3, #0]
 8007c6a:	fbb2 f1f3 	udiv	r1, r2, r3
 8007c6e:	fb01 f303 	mul.w	r3, r1, r3
 8007c72:	1ad3      	subs	r3, r2, r3
 8007c74:	2b00      	cmp	r3, #0
 8007c76:	d110      	bne.n	8007c9a <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 8007c78:	78fa      	ldrb	r2, [r7, #3]
 8007c7a:	6879      	ldr	r1, [r7, #4]
 8007c7c:	4613      	mov	r3, r2
 8007c7e:	009b      	lsls	r3, r3, #2
 8007c80:	4413      	add	r3, r2
 8007c82:	009b      	lsls	r3, r3, #2
 8007c84:	440b      	add	r3, r1
 8007c86:	331c      	adds	r3, #28
 8007c88:	2200      	movs	r2, #0
 8007c8a:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8007c8c:	78f9      	ldrb	r1, [r7, #3]
 8007c8e:	2300      	movs	r3, #0
 8007c90:	2200      	movs	r2, #0
 8007c92:	6878      	ldr	r0, [r7, #4]
 8007c94:	f001 fdd4 	bl	8009840 <USBD_LL_Transmit>
 8007c98:	e003      	b.n	8007ca2 <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 8007c9a:	68fb      	ldr	r3, [r7, #12]
 8007c9c:	2200      	movs	r2, #0
 8007c9e:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    }
    return USBD_OK;
 8007ca2:	2300      	movs	r3, #0
 8007ca4:	e000      	b.n	8007ca8 <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 8007ca6:	2302      	movs	r3, #2
  }
}
 8007ca8:	4618      	mov	r0, r3
 8007caa:	3710      	adds	r7, #16
 8007cac:	46bd      	mov	sp, r7
 8007cae:	bd80      	pop	{r7, pc}

08007cb0 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007cb0:	b580      	push	{r7, lr}
 8007cb2:	b084      	sub	sp, #16
 8007cb4:	af00      	add	r7, sp, #0
 8007cb6:	6078      	str	r0, [r7, #4]
 8007cb8:	460b      	mov	r3, r1
 8007cba:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007cc2:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8007cc4:	78fb      	ldrb	r3, [r7, #3]
 8007cc6:	4619      	mov	r1, r3
 8007cc8:	6878      	ldr	r0, [r7, #4]
 8007cca:	f001 fdff 	bl	80098cc <USBD_LL_GetRxDataSize>
 8007cce:	4602      	mov	r2, r0
 8007cd0:	68fb      	ldr	r3, [r7, #12]
 8007cd2:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007cdc:	2b00      	cmp	r3, #0
 8007cde:	d00d      	beq.n	8007cfc <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8007ce6:	68db      	ldr	r3, [r3, #12]
 8007ce8:	68fa      	ldr	r2, [r7, #12]
 8007cea:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 8007cee:	68fa      	ldr	r2, [r7, #12]
 8007cf0:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 8007cf4:	4611      	mov	r1, r2
 8007cf6:	4798      	blx	r3

    return USBD_OK;
 8007cf8:	2300      	movs	r3, #0
 8007cfa:	e000      	b.n	8007cfe <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 8007cfc:	2302      	movs	r3, #2
  }
}
 8007cfe:	4618      	mov	r0, r3
 8007d00:	3710      	adds	r7, #16
 8007d02:	46bd      	mov	sp, r7
 8007d04:	bd80      	pop	{r7, pc}

08007d06 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8007d06:	b580      	push	{r7, lr}
 8007d08:	b084      	sub	sp, #16
 8007d0a:	af00      	add	r7, sp, #0
 8007d0c:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007d14:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8007d1c:	2b00      	cmp	r3, #0
 8007d1e:	d014      	beq.n	8007d4a <USBD_CDC_EP0_RxReady+0x44>
 8007d20:	68fb      	ldr	r3, [r7, #12]
 8007d22:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 8007d26:	2bff      	cmp	r3, #255	@ 0xff
 8007d28:	d00f      	beq.n	8007d4a <USBD_CDC_EP0_RxReady+0x44>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8007d30:	689b      	ldr	r3, [r3, #8]
 8007d32:	68fa      	ldr	r2, [r7, #12]
 8007d34:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 8007d38:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8007d3a:	68fa      	ldr	r2, [r7, #12]
 8007d3c:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8007d40:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8007d42:	68fb      	ldr	r3, [r7, #12]
 8007d44:	22ff      	movs	r2, #255	@ 0xff
 8007d46:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200

  }
  return USBD_OK;
 8007d4a:	2300      	movs	r3, #0
}
 8007d4c:	4618      	mov	r0, r3
 8007d4e:	3710      	adds	r7, #16
 8007d50:	46bd      	mov	sp, r7
 8007d52:	bd80      	pop	{r7, pc}

08007d54 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8007d54:	b480      	push	{r7}
 8007d56:	b083      	sub	sp, #12
 8007d58:	af00      	add	r7, sp, #0
 8007d5a:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	2243      	movs	r2, #67	@ 0x43
 8007d60:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 8007d62:	4b03      	ldr	r3, [pc, #12]	@ (8007d70 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8007d64:	4618      	mov	r0, r3
 8007d66:	370c      	adds	r7, #12
 8007d68:	46bd      	mov	sp, r7
 8007d6a:	bc80      	pop	{r7}
 8007d6c:	4770      	bx	lr
 8007d6e:	bf00      	nop
 8007d70:	20000094 	.word	0x20000094

08007d74 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8007d74:	b480      	push	{r7}
 8007d76:	b083      	sub	sp, #12
 8007d78:	af00      	add	r7, sp, #0
 8007d7a:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	2243      	movs	r2, #67	@ 0x43
 8007d80:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 8007d82:	4b03      	ldr	r3, [pc, #12]	@ (8007d90 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8007d84:	4618      	mov	r0, r3
 8007d86:	370c      	adds	r7, #12
 8007d88:	46bd      	mov	sp, r7
 8007d8a:	bc80      	pop	{r7}
 8007d8c:	4770      	bx	lr
 8007d8e:	bf00      	nop
 8007d90:	20000050 	.word	0x20000050

08007d94 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8007d94:	b480      	push	{r7}
 8007d96:	b083      	sub	sp, #12
 8007d98:	af00      	add	r7, sp, #0
 8007d9a:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	2243      	movs	r2, #67	@ 0x43
 8007da0:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 8007da2:	4b03      	ldr	r3, [pc, #12]	@ (8007db0 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8007da4:	4618      	mov	r0, r3
 8007da6:	370c      	adds	r7, #12
 8007da8:	46bd      	mov	sp, r7
 8007daa:	bc80      	pop	{r7}
 8007dac:	4770      	bx	lr
 8007dae:	bf00      	nop
 8007db0:	200000d8 	.word	0x200000d8

08007db4 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8007db4:	b480      	push	{r7}
 8007db6:	b083      	sub	sp, #12
 8007db8:	af00      	add	r7, sp, #0
 8007dba:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	220a      	movs	r2, #10
 8007dc0:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 8007dc2:	4b03      	ldr	r3, [pc, #12]	@ (8007dd0 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8007dc4:	4618      	mov	r0, r3
 8007dc6:	370c      	adds	r7, #12
 8007dc8:	46bd      	mov	sp, r7
 8007dca:	bc80      	pop	{r7}
 8007dcc:	4770      	bx	lr
 8007dce:	bf00      	nop
 8007dd0:	2000000c 	.word	0x2000000c

08007dd4 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 8007dd4:	b480      	push	{r7}
 8007dd6:	b085      	sub	sp, #20
 8007dd8:	af00      	add	r7, sp, #0
 8007dda:	6078      	str	r0, [r7, #4]
 8007ddc:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 8007dde:	2302      	movs	r3, #2
 8007de0:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 8007de2:	683b      	ldr	r3, [r7, #0]
 8007de4:	2b00      	cmp	r3, #0
 8007de6:	d005      	beq.n	8007df4 <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	683a      	ldr	r2, [r7, #0]
 8007dec:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
    ret = USBD_OK;
 8007df0:	2300      	movs	r3, #0
 8007df2:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8007df4:	7bfb      	ldrb	r3, [r7, #15]
}
 8007df6:	4618      	mov	r0, r3
 8007df8:	3714      	adds	r7, #20
 8007dfa:	46bd      	mov	sp, r7
 8007dfc:	bc80      	pop	{r7}
 8007dfe:	4770      	bx	lr

08007e00 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 8007e00:	b480      	push	{r7}
 8007e02:	b087      	sub	sp, #28
 8007e04:	af00      	add	r7, sp, #0
 8007e06:	60f8      	str	r0, [r7, #12]
 8007e08:	60b9      	str	r1, [r7, #8]
 8007e0a:	4613      	mov	r3, r2
 8007e0c:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8007e0e:	68fb      	ldr	r3, [r7, #12]
 8007e10:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007e14:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 8007e16:	697b      	ldr	r3, [r7, #20]
 8007e18:	68ba      	ldr	r2, [r7, #8]
 8007e1a:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 8007e1e:	88fa      	ldrh	r2, [r7, #6]
 8007e20:	697b      	ldr	r3, [r7, #20]
 8007e22:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return USBD_OK;
 8007e26:	2300      	movs	r3, #0
}
 8007e28:	4618      	mov	r0, r3
 8007e2a:	371c      	adds	r7, #28
 8007e2c:	46bd      	mov	sp, r7
 8007e2e:	bc80      	pop	{r7}
 8007e30:	4770      	bx	lr

08007e32 <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 8007e32:	b480      	push	{r7}
 8007e34:	b085      	sub	sp, #20
 8007e36:	af00      	add	r7, sp, #0
 8007e38:	6078      	str	r0, [r7, #4]
 8007e3a:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007e42:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 8007e44:	68fb      	ldr	r3, [r7, #12]
 8007e46:	683a      	ldr	r2, [r7, #0]
 8007e48:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return USBD_OK;
 8007e4c:	2300      	movs	r3, #0
}
 8007e4e:	4618      	mov	r0, r3
 8007e50:	3714      	adds	r7, #20
 8007e52:	46bd      	mov	sp, r7
 8007e54:	bc80      	pop	{r7}
 8007e56:	4770      	bx	lr

08007e58 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8007e58:	b580      	push	{r7, lr}
 8007e5a:	b084      	sub	sp, #16
 8007e5c:	af00      	add	r7, sp, #0
 8007e5e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007e66:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData != NULL)
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007e6e:	2b00      	cmp	r3, #0
 8007e70:	d01c      	beq.n	8007eac <USBD_CDC_TransmitPacket+0x54>
  {
    if (hcdc->TxState == 0U)
 8007e72:	68fb      	ldr	r3, [r7, #12]
 8007e74:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8007e78:	2b00      	cmp	r3, #0
 8007e7a:	d115      	bne.n	8007ea8 <USBD_CDC_TransmitPacket+0x50>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 8007e7c:	68fb      	ldr	r3, [r7, #12]
 8007e7e:	2201      	movs	r2, #1
 8007e80:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8007e84:	68fb      	ldr	r3, [r7, #12]
 8007e86:	f8d3 2210 	ldr.w	r2, [r3, #528]	@ 0x210
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8007e8e:	68fb      	ldr	r3, [r7, #12]
 8007e90:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
                       (uint16_t)hcdc->TxLength);
 8007e94:	68fb      	ldr	r3, [r7, #12]
 8007e96:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8007e9a:	b29b      	uxth	r3, r3
 8007e9c:	2181      	movs	r1, #129	@ 0x81
 8007e9e:	6878      	ldr	r0, [r7, #4]
 8007ea0:	f001 fcce 	bl	8009840 <USBD_LL_Transmit>

      return USBD_OK;
 8007ea4:	2300      	movs	r3, #0
 8007ea6:	e002      	b.n	8007eae <USBD_CDC_TransmitPacket+0x56>
    }
    else
    {
      return USBD_BUSY;
 8007ea8:	2301      	movs	r3, #1
 8007eaa:	e000      	b.n	8007eae <USBD_CDC_TransmitPacket+0x56>
    }
  }
  else
  {
    return USBD_FAIL;
 8007eac:	2302      	movs	r3, #2
  }
}
 8007eae:	4618      	mov	r0, r3
 8007eb0:	3710      	adds	r7, #16
 8007eb2:	46bd      	mov	sp, r7
 8007eb4:	bd80      	pop	{r7, pc}

08007eb6 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8007eb6:	b580      	push	{r7, lr}
 8007eb8:	b084      	sub	sp, #16
 8007eba:	af00      	add	r7, sp, #0
 8007ebc:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007ec4:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007ecc:	2b00      	cmp	r3, #0
 8007ece:	d017      	beq.n	8007f00 <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	7c1b      	ldrb	r3, [r3, #16]
 8007ed4:	2b00      	cmp	r3, #0
 8007ed6:	d109      	bne.n	8007eec <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8007ed8:	68fb      	ldr	r3, [r7, #12]
 8007eda:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8007ede:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8007ee2:	2101      	movs	r1, #1
 8007ee4:	6878      	ldr	r0, [r7, #4]
 8007ee6:	f001 fcce 	bl	8009886 <USBD_LL_PrepareReceive>
 8007eea:	e007      	b.n	8007efc <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8007eec:	68fb      	ldr	r3, [r7, #12]
 8007eee:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8007ef2:	2340      	movs	r3, #64	@ 0x40
 8007ef4:	2101      	movs	r1, #1
 8007ef6:	6878      	ldr	r0, [r7, #4]
 8007ef8:	f001 fcc5 	bl	8009886 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 8007efc:	2300      	movs	r3, #0
 8007efe:	e000      	b.n	8007f02 <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 8007f00:	2302      	movs	r3, #2
  }
}
 8007f02:	4618      	mov	r0, r3
 8007f04:	3710      	adds	r7, #16
 8007f06:	46bd      	mov	sp, r7
 8007f08:	bd80      	pop	{r7, pc}

08007f0a <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8007f0a:	b580      	push	{r7, lr}
 8007f0c:	b084      	sub	sp, #16
 8007f0e:	af00      	add	r7, sp, #0
 8007f10:	60f8      	str	r0, [r7, #12]
 8007f12:	60b9      	str	r1, [r7, #8]
 8007f14:	4613      	mov	r3, r2
 8007f16:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8007f18:	68fb      	ldr	r3, [r7, #12]
 8007f1a:	2b00      	cmp	r3, #0
 8007f1c:	d101      	bne.n	8007f22 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8007f1e:	2302      	movs	r3, #2
 8007f20:	e01a      	b.n	8007f58 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 8007f22:	68fb      	ldr	r3, [r7, #12]
 8007f24:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007f28:	2b00      	cmp	r3, #0
 8007f2a:	d003      	beq.n	8007f34 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8007f2c:	68fb      	ldr	r3, [r7, #12]
 8007f2e:	2200      	movs	r2, #0
 8007f30:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8007f34:	68bb      	ldr	r3, [r7, #8]
 8007f36:	2b00      	cmp	r3, #0
 8007f38:	d003      	beq.n	8007f42 <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 8007f3a:	68fb      	ldr	r3, [r7, #12]
 8007f3c:	68ba      	ldr	r2, [r7, #8]
 8007f3e:	f8c3 22b0 	str.w	r2, [r3, #688]	@ 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007f42:	68fb      	ldr	r3, [r7, #12]
 8007f44:	2201      	movs	r2, #1
 8007f46:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 8007f4a:	68fb      	ldr	r3, [r7, #12]
 8007f4c:	79fa      	ldrb	r2, [r7, #7]
 8007f4e:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8007f50:	68f8      	ldr	r0, [r7, #12]
 8007f52:	f001 fb33 	bl	80095bc <USBD_LL_Init>

  return USBD_OK;
 8007f56:	2300      	movs	r3, #0
}
 8007f58:	4618      	mov	r0, r3
 8007f5a:	3710      	adds	r7, #16
 8007f5c:	46bd      	mov	sp, r7
 8007f5e:	bd80      	pop	{r7, pc}

08007f60 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8007f60:	b480      	push	{r7}
 8007f62:	b085      	sub	sp, #20
 8007f64:	af00      	add	r7, sp, #0
 8007f66:	6078      	str	r0, [r7, #4]
 8007f68:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 8007f6a:	2300      	movs	r3, #0
 8007f6c:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 8007f6e:	683b      	ldr	r3, [r7, #0]
 8007f70:	2b00      	cmp	r3, #0
 8007f72:	d006      	beq.n	8007f82 <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	683a      	ldr	r2, [r7, #0]
 8007f78:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
    status = USBD_OK;
 8007f7c:	2300      	movs	r3, #0
 8007f7e:	73fb      	strb	r3, [r7, #15]
 8007f80:	e001      	b.n	8007f86 <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 8007f82:	2302      	movs	r3, #2
 8007f84:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8007f86:	7bfb      	ldrb	r3, [r7, #15]
}
 8007f88:	4618      	mov	r0, r3
 8007f8a:	3714      	adds	r7, #20
 8007f8c:	46bd      	mov	sp, r7
 8007f8e:	bc80      	pop	{r7}
 8007f90:	4770      	bx	lr

08007f92 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 8007f92:	b580      	push	{r7, lr}
 8007f94:	b082      	sub	sp, #8
 8007f96:	af00      	add	r7, sp, #0
 8007f98:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8007f9a:	6878      	ldr	r0, [r7, #4]
 8007f9c:	f001 fb68 	bl	8009670 <USBD_LL_Start>

  return USBD_OK;
 8007fa0:	2300      	movs	r3, #0
}
 8007fa2:	4618      	mov	r0, r3
 8007fa4:	3708      	adds	r7, #8
 8007fa6:	46bd      	mov	sp, r7
 8007fa8:	bd80      	pop	{r7, pc}

08007faa <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8007faa:	b480      	push	{r7}
 8007fac:	b083      	sub	sp, #12
 8007fae:	af00      	add	r7, sp, #0
 8007fb0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8007fb2:	2300      	movs	r3, #0
}
 8007fb4:	4618      	mov	r0, r3
 8007fb6:	370c      	adds	r7, #12
 8007fb8:	46bd      	mov	sp, r7
 8007fba:	bc80      	pop	{r7}
 8007fbc:	4770      	bx	lr

08007fbe <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8007fbe:	b580      	push	{r7, lr}
 8007fc0:	b084      	sub	sp, #16
 8007fc2:	af00      	add	r7, sp, #0
 8007fc4:	6078      	str	r0, [r7, #4]
 8007fc6:	460b      	mov	r3, r1
 8007fc8:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8007fca:	2302      	movs	r3, #2
 8007fcc:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007fd4:	2b00      	cmp	r3, #0
 8007fd6:	d00c      	beq.n	8007ff2 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007fde:	681b      	ldr	r3, [r3, #0]
 8007fe0:	78fa      	ldrb	r2, [r7, #3]
 8007fe2:	4611      	mov	r1, r2
 8007fe4:	6878      	ldr	r0, [r7, #4]
 8007fe6:	4798      	blx	r3
 8007fe8:	4603      	mov	r3, r0
 8007fea:	2b00      	cmp	r3, #0
 8007fec:	d101      	bne.n	8007ff2 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 8007fee:	2300      	movs	r3, #0
 8007ff0:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 8007ff2:	7bfb      	ldrb	r3, [r7, #15]
}
 8007ff4:	4618      	mov	r0, r3
 8007ff6:	3710      	adds	r7, #16
 8007ff8:	46bd      	mov	sp, r7
 8007ffa:	bd80      	pop	{r7, pc}

08007ffc <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8007ffc:	b580      	push	{r7, lr}
 8007ffe:	b082      	sub	sp, #8
 8008000:	af00      	add	r7, sp, #0
 8008002:	6078      	str	r0, [r7, #4]
 8008004:	460b      	mov	r3, r1
 8008006:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800800e:	685b      	ldr	r3, [r3, #4]
 8008010:	78fa      	ldrb	r2, [r7, #3]
 8008012:	4611      	mov	r1, r2
 8008014:	6878      	ldr	r0, [r7, #4]
 8008016:	4798      	blx	r3

  return USBD_OK;
 8008018:	2300      	movs	r3, #0
}
 800801a:	4618      	mov	r0, r3
 800801c:	3708      	adds	r7, #8
 800801e:	46bd      	mov	sp, r7
 8008020:	bd80      	pop	{r7, pc}

08008022 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8008022:	b580      	push	{r7, lr}
 8008024:	b082      	sub	sp, #8
 8008026:	af00      	add	r7, sp, #0
 8008028:	6078      	str	r0, [r7, #4]
 800802a:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 8008032:	6839      	ldr	r1, [r7, #0]
 8008034:	4618      	mov	r0, r3
 8008036:	f000 fed8 	bl	8008dea <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	2201      	movs	r2, #1
 800803e:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8008048:	461a      	mov	r2, r3
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 8008056:	f003 031f 	and.w	r3, r3, #31
 800805a:	2b02      	cmp	r3, #2
 800805c:	d016      	beq.n	800808c <USBD_LL_SetupStage+0x6a>
 800805e:	2b02      	cmp	r3, #2
 8008060:	d81c      	bhi.n	800809c <USBD_LL_SetupStage+0x7a>
 8008062:	2b00      	cmp	r3, #0
 8008064:	d002      	beq.n	800806c <USBD_LL_SetupStage+0x4a>
 8008066:	2b01      	cmp	r3, #1
 8008068:	d008      	beq.n	800807c <USBD_LL_SetupStage+0x5a>
 800806a:	e017      	b.n	800809c <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 8008072:	4619      	mov	r1, r3
 8008074:	6878      	ldr	r0, [r7, #4]
 8008076:	f000 f9cb 	bl	8008410 <USBD_StdDevReq>
      break;
 800807a:	e01a      	b.n	80080b2 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 8008082:	4619      	mov	r1, r3
 8008084:	6878      	ldr	r0, [r7, #4]
 8008086:	f000 fa2d 	bl	80084e4 <USBD_StdItfReq>
      break;
 800808a:	e012      	b.n	80080b2 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 8008092:	4619      	mov	r1, r3
 8008094:	6878      	ldr	r0, [r7, #4]
 8008096:	f000 fa6d 	bl	8008574 <USBD_StdEPReq>
      break;
 800809a:	e00a      	b.n	80080b2 <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 80080a2:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 80080a6:	b2db      	uxtb	r3, r3
 80080a8:	4619      	mov	r1, r3
 80080aa:	6878      	ldr	r0, [r7, #4]
 80080ac:	f001 fb40 	bl	8009730 <USBD_LL_StallEP>
      break;
 80080b0:	bf00      	nop
  }

  return USBD_OK;
 80080b2:	2300      	movs	r3, #0
}
 80080b4:	4618      	mov	r0, r3
 80080b6:	3708      	adds	r7, #8
 80080b8:	46bd      	mov	sp, r7
 80080ba:	bd80      	pop	{r7, pc}

080080bc <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80080bc:	b580      	push	{r7, lr}
 80080be:	b086      	sub	sp, #24
 80080c0:	af00      	add	r7, sp, #0
 80080c2:	60f8      	str	r0, [r7, #12]
 80080c4:	460b      	mov	r3, r1
 80080c6:	607a      	str	r2, [r7, #4]
 80080c8:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 80080ca:	7afb      	ldrb	r3, [r7, #11]
 80080cc:	2b00      	cmp	r3, #0
 80080ce:	d14b      	bne.n	8008168 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 80080d0:	68fb      	ldr	r3, [r7, #12]
 80080d2:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 80080d6:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80080d8:	68fb      	ldr	r3, [r7, #12]
 80080da:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 80080de:	2b03      	cmp	r3, #3
 80080e0:	d134      	bne.n	800814c <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 80080e2:	697b      	ldr	r3, [r7, #20]
 80080e4:	68da      	ldr	r2, [r3, #12]
 80080e6:	697b      	ldr	r3, [r7, #20]
 80080e8:	691b      	ldr	r3, [r3, #16]
 80080ea:	429a      	cmp	r2, r3
 80080ec:	d919      	bls.n	8008122 <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 80080ee:	697b      	ldr	r3, [r7, #20]
 80080f0:	68da      	ldr	r2, [r3, #12]
 80080f2:	697b      	ldr	r3, [r7, #20]
 80080f4:	691b      	ldr	r3, [r3, #16]
 80080f6:	1ad2      	subs	r2, r2, r3
 80080f8:	697b      	ldr	r3, [r7, #20]
 80080fa:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 80080fc:	697b      	ldr	r3, [r7, #20]
 80080fe:	68da      	ldr	r2, [r3, #12]
 8008100:	697b      	ldr	r3, [r7, #20]
 8008102:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8008104:	429a      	cmp	r2, r3
 8008106:	d203      	bcs.n	8008110 <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8008108:	697b      	ldr	r3, [r7, #20]
 800810a:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 800810c:	b29b      	uxth	r3, r3
 800810e:	e002      	b.n	8008116 <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8008110:	697b      	ldr	r3, [r7, #20]
 8008112:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8008114:	b29b      	uxth	r3, r3
 8008116:	461a      	mov	r2, r3
 8008118:	6879      	ldr	r1, [r7, #4]
 800811a:	68f8      	ldr	r0, [r7, #12]
 800811c:	f000 ff54 	bl	8008fc8 <USBD_CtlContinueRx>
 8008120:	e038      	b.n	8008194 <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8008122:	68fb      	ldr	r3, [r7, #12]
 8008124:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008128:	691b      	ldr	r3, [r3, #16]
 800812a:	2b00      	cmp	r3, #0
 800812c:	d00a      	beq.n	8008144 <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 800812e:	68fb      	ldr	r3, [r7, #12]
 8008130:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8008134:	2b03      	cmp	r3, #3
 8008136:	d105      	bne.n	8008144 <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8008138:	68fb      	ldr	r3, [r7, #12]
 800813a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800813e:	691b      	ldr	r3, [r3, #16]
 8008140:	68f8      	ldr	r0, [r7, #12]
 8008142:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8008144:	68f8      	ldr	r0, [r7, #12]
 8008146:	f000 ff51 	bl	8008fec <USBD_CtlSendStatus>
 800814a:	e023      	b.n	8008194 <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 800814c:	68fb      	ldr	r3, [r7, #12]
 800814e:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8008152:	2b05      	cmp	r3, #5
 8008154:	d11e      	bne.n	8008194 <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 8008156:	68fb      	ldr	r3, [r7, #12]
 8008158:	2200      	movs	r2, #0
 800815a:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
        USBD_LL_StallEP(pdev, 0U);
 800815e:	2100      	movs	r1, #0
 8008160:	68f8      	ldr	r0, [r7, #12]
 8008162:	f001 fae5 	bl	8009730 <USBD_LL_StallEP>
 8008166:	e015      	b.n	8008194 <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8008168:	68fb      	ldr	r3, [r7, #12]
 800816a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800816e:	699b      	ldr	r3, [r3, #24]
 8008170:	2b00      	cmp	r3, #0
 8008172:	d00d      	beq.n	8008190 <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8008174:	68fb      	ldr	r3, [r7, #12]
 8008176:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 800817a:	2b03      	cmp	r3, #3
 800817c:	d108      	bne.n	8008190 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 800817e:	68fb      	ldr	r3, [r7, #12]
 8008180:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008184:	699b      	ldr	r3, [r3, #24]
 8008186:	7afa      	ldrb	r2, [r7, #11]
 8008188:	4611      	mov	r1, r2
 800818a:	68f8      	ldr	r0, [r7, #12]
 800818c:	4798      	blx	r3
 800818e:	e001      	b.n	8008194 <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8008190:	2302      	movs	r3, #2
 8008192:	e000      	b.n	8008196 <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 8008194:	2300      	movs	r3, #0
}
 8008196:	4618      	mov	r0, r3
 8008198:	3718      	adds	r7, #24
 800819a:	46bd      	mov	sp, r7
 800819c:	bd80      	pop	{r7, pc}

0800819e <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800819e:	b580      	push	{r7, lr}
 80081a0:	b086      	sub	sp, #24
 80081a2:	af00      	add	r7, sp, #0
 80081a4:	60f8      	str	r0, [r7, #12]
 80081a6:	460b      	mov	r3, r1
 80081a8:	607a      	str	r2, [r7, #4]
 80081aa:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 80081ac:	7afb      	ldrb	r3, [r7, #11]
 80081ae:	2b00      	cmp	r3, #0
 80081b0:	d17f      	bne.n	80082b2 <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 80081b2:	68fb      	ldr	r3, [r7, #12]
 80081b4:	3314      	adds	r3, #20
 80081b6:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80081b8:	68fb      	ldr	r3, [r7, #12]
 80081ba:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 80081be:	2b02      	cmp	r3, #2
 80081c0:	d15c      	bne.n	800827c <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 80081c2:	697b      	ldr	r3, [r7, #20]
 80081c4:	68da      	ldr	r2, [r3, #12]
 80081c6:	697b      	ldr	r3, [r7, #20]
 80081c8:	691b      	ldr	r3, [r3, #16]
 80081ca:	429a      	cmp	r2, r3
 80081cc:	d915      	bls.n	80081fa <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 80081ce:	697b      	ldr	r3, [r7, #20]
 80081d0:	68da      	ldr	r2, [r3, #12]
 80081d2:	697b      	ldr	r3, [r7, #20]
 80081d4:	691b      	ldr	r3, [r3, #16]
 80081d6:	1ad2      	subs	r2, r2, r3
 80081d8:	697b      	ldr	r3, [r7, #20]
 80081da:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 80081dc:	697b      	ldr	r3, [r7, #20]
 80081de:	68db      	ldr	r3, [r3, #12]
 80081e0:	b29b      	uxth	r3, r3
 80081e2:	461a      	mov	r2, r3
 80081e4:	6879      	ldr	r1, [r7, #4]
 80081e6:	68f8      	ldr	r0, [r7, #12]
 80081e8:	f000 febe 	bl	8008f68 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80081ec:	2300      	movs	r3, #0
 80081ee:	2200      	movs	r2, #0
 80081f0:	2100      	movs	r1, #0
 80081f2:	68f8      	ldr	r0, [r7, #12]
 80081f4:	f001 fb47 	bl	8009886 <USBD_LL_PrepareReceive>
 80081f8:	e04e      	b.n	8008298 <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 80081fa:	697b      	ldr	r3, [r7, #20]
 80081fc:	689b      	ldr	r3, [r3, #8]
 80081fe:	697a      	ldr	r2, [r7, #20]
 8008200:	6912      	ldr	r2, [r2, #16]
 8008202:	fbb3 f1f2 	udiv	r1, r3, r2
 8008206:	fb01 f202 	mul.w	r2, r1, r2
 800820a:	1a9b      	subs	r3, r3, r2
 800820c:	2b00      	cmp	r3, #0
 800820e:	d11c      	bne.n	800824a <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 8008210:	697b      	ldr	r3, [r7, #20]
 8008212:	689a      	ldr	r2, [r3, #8]
 8008214:	697b      	ldr	r3, [r7, #20]
 8008216:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8008218:	429a      	cmp	r2, r3
 800821a:	d316      	bcc.n	800824a <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 800821c:	697b      	ldr	r3, [r7, #20]
 800821e:	689a      	ldr	r2, [r3, #8]
 8008220:	68fb      	ldr	r3, [r7, #12]
 8008222:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 8008226:	429a      	cmp	r2, r3
 8008228:	d20f      	bcs.n	800824a <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 800822a:	2200      	movs	r2, #0
 800822c:	2100      	movs	r1, #0
 800822e:	68f8      	ldr	r0, [r7, #12]
 8008230:	f000 fe9a 	bl	8008f68 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8008234:	68fb      	ldr	r3, [r7, #12]
 8008236:	2200      	movs	r2, #0
 8008238:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800823c:	2300      	movs	r3, #0
 800823e:	2200      	movs	r2, #0
 8008240:	2100      	movs	r1, #0
 8008242:	68f8      	ldr	r0, [r7, #12]
 8008244:	f001 fb1f 	bl	8009886 <USBD_LL_PrepareReceive>
 8008248:	e026      	b.n	8008298 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800824a:	68fb      	ldr	r3, [r7, #12]
 800824c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008250:	68db      	ldr	r3, [r3, #12]
 8008252:	2b00      	cmp	r3, #0
 8008254:	d00a      	beq.n	800826c <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8008256:	68fb      	ldr	r3, [r7, #12]
 8008258:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800825c:	2b03      	cmp	r3, #3
 800825e:	d105      	bne.n	800826c <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8008260:	68fb      	ldr	r3, [r7, #12]
 8008262:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008266:	68db      	ldr	r3, [r3, #12]
 8008268:	68f8      	ldr	r0, [r7, #12]
 800826a:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 800826c:	2180      	movs	r1, #128	@ 0x80
 800826e:	68f8      	ldr	r0, [r7, #12]
 8008270:	f001 fa5e 	bl	8009730 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 8008274:	68f8      	ldr	r0, [r7, #12]
 8008276:	f000 fecc 	bl	8009012 <USBD_CtlReceiveStatus>
 800827a:	e00d      	b.n	8008298 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800827c:	68fb      	ldr	r3, [r7, #12]
 800827e:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8008282:	2b04      	cmp	r3, #4
 8008284:	d004      	beq.n	8008290 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 8008286:	68fb      	ldr	r3, [r7, #12]
 8008288:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800828c:	2b00      	cmp	r3, #0
 800828e:	d103      	bne.n	8008298 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 8008290:	2180      	movs	r1, #128	@ 0x80
 8008292:	68f8      	ldr	r0, [r7, #12]
 8008294:	f001 fa4c 	bl	8009730 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 8008298:	68fb      	ldr	r3, [r7, #12]
 800829a:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 800829e:	2b01      	cmp	r3, #1
 80082a0:	d11d      	bne.n	80082de <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 80082a2:	68f8      	ldr	r0, [r7, #12]
 80082a4:	f7ff fe81 	bl	8007faa <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80082a8:	68fb      	ldr	r3, [r7, #12]
 80082aa:	2200      	movs	r2, #0
 80082ac:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 80082b0:	e015      	b.n	80082de <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 80082b2:	68fb      	ldr	r3, [r7, #12]
 80082b4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80082b8:	695b      	ldr	r3, [r3, #20]
 80082ba:	2b00      	cmp	r3, #0
 80082bc:	d00d      	beq.n	80082da <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 80082be:	68fb      	ldr	r3, [r7, #12]
 80082c0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 80082c4:	2b03      	cmp	r3, #3
 80082c6:	d108      	bne.n	80082da <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 80082c8:	68fb      	ldr	r3, [r7, #12]
 80082ca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80082ce:	695b      	ldr	r3, [r3, #20]
 80082d0:	7afa      	ldrb	r2, [r7, #11]
 80082d2:	4611      	mov	r1, r2
 80082d4:	68f8      	ldr	r0, [r7, #12]
 80082d6:	4798      	blx	r3
 80082d8:	e001      	b.n	80082de <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 80082da:	2302      	movs	r3, #2
 80082dc:	e000      	b.n	80082e0 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 80082de:	2300      	movs	r3, #0
}
 80082e0:	4618      	mov	r0, r3
 80082e2:	3718      	adds	r7, #24
 80082e4:	46bd      	mov	sp, r7
 80082e6:	bd80      	pop	{r7, pc}

080082e8 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80082e8:	b580      	push	{r7, lr}
 80082ea:	b082      	sub	sp, #8
 80082ec:	af00      	add	r7, sp, #0
 80082ee:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80082f0:	2340      	movs	r3, #64	@ 0x40
 80082f2:	2200      	movs	r2, #0
 80082f4:	2100      	movs	r1, #0
 80082f6:	6878      	ldr	r0, [r7, #4]
 80082f8:	f001 f9d5 	bl	80096a6 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	2201      	movs	r2, #1
 8008300:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	2240      	movs	r2, #64	@ 0x40
 8008308:	f8c3 2164 	str.w	r2, [r3, #356]	@ 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800830c:	2340      	movs	r3, #64	@ 0x40
 800830e:	2200      	movs	r2, #0
 8008310:	2180      	movs	r1, #128	@ 0x80
 8008312:	6878      	ldr	r0, [r7, #4]
 8008314:	f001 f9c7 	bl	80096a6 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	2201      	movs	r2, #1
 800831c:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	2240      	movs	r2, #64	@ 0x40
 8008322:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	2201      	movs	r2, #1
 8008328:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	2200      	movs	r2, #0
 8008330:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	2200      	movs	r2, #0
 8008338:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	2200      	movs	r2, #0
 800833e:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4

  if (pdev->pClassData)
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008348:	2b00      	cmp	r3, #0
 800834a:	d009      	beq.n	8008360 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008352:	685b      	ldr	r3, [r3, #4]
 8008354:	687a      	ldr	r2, [r7, #4]
 8008356:	6852      	ldr	r2, [r2, #4]
 8008358:	b2d2      	uxtb	r2, r2
 800835a:	4611      	mov	r1, r2
 800835c:	6878      	ldr	r0, [r7, #4]
 800835e:	4798      	blx	r3
  }

  return USBD_OK;
 8008360:	2300      	movs	r3, #0
}
 8008362:	4618      	mov	r0, r3
 8008364:	3708      	adds	r7, #8
 8008366:	46bd      	mov	sp, r7
 8008368:	bd80      	pop	{r7, pc}

0800836a <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800836a:	b480      	push	{r7}
 800836c:	b083      	sub	sp, #12
 800836e:	af00      	add	r7, sp, #0
 8008370:	6078      	str	r0, [r7, #4]
 8008372:	460b      	mov	r3, r1
 8008374:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	78fa      	ldrb	r2, [r7, #3]
 800837a:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800837c:	2300      	movs	r3, #0
}
 800837e:	4618      	mov	r0, r3
 8008380:	370c      	adds	r7, #12
 8008382:	46bd      	mov	sp, r7
 8008384:	bc80      	pop	{r7}
 8008386:	4770      	bx	lr

08008388 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8008388:	b480      	push	{r7}
 800838a:	b083      	sub	sp, #12
 800838c:	af00      	add	r7, sp, #0
 800838e:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	f893 229c 	ldrb.w	r2, [r3, #668]	@ 0x29c
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	2204      	movs	r2, #4
 80083a0:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 80083a4:	2300      	movs	r3, #0
}
 80083a6:	4618      	mov	r0, r3
 80083a8:	370c      	adds	r7, #12
 80083aa:	46bd      	mov	sp, r7
 80083ac:	bc80      	pop	{r7}
 80083ae:	4770      	bx	lr

080083b0 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80083b0:	b480      	push	{r7}
 80083b2:	b083      	sub	sp, #12
 80083b4:	af00      	add	r7, sp, #0
 80083b6:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80083be:	2b04      	cmp	r3, #4
 80083c0:	d105      	bne.n	80083ce <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	f893 229d 	ldrb.w	r2, [r3, #669]	@ 0x29d
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 80083ce:	2300      	movs	r3, #0
}
 80083d0:	4618      	mov	r0, r3
 80083d2:	370c      	adds	r7, #12
 80083d4:	46bd      	mov	sp, r7
 80083d6:	bc80      	pop	{r7}
 80083d8:	4770      	bx	lr

080083da <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80083da:	b580      	push	{r7, lr}
 80083dc:	b082      	sub	sp, #8
 80083de:	af00      	add	r7, sp, #0
 80083e0:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80083e8:	2b03      	cmp	r3, #3
 80083ea:	d10b      	bne.n	8008404 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80083f2:	69db      	ldr	r3, [r3, #28]
 80083f4:	2b00      	cmp	r3, #0
 80083f6:	d005      	beq.n	8008404 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80083fe:	69db      	ldr	r3, [r3, #28]
 8008400:	6878      	ldr	r0, [r7, #4]
 8008402:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8008404:	2300      	movs	r3, #0
}
 8008406:	4618      	mov	r0, r3
 8008408:	3708      	adds	r7, #8
 800840a:	46bd      	mov	sp, r7
 800840c:	bd80      	pop	{r7, pc}
	...

08008410 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 8008410:	b580      	push	{r7, lr}
 8008412:	b084      	sub	sp, #16
 8008414:	af00      	add	r7, sp, #0
 8008416:	6078      	str	r0, [r7, #4]
 8008418:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800841a:	2300      	movs	r3, #0
 800841c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800841e:	683b      	ldr	r3, [r7, #0]
 8008420:	781b      	ldrb	r3, [r3, #0]
 8008422:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8008426:	2b40      	cmp	r3, #64	@ 0x40
 8008428:	d005      	beq.n	8008436 <USBD_StdDevReq+0x26>
 800842a:	2b40      	cmp	r3, #64	@ 0x40
 800842c:	d84f      	bhi.n	80084ce <USBD_StdDevReq+0xbe>
 800842e:	2b00      	cmp	r3, #0
 8008430:	d009      	beq.n	8008446 <USBD_StdDevReq+0x36>
 8008432:	2b20      	cmp	r3, #32
 8008434:	d14b      	bne.n	80084ce <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800843c:	689b      	ldr	r3, [r3, #8]
 800843e:	6839      	ldr	r1, [r7, #0]
 8008440:	6878      	ldr	r0, [r7, #4]
 8008442:	4798      	blx	r3
      break;
 8008444:	e048      	b.n	80084d8 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008446:	683b      	ldr	r3, [r7, #0]
 8008448:	785b      	ldrb	r3, [r3, #1]
 800844a:	2b09      	cmp	r3, #9
 800844c:	d839      	bhi.n	80084c2 <USBD_StdDevReq+0xb2>
 800844e:	a201      	add	r2, pc, #4	@ (adr r2, 8008454 <USBD_StdDevReq+0x44>)
 8008450:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008454:	080084a5 	.word	0x080084a5
 8008458:	080084b9 	.word	0x080084b9
 800845c:	080084c3 	.word	0x080084c3
 8008460:	080084af 	.word	0x080084af
 8008464:	080084c3 	.word	0x080084c3
 8008468:	08008487 	.word	0x08008487
 800846c:	0800847d 	.word	0x0800847d
 8008470:	080084c3 	.word	0x080084c3
 8008474:	0800849b 	.word	0x0800849b
 8008478:	08008491 	.word	0x08008491
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800847c:	6839      	ldr	r1, [r7, #0]
 800847e:	6878      	ldr	r0, [r7, #4]
 8008480:	f000 f9dc 	bl	800883c <USBD_GetDescriptor>
          break;
 8008484:	e022      	b.n	80084cc <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8008486:	6839      	ldr	r1, [r7, #0]
 8008488:	6878      	ldr	r0, [r7, #4]
 800848a:	f000 fb3f 	bl	8008b0c <USBD_SetAddress>
          break;
 800848e:	e01d      	b.n	80084cc <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 8008490:	6839      	ldr	r1, [r7, #0]
 8008492:	6878      	ldr	r0, [r7, #4]
 8008494:	f000 fb7e 	bl	8008b94 <USBD_SetConfig>
          break;
 8008498:	e018      	b.n	80084cc <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800849a:	6839      	ldr	r1, [r7, #0]
 800849c:	6878      	ldr	r0, [r7, #4]
 800849e:	f000 fc07 	bl	8008cb0 <USBD_GetConfig>
          break;
 80084a2:	e013      	b.n	80084cc <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 80084a4:	6839      	ldr	r1, [r7, #0]
 80084a6:	6878      	ldr	r0, [r7, #4]
 80084a8:	f000 fc37 	bl	8008d1a <USBD_GetStatus>
          break;
 80084ac:	e00e      	b.n	80084cc <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 80084ae:	6839      	ldr	r1, [r7, #0]
 80084b0:	6878      	ldr	r0, [r7, #4]
 80084b2:	f000 fc65 	bl	8008d80 <USBD_SetFeature>
          break;
 80084b6:	e009      	b.n	80084cc <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 80084b8:	6839      	ldr	r1, [r7, #0]
 80084ba:	6878      	ldr	r0, [r7, #4]
 80084bc:	f000 fc74 	bl	8008da8 <USBD_ClrFeature>
          break;
 80084c0:	e004      	b.n	80084cc <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 80084c2:	6839      	ldr	r1, [r7, #0]
 80084c4:	6878      	ldr	r0, [r7, #4]
 80084c6:	f000 fcc9 	bl	8008e5c <USBD_CtlError>
          break;
 80084ca:	bf00      	nop
      }
      break;
 80084cc:	e004      	b.n	80084d8 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 80084ce:	6839      	ldr	r1, [r7, #0]
 80084d0:	6878      	ldr	r0, [r7, #4]
 80084d2:	f000 fcc3 	bl	8008e5c <USBD_CtlError>
      break;
 80084d6:	bf00      	nop
  }

  return ret;
 80084d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80084da:	4618      	mov	r0, r3
 80084dc:	3710      	adds	r7, #16
 80084de:	46bd      	mov	sp, r7
 80084e0:	bd80      	pop	{r7, pc}
 80084e2:	bf00      	nop

080084e4 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 80084e4:	b580      	push	{r7, lr}
 80084e6:	b084      	sub	sp, #16
 80084e8:	af00      	add	r7, sp, #0
 80084ea:	6078      	str	r0, [r7, #4]
 80084ec:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80084ee:	2300      	movs	r3, #0
 80084f0:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80084f2:	683b      	ldr	r3, [r7, #0]
 80084f4:	781b      	ldrb	r3, [r3, #0]
 80084f6:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80084fa:	2b40      	cmp	r3, #64	@ 0x40
 80084fc:	d005      	beq.n	800850a <USBD_StdItfReq+0x26>
 80084fe:	2b40      	cmp	r3, #64	@ 0x40
 8008500:	d82e      	bhi.n	8008560 <USBD_StdItfReq+0x7c>
 8008502:	2b00      	cmp	r3, #0
 8008504:	d001      	beq.n	800850a <USBD_StdItfReq+0x26>
 8008506:	2b20      	cmp	r3, #32
 8008508:	d12a      	bne.n	8008560 <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008510:	3b01      	subs	r3, #1
 8008512:	2b02      	cmp	r3, #2
 8008514:	d81d      	bhi.n	8008552 <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8008516:	683b      	ldr	r3, [r7, #0]
 8008518:	889b      	ldrh	r3, [r3, #4]
 800851a:	b2db      	uxtb	r3, r3
 800851c:	2b01      	cmp	r3, #1
 800851e:	d813      	bhi.n	8008548 <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008526:	689b      	ldr	r3, [r3, #8]
 8008528:	6839      	ldr	r1, [r7, #0]
 800852a:	6878      	ldr	r0, [r7, #4]
 800852c:	4798      	blx	r3
 800852e:	4603      	mov	r3, r0
 8008530:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8008532:	683b      	ldr	r3, [r7, #0]
 8008534:	88db      	ldrh	r3, [r3, #6]
 8008536:	2b00      	cmp	r3, #0
 8008538:	d110      	bne.n	800855c <USBD_StdItfReq+0x78>
 800853a:	7bfb      	ldrb	r3, [r7, #15]
 800853c:	2b00      	cmp	r3, #0
 800853e:	d10d      	bne.n	800855c <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 8008540:	6878      	ldr	r0, [r7, #4]
 8008542:	f000 fd53 	bl	8008fec <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8008546:	e009      	b.n	800855c <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 8008548:	6839      	ldr	r1, [r7, #0]
 800854a:	6878      	ldr	r0, [r7, #4]
 800854c:	f000 fc86 	bl	8008e5c <USBD_CtlError>
          break;
 8008550:	e004      	b.n	800855c <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 8008552:	6839      	ldr	r1, [r7, #0]
 8008554:	6878      	ldr	r0, [r7, #4]
 8008556:	f000 fc81 	bl	8008e5c <USBD_CtlError>
          break;
 800855a:	e000      	b.n	800855e <USBD_StdItfReq+0x7a>
          break;
 800855c:	bf00      	nop
      }
      break;
 800855e:	e004      	b.n	800856a <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 8008560:	6839      	ldr	r1, [r7, #0]
 8008562:	6878      	ldr	r0, [r7, #4]
 8008564:	f000 fc7a 	bl	8008e5c <USBD_CtlError>
      break;
 8008568:	bf00      	nop
  }

  return USBD_OK;
 800856a:	2300      	movs	r3, #0
}
 800856c:	4618      	mov	r0, r3
 800856e:	3710      	adds	r7, #16
 8008570:	46bd      	mov	sp, r7
 8008572:	bd80      	pop	{r7, pc}

08008574 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 8008574:	b580      	push	{r7, lr}
 8008576:	b084      	sub	sp, #16
 8008578:	af00      	add	r7, sp, #0
 800857a:	6078      	str	r0, [r7, #4]
 800857c:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800857e:	2300      	movs	r3, #0
 8008580:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 8008582:	683b      	ldr	r3, [r7, #0]
 8008584:	889b      	ldrh	r3, [r3, #4]
 8008586:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008588:	683b      	ldr	r3, [r7, #0]
 800858a:	781b      	ldrb	r3, [r3, #0]
 800858c:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8008590:	2b40      	cmp	r3, #64	@ 0x40
 8008592:	d007      	beq.n	80085a4 <USBD_StdEPReq+0x30>
 8008594:	2b40      	cmp	r3, #64	@ 0x40
 8008596:	f200 8146 	bhi.w	8008826 <USBD_StdEPReq+0x2b2>
 800859a:	2b00      	cmp	r3, #0
 800859c:	d00a      	beq.n	80085b4 <USBD_StdEPReq+0x40>
 800859e:	2b20      	cmp	r3, #32
 80085a0:	f040 8141 	bne.w	8008826 <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80085aa:	689b      	ldr	r3, [r3, #8]
 80085ac:	6839      	ldr	r1, [r7, #0]
 80085ae:	6878      	ldr	r0, [r7, #4]
 80085b0:	4798      	blx	r3
      break;
 80085b2:	e13d      	b.n	8008830 <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 80085b4:	683b      	ldr	r3, [r7, #0]
 80085b6:	781b      	ldrb	r3, [r3, #0]
 80085b8:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80085bc:	2b20      	cmp	r3, #32
 80085be:	d10a      	bne.n	80085d6 <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80085c6:	689b      	ldr	r3, [r3, #8]
 80085c8:	6839      	ldr	r1, [r7, #0]
 80085ca:	6878      	ldr	r0, [r7, #4]
 80085cc:	4798      	blx	r3
 80085ce:	4603      	mov	r3, r0
 80085d0:	73fb      	strb	r3, [r7, #15]

        return ret;
 80085d2:	7bfb      	ldrb	r3, [r7, #15]
 80085d4:	e12d      	b.n	8008832 <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 80085d6:	683b      	ldr	r3, [r7, #0]
 80085d8:	785b      	ldrb	r3, [r3, #1]
 80085da:	2b03      	cmp	r3, #3
 80085dc:	d007      	beq.n	80085ee <USBD_StdEPReq+0x7a>
 80085de:	2b03      	cmp	r3, #3
 80085e0:	f300 811b 	bgt.w	800881a <USBD_StdEPReq+0x2a6>
 80085e4:	2b00      	cmp	r3, #0
 80085e6:	d072      	beq.n	80086ce <USBD_StdEPReq+0x15a>
 80085e8:	2b01      	cmp	r3, #1
 80085ea:	d03a      	beq.n	8008662 <USBD_StdEPReq+0xee>
 80085ec:	e115      	b.n	800881a <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80085f4:	2b02      	cmp	r3, #2
 80085f6:	d002      	beq.n	80085fe <USBD_StdEPReq+0x8a>
 80085f8:	2b03      	cmp	r3, #3
 80085fa:	d015      	beq.n	8008628 <USBD_StdEPReq+0xb4>
 80085fc:	e02b      	b.n	8008656 <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80085fe:	7bbb      	ldrb	r3, [r7, #14]
 8008600:	2b00      	cmp	r3, #0
 8008602:	d00c      	beq.n	800861e <USBD_StdEPReq+0xaa>
 8008604:	7bbb      	ldrb	r3, [r7, #14]
 8008606:	2b80      	cmp	r3, #128	@ 0x80
 8008608:	d009      	beq.n	800861e <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800860a:	7bbb      	ldrb	r3, [r7, #14]
 800860c:	4619      	mov	r1, r3
 800860e:	6878      	ldr	r0, [r7, #4]
 8008610:	f001 f88e 	bl	8009730 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8008614:	2180      	movs	r1, #128	@ 0x80
 8008616:	6878      	ldr	r0, [r7, #4]
 8008618:	f001 f88a 	bl	8009730 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800861c:	e020      	b.n	8008660 <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 800861e:	6839      	ldr	r1, [r7, #0]
 8008620:	6878      	ldr	r0, [r7, #4]
 8008622:	f000 fc1b 	bl	8008e5c <USBD_CtlError>
              break;
 8008626:	e01b      	b.n	8008660 <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008628:	683b      	ldr	r3, [r7, #0]
 800862a:	885b      	ldrh	r3, [r3, #2]
 800862c:	2b00      	cmp	r3, #0
 800862e:	d10e      	bne.n	800864e <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 8008630:	7bbb      	ldrb	r3, [r7, #14]
 8008632:	2b00      	cmp	r3, #0
 8008634:	d00b      	beq.n	800864e <USBD_StdEPReq+0xda>
 8008636:	7bbb      	ldrb	r3, [r7, #14]
 8008638:	2b80      	cmp	r3, #128	@ 0x80
 800863a:	d008      	beq.n	800864e <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800863c:	683b      	ldr	r3, [r7, #0]
 800863e:	88db      	ldrh	r3, [r3, #6]
 8008640:	2b00      	cmp	r3, #0
 8008642:	d104      	bne.n	800864e <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 8008644:	7bbb      	ldrb	r3, [r7, #14]
 8008646:	4619      	mov	r1, r3
 8008648:	6878      	ldr	r0, [r7, #4]
 800864a:	f001 f871 	bl	8009730 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 800864e:	6878      	ldr	r0, [r7, #4]
 8008650:	f000 fccc 	bl	8008fec <USBD_CtlSendStatus>

              break;
 8008654:	e004      	b.n	8008660 <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 8008656:	6839      	ldr	r1, [r7, #0]
 8008658:	6878      	ldr	r0, [r7, #4]
 800865a:	f000 fbff 	bl	8008e5c <USBD_CtlError>
              break;
 800865e:	bf00      	nop
          }
          break;
 8008660:	e0e0      	b.n	8008824 <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008668:	2b02      	cmp	r3, #2
 800866a:	d002      	beq.n	8008672 <USBD_StdEPReq+0xfe>
 800866c:	2b03      	cmp	r3, #3
 800866e:	d015      	beq.n	800869c <USBD_StdEPReq+0x128>
 8008670:	e026      	b.n	80086c0 <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008672:	7bbb      	ldrb	r3, [r7, #14]
 8008674:	2b00      	cmp	r3, #0
 8008676:	d00c      	beq.n	8008692 <USBD_StdEPReq+0x11e>
 8008678:	7bbb      	ldrb	r3, [r7, #14]
 800867a:	2b80      	cmp	r3, #128	@ 0x80
 800867c:	d009      	beq.n	8008692 <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800867e:	7bbb      	ldrb	r3, [r7, #14]
 8008680:	4619      	mov	r1, r3
 8008682:	6878      	ldr	r0, [r7, #4]
 8008684:	f001 f854 	bl	8009730 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8008688:	2180      	movs	r1, #128	@ 0x80
 800868a:	6878      	ldr	r0, [r7, #4]
 800868c:	f001 f850 	bl	8009730 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008690:	e01c      	b.n	80086cc <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 8008692:	6839      	ldr	r1, [r7, #0]
 8008694:	6878      	ldr	r0, [r7, #4]
 8008696:	f000 fbe1 	bl	8008e5c <USBD_CtlError>
              break;
 800869a:	e017      	b.n	80086cc <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800869c:	683b      	ldr	r3, [r7, #0]
 800869e:	885b      	ldrh	r3, [r3, #2]
 80086a0:	2b00      	cmp	r3, #0
 80086a2:	d112      	bne.n	80086ca <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 80086a4:	7bbb      	ldrb	r3, [r7, #14]
 80086a6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80086aa:	2b00      	cmp	r3, #0
 80086ac:	d004      	beq.n	80086b8 <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 80086ae:	7bbb      	ldrb	r3, [r7, #14]
 80086b0:	4619      	mov	r1, r3
 80086b2:	6878      	ldr	r0, [r7, #4]
 80086b4:	f001 f85b 	bl	800976e <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 80086b8:	6878      	ldr	r0, [r7, #4]
 80086ba:	f000 fc97 	bl	8008fec <USBD_CtlSendStatus>
              }
              break;
 80086be:	e004      	b.n	80086ca <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 80086c0:	6839      	ldr	r1, [r7, #0]
 80086c2:	6878      	ldr	r0, [r7, #4]
 80086c4:	f000 fbca 	bl	8008e5c <USBD_CtlError>
              break;
 80086c8:	e000      	b.n	80086cc <USBD_StdEPReq+0x158>
              break;
 80086ca:	bf00      	nop
          }
          break;
 80086cc:	e0aa      	b.n	8008824 <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 80086ce:	687b      	ldr	r3, [r7, #4]
 80086d0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80086d4:	2b02      	cmp	r3, #2
 80086d6:	d002      	beq.n	80086de <USBD_StdEPReq+0x16a>
 80086d8:	2b03      	cmp	r3, #3
 80086da:	d032      	beq.n	8008742 <USBD_StdEPReq+0x1ce>
 80086dc:	e097      	b.n	800880e <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80086de:	7bbb      	ldrb	r3, [r7, #14]
 80086e0:	2b00      	cmp	r3, #0
 80086e2:	d007      	beq.n	80086f4 <USBD_StdEPReq+0x180>
 80086e4:	7bbb      	ldrb	r3, [r7, #14]
 80086e6:	2b80      	cmp	r3, #128	@ 0x80
 80086e8:	d004      	beq.n	80086f4 <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 80086ea:	6839      	ldr	r1, [r7, #0]
 80086ec:	6878      	ldr	r0, [r7, #4]
 80086ee:	f000 fbb5 	bl	8008e5c <USBD_CtlError>
                break;
 80086f2:	e091      	b.n	8008818 <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80086f4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80086f8:	2b00      	cmp	r3, #0
 80086fa:	da0b      	bge.n	8008714 <USBD_StdEPReq+0x1a0>
 80086fc:	7bbb      	ldrb	r3, [r7, #14]
 80086fe:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8008702:	4613      	mov	r3, r2
 8008704:	009b      	lsls	r3, r3, #2
 8008706:	4413      	add	r3, r2
 8008708:	009b      	lsls	r3, r3, #2
 800870a:	3310      	adds	r3, #16
 800870c:	687a      	ldr	r2, [r7, #4]
 800870e:	4413      	add	r3, r2
 8008710:	3304      	adds	r3, #4
 8008712:	e00b      	b.n	800872c <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8008714:	7bbb      	ldrb	r3, [r7, #14]
 8008716:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800871a:	4613      	mov	r3, r2
 800871c:	009b      	lsls	r3, r3, #2
 800871e:	4413      	add	r3, r2
 8008720:	009b      	lsls	r3, r3, #2
 8008722:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8008726:	687a      	ldr	r2, [r7, #4]
 8008728:	4413      	add	r3, r2
 800872a:	3304      	adds	r3, #4
 800872c:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800872e:	68bb      	ldr	r3, [r7, #8]
 8008730:	2200      	movs	r2, #0
 8008732:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8008734:	68bb      	ldr	r3, [r7, #8]
 8008736:	2202      	movs	r2, #2
 8008738:	4619      	mov	r1, r3
 800873a:	6878      	ldr	r0, [r7, #4]
 800873c:	f000 fbf8 	bl	8008f30 <USBD_CtlSendData>
              break;
 8008740:	e06a      	b.n	8008818 <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8008742:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008746:	2b00      	cmp	r3, #0
 8008748:	da11      	bge.n	800876e <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800874a:	7bbb      	ldrb	r3, [r7, #14]
 800874c:	f003 020f 	and.w	r2, r3, #15
 8008750:	6879      	ldr	r1, [r7, #4]
 8008752:	4613      	mov	r3, r2
 8008754:	009b      	lsls	r3, r3, #2
 8008756:	4413      	add	r3, r2
 8008758:	009b      	lsls	r3, r3, #2
 800875a:	440b      	add	r3, r1
 800875c:	3318      	adds	r3, #24
 800875e:	681b      	ldr	r3, [r3, #0]
 8008760:	2b00      	cmp	r3, #0
 8008762:	d117      	bne.n	8008794 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 8008764:	6839      	ldr	r1, [r7, #0]
 8008766:	6878      	ldr	r0, [r7, #4]
 8008768:	f000 fb78 	bl	8008e5c <USBD_CtlError>
                  break;
 800876c:	e054      	b.n	8008818 <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800876e:	7bbb      	ldrb	r3, [r7, #14]
 8008770:	f003 020f 	and.w	r2, r3, #15
 8008774:	6879      	ldr	r1, [r7, #4]
 8008776:	4613      	mov	r3, r2
 8008778:	009b      	lsls	r3, r3, #2
 800877a:	4413      	add	r3, r2
 800877c:	009b      	lsls	r3, r3, #2
 800877e:	440b      	add	r3, r1
 8008780:	f503 73ac 	add.w	r3, r3, #344	@ 0x158
 8008784:	681b      	ldr	r3, [r3, #0]
 8008786:	2b00      	cmp	r3, #0
 8008788:	d104      	bne.n	8008794 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 800878a:	6839      	ldr	r1, [r7, #0]
 800878c:	6878      	ldr	r0, [r7, #4]
 800878e:	f000 fb65 	bl	8008e5c <USBD_CtlError>
                  break;
 8008792:	e041      	b.n	8008818 <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008794:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008798:	2b00      	cmp	r3, #0
 800879a:	da0b      	bge.n	80087b4 <USBD_StdEPReq+0x240>
 800879c:	7bbb      	ldrb	r3, [r7, #14]
 800879e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80087a2:	4613      	mov	r3, r2
 80087a4:	009b      	lsls	r3, r3, #2
 80087a6:	4413      	add	r3, r2
 80087a8:	009b      	lsls	r3, r3, #2
 80087aa:	3310      	adds	r3, #16
 80087ac:	687a      	ldr	r2, [r7, #4]
 80087ae:	4413      	add	r3, r2
 80087b0:	3304      	adds	r3, #4
 80087b2:	e00b      	b.n	80087cc <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80087b4:	7bbb      	ldrb	r3, [r7, #14]
 80087b6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80087ba:	4613      	mov	r3, r2
 80087bc:	009b      	lsls	r3, r3, #2
 80087be:	4413      	add	r3, r2
 80087c0:	009b      	lsls	r3, r3, #2
 80087c2:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80087c6:	687a      	ldr	r2, [r7, #4]
 80087c8:	4413      	add	r3, r2
 80087ca:	3304      	adds	r3, #4
 80087cc:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80087ce:	7bbb      	ldrb	r3, [r7, #14]
 80087d0:	2b00      	cmp	r3, #0
 80087d2:	d002      	beq.n	80087da <USBD_StdEPReq+0x266>
 80087d4:	7bbb      	ldrb	r3, [r7, #14]
 80087d6:	2b80      	cmp	r3, #128	@ 0x80
 80087d8:	d103      	bne.n	80087e2 <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 80087da:	68bb      	ldr	r3, [r7, #8]
 80087dc:	2200      	movs	r2, #0
 80087de:	601a      	str	r2, [r3, #0]
 80087e0:	e00e      	b.n	8008800 <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 80087e2:	7bbb      	ldrb	r3, [r7, #14]
 80087e4:	4619      	mov	r1, r3
 80087e6:	6878      	ldr	r0, [r7, #4]
 80087e8:	f000 ffe0 	bl	80097ac <USBD_LL_IsStallEP>
 80087ec:	4603      	mov	r3, r0
 80087ee:	2b00      	cmp	r3, #0
 80087f0:	d003      	beq.n	80087fa <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 80087f2:	68bb      	ldr	r3, [r7, #8]
 80087f4:	2201      	movs	r2, #1
 80087f6:	601a      	str	r2, [r3, #0]
 80087f8:	e002      	b.n	8008800 <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 80087fa:	68bb      	ldr	r3, [r7, #8]
 80087fc:	2200      	movs	r2, #0
 80087fe:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8008800:	68bb      	ldr	r3, [r7, #8]
 8008802:	2202      	movs	r2, #2
 8008804:	4619      	mov	r1, r3
 8008806:	6878      	ldr	r0, [r7, #4]
 8008808:	f000 fb92 	bl	8008f30 <USBD_CtlSendData>
              break;
 800880c:	e004      	b.n	8008818 <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 800880e:	6839      	ldr	r1, [r7, #0]
 8008810:	6878      	ldr	r0, [r7, #4]
 8008812:	f000 fb23 	bl	8008e5c <USBD_CtlError>
              break;
 8008816:	bf00      	nop
          }
          break;
 8008818:	e004      	b.n	8008824 <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 800881a:	6839      	ldr	r1, [r7, #0]
 800881c:	6878      	ldr	r0, [r7, #4]
 800881e:	f000 fb1d 	bl	8008e5c <USBD_CtlError>
          break;
 8008822:	bf00      	nop
      }
      break;
 8008824:	e004      	b.n	8008830 <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 8008826:	6839      	ldr	r1, [r7, #0]
 8008828:	6878      	ldr	r0, [r7, #4]
 800882a:	f000 fb17 	bl	8008e5c <USBD_CtlError>
      break;
 800882e:	bf00      	nop
  }

  return ret;
 8008830:	7bfb      	ldrb	r3, [r7, #15]
}
 8008832:	4618      	mov	r0, r3
 8008834:	3710      	adds	r7, #16
 8008836:	46bd      	mov	sp, r7
 8008838:	bd80      	pop	{r7, pc}
	...

0800883c <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 800883c:	b580      	push	{r7, lr}
 800883e:	b084      	sub	sp, #16
 8008840:	af00      	add	r7, sp, #0
 8008842:	6078      	str	r0, [r7, #4]
 8008844:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8008846:	2300      	movs	r3, #0
 8008848:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800884a:	2300      	movs	r3, #0
 800884c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800884e:	2300      	movs	r3, #0
 8008850:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8008852:	683b      	ldr	r3, [r7, #0]
 8008854:	885b      	ldrh	r3, [r3, #2]
 8008856:	0a1b      	lsrs	r3, r3, #8
 8008858:	b29b      	uxth	r3, r3
 800885a:	3b01      	subs	r3, #1
 800885c:	2b06      	cmp	r3, #6
 800885e:	f200 8128 	bhi.w	8008ab2 <USBD_GetDescriptor+0x276>
 8008862:	a201      	add	r2, pc, #4	@ (adr r2, 8008868 <USBD_GetDescriptor+0x2c>)
 8008864:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008868:	08008885 	.word	0x08008885
 800886c:	0800889d 	.word	0x0800889d
 8008870:	080088dd 	.word	0x080088dd
 8008874:	08008ab3 	.word	0x08008ab3
 8008878:	08008ab3 	.word	0x08008ab3
 800887c:	08008a53 	.word	0x08008a53
 8008880:	08008a7f 	.word	0x08008a7f
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800888a:	681b      	ldr	r3, [r3, #0]
 800888c:	687a      	ldr	r2, [r7, #4]
 800888e:	7c12      	ldrb	r2, [r2, #16]
 8008890:	f107 0108 	add.w	r1, r7, #8
 8008894:	4610      	mov	r0, r2
 8008896:	4798      	blx	r3
 8008898:	60f8      	str	r0, [r7, #12]
      break;
 800889a:	e112      	b.n	8008ac2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	7c1b      	ldrb	r3, [r3, #16]
 80088a0:	2b00      	cmp	r3, #0
 80088a2:	d10d      	bne.n	80088c0 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80088aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80088ac:	f107 0208 	add.w	r2, r7, #8
 80088b0:	4610      	mov	r0, r2
 80088b2:	4798      	blx	r3
 80088b4:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80088b6:	68fb      	ldr	r3, [r7, #12]
 80088b8:	3301      	adds	r3, #1
 80088ba:	2202      	movs	r2, #2
 80088bc:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 80088be:	e100      	b.n	8008ac2 <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80088c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80088c8:	f107 0208 	add.w	r2, r7, #8
 80088cc:	4610      	mov	r0, r2
 80088ce:	4798      	blx	r3
 80088d0:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80088d2:	68fb      	ldr	r3, [r7, #12]
 80088d4:	3301      	adds	r3, #1
 80088d6:	2202      	movs	r2, #2
 80088d8:	701a      	strb	r2, [r3, #0]
      break;
 80088da:	e0f2      	b.n	8008ac2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 80088dc:	683b      	ldr	r3, [r7, #0]
 80088de:	885b      	ldrh	r3, [r3, #2]
 80088e0:	b2db      	uxtb	r3, r3
 80088e2:	2b05      	cmp	r3, #5
 80088e4:	f200 80ac 	bhi.w	8008a40 <USBD_GetDescriptor+0x204>
 80088e8:	a201      	add	r2, pc, #4	@ (adr r2, 80088f0 <USBD_GetDescriptor+0xb4>)
 80088ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80088ee:	bf00      	nop
 80088f0:	08008909 	.word	0x08008909
 80088f4:	0800893d 	.word	0x0800893d
 80088f8:	08008971 	.word	0x08008971
 80088fc:	080089a5 	.word	0x080089a5
 8008900:	080089d9 	.word	0x080089d9
 8008904:	08008a0d 	.word	0x08008a0d
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800890e:	685b      	ldr	r3, [r3, #4]
 8008910:	2b00      	cmp	r3, #0
 8008912:	d00b      	beq.n	800892c <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800891a:	685b      	ldr	r3, [r3, #4]
 800891c:	687a      	ldr	r2, [r7, #4]
 800891e:	7c12      	ldrb	r2, [r2, #16]
 8008920:	f107 0108 	add.w	r1, r7, #8
 8008924:	4610      	mov	r0, r2
 8008926:	4798      	blx	r3
 8008928:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800892a:	e091      	b.n	8008a50 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800892c:	6839      	ldr	r1, [r7, #0]
 800892e:	6878      	ldr	r0, [r7, #4]
 8008930:	f000 fa94 	bl	8008e5c <USBD_CtlError>
            err++;
 8008934:	7afb      	ldrb	r3, [r7, #11]
 8008936:	3301      	adds	r3, #1
 8008938:	72fb      	strb	r3, [r7, #11]
          break;
 800893a:	e089      	b.n	8008a50 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8008942:	689b      	ldr	r3, [r3, #8]
 8008944:	2b00      	cmp	r3, #0
 8008946:	d00b      	beq.n	8008960 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800894e:	689b      	ldr	r3, [r3, #8]
 8008950:	687a      	ldr	r2, [r7, #4]
 8008952:	7c12      	ldrb	r2, [r2, #16]
 8008954:	f107 0108 	add.w	r1, r7, #8
 8008958:	4610      	mov	r0, r2
 800895a:	4798      	blx	r3
 800895c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800895e:	e077      	b.n	8008a50 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008960:	6839      	ldr	r1, [r7, #0]
 8008962:	6878      	ldr	r0, [r7, #4]
 8008964:	f000 fa7a 	bl	8008e5c <USBD_CtlError>
            err++;
 8008968:	7afb      	ldrb	r3, [r7, #11]
 800896a:	3301      	adds	r3, #1
 800896c:	72fb      	strb	r3, [r7, #11]
          break;
 800896e:	e06f      	b.n	8008a50 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8008976:	68db      	ldr	r3, [r3, #12]
 8008978:	2b00      	cmp	r3, #0
 800897a:	d00b      	beq.n	8008994 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8008982:	68db      	ldr	r3, [r3, #12]
 8008984:	687a      	ldr	r2, [r7, #4]
 8008986:	7c12      	ldrb	r2, [r2, #16]
 8008988:	f107 0108 	add.w	r1, r7, #8
 800898c:	4610      	mov	r0, r2
 800898e:	4798      	blx	r3
 8008990:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008992:	e05d      	b.n	8008a50 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008994:	6839      	ldr	r1, [r7, #0]
 8008996:	6878      	ldr	r0, [r7, #4]
 8008998:	f000 fa60 	bl	8008e5c <USBD_CtlError>
            err++;
 800899c:	7afb      	ldrb	r3, [r7, #11]
 800899e:	3301      	adds	r3, #1
 80089a0:	72fb      	strb	r3, [r7, #11]
          break;
 80089a2:	e055      	b.n	8008a50 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 80089aa:	691b      	ldr	r3, [r3, #16]
 80089ac:	2b00      	cmp	r3, #0
 80089ae:	d00b      	beq.n	80089c8 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 80089b6:	691b      	ldr	r3, [r3, #16]
 80089b8:	687a      	ldr	r2, [r7, #4]
 80089ba:	7c12      	ldrb	r2, [r2, #16]
 80089bc:	f107 0108 	add.w	r1, r7, #8
 80089c0:	4610      	mov	r0, r2
 80089c2:	4798      	blx	r3
 80089c4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80089c6:	e043      	b.n	8008a50 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80089c8:	6839      	ldr	r1, [r7, #0]
 80089ca:	6878      	ldr	r0, [r7, #4]
 80089cc:	f000 fa46 	bl	8008e5c <USBD_CtlError>
            err++;
 80089d0:	7afb      	ldrb	r3, [r7, #11]
 80089d2:	3301      	adds	r3, #1
 80089d4:	72fb      	strb	r3, [r7, #11]
          break;
 80089d6:	e03b      	b.n	8008a50 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 80089de:	695b      	ldr	r3, [r3, #20]
 80089e0:	2b00      	cmp	r3, #0
 80089e2:	d00b      	beq.n	80089fc <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 80089ea:	695b      	ldr	r3, [r3, #20]
 80089ec:	687a      	ldr	r2, [r7, #4]
 80089ee:	7c12      	ldrb	r2, [r2, #16]
 80089f0:	f107 0108 	add.w	r1, r7, #8
 80089f4:	4610      	mov	r0, r2
 80089f6:	4798      	blx	r3
 80089f8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80089fa:	e029      	b.n	8008a50 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80089fc:	6839      	ldr	r1, [r7, #0]
 80089fe:	6878      	ldr	r0, [r7, #4]
 8008a00:	f000 fa2c 	bl	8008e5c <USBD_CtlError>
            err++;
 8008a04:	7afb      	ldrb	r3, [r7, #11]
 8008a06:	3301      	adds	r3, #1
 8008a08:	72fb      	strb	r3, [r7, #11]
          break;
 8008a0a:	e021      	b.n	8008a50 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8008a12:	699b      	ldr	r3, [r3, #24]
 8008a14:	2b00      	cmp	r3, #0
 8008a16:	d00b      	beq.n	8008a30 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8008a1e:	699b      	ldr	r3, [r3, #24]
 8008a20:	687a      	ldr	r2, [r7, #4]
 8008a22:	7c12      	ldrb	r2, [r2, #16]
 8008a24:	f107 0108 	add.w	r1, r7, #8
 8008a28:	4610      	mov	r0, r2
 8008a2a:	4798      	blx	r3
 8008a2c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008a2e:	e00f      	b.n	8008a50 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008a30:	6839      	ldr	r1, [r7, #0]
 8008a32:	6878      	ldr	r0, [r7, #4]
 8008a34:	f000 fa12 	bl	8008e5c <USBD_CtlError>
            err++;
 8008a38:	7afb      	ldrb	r3, [r7, #11]
 8008a3a:	3301      	adds	r3, #1
 8008a3c:	72fb      	strb	r3, [r7, #11]
          break;
 8008a3e:	e007      	b.n	8008a50 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 8008a40:	6839      	ldr	r1, [r7, #0]
 8008a42:	6878      	ldr	r0, [r7, #4]
 8008a44:	f000 fa0a 	bl	8008e5c <USBD_CtlError>
          err++;
 8008a48:	7afb      	ldrb	r3, [r7, #11]
 8008a4a:	3301      	adds	r3, #1
 8008a4c:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 8008a4e:	e038      	b.n	8008ac2 <USBD_GetDescriptor+0x286>
 8008a50:	e037      	b.n	8008ac2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008a52:	687b      	ldr	r3, [r7, #4]
 8008a54:	7c1b      	ldrb	r3, [r3, #16]
 8008a56:	2b00      	cmp	r3, #0
 8008a58:	d109      	bne.n	8008a6e <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8008a5a:	687b      	ldr	r3, [r7, #4]
 8008a5c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008a60:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008a62:	f107 0208 	add.w	r2, r7, #8
 8008a66:	4610      	mov	r0, r2
 8008a68:	4798      	blx	r3
 8008a6a:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008a6c:	e029      	b.n	8008ac2 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8008a6e:	6839      	ldr	r1, [r7, #0]
 8008a70:	6878      	ldr	r0, [r7, #4]
 8008a72:	f000 f9f3 	bl	8008e5c <USBD_CtlError>
        err++;
 8008a76:	7afb      	ldrb	r3, [r7, #11]
 8008a78:	3301      	adds	r3, #1
 8008a7a:	72fb      	strb	r3, [r7, #11]
      break;
 8008a7c:	e021      	b.n	8008ac2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008a7e:	687b      	ldr	r3, [r7, #4]
 8008a80:	7c1b      	ldrb	r3, [r3, #16]
 8008a82:	2b00      	cmp	r3, #0
 8008a84:	d10d      	bne.n	8008aa2 <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8008a86:	687b      	ldr	r3, [r7, #4]
 8008a88:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008a8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008a8e:	f107 0208 	add.w	r2, r7, #8
 8008a92:	4610      	mov	r0, r2
 8008a94:	4798      	blx	r3
 8008a96:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8008a98:	68fb      	ldr	r3, [r7, #12]
 8008a9a:	3301      	adds	r3, #1
 8008a9c:	2207      	movs	r2, #7
 8008a9e:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008aa0:	e00f      	b.n	8008ac2 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8008aa2:	6839      	ldr	r1, [r7, #0]
 8008aa4:	6878      	ldr	r0, [r7, #4]
 8008aa6:	f000 f9d9 	bl	8008e5c <USBD_CtlError>
        err++;
 8008aaa:	7afb      	ldrb	r3, [r7, #11]
 8008aac:	3301      	adds	r3, #1
 8008aae:	72fb      	strb	r3, [r7, #11]
      break;
 8008ab0:	e007      	b.n	8008ac2 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8008ab2:	6839      	ldr	r1, [r7, #0]
 8008ab4:	6878      	ldr	r0, [r7, #4]
 8008ab6:	f000 f9d1 	bl	8008e5c <USBD_CtlError>
      err++;
 8008aba:	7afb      	ldrb	r3, [r7, #11]
 8008abc:	3301      	adds	r3, #1
 8008abe:	72fb      	strb	r3, [r7, #11]
      break;
 8008ac0:	bf00      	nop
  }

  if (err != 0U)
 8008ac2:	7afb      	ldrb	r3, [r7, #11]
 8008ac4:	2b00      	cmp	r3, #0
 8008ac6:	d11c      	bne.n	8008b02 <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 8008ac8:	893b      	ldrh	r3, [r7, #8]
 8008aca:	2b00      	cmp	r3, #0
 8008acc:	d011      	beq.n	8008af2 <USBD_GetDescriptor+0x2b6>
 8008ace:	683b      	ldr	r3, [r7, #0]
 8008ad0:	88db      	ldrh	r3, [r3, #6]
 8008ad2:	2b00      	cmp	r3, #0
 8008ad4:	d00d      	beq.n	8008af2 <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 8008ad6:	683b      	ldr	r3, [r7, #0]
 8008ad8:	88da      	ldrh	r2, [r3, #6]
 8008ada:	893b      	ldrh	r3, [r7, #8]
 8008adc:	4293      	cmp	r3, r2
 8008ade:	bf28      	it	cs
 8008ae0:	4613      	movcs	r3, r2
 8008ae2:	b29b      	uxth	r3, r3
 8008ae4:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8008ae6:	893b      	ldrh	r3, [r7, #8]
 8008ae8:	461a      	mov	r2, r3
 8008aea:	68f9      	ldr	r1, [r7, #12]
 8008aec:	6878      	ldr	r0, [r7, #4]
 8008aee:	f000 fa1f 	bl	8008f30 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 8008af2:	683b      	ldr	r3, [r7, #0]
 8008af4:	88db      	ldrh	r3, [r3, #6]
 8008af6:	2b00      	cmp	r3, #0
 8008af8:	d104      	bne.n	8008b04 <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 8008afa:	6878      	ldr	r0, [r7, #4]
 8008afc:	f000 fa76 	bl	8008fec <USBD_CtlSendStatus>
 8008b00:	e000      	b.n	8008b04 <USBD_GetDescriptor+0x2c8>
    return;
 8008b02:	bf00      	nop
    }
  }
}
 8008b04:	3710      	adds	r7, #16
 8008b06:	46bd      	mov	sp, r7
 8008b08:	bd80      	pop	{r7, pc}
 8008b0a:	bf00      	nop

08008b0c <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8008b0c:	b580      	push	{r7, lr}
 8008b0e:	b084      	sub	sp, #16
 8008b10:	af00      	add	r7, sp, #0
 8008b12:	6078      	str	r0, [r7, #4]
 8008b14:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8008b16:	683b      	ldr	r3, [r7, #0]
 8008b18:	889b      	ldrh	r3, [r3, #4]
 8008b1a:	2b00      	cmp	r3, #0
 8008b1c:	d130      	bne.n	8008b80 <USBD_SetAddress+0x74>
 8008b1e:	683b      	ldr	r3, [r7, #0]
 8008b20:	88db      	ldrh	r3, [r3, #6]
 8008b22:	2b00      	cmp	r3, #0
 8008b24:	d12c      	bne.n	8008b80 <USBD_SetAddress+0x74>
 8008b26:	683b      	ldr	r3, [r7, #0]
 8008b28:	885b      	ldrh	r3, [r3, #2]
 8008b2a:	2b7f      	cmp	r3, #127	@ 0x7f
 8008b2c:	d828      	bhi.n	8008b80 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8008b2e:	683b      	ldr	r3, [r7, #0]
 8008b30:	885b      	ldrh	r3, [r3, #2]
 8008b32:	b2db      	uxtb	r3, r3
 8008b34:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008b38:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008b3a:	687b      	ldr	r3, [r7, #4]
 8008b3c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008b40:	2b03      	cmp	r3, #3
 8008b42:	d104      	bne.n	8008b4e <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8008b44:	6839      	ldr	r1, [r7, #0]
 8008b46:	6878      	ldr	r0, [r7, #4]
 8008b48:	f000 f988 	bl	8008e5c <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008b4c:	e01d      	b.n	8008b8a <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	7bfa      	ldrb	r2, [r7, #15]
 8008b52:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 8008b56:	7bfb      	ldrb	r3, [r7, #15]
 8008b58:	4619      	mov	r1, r3
 8008b5a:	6878      	ldr	r0, [r7, #4]
 8008b5c:	f000 fe51 	bl	8009802 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8008b60:	6878      	ldr	r0, [r7, #4]
 8008b62:	f000 fa43 	bl	8008fec <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8008b66:	7bfb      	ldrb	r3, [r7, #15]
 8008b68:	2b00      	cmp	r3, #0
 8008b6a:	d004      	beq.n	8008b76 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	2202      	movs	r2, #2
 8008b70:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008b74:	e009      	b.n	8008b8a <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8008b76:	687b      	ldr	r3, [r7, #4]
 8008b78:	2201      	movs	r2, #1
 8008b7a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008b7e:	e004      	b.n	8008b8a <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8008b80:	6839      	ldr	r1, [r7, #0]
 8008b82:	6878      	ldr	r0, [r7, #4]
 8008b84:	f000 f96a 	bl	8008e5c <USBD_CtlError>
  }
}
 8008b88:	bf00      	nop
 8008b8a:	bf00      	nop
 8008b8c:	3710      	adds	r7, #16
 8008b8e:	46bd      	mov	sp, r7
 8008b90:	bd80      	pop	{r7, pc}
	...

08008b94 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008b94:	b580      	push	{r7, lr}
 8008b96:	b082      	sub	sp, #8
 8008b98:	af00      	add	r7, sp, #0
 8008b9a:	6078      	str	r0, [r7, #4]
 8008b9c:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8008b9e:	683b      	ldr	r3, [r7, #0]
 8008ba0:	885b      	ldrh	r3, [r3, #2]
 8008ba2:	b2da      	uxtb	r2, r3
 8008ba4:	4b41      	ldr	r3, [pc, #260]	@ (8008cac <USBD_SetConfig+0x118>)
 8008ba6:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8008ba8:	4b40      	ldr	r3, [pc, #256]	@ (8008cac <USBD_SetConfig+0x118>)
 8008baa:	781b      	ldrb	r3, [r3, #0]
 8008bac:	2b01      	cmp	r3, #1
 8008bae:	d904      	bls.n	8008bba <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 8008bb0:	6839      	ldr	r1, [r7, #0]
 8008bb2:	6878      	ldr	r0, [r7, #4]
 8008bb4:	f000 f952 	bl	8008e5c <USBD_CtlError>
 8008bb8:	e075      	b.n	8008ca6 <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 8008bba:	687b      	ldr	r3, [r7, #4]
 8008bbc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008bc0:	2b02      	cmp	r3, #2
 8008bc2:	d002      	beq.n	8008bca <USBD_SetConfig+0x36>
 8008bc4:	2b03      	cmp	r3, #3
 8008bc6:	d023      	beq.n	8008c10 <USBD_SetConfig+0x7c>
 8008bc8:	e062      	b.n	8008c90 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 8008bca:	4b38      	ldr	r3, [pc, #224]	@ (8008cac <USBD_SetConfig+0x118>)
 8008bcc:	781b      	ldrb	r3, [r3, #0]
 8008bce:	2b00      	cmp	r3, #0
 8008bd0:	d01a      	beq.n	8008c08 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 8008bd2:	4b36      	ldr	r3, [pc, #216]	@ (8008cac <USBD_SetConfig+0x118>)
 8008bd4:	781b      	ldrb	r3, [r3, #0]
 8008bd6:	461a      	mov	r2, r3
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	2203      	movs	r2, #3
 8008be0:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8008be4:	4b31      	ldr	r3, [pc, #196]	@ (8008cac <USBD_SetConfig+0x118>)
 8008be6:	781b      	ldrb	r3, [r3, #0]
 8008be8:	4619      	mov	r1, r3
 8008bea:	6878      	ldr	r0, [r7, #4]
 8008bec:	f7ff f9e7 	bl	8007fbe <USBD_SetClassConfig>
 8008bf0:	4603      	mov	r3, r0
 8008bf2:	2b02      	cmp	r3, #2
 8008bf4:	d104      	bne.n	8008c00 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 8008bf6:	6839      	ldr	r1, [r7, #0]
 8008bf8:	6878      	ldr	r0, [r7, #4]
 8008bfa:	f000 f92f 	bl	8008e5c <USBD_CtlError>
            return;
 8008bfe:	e052      	b.n	8008ca6 <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 8008c00:	6878      	ldr	r0, [r7, #4]
 8008c02:	f000 f9f3 	bl	8008fec <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8008c06:	e04e      	b.n	8008ca6 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8008c08:	6878      	ldr	r0, [r7, #4]
 8008c0a:	f000 f9ef 	bl	8008fec <USBD_CtlSendStatus>
        break;
 8008c0e:	e04a      	b.n	8008ca6 <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 8008c10:	4b26      	ldr	r3, [pc, #152]	@ (8008cac <USBD_SetConfig+0x118>)
 8008c12:	781b      	ldrb	r3, [r3, #0]
 8008c14:	2b00      	cmp	r3, #0
 8008c16:	d112      	bne.n	8008c3e <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	2202      	movs	r2, #2
 8008c1c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
          pdev->dev_config = cfgidx;
 8008c20:	4b22      	ldr	r3, [pc, #136]	@ (8008cac <USBD_SetConfig+0x118>)
 8008c22:	781b      	ldrb	r3, [r3, #0]
 8008c24:	461a      	mov	r2, r3
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 8008c2a:	4b20      	ldr	r3, [pc, #128]	@ (8008cac <USBD_SetConfig+0x118>)
 8008c2c:	781b      	ldrb	r3, [r3, #0]
 8008c2e:	4619      	mov	r1, r3
 8008c30:	6878      	ldr	r0, [r7, #4]
 8008c32:	f7ff f9e3 	bl	8007ffc <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 8008c36:	6878      	ldr	r0, [r7, #4]
 8008c38:	f000 f9d8 	bl	8008fec <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8008c3c:	e033      	b.n	8008ca6 <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 8008c3e:	4b1b      	ldr	r3, [pc, #108]	@ (8008cac <USBD_SetConfig+0x118>)
 8008c40:	781b      	ldrb	r3, [r3, #0]
 8008c42:	461a      	mov	r2, r3
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	685b      	ldr	r3, [r3, #4]
 8008c48:	429a      	cmp	r2, r3
 8008c4a:	d01d      	beq.n	8008c88 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008c4c:	687b      	ldr	r3, [r7, #4]
 8008c4e:	685b      	ldr	r3, [r3, #4]
 8008c50:	b2db      	uxtb	r3, r3
 8008c52:	4619      	mov	r1, r3
 8008c54:	6878      	ldr	r0, [r7, #4]
 8008c56:	f7ff f9d1 	bl	8007ffc <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 8008c5a:	4b14      	ldr	r3, [pc, #80]	@ (8008cac <USBD_SetConfig+0x118>)
 8008c5c:	781b      	ldrb	r3, [r3, #0]
 8008c5e:	461a      	mov	r2, r3
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8008c64:	4b11      	ldr	r3, [pc, #68]	@ (8008cac <USBD_SetConfig+0x118>)
 8008c66:	781b      	ldrb	r3, [r3, #0]
 8008c68:	4619      	mov	r1, r3
 8008c6a:	6878      	ldr	r0, [r7, #4]
 8008c6c:	f7ff f9a7 	bl	8007fbe <USBD_SetClassConfig>
 8008c70:	4603      	mov	r3, r0
 8008c72:	2b02      	cmp	r3, #2
 8008c74:	d104      	bne.n	8008c80 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 8008c76:	6839      	ldr	r1, [r7, #0]
 8008c78:	6878      	ldr	r0, [r7, #4]
 8008c7a:	f000 f8ef 	bl	8008e5c <USBD_CtlError>
            return;
 8008c7e:	e012      	b.n	8008ca6 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8008c80:	6878      	ldr	r0, [r7, #4]
 8008c82:	f000 f9b3 	bl	8008fec <USBD_CtlSendStatus>
        break;
 8008c86:	e00e      	b.n	8008ca6 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8008c88:	6878      	ldr	r0, [r7, #4]
 8008c8a:	f000 f9af 	bl	8008fec <USBD_CtlSendStatus>
        break;
 8008c8e:	e00a      	b.n	8008ca6 <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 8008c90:	6839      	ldr	r1, [r7, #0]
 8008c92:	6878      	ldr	r0, [r7, #4]
 8008c94:	f000 f8e2 	bl	8008e5c <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 8008c98:	4b04      	ldr	r3, [pc, #16]	@ (8008cac <USBD_SetConfig+0x118>)
 8008c9a:	781b      	ldrb	r3, [r3, #0]
 8008c9c:	4619      	mov	r1, r3
 8008c9e:	6878      	ldr	r0, [r7, #4]
 8008ca0:	f7ff f9ac 	bl	8007ffc <USBD_ClrClassConfig>
        break;
 8008ca4:	bf00      	nop
    }
  }
}
 8008ca6:	3708      	adds	r7, #8
 8008ca8:	46bd      	mov	sp, r7
 8008caa:	bd80      	pop	{r7, pc}
 8008cac:	200003c8 	.word	0x200003c8

08008cb0 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008cb0:	b580      	push	{r7, lr}
 8008cb2:	b082      	sub	sp, #8
 8008cb4:	af00      	add	r7, sp, #0
 8008cb6:	6078      	str	r0, [r7, #4]
 8008cb8:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8008cba:	683b      	ldr	r3, [r7, #0]
 8008cbc:	88db      	ldrh	r3, [r3, #6]
 8008cbe:	2b01      	cmp	r3, #1
 8008cc0:	d004      	beq.n	8008ccc <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8008cc2:	6839      	ldr	r1, [r7, #0]
 8008cc4:	6878      	ldr	r0, [r7, #4]
 8008cc6:	f000 f8c9 	bl	8008e5c <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8008cca:	e022      	b.n	8008d12 <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 8008ccc:	687b      	ldr	r3, [r7, #4]
 8008cce:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008cd2:	2b02      	cmp	r3, #2
 8008cd4:	dc02      	bgt.n	8008cdc <USBD_GetConfig+0x2c>
 8008cd6:	2b00      	cmp	r3, #0
 8008cd8:	dc03      	bgt.n	8008ce2 <USBD_GetConfig+0x32>
 8008cda:	e015      	b.n	8008d08 <USBD_GetConfig+0x58>
 8008cdc:	2b03      	cmp	r3, #3
 8008cde:	d00b      	beq.n	8008cf8 <USBD_GetConfig+0x48>
 8008ce0:	e012      	b.n	8008d08 <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 8008ce2:	687b      	ldr	r3, [r7, #4]
 8008ce4:	2200      	movs	r2, #0
 8008ce6:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 8008ce8:	687b      	ldr	r3, [r7, #4]
 8008cea:	3308      	adds	r3, #8
 8008cec:	2201      	movs	r2, #1
 8008cee:	4619      	mov	r1, r3
 8008cf0:	6878      	ldr	r0, [r7, #4]
 8008cf2:	f000 f91d 	bl	8008f30 <USBD_CtlSendData>
        break;
 8008cf6:	e00c      	b.n	8008d12 <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	3304      	adds	r3, #4
 8008cfc:	2201      	movs	r2, #1
 8008cfe:	4619      	mov	r1, r3
 8008d00:	6878      	ldr	r0, [r7, #4]
 8008d02:	f000 f915 	bl	8008f30 <USBD_CtlSendData>
        break;
 8008d06:	e004      	b.n	8008d12 <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 8008d08:	6839      	ldr	r1, [r7, #0]
 8008d0a:	6878      	ldr	r0, [r7, #4]
 8008d0c:	f000 f8a6 	bl	8008e5c <USBD_CtlError>
        break;
 8008d10:	bf00      	nop
}
 8008d12:	bf00      	nop
 8008d14:	3708      	adds	r7, #8
 8008d16:	46bd      	mov	sp, r7
 8008d18:	bd80      	pop	{r7, pc}

08008d1a <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008d1a:	b580      	push	{r7, lr}
 8008d1c:	b082      	sub	sp, #8
 8008d1e:	af00      	add	r7, sp, #0
 8008d20:	6078      	str	r0, [r7, #4]
 8008d22:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008d2a:	3b01      	subs	r3, #1
 8008d2c:	2b02      	cmp	r3, #2
 8008d2e:	d81e      	bhi.n	8008d6e <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8008d30:	683b      	ldr	r3, [r7, #0]
 8008d32:	88db      	ldrh	r3, [r3, #6]
 8008d34:	2b02      	cmp	r3, #2
 8008d36:	d004      	beq.n	8008d42 <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 8008d38:	6839      	ldr	r1, [r7, #0]
 8008d3a:	6878      	ldr	r0, [r7, #4]
 8008d3c:	f000 f88e 	bl	8008e5c <USBD_CtlError>
        break;
 8008d40:	e01a      	b.n	8008d78 <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8008d42:	687b      	ldr	r3, [r7, #4]
 8008d44:	2201      	movs	r2, #1
 8008d46:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 8008d48:	687b      	ldr	r3, [r7, #4]
 8008d4a:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 8008d4e:	2b00      	cmp	r3, #0
 8008d50:	d005      	beq.n	8008d5e <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8008d52:	687b      	ldr	r3, [r7, #4]
 8008d54:	68db      	ldr	r3, [r3, #12]
 8008d56:	f043 0202 	orr.w	r2, r3, #2
 8008d5a:	687b      	ldr	r3, [r7, #4]
 8008d5c:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8008d5e:	687b      	ldr	r3, [r7, #4]
 8008d60:	330c      	adds	r3, #12
 8008d62:	2202      	movs	r2, #2
 8008d64:	4619      	mov	r1, r3
 8008d66:	6878      	ldr	r0, [r7, #4]
 8008d68:	f000 f8e2 	bl	8008f30 <USBD_CtlSendData>
      break;
 8008d6c:	e004      	b.n	8008d78 <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 8008d6e:	6839      	ldr	r1, [r7, #0]
 8008d70:	6878      	ldr	r0, [r7, #4]
 8008d72:	f000 f873 	bl	8008e5c <USBD_CtlError>
      break;
 8008d76:	bf00      	nop
  }
}
 8008d78:	bf00      	nop
 8008d7a:	3708      	adds	r7, #8
 8008d7c:	46bd      	mov	sp, r7
 8008d7e:	bd80      	pop	{r7, pc}

08008d80 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8008d80:	b580      	push	{r7, lr}
 8008d82:	b082      	sub	sp, #8
 8008d84:	af00      	add	r7, sp, #0
 8008d86:	6078      	str	r0, [r7, #4]
 8008d88:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008d8a:	683b      	ldr	r3, [r7, #0]
 8008d8c:	885b      	ldrh	r3, [r3, #2]
 8008d8e:	2b01      	cmp	r3, #1
 8008d90:	d106      	bne.n	8008da0 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8008d92:	687b      	ldr	r3, [r7, #4]
 8008d94:	2201      	movs	r2, #1
 8008d96:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    USBD_CtlSendStatus(pdev);
 8008d9a:	6878      	ldr	r0, [r7, #4]
 8008d9c:	f000 f926 	bl	8008fec <USBD_CtlSendStatus>
  }
}
 8008da0:	bf00      	nop
 8008da2:	3708      	adds	r7, #8
 8008da4:	46bd      	mov	sp, r7
 8008da6:	bd80      	pop	{r7, pc}

08008da8 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8008da8:	b580      	push	{r7, lr}
 8008daa:	b082      	sub	sp, #8
 8008dac:	af00      	add	r7, sp, #0
 8008dae:	6078      	str	r0, [r7, #4]
 8008db0:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008db2:	687b      	ldr	r3, [r7, #4]
 8008db4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008db8:	3b01      	subs	r3, #1
 8008dba:	2b02      	cmp	r3, #2
 8008dbc:	d80b      	bhi.n	8008dd6 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008dbe:	683b      	ldr	r3, [r7, #0]
 8008dc0:	885b      	ldrh	r3, [r3, #2]
 8008dc2:	2b01      	cmp	r3, #1
 8008dc4:	d10c      	bne.n	8008de0 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 8008dc6:	687b      	ldr	r3, [r7, #4]
 8008dc8:	2200      	movs	r2, #0
 8008dca:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        USBD_CtlSendStatus(pdev);
 8008dce:	6878      	ldr	r0, [r7, #4]
 8008dd0:	f000 f90c 	bl	8008fec <USBD_CtlSendStatus>
      }
      break;
 8008dd4:	e004      	b.n	8008de0 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 8008dd6:	6839      	ldr	r1, [r7, #0]
 8008dd8:	6878      	ldr	r0, [r7, #4]
 8008dda:	f000 f83f 	bl	8008e5c <USBD_CtlError>
      break;
 8008dde:	e000      	b.n	8008de2 <USBD_ClrFeature+0x3a>
      break;
 8008de0:	bf00      	nop
  }
}
 8008de2:	bf00      	nop
 8008de4:	3708      	adds	r7, #8
 8008de6:	46bd      	mov	sp, r7
 8008de8:	bd80      	pop	{r7, pc}

08008dea <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8008dea:	b480      	push	{r7}
 8008dec:	b083      	sub	sp, #12
 8008dee:	af00      	add	r7, sp, #0
 8008df0:	6078      	str	r0, [r7, #4]
 8008df2:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 8008df4:	683b      	ldr	r3, [r7, #0]
 8008df6:	781a      	ldrb	r2, [r3, #0]
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 8008dfc:	683b      	ldr	r3, [r7, #0]
 8008dfe:	785a      	ldrb	r2, [r3, #1]
 8008e00:	687b      	ldr	r3, [r7, #4]
 8008e02:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 8008e04:	683b      	ldr	r3, [r7, #0]
 8008e06:	3302      	adds	r3, #2
 8008e08:	781b      	ldrb	r3, [r3, #0]
 8008e0a:	461a      	mov	r2, r3
 8008e0c:	683b      	ldr	r3, [r7, #0]
 8008e0e:	3303      	adds	r3, #3
 8008e10:	781b      	ldrb	r3, [r3, #0]
 8008e12:	021b      	lsls	r3, r3, #8
 8008e14:	b29b      	uxth	r3, r3
 8008e16:	4413      	add	r3, r2
 8008e18:	b29a      	uxth	r2, r3
 8008e1a:	687b      	ldr	r3, [r7, #4]
 8008e1c:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 8008e1e:	683b      	ldr	r3, [r7, #0]
 8008e20:	3304      	adds	r3, #4
 8008e22:	781b      	ldrb	r3, [r3, #0]
 8008e24:	461a      	mov	r2, r3
 8008e26:	683b      	ldr	r3, [r7, #0]
 8008e28:	3305      	adds	r3, #5
 8008e2a:	781b      	ldrb	r3, [r3, #0]
 8008e2c:	021b      	lsls	r3, r3, #8
 8008e2e:	b29b      	uxth	r3, r3
 8008e30:	4413      	add	r3, r2
 8008e32:	b29a      	uxth	r2, r3
 8008e34:	687b      	ldr	r3, [r7, #4]
 8008e36:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 8008e38:	683b      	ldr	r3, [r7, #0]
 8008e3a:	3306      	adds	r3, #6
 8008e3c:	781b      	ldrb	r3, [r3, #0]
 8008e3e:	461a      	mov	r2, r3
 8008e40:	683b      	ldr	r3, [r7, #0]
 8008e42:	3307      	adds	r3, #7
 8008e44:	781b      	ldrb	r3, [r3, #0]
 8008e46:	021b      	lsls	r3, r3, #8
 8008e48:	b29b      	uxth	r3, r3
 8008e4a:	4413      	add	r3, r2
 8008e4c:	b29a      	uxth	r2, r3
 8008e4e:	687b      	ldr	r3, [r7, #4]
 8008e50:	80da      	strh	r2, [r3, #6]

}
 8008e52:	bf00      	nop
 8008e54:	370c      	adds	r7, #12
 8008e56:	46bd      	mov	sp, r7
 8008e58:	bc80      	pop	{r7}
 8008e5a:	4770      	bx	lr

08008e5c <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 8008e5c:	b580      	push	{r7, lr}
 8008e5e:	b082      	sub	sp, #8
 8008e60:	af00      	add	r7, sp, #0
 8008e62:	6078      	str	r0, [r7, #4]
 8008e64:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 8008e66:	2180      	movs	r1, #128	@ 0x80
 8008e68:	6878      	ldr	r0, [r7, #4]
 8008e6a:	f000 fc61 	bl	8009730 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 8008e6e:	2100      	movs	r1, #0
 8008e70:	6878      	ldr	r0, [r7, #4]
 8008e72:	f000 fc5d 	bl	8009730 <USBD_LL_StallEP>
}
 8008e76:	bf00      	nop
 8008e78:	3708      	adds	r7, #8
 8008e7a:	46bd      	mov	sp, r7
 8008e7c:	bd80      	pop	{r7, pc}

08008e7e <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8008e7e:	b580      	push	{r7, lr}
 8008e80:	b086      	sub	sp, #24
 8008e82:	af00      	add	r7, sp, #0
 8008e84:	60f8      	str	r0, [r7, #12]
 8008e86:	60b9      	str	r1, [r7, #8]
 8008e88:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8008e8a:	2300      	movs	r3, #0
 8008e8c:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 8008e8e:	68fb      	ldr	r3, [r7, #12]
 8008e90:	2b00      	cmp	r3, #0
 8008e92:	d032      	beq.n	8008efa <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 8008e94:	68f8      	ldr	r0, [r7, #12]
 8008e96:	f000 f834 	bl	8008f02 <USBD_GetLen>
 8008e9a:	4603      	mov	r3, r0
 8008e9c:	3301      	adds	r3, #1
 8008e9e:	b29b      	uxth	r3, r3
 8008ea0:	005b      	lsls	r3, r3, #1
 8008ea2:	b29a      	uxth	r2, r3
 8008ea4:	687b      	ldr	r3, [r7, #4]
 8008ea6:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 8008ea8:	7dfb      	ldrb	r3, [r7, #23]
 8008eaa:	1c5a      	adds	r2, r3, #1
 8008eac:	75fa      	strb	r2, [r7, #23]
 8008eae:	461a      	mov	r2, r3
 8008eb0:	68bb      	ldr	r3, [r7, #8]
 8008eb2:	4413      	add	r3, r2
 8008eb4:	687a      	ldr	r2, [r7, #4]
 8008eb6:	7812      	ldrb	r2, [r2, #0]
 8008eb8:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8008eba:	7dfb      	ldrb	r3, [r7, #23]
 8008ebc:	1c5a      	adds	r2, r3, #1
 8008ebe:	75fa      	strb	r2, [r7, #23]
 8008ec0:	461a      	mov	r2, r3
 8008ec2:	68bb      	ldr	r3, [r7, #8]
 8008ec4:	4413      	add	r3, r2
 8008ec6:	2203      	movs	r2, #3
 8008ec8:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 8008eca:	e012      	b.n	8008ef2 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 8008ecc:	68fb      	ldr	r3, [r7, #12]
 8008ece:	1c5a      	adds	r2, r3, #1
 8008ed0:	60fa      	str	r2, [r7, #12]
 8008ed2:	7dfa      	ldrb	r2, [r7, #23]
 8008ed4:	1c51      	adds	r1, r2, #1
 8008ed6:	75f9      	strb	r1, [r7, #23]
 8008ed8:	4611      	mov	r1, r2
 8008eda:	68ba      	ldr	r2, [r7, #8]
 8008edc:	440a      	add	r2, r1
 8008ede:	781b      	ldrb	r3, [r3, #0]
 8008ee0:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 8008ee2:	7dfb      	ldrb	r3, [r7, #23]
 8008ee4:	1c5a      	adds	r2, r3, #1
 8008ee6:	75fa      	strb	r2, [r7, #23]
 8008ee8:	461a      	mov	r2, r3
 8008eea:	68bb      	ldr	r3, [r7, #8]
 8008eec:	4413      	add	r3, r2
 8008eee:	2200      	movs	r2, #0
 8008ef0:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 8008ef2:	68fb      	ldr	r3, [r7, #12]
 8008ef4:	781b      	ldrb	r3, [r3, #0]
 8008ef6:	2b00      	cmp	r3, #0
 8008ef8:	d1e8      	bne.n	8008ecc <USBD_GetString+0x4e>
    }
  }
}
 8008efa:	bf00      	nop
 8008efc:	3718      	adds	r7, #24
 8008efe:	46bd      	mov	sp, r7
 8008f00:	bd80      	pop	{r7, pc}

08008f02 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8008f02:	b480      	push	{r7}
 8008f04:	b085      	sub	sp, #20
 8008f06:	af00      	add	r7, sp, #0
 8008f08:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8008f0a:	2300      	movs	r3, #0
 8008f0c:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 8008f0e:	e005      	b.n	8008f1c <USBD_GetLen+0x1a>
  {
    len++;
 8008f10:	7bfb      	ldrb	r3, [r7, #15]
 8008f12:	3301      	adds	r3, #1
 8008f14:	73fb      	strb	r3, [r7, #15]
    buf++;
 8008f16:	687b      	ldr	r3, [r7, #4]
 8008f18:	3301      	adds	r3, #1
 8008f1a:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 8008f1c:	687b      	ldr	r3, [r7, #4]
 8008f1e:	781b      	ldrb	r3, [r3, #0]
 8008f20:	2b00      	cmp	r3, #0
 8008f22:	d1f5      	bne.n	8008f10 <USBD_GetLen+0xe>
  }

  return len;
 8008f24:	7bfb      	ldrb	r3, [r7, #15]
}
 8008f26:	4618      	mov	r0, r3
 8008f28:	3714      	adds	r7, #20
 8008f2a:	46bd      	mov	sp, r7
 8008f2c:	bc80      	pop	{r7}
 8008f2e:	4770      	bx	lr

08008f30 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 8008f30:	b580      	push	{r7, lr}
 8008f32:	b084      	sub	sp, #16
 8008f34:	af00      	add	r7, sp, #0
 8008f36:	60f8      	str	r0, [r7, #12]
 8008f38:	60b9      	str	r1, [r7, #8]
 8008f3a:	4613      	mov	r3, r2
 8008f3c:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8008f3e:	68fb      	ldr	r3, [r7, #12]
 8008f40:	2202      	movs	r2, #2
 8008f42:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 8008f46:	88fa      	ldrh	r2, [r7, #6]
 8008f48:	68fb      	ldr	r3, [r7, #12]
 8008f4a:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 8008f4c:	88fa      	ldrh	r2, [r7, #6]
 8008f4e:	68fb      	ldr	r3, [r7, #12]
 8008f50:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008f52:	88fb      	ldrh	r3, [r7, #6]
 8008f54:	68ba      	ldr	r2, [r7, #8]
 8008f56:	2100      	movs	r1, #0
 8008f58:	68f8      	ldr	r0, [r7, #12]
 8008f5a:	f000 fc71 	bl	8009840 <USBD_LL_Transmit>

  return USBD_OK;
 8008f5e:	2300      	movs	r3, #0
}
 8008f60:	4618      	mov	r0, r3
 8008f62:	3710      	adds	r7, #16
 8008f64:	46bd      	mov	sp, r7
 8008f66:	bd80      	pop	{r7, pc}

08008f68 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 8008f68:	b580      	push	{r7, lr}
 8008f6a:	b084      	sub	sp, #16
 8008f6c:	af00      	add	r7, sp, #0
 8008f6e:	60f8      	str	r0, [r7, #12]
 8008f70:	60b9      	str	r1, [r7, #8]
 8008f72:	4613      	mov	r3, r2
 8008f74:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008f76:	88fb      	ldrh	r3, [r7, #6]
 8008f78:	68ba      	ldr	r2, [r7, #8]
 8008f7a:	2100      	movs	r1, #0
 8008f7c:	68f8      	ldr	r0, [r7, #12]
 8008f7e:	f000 fc5f 	bl	8009840 <USBD_LL_Transmit>

  return USBD_OK;
 8008f82:	2300      	movs	r3, #0
}
 8008f84:	4618      	mov	r0, r3
 8008f86:	3710      	adds	r7, #16
 8008f88:	46bd      	mov	sp, r7
 8008f8a:	bd80      	pop	{r7, pc}

08008f8c <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 8008f8c:	b580      	push	{r7, lr}
 8008f8e:	b084      	sub	sp, #16
 8008f90:	af00      	add	r7, sp, #0
 8008f92:	60f8      	str	r0, [r7, #12]
 8008f94:	60b9      	str	r1, [r7, #8]
 8008f96:	4613      	mov	r3, r2
 8008f98:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8008f9a:	68fb      	ldr	r3, [r7, #12]
 8008f9c:	2203      	movs	r2, #3
 8008f9e:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 8008fa2:	88fa      	ldrh	r2, [r7, #6]
 8008fa4:	68fb      	ldr	r3, [r7, #12]
 8008fa6:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
  pdev->ep_out[0].rem_length   = len;
 8008faa:	88fa      	ldrh	r2, [r7, #6]
 8008fac:	68fb      	ldr	r3, [r7, #12]
 8008fae:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008fb2:	88fb      	ldrh	r3, [r7, #6]
 8008fb4:	68ba      	ldr	r2, [r7, #8]
 8008fb6:	2100      	movs	r1, #0
 8008fb8:	68f8      	ldr	r0, [r7, #12]
 8008fba:	f000 fc64 	bl	8009886 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008fbe:	2300      	movs	r3, #0
}
 8008fc0:	4618      	mov	r0, r3
 8008fc2:	3710      	adds	r7, #16
 8008fc4:	46bd      	mov	sp, r7
 8008fc6:	bd80      	pop	{r7, pc}

08008fc8 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 8008fc8:	b580      	push	{r7, lr}
 8008fca:	b084      	sub	sp, #16
 8008fcc:	af00      	add	r7, sp, #0
 8008fce:	60f8      	str	r0, [r7, #12]
 8008fd0:	60b9      	str	r1, [r7, #8]
 8008fd2:	4613      	mov	r3, r2
 8008fd4:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008fd6:	88fb      	ldrh	r3, [r7, #6]
 8008fd8:	68ba      	ldr	r2, [r7, #8]
 8008fda:	2100      	movs	r1, #0
 8008fdc:	68f8      	ldr	r0, [r7, #12]
 8008fde:	f000 fc52 	bl	8009886 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008fe2:	2300      	movs	r3, #0
}
 8008fe4:	4618      	mov	r0, r3
 8008fe6:	3710      	adds	r7, #16
 8008fe8:	46bd      	mov	sp, r7
 8008fea:	bd80      	pop	{r7, pc}

08008fec <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8008fec:	b580      	push	{r7, lr}
 8008fee:	b082      	sub	sp, #8
 8008ff0:	af00      	add	r7, sp, #0
 8008ff2:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8008ff4:	687b      	ldr	r3, [r7, #4]
 8008ff6:	2204      	movs	r2, #4
 8008ff8:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8008ffc:	2300      	movs	r3, #0
 8008ffe:	2200      	movs	r2, #0
 8009000:	2100      	movs	r1, #0
 8009002:	6878      	ldr	r0, [r7, #4]
 8009004:	f000 fc1c 	bl	8009840 <USBD_LL_Transmit>

  return USBD_OK;
 8009008:	2300      	movs	r3, #0
}
 800900a:	4618      	mov	r0, r3
 800900c:	3708      	adds	r7, #8
 800900e:	46bd      	mov	sp, r7
 8009010:	bd80      	pop	{r7, pc}

08009012 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8009012:	b580      	push	{r7, lr}
 8009014:	b082      	sub	sp, #8
 8009016:	af00      	add	r7, sp, #0
 8009018:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800901a:	687b      	ldr	r3, [r7, #4]
 800901c:	2205      	movs	r2, #5
 800901e:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009022:	2300      	movs	r3, #0
 8009024:	2200      	movs	r2, #0
 8009026:	2100      	movs	r1, #0
 8009028:	6878      	ldr	r0, [r7, #4]
 800902a:	f000 fc2c 	bl	8009886 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800902e:	2300      	movs	r3, #0
}
 8009030:	4618      	mov	r0, r3
 8009032:	3708      	adds	r7, #8
 8009034:	46bd      	mov	sp, r7
 8009036:	bd80      	pop	{r7, pc}

08009038 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8009038:	b580      	push	{r7, lr}
 800903a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800903c:	2200      	movs	r2, #0
 800903e:	4912      	ldr	r1, [pc, #72]	@ (8009088 <MX_USB_DEVICE_Init+0x50>)
 8009040:	4812      	ldr	r0, [pc, #72]	@ (800908c <MX_USB_DEVICE_Init+0x54>)
 8009042:	f7fe ff62 	bl	8007f0a <USBD_Init>
 8009046:	4603      	mov	r3, r0
 8009048:	2b00      	cmp	r3, #0
 800904a:	d001      	beq.n	8009050 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800904c:	f7f8 fde0 	bl	8001c10 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8009050:	490f      	ldr	r1, [pc, #60]	@ (8009090 <MX_USB_DEVICE_Init+0x58>)
 8009052:	480e      	ldr	r0, [pc, #56]	@ (800908c <MX_USB_DEVICE_Init+0x54>)
 8009054:	f7fe ff84 	bl	8007f60 <USBD_RegisterClass>
 8009058:	4603      	mov	r3, r0
 800905a:	2b00      	cmp	r3, #0
 800905c:	d001      	beq.n	8009062 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800905e:	f7f8 fdd7 	bl	8001c10 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8009062:	490c      	ldr	r1, [pc, #48]	@ (8009094 <MX_USB_DEVICE_Init+0x5c>)
 8009064:	4809      	ldr	r0, [pc, #36]	@ (800908c <MX_USB_DEVICE_Init+0x54>)
 8009066:	f7fe feb5 	bl	8007dd4 <USBD_CDC_RegisterInterface>
 800906a:	4603      	mov	r3, r0
 800906c:	2b00      	cmp	r3, #0
 800906e:	d001      	beq.n	8009074 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8009070:	f7f8 fdce 	bl	8001c10 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8009074:	4805      	ldr	r0, [pc, #20]	@ (800908c <MX_USB_DEVICE_Init+0x54>)
 8009076:	f7fe ff8c 	bl	8007f92 <USBD_Start>
 800907a:	4603      	mov	r3, r0
 800907c:	2b00      	cmp	r3, #0
 800907e:	d001      	beq.n	8009084 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8009080:	f7f8 fdc6 	bl	8001c10 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8009084:	bf00      	nop
 8009086:	bd80      	pop	{r7, pc}
 8009088:	2000012c 	.word	0x2000012c
 800908c:	200003cc 	.word	0x200003cc
 8009090:	20000018 	.word	0x20000018
 8009094:	2000011c 	.word	0x2000011c

08009098 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8009098:	b580      	push	{r7, lr}
 800909a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800909c:	2200      	movs	r2, #0
 800909e:	4905      	ldr	r1, [pc, #20]	@ (80090b4 <CDC_Init_FS+0x1c>)
 80090a0:	4805      	ldr	r0, [pc, #20]	@ (80090b8 <CDC_Init_FS+0x20>)
 80090a2:	f7fe fead 	bl	8007e00 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 80090a6:	4905      	ldr	r1, [pc, #20]	@ (80090bc <CDC_Init_FS+0x24>)
 80090a8:	4803      	ldr	r0, [pc, #12]	@ (80090b8 <CDC_Init_FS+0x20>)
 80090aa:	f7fe fec2 	bl	8007e32 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 80090ae:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 80090b0:	4618      	mov	r0, r3
 80090b2:	bd80      	pop	{r7, pc}
 80090b4:	20000a90 	.word	0x20000a90
 80090b8:	200003cc 	.word	0x200003cc
 80090bc:	20000690 	.word	0x20000690

080090c0 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 80090c0:	b480      	push	{r7}
 80090c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 80090c4:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 80090c6:	4618      	mov	r0, r3
 80090c8:	46bd      	mov	sp, r7
 80090ca:	bc80      	pop	{r7}
 80090cc:	4770      	bx	lr
	...

080090d0 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 80090d0:	b480      	push	{r7}
 80090d2:	b083      	sub	sp, #12
 80090d4:	af00      	add	r7, sp, #0
 80090d6:	4603      	mov	r3, r0
 80090d8:	6039      	str	r1, [r7, #0]
 80090da:	71fb      	strb	r3, [r7, #7]
 80090dc:	4613      	mov	r3, r2
 80090de:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 80090e0:	79fb      	ldrb	r3, [r7, #7]
 80090e2:	2b23      	cmp	r3, #35	@ 0x23
 80090e4:	d84a      	bhi.n	800917c <CDC_Control_FS+0xac>
 80090e6:	a201      	add	r2, pc, #4	@ (adr r2, 80090ec <CDC_Control_FS+0x1c>)
 80090e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80090ec:	0800917d 	.word	0x0800917d
 80090f0:	0800917d 	.word	0x0800917d
 80090f4:	0800917d 	.word	0x0800917d
 80090f8:	0800917d 	.word	0x0800917d
 80090fc:	0800917d 	.word	0x0800917d
 8009100:	0800917d 	.word	0x0800917d
 8009104:	0800917d 	.word	0x0800917d
 8009108:	0800917d 	.word	0x0800917d
 800910c:	0800917d 	.word	0x0800917d
 8009110:	0800917d 	.word	0x0800917d
 8009114:	0800917d 	.word	0x0800917d
 8009118:	0800917d 	.word	0x0800917d
 800911c:	0800917d 	.word	0x0800917d
 8009120:	0800917d 	.word	0x0800917d
 8009124:	0800917d 	.word	0x0800917d
 8009128:	0800917d 	.word	0x0800917d
 800912c:	0800917d 	.word	0x0800917d
 8009130:	0800917d 	.word	0x0800917d
 8009134:	0800917d 	.word	0x0800917d
 8009138:	0800917d 	.word	0x0800917d
 800913c:	0800917d 	.word	0x0800917d
 8009140:	0800917d 	.word	0x0800917d
 8009144:	0800917d 	.word	0x0800917d
 8009148:	0800917d 	.word	0x0800917d
 800914c:	0800917d 	.word	0x0800917d
 8009150:	0800917d 	.word	0x0800917d
 8009154:	0800917d 	.word	0x0800917d
 8009158:	0800917d 	.word	0x0800917d
 800915c:	0800917d 	.word	0x0800917d
 8009160:	0800917d 	.word	0x0800917d
 8009164:	0800917d 	.word	0x0800917d
 8009168:	0800917d 	.word	0x0800917d
 800916c:	0800917d 	.word	0x0800917d
 8009170:	0800917d 	.word	0x0800917d
 8009174:	0800917d 	.word	0x0800917d
 8009178:	0800917d 	.word	0x0800917d
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800917c:	bf00      	nop
  }

  return (USBD_OK);
 800917e:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8009180:	4618      	mov	r0, r3
 8009182:	370c      	adds	r7, #12
 8009184:	46bd      	mov	sp, r7
 8009186:	bc80      	pop	{r7}
 8009188:	4770      	bx	lr
 800918a:	bf00      	nop

0800918c <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800918c:	b580      	push	{r7, lr}
 800918e:	b082      	sub	sp, #8
 8009190:	af00      	add	r7, sp, #0
 8009192:	6078      	str	r0, [r7, #4]
 8009194:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8009196:	6879      	ldr	r1, [r7, #4]
 8009198:	480b      	ldr	r0, [pc, #44]	@ (80091c8 <CDC_Receive_FS+0x3c>)
 800919a:	f7fe fe4a 	bl	8007e32 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800919e:	480a      	ldr	r0, [pc, #40]	@ (80091c8 <CDC_Receive_FS+0x3c>)
 80091a0:	f7fe fe89 	bl	8007eb6 <USBD_CDC_ReceivePacket>
  USB_CDC_RxHandler(UserRxBufferFS, *Len);
 80091a4:	683b      	ldr	r3, [r7, #0]
 80091a6:	681b      	ldr	r3, [r3, #0]
 80091a8:	4619      	mov	r1, r3
 80091aa:	4808      	ldr	r0, [pc, #32]	@ (80091cc <CDC_Receive_FS+0x40>)
 80091ac:	f7f8 fc54 	bl	8001a58 <USB_CDC_RxHandler>
  memset(UserRxBufferFS, '\0', *Len);
 80091b0:	683b      	ldr	r3, [r7, #0]
 80091b2:	681b      	ldr	r3, [r3, #0]
 80091b4:	461a      	mov	r2, r3
 80091b6:	2100      	movs	r1, #0
 80091b8:	4804      	ldr	r0, [pc, #16]	@ (80091cc <CDC_Receive_FS+0x40>)
 80091ba:	f002 fe82 	bl	800bec2 <memset>
  return (USBD_OK);
 80091be:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 80091c0:	4618      	mov	r0, r3
 80091c2:	3708      	adds	r7, #8
 80091c4:	46bd      	mov	sp, r7
 80091c6:	bd80      	pop	{r7, pc}
 80091c8:	200003cc 	.word	0x200003cc
 80091cc:	20000690 	.word	0x20000690

080091d0 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 80091d0:	b580      	push	{r7, lr}
 80091d2:	b084      	sub	sp, #16
 80091d4:	af00      	add	r7, sp, #0
 80091d6:	6078      	str	r0, [r7, #4]
 80091d8:	460b      	mov	r3, r1
 80091da:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 80091dc:	2300      	movs	r3, #0
 80091de:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 80091e0:	4b0d      	ldr	r3, [pc, #52]	@ (8009218 <CDC_Transmit_FS+0x48>)
 80091e2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80091e6:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 80091e8:	68bb      	ldr	r3, [r7, #8]
 80091ea:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 80091ee:	2b00      	cmp	r3, #0
 80091f0:	d001      	beq.n	80091f6 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 80091f2:	2301      	movs	r3, #1
 80091f4:	e00b      	b.n	800920e <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 80091f6:	887b      	ldrh	r3, [r7, #2]
 80091f8:	461a      	mov	r2, r3
 80091fa:	6879      	ldr	r1, [r7, #4]
 80091fc:	4806      	ldr	r0, [pc, #24]	@ (8009218 <CDC_Transmit_FS+0x48>)
 80091fe:	f7fe fdff 	bl	8007e00 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8009202:	4805      	ldr	r0, [pc, #20]	@ (8009218 <CDC_Transmit_FS+0x48>)
 8009204:	f7fe fe28 	bl	8007e58 <USBD_CDC_TransmitPacket>
 8009208:	4603      	mov	r3, r0
 800920a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800920c:	7bfb      	ldrb	r3, [r7, #15]
}
 800920e:	4618      	mov	r0, r3
 8009210:	3710      	adds	r7, #16
 8009212:	46bd      	mov	sp, r7
 8009214:	bd80      	pop	{r7, pc}
 8009216:	bf00      	nop
 8009218:	200003cc 	.word	0x200003cc

0800921c <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800921c:	b480      	push	{r7}
 800921e:	b083      	sub	sp, #12
 8009220:	af00      	add	r7, sp, #0
 8009222:	4603      	mov	r3, r0
 8009224:	6039      	str	r1, [r7, #0]
 8009226:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8009228:	683b      	ldr	r3, [r7, #0]
 800922a:	2212      	movs	r2, #18
 800922c:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800922e:	4b03      	ldr	r3, [pc, #12]	@ (800923c <USBD_FS_DeviceDescriptor+0x20>)
}
 8009230:	4618      	mov	r0, r3
 8009232:	370c      	adds	r7, #12
 8009234:	46bd      	mov	sp, r7
 8009236:	bc80      	pop	{r7}
 8009238:	4770      	bx	lr
 800923a:	bf00      	nop
 800923c:	20000148 	.word	0x20000148

08009240 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009240:	b480      	push	{r7}
 8009242:	b083      	sub	sp, #12
 8009244:	af00      	add	r7, sp, #0
 8009246:	4603      	mov	r3, r0
 8009248:	6039      	str	r1, [r7, #0]
 800924a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800924c:	683b      	ldr	r3, [r7, #0]
 800924e:	2204      	movs	r2, #4
 8009250:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8009252:	4b03      	ldr	r3, [pc, #12]	@ (8009260 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8009254:	4618      	mov	r0, r3
 8009256:	370c      	adds	r7, #12
 8009258:	46bd      	mov	sp, r7
 800925a:	bc80      	pop	{r7}
 800925c:	4770      	bx	lr
 800925e:	bf00      	nop
 8009260:	2000015c 	.word	0x2000015c

08009264 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009264:	b580      	push	{r7, lr}
 8009266:	b082      	sub	sp, #8
 8009268:	af00      	add	r7, sp, #0
 800926a:	4603      	mov	r3, r0
 800926c:	6039      	str	r1, [r7, #0]
 800926e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8009270:	79fb      	ldrb	r3, [r7, #7]
 8009272:	2b00      	cmp	r3, #0
 8009274:	d105      	bne.n	8009282 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8009276:	683a      	ldr	r2, [r7, #0]
 8009278:	4907      	ldr	r1, [pc, #28]	@ (8009298 <USBD_FS_ProductStrDescriptor+0x34>)
 800927a:	4808      	ldr	r0, [pc, #32]	@ (800929c <USBD_FS_ProductStrDescriptor+0x38>)
 800927c:	f7ff fdff 	bl	8008e7e <USBD_GetString>
 8009280:	e004      	b.n	800928c <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8009282:	683a      	ldr	r2, [r7, #0]
 8009284:	4904      	ldr	r1, [pc, #16]	@ (8009298 <USBD_FS_ProductStrDescriptor+0x34>)
 8009286:	4805      	ldr	r0, [pc, #20]	@ (800929c <USBD_FS_ProductStrDescriptor+0x38>)
 8009288:	f7ff fdf9 	bl	8008e7e <USBD_GetString>
  }
  return USBD_StrDesc;
 800928c:	4b02      	ldr	r3, [pc, #8]	@ (8009298 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800928e:	4618      	mov	r0, r3
 8009290:	3708      	adds	r7, #8
 8009292:	46bd      	mov	sp, r7
 8009294:	bd80      	pop	{r7, pc}
 8009296:	bf00      	nop
 8009298:	20000e90 	.word	0x20000e90
 800929c:	0800eb7c 	.word	0x0800eb7c

080092a0 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80092a0:	b580      	push	{r7, lr}
 80092a2:	b082      	sub	sp, #8
 80092a4:	af00      	add	r7, sp, #0
 80092a6:	4603      	mov	r3, r0
 80092a8:	6039      	str	r1, [r7, #0]
 80092aa:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80092ac:	683a      	ldr	r2, [r7, #0]
 80092ae:	4904      	ldr	r1, [pc, #16]	@ (80092c0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 80092b0:	4804      	ldr	r0, [pc, #16]	@ (80092c4 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 80092b2:	f7ff fde4 	bl	8008e7e <USBD_GetString>
  return USBD_StrDesc;
 80092b6:	4b02      	ldr	r3, [pc, #8]	@ (80092c0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 80092b8:	4618      	mov	r0, r3
 80092ba:	3708      	adds	r7, #8
 80092bc:	46bd      	mov	sp, r7
 80092be:	bd80      	pop	{r7, pc}
 80092c0:	20000e90 	.word	0x20000e90
 80092c4:	0800eb94 	.word	0x0800eb94

080092c8 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80092c8:	b580      	push	{r7, lr}
 80092ca:	b082      	sub	sp, #8
 80092cc:	af00      	add	r7, sp, #0
 80092ce:	4603      	mov	r3, r0
 80092d0:	6039      	str	r1, [r7, #0]
 80092d2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 80092d4:	683b      	ldr	r3, [r7, #0]
 80092d6:	221a      	movs	r2, #26
 80092d8:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80092da:	f000 f843 	bl	8009364 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 80092de:	4b02      	ldr	r3, [pc, #8]	@ (80092e8 <USBD_FS_SerialStrDescriptor+0x20>)
}
 80092e0:	4618      	mov	r0, r3
 80092e2:	3708      	adds	r7, #8
 80092e4:	46bd      	mov	sp, r7
 80092e6:	bd80      	pop	{r7, pc}
 80092e8:	20000160 	.word	0x20000160

080092ec <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80092ec:	b580      	push	{r7, lr}
 80092ee:	b082      	sub	sp, #8
 80092f0:	af00      	add	r7, sp, #0
 80092f2:	4603      	mov	r3, r0
 80092f4:	6039      	str	r1, [r7, #0]
 80092f6:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 80092f8:	79fb      	ldrb	r3, [r7, #7]
 80092fa:	2b00      	cmp	r3, #0
 80092fc:	d105      	bne.n	800930a <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80092fe:	683a      	ldr	r2, [r7, #0]
 8009300:	4907      	ldr	r1, [pc, #28]	@ (8009320 <USBD_FS_ConfigStrDescriptor+0x34>)
 8009302:	4808      	ldr	r0, [pc, #32]	@ (8009324 <USBD_FS_ConfigStrDescriptor+0x38>)
 8009304:	f7ff fdbb 	bl	8008e7e <USBD_GetString>
 8009308:	e004      	b.n	8009314 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800930a:	683a      	ldr	r2, [r7, #0]
 800930c:	4904      	ldr	r1, [pc, #16]	@ (8009320 <USBD_FS_ConfigStrDescriptor+0x34>)
 800930e:	4805      	ldr	r0, [pc, #20]	@ (8009324 <USBD_FS_ConfigStrDescriptor+0x38>)
 8009310:	f7ff fdb5 	bl	8008e7e <USBD_GetString>
  }
  return USBD_StrDesc;
 8009314:	4b02      	ldr	r3, [pc, #8]	@ (8009320 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8009316:	4618      	mov	r0, r3
 8009318:	3708      	adds	r7, #8
 800931a:	46bd      	mov	sp, r7
 800931c:	bd80      	pop	{r7, pc}
 800931e:	bf00      	nop
 8009320:	20000e90 	.word	0x20000e90
 8009324:	0800eba8 	.word	0x0800eba8

08009328 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009328:	b580      	push	{r7, lr}
 800932a:	b082      	sub	sp, #8
 800932c:	af00      	add	r7, sp, #0
 800932e:	4603      	mov	r3, r0
 8009330:	6039      	str	r1, [r7, #0]
 8009332:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8009334:	79fb      	ldrb	r3, [r7, #7]
 8009336:	2b00      	cmp	r3, #0
 8009338:	d105      	bne.n	8009346 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800933a:	683a      	ldr	r2, [r7, #0]
 800933c:	4907      	ldr	r1, [pc, #28]	@ (800935c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800933e:	4808      	ldr	r0, [pc, #32]	@ (8009360 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8009340:	f7ff fd9d 	bl	8008e7e <USBD_GetString>
 8009344:	e004      	b.n	8009350 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8009346:	683a      	ldr	r2, [r7, #0]
 8009348:	4904      	ldr	r1, [pc, #16]	@ (800935c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800934a:	4805      	ldr	r0, [pc, #20]	@ (8009360 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800934c:	f7ff fd97 	bl	8008e7e <USBD_GetString>
  }
  return USBD_StrDesc;
 8009350:	4b02      	ldr	r3, [pc, #8]	@ (800935c <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8009352:	4618      	mov	r0, r3
 8009354:	3708      	adds	r7, #8
 8009356:	46bd      	mov	sp, r7
 8009358:	bd80      	pop	{r7, pc}
 800935a:	bf00      	nop
 800935c:	20000e90 	.word	0x20000e90
 8009360:	0800ebb4 	.word	0x0800ebb4

08009364 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8009364:	b580      	push	{r7, lr}
 8009366:	b084      	sub	sp, #16
 8009368:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800936a:	4b0f      	ldr	r3, [pc, #60]	@ (80093a8 <Get_SerialNum+0x44>)
 800936c:	681b      	ldr	r3, [r3, #0]
 800936e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8009370:	4b0e      	ldr	r3, [pc, #56]	@ (80093ac <Get_SerialNum+0x48>)
 8009372:	681b      	ldr	r3, [r3, #0]
 8009374:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8009376:	4b0e      	ldr	r3, [pc, #56]	@ (80093b0 <Get_SerialNum+0x4c>)
 8009378:	681b      	ldr	r3, [r3, #0]
 800937a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800937c:	68fa      	ldr	r2, [r7, #12]
 800937e:	687b      	ldr	r3, [r7, #4]
 8009380:	4413      	add	r3, r2
 8009382:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8009384:	68fb      	ldr	r3, [r7, #12]
 8009386:	2b00      	cmp	r3, #0
 8009388:	d009      	beq.n	800939e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800938a:	2208      	movs	r2, #8
 800938c:	4909      	ldr	r1, [pc, #36]	@ (80093b4 <Get_SerialNum+0x50>)
 800938e:	68f8      	ldr	r0, [r7, #12]
 8009390:	f000 f814 	bl	80093bc <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8009394:	2204      	movs	r2, #4
 8009396:	4908      	ldr	r1, [pc, #32]	@ (80093b8 <Get_SerialNum+0x54>)
 8009398:	68b8      	ldr	r0, [r7, #8]
 800939a:	f000 f80f 	bl	80093bc <IntToUnicode>
  }
}
 800939e:	bf00      	nop
 80093a0:	3710      	adds	r7, #16
 80093a2:	46bd      	mov	sp, r7
 80093a4:	bd80      	pop	{r7, pc}
 80093a6:	bf00      	nop
 80093a8:	1ffff7e8 	.word	0x1ffff7e8
 80093ac:	1ffff7ec 	.word	0x1ffff7ec
 80093b0:	1ffff7f0 	.word	0x1ffff7f0
 80093b4:	20000162 	.word	0x20000162
 80093b8:	20000172 	.word	0x20000172

080093bc <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 80093bc:	b480      	push	{r7}
 80093be:	b087      	sub	sp, #28
 80093c0:	af00      	add	r7, sp, #0
 80093c2:	60f8      	str	r0, [r7, #12]
 80093c4:	60b9      	str	r1, [r7, #8]
 80093c6:	4613      	mov	r3, r2
 80093c8:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 80093ca:	2300      	movs	r3, #0
 80093cc:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 80093ce:	2300      	movs	r3, #0
 80093d0:	75fb      	strb	r3, [r7, #23]
 80093d2:	e027      	b.n	8009424 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 80093d4:	68fb      	ldr	r3, [r7, #12]
 80093d6:	0f1b      	lsrs	r3, r3, #28
 80093d8:	2b09      	cmp	r3, #9
 80093da:	d80b      	bhi.n	80093f4 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 80093dc:	68fb      	ldr	r3, [r7, #12]
 80093de:	0f1b      	lsrs	r3, r3, #28
 80093e0:	b2da      	uxtb	r2, r3
 80093e2:	7dfb      	ldrb	r3, [r7, #23]
 80093e4:	005b      	lsls	r3, r3, #1
 80093e6:	4619      	mov	r1, r3
 80093e8:	68bb      	ldr	r3, [r7, #8]
 80093ea:	440b      	add	r3, r1
 80093ec:	3230      	adds	r2, #48	@ 0x30
 80093ee:	b2d2      	uxtb	r2, r2
 80093f0:	701a      	strb	r2, [r3, #0]
 80093f2:	e00a      	b.n	800940a <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80093f4:	68fb      	ldr	r3, [r7, #12]
 80093f6:	0f1b      	lsrs	r3, r3, #28
 80093f8:	b2da      	uxtb	r2, r3
 80093fa:	7dfb      	ldrb	r3, [r7, #23]
 80093fc:	005b      	lsls	r3, r3, #1
 80093fe:	4619      	mov	r1, r3
 8009400:	68bb      	ldr	r3, [r7, #8]
 8009402:	440b      	add	r3, r1
 8009404:	3237      	adds	r2, #55	@ 0x37
 8009406:	b2d2      	uxtb	r2, r2
 8009408:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800940a:	68fb      	ldr	r3, [r7, #12]
 800940c:	011b      	lsls	r3, r3, #4
 800940e:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8009410:	7dfb      	ldrb	r3, [r7, #23]
 8009412:	005b      	lsls	r3, r3, #1
 8009414:	3301      	adds	r3, #1
 8009416:	68ba      	ldr	r2, [r7, #8]
 8009418:	4413      	add	r3, r2
 800941a:	2200      	movs	r2, #0
 800941c:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800941e:	7dfb      	ldrb	r3, [r7, #23]
 8009420:	3301      	adds	r3, #1
 8009422:	75fb      	strb	r3, [r7, #23]
 8009424:	7dfa      	ldrb	r2, [r7, #23]
 8009426:	79fb      	ldrb	r3, [r7, #7]
 8009428:	429a      	cmp	r2, r3
 800942a:	d3d3      	bcc.n	80093d4 <IntToUnicode+0x18>
  }
}
 800942c:	bf00      	nop
 800942e:	bf00      	nop
 8009430:	371c      	adds	r7, #28
 8009432:	46bd      	mov	sp, r7
 8009434:	bc80      	pop	{r7}
 8009436:	4770      	bx	lr

08009438 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8009438:	b580      	push	{r7, lr}
 800943a:	b084      	sub	sp, #16
 800943c:	af00      	add	r7, sp, #0
 800943e:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 8009440:	687b      	ldr	r3, [r7, #4]
 8009442:	681b      	ldr	r3, [r3, #0]
 8009444:	4a0d      	ldr	r2, [pc, #52]	@ (800947c <HAL_PCD_MspInit+0x44>)
 8009446:	4293      	cmp	r3, r2
 8009448:	d113      	bne.n	8009472 <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800944a:	4b0d      	ldr	r3, [pc, #52]	@ (8009480 <HAL_PCD_MspInit+0x48>)
 800944c:	69db      	ldr	r3, [r3, #28]
 800944e:	4a0c      	ldr	r2, [pc, #48]	@ (8009480 <HAL_PCD_MspInit+0x48>)
 8009450:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8009454:	61d3      	str	r3, [r2, #28]
 8009456:	4b0a      	ldr	r3, [pc, #40]	@ (8009480 <HAL_PCD_MspInit+0x48>)
 8009458:	69db      	ldr	r3, [r3, #28]
 800945a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800945e:	60fb      	str	r3, [r7, #12]
 8009460:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 8009462:	2200      	movs	r2, #0
 8009464:	2100      	movs	r1, #0
 8009466:	2014      	movs	r0, #20
 8009468:	f7f8 feb9 	bl	80021de <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 800946c:	2014      	movs	r0, #20
 800946e:	f7f8 fed2 	bl	8002216 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8009472:	bf00      	nop
 8009474:	3710      	adds	r7, #16
 8009476:	46bd      	mov	sp, r7
 8009478:	bd80      	pop	{r7, pc}
 800947a:	bf00      	nop
 800947c:	40005c00 	.word	0x40005c00
 8009480:	40021000 	.word	0x40021000

08009484 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009484:	b580      	push	{r7, lr}
 8009486:	b082      	sub	sp, #8
 8009488:	af00      	add	r7, sp, #0
 800948a:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800948c:	687b      	ldr	r3, [r7, #4]
 800948e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009492:	687b      	ldr	r3, [r7, #4]
 8009494:	f503 7326 	add.w	r3, r3, #664	@ 0x298
 8009498:	4619      	mov	r1, r3
 800949a:	4610      	mov	r0, r2
 800949c:	f7fe fdc1 	bl	8008022 <USBD_LL_SetupStage>
}
 80094a0:	bf00      	nop
 80094a2:	3708      	adds	r7, #8
 80094a4:	46bd      	mov	sp, r7
 80094a6:	bd80      	pop	{r7, pc}

080094a8 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80094a8:	b580      	push	{r7, lr}
 80094aa:	b082      	sub	sp, #8
 80094ac:	af00      	add	r7, sp, #0
 80094ae:	6078      	str	r0, [r7, #4]
 80094b0:	460b      	mov	r3, r1
 80094b2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80094b4:	687b      	ldr	r3, [r7, #4]
 80094b6:	f8d3 02d4 	ldr.w	r0, [r3, #724]	@ 0x2d4
 80094ba:	78fa      	ldrb	r2, [r7, #3]
 80094bc:	6879      	ldr	r1, [r7, #4]
 80094be:	4613      	mov	r3, r2
 80094c0:	009b      	lsls	r3, r3, #2
 80094c2:	4413      	add	r3, r2
 80094c4:	00db      	lsls	r3, r3, #3
 80094c6:	440b      	add	r3, r1
 80094c8:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 80094cc:	681a      	ldr	r2, [r3, #0]
 80094ce:	78fb      	ldrb	r3, [r7, #3]
 80094d0:	4619      	mov	r1, r3
 80094d2:	f7fe fdf3 	bl	80080bc <USBD_LL_DataOutStage>
}
 80094d6:	bf00      	nop
 80094d8:	3708      	adds	r7, #8
 80094da:	46bd      	mov	sp, r7
 80094dc:	bd80      	pop	{r7, pc}

080094de <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80094de:	b580      	push	{r7, lr}
 80094e0:	b082      	sub	sp, #8
 80094e2:	af00      	add	r7, sp, #0
 80094e4:	6078      	str	r0, [r7, #4]
 80094e6:	460b      	mov	r3, r1
 80094e8:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80094ea:	687b      	ldr	r3, [r7, #4]
 80094ec:	f8d3 02d4 	ldr.w	r0, [r3, #724]	@ 0x2d4
 80094f0:	78fa      	ldrb	r2, [r7, #3]
 80094f2:	6879      	ldr	r1, [r7, #4]
 80094f4:	4613      	mov	r3, r2
 80094f6:	009b      	lsls	r3, r3, #2
 80094f8:	4413      	add	r3, r2
 80094fa:	00db      	lsls	r3, r3, #3
 80094fc:	440b      	add	r3, r1
 80094fe:	3324      	adds	r3, #36	@ 0x24
 8009500:	681a      	ldr	r2, [r3, #0]
 8009502:	78fb      	ldrb	r3, [r7, #3]
 8009504:	4619      	mov	r1, r3
 8009506:	f7fe fe4a 	bl	800819e <USBD_LL_DataInStage>
}
 800950a:	bf00      	nop
 800950c:	3708      	adds	r7, #8
 800950e:	46bd      	mov	sp, r7
 8009510:	bd80      	pop	{r7, pc}

08009512 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009512:	b580      	push	{r7, lr}
 8009514:	b082      	sub	sp, #8
 8009516:	af00      	add	r7, sp, #0
 8009518:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800951a:	687b      	ldr	r3, [r7, #4]
 800951c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8009520:	4618      	mov	r0, r3
 8009522:	f7fe ff5a 	bl	80083da <USBD_LL_SOF>
}
 8009526:	bf00      	nop
 8009528:	3708      	adds	r7, #8
 800952a:	46bd      	mov	sp, r7
 800952c:	bd80      	pop	{r7, pc}

0800952e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800952e:	b580      	push	{r7, lr}
 8009530:	b084      	sub	sp, #16
 8009532:	af00      	add	r7, sp, #0
 8009534:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8009536:	2301      	movs	r3, #1
 8009538:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800953a:	687b      	ldr	r3, [r7, #4]
 800953c:	799b      	ldrb	r3, [r3, #6]
 800953e:	2b02      	cmp	r3, #2
 8009540:	d001      	beq.n	8009546 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8009542:	f7f8 fb65 	bl	8001c10 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8009546:	687b      	ldr	r3, [r7, #4]
 8009548:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800954c:	7bfa      	ldrb	r2, [r7, #15]
 800954e:	4611      	mov	r1, r2
 8009550:	4618      	mov	r0, r3
 8009552:	f7fe ff0a 	bl	800836a <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8009556:	687b      	ldr	r3, [r7, #4]
 8009558:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800955c:	4618      	mov	r0, r3
 800955e:	f7fe fec3 	bl	80082e8 <USBD_LL_Reset>
}
 8009562:	bf00      	nop
 8009564:	3710      	adds	r7, #16
 8009566:	46bd      	mov	sp, r7
 8009568:	bd80      	pop	{r7, pc}
	...

0800956c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800956c:	b580      	push	{r7, lr}
 800956e:	b082      	sub	sp, #8
 8009570:	af00      	add	r7, sp, #0
 8009572:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8009574:	687b      	ldr	r3, [r7, #4]
 8009576:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800957a:	4618      	mov	r0, r3
 800957c:	f7fe ff04 	bl	8008388 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8009580:	687b      	ldr	r3, [r7, #4]
 8009582:	7a9b      	ldrb	r3, [r3, #10]
 8009584:	2b00      	cmp	r3, #0
 8009586:	d005      	beq.n	8009594 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8009588:	4b04      	ldr	r3, [pc, #16]	@ (800959c <HAL_PCD_SuspendCallback+0x30>)
 800958a:	691b      	ldr	r3, [r3, #16]
 800958c:	4a03      	ldr	r2, [pc, #12]	@ (800959c <HAL_PCD_SuspendCallback+0x30>)
 800958e:	f043 0306 	orr.w	r3, r3, #6
 8009592:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8009594:	bf00      	nop
 8009596:	3708      	adds	r7, #8
 8009598:	46bd      	mov	sp, r7
 800959a:	bd80      	pop	{r7, pc}
 800959c:	e000ed00 	.word	0xe000ed00

080095a0 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80095a0:	b580      	push	{r7, lr}
 80095a2:	b082      	sub	sp, #8
 80095a4:	af00      	add	r7, sp, #0
 80095a6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80095a8:	687b      	ldr	r3, [r7, #4]
 80095aa:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80095ae:	4618      	mov	r0, r3
 80095b0:	f7fe fefe 	bl	80083b0 <USBD_LL_Resume>
}
 80095b4:	bf00      	nop
 80095b6:	3708      	adds	r7, #8
 80095b8:	46bd      	mov	sp, r7
 80095ba:	bd80      	pop	{r7, pc}

080095bc <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80095bc:	b580      	push	{r7, lr}
 80095be:	b082      	sub	sp, #8
 80095c0:	af00      	add	r7, sp, #0
 80095c2:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 80095c4:	4a28      	ldr	r2, [pc, #160]	@ (8009668 <USBD_LL_Init+0xac>)
 80095c6:	687b      	ldr	r3, [r7, #4]
 80095c8:	f8c2 32d4 	str.w	r3, [r2, #724]	@ 0x2d4
  pdev->pData = &hpcd_USB_FS;
 80095cc:	687b      	ldr	r3, [r7, #4]
 80095ce:	4a26      	ldr	r2, [pc, #152]	@ (8009668 <USBD_LL_Init+0xac>)
 80095d0:	f8c3 22c0 	str.w	r2, [r3, #704]	@ 0x2c0

  hpcd_USB_FS.Instance = USB;
 80095d4:	4b24      	ldr	r3, [pc, #144]	@ (8009668 <USBD_LL_Init+0xac>)
 80095d6:	4a25      	ldr	r2, [pc, #148]	@ (800966c <USBD_LL_Init+0xb0>)
 80095d8:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 80095da:	4b23      	ldr	r3, [pc, #140]	@ (8009668 <USBD_LL_Init+0xac>)
 80095dc:	2208      	movs	r2, #8
 80095de:	711a      	strb	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 80095e0:	4b21      	ldr	r3, [pc, #132]	@ (8009668 <USBD_LL_Init+0xac>)
 80095e2:	2202      	movs	r2, #2
 80095e4:	719a      	strb	r2, [r3, #6]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 80095e6:	4b20      	ldr	r3, [pc, #128]	@ (8009668 <USBD_LL_Init+0xac>)
 80095e8:	2200      	movs	r2, #0
 80095ea:	729a      	strb	r2, [r3, #10]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 80095ec:	4b1e      	ldr	r3, [pc, #120]	@ (8009668 <USBD_LL_Init+0xac>)
 80095ee:	2200      	movs	r2, #0
 80095f0:	72da      	strb	r2, [r3, #11]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 80095f2:	4b1d      	ldr	r3, [pc, #116]	@ (8009668 <USBD_LL_Init+0xac>)
 80095f4:	2200      	movs	r2, #0
 80095f6:	731a      	strb	r2, [r3, #12]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 80095f8:	481b      	ldr	r0, [pc, #108]	@ (8009668 <USBD_LL_Init+0xac>)
 80095fa:	f7f8 ffab 	bl	8002554 <HAL_PCD_Init>
 80095fe:	4603      	mov	r3, r0
 8009600:	2b00      	cmp	r3, #0
 8009602:	d001      	beq.n	8009608 <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 8009604:	f7f8 fb04 	bl	8001c10 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8009608:	687b      	ldr	r3, [r7, #4]
 800960a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800960e:	2318      	movs	r3, #24
 8009610:	2200      	movs	r2, #0
 8009612:	2100      	movs	r1, #0
 8009614:	f7fa fcbc 	bl	8003f90 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8009618:	687b      	ldr	r3, [r7, #4]
 800961a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800961e:	2358      	movs	r3, #88	@ 0x58
 8009620:	2200      	movs	r2, #0
 8009622:	2180      	movs	r1, #128	@ 0x80
 8009624:	f7fa fcb4 	bl	8003f90 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 8009628:	687b      	ldr	r3, [r7, #4]
 800962a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800962e:	23c0      	movs	r3, #192	@ 0xc0
 8009630:	2200      	movs	r2, #0
 8009632:	2181      	movs	r1, #129	@ 0x81
 8009634:	f7fa fcac 	bl	8003f90 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 8009638:	687b      	ldr	r3, [r7, #4]
 800963a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800963e:	f44f 7388 	mov.w	r3, #272	@ 0x110
 8009642:	2200      	movs	r2, #0
 8009644:	2101      	movs	r1, #1
 8009646:	f7fa fca3 	bl	8003f90 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800964a:	687b      	ldr	r3, [r7, #4]
 800964c:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 8009650:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8009654:	2200      	movs	r2, #0
 8009656:	2182      	movs	r1, #130	@ 0x82
 8009658:	f7fa fc9a 	bl	8003f90 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 800965c:	2300      	movs	r3, #0
}
 800965e:	4618      	mov	r0, r3
 8009660:	3708      	adds	r7, #8
 8009662:	46bd      	mov	sp, r7
 8009664:	bd80      	pop	{r7, pc}
 8009666:	bf00      	nop
 8009668:	20001090 	.word	0x20001090
 800966c:	40005c00 	.word	0x40005c00

08009670 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8009670:	b580      	push	{r7, lr}
 8009672:	b084      	sub	sp, #16
 8009674:	af00      	add	r7, sp, #0
 8009676:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009678:	2300      	movs	r3, #0
 800967a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800967c:	2300      	movs	r3, #0
 800967e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8009680:	687b      	ldr	r3, [r7, #4]
 8009682:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8009686:	4618      	mov	r0, r3
 8009688:	f7f9 f85a 	bl	8002740 <HAL_PCD_Start>
 800968c:	4603      	mov	r3, r0
 800968e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009690:	7bfb      	ldrb	r3, [r7, #15]
 8009692:	4618      	mov	r0, r3
 8009694:	f000 f94e 	bl	8009934 <USBD_Get_USB_Status>
 8009698:	4603      	mov	r3, r0
 800969a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800969c:	7bbb      	ldrb	r3, [r7, #14]
}
 800969e:	4618      	mov	r0, r3
 80096a0:	3710      	adds	r7, #16
 80096a2:	46bd      	mov	sp, r7
 80096a4:	bd80      	pop	{r7, pc}

080096a6 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 80096a6:	b580      	push	{r7, lr}
 80096a8:	b084      	sub	sp, #16
 80096aa:	af00      	add	r7, sp, #0
 80096ac:	6078      	str	r0, [r7, #4]
 80096ae:	4608      	mov	r0, r1
 80096b0:	4611      	mov	r1, r2
 80096b2:	461a      	mov	r2, r3
 80096b4:	4603      	mov	r3, r0
 80096b6:	70fb      	strb	r3, [r7, #3]
 80096b8:	460b      	mov	r3, r1
 80096ba:	70bb      	strb	r3, [r7, #2]
 80096bc:	4613      	mov	r3, r2
 80096be:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80096c0:	2300      	movs	r3, #0
 80096c2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80096c4:	2300      	movs	r3, #0
 80096c6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80096c8:	687b      	ldr	r3, [r7, #4]
 80096ca:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 80096ce:	78bb      	ldrb	r3, [r7, #2]
 80096d0:	883a      	ldrh	r2, [r7, #0]
 80096d2:	78f9      	ldrb	r1, [r7, #3]
 80096d4:	f7f9 f9ae 	bl	8002a34 <HAL_PCD_EP_Open>
 80096d8:	4603      	mov	r3, r0
 80096da:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80096dc:	7bfb      	ldrb	r3, [r7, #15]
 80096de:	4618      	mov	r0, r3
 80096e0:	f000 f928 	bl	8009934 <USBD_Get_USB_Status>
 80096e4:	4603      	mov	r3, r0
 80096e6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80096e8:	7bbb      	ldrb	r3, [r7, #14]
}
 80096ea:	4618      	mov	r0, r3
 80096ec:	3710      	adds	r7, #16
 80096ee:	46bd      	mov	sp, r7
 80096f0:	bd80      	pop	{r7, pc}

080096f2 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80096f2:	b580      	push	{r7, lr}
 80096f4:	b084      	sub	sp, #16
 80096f6:	af00      	add	r7, sp, #0
 80096f8:	6078      	str	r0, [r7, #4]
 80096fa:	460b      	mov	r3, r1
 80096fc:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80096fe:	2300      	movs	r3, #0
 8009700:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009702:	2300      	movs	r3, #0
 8009704:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8009706:	687b      	ldr	r3, [r7, #4]
 8009708:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800970c:	78fa      	ldrb	r2, [r7, #3]
 800970e:	4611      	mov	r1, r2
 8009710:	4618      	mov	r0, r3
 8009712:	f7f9 f9ec 	bl	8002aee <HAL_PCD_EP_Close>
 8009716:	4603      	mov	r3, r0
 8009718:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800971a:	7bfb      	ldrb	r3, [r7, #15]
 800971c:	4618      	mov	r0, r3
 800971e:	f000 f909 	bl	8009934 <USBD_Get_USB_Status>
 8009722:	4603      	mov	r3, r0
 8009724:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009726:	7bbb      	ldrb	r3, [r7, #14]
}
 8009728:	4618      	mov	r0, r3
 800972a:	3710      	adds	r7, #16
 800972c:	46bd      	mov	sp, r7
 800972e:	bd80      	pop	{r7, pc}

08009730 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009730:	b580      	push	{r7, lr}
 8009732:	b084      	sub	sp, #16
 8009734:	af00      	add	r7, sp, #0
 8009736:	6078      	str	r0, [r7, #4]
 8009738:	460b      	mov	r3, r1
 800973a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800973c:	2300      	movs	r3, #0
 800973e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009740:	2300      	movs	r3, #0
 8009742:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8009744:	687b      	ldr	r3, [r7, #4]
 8009746:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800974a:	78fa      	ldrb	r2, [r7, #3]
 800974c:	4611      	mov	r1, r2
 800974e:	4618      	mov	r0, r3
 8009750:	f7f9 fa94 	bl	8002c7c <HAL_PCD_EP_SetStall>
 8009754:	4603      	mov	r3, r0
 8009756:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009758:	7bfb      	ldrb	r3, [r7, #15]
 800975a:	4618      	mov	r0, r3
 800975c:	f000 f8ea 	bl	8009934 <USBD_Get_USB_Status>
 8009760:	4603      	mov	r3, r0
 8009762:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009764:	7bbb      	ldrb	r3, [r7, #14]
}
 8009766:	4618      	mov	r0, r3
 8009768:	3710      	adds	r7, #16
 800976a:	46bd      	mov	sp, r7
 800976c:	bd80      	pop	{r7, pc}

0800976e <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800976e:	b580      	push	{r7, lr}
 8009770:	b084      	sub	sp, #16
 8009772:	af00      	add	r7, sp, #0
 8009774:	6078      	str	r0, [r7, #4]
 8009776:	460b      	mov	r3, r1
 8009778:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800977a:	2300      	movs	r3, #0
 800977c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800977e:	2300      	movs	r3, #0
 8009780:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8009782:	687b      	ldr	r3, [r7, #4]
 8009784:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8009788:	78fa      	ldrb	r2, [r7, #3]
 800978a:	4611      	mov	r1, r2
 800978c:	4618      	mov	r0, r3
 800978e:	f7f9 fad5 	bl	8002d3c <HAL_PCD_EP_ClrStall>
 8009792:	4603      	mov	r3, r0
 8009794:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009796:	7bfb      	ldrb	r3, [r7, #15]
 8009798:	4618      	mov	r0, r3
 800979a:	f000 f8cb 	bl	8009934 <USBD_Get_USB_Status>
 800979e:	4603      	mov	r3, r0
 80097a0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80097a2:	7bbb      	ldrb	r3, [r7, #14]
}
 80097a4:	4618      	mov	r0, r3
 80097a6:	3710      	adds	r7, #16
 80097a8:	46bd      	mov	sp, r7
 80097aa:	bd80      	pop	{r7, pc}

080097ac <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80097ac:	b480      	push	{r7}
 80097ae:	b085      	sub	sp, #20
 80097b0:	af00      	add	r7, sp, #0
 80097b2:	6078      	str	r0, [r7, #4]
 80097b4:	460b      	mov	r3, r1
 80097b6:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80097b8:	687b      	ldr	r3, [r7, #4]
 80097ba:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 80097be:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 80097c0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80097c4:	2b00      	cmp	r3, #0
 80097c6:	da0b      	bge.n	80097e0 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 80097c8:	78fb      	ldrb	r3, [r7, #3]
 80097ca:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80097ce:	68f9      	ldr	r1, [r7, #12]
 80097d0:	4613      	mov	r3, r2
 80097d2:	009b      	lsls	r3, r3, #2
 80097d4:	4413      	add	r3, r2
 80097d6:	00db      	lsls	r3, r3, #3
 80097d8:	440b      	add	r3, r1
 80097da:	3312      	adds	r3, #18
 80097dc:	781b      	ldrb	r3, [r3, #0]
 80097de:	e00b      	b.n	80097f8 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 80097e0:	78fb      	ldrb	r3, [r7, #3]
 80097e2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80097e6:	68f9      	ldr	r1, [r7, #12]
 80097e8:	4613      	mov	r3, r2
 80097ea:	009b      	lsls	r3, r3, #2
 80097ec:	4413      	add	r3, r2
 80097ee:	00db      	lsls	r3, r3, #3
 80097f0:	440b      	add	r3, r1
 80097f2:	f503 73a9 	add.w	r3, r3, #338	@ 0x152
 80097f6:	781b      	ldrb	r3, [r3, #0]
  }
}
 80097f8:	4618      	mov	r0, r3
 80097fa:	3714      	adds	r7, #20
 80097fc:	46bd      	mov	sp, r7
 80097fe:	bc80      	pop	{r7}
 8009800:	4770      	bx	lr

08009802 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8009802:	b580      	push	{r7, lr}
 8009804:	b084      	sub	sp, #16
 8009806:	af00      	add	r7, sp, #0
 8009808:	6078      	str	r0, [r7, #4]
 800980a:	460b      	mov	r3, r1
 800980c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800980e:	2300      	movs	r3, #0
 8009810:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009812:	2300      	movs	r3, #0
 8009814:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8009816:	687b      	ldr	r3, [r7, #4]
 8009818:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800981c:	78fa      	ldrb	r2, [r7, #3]
 800981e:	4611      	mov	r1, r2
 8009820:	4618      	mov	r0, r3
 8009822:	f7f9 f8e3 	bl	80029ec <HAL_PCD_SetAddress>
 8009826:	4603      	mov	r3, r0
 8009828:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800982a:	7bfb      	ldrb	r3, [r7, #15]
 800982c:	4618      	mov	r0, r3
 800982e:	f000 f881 	bl	8009934 <USBD_Get_USB_Status>
 8009832:	4603      	mov	r3, r0
 8009834:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009836:	7bbb      	ldrb	r3, [r7, #14]
}
 8009838:	4618      	mov	r0, r3
 800983a:	3710      	adds	r7, #16
 800983c:	46bd      	mov	sp, r7
 800983e:	bd80      	pop	{r7, pc}

08009840 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8009840:	b580      	push	{r7, lr}
 8009842:	b086      	sub	sp, #24
 8009844:	af00      	add	r7, sp, #0
 8009846:	60f8      	str	r0, [r7, #12]
 8009848:	607a      	str	r2, [r7, #4]
 800984a:	461a      	mov	r2, r3
 800984c:	460b      	mov	r3, r1
 800984e:	72fb      	strb	r3, [r7, #11]
 8009850:	4613      	mov	r3, r2
 8009852:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009854:	2300      	movs	r3, #0
 8009856:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009858:	2300      	movs	r3, #0
 800985a:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800985c:	68fb      	ldr	r3, [r7, #12]
 800985e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 8009862:	893b      	ldrh	r3, [r7, #8]
 8009864:	7af9      	ldrb	r1, [r7, #11]
 8009866:	687a      	ldr	r2, [r7, #4]
 8009868:	f7f9 f9d1 	bl	8002c0e <HAL_PCD_EP_Transmit>
 800986c:	4603      	mov	r3, r0
 800986e:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009870:	7dfb      	ldrb	r3, [r7, #23]
 8009872:	4618      	mov	r0, r3
 8009874:	f000 f85e 	bl	8009934 <USBD_Get_USB_Status>
 8009878:	4603      	mov	r3, r0
 800987a:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800987c:	7dbb      	ldrb	r3, [r7, #22]
}
 800987e:	4618      	mov	r0, r3
 8009880:	3718      	adds	r7, #24
 8009882:	46bd      	mov	sp, r7
 8009884:	bd80      	pop	{r7, pc}

08009886 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8009886:	b580      	push	{r7, lr}
 8009888:	b086      	sub	sp, #24
 800988a:	af00      	add	r7, sp, #0
 800988c:	60f8      	str	r0, [r7, #12]
 800988e:	607a      	str	r2, [r7, #4]
 8009890:	461a      	mov	r2, r3
 8009892:	460b      	mov	r3, r1
 8009894:	72fb      	strb	r3, [r7, #11]
 8009896:	4613      	mov	r3, r2
 8009898:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800989a:	2300      	movs	r3, #0
 800989c:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800989e:	2300      	movs	r3, #0
 80098a0:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80098a2:	68fb      	ldr	r3, [r7, #12]
 80098a4:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 80098a8:	893b      	ldrh	r3, [r7, #8]
 80098aa:	7af9      	ldrb	r1, [r7, #11]
 80098ac:	687a      	ldr	r2, [r7, #4]
 80098ae:	f7f9 f966 	bl	8002b7e <HAL_PCD_EP_Receive>
 80098b2:	4603      	mov	r3, r0
 80098b4:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80098b6:	7dfb      	ldrb	r3, [r7, #23]
 80098b8:	4618      	mov	r0, r3
 80098ba:	f000 f83b 	bl	8009934 <USBD_Get_USB_Status>
 80098be:	4603      	mov	r3, r0
 80098c0:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80098c2:	7dbb      	ldrb	r3, [r7, #22]
}
 80098c4:	4618      	mov	r0, r3
 80098c6:	3718      	adds	r7, #24
 80098c8:	46bd      	mov	sp, r7
 80098ca:	bd80      	pop	{r7, pc}

080098cc <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80098cc:	b580      	push	{r7, lr}
 80098ce:	b082      	sub	sp, #8
 80098d0:	af00      	add	r7, sp, #0
 80098d2:	6078      	str	r0, [r7, #4]
 80098d4:	460b      	mov	r3, r1
 80098d6:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 80098d8:	687b      	ldr	r3, [r7, #4]
 80098da:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 80098de:	78fa      	ldrb	r2, [r7, #3]
 80098e0:	4611      	mov	r1, r2
 80098e2:	4618      	mov	r0, r3
 80098e4:	f7f9 f97c 	bl	8002be0 <HAL_PCD_EP_GetRxCount>
 80098e8:	4603      	mov	r3, r0
}
 80098ea:	4618      	mov	r0, r3
 80098ec:	3708      	adds	r7, #8
 80098ee:	46bd      	mov	sp, r7
 80098f0:	bd80      	pop	{r7, pc}
	...

080098f4 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 80098f4:	b480      	push	{r7}
 80098f6:	b083      	sub	sp, #12
 80098f8:	af00      	add	r7, sp, #0
 80098fa:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 80098fc:	4b02      	ldr	r3, [pc, #8]	@ (8009908 <USBD_static_malloc+0x14>)
}
 80098fe:	4618      	mov	r0, r3
 8009900:	370c      	adds	r7, #12
 8009902:	46bd      	mov	sp, r7
 8009904:	bc80      	pop	{r7}
 8009906:	4770      	bx	lr
 8009908:	20001368 	.word	0x20001368

0800990c <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800990c:	b480      	push	{r7}
 800990e:	b083      	sub	sp, #12
 8009910:	af00      	add	r7, sp, #0
 8009912:	6078      	str	r0, [r7, #4]

}
 8009914:	bf00      	nop
 8009916:	370c      	adds	r7, #12
 8009918:	46bd      	mov	sp, r7
 800991a:	bc80      	pop	{r7}
 800991c:	4770      	bx	lr

0800991e <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800991e:	b480      	push	{r7}
 8009920:	b083      	sub	sp, #12
 8009922:	af00      	add	r7, sp, #0
 8009924:	6078      	str	r0, [r7, #4]
 8009926:	460b      	mov	r3, r1
 8009928:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 800992a:	bf00      	nop
 800992c:	370c      	adds	r7, #12
 800992e:	46bd      	mov	sp, r7
 8009930:	bc80      	pop	{r7}
 8009932:	4770      	bx	lr

08009934 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8009934:	b480      	push	{r7}
 8009936:	b085      	sub	sp, #20
 8009938:	af00      	add	r7, sp, #0
 800993a:	4603      	mov	r3, r0
 800993c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800993e:	2300      	movs	r3, #0
 8009940:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8009942:	79fb      	ldrb	r3, [r7, #7]
 8009944:	2b03      	cmp	r3, #3
 8009946:	d817      	bhi.n	8009978 <USBD_Get_USB_Status+0x44>
 8009948:	a201      	add	r2, pc, #4	@ (adr r2, 8009950 <USBD_Get_USB_Status+0x1c>)
 800994a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800994e:	bf00      	nop
 8009950:	08009961 	.word	0x08009961
 8009954:	08009967 	.word	0x08009967
 8009958:	0800996d 	.word	0x0800996d
 800995c:	08009973 	.word	0x08009973
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8009960:	2300      	movs	r3, #0
 8009962:	73fb      	strb	r3, [r7, #15]
    break;
 8009964:	e00b      	b.n	800997e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8009966:	2302      	movs	r3, #2
 8009968:	73fb      	strb	r3, [r7, #15]
    break;
 800996a:	e008      	b.n	800997e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800996c:	2301      	movs	r3, #1
 800996e:	73fb      	strb	r3, [r7, #15]
    break;
 8009970:	e005      	b.n	800997e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8009972:	2302      	movs	r3, #2
 8009974:	73fb      	strb	r3, [r7, #15]
    break;
 8009976:	e002      	b.n	800997e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8009978:	2302      	movs	r3, #2
 800997a:	73fb      	strb	r3, [r7, #15]
    break;
 800997c:	bf00      	nop
  }
  return usb_status;
 800997e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009980:	4618      	mov	r0, r3
 8009982:	3714      	adds	r7, #20
 8009984:	46bd      	mov	sp, r7
 8009986:	bc80      	pop	{r7}
 8009988:	4770      	bx	lr
 800998a:	bf00      	nop

0800998c <pow>:
 800998c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009990:	4614      	mov	r4, r2
 8009992:	461d      	mov	r5, r3
 8009994:	4680      	mov	r8, r0
 8009996:	4689      	mov	r9, r1
 8009998:	f000 f866 	bl	8009a68 <__ieee754_pow>
 800999c:	4622      	mov	r2, r4
 800999e:	4606      	mov	r6, r0
 80099a0:	460f      	mov	r7, r1
 80099a2:	462b      	mov	r3, r5
 80099a4:	4620      	mov	r0, r4
 80099a6:	4629      	mov	r1, r5
 80099a8:	f7f7 f8e4 	bl	8000b74 <__aeabi_dcmpun>
 80099ac:	bbc8      	cbnz	r0, 8009a22 <pow+0x96>
 80099ae:	2200      	movs	r2, #0
 80099b0:	2300      	movs	r3, #0
 80099b2:	4640      	mov	r0, r8
 80099b4:	4649      	mov	r1, r9
 80099b6:	f7f7 f8ab 	bl	8000b10 <__aeabi_dcmpeq>
 80099ba:	b1b8      	cbz	r0, 80099ec <pow+0x60>
 80099bc:	2200      	movs	r2, #0
 80099be:	2300      	movs	r3, #0
 80099c0:	4620      	mov	r0, r4
 80099c2:	4629      	mov	r1, r5
 80099c4:	f7f7 f8a4 	bl	8000b10 <__aeabi_dcmpeq>
 80099c8:	2800      	cmp	r0, #0
 80099ca:	d141      	bne.n	8009a50 <pow+0xc4>
 80099cc:	4620      	mov	r0, r4
 80099ce:	4629      	mov	r1, r5
 80099d0:	f000 f844 	bl	8009a5c <finite>
 80099d4:	b328      	cbz	r0, 8009a22 <pow+0x96>
 80099d6:	2200      	movs	r2, #0
 80099d8:	2300      	movs	r3, #0
 80099da:	4620      	mov	r0, r4
 80099dc:	4629      	mov	r1, r5
 80099de:	f7f7 f8a1 	bl	8000b24 <__aeabi_dcmplt>
 80099e2:	b1f0      	cbz	r0, 8009a22 <pow+0x96>
 80099e4:	f002 fad2 	bl	800bf8c <__errno>
 80099e8:	2322      	movs	r3, #34	@ 0x22
 80099ea:	e019      	b.n	8009a20 <pow+0x94>
 80099ec:	4630      	mov	r0, r6
 80099ee:	4639      	mov	r1, r7
 80099f0:	f000 f834 	bl	8009a5c <finite>
 80099f4:	b9c8      	cbnz	r0, 8009a2a <pow+0x9e>
 80099f6:	4640      	mov	r0, r8
 80099f8:	4649      	mov	r1, r9
 80099fa:	f000 f82f 	bl	8009a5c <finite>
 80099fe:	b1a0      	cbz	r0, 8009a2a <pow+0x9e>
 8009a00:	4620      	mov	r0, r4
 8009a02:	4629      	mov	r1, r5
 8009a04:	f000 f82a 	bl	8009a5c <finite>
 8009a08:	b178      	cbz	r0, 8009a2a <pow+0x9e>
 8009a0a:	4632      	mov	r2, r6
 8009a0c:	463b      	mov	r3, r7
 8009a0e:	4630      	mov	r0, r6
 8009a10:	4639      	mov	r1, r7
 8009a12:	f7f7 f8af 	bl	8000b74 <__aeabi_dcmpun>
 8009a16:	2800      	cmp	r0, #0
 8009a18:	d0e4      	beq.n	80099e4 <pow+0x58>
 8009a1a:	f002 fab7 	bl	800bf8c <__errno>
 8009a1e:	2321      	movs	r3, #33	@ 0x21
 8009a20:	6003      	str	r3, [r0, #0]
 8009a22:	4630      	mov	r0, r6
 8009a24:	4639      	mov	r1, r7
 8009a26:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009a2a:	2200      	movs	r2, #0
 8009a2c:	2300      	movs	r3, #0
 8009a2e:	4630      	mov	r0, r6
 8009a30:	4639      	mov	r1, r7
 8009a32:	f7f7 f86d 	bl	8000b10 <__aeabi_dcmpeq>
 8009a36:	2800      	cmp	r0, #0
 8009a38:	d0f3      	beq.n	8009a22 <pow+0x96>
 8009a3a:	4640      	mov	r0, r8
 8009a3c:	4649      	mov	r1, r9
 8009a3e:	f000 f80d 	bl	8009a5c <finite>
 8009a42:	2800      	cmp	r0, #0
 8009a44:	d0ed      	beq.n	8009a22 <pow+0x96>
 8009a46:	4620      	mov	r0, r4
 8009a48:	4629      	mov	r1, r5
 8009a4a:	f000 f807 	bl	8009a5c <finite>
 8009a4e:	e7c8      	b.n	80099e2 <pow+0x56>
 8009a50:	2600      	movs	r6, #0
 8009a52:	4f01      	ldr	r7, [pc, #4]	@ (8009a58 <pow+0xcc>)
 8009a54:	e7e5      	b.n	8009a22 <pow+0x96>
 8009a56:	bf00      	nop
 8009a58:	3ff00000 	.word	0x3ff00000

08009a5c <finite>:
 8009a5c:	f041 4000 	orr.w	r0, r1, #2147483648	@ 0x80000000
 8009a60:	f500 1080 	add.w	r0, r0, #1048576	@ 0x100000
 8009a64:	0fc0      	lsrs	r0, r0, #31
 8009a66:	4770      	bx	lr

08009a68 <__ieee754_pow>:
 8009a68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009a6c:	b091      	sub	sp, #68	@ 0x44
 8009a6e:	e9cd 2300 	strd	r2, r3, [sp]
 8009a72:	468b      	mov	fp, r1
 8009a74:	e9dd 1800 	ldrd	r1, r8, [sp]
 8009a78:	f028 4700 	bic.w	r7, r8, #2147483648	@ 0x80000000
 8009a7c:	4682      	mov	sl, r0
 8009a7e:	ea57 0001 	orrs.w	r0, r7, r1
 8009a82:	d112      	bne.n	8009aaa <__ieee754_pow+0x42>
 8009a84:	4653      	mov	r3, sl
 8009a86:	f48b 2200 	eor.w	r2, fp, #524288	@ 0x80000
 8009a8a:	18db      	adds	r3, r3, r3
 8009a8c:	4152      	adcs	r2, r2
 8009a8e:	4298      	cmp	r0, r3
 8009a90:	4b91      	ldr	r3, [pc, #580]	@ (8009cd8 <__ieee754_pow+0x270>)
 8009a92:	4193      	sbcs	r3, r2
 8009a94:	f080 84ce 	bcs.w	800a434 <__ieee754_pow+0x9cc>
 8009a98:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009a9c:	4650      	mov	r0, sl
 8009a9e:	4659      	mov	r1, fp
 8009aa0:	f7f6 fc18 	bl	80002d4 <__adddf3>
 8009aa4:	b011      	add	sp, #68	@ 0x44
 8009aa6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009aaa:	4b8c      	ldr	r3, [pc, #560]	@ (8009cdc <__ieee754_pow+0x274>)
 8009aac:	f02b 4600 	bic.w	r6, fp, #2147483648	@ 0x80000000
 8009ab0:	429e      	cmp	r6, r3
 8009ab2:	465d      	mov	r5, fp
 8009ab4:	46d1      	mov	r9, sl
 8009ab6:	d807      	bhi.n	8009ac8 <__ieee754_pow+0x60>
 8009ab8:	d102      	bne.n	8009ac0 <__ieee754_pow+0x58>
 8009aba:	f1ba 0f00 	cmp.w	sl, #0
 8009abe:	d1eb      	bne.n	8009a98 <__ieee754_pow+0x30>
 8009ac0:	429f      	cmp	r7, r3
 8009ac2:	d801      	bhi.n	8009ac8 <__ieee754_pow+0x60>
 8009ac4:	d10f      	bne.n	8009ae6 <__ieee754_pow+0x7e>
 8009ac6:	b171      	cbz	r1, 8009ae6 <__ieee754_pow+0x7e>
 8009ac8:	f105 4540 	add.w	r5, r5, #3221225472	@ 0xc0000000
 8009acc:	f505 1580 	add.w	r5, r5, #1048576	@ 0x100000
 8009ad0:	ea55 0509 	orrs.w	r5, r5, r9
 8009ad4:	d1e0      	bne.n	8009a98 <__ieee754_pow+0x30>
 8009ad6:	e9dd 3200 	ldrd	r3, r2, [sp]
 8009ada:	18db      	adds	r3, r3, r3
 8009adc:	f482 2200 	eor.w	r2, r2, #524288	@ 0x80000
 8009ae0:	4152      	adcs	r2, r2
 8009ae2:	429d      	cmp	r5, r3
 8009ae4:	e7d4      	b.n	8009a90 <__ieee754_pow+0x28>
 8009ae6:	2d00      	cmp	r5, #0
 8009ae8:	4633      	mov	r3, r6
 8009aea:	da39      	bge.n	8009b60 <__ieee754_pow+0xf8>
 8009aec:	4a7c      	ldr	r2, [pc, #496]	@ (8009ce0 <__ieee754_pow+0x278>)
 8009aee:	4297      	cmp	r7, r2
 8009af0:	d84e      	bhi.n	8009b90 <__ieee754_pow+0x128>
 8009af2:	f1a2 7254 	sub.w	r2, r2, #55574528	@ 0x3500000
 8009af6:	4297      	cmp	r7, r2
 8009af8:	f240 84ab 	bls.w	800a452 <__ieee754_pow+0x9ea>
 8009afc:	153a      	asrs	r2, r7, #20
 8009afe:	f2a2 32ff 	subw	r2, r2, #1023	@ 0x3ff
 8009b02:	2a14      	cmp	r2, #20
 8009b04:	dd0f      	ble.n	8009b26 <__ieee754_pow+0xbe>
 8009b06:	f1c2 0234 	rsb	r2, r2, #52	@ 0x34
 8009b0a:	fa21 f402 	lsr.w	r4, r1, r2
 8009b0e:	fa04 f202 	lsl.w	r2, r4, r2
 8009b12:	428a      	cmp	r2, r1
 8009b14:	f040 849d 	bne.w	800a452 <__ieee754_pow+0x9ea>
 8009b18:	f004 0401 	and.w	r4, r4, #1
 8009b1c:	f1c4 0402 	rsb	r4, r4, #2
 8009b20:	2900      	cmp	r1, #0
 8009b22:	d15a      	bne.n	8009bda <__ieee754_pow+0x172>
 8009b24:	e00e      	b.n	8009b44 <__ieee754_pow+0xdc>
 8009b26:	2900      	cmp	r1, #0
 8009b28:	d156      	bne.n	8009bd8 <__ieee754_pow+0x170>
 8009b2a:	f1c2 0214 	rsb	r2, r2, #20
 8009b2e:	fa47 f402 	asr.w	r4, r7, r2
 8009b32:	fa04 f202 	lsl.w	r2, r4, r2
 8009b36:	42ba      	cmp	r2, r7
 8009b38:	f040 8488 	bne.w	800a44c <__ieee754_pow+0x9e4>
 8009b3c:	f004 0401 	and.w	r4, r4, #1
 8009b40:	f1c4 0402 	rsb	r4, r4, #2
 8009b44:	4a67      	ldr	r2, [pc, #412]	@ (8009ce4 <__ieee754_pow+0x27c>)
 8009b46:	4297      	cmp	r7, r2
 8009b48:	d130      	bne.n	8009bac <__ieee754_pow+0x144>
 8009b4a:	f1b8 0f00 	cmp.w	r8, #0
 8009b4e:	f280 8479 	bge.w	800a444 <__ieee754_pow+0x9dc>
 8009b52:	4652      	mov	r2, sl
 8009b54:	465b      	mov	r3, fp
 8009b56:	2000      	movs	r0, #0
 8009b58:	4962      	ldr	r1, [pc, #392]	@ (8009ce4 <__ieee754_pow+0x27c>)
 8009b5a:	f7f6 fe9b 	bl	8000894 <__aeabi_ddiv>
 8009b5e:	e7a1      	b.n	8009aa4 <__ieee754_pow+0x3c>
 8009b60:	2400      	movs	r4, #0
 8009b62:	2900      	cmp	r1, #0
 8009b64:	d139      	bne.n	8009bda <__ieee754_pow+0x172>
 8009b66:	4a5d      	ldr	r2, [pc, #372]	@ (8009cdc <__ieee754_pow+0x274>)
 8009b68:	4297      	cmp	r7, r2
 8009b6a:	d1eb      	bne.n	8009b44 <__ieee754_pow+0xdc>
 8009b6c:	f106 4340 	add.w	r3, r6, #3221225472	@ 0xc0000000
 8009b70:	f503 1380 	add.w	r3, r3, #1048576	@ 0x100000
 8009b74:	ea53 0309 	orrs.w	r3, r3, r9
 8009b78:	f000 845c 	beq.w	800a434 <__ieee754_pow+0x9cc>
 8009b7c:	4b5a      	ldr	r3, [pc, #360]	@ (8009ce8 <__ieee754_pow+0x280>)
 8009b7e:	429e      	cmp	r6, r3
 8009b80:	d908      	bls.n	8009b94 <__ieee754_pow+0x12c>
 8009b82:	f1b8 0f00 	cmp.w	r8, #0
 8009b86:	f2c0 8459 	blt.w	800a43c <__ieee754_pow+0x9d4>
 8009b8a:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009b8e:	e789      	b.n	8009aa4 <__ieee754_pow+0x3c>
 8009b90:	2402      	movs	r4, #2
 8009b92:	e7e6      	b.n	8009b62 <__ieee754_pow+0xfa>
 8009b94:	f1b8 0f00 	cmp.w	r8, #0
 8009b98:	f04f 0000 	mov.w	r0, #0
 8009b9c:	f04f 0100 	mov.w	r1, #0
 8009ba0:	da80      	bge.n	8009aa4 <__ieee754_pow+0x3c>
 8009ba2:	e9dd 0300 	ldrd	r0, r3, [sp]
 8009ba6:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 8009baa:	e77b      	b.n	8009aa4 <__ieee754_pow+0x3c>
 8009bac:	f1b8 4f80 	cmp.w	r8, #1073741824	@ 0x40000000
 8009bb0:	d106      	bne.n	8009bc0 <__ieee754_pow+0x158>
 8009bb2:	4652      	mov	r2, sl
 8009bb4:	465b      	mov	r3, fp
 8009bb6:	4650      	mov	r0, sl
 8009bb8:	4659      	mov	r1, fp
 8009bba:	f7f6 fd41 	bl	8000640 <__aeabi_dmul>
 8009bbe:	e771      	b.n	8009aa4 <__ieee754_pow+0x3c>
 8009bc0:	4a4a      	ldr	r2, [pc, #296]	@ (8009cec <__ieee754_pow+0x284>)
 8009bc2:	4590      	cmp	r8, r2
 8009bc4:	d109      	bne.n	8009bda <__ieee754_pow+0x172>
 8009bc6:	2d00      	cmp	r5, #0
 8009bc8:	db07      	blt.n	8009bda <__ieee754_pow+0x172>
 8009bca:	4650      	mov	r0, sl
 8009bcc:	4659      	mov	r1, fp
 8009bce:	b011      	add	sp, #68	@ 0x44
 8009bd0:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009bd4:	f000 bd12 	b.w	800a5fc <__ieee754_sqrt>
 8009bd8:	2400      	movs	r4, #0
 8009bda:	4650      	mov	r0, sl
 8009bdc:	4659      	mov	r1, fp
 8009bde:	9302      	str	r3, [sp, #8]
 8009be0:	f000 fc6a 	bl	800a4b8 <fabs>
 8009be4:	9b02      	ldr	r3, [sp, #8]
 8009be6:	f1b9 0f00 	cmp.w	r9, #0
 8009bea:	d127      	bne.n	8009c3c <__ieee754_pow+0x1d4>
 8009bec:	4a3d      	ldr	r2, [pc, #244]	@ (8009ce4 <__ieee754_pow+0x27c>)
 8009bee:	f025 4c40 	bic.w	ip, r5, #3221225472	@ 0xc0000000
 8009bf2:	4594      	cmp	ip, r2
 8009bf4:	d000      	beq.n	8009bf8 <__ieee754_pow+0x190>
 8009bf6:	bb0e      	cbnz	r6, 8009c3c <__ieee754_pow+0x1d4>
 8009bf8:	f1b8 0f00 	cmp.w	r8, #0
 8009bfc:	da05      	bge.n	8009c0a <__ieee754_pow+0x1a2>
 8009bfe:	4602      	mov	r2, r0
 8009c00:	460b      	mov	r3, r1
 8009c02:	2000      	movs	r0, #0
 8009c04:	4937      	ldr	r1, [pc, #220]	@ (8009ce4 <__ieee754_pow+0x27c>)
 8009c06:	f7f6 fe45 	bl	8000894 <__aeabi_ddiv>
 8009c0a:	2d00      	cmp	r5, #0
 8009c0c:	f6bf af4a 	bge.w	8009aa4 <__ieee754_pow+0x3c>
 8009c10:	f106 4640 	add.w	r6, r6, #3221225472	@ 0xc0000000
 8009c14:	f506 1680 	add.w	r6, r6, #1048576	@ 0x100000
 8009c18:	4326      	orrs	r6, r4
 8009c1a:	d108      	bne.n	8009c2e <__ieee754_pow+0x1c6>
 8009c1c:	4602      	mov	r2, r0
 8009c1e:	460b      	mov	r3, r1
 8009c20:	4610      	mov	r0, r2
 8009c22:	4619      	mov	r1, r3
 8009c24:	f7f6 fb54 	bl	80002d0 <__aeabi_dsub>
 8009c28:	4602      	mov	r2, r0
 8009c2a:	460b      	mov	r3, r1
 8009c2c:	e795      	b.n	8009b5a <__ieee754_pow+0xf2>
 8009c2e:	2c01      	cmp	r4, #1
 8009c30:	f47f af38 	bne.w	8009aa4 <__ieee754_pow+0x3c>
 8009c34:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8009c38:	4619      	mov	r1, r3
 8009c3a:	e733      	b.n	8009aa4 <__ieee754_pow+0x3c>
 8009c3c:	0fea      	lsrs	r2, r5, #31
 8009c3e:	3a01      	subs	r2, #1
 8009c40:	ea52 0c04 	orrs.w	ip, r2, r4
 8009c44:	d102      	bne.n	8009c4c <__ieee754_pow+0x1e4>
 8009c46:	4652      	mov	r2, sl
 8009c48:	465b      	mov	r3, fp
 8009c4a:	e7e9      	b.n	8009c20 <__ieee754_pow+0x1b8>
 8009c4c:	f04f 0900 	mov.w	r9, #0
 8009c50:	3c01      	subs	r4, #1
 8009c52:	4314      	orrs	r4, r2
 8009c54:	bf14      	ite	ne
 8009c56:	f8df a08c 	ldrne.w	sl, [pc, #140]	@ 8009ce4 <__ieee754_pow+0x27c>
 8009c5a:	f8df a094 	ldreq.w	sl, [pc, #148]	@ 8009cf0 <__ieee754_pow+0x288>
 8009c5e:	f1b7 4f84 	cmp.w	r7, #1107296256	@ 0x42000000
 8009c62:	e9cd 9a02 	strd	r9, sl, [sp, #8]
 8009c66:	f240 8107 	bls.w	8009e78 <__ieee754_pow+0x410>
 8009c6a:	4b22      	ldr	r3, [pc, #136]	@ (8009cf4 <__ieee754_pow+0x28c>)
 8009c6c:	429f      	cmp	r7, r3
 8009c6e:	4b1e      	ldr	r3, [pc, #120]	@ (8009ce8 <__ieee754_pow+0x280>)
 8009c70:	d913      	bls.n	8009c9a <__ieee754_pow+0x232>
 8009c72:	429e      	cmp	r6, r3
 8009c74:	d808      	bhi.n	8009c88 <__ieee754_pow+0x220>
 8009c76:	f1b8 0f00 	cmp.w	r8, #0
 8009c7a:	da08      	bge.n	8009c8e <__ieee754_pow+0x226>
 8009c7c:	2000      	movs	r0, #0
 8009c7e:	b011      	add	sp, #68	@ 0x44
 8009c80:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009c84:	f000 bcb4 	b.w	800a5f0 <__math_oflow>
 8009c88:	f1b8 0f00 	cmp.w	r8, #0
 8009c8c:	dcf6      	bgt.n	8009c7c <__ieee754_pow+0x214>
 8009c8e:	2000      	movs	r0, #0
 8009c90:	b011      	add	sp, #68	@ 0x44
 8009c92:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009c96:	f000 bca6 	b.w	800a5e6 <__math_uflow>
 8009c9a:	429e      	cmp	r6, r3
 8009c9c:	d20c      	bcs.n	8009cb8 <__ieee754_pow+0x250>
 8009c9e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009ca2:	2200      	movs	r2, #0
 8009ca4:	2300      	movs	r3, #0
 8009ca6:	f7f6 ff3d 	bl	8000b24 <__aeabi_dcmplt>
 8009caa:	3800      	subs	r0, #0
 8009cac:	bf18      	it	ne
 8009cae:	2001      	movne	r0, #1
 8009cb0:	f1b8 0f00 	cmp.w	r8, #0
 8009cb4:	daec      	bge.n	8009c90 <__ieee754_pow+0x228>
 8009cb6:	e7e2      	b.n	8009c7e <__ieee754_pow+0x216>
 8009cb8:	4b0a      	ldr	r3, [pc, #40]	@ (8009ce4 <__ieee754_pow+0x27c>)
 8009cba:	2200      	movs	r2, #0
 8009cbc:	429e      	cmp	r6, r3
 8009cbe:	d91b      	bls.n	8009cf8 <__ieee754_pow+0x290>
 8009cc0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009cc4:	2300      	movs	r3, #0
 8009cc6:	f7f6 ff2d 	bl	8000b24 <__aeabi_dcmplt>
 8009cca:	3800      	subs	r0, #0
 8009ccc:	bf18      	it	ne
 8009cce:	2001      	movne	r0, #1
 8009cd0:	f1b8 0f00 	cmp.w	r8, #0
 8009cd4:	dcd3      	bgt.n	8009c7e <__ieee754_pow+0x216>
 8009cd6:	e7db      	b.n	8009c90 <__ieee754_pow+0x228>
 8009cd8:	fff00000 	.word	0xfff00000
 8009cdc:	7ff00000 	.word	0x7ff00000
 8009ce0:	433fffff 	.word	0x433fffff
 8009ce4:	3ff00000 	.word	0x3ff00000
 8009ce8:	3fefffff 	.word	0x3fefffff
 8009cec:	3fe00000 	.word	0x3fe00000
 8009cf0:	bff00000 	.word	0xbff00000
 8009cf4:	43f00000 	.word	0x43f00000
 8009cf8:	4b5b      	ldr	r3, [pc, #364]	@ (8009e68 <__ieee754_pow+0x400>)
 8009cfa:	f7f6 fae9 	bl	80002d0 <__aeabi_dsub>
 8009cfe:	a352      	add	r3, pc, #328	@ (adr r3, 8009e48 <__ieee754_pow+0x3e0>)
 8009d00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d04:	4604      	mov	r4, r0
 8009d06:	460d      	mov	r5, r1
 8009d08:	f7f6 fc9a 	bl	8000640 <__aeabi_dmul>
 8009d0c:	a350      	add	r3, pc, #320	@ (adr r3, 8009e50 <__ieee754_pow+0x3e8>)
 8009d0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d12:	4606      	mov	r6, r0
 8009d14:	460f      	mov	r7, r1
 8009d16:	4620      	mov	r0, r4
 8009d18:	4629      	mov	r1, r5
 8009d1a:	f7f6 fc91 	bl	8000640 <__aeabi_dmul>
 8009d1e:	2200      	movs	r2, #0
 8009d20:	4682      	mov	sl, r0
 8009d22:	468b      	mov	fp, r1
 8009d24:	4620      	mov	r0, r4
 8009d26:	4629      	mov	r1, r5
 8009d28:	4b50      	ldr	r3, [pc, #320]	@ (8009e6c <__ieee754_pow+0x404>)
 8009d2a:	f7f6 fc89 	bl	8000640 <__aeabi_dmul>
 8009d2e:	4602      	mov	r2, r0
 8009d30:	460b      	mov	r3, r1
 8009d32:	a149      	add	r1, pc, #292	@ (adr r1, 8009e58 <__ieee754_pow+0x3f0>)
 8009d34:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009d38:	f7f6 faca 	bl	80002d0 <__aeabi_dsub>
 8009d3c:	4622      	mov	r2, r4
 8009d3e:	462b      	mov	r3, r5
 8009d40:	f7f6 fc7e 	bl	8000640 <__aeabi_dmul>
 8009d44:	4602      	mov	r2, r0
 8009d46:	460b      	mov	r3, r1
 8009d48:	2000      	movs	r0, #0
 8009d4a:	4949      	ldr	r1, [pc, #292]	@ (8009e70 <__ieee754_pow+0x408>)
 8009d4c:	f7f6 fac0 	bl	80002d0 <__aeabi_dsub>
 8009d50:	4622      	mov	r2, r4
 8009d52:	4680      	mov	r8, r0
 8009d54:	4689      	mov	r9, r1
 8009d56:	462b      	mov	r3, r5
 8009d58:	4620      	mov	r0, r4
 8009d5a:	4629      	mov	r1, r5
 8009d5c:	f7f6 fc70 	bl	8000640 <__aeabi_dmul>
 8009d60:	4602      	mov	r2, r0
 8009d62:	460b      	mov	r3, r1
 8009d64:	4640      	mov	r0, r8
 8009d66:	4649      	mov	r1, r9
 8009d68:	f7f6 fc6a 	bl	8000640 <__aeabi_dmul>
 8009d6c:	a33c      	add	r3, pc, #240	@ (adr r3, 8009e60 <__ieee754_pow+0x3f8>)
 8009d6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d72:	f7f6 fc65 	bl	8000640 <__aeabi_dmul>
 8009d76:	4602      	mov	r2, r0
 8009d78:	460b      	mov	r3, r1
 8009d7a:	4650      	mov	r0, sl
 8009d7c:	4659      	mov	r1, fp
 8009d7e:	f7f6 faa7 	bl	80002d0 <__aeabi_dsub>
 8009d82:	2400      	movs	r4, #0
 8009d84:	4602      	mov	r2, r0
 8009d86:	460b      	mov	r3, r1
 8009d88:	4680      	mov	r8, r0
 8009d8a:	4689      	mov	r9, r1
 8009d8c:	4630      	mov	r0, r6
 8009d8e:	4639      	mov	r1, r7
 8009d90:	f7f6 faa0 	bl	80002d4 <__adddf3>
 8009d94:	4632      	mov	r2, r6
 8009d96:	463b      	mov	r3, r7
 8009d98:	4620      	mov	r0, r4
 8009d9a:	460d      	mov	r5, r1
 8009d9c:	f7f6 fa98 	bl	80002d0 <__aeabi_dsub>
 8009da0:	4602      	mov	r2, r0
 8009da2:	460b      	mov	r3, r1
 8009da4:	4640      	mov	r0, r8
 8009da6:	4649      	mov	r1, r9
 8009da8:	f7f6 fa92 	bl	80002d0 <__aeabi_dsub>
 8009dac:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009db0:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8009db4:	2300      	movs	r3, #0
 8009db6:	9304      	str	r3, [sp, #16]
 8009db8:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 8009dbc:	4606      	mov	r6, r0
 8009dbe:	460f      	mov	r7, r1
 8009dc0:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009dc4:	4652      	mov	r2, sl
 8009dc6:	465b      	mov	r3, fp
 8009dc8:	f7f6 fa82 	bl	80002d0 <__aeabi_dsub>
 8009dcc:	4622      	mov	r2, r4
 8009dce:	462b      	mov	r3, r5
 8009dd0:	f7f6 fc36 	bl	8000640 <__aeabi_dmul>
 8009dd4:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009dd8:	4680      	mov	r8, r0
 8009dda:	4689      	mov	r9, r1
 8009ddc:	4630      	mov	r0, r6
 8009dde:	4639      	mov	r1, r7
 8009de0:	f7f6 fc2e 	bl	8000640 <__aeabi_dmul>
 8009de4:	4602      	mov	r2, r0
 8009de6:	460b      	mov	r3, r1
 8009de8:	4640      	mov	r0, r8
 8009dea:	4649      	mov	r1, r9
 8009dec:	f7f6 fa72 	bl	80002d4 <__adddf3>
 8009df0:	4652      	mov	r2, sl
 8009df2:	465b      	mov	r3, fp
 8009df4:	4606      	mov	r6, r0
 8009df6:	460f      	mov	r7, r1
 8009df8:	4620      	mov	r0, r4
 8009dfa:	4629      	mov	r1, r5
 8009dfc:	f7f6 fc20 	bl	8000640 <__aeabi_dmul>
 8009e00:	460b      	mov	r3, r1
 8009e02:	4602      	mov	r2, r0
 8009e04:	4680      	mov	r8, r0
 8009e06:	4689      	mov	r9, r1
 8009e08:	4630      	mov	r0, r6
 8009e0a:	4639      	mov	r1, r7
 8009e0c:	f7f6 fa62 	bl	80002d4 <__adddf3>
 8009e10:	4b18      	ldr	r3, [pc, #96]	@ (8009e74 <__ieee754_pow+0x40c>)
 8009e12:	4604      	mov	r4, r0
 8009e14:	4299      	cmp	r1, r3
 8009e16:	460d      	mov	r5, r1
 8009e18:	468a      	mov	sl, r1
 8009e1a:	468b      	mov	fp, r1
 8009e1c:	f340 82e0 	ble.w	800a3e0 <__ieee754_pow+0x978>
 8009e20:	f101 433f 	add.w	r3, r1, #3204448256	@ 0xbf000000
 8009e24:	f503 03e0 	add.w	r3, r3, #7340032	@ 0x700000
 8009e28:	4303      	orrs	r3, r0
 8009e2a:	f000 81df 	beq.w	800a1ec <__ieee754_pow+0x784>
 8009e2e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009e32:	2200      	movs	r2, #0
 8009e34:	2300      	movs	r3, #0
 8009e36:	f7f6 fe75 	bl	8000b24 <__aeabi_dcmplt>
 8009e3a:	3800      	subs	r0, #0
 8009e3c:	bf18      	it	ne
 8009e3e:	2001      	movne	r0, #1
 8009e40:	e71d      	b.n	8009c7e <__ieee754_pow+0x216>
 8009e42:	bf00      	nop
 8009e44:	f3af 8000 	nop.w
 8009e48:	60000000 	.word	0x60000000
 8009e4c:	3ff71547 	.word	0x3ff71547
 8009e50:	f85ddf44 	.word	0xf85ddf44
 8009e54:	3e54ae0b 	.word	0x3e54ae0b
 8009e58:	55555555 	.word	0x55555555
 8009e5c:	3fd55555 	.word	0x3fd55555
 8009e60:	652b82fe 	.word	0x652b82fe
 8009e64:	3ff71547 	.word	0x3ff71547
 8009e68:	3ff00000 	.word	0x3ff00000
 8009e6c:	3fd00000 	.word	0x3fd00000
 8009e70:	3fe00000 	.word	0x3fe00000
 8009e74:	408fffff 	.word	0x408fffff
 8009e78:	4ad3      	ldr	r2, [pc, #844]	@ (800a1c8 <__ieee754_pow+0x760>)
 8009e7a:	402a      	ands	r2, r5
 8009e7c:	2a00      	cmp	r2, #0
 8009e7e:	f040 817a 	bne.w	800a176 <__ieee754_pow+0x70e>
 8009e82:	4bd2      	ldr	r3, [pc, #840]	@ (800a1cc <__ieee754_pow+0x764>)
 8009e84:	2200      	movs	r2, #0
 8009e86:	f7f6 fbdb 	bl	8000640 <__aeabi_dmul>
 8009e8a:	f06f 0434 	mvn.w	r4, #52	@ 0x34
 8009e8e:	460b      	mov	r3, r1
 8009e90:	151a      	asrs	r2, r3, #20
 8009e92:	f2a2 32ff 	subw	r2, r2, #1023	@ 0x3ff
 8009e96:	4422      	add	r2, r4
 8009e98:	920a      	str	r2, [sp, #40]	@ 0x28
 8009e9a:	4acd      	ldr	r2, [pc, #820]	@ (800a1d0 <__ieee754_pow+0x768>)
 8009e9c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009ea0:	f043 557f 	orr.w	r5, r3, #1069547520	@ 0x3fc00000
 8009ea4:	4293      	cmp	r3, r2
 8009ea6:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 8009eaa:	dd08      	ble.n	8009ebe <__ieee754_pow+0x456>
 8009eac:	4ac9      	ldr	r2, [pc, #804]	@ (800a1d4 <__ieee754_pow+0x76c>)
 8009eae:	4293      	cmp	r3, r2
 8009eb0:	f340 8163 	ble.w	800a17a <__ieee754_pow+0x712>
 8009eb4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009eb6:	f5a5 1580 	sub.w	r5, r5, #1048576	@ 0x100000
 8009eba:	3301      	adds	r3, #1
 8009ebc:	930a      	str	r3, [sp, #40]	@ 0x28
 8009ebe:	2600      	movs	r6, #0
 8009ec0:	00f3      	lsls	r3, r6, #3
 8009ec2:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009ec4:	4bc4      	ldr	r3, [pc, #784]	@ (800a1d8 <__ieee754_pow+0x770>)
 8009ec6:	4629      	mov	r1, r5
 8009ec8:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8009ecc:	e9d3 3400 	ldrd	r3, r4, [r3]
 8009ed0:	461a      	mov	r2, r3
 8009ed2:	e9cd 3408 	strd	r3, r4, [sp, #32]
 8009ed6:	4623      	mov	r3, r4
 8009ed8:	4682      	mov	sl, r0
 8009eda:	f7f6 f9f9 	bl	80002d0 <__aeabi_dsub>
 8009ede:	4652      	mov	r2, sl
 8009ee0:	462b      	mov	r3, r5
 8009ee2:	e9cd 010c 	strd	r0, r1, [sp, #48]	@ 0x30
 8009ee6:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8009eea:	f7f6 f9f3 	bl	80002d4 <__adddf3>
 8009eee:	4602      	mov	r2, r0
 8009ef0:	460b      	mov	r3, r1
 8009ef2:	2000      	movs	r0, #0
 8009ef4:	49b9      	ldr	r1, [pc, #740]	@ (800a1dc <__ieee754_pow+0x774>)
 8009ef6:	f7f6 fccd 	bl	8000894 <__aeabi_ddiv>
 8009efa:	4602      	mov	r2, r0
 8009efc:	460b      	mov	r3, r1
 8009efe:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8009f02:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009f06:	f7f6 fb9b 	bl	8000640 <__aeabi_dmul>
 8009f0a:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8009f0e:	e9dd 3406 	ldrd	r3, r4, [sp, #24]
 8009f12:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8009f16:	2300      	movs	r3, #0
 8009f18:	2200      	movs	r2, #0
 8009f1a:	46ab      	mov	fp, r5
 8009f1c:	106d      	asrs	r5, r5, #1
 8009f1e:	f045 5500 	orr.w	r5, r5, #536870912	@ 0x20000000
 8009f22:	9304      	str	r3, [sp, #16]
 8009f24:	f505 2500 	add.w	r5, r5, #524288	@ 0x80000
 8009f28:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8009f2c:	eb05 4386 	add.w	r3, r5, r6, lsl #18
 8009f30:	4640      	mov	r0, r8
 8009f32:	4649      	mov	r1, r9
 8009f34:	4614      	mov	r4, r2
 8009f36:	461d      	mov	r5, r3
 8009f38:	f7f6 fb82 	bl	8000640 <__aeabi_dmul>
 8009f3c:	4602      	mov	r2, r0
 8009f3e:	460b      	mov	r3, r1
 8009f40:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009f44:	f7f6 f9c4 	bl	80002d0 <__aeabi_dsub>
 8009f48:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8009f4c:	4606      	mov	r6, r0
 8009f4e:	460f      	mov	r7, r1
 8009f50:	4620      	mov	r0, r4
 8009f52:	4629      	mov	r1, r5
 8009f54:	f7f6 f9bc 	bl	80002d0 <__aeabi_dsub>
 8009f58:	4602      	mov	r2, r0
 8009f5a:	460b      	mov	r3, r1
 8009f5c:	4650      	mov	r0, sl
 8009f5e:	4659      	mov	r1, fp
 8009f60:	f7f6 f9b6 	bl	80002d0 <__aeabi_dsub>
 8009f64:	4642      	mov	r2, r8
 8009f66:	464b      	mov	r3, r9
 8009f68:	f7f6 fb6a 	bl	8000640 <__aeabi_dmul>
 8009f6c:	4602      	mov	r2, r0
 8009f6e:	460b      	mov	r3, r1
 8009f70:	4630      	mov	r0, r6
 8009f72:	4639      	mov	r1, r7
 8009f74:	f7f6 f9ac 	bl	80002d0 <__aeabi_dsub>
 8009f78:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8009f7c:	f7f6 fb60 	bl	8000640 <__aeabi_dmul>
 8009f80:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8009f84:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8009f88:	4610      	mov	r0, r2
 8009f8a:	4619      	mov	r1, r3
 8009f8c:	f7f6 fb58 	bl	8000640 <__aeabi_dmul>
 8009f90:	a37b      	add	r3, pc, #492	@ (adr r3, 800a180 <__ieee754_pow+0x718>)
 8009f92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f96:	4604      	mov	r4, r0
 8009f98:	460d      	mov	r5, r1
 8009f9a:	f7f6 fb51 	bl	8000640 <__aeabi_dmul>
 8009f9e:	a37a      	add	r3, pc, #488	@ (adr r3, 800a188 <__ieee754_pow+0x720>)
 8009fa0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009fa4:	f7f6 f996 	bl	80002d4 <__adddf3>
 8009fa8:	4622      	mov	r2, r4
 8009faa:	462b      	mov	r3, r5
 8009fac:	f7f6 fb48 	bl	8000640 <__aeabi_dmul>
 8009fb0:	a377      	add	r3, pc, #476	@ (adr r3, 800a190 <__ieee754_pow+0x728>)
 8009fb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009fb6:	f7f6 f98d 	bl	80002d4 <__adddf3>
 8009fba:	4622      	mov	r2, r4
 8009fbc:	462b      	mov	r3, r5
 8009fbe:	f7f6 fb3f 	bl	8000640 <__aeabi_dmul>
 8009fc2:	a375      	add	r3, pc, #468	@ (adr r3, 800a198 <__ieee754_pow+0x730>)
 8009fc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009fc8:	f7f6 f984 	bl	80002d4 <__adddf3>
 8009fcc:	4622      	mov	r2, r4
 8009fce:	462b      	mov	r3, r5
 8009fd0:	f7f6 fb36 	bl	8000640 <__aeabi_dmul>
 8009fd4:	a372      	add	r3, pc, #456	@ (adr r3, 800a1a0 <__ieee754_pow+0x738>)
 8009fd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009fda:	f7f6 f97b 	bl	80002d4 <__adddf3>
 8009fde:	4622      	mov	r2, r4
 8009fe0:	462b      	mov	r3, r5
 8009fe2:	f7f6 fb2d 	bl	8000640 <__aeabi_dmul>
 8009fe6:	a370      	add	r3, pc, #448	@ (adr r3, 800a1a8 <__ieee754_pow+0x740>)
 8009fe8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009fec:	f7f6 f972 	bl	80002d4 <__adddf3>
 8009ff0:	4622      	mov	r2, r4
 8009ff2:	4606      	mov	r6, r0
 8009ff4:	460f      	mov	r7, r1
 8009ff6:	462b      	mov	r3, r5
 8009ff8:	4620      	mov	r0, r4
 8009ffa:	4629      	mov	r1, r5
 8009ffc:	f7f6 fb20 	bl	8000640 <__aeabi_dmul>
 800a000:	4602      	mov	r2, r0
 800a002:	460b      	mov	r3, r1
 800a004:	4630      	mov	r0, r6
 800a006:	4639      	mov	r1, r7
 800a008:	f7f6 fb1a 	bl	8000640 <__aeabi_dmul>
 800a00c:	4604      	mov	r4, r0
 800a00e:	460d      	mov	r5, r1
 800a010:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a014:	4642      	mov	r2, r8
 800a016:	464b      	mov	r3, r9
 800a018:	f7f6 f95c 	bl	80002d4 <__adddf3>
 800a01c:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800a020:	f7f6 fb0e 	bl	8000640 <__aeabi_dmul>
 800a024:	4622      	mov	r2, r4
 800a026:	462b      	mov	r3, r5
 800a028:	f7f6 f954 	bl	80002d4 <__adddf3>
 800a02c:	4642      	mov	r2, r8
 800a02e:	4682      	mov	sl, r0
 800a030:	468b      	mov	fp, r1
 800a032:	464b      	mov	r3, r9
 800a034:	4640      	mov	r0, r8
 800a036:	4649      	mov	r1, r9
 800a038:	f7f6 fb02 	bl	8000640 <__aeabi_dmul>
 800a03c:	2200      	movs	r2, #0
 800a03e:	4b68      	ldr	r3, [pc, #416]	@ (800a1e0 <__ieee754_pow+0x778>)
 800a040:	4606      	mov	r6, r0
 800a042:	460f      	mov	r7, r1
 800a044:	f7f6 f946 	bl	80002d4 <__adddf3>
 800a048:	4652      	mov	r2, sl
 800a04a:	465b      	mov	r3, fp
 800a04c:	f7f6 f942 	bl	80002d4 <__adddf3>
 800a050:	2400      	movs	r4, #0
 800a052:	460d      	mov	r5, r1
 800a054:	4622      	mov	r2, r4
 800a056:	460b      	mov	r3, r1
 800a058:	4640      	mov	r0, r8
 800a05a:	4649      	mov	r1, r9
 800a05c:	f7f6 faf0 	bl	8000640 <__aeabi_dmul>
 800a060:	2200      	movs	r2, #0
 800a062:	4680      	mov	r8, r0
 800a064:	4689      	mov	r9, r1
 800a066:	4620      	mov	r0, r4
 800a068:	4629      	mov	r1, r5
 800a06a:	4b5d      	ldr	r3, [pc, #372]	@ (800a1e0 <__ieee754_pow+0x778>)
 800a06c:	f7f6 f930 	bl	80002d0 <__aeabi_dsub>
 800a070:	4632      	mov	r2, r6
 800a072:	463b      	mov	r3, r7
 800a074:	f7f6 f92c 	bl	80002d0 <__aeabi_dsub>
 800a078:	4602      	mov	r2, r0
 800a07a:	460b      	mov	r3, r1
 800a07c:	4650      	mov	r0, sl
 800a07e:	4659      	mov	r1, fp
 800a080:	f7f6 f926 	bl	80002d0 <__aeabi_dsub>
 800a084:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800a088:	f7f6 fada 	bl	8000640 <__aeabi_dmul>
 800a08c:	4622      	mov	r2, r4
 800a08e:	4606      	mov	r6, r0
 800a090:	460f      	mov	r7, r1
 800a092:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800a096:	462b      	mov	r3, r5
 800a098:	f7f6 fad2 	bl	8000640 <__aeabi_dmul>
 800a09c:	4602      	mov	r2, r0
 800a09e:	460b      	mov	r3, r1
 800a0a0:	4630      	mov	r0, r6
 800a0a2:	4639      	mov	r1, r7
 800a0a4:	f7f6 f916 	bl	80002d4 <__adddf3>
 800a0a8:	2400      	movs	r4, #0
 800a0aa:	4606      	mov	r6, r0
 800a0ac:	460f      	mov	r7, r1
 800a0ae:	4602      	mov	r2, r0
 800a0b0:	460b      	mov	r3, r1
 800a0b2:	4640      	mov	r0, r8
 800a0b4:	4649      	mov	r1, r9
 800a0b6:	f7f6 f90d 	bl	80002d4 <__adddf3>
 800a0ba:	a33d      	add	r3, pc, #244	@ (adr r3, 800a1b0 <__ieee754_pow+0x748>)
 800a0bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a0c0:	4620      	mov	r0, r4
 800a0c2:	460d      	mov	r5, r1
 800a0c4:	f7f6 fabc 	bl	8000640 <__aeabi_dmul>
 800a0c8:	4642      	mov	r2, r8
 800a0ca:	464b      	mov	r3, r9
 800a0cc:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800a0d0:	4620      	mov	r0, r4
 800a0d2:	4629      	mov	r1, r5
 800a0d4:	f7f6 f8fc 	bl	80002d0 <__aeabi_dsub>
 800a0d8:	4602      	mov	r2, r0
 800a0da:	460b      	mov	r3, r1
 800a0dc:	4630      	mov	r0, r6
 800a0de:	4639      	mov	r1, r7
 800a0e0:	f7f6 f8f6 	bl	80002d0 <__aeabi_dsub>
 800a0e4:	a334      	add	r3, pc, #208	@ (adr r3, 800a1b8 <__ieee754_pow+0x750>)
 800a0e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a0ea:	f7f6 faa9 	bl	8000640 <__aeabi_dmul>
 800a0ee:	a334      	add	r3, pc, #208	@ (adr r3, 800a1c0 <__ieee754_pow+0x758>)
 800a0f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a0f4:	4606      	mov	r6, r0
 800a0f6:	460f      	mov	r7, r1
 800a0f8:	4620      	mov	r0, r4
 800a0fa:	4629      	mov	r1, r5
 800a0fc:	f7f6 faa0 	bl	8000640 <__aeabi_dmul>
 800a100:	4602      	mov	r2, r0
 800a102:	460b      	mov	r3, r1
 800a104:	4630      	mov	r0, r6
 800a106:	4639      	mov	r1, r7
 800a108:	f7f6 f8e4 	bl	80002d4 <__adddf3>
 800a10c:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800a10e:	4b35      	ldr	r3, [pc, #212]	@ (800a1e4 <__ieee754_pow+0x77c>)
 800a110:	2400      	movs	r4, #0
 800a112:	4413      	add	r3, r2
 800a114:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a118:	f7f6 f8dc 	bl	80002d4 <__adddf3>
 800a11c:	4682      	mov	sl, r0
 800a11e:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800a120:	468b      	mov	fp, r1
 800a122:	f7f6 fa23 	bl	800056c <__aeabi_i2d>
 800a126:	4606      	mov	r6, r0
 800a128:	460f      	mov	r7, r1
 800a12a:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800a12c:	4b2e      	ldr	r3, [pc, #184]	@ (800a1e8 <__ieee754_pow+0x780>)
 800a12e:	4413      	add	r3, r2
 800a130:	e9d3 8900 	ldrd	r8, r9, [r3]
 800a134:	4652      	mov	r2, sl
 800a136:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a13a:	465b      	mov	r3, fp
 800a13c:	f7f6 f8ca 	bl	80002d4 <__adddf3>
 800a140:	4642      	mov	r2, r8
 800a142:	464b      	mov	r3, r9
 800a144:	f7f6 f8c6 	bl	80002d4 <__adddf3>
 800a148:	4632      	mov	r2, r6
 800a14a:	463b      	mov	r3, r7
 800a14c:	f7f6 f8c2 	bl	80002d4 <__adddf3>
 800a150:	4632      	mov	r2, r6
 800a152:	463b      	mov	r3, r7
 800a154:	4620      	mov	r0, r4
 800a156:	460d      	mov	r5, r1
 800a158:	f7f6 f8ba 	bl	80002d0 <__aeabi_dsub>
 800a15c:	4642      	mov	r2, r8
 800a15e:	464b      	mov	r3, r9
 800a160:	f7f6 f8b6 	bl	80002d0 <__aeabi_dsub>
 800a164:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800a168:	f7f6 f8b2 	bl	80002d0 <__aeabi_dsub>
 800a16c:	4602      	mov	r2, r0
 800a16e:	460b      	mov	r3, r1
 800a170:	4650      	mov	r0, sl
 800a172:	4659      	mov	r1, fp
 800a174:	e618      	b.n	8009da8 <__ieee754_pow+0x340>
 800a176:	2400      	movs	r4, #0
 800a178:	e68a      	b.n	8009e90 <__ieee754_pow+0x428>
 800a17a:	2601      	movs	r6, #1
 800a17c:	e6a0      	b.n	8009ec0 <__ieee754_pow+0x458>
 800a17e:	bf00      	nop
 800a180:	4a454eef 	.word	0x4a454eef
 800a184:	3fca7e28 	.word	0x3fca7e28
 800a188:	93c9db65 	.word	0x93c9db65
 800a18c:	3fcd864a 	.word	0x3fcd864a
 800a190:	a91d4101 	.word	0xa91d4101
 800a194:	3fd17460 	.word	0x3fd17460
 800a198:	518f264d 	.word	0x518f264d
 800a19c:	3fd55555 	.word	0x3fd55555
 800a1a0:	db6fabff 	.word	0xdb6fabff
 800a1a4:	3fdb6db6 	.word	0x3fdb6db6
 800a1a8:	33333303 	.word	0x33333303
 800a1ac:	3fe33333 	.word	0x3fe33333
 800a1b0:	e0000000 	.word	0xe0000000
 800a1b4:	3feec709 	.word	0x3feec709
 800a1b8:	dc3a03fd 	.word	0xdc3a03fd
 800a1bc:	3feec709 	.word	0x3feec709
 800a1c0:	145b01f5 	.word	0x145b01f5
 800a1c4:	be3e2fe0 	.word	0xbe3e2fe0
 800a1c8:	7ff00000 	.word	0x7ff00000
 800a1cc:	43400000 	.word	0x43400000
 800a1d0:	0003988e 	.word	0x0003988e
 800a1d4:	000bb679 	.word	0x000bb679
 800a1d8:	0800ec08 	.word	0x0800ec08
 800a1dc:	3ff00000 	.word	0x3ff00000
 800a1e0:	40080000 	.word	0x40080000
 800a1e4:	0800ebe8 	.word	0x0800ebe8
 800a1e8:	0800ebf8 	.word	0x0800ebf8
 800a1ec:	a39a      	add	r3, pc, #616	@ (adr r3, 800a458 <__ieee754_pow+0x9f0>)
 800a1ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a1f2:	4630      	mov	r0, r6
 800a1f4:	4639      	mov	r1, r7
 800a1f6:	f7f6 f86d 	bl	80002d4 <__adddf3>
 800a1fa:	4642      	mov	r2, r8
 800a1fc:	e9cd 0100 	strd	r0, r1, [sp]
 800a200:	464b      	mov	r3, r9
 800a202:	4620      	mov	r0, r4
 800a204:	4629      	mov	r1, r5
 800a206:	f7f6 f863 	bl	80002d0 <__aeabi_dsub>
 800a20a:	4602      	mov	r2, r0
 800a20c:	460b      	mov	r3, r1
 800a20e:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a212:	f7f6 fca5 	bl	8000b60 <__aeabi_dcmpgt>
 800a216:	2800      	cmp	r0, #0
 800a218:	f47f ae09 	bne.w	8009e2e <__ieee754_pow+0x3c6>
 800a21c:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 800a220:	ea4f 5a2a 	mov.w	sl, sl, asr #20
 800a224:	f2aa 3afe 	subw	sl, sl, #1022	@ 0x3fe
 800a228:	fa43 fa0a 	asr.w	sl, r3, sl
 800a22c:	44da      	add	sl, fp
 800a22e:	f3ca 510a 	ubfx	r1, sl, #20, #11
 800a232:	489b      	ldr	r0, [pc, #620]	@ (800a4a0 <__ieee754_pow+0xa38>)
 800a234:	f2a1 31ff 	subw	r1, r1, #1023	@ 0x3ff
 800a238:	4108      	asrs	r0, r1
 800a23a:	ea00 030a 	and.w	r3, r0, sl
 800a23e:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 800a242:	f1c1 0114 	rsb	r1, r1, #20
 800a246:	f44a 1a80 	orr.w	sl, sl, #1048576	@ 0x100000
 800a24a:	4640      	mov	r0, r8
 800a24c:	fa4a fa01 	asr.w	sl, sl, r1
 800a250:	f1bb 0f00 	cmp.w	fp, #0
 800a254:	4649      	mov	r1, r9
 800a256:	f04f 0200 	mov.w	r2, #0
 800a25a:	bfb8      	it	lt
 800a25c:	f1ca 0a00 	rsblt	sl, sl, #0
 800a260:	f7f6 f836 	bl	80002d0 <__aeabi_dsub>
 800a264:	4680      	mov	r8, r0
 800a266:	4689      	mov	r9, r1
 800a268:	2400      	movs	r4, #0
 800a26a:	4632      	mov	r2, r6
 800a26c:	463b      	mov	r3, r7
 800a26e:	4640      	mov	r0, r8
 800a270:	4649      	mov	r1, r9
 800a272:	f7f6 f82f 	bl	80002d4 <__adddf3>
 800a276:	a37a      	add	r3, pc, #488	@ (adr r3, 800a460 <__ieee754_pow+0x9f8>)
 800a278:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a27c:	4620      	mov	r0, r4
 800a27e:	460d      	mov	r5, r1
 800a280:	f7f6 f9de 	bl	8000640 <__aeabi_dmul>
 800a284:	4642      	mov	r2, r8
 800a286:	464b      	mov	r3, r9
 800a288:	e9cd 0100 	strd	r0, r1, [sp]
 800a28c:	4620      	mov	r0, r4
 800a28e:	4629      	mov	r1, r5
 800a290:	f7f6 f81e 	bl	80002d0 <__aeabi_dsub>
 800a294:	4602      	mov	r2, r0
 800a296:	460b      	mov	r3, r1
 800a298:	4630      	mov	r0, r6
 800a29a:	4639      	mov	r1, r7
 800a29c:	f7f6 f818 	bl	80002d0 <__aeabi_dsub>
 800a2a0:	a371      	add	r3, pc, #452	@ (adr r3, 800a468 <__ieee754_pow+0xa00>)
 800a2a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a2a6:	f7f6 f9cb 	bl	8000640 <__aeabi_dmul>
 800a2aa:	a371      	add	r3, pc, #452	@ (adr r3, 800a470 <__ieee754_pow+0xa08>)
 800a2ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a2b0:	4680      	mov	r8, r0
 800a2b2:	4689      	mov	r9, r1
 800a2b4:	4620      	mov	r0, r4
 800a2b6:	4629      	mov	r1, r5
 800a2b8:	f7f6 f9c2 	bl	8000640 <__aeabi_dmul>
 800a2bc:	4602      	mov	r2, r0
 800a2be:	460b      	mov	r3, r1
 800a2c0:	4640      	mov	r0, r8
 800a2c2:	4649      	mov	r1, r9
 800a2c4:	f7f6 f806 	bl	80002d4 <__adddf3>
 800a2c8:	4604      	mov	r4, r0
 800a2ca:	460d      	mov	r5, r1
 800a2cc:	4602      	mov	r2, r0
 800a2ce:	460b      	mov	r3, r1
 800a2d0:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a2d4:	f7f5 fffe 	bl	80002d4 <__adddf3>
 800a2d8:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a2dc:	4680      	mov	r8, r0
 800a2de:	4689      	mov	r9, r1
 800a2e0:	f7f5 fff6 	bl	80002d0 <__aeabi_dsub>
 800a2e4:	4602      	mov	r2, r0
 800a2e6:	460b      	mov	r3, r1
 800a2e8:	4620      	mov	r0, r4
 800a2ea:	4629      	mov	r1, r5
 800a2ec:	f7f5 fff0 	bl	80002d0 <__aeabi_dsub>
 800a2f0:	4642      	mov	r2, r8
 800a2f2:	4606      	mov	r6, r0
 800a2f4:	460f      	mov	r7, r1
 800a2f6:	464b      	mov	r3, r9
 800a2f8:	4640      	mov	r0, r8
 800a2fa:	4649      	mov	r1, r9
 800a2fc:	f7f6 f9a0 	bl	8000640 <__aeabi_dmul>
 800a300:	a35d      	add	r3, pc, #372	@ (adr r3, 800a478 <__ieee754_pow+0xa10>)
 800a302:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a306:	4604      	mov	r4, r0
 800a308:	460d      	mov	r5, r1
 800a30a:	f7f6 f999 	bl	8000640 <__aeabi_dmul>
 800a30e:	a35c      	add	r3, pc, #368	@ (adr r3, 800a480 <__ieee754_pow+0xa18>)
 800a310:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a314:	f7f5 ffdc 	bl	80002d0 <__aeabi_dsub>
 800a318:	4622      	mov	r2, r4
 800a31a:	462b      	mov	r3, r5
 800a31c:	f7f6 f990 	bl	8000640 <__aeabi_dmul>
 800a320:	a359      	add	r3, pc, #356	@ (adr r3, 800a488 <__ieee754_pow+0xa20>)
 800a322:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a326:	f7f5 ffd5 	bl	80002d4 <__adddf3>
 800a32a:	4622      	mov	r2, r4
 800a32c:	462b      	mov	r3, r5
 800a32e:	f7f6 f987 	bl	8000640 <__aeabi_dmul>
 800a332:	a357      	add	r3, pc, #348	@ (adr r3, 800a490 <__ieee754_pow+0xa28>)
 800a334:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a338:	f7f5 ffca 	bl	80002d0 <__aeabi_dsub>
 800a33c:	4622      	mov	r2, r4
 800a33e:	462b      	mov	r3, r5
 800a340:	f7f6 f97e 	bl	8000640 <__aeabi_dmul>
 800a344:	a354      	add	r3, pc, #336	@ (adr r3, 800a498 <__ieee754_pow+0xa30>)
 800a346:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a34a:	f7f5 ffc3 	bl	80002d4 <__adddf3>
 800a34e:	4622      	mov	r2, r4
 800a350:	462b      	mov	r3, r5
 800a352:	f7f6 f975 	bl	8000640 <__aeabi_dmul>
 800a356:	4602      	mov	r2, r0
 800a358:	460b      	mov	r3, r1
 800a35a:	4640      	mov	r0, r8
 800a35c:	4649      	mov	r1, r9
 800a35e:	f7f5 ffb7 	bl	80002d0 <__aeabi_dsub>
 800a362:	4604      	mov	r4, r0
 800a364:	460d      	mov	r5, r1
 800a366:	4602      	mov	r2, r0
 800a368:	460b      	mov	r3, r1
 800a36a:	4640      	mov	r0, r8
 800a36c:	4649      	mov	r1, r9
 800a36e:	f7f6 f967 	bl	8000640 <__aeabi_dmul>
 800a372:	2200      	movs	r2, #0
 800a374:	e9cd 0100 	strd	r0, r1, [sp]
 800a378:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800a37c:	4620      	mov	r0, r4
 800a37e:	4629      	mov	r1, r5
 800a380:	f7f5 ffa6 	bl	80002d0 <__aeabi_dsub>
 800a384:	4602      	mov	r2, r0
 800a386:	460b      	mov	r3, r1
 800a388:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a38c:	f7f6 fa82 	bl	8000894 <__aeabi_ddiv>
 800a390:	4632      	mov	r2, r6
 800a392:	4604      	mov	r4, r0
 800a394:	460d      	mov	r5, r1
 800a396:	463b      	mov	r3, r7
 800a398:	4640      	mov	r0, r8
 800a39a:	4649      	mov	r1, r9
 800a39c:	f7f6 f950 	bl	8000640 <__aeabi_dmul>
 800a3a0:	4632      	mov	r2, r6
 800a3a2:	463b      	mov	r3, r7
 800a3a4:	f7f5 ff96 	bl	80002d4 <__adddf3>
 800a3a8:	4602      	mov	r2, r0
 800a3aa:	460b      	mov	r3, r1
 800a3ac:	4620      	mov	r0, r4
 800a3ae:	4629      	mov	r1, r5
 800a3b0:	f7f5 ff8e 	bl	80002d0 <__aeabi_dsub>
 800a3b4:	4642      	mov	r2, r8
 800a3b6:	464b      	mov	r3, r9
 800a3b8:	f7f5 ff8a 	bl	80002d0 <__aeabi_dsub>
 800a3bc:	4602      	mov	r2, r0
 800a3be:	460b      	mov	r3, r1
 800a3c0:	2000      	movs	r0, #0
 800a3c2:	4938      	ldr	r1, [pc, #224]	@ (800a4a4 <__ieee754_pow+0xa3c>)
 800a3c4:	f7f5 ff84 	bl	80002d0 <__aeabi_dsub>
 800a3c8:	eb01 540a 	add.w	r4, r1, sl, lsl #20
 800a3cc:	f5b4 1f80 	cmp.w	r4, #1048576	@ 0x100000
 800a3d0:	da2e      	bge.n	800a430 <__ieee754_pow+0x9c8>
 800a3d2:	4652      	mov	r2, sl
 800a3d4:	f000 f874 	bl	800a4c0 <scalbn>
 800a3d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a3dc:	f7ff bbed 	b.w	8009bba <__ieee754_pow+0x152>
 800a3e0:	4c31      	ldr	r4, [pc, #196]	@ (800a4a8 <__ieee754_pow+0xa40>)
 800a3e2:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800a3e6:	42a3      	cmp	r3, r4
 800a3e8:	d91a      	bls.n	800a420 <__ieee754_pow+0x9b8>
 800a3ea:	4b30      	ldr	r3, [pc, #192]	@ (800a4ac <__ieee754_pow+0xa44>)
 800a3ec:	440b      	add	r3, r1
 800a3ee:	4303      	orrs	r3, r0
 800a3f0:	d009      	beq.n	800a406 <__ieee754_pow+0x99e>
 800a3f2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a3f6:	2200      	movs	r2, #0
 800a3f8:	2300      	movs	r3, #0
 800a3fa:	f7f6 fb93 	bl	8000b24 <__aeabi_dcmplt>
 800a3fe:	3800      	subs	r0, #0
 800a400:	bf18      	it	ne
 800a402:	2001      	movne	r0, #1
 800a404:	e444      	b.n	8009c90 <__ieee754_pow+0x228>
 800a406:	4642      	mov	r2, r8
 800a408:	464b      	mov	r3, r9
 800a40a:	f7f5 ff61 	bl	80002d0 <__aeabi_dsub>
 800a40e:	4632      	mov	r2, r6
 800a410:	463b      	mov	r3, r7
 800a412:	f7f6 fb9b 	bl	8000b4c <__aeabi_dcmpge>
 800a416:	2800      	cmp	r0, #0
 800a418:	d1eb      	bne.n	800a3f2 <__ieee754_pow+0x98a>
 800a41a:	f8df a094 	ldr.w	sl, [pc, #148]	@ 800a4b0 <__ieee754_pow+0xa48>
 800a41e:	e6fd      	b.n	800a21c <__ieee754_pow+0x7b4>
 800a420:	469a      	mov	sl, r3
 800a422:	4b24      	ldr	r3, [pc, #144]	@ (800a4b4 <__ieee754_pow+0xa4c>)
 800a424:	459a      	cmp	sl, r3
 800a426:	f63f aef9 	bhi.w	800a21c <__ieee754_pow+0x7b4>
 800a42a:	f8dd a010 	ldr.w	sl, [sp, #16]
 800a42e:	e71b      	b.n	800a268 <__ieee754_pow+0x800>
 800a430:	4621      	mov	r1, r4
 800a432:	e7d1      	b.n	800a3d8 <__ieee754_pow+0x970>
 800a434:	2000      	movs	r0, #0
 800a436:	491b      	ldr	r1, [pc, #108]	@ (800a4a4 <__ieee754_pow+0xa3c>)
 800a438:	f7ff bb34 	b.w	8009aa4 <__ieee754_pow+0x3c>
 800a43c:	2000      	movs	r0, #0
 800a43e:	2100      	movs	r1, #0
 800a440:	f7ff bb30 	b.w	8009aa4 <__ieee754_pow+0x3c>
 800a444:	4650      	mov	r0, sl
 800a446:	4659      	mov	r1, fp
 800a448:	f7ff bb2c 	b.w	8009aa4 <__ieee754_pow+0x3c>
 800a44c:	460c      	mov	r4, r1
 800a44e:	f7ff bb79 	b.w	8009b44 <__ieee754_pow+0xdc>
 800a452:	2400      	movs	r4, #0
 800a454:	f7ff bb64 	b.w	8009b20 <__ieee754_pow+0xb8>
 800a458:	652b82fe 	.word	0x652b82fe
 800a45c:	3c971547 	.word	0x3c971547
 800a460:	00000000 	.word	0x00000000
 800a464:	3fe62e43 	.word	0x3fe62e43
 800a468:	fefa39ef 	.word	0xfefa39ef
 800a46c:	3fe62e42 	.word	0x3fe62e42
 800a470:	0ca86c39 	.word	0x0ca86c39
 800a474:	be205c61 	.word	0xbe205c61
 800a478:	72bea4d0 	.word	0x72bea4d0
 800a47c:	3e663769 	.word	0x3e663769
 800a480:	c5d26bf1 	.word	0xc5d26bf1
 800a484:	3ebbbd41 	.word	0x3ebbbd41
 800a488:	af25de2c 	.word	0xaf25de2c
 800a48c:	3f11566a 	.word	0x3f11566a
 800a490:	16bebd93 	.word	0x16bebd93
 800a494:	3f66c16c 	.word	0x3f66c16c
 800a498:	5555553e 	.word	0x5555553e
 800a49c:	3fc55555 	.word	0x3fc55555
 800a4a0:	fff00000 	.word	0xfff00000
 800a4a4:	3ff00000 	.word	0x3ff00000
 800a4a8:	4090cbff 	.word	0x4090cbff
 800a4ac:	3f6f3400 	.word	0x3f6f3400
 800a4b0:	4090cc00 	.word	0x4090cc00
 800a4b4:	3fe00000 	.word	0x3fe00000

0800a4b8 <fabs>:
 800a4b8:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800a4bc:	4619      	mov	r1, r3
 800a4be:	4770      	bx	lr

0800a4c0 <scalbn>:
 800a4c0:	e92d 48f0 	stmdb	sp!, {r4, r5, r6, r7, fp, lr}
 800a4c4:	4616      	mov	r6, r2
 800a4c6:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800a4ca:	4683      	mov	fp, r0
 800a4cc:	468c      	mov	ip, r1
 800a4ce:	460b      	mov	r3, r1
 800a4d0:	b982      	cbnz	r2, 800a4f4 <scalbn+0x34>
 800a4d2:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800a4d6:	4303      	orrs	r3, r0
 800a4d8:	d039      	beq.n	800a54e <scalbn+0x8e>
 800a4da:	4b2f      	ldr	r3, [pc, #188]	@ (800a598 <scalbn+0xd8>)
 800a4dc:	2200      	movs	r2, #0
 800a4de:	f7f6 f8af 	bl	8000640 <__aeabi_dmul>
 800a4e2:	4b2e      	ldr	r3, [pc, #184]	@ (800a59c <scalbn+0xdc>)
 800a4e4:	4683      	mov	fp, r0
 800a4e6:	429e      	cmp	r6, r3
 800a4e8:	468c      	mov	ip, r1
 800a4ea:	da0d      	bge.n	800a508 <scalbn+0x48>
 800a4ec:	a326      	add	r3, pc, #152	@ (adr r3, 800a588 <scalbn+0xc8>)
 800a4ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a4f2:	e01b      	b.n	800a52c <scalbn+0x6c>
 800a4f4:	f240 77ff 	movw	r7, #2047	@ 0x7ff
 800a4f8:	42ba      	cmp	r2, r7
 800a4fa:	d109      	bne.n	800a510 <scalbn+0x50>
 800a4fc:	4602      	mov	r2, r0
 800a4fe:	f7f5 fee9 	bl	80002d4 <__adddf3>
 800a502:	4683      	mov	fp, r0
 800a504:	468c      	mov	ip, r1
 800a506:	e022      	b.n	800a54e <scalbn+0x8e>
 800a508:	460b      	mov	r3, r1
 800a50a:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800a50e:	3a36      	subs	r2, #54	@ 0x36
 800a510:	f24c 3150 	movw	r1, #50000	@ 0xc350
 800a514:	428e      	cmp	r6, r1
 800a516:	dd0c      	ble.n	800a532 <scalbn+0x72>
 800a518:	a31d      	add	r3, pc, #116	@ (adr r3, 800a590 <scalbn+0xd0>)
 800a51a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a51e:	461c      	mov	r4, r3
 800a520:	ea4f 71dc 	mov.w	r1, ip, lsr #31
 800a524:	f361 74df 	bfi	r4, r1, #31, #1
 800a528:	4621      	mov	r1, r4
 800a52a:	481d      	ldr	r0, [pc, #116]	@ (800a5a0 <scalbn+0xe0>)
 800a52c:	f7f6 f888 	bl	8000640 <__aeabi_dmul>
 800a530:	e7e7      	b.n	800a502 <scalbn+0x42>
 800a532:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 800a536:	4432      	add	r2, r6
 800a538:	428a      	cmp	r2, r1
 800a53a:	dced      	bgt.n	800a518 <scalbn+0x58>
 800a53c:	2a00      	cmp	r2, #0
 800a53e:	dd0a      	ble.n	800a556 <scalbn+0x96>
 800a540:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800a544:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 800a548:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800a54c:	46ac      	mov	ip, r5
 800a54e:	4658      	mov	r0, fp
 800a550:	4661      	mov	r1, ip
 800a552:	e8bd 88f0 	ldmia.w	sp!, {r4, r5, r6, r7, fp, pc}
 800a556:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 800a55a:	da09      	bge.n	800a570 <scalbn+0xb0>
 800a55c:	f00c 4300 	and.w	r3, ip, #2147483648	@ 0x80000000
 800a560:	f043 71d2 	orr.w	r1, r3, #27525120	@ 0x1a40000
 800a564:	f441 31b7 	orr.w	r1, r1, #93696	@ 0x16e00
 800a568:	480e      	ldr	r0, [pc, #56]	@ (800a5a4 <scalbn+0xe4>)
 800a56a:	f041 011f 	orr.w	r1, r1, #31
 800a56e:	e7bd      	b.n	800a4ec <scalbn+0x2c>
 800a570:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800a574:	3236      	adds	r2, #54	@ 0x36
 800a576:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 800a57a:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800a57e:	4658      	mov	r0, fp
 800a580:	4629      	mov	r1, r5
 800a582:	2200      	movs	r2, #0
 800a584:	4b08      	ldr	r3, [pc, #32]	@ (800a5a8 <scalbn+0xe8>)
 800a586:	e7d1      	b.n	800a52c <scalbn+0x6c>
 800a588:	c2f8f359 	.word	0xc2f8f359
 800a58c:	01a56e1f 	.word	0x01a56e1f
 800a590:	8800759c 	.word	0x8800759c
 800a594:	7e37e43c 	.word	0x7e37e43c
 800a598:	43500000 	.word	0x43500000
 800a59c:	ffff3cb0 	.word	0xffff3cb0
 800a5a0:	8800759c 	.word	0x8800759c
 800a5a4:	c2f8f359 	.word	0xc2f8f359
 800a5a8:	3c900000 	.word	0x3c900000

0800a5ac <with_errno>:
 800a5ac:	b570      	push	{r4, r5, r6, lr}
 800a5ae:	4604      	mov	r4, r0
 800a5b0:	460d      	mov	r5, r1
 800a5b2:	4616      	mov	r6, r2
 800a5b4:	f001 fcea 	bl	800bf8c <__errno>
 800a5b8:	4629      	mov	r1, r5
 800a5ba:	6006      	str	r6, [r0, #0]
 800a5bc:	4620      	mov	r0, r4
 800a5be:	bd70      	pop	{r4, r5, r6, pc}

0800a5c0 <xflow>:
 800a5c0:	b513      	push	{r0, r1, r4, lr}
 800a5c2:	4604      	mov	r4, r0
 800a5c4:	4619      	mov	r1, r3
 800a5c6:	4610      	mov	r0, r2
 800a5c8:	b10c      	cbz	r4, 800a5ce <xflow+0xe>
 800a5ca:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 800a5ce:	e9cd 2300 	strd	r2, r3, [sp]
 800a5d2:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a5d6:	f7f6 f833 	bl	8000640 <__aeabi_dmul>
 800a5da:	2222      	movs	r2, #34	@ 0x22
 800a5dc:	b002      	add	sp, #8
 800a5de:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a5e2:	f7ff bfe3 	b.w	800a5ac <with_errno>

0800a5e6 <__math_uflow>:
 800a5e6:	2200      	movs	r2, #0
 800a5e8:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 800a5ec:	f7ff bfe8 	b.w	800a5c0 <xflow>

0800a5f0 <__math_oflow>:
 800a5f0:	2200      	movs	r2, #0
 800a5f2:	f04f 43e0 	mov.w	r3, #1879048192	@ 0x70000000
 800a5f6:	f7ff bfe3 	b.w	800a5c0 <xflow>
	...

0800a5fc <__ieee754_sqrt>:
 800a5fc:	4a67      	ldr	r2, [pc, #412]	@ (800a79c <__ieee754_sqrt+0x1a0>)
 800a5fe:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a602:	438a      	bics	r2, r1
 800a604:	4606      	mov	r6, r0
 800a606:	460f      	mov	r7, r1
 800a608:	460b      	mov	r3, r1
 800a60a:	4604      	mov	r4, r0
 800a60c:	d10e      	bne.n	800a62c <__ieee754_sqrt+0x30>
 800a60e:	4602      	mov	r2, r0
 800a610:	f7f6 f816 	bl	8000640 <__aeabi_dmul>
 800a614:	4602      	mov	r2, r0
 800a616:	460b      	mov	r3, r1
 800a618:	4630      	mov	r0, r6
 800a61a:	4639      	mov	r1, r7
 800a61c:	f7f5 fe5a 	bl	80002d4 <__adddf3>
 800a620:	4606      	mov	r6, r0
 800a622:	460f      	mov	r7, r1
 800a624:	4630      	mov	r0, r6
 800a626:	4639      	mov	r1, r7
 800a628:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a62c:	2900      	cmp	r1, #0
 800a62e:	dc0c      	bgt.n	800a64a <__ieee754_sqrt+0x4e>
 800a630:	f021 4200 	bic.w	r2, r1, #2147483648	@ 0x80000000
 800a634:	4302      	orrs	r2, r0
 800a636:	d0f5      	beq.n	800a624 <__ieee754_sqrt+0x28>
 800a638:	b189      	cbz	r1, 800a65e <__ieee754_sqrt+0x62>
 800a63a:	4602      	mov	r2, r0
 800a63c:	f7f5 fe48 	bl	80002d0 <__aeabi_dsub>
 800a640:	4602      	mov	r2, r0
 800a642:	460b      	mov	r3, r1
 800a644:	f7f6 f926 	bl	8000894 <__aeabi_ddiv>
 800a648:	e7ea      	b.n	800a620 <__ieee754_sqrt+0x24>
 800a64a:	150a      	asrs	r2, r1, #20
 800a64c:	d115      	bne.n	800a67a <__ieee754_sqrt+0x7e>
 800a64e:	2100      	movs	r1, #0
 800a650:	e009      	b.n	800a666 <__ieee754_sqrt+0x6a>
 800a652:	0ae3      	lsrs	r3, r4, #11
 800a654:	3a15      	subs	r2, #21
 800a656:	0564      	lsls	r4, r4, #21
 800a658:	2b00      	cmp	r3, #0
 800a65a:	d0fa      	beq.n	800a652 <__ieee754_sqrt+0x56>
 800a65c:	e7f7      	b.n	800a64e <__ieee754_sqrt+0x52>
 800a65e:	460a      	mov	r2, r1
 800a660:	e7fa      	b.n	800a658 <__ieee754_sqrt+0x5c>
 800a662:	005b      	lsls	r3, r3, #1
 800a664:	3101      	adds	r1, #1
 800a666:	02d8      	lsls	r0, r3, #11
 800a668:	d5fb      	bpl.n	800a662 <__ieee754_sqrt+0x66>
 800a66a:	1e48      	subs	r0, r1, #1
 800a66c:	1a12      	subs	r2, r2, r0
 800a66e:	f1c1 0020 	rsb	r0, r1, #32
 800a672:	fa24 f000 	lsr.w	r0, r4, r0
 800a676:	4303      	orrs	r3, r0
 800a678:	408c      	lsls	r4, r1
 800a67a:	2600      	movs	r6, #0
 800a67c:	f2a2 37ff 	subw	r7, r2, #1023	@ 0x3ff
 800a680:	2116      	movs	r1, #22
 800a682:	07d2      	lsls	r2, r2, #31
 800a684:	f44f 1000 	mov.w	r0, #2097152	@ 0x200000
 800a688:	4632      	mov	r2, r6
 800a68a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a68e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800a692:	bf5c      	itt	pl
 800a694:	005b      	lslpl	r3, r3, #1
 800a696:	eb03 73d4 	addpl.w	r3, r3, r4, lsr #31
 800a69a:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800a69e:	bf58      	it	pl
 800a6a0:	0064      	lslpl	r4, r4, #1
 800a6a2:	eb03 73d4 	add.w	r3, r3, r4, lsr #31
 800a6a6:	107f      	asrs	r7, r7, #1
 800a6a8:	0064      	lsls	r4, r4, #1
 800a6aa:	1815      	adds	r5, r2, r0
 800a6ac:	429d      	cmp	r5, r3
 800a6ae:	bfde      	ittt	le
 800a6b0:	182a      	addle	r2, r5, r0
 800a6b2:	1b5b      	suble	r3, r3, r5
 800a6b4:	1836      	addle	r6, r6, r0
 800a6b6:	0fe5      	lsrs	r5, r4, #31
 800a6b8:	3901      	subs	r1, #1
 800a6ba:	eb05 0343 	add.w	r3, r5, r3, lsl #1
 800a6be:	ea4f 0444 	mov.w	r4, r4, lsl #1
 800a6c2:	ea4f 0050 	mov.w	r0, r0, lsr #1
 800a6c6:	d1f0      	bne.n	800a6aa <__ieee754_sqrt+0xae>
 800a6c8:	460d      	mov	r5, r1
 800a6ca:	f04f 0a20 	mov.w	sl, #32
 800a6ce:	f04f 4000 	mov.w	r0, #2147483648	@ 0x80000000
 800a6d2:	429a      	cmp	r2, r3
 800a6d4:	eb01 0c00 	add.w	ip, r1, r0
 800a6d8:	db02      	blt.n	800a6e0 <__ieee754_sqrt+0xe4>
 800a6da:	d113      	bne.n	800a704 <__ieee754_sqrt+0x108>
 800a6dc:	45a4      	cmp	ip, r4
 800a6de:	d811      	bhi.n	800a704 <__ieee754_sqrt+0x108>
 800a6e0:	f1bc 0f00 	cmp.w	ip, #0
 800a6e4:	eb0c 0100 	add.w	r1, ip, r0
 800a6e8:	da42      	bge.n	800a770 <__ieee754_sqrt+0x174>
 800a6ea:	2900      	cmp	r1, #0
 800a6ec:	db40      	blt.n	800a770 <__ieee754_sqrt+0x174>
 800a6ee:	f102 0e01 	add.w	lr, r2, #1
 800a6f2:	1a9b      	subs	r3, r3, r2
 800a6f4:	4672      	mov	r2, lr
 800a6f6:	45a4      	cmp	ip, r4
 800a6f8:	bf88      	it	hi
 800a6fa:	f103 33ff 	addhi.w	r3, r3, #4294967295	@ 0xffffffff
 800a6fe:	eba4 040c 	sub.w	r4, r4, ip
 800a702:	4405      	add	r5, r0
 800a704:	ea4f 7cd4 	mov.w	ip, r4, lsr #31
 800a708:	f1ba 0a01 	subs.w	sl, sl, #1
 800a70c:	eb0c 0343 	add.w	r3, ip, r3, lsl #1
 800a710:	ea4f 0444 	mov.w	r4, r4, lsl #1
 800a714:	ea4f 0050 	mov.w	r0, r0, lsr #1
 800a718:	d1db      	bne.n	800a6d2 <__ieee754_sqrt+0xd6>
 800a71a:	431c      	orrs	r4, r3
 800a71c:	d01a      	beq.n	800a754 <__ieee754_sqrt+0x158>
 800a71e:	4c20      	ldr	r4, [pc, #128]	@ (800a7a0 <__ieee754_sqrt+0x1a4>)
 800a720:	f8df b080 	ldr.w	fp, [pc, #128]	@ 800a7a4 <__ieee754_sqrt+0x1a8>
 800a724:	e9d4 0100 	ldrd	r0, r1, [r4]
 800a728:	e9db 2300 	ldrd	r2, r3, [fp]
 800a72c:	f7f5 fdd0 	bl	80002d0 <__aeabi_dsub>
 800a730:	e9d4 8900 	ldrd	r8, r9, [r4]
 800a734:	4602      	mov	r2, r0
 800a736:	460b      	mov	r3, r1
 800a738:	4640      	mov	r0, r8
 800a73a:	4649      	mov	r1, r9
 800a73c:	f7f6 f9fc 	bl	8000b38 <__aeabi_dcmple>
 800a740:	b140      	cbz	r0, 800a754 <__ieee754_sqrt+0x158>
 800a742:	e9d4 0100 	ldrd	r0, r1, [r4]
 800a746:	e9db 2300 	ldrd	r2, r3, [fp]
 800a74a:	f1b5 3fff 	cmp.w	r5, #4294967295	@ 0xffffffff
 800a74e:	d111      	bne.n	800a774 <__ieee754_sqrt+0x178>
 800a750:	4655      	mov	r5, sl
 800a752:	3601      	adds	r6, #1
 800a754:	1072      	asrs	r2, r6, #1
 800a756:	086b      	lsrs	r3, r5, #1
 800a758:	07f1      	lsls	r1, r6, #31
 800a75a:	f102 527f 	add.w	r2, r2, #1069547520	@ 0x3fc00000
 800a75e:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
 800a762:	bf48      	it	mi
 800a764:	f043 4300 	orrmi.w	r3, r3, #2147483648	@ 0x80000000
 800a768:	4618      	mov	r0, r3
 800a76a:	eb02 5107 	add.w	r1, r2, r7, lsl #20
 800a76e:	e757      	b.n	800a620 <__ieee754_sqrt+0x24>
 800a770:	4696      	mov	lr, r2
 800a772:	e7be      	b.n	800a6f2 <__ieee754_sqrt+0xf6>
 800a774:	f7f5 fdae 	bl	80002d4 <__adddf3>
 800a778:	e9d4 8900 	ldrd	r8, r9, [r4]
 800a77c:	4602      	mov	r2, r0
 800a77e:	460b      	mov	r3, r1
 800a780:	4640      	mov	r0, r8
 800a782:	4649      	mov	r1, r9
 800a784:	f7f6 f9ce 	bl	8000b24 <__aeabi_dcmplt>
 800a788:	b120      	cbz	r0, 800a794 <__ieee754_sqrt+0x198>
 800a78a:	1ca8      	adds	r0, r5, #2
 800a78c:	bf08      	it	eq
 800a78e:	3601      	addeq	r6, #1
 800a790:	3502      	adds	r5, #2
 800a792:	e7df      	b.n	800a754 <__ieee754_sqrt+0x158>
 800a794:	1c6b      	adds	r3, r5, #1
 800a796:	f023 0501 	bic.w	r5, r3, #1
 800a79a:	e7db      	b.n	800a754 <__ieee754_sqrt+0x158>
 800a79c:	7ff00000 	.word	0x7ff00000
 800a7a0:	20000188 	.word	0x20000188
 800a7a4:	20000180 	.word	0x20000180

0800a7a8 <atof>:
 800a7a8:	2100      	movs	r1, #0
 800a7aa:	f000 bdf9 	b.w	800b3a0 <strtod>

0800a7ae <sulp>:
 800a7ae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a7b2:	460f      	mov	r7, r1
 800a7b4:	4690      	mov	r8, r2
 800a7b6:	f003 fa47 	bl	800dc48 <__ulp>
 800a7ba:	4604      	mov	r4, r0
 800a7bc:	460d      	mov	r5, r1
 800a7be:	f1b8 0f00 	cmp.w	r8, #0
 800a7c2:	d011      	beq.n	800a7e8 <sulp+0x3a>
 800a7c4:	f3c7 530a 	ubfx	r3, r7, #20, #11
 800a7c8:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800a7cc:	2b00      	cmp	r3, #0
 800a7ce:	dd0b      	ble.n	800a7e8 <sulp+0x3a>
 800a7d0:	2400      	movs	r4, #0
 800a7d2:	051b      	lsls	r3, r3, #20
 800a7d4:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 800a7d8:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 800a7dc:	4622      	mov	r2, r4
 800a7de:	462b      	mov	r3, r5
 800a7e0:	f7f5 ff2e 	bl	8000640 <__aeabi_dmul>
 800a7e4:	4604      	mov	r4, r0
 800a7e6:	460d      	mov	r5, r1
 800a7e8:	4620      	mov	r0, r4
 800a7ea:	4629      	mov	r1, r5
 800a7ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800a7f0 <_strtod_l>:
 800a7f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a7f4:	b09f      	sub	sp, #124	@ 0x7c
 800a7f6:	9217      	str	r2, [sp, #92]	@ 0x5c
 800a7f8:	2200      	movs	r2, #0
 800a7fa:	460c      	mov	r4, r1
 800a7fc:	921a      	str	r2, [sp, #104]	@ 0x68
 800a7fe:	f04f 0a00 	mov.w	sl, #0
 800a802:	f04f 0b00 	mov.w	fp, #0
 800a806:	460a      	mov	r2, r1
 800a808:	9005      	str	r0, [sp, #20]
 800a80a:	9219      	str	r2, [sp, #100]	@ 0x64
 800a80c:	7811      	ldrb	r1, [r2, #0]
 800a80e:	292b      	cmp	r1, #43	@ 0x2b
 800a810:	d048      	beq.n	800a8a4 <_strtod_l+0xb4>
 800a812:	d836      	bhi.n	800a882 <_strtod_l+0x92>
 800a814:	290d      	cmp	r1, #13
 800a816:	d830      	bhi.n	800a87a <_strtod_l+0x8a>
 800a818:	2908      	cmp	r1, #8
 800a81a:	d830      	bhi.n	800a87e <_strtod_l+0x8e>
 800a81c:	2900      	cmp	r1, #0
 800a81e:	d039      	beq.n	800a894 <_strtod_l+0xa4>
 800a820:	2200      	movs	r2, #0
 800a822:	920b      	str	r2, [sp, #44]	@ 0x2c
 800a824:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 800a826:	782a      	ldrb	r2, [r5, #0]
 800a828:	2a30      	cmp	r2, #48	@ 0x30
 800a82a:	f040 80b1 	bne.w	800a990 <_strtod_l+0x1a0>
 800a82e:	786a      	ldrb	r2, [r5, #1]
 800a830:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800a834:	2a58      	cmp	r2, #88	@ 0x58
 800a836:	d16c      	bne.n	800a912 <_strtod_l+0x122>
 800a838:	9302      	str	r3, [sp, #8]
 800a83a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a83c:	4a8e      	ldr	r2, [pc, #568]	@ (800aa78 <_strtod_l+0x288>)
 800a83e:	9301      	str	r3, [sp, #4]
 800a840:	ab1a      	add	r3, sp, #104	@ 0x68
 800a842:	9300      	str	r3, [sp, #0]
 800a844:	9805      	ldr	r0, [sp, #20]
 800a846:	ab1b      	add	r3, sp, #108	@ 0x6c
 800a848:	a919      	add	r1, sp, #100	@ 0x64
 800a84a:	f002 faf1 	bl	800ce30 <__gethex>
 800a84e:	f010 060f 	ands.w	r6, r0, #15
 800a852:	4604      	mov	r4, r0
 800a854:	d005      	beq.n	800a862 <_strtod_l+0x72>
 800a856:	2e06      	cmp	r6, #6
 800a858:	d126      	bne.n	800a8a8 <_strtod_l+0xb8>
 800a85a:	2300      	movs	r3, #0
 800a85c:	3501      	adds	r5, #1
 800a85e:	9519      	str	r5, [sp, #100]	@ 0x64
 800a860:	930b      	str	r3, [sp, #44]	@ 0x2c
 800a862:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800a864:	2b00      	cmp	r3, #0
 800a866:	f040 8584 	bne.w	800b372 <_strtod_l+0xb82>
 800a86a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a86c:	b1bb      	cbz	r3, 800a89e <_strtod_l+0xae>
 800a86e:	4650      	mov	r0, sl
 800a870:	f10b 4100 	add.w	r1, fp, #2147483648	@ 0x80000000
 800a874:	b01f      	add	sp, #124	@ 0x7c
 800a876:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a87a:	2920      	cmp	r1, #32
 800a87c:	d1d0      	bne.n	800a820 <_strtod_l+0x30>
 800a87e:	3201      	adds	r2, #1
 800a880:	e7c3      	b.n	800a80a <_strtod_l+0x1a>
 800a882:	292d      	cmp	r1, #45	@ 0x2d
 800a884:	d1cc      	bne.n	800a820 <_strtod_l+0x30>
 800a886:	2101      	movs	r1, #1
 800a888:	910b      	str	r1, [sp, #44]	@ 0x2c
 800a88a:	1c51      	adds	r1, r2, #1
 800a88c:	9119      	str	r1, [sp, #100]	@ 0x64
 800a88e:	7852      	ldrb	r2, [r2, #1]
 800a890:	2a00      	cmp	r2, #0
 800a892:	d1c7      	bne.n	800a824 <_strtod_l+0x34>
 800a894:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800a896:	9419      	str	r4, [sp, #100]	@ 0x64
 800a898:	2b00      	cmp	r3, #0
 800a89a:	f040 8568 	bne.w	800b36e <_strtod_l+0xb7e>
 800a89e:	4650      	mov	r0, sl
 800a8a0:	4659      	mov	r1, fp
 800a8a2:	e7e7      	b.n	800a874 <_strtod_l+0x84>
 800a8a4:	2100      	movs	r1, #0
 800a8a6:	e7ef      	b.n	800a888 <_strtod_l+0x98>
 800a8a8:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800a8aa:	b13a      	cbz	r2, 800a8bc <_strtod_l+0xcc>
 800a8ac:	2135      	movs	r1, #53	@ 0x35
 800a8ae:	a81c      	add	r0, sp, #112	@ 0x70
 800a8b0:	f003 faba 	bl	800de28 <__copybits>
 800a8b4:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800a8b6:	9805      	ldr	r0, [sp, #20]
 800a8b8:	f002 fe94 	bl	800d5e4 <_Bfree>
 800a8bc:	3e01      	subs	r6, #1
 800a8be:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 800a8c0:	2e04      	cmp	r6, #4
 800a8c2:	d806      	bhi.n	800a8d2 <_strtod_l+0xe2>
 800a8c4:	e8df f006 	tbb	[pc, r6]
 800a8c8:	201d0314 	.word	0x201d0314
 800a8cc:	14          	.byte	0x14
 800a8cd:	00          	.byte	0x00
 800a8ce:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 800a8d2:	05e1      	lsls	r1, r4, #23
 800a8d4:	bf48      	it	mi
 800a8d6:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 800a8da:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800a8de:	0d1b      	lsrs	r3, r3, #20
 800a8e0:	051b      	lsls	r3, r3, #20
 800a8e2:	2b00      	cmp	r3, #0
 800a8e4:	d1bd      	bne.n	800a862 <_strtod_l+0x72>
 800a8e6:	f001 fb51 	bl	800bf8c <__errno>
 800a8ea:	2322      	movs	r3, #34	@ 0x22
 800a8ec:	6003      	str	r3, [r0, #0]
 800a8ee:	e7b8      	b.n	800a862 <_strtod_l+0x72>
 800a8f0:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800a8f4:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 800a8f8:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800a8fc:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800a900:	e7e7      	b.n	800a8d2 <_strtod_l+0xe2>
 800a902:	f8df b178 	ldr.w	fp, [pc, #376]	@ 800aa7c <_strtod_l+0x28c>
 800a906:	e7e4      	b.n	800a8d2 <_strtod_l+0xe2>
 800a908:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 800a90c:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 800a910:	e7df      	b.n	800a8d2 <_strtod_l+0xe2>
 800a912:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800a914:	1c5a      	adds	r2, r3, #1
 800a916:	9219      	str	r2, [sp, #100]	@ 0x64
 800a918:	785b      	ldrb	r3, [r3, #1]
 800a91a:	2b30      	cmp	r3, #48	@ 0x30
 800a91c:	d0f9      	beq.n	800a912 <_strtod_l+0x122>
 800a91e:	2b00      	cmp	r3, #0
 800a920:	d09f      	beq.n	800a862 <_strtod_l+0x72>
 800a922:	2301      	movs	r3, #1
 800a924:	9309      	str	r3, [sp, #36]	@ 0x24
 800a926:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800a928:	220a      	movs	r2, #10
 800a92a:	930c      	str	r3, [sp, #48]	@ 0x30
 800a92c:	2300      	movs	r3, #0
 800a92e:	461f      	mov	r7, r3
 800a930:	9308      	str	r3, [sp, #32]
 800a932:	930a      	str	r3, [sp, #40]	@ 0x28
 800a934:	9819      	ldr	r0, [sp, #100]	@ 0x64
 800a936:	7805      	ldrb	r5, [r0, #0]
 800a938:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 800a93c:	b2d9      	uxtb	r1, r3
 800a93e:	2909      	cmp	r1, #9
 800a940:	d928      	bls.n	800a994 <_strtod_l+0x1a4>
 800a942:	2201      	movs	r2, #1
 800a944:	494e      	ldr	r1, [pc, #312]	@ (800aa80 <_strtod_l+0x290>)
 800a946:	f001 fac4 	bl	800bed2 <strncmp>
 800a94a:	2800      	cmp	r0, #0
 800a94c:	d032      	beq.n	800a9b4 <_strtod_l+0x1c4>
 800a94e:	2000      	movs	r0, #0
 800a950:	462a      	mov	r2, r5
 800a952:	4681      	mov	r9, r0
 800a954:	463d      	mov	r5, r7
 800a956:	4603      	mov	r3, r0
 800a958:	2a65      	cmp	r2, #101	@ 0x65
 800a95a:	d001      	beq.n	800a960 <_strtod_l+0x170>
 800a95c:	2a45      	cmp	r2, #69	@ 0x45
 800a95e:	d114      	bne.n	800a98a <_strtod_l+0x19a>
 800a960:	b91d      	cbnz	r5, 800a96a <_strtod_l+0x17a>
 800a962:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a964:	4302      	orrs	r2, r0
 800a966:	d095      	beq.n	800a894 <_strtod_l+0xa4>
 800a968:	2500      	movs	r5, #0
 800a96a:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 800a96c:	1c62      	adds	r2, r4, #1
 800a96e:	9219      	str	r2, [sp, #100]	@ 0x64
 800a970:	7862      	ldrb	r2, [r4, #1]
 800a972:	2a2b      	cmp	r2, #43	@ 0x2b
 800a974:	d077      	beq.n	800aa66 <_strtod_l+0x276>
 800a976:	2a2d      	cmp	r2, #45	@ 0x2d
 800a978:	d07b      	beq.n	800aa72 <_strtod_l+0x282>
 800a97a:	f04f 0c00 	mov.w	ip, #0
 800a97e:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 800a982:	2909      	cmp	r1, #9
 800a984:	f240 8082 	bls.w	800aa8c <_strtod_l+0x29c>
 800a988:	9419      	str	r4, [sp, #100]	@ 0x64
 800a98a:	f04f 0800 	mov.w	r8, #0
 800a98e:	e0a2      	b.n	800aad6 <_strtod_l+0x2e6>
 800a990:	2300      	movs	r3, #0
 800a992:	e7c7      	b.n	800a924 <_strtod_l+0x134>
 800a994:	2f08      	cmp	r7, #8
 800a996:	bfd5      	itete	le
 800a998:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 800a99a:	9908      	ldrgt	r1, [sp, #32]
 800a99c:	fb02 3301 	mlale	r3, r2, r1, r3
 800a9a0:	fb02 3301 	mlagt	r3, r2, r1, r3
 800a9a4:	f100 0001 	add.w	r0, r0, #1
 800a9a8:	bfd4      	ite	le
 800a9aa:	930a      	strle	r3, [sp, #40]	@ 0x28
 800a9ac:	9308      	strgt	r3, [sp, #32]
 800a9ae:	3701      	adds	r7, #1
 800a9b0:	9019      	str	r0, [sp, #100]	@ 0x64
 800a9b2:	e7bf      	b.n	800a934 <_strtod_l+0x144>
 800a9b4:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800a9b6:	1c5a      	adds	r2, r3, #1
 800a9b8:	9219      	str	r2, [sp, #100]	@ 0x64
 800a9ba:	785a      	ldrb	r2, [r3, #1]
 800a9bc:	b37f      	cbz	r7, 800aa1e <_strtod_l+0x22e>
 800a9be:	4681      	mov	r9, r0
 800a9c0:	463d      	mov	r5, r7
 800a9c2:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 800a9c6:	2b09      	cmp	r3, #9
 800a9c8:	d912      	bls.n	800a9f0 <_strtod_l+0x200>
 800a9ca:	2301      	movs	r3, #1
 800a9cc:	e7c4      	b.n	800a958 <_strtod_l+0x168>
 800a9ce:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800a9d0:	3001      	adds	r0, #1
 800a9d2:	1c5a      	adds	r2, r3, #1
 800a9d4:	9219      	str	r2, [sp, #100]	@ 0x64
 800a9d6:	785a      	ldrb	r2, [r3, #1]
 800a9d8:	2a30      	cmp	r2, #48	@ 0x30
 800a9da:	d0f8      	beq.n	800a9ce <_strtod_l+0x1de>
 800a9dc:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 800a9e0:	2b08      	cmp	r3, #8
 800a9e2:	f200 84cb 	bhi.w	800b37c <_strtod_l+0xb8c>
 800a9e6:	4681      	mov	r9, r0
 800a9e8:	2000      	movs	r0, #0
 800a9ea:	4605      	mov	r5, r0
 800a9ec:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800a9ee:	930c      	str	r3, [sp, #48]	@ 0x30
 800a9f0:	3a30      	subs	r2, #48	@ 0x30
 800a9f2:	f100 0301 	add.w	r3, r0, #1
 800a9f6:	d02a      	beq.n	800aa4e <_strtod_l+0x25e>
 800a9f8:	4499      	add	r9, r3
 800a9fa:	210a      	movs	r1, #10
 800a9fc:	462b      	mov	r3, r5
 800a9fe:	eb00 0c05 	add.w	ip, r0, r5
 800aa02:	4563      	cmp	r3, ip
 800aa04:	d10d      	bne.n	800aa22 <_strtod_l+0x232>
 800aa06:	1c69      	adds	r1, r5, #1
 800aa08:	4401      	add	r1, r0
 800aa0a:	4428      	add	r0, r5
 800aa0c:	2808      	cmp	r0, #8
 800aa0e:	dc16      	bgt.n	800aa3e <_strtod_l+0x24e>
 800aa10:	230a      	movs	r3, #10
 800aa12:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800aa14:	fb03 2300 	mla	r3, r3, r0, r2
 800aa18:	930a      	str	r3, [sp, #40]	@ 0x28
 800aa1a:	2300      	movs	r3, #0
 800aa1c:	e018      	b.n	800aa50 <_strtod_l+0x260>
 800aa1e:	4638      	mov	r0, r7
 800aa20:	e7da      	b.n	800a9d8 <_strtod_l+0x1e8>
 800aa22:	2b08      	cmp	r3, #8
 800aa24:	f103 0301 	add.w	r3, r3, #1
 800aa28:	dc03      	bgt.n	800aa32 <_strtod_l+0x242>
 800aa2a:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 800aa2c:	434e      	muls	r6, r1
 800aa2e:	960a      	str	r6, [sp, #40]	@ 0x28
 800aa30:	e7e7      	b.n	800aa02 <_strtod_l+0x212>
 800aa32:	2b10      	cmp	r3, #16
 800aa34:	bfde      	ittt	le
 800aa36:	9e08      	ldrle	r6, [sp, #32]
 800aa38:	434e      	mulle	r6, r1
 800aa3a:	9608      	strle	r6, [sp, #32]
 800aa3c:	e7e1      	b.n	800aa02 <_strtod_l+0x212>
 800aa3e:	280f      	cmp	r0, #15
 800aa40:	dceb      	bgt.n	800aa1a <_strtod_l+0x22a>
 800aa42:	230a      	movs	r3, #10
 800aa44:	9808      	ldr	r0, [sp, #32]
 800aa46:	fb03 2300 	mla	r3, r3, r0, r2
 800aa4a:	9308      	str	r3, [sp, #32]
 800aa4c:	e7e5      	b.n	800aa1a <_strtod_l+0x22a>
 800aa4e:	4629      	mov	r1, r5
 800aa50:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800aa52:	460d      	mov	r5, r1
 800aa54:	1c50      	adds	r0, r2, #1
 800aa56:	9019      	str	r0, [sp, #100]	@ 0x64
 800aa58:	7852      	ldrb	r2, [r2, #1]
 800aa5a:	4618      	mov	r0, r3
 800aa5c:	e7b1      	b.n	800a9c2 <_strtod_l+0x1d2>
 800aa5e:	f04f 0900 	mov.w	r9, #0
 800aa62:	2301      	movs	r3, #1
 800aa64:	e77d      	b.n	800a962 <_strtod_l+0x172>
 800aa66:	f04f 0c00 	mov.w	ip, #0
 800aa6a:	1ca2      	adds	r2, r4, #2
 800aa6c:	9219      	str	r2, [sp, #100]	@ 0x64
 800aa6e:	78a2      	ldrb	r2, [r4, #2]
 800aa70:	e785      	b.n	800a97e <_strtod_l+0x18e>
 800aa72:	f04f 0c01 	mov.w	ip, #1
 800aa76:	e7f8      	b.n	800aa6a <_strtod_l+0x27a>
 800aa78:	0800ec30 	.word	0x0800ec30
 800aa7c:	7ff00000 	.word	0x7ff00000
 800aa80:	0800ec18 	.word	0x0800ec18
 800aa84:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800aa86:	1c51      	adds	r1, r2, #1
 800aa88:	9119      	str	r1, [sp, #100]	@ 0x64
 800aa8a:	7852      	ldrb	r2, [r2, #1]
 800aa8c:	2a30      	cmp	r2, #48	@ 0x30
 800aa8e:	d0f9      	beq.n	800aa84 <_strtod_l+0x294>
 800aa90:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 800aa94:	2908      	cmp	r1, #8
 800aa96:	f63f af78 	bhi.w	800a98a <_strtod_l+0x19a>
 800aa9a:	f04f 080a 	mov.w	r8, #10
 800aa9e:	3a30      	subs	r2, #48	@ 0x30
 800aaa0:	920e      	str	r2, [sp, #56]	@ 0x38
 800aaa2:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800aaa4:	920f      	str	r2, [sp, #60]	@ 0x3c
 800aaa6:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800aaa8:	1c56      	adds	r6, r2, #1
 800aaaa:	9619      	str	r6, [sp, #100]	@ 0x64
 800aaac:	7852      	ldrb	r2, [r2, #1]
 800aaae:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 800aab2:	f1be 0f09 	cmp.w	lr, #9
 800aab6:	d939      	bls.n	800ab2c <_strtod_l+0x33c>
 800aab8:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800aaba:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 800aabe:	1a76      	subs	r6, r6, r1
 800aac0:	2e08      	cmp	r6, #8
 800aac2:	dc03      	bgt.n	800aacc <_strtod_l+0x2dc>
 800aac4:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800aac6:	4588      	cmp	r8, r1
 800aac8:	bfa8      	it	ge
 800aaca:	4688      	movge	r8, r1
 800aacc:	f1bc 0f00 	cmp.w	ip, #0
 800aad0:	d001      	beq.n	800aad6 <_strtod_l+0x2e6>
 800aad2:	f1c8 0800 	rsb	r8, r8, #0
 800aad6:	2d00      	cmp	r5, #0
 800aad8:	d14e      	bne.n	800ab78 <_strtod_l+0x388>
 800aada:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800aadc:	4308      	orrs	r0, r1
 800aade:	f47f aec0 	bne.w	800a862 <_strtod_l+0x72>
 800aae2:	2b00      	cmp	r3, #0
 800aae4:	f47f aed6 	bne.w	800a894 <_strtod_l+0xa4>
 800aae8:	2a69      	cmp	r2, #105	@ 0x69
 800aaea:	d028      	beq.n	800ab3e <_strtod_l+0x34e>
 800aaec:	dc25      	bgt.n	800ab3a <_strtod_l+0x34a>
 800aaee:	2a49      	cmp	r2, #73	@ 0x49
 800aaf0:	d025      	beq.n	800ab3e <_strtod_l+0x34e>
 800aaf2:	2a4e      	cmp	r2, #78	@ 0x4e
 800aaf4:	f47f aece 	bne.w	800a894 <_strtod_l+0xa4>
 800aaf8:	499a      	ldr	r1, [pc, #616]	@ (800ad64 <_strtod_l+0x574>)
 800aafa:	a819      	add	r0, sp, #100	@ 0x64
 800aafc:	f002 fbba 	bl	800d274 <__match>
 800ab00:	2800      	cmp	r0, #0
 800ab02:	f43f aec7 	beq.w	800a894 <_strtod_l+0xa4>
 800ab06:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800ab08:	781b      	ldrb	r3, [r3, #0]
 800ab0a:	2b28      	cmp	r3, #40	@ 0x28
 800ab0c:	d12e      	bne.n	800ab6c <_strtod_l+0x37c>
 800ab0e:	4996      	ldr	r1, [pc, #600]	@ (800ad68 <_strtod_l+0x578>)
 800ab10:	aa1c      	add	r2, sp, #112	@ 0x70
 800ab12:	a819      	add	r0, sp, #100	@ 0x64
 800ab14:	f002 fbc2 	bl	800d29c <__hexnan>
 800ab18:	2805      	cmp	r0, #5
 800ab1a:	d127      	bne.n	800ab6c <_strtod_l+0x37c>
 800ab1c:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800ab1e:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 800ab22:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 800ab26:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 800ab2a:	e69a      	b.n	800a862 <_strtod_l+0x72>
 800ab2c:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800ab2e:	fb08 2101 	mla	r1, r8, r1, r2
 800ab32:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 800ab36:	920e      	str	r2, [sp, #56]	@ 0x38
 800ab38:	e7b5      	b.n	800aaa6 <_strtod_l+0x2b6>
 800ab3a:	2a6e      	cmp	r2, #110	@ 0x6e
 800ab3c:	e7da      	b.n	800aaf4 <_strtod_l+0x304>
 800ab3e:	498b      	ldr	r1, [pc, #556]	@ (800ad6c <_strtod_l+0x57c>)
 800ab40:	a819      	add	r0, sp, #100	@ 0x64
 800ab42:	f002 fb97 	bl	800d274 <__match>
 800ab46:	2800      	cmp	r0, #0
 800ab48:	f43f aea4 	beq.w	800a894 <_strtod_l+0xa4>
 800ab4c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800ab4e:	4988      	ldr	r1, [pc, #544]	@ (800ad70 <_strtod_l+0x580>)
 800ab50:	3b01      	subs	r3, #1
 800ab52:	a819      	add	r0, sp, #100	@ 0x64
 800ab54:	9319      	str	r3, [sp, #100]	@ 0x64
 800ab56:	f002 fb8d 	bl	800d274 <__match>
 800ab5a:	b910      	cbnz	r0, 800ab62 <_strtod_l+0x372>
 800ab5c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800ab5e:	3301      	adds	r3, #1
 800ab60:	9319      	str	r3, [sp, #100]	@ 0x64
 800ab62:	f04f 0a00 	mov.w	sl, #0
 800ab66:	f8df b20c 	ldr.w	fp, [pc, #524]	@ 800ad74 <_strtod_l+0x584>
 800ab6a:	e67a      	b.n	800a862 <_strtod_l+0x72>
 800ab6c:	4882      	ldr	r0, [pc, #520]	@ (800ad78 <_strtod_l+0x588>)
 800ab6e:	f001 fa57 	bl	800c020 <nan>
 800ab72:	4682      	mov	sl, r0
 800ab74:	468b      	mov	fp, r1
 800ab76:	e674      	b.n	800a862 <_strtod_l+0x72>
 800ab78:	eba8 0309 	sub.w	r3, r8, r9
 800ab7c:	2f00      	cmp	r7, #0
 800ab7e:	bf08      	it	eq
 800ab80:	462f      	moveq	r7, r5
 800ab82:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800ab84:	2d10      	cmp	r5, #16
 800ab86:	462c      	mov	r4, r5
 800ab88:	9309      	str	r3, [sp, #36]	@ 0x24
 800ab8a:	bfa8      	it	ge
 800ab8c:	2410      	movge	r4, #16
 800ab8e:	f7f5 fcdd 	bl	800054c <__aeabi_ui2d>
 800ab92:	2d09      	cmp	r5, #9
 800ab94:	4682      	mov	sl, r0
 800ab96:	468b      	mov	fp, r1
 800ab98:	dc11      	bgt.n	800abbe <_strtod_l+0x3ce>
 800ab9a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ab9c:	2b00      	cmp	r3, #0
 800ab9e:	f43f ae60 	beq.w	800a862 <_strtod_l+0x72>
 800aba2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800aba4:	dd76      	ble.n	800ac94 <_strtod_l+0x4a4>
 800aba6:	2b16      	cmp	r3, #22
 800aba8:	dc5d      	bgt.n	800ac66 <_strtod_l+0x476>
 800abaa:	4974      	ldr	r1, [pc, #464]	@ (800ad7c <_strtod_l+0x58c>)
 800abac:	4652      	mov	r2, sl
 800abae:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800abb2:	465b      	mov	r3, fp
 800abb4:	e9d1 0100 	ldrd	r0, r1, [r1]
 800abb8:	f7f5 fd42 	bl	8000640 <__aeabi_dmul>
 800abbc:	e7d9      	b.n	800ab72 <_strtod_l+0x382>
 800abbe:	4b6f      	ldr	r3, [pc, #444]	@ (800ad7c <_strtod_l+0x58c>)
 800abc0:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800abc4:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 800abc8:	f7f5 fd3a 	bl	8000640 <__aeabi_dmul>
 800abcc:	4682      	mov	sl, r0
 800abce:	9808      	ldr	r0, [sp, #32]
 800abd0:	468b      	mov	fp, r1
 800abd2:	f7f5 fcbb 	bl	800054c <__aeabi_ui2d>
 800abd6:	4602      	mov	r2, r0
 800abd8:	460b      	mov	r3, r1
 800abda:	4650      	mov	r0, sl
 800abdc:	4659      	mov	r1, fp
 800abde:	f7f5 fb79 	bl	80002d4 <__adddf3>
 800abe2:	2d0f      	cmp	r5, #15
 800abe4:	4682      	mov	sl, r0
 800abe6:	468b      	mov	fp, r1
 800abe8:	ddd7      	ble.n	800ab9a <_strtod_l+0x3aa>
 800abea:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800abec:	1b2c      	subs	r4, r5, r4
 800abee:	441c      	add	r4, r3
 800abf0:	2c00      	cmp	r4, #0
 800abf2:	f340 8096 	ble.w	800ad22 <_strtod_l+0x532>
 800abf6:	f014 030f 	ands.w	r3, r4, #15
 800abfa:	d00a      	beq.n	800ac12 <_strtod_l+0x422>
 800abfc:	495f      	ldr	r1, [pc, #380]	@ (800ad7c <_strtod_l+0x58c>)
 800abfe:	4652      	mov	r2, sl
 800ac00:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800ac04:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ac08:	465b      	mov	r3, fp
 800ac0a:	f7f5 fd19 	bl	8000640 <__aeabi_dmul>
 800ac0e:	4682      	mov	sl, r0
 800ac10:	468b      	mov	fp, r1
 800ac12:	f034 040f 	bics.w	r4, r4, #15
 800ac16:	d073      	beq.n	800ad00 <_strtod_l+0x510>
 800ac18:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 800ac1c:	dd48      	ble.n	800acb0 <_strtod_l+0x4c0>
 800ac1e:	2400      	movs	r4, #0
 800ac20:	46a0      	mov	r8, r4
 800ac22:	46a1      	mov	r9, r4
 800ac24:	940a      	str	r4, [sp, #40]	@ 0x28
 800ac26:	2322      	movs	r3, #34	@ 0x22
 800ac28:	f04f 0a00 	mov.w	sl, #0
 800ac2c:	9a05      	ldr	r2, [sp, #20]
 800ac2e:	f8df b144 	ldr.w	fp, [pc, #324]	@ 800ad74 <_strtod_l+0x584>
 800ac32:	6013      	str	r3, [r2, #0]
 800ac34:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ac36:	2b00      	cmp	r3, #0
 800ac38:	f43f ae13 	beq.w	800a862 <_strtod_l+0x72>
 800ac3c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800ac3e:	9805      	ldr	r0, [sp, #20]
 800ac40:	f002 fcd0 	bl	800d5e4 <_Bfree>
 800ac44:	4649      	mov	r1, r9
 800ac46:	9805      	ldr	r0, [sp, #20]
 800ac48:	f002 fccc 	bl	800d5e4 <_Bfree>
 800ac4c:	4641      	mov	r1, r8
 800ac4e:	9805      	ldr	r0, [sp, #20]
 800ac50:	f002 fcc8 	bl	800d5e4 <_Bfree>
 800ac54:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800ac56:	9805      	ldr	r0, [sp, #20]
 800ac58:	f002 fcc4 	bl	800d5e4 <_Bfree>
 800ac5c:	4621      	mov	r1, r4
 800ac5e:	9805      	ldr	r0, [sp, #20]
 800ac60:	f002 fcc0 	bl	800d5e4 <_Bfree>
 800ac64:	e5fd      	b.n	800a862 <_strtod_l+0x72>
 800ac66:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800ac68:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 800ac6c:	4293      	cmp	r3, r2
 800ac6e:	dbbc      	blt.n	800abea <_strtod_l+0x3fa>
 800ac70:	4c42      	ldr	r4, [pc, #264]	@ (800ad7c <_strtod_l+0x58c>)
 800ac72:	f1c5 050f 	rsb	r5, r5, #15
 800ac76:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800ac7a:	4652      	mov	r2, sl
 800ac7c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ac80:	465b      	mov	r3, fp
 800ac82:	f7f5 fcdd 	bl	8000640 <__aeabi_dmul>
 800ac86:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ac88:	1b5d      	subs	r5, r3, r5
 800ac8a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800ac8e:	e9d4 2300 	ldrd	r2, r3, [r4]
 800ac92:	e791      	b.n	800abb8 <_strtod_l+0x3c8>
 800ac94:	3316      	adds	r3, #22
 800ac96:	dba8      	blt.n	800abea <_strtod_l+0x3fa>
 800ac98:	4b38      	ldr	r3, [pc, #224]	@ (800ad7c <_strtod_l+0x58c>)
 800ac9a:	eba9 0808 	sub.w	r8, r9, r8
 800ac9e:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 800aca2:	4650      	mov	r0, sl
 800aca4:	e9d8 2300 	ldrd	r2, r3, [r8]
 800aca8:	4659      	mov	r1, fp
 800acaa:	f7f5 fdf3 	bl	8000894 <__aeabi_ddiv>
 800acae:	e760      	b.n	800ab72 <_strtod_l+0x382>
 800acb0:	4b33      	ldr	r3, [pc, #204]	@ (800ad80 <_strtod_l+0x590>)
 800acb2:	4650      	mov	r0, sl
 800acb4:	9308      	str	r3, [sp, #32]
 800acb6:	2300      	movs	r3, #0
 800acb8:	4659      	mov	r1, fp
 800acba:	461e      	mov	r6, r3
 800acbc:	1124      	asrs	r4, r4, #4
 800acbe:	2c01      	cmp	r4, #1
 800acc0:	dc21      	bgt.n	800ad06 <_strtod_l+0x516>
 800acc2:	b10b      	cbz	r3, 800acc8 <_strtod_l+0x4d8>
 800acc4:	4682      	mov	sl, r0
 800acc6:	468b      	mov	fp, r1
 800acc8:	492d      	ldr	r1, [pc, #180]	@ (800ad80 <_strtod_l+0x590>)
 800acca:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 800acce:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 800acd2:	4652      	mov	r2, sl
 800acd4:	e9d1 0100 	ldrd	r0, r1, [r1]
 800acd8:	465b      	mov	r3, fp
 800acda:	f7f5 fcb1 	bl	8000640 <__aeabi_dmul>
 800acde:	4b25      	ldr	r3, [pc, #148]	@ (800ad74 <_strtod_l+0x584>)
 800ace0:	460a      	mov	r2, r1
 800ace2:	400b      	ands	r3, r1
 800ace4:	4927      	ldr	r1, [pc, #156]	@ (800ad84 <_strtod_l+0x594>)
 800ace6:	4682      	mov	sl, r0
 800ace8:	428b      	cmp	r3, r1
 800acea:	d898      	bhi.n	800ac1e <_strtod_l+0x42e>
 800acec:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 800acf0:	428b      	cmp	r3, r1
 800acf2:	bf86      	itte	hi
 800acf4:	f04f 3aff 	movhi.w	sl, #4294967295	@ 0xffffffff
 800acf8:	f8df b08c 	ldrhi.w	fp, [pc, #140]	@ 800ad88 <_strtod_l+0x598>
 800acfc:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 800ad00:	2300      	movs	r3, #0
 800ad02:	9308      	str	r3, [sp, #32]
 800ad04:	e07a      	b.n	800adfc <_strtod_l+0x60c>
 800ad06:	07e2      	lsls	r2, r4, #31
 800ad08:	d505      	bpl.n	800ad16 <_strtod_l+0x526>
 800ad0a:	9b08      	ldr	r3, [sp, #32]
 800ad0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad10:	f7f5 fc96 	bl	8000640 <__aeabi_dmul>
 800ad14:	2301      	movs	r3, #1
 800ad16:	9a08      	ldr	r2, [sp, #32]
 800ad18:	3601      	adds	r6, #1
 800ad1a:	3208      	adds	r2, #8
 800ad1c:	1064      	asrs	r4, r4, #1
 800ad1e:	9208      	str	r2, [sp, #32]
 800ad20:	e7cd      	b.n	800acbe <_strtod_l+0x4ce>
 800ad22:	d0ed      	beq.n	800ad00 <_strtod_l+0x510>
 800ad24:	4264      	negs	r4, r4
 800ad26:	f014 020f 	ands.w	r2, r4, #15
 800ad2a:	d00a      	beq.n	800ad42 <_strtod_l+0x552>
 800ad2c:	4b13      	ldr	r3, [pc, #76]	@ (800ad7c <_strtod_l+0x58c>)
 800ad2e:	4650      	mov	r0, sl
 800ad30:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800ad34:	4659      	mov	r1, fp
 800ad36:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad3a:	f7f5 fdab 	bl	8000894 <__aeabi_ddiv>
 800ad3e:	4682      	mov	sl, r0
 800ad40:	468b      	mov	fp, r1
 800ad42:	1124      	asrs	r4, r4, #4
 800ad44:	d0dc      	beq.n	800ad00 <_strtod_l+0x510>
 800ad46:	2c1f      	cmp	r4, #31
 800ad48:	dd20      	ble.n	800ad8c <_strtod_l+0x59c>
 800ad4a:	2400      	movs	r4, #0
 800ad4c:	46a0      	mov	r8, r4
 800ad4e:	46a1      	mov	r9, r4
 800ad50:	940a      	str	r4, [sp, #40]	@ 0x28
 800ad52:	2322      	movs	r3, #34	@ 0x22
 800ad54:	9a05      	ldr	r2, [sp, #20]
 800ad56:	f04f 0a00 	mov.w	sl, #0
 800ad5a:	f04f 0b00 	mov.w	fp, #0
 800ad5e:	6013      	str	r3, [r2, #0]
 800ad60:	e768      	b.n	800ac34 <_strtod_l+0x444>
 800ad62:	bf00      	nop
 800ad64:	0800ec7d 	.word	0x0800ec7d
 800ad68:	0800ec1c 	.word	0x0800ec1c
 800ad6c:	0800ec75 	.word	0x0800ec75
 800ad70:	0800ecaf 	.word	0x0800ecaf
 800ad74:	7ff00000 	.word	0x7ff00000
 800ad78:	0800f03d 	.word	0x0800f03d
 800ad7c:	0800ee28 	.word	0x0800ee28
 800ad80:	0800ee00 	.word	0x0800ee00
 800ad84:	7ca00000 	.word	0x7ca00000
 800ad88:	7fefffff 	.word	0x7fefffff
 800ad8c:	f014 0310 	ands.w	r3, r4, #16
 800ad90:	bf18      	it	ne
 800ad92:	236a      	movne	r3, #106	@ 0x6a
 800ad94:	4650      	mov	r0, sl
 800ad96:	9308      	str	r3, [sp, #32]
 800ad98:	4659      	mov	r1, fp
 800ad9a:	2300      	movs	r3, #0
 800ad9c:	4ea9      	ldr	r6, [pc, #676]	@ (800b044 <_strtod_l+0x854>)
 800ad9e:	07e2      	lsls	r2, r4, #31
 800ada0:	d504      	bpl.n	800adac <_strtod_l+0x5bc>
 800ada2:	e9d6 2300 	ldrd	r2, r3, [r6]
 800ada6:	f7f5 fc4b 	bl	8000640 <__aeabi_dmul>
 800adaa:	2301      	movs	r3, #1
 800adac:	1064      	asrs	r4, r4, #1
 800adae:	f106 0608 	add.w	r6, r6, #8
 800adb2:	d1f4      	bne.n	800ad9e <_strtod_l+0x5ae>
 800adb4:	b10b      	cbz	r3, 800adba <_strtod_l+0x5ca>
 800adb6:	4682      	mov	sl, r0
 800adb8:	468b      	mov	fp, r1
 800adba:	9b08      	ldr	r3, [sp, #32]
 800adbc:	b1b3      	cbz	r3, 800adec <_strtod_l+0x5fc>
 800adbe:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800adc2:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 800adc6:	2b00      	cmp	r3, #0
 800adc8:	4659      	mov	r1, fp
 800adca:	dd0f      	ble.n	800adec <_strtod_l+0x5fc>
 800adcc:	2b1f      	cmp	r3, #31
 800adce:	dd57      	ble.n	800ae80 <_strtod_l+0x690>
 800add0:	2b34      	cmp	r3, #52	@ 0x34
 800add2:	bfd8      	it	le
 800add4:	f04f 33ff 	movle.w	r3, #4294967295	@ 0xffffffff
 800add8:	f04f 0a00 	mov.w	sl, #0
 800addc:	bfcf      	iteee	gt
 800adde:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 800ade2:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 800ade6:	4093      	lslle	r3, r2
 800ade8:	ea03 0b01 	andle.w	fp, r3, r1
 800adec:	2200      	movs	r2, #0
 800adee:	2300      	movs	r3, #0
 800adf0:	4650      	mov	r0, sl
 800adf2:	4659      	mov	r1, fp
 800adf4:	f7f5 fe8c 	bl	8000b10 <__aeabi_dcmpeq>
 800adf8:	2800      	cmp	r0, #0
 800adfa:	d1a6      	bne.n	800ad4a <_strtod_l+0x55a>
 800adfc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800adfe:	463a      	mov	r2, r7
 800ae00:	9300      	str	r3, [sp, #0]
 800ae02:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800ae04:	462b      	mov	r3, r5
 800ae06:	9805      	ldr	r0, [sp, #20]
 800ae08:	f002 fc54 	bl	800d6b4 <__s2b>
 800ae0c:	900a      	str	r0, [sp, #40]	@ 0x28
 800ae0e:	2800      	cmp	r0, #0
 800ae10:	f43f af05 	beq.w	800ac1e <_strtod_l+0x42e>
 800ae14:	2400      	movs	r4, #0
 800ae16:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800ae18:	eba9 0308 	sub.w	r3, r9, r8
 800ae1c:	2a00      	cmp	r2, #0
 800ae1e:	bfa8      	it	ge
 800ae20:	2300      	movge	r3, #0
 800ae22:	46a0      	mov	r8, r4
 800ae24:	9312      	str	r3, [sp, #72]	@ 0x48
 800ae26:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800ae2a:	9316      	str	r3, [sp, #88]	@ 0x58
 800ae2c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ae2e:	9805      	ldr	r0, [sp, #20]
 800ae30:	6859      	ldr	r1, [r3, #4]
 800ae32:	f002 fb97 	bl	800d564 <_Balloc>
 800ae36:	4681      	mov	r9, r0
 800ae38:	2800      	cmp	r0, #0
 800ae3a:	f43f aef4 	beq.w	800ac26 <_strtod_l+0x436>
 800ae3e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ae40:	300c      	adds	r0, #12
 800ae42:	691a      	ldr	r2, [r3, #16]
 800ae44:	f103 010c 	add.w	r1, r3, #12
 800ae48:	3202      	adds	r2, #2
 800ae4a:	0092      	lsls	r2, r2, #2
 800ae4c:	f001 f8d9 	bl	800c002 <memcpy>
 800ae50:	ab1c      	add	r3, sp, #112	@ 0x70
 800ae52:	9301      	str	r3, [sp, #4]
 800ae54:	ab1b      	add	r3, sp, #108	@ 0x6c
 800ae56:	9300      	str	r3, [sp, #0]
 800ae58:	4652      	mov	r2, sl
 800ae5a:	465b      	mov	r3, fp
 800ae5c:	9805      	ldr	r0, [sp, #20]
 800ae5e:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 800ae62:	f002 ff59 	bl	800dd18 <__d2b>
 800ae66:	901a      	str	r0, [sp, #104]	@ 0x68
 800ae68:	2800      	cmp	r0, #0
 800ae6a:	f43f aedc 	beq.w	800ac26 <_strtod_l+0x436>
 800ae6e:	2101      	movs	r1, #1
 800ae70:	9805      	ldr	r0, [sp, #20]
 800ae72:	f002 fcb5 	bl	800d7e0 <__i2b>
 800ae76:	4680      	mov	r8, r0
 800ae78:	b948      	cbnz	r0, 800ae8e <_strtod_l+0x69e>
 800ae7a:	f04f 0800 	mov.w	r8, #0
 800ae7e:	e6d2      	b.n	800ac26 <_strtod_l+0x436>
 800ae80:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800ae84:	fa02 f303 	lsl.w	r3, r2, r3
 800ae88:	ea03 0a0a 	and.w	sl, r3, sl
 800ae8c:	e7ae      	b.n	800adec <_strtod_l+0x5fc>
 800ae8e:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 800ae90:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 800ae92:	2d00      	cmp	r5, #0
 800ae94:	bfab      	itete	ge
 800ae96:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 800ae98:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 800ae9a:	18ef      	addge	r7, r5, r3
 800ae9c:	1b5e      	sublt	r6, r3, r5
 800ae9e:	9b08      	ldr	r3, [sp, #32]
 800aea0:	bfa8      	it	ge
 800aea2:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 800aea4:	eba5 0503 	sub.w	r5, r5, r3
 800aea8:	4415      	add	r5, r2
 800aeaa:	4b67      	ldr	r3, [pc, #412]	@ (800b048 <_strtod_l+0x858>)
 800aeac:	f105 35ff 	add.w	r5, r5, #4294967295	@ 0xffffffff
 800aeb0:	bfb8      	it	lt
 800aeb2:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 800aeb4:	429d      	cmp	r5, r3
 800aeb6:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 800aeba:	da50      	bge.n	800af5e <_strtod_l+0x76e>
 800aebc:	1b5b      	subs	r3, r3, r5
 800aebe:	2b1f      	cmp	r3, #31
 800aec0:	f04f 0101 	mov.w	r1, #1
 800aec4:	eba2 0203 	sub.w	r2, r2, r3
 800aec8:	dc3d      	bgt.n	800af46 <_strtod_l+0x756>
 800aeca:	fa01 f303 	lsl.w	r3, r1, r3
 800aece:	9313      	str	r3, [sp, #76]	@ 0x4c
 800aed0:	2300      	movs	r3, #0
 800aed2:	9310      	str	r3, [sp, #64]	@ 0x40
 800aed4:	18bd      	adds	r5, r7, r2
 800aed6:	9b08      	ldr	r3, [sp, #32]
 800aed8:	42af      	cmp	r7, r5
 800aeda:	4416      	add	r6, r2
 800aedc:	441e      	add	r6, r3
 800aede:	463b      	mov	r3, r7
 800aee0:	bfa8      	it	ge
 800aee2:	462b      	movge	r3, r5
 800aee4:	42b3      	cmp	r3, r6
 800aee6:	bfa8      	it	ge
 800aee8:	4633      	movge	r3, r6
 800aeea:	2b00      	cmp	r3, #0
 800aeec:	bfc2      	ittt	gt
 800aeee:	1aed      	subgt	r5, r5, r3
 800aef0:	1af6      	subgt	r6, r6, r3
 800aef2:	1aff      	subgt	r7, r7, r3
 800aef4:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800aef6:	2b00      	cmp	r3, #0
 800aef8:	dd16      	ble.n	800af28 <_strtod_l+0x738>
 800aefa:	4641      	mov	r1, r8
 800aefc:	461a      	mov	r2, r3
 800aefe:	9805      	ldr	r0, [sp, #20]
 800af00:	f002 fd2c 	bl	800d95c <__pow5mult>
 800af04:	4680      	mov	r8, r0
 800af06:	2800      	cmp	r0, #0
 800af08:	d0b7      	beq.n	800ae7a <_strtod_l+0x68a>
 800af0a:	4601      	mov	r1, r0
 800af0c:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800af0e:	9805      	ldr	r0, [sp, #20]
 800af10:	f002 fc7c 	bl	800d80c <__multiply>
 800af14:	900e      	str	r0, [sp, #56]	@ 0x38
 800af16:	2800      	cmp	r0, #0
 800af18:	f43f ae85 	beq.w	800ac26 <_strtod_l+0x436>
 800af1c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800af1e:	9805      	ldr	r0, [sp, #20]
 800af20:	f002 fb60 	bl	800d5e4 <_Bfree>
 800af24:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800af26:	931a      	str	r3, [sp, #104]	@ 0x68
 800af28:	2d00      	cmp	r5, #0
 800af2a:	dc1d      	bgt.n	800af68 <_strtod_l+0x778>
 800af2c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800af2e:	2b00      	cmp	r3, #0
 800af30:	dd23      	ble.n	800af7a <_strtod_l+0x78a>
 800af32:	4649      	mov	r1, r9
 800af34:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800af36:	9805      	ldr	r0, [sp, #20]
 800af38:	f002 fd10 	bl	800d95c <__pow5mult>
 800af3c:	4681      	mov	r9, r0
 800af3e:	b9e0      	cbnz	r0, 800af7a <_strtod_l+0x78a>
 800af40:	f04f 0900 	mov.w	r9, #0
 800af44:	e66f      	b.n	800ac26 <_strtod_l+0x436>
 800af46:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 800af4a:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 800af4e:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 800af52:	35e2      	adds	r5, #226	@ 0xe2
 800af54:	fa01 f305 	lsl.w	r3, r1, r5
 800af58:	9310      	str	r3, [sp, #64]	@ 0x40
 800af5a:	9113      	str	r1, [sp, #76]	@ 0x4c
 800af5c:	e7ba      	b.n	800aed4 <_strtod_l+0x6e4>
 800af5e:	2300      	movs	r3, #0
 800af60:	9310      	str	r3, [sp, #64]	@ 0x40
 800af62:	2301      	movs	r3, #1
 800af64:	9313      	str	r3, [sp, #76]	@ 0x4c
 800af66:	e7b5      	b.n	800aed4 <_strtod_l+0x6e4>
 800af68:	462a      	mov	r2, r5
 800af6a:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800af6c:	9805      	ldr	r0, [sp, #20]
 800af6e:	f002 fd4f 	bl	800da10 <__lshift>
 800af72:	901a      	str	r0, [sp, #104]	@ 0x68
 800af74:	2800      	cmp	r0, #0
 800af76:	d1d9      	bne.n	800af2c <_strtod_l+0x73c>
 800af78:	e655      	b.n	800ac26 <_strtod_l+0x436>
 800af7a:	2e00      	cmp	r6, #0
 800af7c:	dd07      	ble.n	800af8e <_strtod_l+0x79e>
 800af7e:	4649      	mov	r1, r9
 800af80:	4632      	mov	r2, r6
 800af82:	9805      	ldr	r0, [sp, #20]
 800af84:	f002 fd44 	bl	800da10 <__lshift>
 800af88:	4681      	mov	r9, r0
 800af8a:	2800      	cmp	r0, #0
 800af8c:	d0d8      	beq.n	800af40 <_strtod_l+0x750>
 800af8e:	2f00      	cmp	r7, #0
 800af90:	dd08      	ble.n	800afa4 <_strtod_l+0x7b4>
 800af92:	4641      	mov	r1, r8
 800af94:	463a      	mov	r2, r7
 800af96:	9805      	ldr	r0, [sp, #20]
 800af98:	f002 fd3a 	bl	800da10 <__lshift>
 800af9c:	4680      	mov	r8, r0
 800af9e:	2800      	cmp	r0, #0
 800afa0:	f43f ae41 	beq.w	800ac26 <_strtod_l+0x436>
 800afa4:	464a      	mov	r2, r9
 800afa6:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800afa8:	9805      	ldr	r0, [sp, #20]
 800afaa:	f002 fdb9 	bl	800db20 <__mdiff>
 800afae:	4604      	mov	r4, r0
 800afb0:	2800      	cmp	r0, #0
 800afb2:	f43f ae38 	beq.w	800ac26 <_strtod_l+0x436>
 800afb6:	68c3      	ldr	r3, [r0, #12]
 800afb8:	4641      	mov	r1, r8
 800afba:	930f      	str	r3, [sp, #60]	@ 0x3c
 800afbc:	2300      	movs	r3, #0
 800afbe:	60c3      	str	r3, [r0, #12]
 800afc0:	f002 fd92 	bl	800dae8 <__mcmp>
 800afc4:	2800      	cmp	r0, #0
 800afc6:	da45      	bge.n	800b054 <_strtod_l+0x864>
 800afc8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800afca:	ea53 030a 	orrs.w	r3, r3, sl
 800afce:	d16b      	bne.n	800b0a8 <_strtod_l+0x8b8>
 800afd0:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800afd4:	2b00      	cmp	r3, #0
 800afd6:	d167      	bne.n	800b0a8 <_strtod_l+0x8b8>
 800afd8:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800afdc:	0d1b      	lsrs	r3, r3, #20
 800afde:	051b      	lsls	r3, r3, #20
 800afe0:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800afe4:	d960      	bls.n	800b0a8 <_strtod_l+0x8b8>
 800afe6:	6963      	ldr	r3, [r4, #20]
 800afe8:	b913      	cbnz	r3, 800aff0 <_strtod_l+0x800>
 800afea:	6923      	ldr	r3, [r4, #16]
 800afec:	2b01      	cmp	r3, #1
 800afee:	dd5b      	ble.n	800b0a8 <_strtod_l+0x8b8>
 800aff0:	4621      	mov	r1, r4
 800aff2:	2201      	movs	r2, #1
 800aff4:	9805      	ldr	r0, [sp, #20]
 800aff6:	f002 fd0b 	bl	800da10 <__lshift>
 800affa:	4641      	mov	r1, r8
 800affc:	4604      	mov	r4, r0
 800affe:	f002 fd73 	bl	800dae8 <__mcmp>
 800b002:	2800      	cmp	r0, #0
 800b004:	dd50      	ble.n	800b0a8 <_strtod_l+0x8b8>
 800b006:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800b00a:	9a08      	ldr	r2, [sp, #32]
 800b00c:	0d1b      	lsrs	r3, r3, #20
 800b00e:	051b      	lsls	r3, r3, #20
 800b010:	2a00      	cmp	r2, #0
 800b012:	d06a      	beq.n	800b0ea <_strtod_l+0x8fa>
 800b014:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800b018:	d867      	bhi.n	800b0ea <_strtod_l+0x8fa>
 800b01a:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 800b01e:	f67f ae98 	bls.w	800ad52 <_strtod_l+0x562>
 800b022:	4650      	mov	r0, sl
 800b024:	4659      	mov	r1, fp
 800b026:	4b09      	ldr	r3, [pc, #36]	@ (800b04c <_strtod_l+0x85c>)
 800b028:	2200      	movs	r2, #0
 800b02a:	f7f5 fb09 	bl	8000640 <__aeabi_dmul>
 800b02e:	4b08      	ldr	r3, [pc, #32]	@ (800b050 <_strtod_l+0x860>)
 800b030:	4682      	mov	sl, r0
 800b032:	400b      	ands	r3, r1
 800b034:	468b      	mov	fp, r1
 800b036:	2b00      	cmp	r3, #0
 800b038:	f47f ae00 	bne.w	800ac3c <_strtod_l+0x44c>
 800b03c:	2322      	movs	r3, #34	@ 0x22
 800b03e:	9a05      	ldr	r2, [sp, #20]
 800b040:	6013      	str	r3, [r2, #0]
 800b042:	e5fb      	b.n	800ac3c <_strtod_l+0x44c>
 800b044:	0800ec48 	.word	0x0800ec48
 800b048:	fffffc02 	.word	0xfffffc02
 800b04c:	39500000 	.word	0x39500000
 800b050:	7ff00000 	.word	0x7ff00000
 800b054:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800b058:	d165      	bne.n	800b126 <_strtod_l+0x936>
 800b05a:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800b05c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800b060:	b35a      	cbz	r2, 800b0ba <_strtod_l+0x8ca>
 800b062:	4a99      	ldr	r2, [pc, #612]	@ (800b2c8 <_strtod_l+0xad8>)
 800b064:	4293      	cmp	r3, r2
 800b066:	d12b      	bne.n	800b0c0 <_strtod_l+0x8d0>
 800b068:	9b08      	ldr	r3, [sp, #32]
 800b06a:	4651      	mov	r1, sl
 800b06c:	b303      	cbz	r3, 800b0b0 <_strtod_l+0x8c0>
 800b06e:	465a      	mov	r2, fp
 800b070:	4b96      	ldr	r3, [pc, #600]	@ (800b2cc <_strtod_l+0xadc>)
 800b072:	4013      	ands	r3, r2
 800b074:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 800b078:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800b07c:	d81b      	bhi.n	800b0b6 <_strtod_l+0x8c6>
 800b07e:	0d1b      	lsrs	r3, r3, #20
 800b080:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800b084:	fa02 f303 	lsl.w	r3, r2, r3
 800b088:	4299      	cmp	r1, r3
 800b08a:	d119      	bne.n	800b0c0 <_strtod_l+0x8d0>
 800b08c:	4b90      	ldr	r3, [pc, #576]	@ (800b2d0 <_strtod_l+0xae0>)
 800b08e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800b090:	429a      	cmp	r2, r3
 800b092:	d102      	bne.n	800b09a <_strtod_l+0x8aa>
 800b094:	3101      	adds	r1, #1
 800b096:	f43f adc6 	beq.w	800ac26 <_strtod_l+0x436>
 800b09a:	f04f 0a00 	mov.w	sl, #0
 800b09e:	4b8b      	ldr	r3, [pc, #556]	@ (800b2cc <_strtod_l+0xadc>)
 800b0a0:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800b0a2:	401a      	ands	r2, r3
 800b0a4:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 800b0a8:	9b08      	ldr	r3, [sp, #32]
 800b0aa:	2b00      	cmp	r3, #0
 800b0ac:	d1b9      	bne.n	800b022 <_strtod_l+0x832>
 800b0ae:	e5c5      	b.n	800ac3c <_strtod_l+0x44c>
 800b0b0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800b0b4:	e7e8      	b.n	800b088 <_strtod_l+0x898>
 800b0b6:	4613      	mov	r3, r2
 800b0b8:	e7e6      	b.n	800b088 <_strtod_l+0x898>
 800b0ba:	ea53 030a 	orrs.w	r3, r3, sl
 800b0be:	d0a2      	beq.n	800b006 <_strtod_l+0x816>
 800b0c0:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800b0c2:	b1db      	cbz	r3, 800b0fc <_strtod_l+0x90c>
 800b0c4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800b0c6:	4213      	tst	r3, r2
 800b0c8:	d0ee      	beq.n	800b0a8 <_strtod_l+0x8b8>
 800b0ca:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b0cc:	4650      	mov	r0, sl
 800b0ce:	4659      	mov	r1, fp
 800b0d0:	9a08      	ldr	r2, [sp, #32]
 800b0d2:	b1bb      	cbz	r3, 800b104 <_strtod_l+0x914>
 800b0d4:	f7ff fb6b 	bl	800a7ae <sulp>
 800b0d8:	4602      	mov	r2, r0
 800b0da:	460b      	mov	r3, r1
 800b0dc:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800b0e0:	f7f5 f8f8 	bl	80002d4 <__adddf3>
 800b0e4:	4682      	mov	sl, r0
 800b0e6:	468b      	mov	fp, r1
 800b0e8:	e7de      	b.n	800b0a8 <_strtod_l+0x8b8>
 800b0ea:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800b0ee:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800b0f2:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 800b0f6:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800b0fa:	e7d5      	b.n	800b0a8 <_strtod_l+0x8b8>
 800b0fc:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800b0fe:	ea13 0f0a 	tst.w	r3, sl
 800b102:	e7e1      	b.n	800b0c8 <_strtod_l+0x8d8>
 800b104:	f7ff fb53 	bl	800a7ae <sulp>
 800b108:	4602      	mov	r2, r0
 800b10a:	460b      	mov	r3, r1
 800b10c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800b110:	f7f5 f8de 	bl	80002d0 <__aeabi_dsub>
 800b114:	2200      	movs	r2, #0
 800b116:	2300      	movs	r3, #0
 800b118:	4682      	mov	sl, r0
 800b11a:	468b      	mov	fp, r1
 800b11c:	f7f5 fcf8 	bl	8000b10 <__aeabi_dcmpeq>
 800b120:	2800      	cmp	r0, #0
 800b122:	d0c1      	beq.n	800b0a8 <_strtod_l+0x8b8>
 800b124:	e615      	b.n	800ad52 <_strtod_l+0x562>
 800b126:	4641      	mov	r1, r8
 800b128:	4620      	mov	r0, r4
 800b12a:	f002 fe4d 	bl	800ddc8 <__ratio>
 800b12e:	2200      	movs	r2, #0
 800b130:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800b134:	4606      	mov	r6, r0
 800b136:	460f      	mov	r7, r1
 800b138:	f7f5 fcfe 	bl	8000b38 <__aeabi_dcmple>
 800b13c:	2800      	cmp	r0, #0
 800b13e:	d06d      	beq.n	800b21c <_strtod_l+0xa2c>
 800b140:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b142:	2b00      	cmp	r3, #0
 800b144:	d178      	bne.n	800b238 <_strtod_l+0xa48>
 800b146:	f1ba 0f00 	cmp.w	sl, #0
 800b14a:	d156      	bne.n	800b1fa <_strtod_l+0xa0a>
 800b14c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b14e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b152:	2b00      	cmp	r3, #0
 800b154:	d158      	bne.n	800b208 <_strtod_l+0xa18>
 800b156:	2200      	movs	r2, #0
 800b158:	4630      	mov	r0, r6
 800b15a:	4639      	mov	r1, r7
 800b15c:	4b5d      	ldr	r3, [pc, #372]	@ (800b2d4 <_strtod_l+0xae4>)
 800b15e:	f7f5 fce1 	bl	8000b24 <__aeabi_dcmplt>
 800b162:	2800      	cmp	r0, #0
 800b164:	d157      	bne.n	800b216 <_strtod_l+0xa26>
 800b166:	4630      	mov	r0, r6
 800b168:	4639      	mov	r1, r7
 800b16a:	2200      	movs	r2, #0
 800b16c:	4b5a      	ldr	r3, [pc, #360]	@ (800b2d8 <_strtod_l+0xae8>)
 800b16e:	f7f5 fa67 	bl	8000640 <__aeabi_dmul>
 800b172:	4606      	mov	r6, r0
 800b174:	460f      	mov	r7, r1
 800b176:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 800b17a:	9606      	str	r6, [sp, #24]
 800b17c:	9307      	str	r3, [sp, #28]
 800b17e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800b182:	4d52      	ldr	r5, [pc, #328]	@ (800b2cc <_strtod_l+0xadc>)
 800b184:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800b188:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b18a:	401d      	ands	r5, r3
 800b18c:	4b53      	ldr	r3, [pc, #332]	@ (800b2dc <_strtod_l+0xaec>)
 800b18e:	429d      	cmp	r5, r3
 800b190:	f040 80aa 	bne.w	800b2e8 <_strtod_l+0xaf8>
 800b194:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b196:	4650      	mov	r0, sl
 800b198:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 800b19c:	4659      	mov	r1, fp
 800b19e:	f002 fd53 	bl	800dc48 <__ulp>
 800b1a2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800b1a6:	f7f5 fa4b 	bl	8000640 <__aeabi_dmul>
 800b1aa:	4652      	mov	r2, sl
 800b1ac:	465b      	mov	r3, fp
 800b1ae:	f7f5 f891 	bl	80002d4 <__adddf3>
 800b1b2:	460b      	mov	r3, r1
 800b1b4:	4945      	ldr	r1, [pc, #276]	@ (800b2cc <_strtod_l+0xadc>)
 800b1b6:	4a4a      	ldr	r2, [pc, #296]	@ (800b2e0 <_strtod_l+0xaf0>)
 800b1b8:	4019      	ands	r1, r3
 800b1ba:	4291      	cmp	r1, r2
 800b1bc:	4682      	mov	sl, r0
 800b1be:	d942      	bls.n	800b246 <_strtod_l+0xa56>
 800b1c0:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800b1c2:	4b43      	ldr	r3, [pc, #268]	@ (800b2d0 <_strtod_l+0xae0>)
 800b1c4:	429a      	cmp	r2, r3
 800b1c6:	d103      	bne.n	800b1d0 <_strtod_l+0x9e0>
 800b1c8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800b1ca:	3301      	adds	r3, #1
 800b1cc:	f43f ad2b 	beq.w	800ac26 <_strtod_l+0x436>
 800b1d0:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 800b1d4:	f8df b0f8 	ldr.w	fp, [pc, #248]	@ 800b2d0 <_strtod_l+0xae0>
 800b1d8:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800b1da:	9805      	ldr	r0, [sp, #20]
 800b1dc:	f002 fa02 	bl	800d5e4 <_Bfree>
 800b1e0:	4649      	mov	r1, r9
 800b1e2:	9805      	ldr	r0, [sp, #20]
 800b1e4:	f002 f9fe 	bl	800d5e4 <_Bfree>
 800b1e8:	4641      	mov	r1, r8
 800b1ea:	9805      	ldr	r0, [sp, #20]
 800b1ec:	f002 f9fa 	bl	800d5e4 <_Bfree>
 800b1f0:	4621      	mov	r1, r4
 800b1f2:	9805      	ldr	r0, [sp, #20]
 800b1f4:	f002 f9f6 	bl	800d5e4 <_Bfree>
 800b1f8:	e618      	b.n	800ae2c <_strtod_l+0x63c>
 800b1fa:	f1ba 0f01 	cmp.w	sl, #1
 800b1fe:	d103      	bne.n	800b208 <_strtod_l+0xa18>
 800b200:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b202:	2b00      	cmp	r3, #0
 800b204:	f43f ada5 	beq.w	800ad52 <_strtod_l+0x562>
 800b208:	2200      	movs	r2, #0
 800b20a:	4b36      	ldr	r3, [pc, #216]	@ (800b2e4 <_strtod_l+0xaf4>)
 800b20c:	2600      	movs	r6, #0
 800b20e:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800b212:	4f30      	ldr	r7, [pc, #192]	@ (800b2d4 <_strtod_l+0xae4>)
 800b214:	e7b3      	b.n	800b17e <_strtod_l+0x98e>
 800b216:	2600      	movs	r6, #0
 800b218:	4f2f      	ldr	r7, [pc, #188]	@ (800b2d8 <_strtod_l+0xae8>)
 800b21a:	e7ac      	b.n	800b176 <_strtod_l+0x986>
 800b21c:	4630      	mov	r0, r6
 800b21e:	4639      	mov	r1, r7
 800b220:	4b2d      	ldr	r3, [pc, #180]	@ (800b2d8 <_strtod_l+0xae8>)
 800b222:	2200      	movs	r2, #0
 800b224:	f7f5 fa0c 	bl	8000640 <__aeabi_dmul>
 800b228:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b22a:	4606      	mov	r6, r0
 800b22c:	460f      	mov	r7, r1
 800b22e:	2b00      	cmp	r3, #0
 800b230:	d0a1      	beq.n	800b176 <_strtod_l+0x986>
 800b232:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800b236:	e7a2      	b.n	800b17e <_strtod_l+0x98e>
 800b238:	2200      	movs	r2, #0
 800b23a:	4b26      	ldr	r3, [pc, #152]	@ (800b2d4 <_strtod_l+0xae4>)
 800b23c:	4616      	mov	r6, r2
 800b23e:	461f      	mov	r7, r3
 800b240:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800b244:	e79b      	b.n	800b17e <_strtod_l+0x98e>
 800b246:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 800b24a:	9b08      	ldr	r3, [sp, #32]
 800b24c:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800b250:	2b00      	cmp	r3, #0
 800b252:	d1c1      	bne.n	800b1d8 <_strtod_l+0x9e8>
 800b254:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800b258:	0d1b      	lsrs	r3, r3, #20
 800b25a:	051b      	lsls	r3, r3, #20
 800b25c:	429d      	cmp	r5, r3
 800b25e:	d1bb      	bne.n	800b1d8 <_strtod_l+0x9e8>
 800b260:	4630      	mov	r0, r6
 800b262:	4639      	mov	r1, r7
 800b264:	f7f5 fe80 	bl	8000f68 <__aeabi_d2lz>
 800b268:	f7f5 f9bc 	bl	80005e4 <__aeabi_l2d>
 800b26c:	4602      	mov	r2, r0
 800b26e:	460b      	mov	r3, r1
 800b270:	4630      	mov	r0, r6
 800b272:	4639      	mov	r1, r7
 800b274:	f7f5 f82c 	bl	80002d0 <__aeabi_dsub>
 800b278:	460b      	mov	r3, r1
 800b27a:	4602      	mov	r2, r0
 800b27c:	f3cb 0613 	ubfx	r6, fp, #0, #20
 800b280:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800b284:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b286:	ea46 060a 	orr.w	r6, r6, sl
 800b28a:	431e      	orrs	r6, r3
 800b28c:	d069      	beq.n	800b362 <_strtod_l+0xb72>
 800b28e:	a30a      	add	r3, pc, #40	@ (adr r3, 800b2b8 <_strtod_l+0xac8>)
 800b290:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b294:	f7f5 fc46 	bl	8000b24 <__aeabi_dcmplt>
 800b298:	2800      	cmp	r0, #0
 800b29a:	f47f accf 	bne.w	800ac3c <_strtod_l+0x44c>
 800b29e:	a308      	add	r3, pc, #32	@ (adr r3, 800b2c0 <_strtod_l+0xad0>)
 800b2a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b2a4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800b2a8:	f7f5 fc5a 	bl	8000b60 <__aeabi_dcmpgt>
 800b2ac:	2800      	cmp	r0, #0
 800b2ae:	d093      	beq.n	800b1d8 <_strtod_l+0x9e8>
 800b2b0:	e4c4      	b.n	800ac3c <_strtod_l+0x44c>
 800b2b2:	bf00      	nop
 800b2b4:	f3af 8000 	nop.w
 800b2b8:	94a03595 	.word	0x94a03595
 800b2bc:	3fdfffff 	.word	0x3fdfffff
 800b2c0:	35afe535 	.word	0x35afe535
 800b2c4:	3fe00000 	.word	0x3fe00000
 800b2c8:	000fffff 	.word	0x000fffff
 800b2cc:	7ff00000 	.word	0x7ff00000
 800b2d0:	7fefffff 	.word	0x7fefffff
 800b2d4:	3ff00000 	.word	0x3ff00000
 800b2d8:	3fe00000 	.word	0x3fe00000
 800b2dc:	7fe00000 	.word	0x7fe00000
 800b2e0:	7c9fffff 	.word	0x7c9fffff
 800b2e4:	bff00000 	.word	0xbff00000
 800b2e8:	9b08      	ldr	r3, [sp, #32]
 800b2ea:	b323      	cbz	r3, 800b336 <_strtod_l+0xb46>
 800b2ec:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 800b2f0:	d821      	bhi.n	800b336 <_strtod_l+0xb46>
 800b2f2:	a327      	add	r3, pc, #156	@ (adr r3, 800b390 <_strtod_l+0xba0>)
 800b2f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b2f8:	4630      	mov	r0, r6
 800b2fa:	4639      	mov	r1, r7
 800b2fc:	f7f5 fc1c 	bl	8000b38 <__aeabi_dcmple>
 800b300:	b1a0      	cbz	r0, 800b32c <_strtod_l+0xb3c>
 800b302:	4639      	mov	r1, r7
 800b304:	4630      	mov	r0, r6
 800b306:	f7f5 fc73 	bl	8000bf0 <__aeabi_d2uiz>
 800b30a:	2801      	cmp	r0, #1
 800b30c:	bf38      	it	cc
 800b30e:	2001      	movcc	r0, #1
 800b310:	f7f5 f91c 	bl	800054c <__aeabi_ui2d>
 800b314:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b316:	4606      	mov	r6, r0
 800b318:	460f      	mov	r7, r1
 800b31a:	b9fb      	cbnz	r3, 800b35c <_strtod_l+0xb6c>
 800b31c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800b320:	9014      	str	r0, [sp, #80]	@ 0x50
 800b322:	9315      	str	r3, [sp, #84]	@ 0x54
 800b324:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 800b328:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800b32c:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800b32e:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 800b332:	1b5b      	subs	r3, r3, r5
 800b334:	9311      	str	r3, [sp, #68]	@ 0x44
 800b336:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800b33a:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 800b33e:	f002 fc83 	bl	800dc48 <__ulp>
 800b342:	4602      	mov	r2, r0
 800b344:	460b      	mov	r3, r1
 800b346:	4650      	mov	r0, sl
 800b348:	4659      	mov	r1, fp
 800b34a:	f7f5 f979 	bl	8000640 <__aeabi_dmul>
 800b34e:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800b352:	f7f4 ffbf 	bl	80002d4 <__adddf3>
 800b356:	4682      	mov	sl, r0
 800b358:	468b      	mov	fp, r1
 800b35a:	e776      	b.n	800b24a <_strtod_l+0xa5a>
 800b35c:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 800b360:	e7e0      	b.n	800b324 <_strtod_l+0xb34>
 800b362:	a30d      	add	r3, pc, #52	@ (adr r3, 800b398 <_strtod_l+0xba8>)
 800b364:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b368:	f7f5 fbdc 	bl	8000b24 <__aeabi_dcmplt>
 800b36c:	e79e      	b.n	800b2ac <_strtod_l+0xabc>
 800b36e:	2300      	movs	r3, #0
 800b370:	930b      	str	r3, [sp, #44]	@ 0x2c
 800b372:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800b374:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 800b376:	6013      	str	r3, [r2, #0]
 800b378:	f7ff ba77 	b.w	800a86a <_strtod_l+0x7a>
 800b37c:	2a65      	cmp	r2, #101	@ 0x65
 800b37e:	f43f ab6e 	beq.w	800aa5e <_strtod_l+0x26e>
 800b382:	2a45      	cmp	r2, #69	@ 0x45
 800b384:	f43f ab6b 	beq.w	800aa5e <_strtod_l+0x26e>
 800b388:	2301      	movs	r3, #1
 800b38a:	f7ff bba6 	b.w	800aada <_strtod_l+0x2ea>
 800b38e:	bf00      	nop
 800b390:	ffc00000 	.word	0xffc00000
 800b394:	41dfffff 	.word	0x41dfffff
 800b398:	94a03595 	.word	0x94a03595
 800b39c:	3fcfffff 	.word	0x3fcfffff

0800b3a0 <strtod>:
 800b3a0:	460a      	mov	r2, r1
 800b3a2:	4601      	mov	r1, r0
 800b3a4:	4802      	ldr	r0, [pc, #8]	@ (800b3b0 <strtod+0x10>)
 800b3a6:	4b03      	ldr	r3, [pc, #12]	@ (800b3b4 <strtod+0x14>)
 800b3a8:	6800      	ldr	r0, [r0, #0]
 800b3aa:	f7ff ba21 	b.w	800a7f0 <_strtod_l>
 800b3ae:	bf00      	nop
 800b3b0:	20000308 	.word	0x20000308
 800b3b4:	2000019c 	.word	0x2000019c

0800b3b8 <atoll>:
 800b3b8:	220a      	movs	r2, #10
 800b3ba:	2100      	movs	r1, #0
 800b3bc:	f002 be14 	b.w	800dfe8 <strtoll>

0800b3c0 <__cvt>:
 800b3c0:	2b00      	cmp	r3, #0
 800b3c2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b3c6:	461d      	mov	r5, r3
 800b3c8:	bfbb      	ittet	lt
 800b3ca:	f103 4300 	addlt.w	r3, r3, #2147483648	@ 0x80000000
 800b3ce:	461d      	movlt	r5, r3
 800b3d0:	2300      	movge	r3, #0
 800b3d2:	232d      	movlt	r3, #45	@ 0x2d
 800b3d4:	b088      	sub	sp, #32
 800b3d6:	4614      	mov	r4, r2
 800b3d8:	bfb8      	it	lt
 800b3da:	4614      	movlt	r4, r2
 800b3dc:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800b3de:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 800b3e0:	7013      	strb	r3, [r2, #0]
 800b3e2:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800b3e4:	f8dd a04c 	ldr.w	sl, [sp, #76]	@ 0x4c
 800b3e8:	f023 0820 	bic.w	r8, r3, #32
 800b3ec:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800b3f0:	d005      	beq.n	800b3fe <__cvt+0x3e>
 800b3f2:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800b3f6:	d100      	bne.n	800b3fa <__cvt+0x3a>
 800b3f8:	3601      	adds	r6, #1
 800b3fa:	2302      	movs	r3, #2
 800b3fc:	e000      	b.n	800b400 <__cvt+0x40>
 800b3fe:	2303      	movs	r3, #3
 800b400:	aa07      	add	r2, sp, #28
 800b402:	9204      	str	r2, [sp, #16]
 800b404:	aa06      	add	r2, sp, #24
 800b406:	e9cd a202 	strd	sl, r2, [sp, #8]
 800b40a:	e9cd 3600 	strd	r3, r6, [sp]
 800b40e:	4622      	mov	r2, r4
 800b410:	462b      	mov	r3, r5
 800b412:	f000 fe95 	bl	800c140 <_dtoa_r>
 800b416:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800b41a:	4607      	mov	r7, r0
 800b41c:	d119      	bne.n	800b452 <__cvt+0x92>
 800b41e:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800b420:	07db      	lsls	r3, r3, #31
 800b422:	d50e      	bpl.n	800b442 <__cvt+0x82>
 800b424:	eb00 0906 	add.w	r9, r0, r6
 800b428:	2200      	movs	r2, #0
 800b42a:	2300      	movs	r3, #0
 800b42c:	4620      	mov	r0, r4
 800b42e:	4629      	mov	r1, r5
 800b430:	f7f5 fb6e 	bl	8000b10 <__aeabi_dcmpeq>
 800b434:	b108      	cbz	r0, 800b43a <__cvt+0x7a>
 800b436:	f8cd 901c 	str.w	r9, [sp, #28]
 800b43a:	2230      	movs	r2, #48	@ 0x30
 800b43c:	9b07      	ldr	r3, [sp, #28]
 800b43e:	454b      	cmp	r3, r9
 800b440:	d31e      	bcc.n	800b480 <__cvt+0xc0>
 800b442:	4638      	mov	r0, r7
 800b444:	9b07      	ldr	r3, [sp, #28]
 800b446:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 800b448:	1bdb      	subs	r3, r3, r7
 800b44a:	6013      	str	r3, [r2, #0]
 800b44c:	b008      	add	sp, #32
 800b44e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b452:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800b456:	eb00 0906 	add.w	r9, r0, r6
 800b45a:	d1e5      	bne.n	800b428 <__cvt+0x68>
 800b45c:	7803      	ldrb	r3, [r0, #0]
 800b45e:	2b30      	cmp	r3, #48	@ 0x30
 800b460:	d10a      	bne.n	800b478 <__cvt+0xb8>
 800b462:	2200      	movs	r2, #0
 800b464:	2300      	movs	r3, #0
 800b466:	4620      	mov	r0, r4
 800b468:	4629      	mov	r1, r5
 800b46a:	f7f5 fb51 	bl	8000b10 <__aeabi_dcmpeq>
 800b46e:	b918      	cbnz	r0, 800b478 <__cvt+0xb8>
 800b470:	f1c6 0601 	rsb	r6, r6, #1
 800b474:	f8ca 6000 	str.w	r6, [sl]
 800b478:	f8da 3000 	ldr.w	r3, [sl]
 800b47c:	4499      	add	r9, r3
 800b47e:	e7d3      	b.n	800b428 <__cvt+0x68>
 800b480:	1c59      	adds	r1, r3, #1
 800b482:	9107      	str	r1, [sp, #28]
 800b484:	701a      	strb	r2, [r3, #0]
 800b486:	e7d9      	b.n	800b43c <__cvt+0x7c>

0800b488 <__exponent>:
 800b488:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b48a:	2900      	cmp	r1, #0
 800b48c:	bfb6      	itet	lt
 800b48e:	232d      	movlt	r3, #45	@ 0x2d
 800b490:	232b      	movge	r3, #43	@ 0x2b
 800b492:	4249      	neglt	r1, r1
 800b494:	2909      	cmp	r1, #9
 800b496:	7002      	strb	r2, [r0, #0]
 800b498:	7043      	strb	r3, [r0, #1]
 800b49a:	dd29      	ble.n	800b4f0 <__exponent+0x68>
 800b49c:	f10d 0307 	add.w	r3, sp, #7
 800b4a0:	461d      	mov	r5, r3
 800b4a2:	270a      	movs	r7, #10
 800b4a4:	fbb1 f6f7 	udiv	r6, r1, r7
 800b4a8:	461a      	mov	r2, r3
 800b4aa:	fb07 1416 	mls	r4, r7, r6, r1
 800b4ae:	3430      	adds	r4, #48	@ 0x30
 800b4b0:	f802 4c01 	strb.w	r4, [r2, #-1]
 800b4b4:	460c      	mov	r4, r1
 800b4b6:	2c63      	cmp	r4, #99	@ 0x63
 800b4b8:	4631      	mov	r1, r6
 800b4ba:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 800b4be:	dcf1      	bgt.n	800b4a4 <__exponent+0x1c>
 800b4c0:	3130      	adds	r1, #48	@ 0x30
 800b4c2:	1e94      	subs	r4, r2, #2
 800b4c4:	f803 1c01 	strb.w	r1, [r3, #-1]
 800b4c8:	4623      	mov	r3, r4
 800b4ca:	1c41      	adds	r1, r0, #1
 800b4cc:	42ab      	cmp	r3, r5
 800b4ce:	d30a      	bcc.n	800b4e6 <__exponent+0x5e>
 800b4d0:	f10d 0309 	add.w	r3, sp, #9
 800b4d4:	1a9b      	subs	r3, r3, r2
 800b4d6:	42ac      	cmp	r4, r5
 800b4d8:	bf88      	it	hi
 800b4da:	2300      	movhi	r3, #0
 800b4dc:	3302      	adds	r3, #2
 800b4de:	4403      	add	r3, r0
 800b4e0:	1a18      	subs	r0, r3, r0
 800b4e2:	b003      	add	sp, #12
 800b4e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b4e6:	f813 6b01 	ldrb.w	r6, [r3], #1
 800b4ea:	f801 6f01 	strb.w	r6, [r1, #1]!
 800b4ee:	e7ed      	b.n	800b4cc <__exponent+0x44>
 800b4f0:	2330      	movs	r3, #48	@ 0x30
 800b4f2:	3130      	adds	r1, #48	@ 0x30
 800b4f4:	7083      	strb	r3, [r0, #2]
 800b4f6:	70c1      	strb	r1, [r0, #3]
 800b4f8:	1d03      	adds	r3, r0, #4
 800b4fa:	e7f1      	b.n	800b4e0 <__exponent+0x58>

0800b4fc <_printf_float>:
 800b4fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b500:	b091      	sub	sp, #68	@ 0x44
 800b502:	460c      	mov	r4, r1
 800b504:	f8dd 8068 	ldr.w	r8, [sp, #104]	@ 0x68
 800b508:	4616      	mov	r6, r2
 800b50a:	461f      	mov	r7, r3
 800b50c:	4605      	mov	r5, r0
 800b50e:	f000 fcf3 	bl	800bef8 <_localeconv_r>
 800b512:	6803      	ldr	r3, [r0, #0]
 800b514:	4618      	mov	r0, r3
 800b516:	9308      	str	r3, [sp, #32]
 800b518:	f7f4 fe1a 	bl	8000150 <strlen>
 800b51c:	2300      	movs	r3, #0
 800b51e:	930e      	str	r3, [sp, #56]	@ 0x38
 800b520:	f8d8 3000 	ldr.w	r3, [r8]
 800b524:	9009      	str	r0, [sp, #36]	@ 0x24
 800b526:	3307      	adds	r3, #7
 800b528:	f023 0307 	bic.w	r3, r3, #7
 800b52c:	f103 0208 	add.w	r2, r3, #8
 800b530:	f894 a018 	ldrb.w	sl, [r4, #24]
 800b534:	f8d4 b000 	ldr.w	fp, [r4]
 800b538:	f8c8 2000 	str.w	r2, [r8]
 800b53c:	e9d3 8900 	ldrd	r8, r9, [r3]
 800b540:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800b544:	930b      	str	r3, [sp, #44]	@ 0x2c
 800b546:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 800b54a:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800b54e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800b552:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800b556:	4b9c      	ldr	r3, [pc, #624]	@ (800b7c8 <_printf_float+0x2cc>)
 800b558:	f7f5 fb0c 	bl	8000b74 <__aeabi_dcmpun>
 800b55c:	bb70      	cbnz	r0, 800b5bc <_printf_float+0xc0>
 800b55e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800b562:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800b566:	4b98      	ldr	r3, [pc, #608]	@ (800b7c8 <_printf_float+0x2cc>)
 800b568:	f7f5 fae6 	bl	8000b38 <__aeabi_dcmple>
 800b56c:	bb30      	cbnz	r0, 800b5bc <_printf_float+0xc0>
 800b56e:	2200      	movs	r2, #0
 800b570:	2300      	movs	r3, #0
 800b572:	4640      	mov	r0, r8
 800b574:	4649      	mov	r1, r9
 800b576:	f7f5 fad5 	bl	8000b24 <__aeabi_dcmplt>
 800b57a:	b110      	cbz	r0, 800b582 <_printf_float+0x86>
 800b57c:	232d      	movs	r3, #45	@ 0x2d
 800b57e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b582:	4a92      	ldr	r2, [pc, #584]	@ (800b7cc <_printf_float+0x2d0>)
 800b584:	4b92      	ldr	r3, [pc, #584]	@ (800b7d0 <_printf_float+0x2d4>)
 800b586:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800b58a:	bf94      	ite	ls
 800b58c:	4690      	movls	r8, r2
 800b58e:	4698      	movhi	r8, r3
 800b590:	2303      	movs	r3, #3
 800b592:	f04f 0900 	mov.w	r9, #0
 800b596:	6123      	str	r3, [r4, #16]
 800b598:	f02b 0304 	bic.w	r3, fp, #4
 800b59c:	6023      	str	r3, [r4, #0]
 800b59e:	4633      	mov	r3, r6
 800b5a0:	4621      	mov	r1, r4
 800b5a2:	4628      	mov	r0, r5
 800b5a4:	9700      	str	r7, [sp, #0]
 800b5a6:	aa0f      	add	r2, sp, #60	@ 0x3c
 800b5a8:	f000 f9d4 	bl	800b954 <_printf_common>
 800b5ac:	3001      	adds	r0, #1
 800b5ae:	f040 8090 	bne.w	800b6d2 <_printf_float+0x1d6>
 800b5b2:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800b5b6:	b011      	add	sp, #68	@ 0x44
 800b5b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b5bc:	4642      	mov	r2, r8
 800b5be:	464b      	mov	r3, r9
 800b5c0:	4640      	mov	r0, r8
 800b5c2:	4649      	mov	r1, r9
 800b5c4:	f7f5 fad6 	bl	8000b74 <__aeabi_dcmpun>
 800b5c8:	b148      	cbz	r0, 800b5de <_printf_float+0xe2>
 800b5ca:	464b      	mov	r3, r9
 800b5cc:	2b00      	cmp	r3, #0
 800b5ce:	bfb8      	it	lt
 800b5d0:	232d      	movlt	r3, #45	@ 0x2d
 800b5d2:	4a80      	ldr	r2, [pc, #512]	@ (800b7d4 <_printf_float+0x2d8>)
 800b5d4:	bfb8      	it	lt
 800b5d6:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800b5da:	4b7f      	ldr	r3, [pc, #508]	@ (800b7d8 <_printf_float+0x2dc>)
 800b5dc:	e7d3      	b.n	800b586 <_printf_float+0x8a>
 800b5de:	6863      	ldr	r3, [r4, #4]
 800b5e0:	f00a 01df 	and.w	r1, sl, #223	@ 0xdf
 800b5e4:	1c5a      	adds	r2, r3, #1
 800b5e6:	d13f      	bne.n	800b668 <_printf_float+0x16c>
 800b5e8:	2306      	movs	r3, #6
 800b5ea:	6063      	str	r3, [r4, #4]
 800b5ec:	2200      	movs	r2, #0
 800b5ee:	f44b 6380 	orr.w	r3, fp, #1024	@ 0x400
 800b5f2:	6023      	str	r3, [r4, #0]
 800b5f4:	9206      	str	r2, [sp, #24]
 800b5f6:	aa0e      	add	r2, sp, #56	@ 0x38
 800b5f8:	e9cd a204 	strd	sl, r2, [sp, #16]
 800b5fc:	aa0d      	add	r2, sp, #52	@ 0x34
 800b5fe:	9203      	str	r2, [sp, #12]
 800b600:	f10d 0233 	add.w	r2, sp, #51	@ 0x33
 800b604:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800b608:	6863      	ldr	r3, [r4, #4]
 800b60a:	4642      	mov	r2, r8
 800b60c:	9300      	str	r3, [sp, #0]
 800b60e:	4628      	mov	r0, r5
 800b610:	464b      	mov	r3, r9
 800b612:	910a      	str	r1, [sp, #40]	@ 0x28
 800b614:	f7ff fed4 	bl	800b3c0 <__cvt>
 800b618:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800b61a:	4680      	mov	r8, r0
 800b61c:	2947      	cmp	r1, #71	@ 0x47
 800b61e:	990d      	ldr	r1, [sp, #52]	@ 0x34
 800b620:	d128      	bne.n	800b674 <_printf_float+0x178>
 800b622:	1cc8      	adds	r0, r1, #3
 800b624:	db02      	blt.n	800b62c <_printf_float+0x130>
 800b626:	6863      	ldr	r3, [r4, #4]
 800b628:	4299      	cmp	r1, r3
 800b62a:	dd40      	ble.n	800b6ae <_printf_float+0x1b2>
 800b62c:	f1aa 0a02 	sub.w	sl, sl, #2
 800b630:	fa5f fa8a 	uxtb.w	sl, sl
 800b634:	4652      	mov	r2, sl
 800b636:	3901      	subs	r1, #1
 800b638:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800b63c:	910d      	str	r1, [sp, #52]	@ 0x34
 800b63e:	f7ff ff23 	bl	800b488 <__exponent>
 800b642:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800b644:	4681      	mov	r9, r0
 800b646:	1813      	adds	r3, r2, r0
 800b648:	2a01      	cmp	r2, #1
 800b64a:	6123      	str	r3, [r4, #16]
 800b64c:	dc02      	bgt.n	800b654 <_printf_float+0x158>
 800b64e:	6822      	ldr	r2, [r4, #0]
 800b650:	07d2      	lsls	r2, r2, #31
 800b652:	d501      	bpl.n	800b658 <_printf_float+0x15c>
 800b654:	3301      	adds	r3, #1
 800b656:	6123      	str	r3, [r4, #16]
 800b658:	f89d 3033 	ldrb.w	r3, [sp, #51]	@ 0x33
 800b65c:	2b00      	cmp	r3, #0
 800b65e:	d09e      	beq.n	800b59e <_printf_float+0xa2>
 800b660:	232d      	movs	r3, #45	@ 0x2d
 800b662:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b666:	e79a      	b.n	800b59e <_printf_float+0xa2>
 800b668:	2947      	cmp	r1, #71	@ 0x47
 800b66a:	d1bf      	bne.n	800b5ec <_printf_float+0xf0>
 800b66c:	2b00      	cmp	r3, #0
 800b66e:	d1bd      	bne.n	800b5ec <_printf_float+0xf0>
 800b670:	2301      	movs	r3, #1
 800b672:	e7ba      	b.n	800b5ea <_printf_float+0xee>
 800b674:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800b678:	d9dc      	bls.n	800b634 <_printf_float+0x138>
 800b67a:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800b67e:	d118      	bne.n	800b6b2 <_printf_float+0x1b6>
 800b680:	2900      	cmp	r1, #0
 800b682:	6863      	ldr	r3, [r4, #4]
 800b684:	dd0b      	ble.n	800b69e <_printf_float+0x1a2>
 800b686:	6121      	str	r1, [r4, #16]
 800b688:	b913      	cbnz	r3, 800b690 <_printf_float+0x194>
 800b68a:	6822      	ldr	r2, [r4, #0]
 800b68c:	07d0      	lsls	r0, r2, #31
 800b68e:	d502      	bpl.n	800b696 <_printf_float+0x19a>
 800b690:	3301      	adds	r3, #1
 800b692:	440b      	add	r3, r1
 800b694:	6123      	str	r3, [r4, #16]
 800b696:	f04f 0900 	mov.w	r9, #0
 800b69a:	65a1      	str	r1, [r4, #88]	@ 0x58
 800b69c:	e7dc      	b.n	800b658 <_printf_float+0x15c>
 800b69e:	b913      	cbnz	r3, 800b6a6 <_printf_float+0x1aa>
 800b6a0:	6822      	ldr	r2, [r4, #0]
 800b6a2:	07d2      	lsls	r2, r2, #31
 800b6a4:	d501      	bpl.n	800b6aa <_printf_float+0x1ae>
 800b6a6:	3302      	adds	r3, #2
 800b6a8:	e7f4      	b.n	800b694 <_printf_float+0x198>
 800b6aa:	2301      	movs	r3, #1
 800b6ac:	e7f2      	b.n	800b694 <_printf_float+0x198>
 800b6ae:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800b6b2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b6b4:	4299      	cmp	r1, r3
 800b6b6:	db05      	blt.n	800b6c4 <_printf_float+0x1c8>
 800b6b8:	6823      	ldr	r3, [r4, #0]
 800b6ba:	6121      	str	r1, [r4, #16]
 800b6bc:	07d8      	lsls	r0, r3, #31
 800b6be:	d5ea      	bpl.n	800b696 <_printf_float+0x19a>
 800b6c0:	1c4b      	adds	r3, r1, #1
 800b6c2:	e7e7      	b.n	800b694 <_printf_float+0x198>
 800b6c4:	2900      	cmp	r1, #0
 800b6c6:	bfcc      	ite	gt
 800b6c8:	2201      	movgt	r2, #1
 800b6ca:	f1c1 0202 	rsble	r2, r1, #2
 800b6ce:	4413      	add	r3, r2
 800b6d0:	e7e0      	b.n	800b694 <_printf_float+0x198>
 800b6d2:	6823      	ldr	r3, [r4, #0]
 800b6d4:	055a      	lsls	r2, r3, #21
 800b6d6:	d407      	bmi.n	800b6e8 <_printf_float+0x1ec>
 800b6d8:	6923      	ldr	r3, [r4, #16]
 800b6da:	4642      	mov	r2, r8
 800b6dc:	4631      	mov	r1, r6
 800b6de:	4628      	mov	r0, r5
 800b6e0:	47b8      	blx	r7
 800b6e2:	3001      	adds	r0, #1
 800b6e4:	d12b      	bne.n	800b73e <_printf_float+0x242>
 800b6e6:	e764      	b.n	800b5b2 <_printf_float+0xb6>
 800b6e8:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800b6ec:	f240 80dc 	bls.w	800b8a8 <_printf_float+0x3ac>
 800b6f0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800b6f4:	2200      	movs	r2, #0
 800b6f6:	2300      	movs	r3, #0
 800b6f8:	f7f5 fa0a 	bl	8000b10 <__aeabi_dcmpeq>
 800b6fc:	2800      	cmp	r0, #0
 800b6fe:	d033      	beq.n	800b768 <_printf_float+0x26c>
 800b700:	2301      	movs	r3, #1
 800b702:	4631      	mov	r1, r6
 800b704:	4628      	mov	r0, r5
 800b706:	4a35      	ldr	r2, [pc, #212]	@ (800b7dc <_printf_float+0x2e0>)
 800b708:	47b8      	blx	r7
 800b70a:	3001      	adds	r0, #1
 800b70c:	f43f af51 	beq.w	800b5b2 <_printf_float+0xb6>
 800b710:	e9dd 380d 	ldrd	r3, r8, [sp, #52]	@ 0x34
 800b714:	4543      	cmp	r3, r8
 800b716:	db02      	blt.n	800b71e <_printf_float+0x222>
 800b718:	6823      	ldr	r3, [r4, #0]
 800b71a:	07d8      	lsls	r0, r3, #31
 800b71c:	d50f      	bpl.n	800b73e <_printf_float+0x242>
 800b71e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800b722:	4631      	mov	r1, r6
 800b724:	4628      	mov	r0, r5
 800b726:	47b8      	blx	r7
 800b728:	3001      	adds	r0, #1
 800b72a:	f43f af42 	beq.w	800b5b2 <_printf_float+0xb6>
 800b72e:	f04f 0900 	mov.w	r9, #0
 800b732:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 800b736:	f104 0a1a 	add.w	sl, r4, #26
 800b73a:	45c8      	cmp	r8, r9
 800b73c:	dc09      	bgt.n	800b752 <_printf_float+0x256>
 800b73e:	6823      	ldr	r3, [r4, #0]
 800b740:	079b      	lsls	r3, r3, #30
 800b742:	f100 8102 	bmi.w	800b94a <_printf_float+0x44e>
 800b746:	68e0      	ldr	r0, [r4, #12]
 800b748:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b74a:	4298      	cmp	r0, r3
 800b74c:	bfb8      	it	lt
 800b74e:	4618      	movlt	r0, r3
 800b750:	e731      	b.n	800b5b6 <_printf_float+0xba>
 800b752:	2301      	movs	r3, #1
 800b754:	4652      	mov	r2, sl
 800b756:	4631      	mov	r1, r6
 800b758:	4628      	mov	r0, r5
 800b75a:	47b8      	blx	r7
 800b75c:	3001      	adds	r0, #1
 800b75e:	f43f af28 	beq.w	800b5b2 <_printf_float+0xb6>
 800b762:	f109 0901 	add.w	r9, r9, #1
 800b766:	e7e8      	b.n	800b73a <_printf_float+0x23e>
 800b768:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800b76a:	2b00      	cmp	r3, #0
 800b76c:	dc38      	bgt.n	800b7e0 <_printf_float+0x2e4>
 800b76e:	2301      	movs	r3, #1
 800b770:	4631      	mov	r1, r6
 800b772:	4628      	mov	r0, r5
 800b774:	4a19      	ldr	r2, [pc, #100]	@ (800b7dc <_printf_float+0x2e0>)
 800b776:	47b8      	blx	r7
 800b778:	3001      	adds	r0, #1
 800b77a:	f43f af1a 	beq.w	800b5b2 <_printf_float+0xb6>
 800b77e:	e9dd 390d 	ldrd	r3, r9, [sp, #52]	@ 0x34
 800b782:	ea59 0303 	orrs.w	r3, r9, r3
 800b786:	d102      	bne.n	800b78e <_printf_float+0x292>
 800b788:	6823      	ldr	r3, [r4, #0]
 800b78a:	07d9      	lsls	r1, r3, #31
 800b78c:	d5d7      	bpl.n	800b73e <_printf_float+0x242>
 800b78e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800b792:	4631      	mov	r1, r6
 800b794:	4628      	mov	r0, r5
 800b796:	47b8      	blx	r7
 800b798:	3001      	adds	r0, #1
 800b79a:	f43f af0a 	beq.w	800b5b2 <_printf_float+0xb6>
 800b79e:	f04f 0a00 	mov.w	sl, #0
 800b7a2:	f104 0b1a 	add.w	fp, r4, #26
 800b7a6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800b7a8:	425b      	negs	r3, r3
 800b7aa:	4553      	cmp	r3, sl
 800b7ac:	dc01      	bgt.n	800b7b2 <_printf_float+0x2b6>
 800b7ae:	464b      	mov	r3, r9
 800b7b0:	e793      	b.n	800b6da <_printf_float+0x1de>
 800b7b2:	2301      	movs	r3, #1
 800b7b4:	465a      	mov	r2, fp
 800b7b6:	4631      	mov	r1, r6
 800b7b8:	4628      	mov	r0, r5
 800b7ba:	47b8      	blx	r7
 800b7bc:	3001      	adds	r0, #1
 800b7be:	f43f aef8 	beq.w	800b5b2 <_printf_float+0xb6>
 800b7c2:	f10a 0a01 	add.w	sl, sl, #1
 800b7c6:	e7ee      	b.n	800b7a6 <_printf_float+0x2aa>
 800b7c8:	7fefffff 	.word	0x7fefffff
 800b7cc:	0800ec70 	.word	0x0800ec70
 800b7d0:	0800ec74 	.word	0x0800ec74
 800b7d4:	0800ec78 	.word	0x0800ec78
 800b7d8:	0800ec7c 	.word	0x0800ec7c
 800b7dc:	0800ec80 	.word	0x0800ec80
 800b7e0:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800b7e2:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 800b7e6:	4553      	cmp	r3, sl
 800b7e8:	bfa8      	it	ge
 800b7ea:	4653      	movge	r3, sl
 800b7ec:	2b00      	cmp	r3, #0
 800b7ee:	4699      	mov	r9, r3
 800b7f0:	dc36      	bgt.n	800b860 <_printf_float+0x364>
 800b7f2:	f04f 0b00 	mov.w	fp, #0
 800b7f6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800b7fa:	f104 021a 	add.w	r2, r4, #26
 800b7fe:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800b800:	930a      	str	r3, [sp, #40]	@ 0x28
 800b802:	eba3 0309 	sub.w	r3, r3, r9
 800b806:	455b      	cmp	r3, fp
 800b808:	dc31      	bgt.n	800b86e <_printf_float+0x372>
 800b80a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800b80c:	459a      	cmp	sl, r3
 800b80e:	dc3a      	bgt.n	800b886 <_printf_float+0x38a>
 800b810:	6823      	ldr	r3, [r4, #0]
 800b812:	07da      	lsls	r2, r3, #31
 800b814:	d437      	bmi.n	800b886 <_printf_float+0x38a>
 800b816:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800b818:	ebaa 0903 	sub.w	r9, sl, r3
 800b81c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b81e:	ebaa 0303 	sub.w	r3, sl, r3
 800b822:	4599      	cmp	r9, r3
 800b824:	bfa8      	it	ge
 800b826:	4699      	movge	r9, r3
 800b828:	f1b9 0f00 	cmp.w	r9, #0
 800b82c:	dc33      	bgt.n	800b896 <_printf_float+0x39a>
 800b82e:	f04f 0800 	mov.w	r8, #0
 800b832:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800b836:	f104 0b1a 	add.w	fp, r4, #26
 800b83a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800b83c:	ebaa 0303 	sub.w	r3, sl, r3
 800b840:	eba3 0309 	sub.w	r3, r3, r9
 800b844:	4543      	cmp	r3, r8
 800b846:	f77f af7a 	ble.w	800b73e <_printf_float+0x242>
 800b84a:	2301      	movs	r3, #1
 800b84c:	465a      	mov	r2, fp
 800b84e:	4631      	mov	r1, r6
 800b850:	4628      	mov	r0, r5
 800b852:	47b8      	blx	r7
 800b854:	3001      	adds	r0, #1
 800b856:	f43f aeac 	beq.w	800b5b2 <_printf_float+0xb6>
 800b85a:	f108 0801 	add.w	r8, r8, #1
 800b85e:	e7ec      	b.n	800b83a <_printf_float+0x33e>
 800b860:	4642      	mov	r2, r8
 800b862:	4631      	mov	r1, r6
 800b864:	4628      	mov	r0, r5
 800b866:	47b8      	blx	r7
 800b868:	3001      	adds	r0, #1
 800b86a:	d1c2      	bne.n	800b7f2 <_printf_float+0x2f6>
 800b86c:	e6a1      	b.n	800b5b2 <_printf_float+0xb6>
 800b86e:	2301      	movs	r3, #1
 800b870:	4631      	mov	r1, r6
 800b872:	4628      	mov	r0, r5
 800b874:	920a      	str	r2, [sp, #40]	@ 0x28
 800b876:	47b8      	blx	r7
 800b878:	3001      	adds	r0, #1
 800b87a:	f43f ae9a 	beq.w	800b5b2 <_printf_float+0xb6>
 800b87e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800b880:	f10b 0b01 	add.w	fp, fp, #1
 800b884:	e7bb      	b.n	800b7fe <_printf_float+0x302>
 800b886:	4631      	mov	r1, r6
 800b888:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800b88c:	4628      	mov	r0, r5
 800b88e:	47b8      	blx	r7
 800b890:	3001      	adds	r0, #1
 800b892:	d1c0      	bne.n	800b816 <_printf_float+0x31a>
 800b894:	e68d      	b.n	800b5b2 <_printf_float+0xb6>
 800b896:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800b898:	464b      	mov	r3, r9
 800b89a:	4631      	mov	r1, r6
 800b89c:	4628      	mov	r0, r5
 800b89e:	4442      	add	r2, r8
 800b8a0:	47b8      	blx	r7
 800b8a2:	3001      	adds	r0, #1
 800b8a4:	d1c3      	bne.n	800b82e <_printf_float+0x332>
 800b8a6:	e684      	b.n	800b5b2 <_printf_float+0xb6>
 800b8a8:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 800b8ac:	f1ba 0f01 	cmp.w	sl, #1
 800b8b0:	dc01      	bgt.n	800b8b6 <_printf_float+0x3ba>
 800b8b2:	07db      	lsls	r3, r3, #31
 800b8b4:	d536      	bpl.n	800b924 <_printf_float+0x428>
 800b8b6:	2301      	movs	r3, #1
 800b8b8:	4642      	mov	r2, r8
 800b8ba:	4631      	mov	r1, r6
 800b8bc:	4628      	mov	r0, r5
 800b8be:	47b8      	blx	r7
 800b8c0:	3001      	adds	r0, #1
 800b8c2:	f43f ae76 	beq.w	800b5b2 <_printf_float+0xb6>
 800b8c6:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800b8ca:	4631      	mov	r1, r6
 800b8cc:	4628      	mov	r0, r5
 800b8ce:	47b8      	blx	r7
 800b8d0:	3001      	adds	r0, #1
 800b8d2:	f43f ae6e 	beq.w	800b5b2 <_printf_float+0xb6>
 800b8d6:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800b8da:	2200      	movs	r2, #0
 800b8dc:	2300      	movs	r3, #0
 800b8de:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 800b8e2:	f7f5 f915 	bl	8000b10 <__aeabi_dcmpeq>
 800b8e6:	b9c0      	cbnz	r0, 800b91a <_printf_float+0x41e>
 800b8e8:	4653      	mov	r3, sl
 800b8ea:	f108 0201 	add.w	r2, r8, #1
 800b8ee:	4631      	mov	r1, r6
 800b8f0:	4628      	mov	r0, r5
 800b8f2:	47b8      	blx	r7
 800b8f4:	3001      	adds	r0, #1
 800b8f6:	d10c      	bne.n	800b912 <_printf_float+0x416>
 800b8f8:	e65b      	b.n	800b5b2 <_printf_float+0xb6>
 800b8fa:	2301      	movs	r3, #1
 800b8fc:	465a      	mov	r2, fp
 800b8fe:	4631      	mov	r1, r6
 800b900:	4628      	mov	r0, r5
 800b902:	47b8      	blx	r7
 800b904:	3001      	adds	r0, #1
 800b906:	f43f ae54 	beq.w	800b5b2 <_printf_float+0xb6>
 800b90a:	f108 0801 	add.w	r8, r8, #1
 800b90e:	45d0      	cmp	r8, sl
 800b910:	dbf3      	blt.n	800b8fa <_printf_float+0x3fe>
 800b912:	464b      	mov	r3, r9
 800b914:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800b918:	e6e0      	b.n	800b6dc <_printf_float+0x1e0>
 800b91a:	f04f 0800 	mov.w	r8, #0
 800b91e:	f104 0b1a 	add.w	fp, r4, #26
 800b922:	e7f4      	b.n	800b90e <_printf_float+0x412>
 800b924:	2301      	movs	r3, #1
 800b926:	4642      	mov	r2, r8
 800b928:	e7e1      	b.n	800b8ee <_printf_float+0x3f2>
 800b92a:	2301      	movs	r3, #1
 800b92c:	464a      	mov	r2, r9
 800b92e:	4631      	mov	r1, r6
 800b930:	4628      	mov	r0, r5
 800b932:	47b8      	blx	r7
 800b934:	3001      	adds	r0, #1
 800b936:	f43f ae3c 	beq.w	800b5b2 <_printf_float+0xb6>
 800b93a:	f108 0801 	add.w	r8, r8, #1
 800b93e:	68e3      	ldr	r3, [r4, #12]
 800b940:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800b942:	1a5b      	subs	r3, r3, r1
 800b944:	4543      	cmp	r3, r8
 800b946:	dcf0      	bgt.n	800b92a <_printf_float+0x42e>
 800b948:	e6fd      	b.n	800b746 <_printf_float+0x24a>
 800b94a:	f04f 0800 	mov.w	r8, #0
 800b94e:	f104 0919 	add.w	r9, r4, #25
 800b952:	e7f4      	b.n	800b93e <_printf_float+0x442>

0800b954 <_printf_common>:
 800b954:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b958:	4616      	mov	r6, r2
 800b95a:	4698      	mov	r8, r3
 800b95c:	688a      	ldr	r2, [r1, #8]
 800b95e:	690b      	ldr	r3, [r1, #16]
 800b960:	4607      	mov	r7, r0
 800b962:	4293      	cmp	r3, r2
 800b964:	bfb8      	it	lt
 800b966:	4613      	movlt	r3, r2
 800b968:	6033      	str	r3, [r6, #0]
 800b96a:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800b96e:	460c      	mov	r4, r1
 800b970:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800b974:	b10a      	cbz	r2, 800b97a <_printf_common+0x26>
 800b976:	3301      	adds	r3, #1
 800b978:	6033      	str	r3, [r6, #0]
 800b97a:	6823      	ldr	r3, [r4, #0]
 800b97c:	0699      	lsls	r1, r3, #26
 800b97e:	bf42      	ittt	mi
 800b980:	6833      	ldrmi	r3, [r6, #0]
 800b982:	3302      	addmi	r3, #2
 800b984:	6033      	strmi	r3, [r6, #0]
 800b986:	6825      	ldr	r5, [r4, #0]
 800b988:	f015 0506 	ands.w	r5, r5, #6
 800b98c:	d106      	bne.n	800b99c <_printf_common+0x48>
 800b98e:	f104 0a19 	add.w	sl, r4, #25
 800b992:	68e3      	ldr	r3, [r4, #12]
 800b994:	6832      	ldr	r2, [r6, #0]
 800b996:	1a9b      	subs	r3, r3, r2
 800b998:	42ab      	cmp	r3, r5
 800b99a:	dc2b      	bgt.n	800b9f4 <_printf_common+0xa0>
 800b99c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800b9a0:	6822      	ldr	r2, [r4, #0]
 800b9a2:	3b00      	subs	r3, #0
 800b9a4:	bf18      	it	ne
 800b9a6:	2301      	movne	r3, #1
 800b9a8:	0692      	lsls	r2, r2, #26
 800b9aa:	d430      	bmi.n	800ba0e <_printf_common+0xba>
 800b9ac:	4641      	mov	r1, r8
 800b9ae:	4638      	mov	r0, r7
 800b9b0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800b9b4:	47c8      	blx	r9
 800b9b6:	3001      	adds	r0, #1
 800b9b8:	d023      	beq.n	800ba02 <_printf_common+0xae>
 800b9ba:	6823      	ldr	r3, [r4, #0]
 800b9bc:	6922      	ldr	r2, [r4, #16]
 800b9be:	f003 0306 	and.w	r3, r3, #6
 800b9c2:	2b04      	cmp	r3, #4
 800b9c4:	bf14      	ite	ne
 800b9c6:	2500      	movne	r5, #0
 800b9c8:	6833      	ldreq	r3, [r6, #0]
 800b9ca:	f04f 0600 	mov.w	r6, #0
 800b9ce:	bf08      	it	eq
 800b9d0:	68e5      	ldreq	r5, [r4, #12]
 800b9d2:	f104 041a 	add.w	r4, r4, #26
 800b9d6:	bf08      	it	eq
 800b9d8:	1aed      	subeq	r5, r5, r3
 800b9da:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800b9de:	bf08      	it	eq
 800b9e0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b9e4:	4293      	cmp	r3, r2
 800b9e6:	bfc4      	itt	gt
 800b9e8:	1a9b      	subgt	r3, r3, r2
 800b9ea:	18ed      	addgt	r5, r5, r3
 800b9ec:	42b5      	cmp	r5, r6
 800b9ee:	d11a      	bne.n	800ba26 <_printf_common+0xd2>
 800b9f0:	2000      	movs	r0, #0
 800b9f2:	e008      	b.n	800ba06 <_printf_common+0xb2>
 800b9f4:	2301      	movs	r3, #1
 800b9f6:	4652      	mov	r2, sl
 800b9f8:	4641      	mov	r1, r8
 800b9fa:	4638      	mov	r0, r7
 800b9fc:	47c8      	blx	r9
 800b9fe:	3001      	adds	r0, #1
 800ba00:	d103      	bne.n	800ba0a <_printf_common+0xb6>
 800ba02:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800ba06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ba0a:	3501      	adds	r5, #1
 800ba0c:	e7c1      	b.n	800b992 <_printf_common+0x3e>
 800ba0e:	2030      	movs	r0, #48	@ 0x30
 800ba10:	18e1      	adds	r1, r4, r3
 800ba12:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800ba16:	1c5a      	adds	r2, r3, #1
 800ba18:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800ba1c:	4422      	add	r2, r4
 800ba1e:	3302      	adds	r3, #2
 800ba20:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800ba24:	e7c2      	b.n	800b9ac <_printf_common+0x58>
 800ba26:	2301      	movs	r3, #1
 800ba28:	4622      	mov	r2, r4
 800ba2a:	4641      	mov	r1, r8
 800ba2c:	4638      	mov	r0, r7
 800ba2e:	47c8      	blx	r9
 800ba30:	3001      	adds	r0, #1
 800ba32:	d0e6      	beq.n	800ba02 <_printf_common+0xae>
 800ba34:	3601      	adds	r6, #1
 800ba36:	e7d9      	b.n	800b9ec <_printf_common+0x98>

0800ba38 <_printf_i>:
 800ba38:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800ba3c:	7e0f      	ldrb	r7, [r1, #24]
 800ba3e:	4691      	mov	r9, r2
 800ba40:	2f78      	cmp	r7, #120	@ 0x78
 800ba42:	4680      	mov	r8, r0
 800ba44:	460c      	mov	r4, r1
 800ba46:	469a      	mov	sl, r3
 800ba48:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800ba4a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800ba4e:	d807      	bhi.n	800ba60 <_printf_i+0x28>
 800ba50:	2f62      	cmp	r7, #98	@ 0x62
 800ba52:	d80a      	bhi.n	800ba6a <_printf_i+0x32>
 800ba54:	2f00      	cmp	r7, #0
 800ba56:	f000 80d3 	beq.w	800bc00 <_printf_i+0x1c8>
 800ba5a:	2f58      	cmp	r7, #88	@ 0x58
 800ba5c:	f000 80ba 	beq.w	800bbd4 <_printf_i+0x19c>
 800ba60:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800ba64:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800ba68:	e03a      	b.n	800bae0 <_printf_i+0xa8>
 800ba6a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800ba6e:	2b15      	cmp	r3, #21
 800ba70:	d8f6      	bhi.n	800ba60 <_printf_i+0x28>
 800ba72:	a101      	add	r1, pc, #4	@ (adr r1, 800ba78 <_printf_i+0x40>)
 800ba74:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800ba78:	0800bad1 	.word	0x0800bad1
 800ba7c:	0800bae5 	.word	0x0800bae5
 800ba80:	0800ba61 	.word	0x0800ba61
 800ba84:	0800ba61 	.word	0x0800ba61
 800ba88:	0800ba61 	.word	0x0800ba61
 800ba8c:	0800ba61 	.word	0x0800ba61
 800ba90:	0800bae5 	.word	0x0800bae5
 800ba94:	0800ba61 	.word	0x0800ba61
 800ba98:	0800ba61 	.word	0x0800ba61
 800ba9c:	0800ba61 	.word	0x0800ba61
 800baa0:	0800ba61 	.word	0x0800ba61
 800baa4:	0800bbe7 	.word	0x0800bbe7
 800baa8:	0800bb0f 	.word	0x0800bb0f
 800baac:	0800bba1 	.word	0x0800bba1
 800bab0:	0800ba61 	.word	0x0800ba61
 800bab4:	0800ba61 	.word	0x0800ba61
 800bab8:	0800bc09 	.word	0x0800bc09
 800babc:	0800ba61 	.word	0x0800ba61
 800bac0:	0800bb0f 	.word	0x0800bb0f
 800bac4:	0800ba61 	.word	0x0800ba61
 800bac8:	0800ba61 	.word	0x0800ba61
 800bacc:	0800bba9 	.word	0x0800bba9
 800bad0:	6833      	ldr	r3, [r6, #0]
 800bad2:	1d1a      	adds	r2, r3, #4
 800bad4:	681b      	ldr	r3, [r3, #0]
 800bad6:	6032      	str	r2, [r6, #0]
 800bad8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800badc:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800bae0:	2301      	movs	r3, #1
 800bae2:	e09e      	b.n	800bc22 <_printf_i+0x1ea>
 800bae4:	6833      	ldr	r3, [r6, #0]
 800bae6:	6820      	ldr	r0, [r4, #0]
 800bae8:	1d19      	adds	r1, r3, #4
 800baea:	6031      	str	r1, [r6, #0]
 800baec:	0606      	lsls	r6, r0, #24
 800baee:	d501      	bpl.n	800baf4 <_printf_i+0xbc>
 800baf0:	681d      	ldr	r5, [r3, #0]
 800baf2:	e003      	b.n	800bafc <_printf_i+0xc4>
 800baf4:	0645      	lsls	r5, r0, #25
 800baf6:	d5fb      	bpl.n	800baf0 <_printf_i+0xb8>
 800baf8:	f9b3 5000 	ldrsh.w	r5, [r3]
 800bafc:	2d00      	cmp	r5, #0
 800bafe:	da03      	bge.n	800bb08 <_printf_i+0xd0>
 800bb00:	232d      	movs	r3, #45	@ 0x2d
 800bb02:	426d      	negs	r5, r5
 800bb04:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800bb08:	230a      	movs	r3, #10
 800bb0a:	4859      	ldr	r0, [pc, #356]	@ (800bc70 <_printf_i+0x238>)
 800bb0c:	e011      	b.n	800bb32 <_printf_i+0xfa>
 800bb0e:	6821      	ldr	r1, [r4, #0]
 800bb10:	6833      	ldr	r3, [r6, #0]
 800bb12:	0608      	lsls	r0, r1, #24
 800bb14:	f853 5b04 	ldr.w	r5, [r3], #4
 800bb18:	d402      	bmi.n	800bb20 <_printf_i+0xe8>
 800bb1a:	0649      	lsls	r1, r1, #25
 800bb1c:	bf48      	it	mi
 800bb1e:	b2ad      	uxthmi	r5, r5
 800bb20:	2f6f      	cmp	r7, #111	@ 0x6f
 800bb22:	6033      	str	r3, [r6, #0]
 800bb24:	bf14      	ite	ne
 800bb26:	230a      	movne	r3, #10
 800bb28:	2308      	moveq	r3, #8
 800bb2a:	4851      	ldr	r0, [pc, #324]	@ (800bc70 <_printf_i+0x238>)
 800bb2c:	2100      	movs	r1, #0
 800bb2e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800bb32:	6866      	ldr	r6, [r4, #4]
 800bb34:	2e00      	cmp	r6, #0
 800bb36:	bfa8      	it	ge
 800bb38:	6821      	ldrge	r1, [r4, #0]
 800bb3a:	60a6      	str	r6, [r4, #8]
 800bb3c:	bfa4      	itt	ge
 800bb3e:	f021 0104 	bicge.w	r1, r1, #4
 800bb42:	6021      	strge	r1, [r4, #0]
 800bb44:	b90d      	cbnz	r5, 800bb4a <_printf_i+0x112>
 800bb46:	2e00      	cmp	r6, #0
 800bb48:	d04b      	beq.n	800bbe2 <_printf_i+0x1aa>
 800bb4a:	4616      	mov	r6, r2
 800bb4c:	fbb5 f1f3 	udiv	r1, r5, r3
 800bb50:	fb03 5711 	mls	r7, r3, r1, r5
 800bb54:	5dc7      	ldrb	r7, [r0, r7]
 800bb56:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800bb5a:	462f      	mov	r7, r5
 800bb5c:	42bb      	cmp	r3, r7
 800bb5e:	460d      	mov	r5, r1
 800bb60:	d9f4      	bls.n	800bb4c <_printf_i+0x114>
 800bb62:	2b08      	cmp	r3, #8
 800bb64:	d10b      	bne.n	800bb7e <_printf_i+0x146>
 800bb66:	6823      	ldr	r3, [r4, #0]
 800bb68:	07df      	lsls	r7, r3, #31
 800bb6a:	d508      	bpl.n	800bb7e <_printf_i+0x146>
 800bb6c:	6923      	ldr	r3, [r4, #16]
 800bb6e:	6861      	ldr	r1, [r4, #4]
 800bb70:	4299      	cmp	r1, r3
 800bb72:	bfde      	ittt	le
 800bb74:	2330      	movle	r3, #48	@ 0x30
 800bb76:	f806 3c01 	strble.w	r3, [r6, #-1]
 800bb7a:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 800bb7e:	1b92      	subs	r2, r2, r6
 800bb80:	6122      	str	r2, [r4, #16]
 800bb82:	464b      	mov	r3, r9
 800bb84:	4621      	mov	r1, r4
 800bb86:	4640      	mov	r0, r8
 800bb88:	f8cd a000 	str.w	sl, [sp]
 800bb8c:	aa03      	add	r2, sp, #12
 800bb8e:	f7ff fee1 	bl	800b954 <_printf_common>
 800bb92:	3001      	adds	r0, #1
 800bb94:	d14a      	bne.n	800bc2c <_printf_i+0x1f4>
 800bb96:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800bb9a:	b004      	add	sp, #16
 800bb9c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bba0:	6823      	ldr	r3, [r4, #0]
 800bba2:	f043 0320 	orr.w	r3, r3, #32
 800bba6:	6023      	str	r3, [r4, #0]
 800bba8:	2778      	movs	r7, #120	@ 0x78
 800bbaa:	4832      	ldr	r0, [pc, #200]	@ (800bc74 <_printf_i+0x23c>)
 800bbac:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800bbb0:	6823      	ldr	r3, [r4, #0]
 800bbb2:	6831      	ldr	r1, [r6, #0]
 800bbb4:	061f      	lsls	r7, r3, #24
 800bbb6:	f851 5b04 	ldr.w	r5, [r1], #4
 800bbba:	d402      	bmi.n	800bbc2 <_printf_i+0x18a>
 800bbbc:	065f      	lsls	r7, r3, #25
 800bbbe:	bf48      	it	mi
 800bbc0:	b2ad      	uxthmi	r5, r5
 800bbc2:	6031      	str	r1, [r6, #0]
 800bbc4:	07d9      	lsls	r1, r3, #31
 800bbc6:	bf44      	itt	mi
 800bbc8:	f043 0320 	orrmi.w	r3, r3, #32
 800bbcc:	6023      	strmi	r3, [r4, #0]
 800bbce:	b11d      	cbz	r5, 800bbd8 <_printf_i+0x1a0>
 800bbd0:	2310      	movs	r3, #16
 800bbd2:	e7ab      	b.n	800bb2c <_printf_i+0xf4>
 800bbd4:	4826      	ldr	r0, [pc, #152]	@ (800bc70 <_printf_i+0x238>)
 800bbd6:	e7e9      	b.n	800bbac <_printf_i+0x174>
 800bbd8:	6823      	ldr	r3, [r4, #0]
 800bbda:	f023 0320 	bic.w	r3, r3, #32
 800bbde:	6023      	str	r3, [r4, #0]
 800bbe0:	e7f6      	b.n	800bbd0 <_printf_i+0x198>
 800bbe2:	4616      	mov	r6, r2
 800bbe4:	e7bd      	b.n	800bb62 <_printf_i+0x12a>
 800bbe6:	6833      	ldr	r3, [r6, #0]
 800bbe8:	6825      	ldr	r5, [r4, #0]
 800bbea:	1d18      	adds	r0, r3, #4
 800bbec:	6961      	ldr	r1, [r4, #20]
 800bbee:	6030      	str	r0, [r6, #0]
 800bbf0:	062e      	lsls	r6, r5, #24
 800bbf2:	681b      	ldr	r3, [r3, #0]
 800bbf4:	d501      	bpl.n	800bbfa <_printf_i+0x1c2>
 800bbf6:	6019      	str	r1, [r3, #0]
 800bbf8:	e002      	b.n	800bc00 <_printf_i+0x1c8>
 800bbfa:	0668      	lsls	r0, r5, #25
 800bbfc:	d5fb      	bpl.n	800bbf6 <_printf_i+0x1be>
 800bbfe:	8019      	strh	r1, [r3, #0]
 800bc00:	2300      	movs	r3, #0
 800bc02:	4616      	mov	r6, r2
 800bc04:	6123      	str	r3, [r4, #16]
 800bc06:	e7bc      	b.n	800bb82 <_printf_i+0x14a>
 800bc08:	6833      	ldr	r3, [r6, #0]
 800bc0a:	2100      	movs	r1, #0
 800bc0c:	1d1a      	adds	r2, r3, #4
 800bc0e:	6032      	str	r2, [r6, #0]
 800bc10:	681e      	ldr	r6, [r3, #0]
 800bc12:	6862      	ldr	r2, [r4, #4]
 800bc14:	4630      	mov	r0, r6
 800bc16:	f000 f9e6 	bl	800bfe6 <memchr>
 800bc1a:	b108      	cbz	r0, 800bc20 <_printf_i+0x1e8>
 800bc1c:	1b80      	subs	r0, r0, r6
 800bc1e:	6060      	str	r0, [r4, #4]
 800bc20:	6863      	ldr	r3, [r4, #4]
 800bc22:	6123      	str	r3, [r4, #16]
 800bc24:	2300      	movs	r3, #0
 800bc26:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800bc2a:	e7aa      	b.n	800bb82 <_printf_i+0x14a>
 800bc2c:	4632      	mov	r2, r6
 800bc2e:	4649      	mov	r1, r9
 800bc30:	4640      	mov	r0, r8
 800bc32:	6923      	ldr	r3, [r4, #16]
 800bc34:	47d0      	blx	sl
 800bc36:	3001      	adds	r0, #1
 800bc38:	d0ad      	beq.n	800bb96 <_printf_i+0x15e>
 800bc3a:	6823      	ldr	r3, [r4, #0]
 800bc3c:	079b      	lsls	r3, r3, #30
 800bc3e:	d413      	bmi.n	800bc68 <_printf_i+0x230>
 800bc40:	68e0      	ldr	r0, [r4, #12]
 800bc42:	9b03      	ldr	r3, [sp, #12]
 800bc44:	4298      	cmp	r0, r3
 800bc46:	bfb8      	it	lt
 800bc48:	4618      	movlt	r0, r3
 800bc4a:	e7a6      	b.n	800bb9a <_printf_i+0x162>
 800bc4c:	2301      	movs	r3, #1
 800bc4e:	4632      	mov	r2, r6
 800bc50:	4649      	mov	r1, r9
 800bc52:	4640      	mov	r0, r8
 800bc54:	47d0      	blx	sl
 800bc56:	3001      	adds	r0, #1
 800bc58:	d09d      	beq.n	800bb96 <_printf_i+0x15e>
 800bc5a:	3501      	adds	r5, #1
 800bc5c:	68e3      	ldr	r3, [r4, #12]
 800bc5e:	9903      	ldr	r1, [sp, #12]
 800bc60:	1a5b      	subs	r3, r3, r1
 800bc62:	42ab      	cmp	r3, r5
 800bc64:	dcf2      	bgt.n	800bc4c <_printf_i+0x214>
 800bc66:	e7eb      	b.n	800bc40 <_printf_i+0x208>
 800bc68:	2500      	movs	r5, #0
 800bc6a:	f104 0619 	add.w	r6, r4, #25
 800bc6e:	e7f5      	b.n	800bc5c <_printf_i+0x224>
 800bc70:	0800ec82 	.word	0x0800ec82
 800bc74:	0800ec93 	.word	0x0800ec93

0800bc78 <std>:
 800bc78:	2300      	movs	r3, #0
 800bc7a:	b510      	push	{r4, lr}
 800bc7c:	4604      	mov	r4, r0
 800bc7e:	e9c0 3300 	strd	r3, r3, [r0]
 800bc82:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800bc86:	6083      	str	r3, [r0, #8]
 800bc88:	8181      	strh	r1, [r0, #12]
 800bc8a:	6643      	str	r3, [r0, #100]	@ 0x64
 800bc8c:	81c2      	strh	r2, [r0, #14]
 800bc8e:	6183      	str	r3, [r0, #24]
 800bc90:	4619      	mov	r1, r3
 800bc92:	2208      	movs	r2, #8
 800bc94:	305c      	adds	r0, #92	@ 0x5c
 800bc96:	f000 f914 	bl	800bec2 <memset>
 800bc9a:	4b0d      	ldr	r3, [pc, #52]	@ (800bcd0 <std+0x58>)
 800bc9c:	6224      	str	r4, [r4, #32]
 800bc9e:	6263      	str	r3, [r4, #36]	@ 0x24
 800bca0:	4b0c      	ldr	r3, [pc, #48]	@ (800bcd4 <std+0x5c>)
 800bca2:	62a3      	str	r3, [r4, #40]	@ 0x28
 800bca4:	4b0c      	ldr	r3, [pc, #48]	@ (800bcd8 <std+0x60>)
 800bca6:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800bca8:	4b0c      	ldr	r3, [pc, #48]	@ (800bcdc <std+0x64>)
 800bcaa:	6323      	str	r3, [r4, #48]	@ 0x30
 800bcac:	4b0c      	ldr	r3, [pc, #48]	@ (800bce0 <std+0x68>)
 800bcae:	429c      	cmp	r4, r3
 800bcb0:	d006      	beq.n	800bcc0 <std+0x48>
 800bcb2:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800bcb6:	4294      	cmp	r4, r2
 800bcb8:	d002      	beq.n	800bcc0 <std+0x48>
 800bcba:	33d0      	adds	r3, #208	@ 0xd0
 800bcbc:	429c      	cmp	r4, r3
 800bcbe:	d105      	bne.n	800bccc <std+0x54>
 800bcc0:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800bcc4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800bcc8:	f000 b98a 	b.w	800bfe0 <__retarget_lock_init_recursive>
 800bccc:	bd10      	pop	{r4, pc}
 800bcce:	bf00      	nop
 800bcd0:	0800be3d 	.word	0x0800be3d
 800bcd4:	0800be5f 	.word	0x0800be5f
 800bcd8:	0800be97 	.word	0x0800be97
 800bcdc:	0800bebb 	.word	0x0800bebb
 800bce0:	20001588 	.word	0x20001588

0800bce4 <stdio_exit_handler>:
 800bce4:	4a02      	ldr	r2, [pc, #8]	@ (800bcf0 <stdio_exit_handler+0xc>)
 800bce6:	4903      	ldr	r1, [pc, #12]	@ (800bcf4 <stdio_exit_handler+0x10>)
 800bce8:	4803      	ldr	r0, [pc, #12]	@ (800bcf8 <stdio_exit_handler+0x14>)
 800bcea:	f000 b869 	b.w	800bdc0 <_fwalk_sglue>
 800bcee:	bf00      	nop
 800bcf0:	20000190 	.word	0x20000190
 800bcf4:	0800e3ad 	.word	0x0800e3ad
 800bcf8:	2000030c 	.word	0x2000030c

0800bcfc <cleanup_stdio>:
 800bcfc:	6841      	ldr	r1, [r0, #4]
 800bcfe:	4b0c      	ldr	r3, [pc, #48]	@ (800bd30 <cleanup_stdio+0x34>)
 800bd00:	b510      	push	{r4, lr}
 800bd02:	4299      	cmp	r1, r3
 800bd04:	4604      	mov	r4, r0
 800bd06:	d001      	beq.n	800bd0c <cleanup_stdio+0x10>
 800bd08:	f002 fb50 	bl	800e3ac <_fflush_r>
 800bd0c:	68a1      	ldr	r1, [r4, #8]
 800bd0e:	4b09      	ldr	r3, [pc, #36]	@ (800bd34 <cleanup_stdio+0x38>)
 800bd10:	4299      	cmp	r1, r3
 800bd12:	d002      	beq.n	800bd1a <cleanup_stdio+0x1e>
 800bd14:	4620      	mov	r0, r4
 800bd16:	f002 fb49 	bl	800e3ac <_fflush_r>
 800bd1a:	68e1      	ldr	r1, [r4, #12]
 800bd1c:	4b06      	ldr	r3, [pc, #24]	@ (800bd38 <cleanup_stdio+0x3c>)
 800bd1e:	4299      	cmp	r1, r3
 800bd20:	d004      	beq.n	800bd2c <cleanup_stdio+0x30>
 800bd22:	4620      	mov	r0, r4
 800bd24:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800bd28:	f002 bb40 	b.w	800e3ac <_fflush_r>
 800bd2c:	bd10      	pop	{r4, pc}
 800bd2e:	bf00      	nop
 800bd30:	20001588 	.word	0x20001588
 800bd34:	200015f0 	.word	0x200015f0
 800bd38:	20001658 	.word	0x20001658

0800bd3c <global_stdio_init.part.0>:
 800bd3c:	b510      	push	{r4, lr}
 800bd3e:	4b0b      	ldr	r3, [pc, #44]	@ (800bd6c <global_stdio_init.part.0+0x30>)
 800bd40:	4c0b      	ldr	r4, [pc, #44]	@ (800bd70 <global_stdio_init.part.0+0x34>)
 800bd42:	4a0c      	ldr	r2, [pc, #48]	@ (800bd74 <global_stdio_init.part.0+0x38>)
 800bd44:	4620      	mov	r0, r4
 800bd46:	601a      	str	r2, [r3, #0]
 800bd48:	2104      	movs	r1, #4
 800bd4a:	2200      	movs	r2, #0
 800bd4c:	f7ff ff94 	bl	800bc78 <std>
 800bd50:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800bd54:	2201      	movs	r2, #1
 800bd56:	2109      	movs	r1, #9
 800bd58:	f7ff ff8e 	bl	800bc78 <std>
 800bd5c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800bd60:	2202      	movs	r2, #2
 800bd62:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800bd66:	2112      	movs	r1, #18
 800bd68:	f7ff bf86 	b.w	800bc78 <std>
 800bd6c:	200016c0 	.word	0x200016c0
 800bd70:	20001588 	.word	0x20001588
 800bd74:	0800bce5 	.word	0x0800bce5

0800bd78 <__sfp_lock_acquire>:
 800bd78:	4801      	ldr	r0, [pc, #4]	@ (800bd80 <__sfp_lock_acquire+0x8>)
 800bd7a:	f000 b932 	b.w	800bfe2 <__retarget_lock_acquire_recursive>
 800bd7e:	bf00      	nop
 800bd80:	200016c9 	.word	0x200016c9

0800bd84 <__sfp_lock_release>:
 800bd84:	4801      	ldr	r0, [pc, #4]	@ (800bd8c <__sfp_lock_release+0x8>)
 800bd86:	f000 b92d 	b.w	800bfe4 <__retarget_lock_release_recursive>
 800bd8a:	bf00      	nop
 800bd8c:	200016c9 	.word	0x200016c9

0800bd90 <__sinit>:
 800bd90:	b510      	push	{r4, lr}
 800bd92:	4604      	mov	r4, r0
 800bd94:	f7ff fff0 	bl	800bd78 <__sfp_lock_acquire>
 800bd98:	6a23      	ldr	r3, [r4, #32]
 800bd9a:	b11b      	cbz	r3, 800bda4 <__sinit+0x14>
 800bd9c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800bda0:	f7ff bff0 	b.w	800bd84 <__sfp_lock_release>
 800bda4:	4b04      	ldr	r3, [pc, #16]	@ (800bdb8 <__sinit+0x28>)
 800bda6:	6223      	str	r3, [r4, #32]
 800bda8:	4b04      	ldr	r3, [pc, #16]	@ (800bdbc <__sinit+0x2c>)
 800bdaa:	681b      	ldr	r3, [r3, #0]
 800bdac:	2b00      	cmp	r3, #0
 800bdae:	d1f5      	bne.n	800bd9c <__sinit+0xc>
 800bdb0:	f7ff ffc4 	bl	800bd3c <global_stdio_init.part.0>
 800bdb4:	e7f2      	b.n	800bd9c <__sinit+0xc>
 800bdb6:	bf00      	nop
 800bdb8:	0800bcfd 	.word	0x0800bcfd
 800bdbc:	200016c0 	.word	0x200016c0

0800bdc0 <_fwalk_sglue>:
 800bdc0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bdc4:	4607      	mov	r7, r0
 800bdc6:	4688      	mov	r8, r1
 800bdc8:	4614      	mov	r4, r2
 800bdca:	2600      	movs	r6, #0
 800bdcc:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800bdd0:	f1b9 0901 	subs.w	r9, r9, #1
 800bdd4:	d505      	bpl.n	800bde2 <_fwalk_sglue+0x22>
 800bdd6:	6824      	ldr	r4, [r4, #0]
 800bdd8:	2c00      	cmp	r4, #0
 800bdda:	d1f7      	bne.n	800bdcc <_fwalk_sglue+0xc>
 800bddc:	4630      	mov	r0, r6
 800bdde:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bde2:	89ab      	ldrh	r3, [r5, #12]
 800bde4:	2b01      	cmp	r3, #1
 800bde6:	d907      	bls.n	800bdf8 <_fwalk_sglue+0x38>
 800bde8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800bdec:	3301      	adds	r3, #1
 800bdee:	d003      	beq.n	800bdf8 <_fwalk_sglue+0x38>
 800bdf0:	4629      	mov	r1, r5
 800bdf2:	4638      	mov	r0, r7
 800bdf4:	47c0      	blx	r8
 800bdf6:	4306      	orrs	r6, r0
 800bdf8:	3568      	adds	r5, #104	@ 0x68
 800bdfa:	e7e9      	b.n	800bdd0 <_fwalk_sglue+0x10>

0800bdfc <siprintf>:
 800bdfc:	b40e      	push	{r1, r2, r3}
 800bdfe:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800be02:	b500      	push	{lr}
 800be04:	b09c      	sub	sp, #112	@ 0x70
 800be06:	ab1d      	add	r3, sp, #116	@ 0x74
 800be08:	9002      	str	r0, [sp, #8]
 800be0a:	9006      	str	r0, [sp, #24]
 800be0c:	9107      	str	r1, [sp, #28]
 800be0e:	9104      	str	r1, [sp, #16]
 800be10:	4808      	ldr	r0, [pc, #32]	@ (800be34 <siprintf+0x38>)
 800be12:	4909      	ldr	r1, [pc, #36]	@ (800be38 <siprintf+0x3c>)
 800be14:	f853 2b04 	ldr.w	r2, [r3], #4
 800be18:	9105      	str	r1, [sp, #20]
 800be1a:	6800      	ldr	r0, [r0, #0]
 800be1c:	a902      	add	r1, sp, #8
 800be1e:	9301      	str	r3, [sp, #4]
 800be20:	f002 f948 	bl	800e0b4 <_svfiprintf_r>
 800be24:	2200      	movs	r2, #0
 800be26:	9b02      	ldr	r3, [sp, #8]
 800be28:	701a      	strb	r2, [r3, #0]
 800be2a:	b01c      	add	sp, #112	@ 0x70
 800be2c:	f85d eb04 	ldr.w	lr, [sp], #4
 800be30:	b003      	add	sp, #12
 800be32:	4770      	bx	lr
 800be34:	20000308 	.word	0x20000308
 800be38:	ffff0208 	.word	0xffff0208

0800be3c <__sread>:
 800be3c:	b510      	push	{r4, lr}
 800be3e:	460c      	mov	r4, r1
 800be40:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800be44:	f000 f87e 	bl	800bf44 <_read_r>
 800be48:	2800      	cmp	r0, #0
 800be4a:	bfab      	itete	ge
 800be4c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800be4e:	89a3      	ldrhlt	r3, [r4, #12]
 800be50:	181b      	addge	r3, r3, r0
 800be52:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800be56:	bfac      	ite	ge
 800be58:	6563      	strge	r3, [r4, #84]	@ 0x54
 800be5a:	81a3      	strhlt	r3, [r4, #12]
 800be5c:	bd10      	pop	{r4, pc}

0800be5e <__swrite>:
 800be5e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800be62:	461f      	mov	r7, r3
 800be64:	898b      	ldrh	r3, [r1, #12]
 800be66:	4605      	mov	r5, r0
 800be68:	05db      	lsls	r3, r3, #23
 800be6a:	460c      	mov	r4, r1
 800be6c:	4616      	mov	r6, r2
 800be6e:	d505      	bpl.n	800be7c <__swrite+0x1e>
 800be70:	2302      	movs	r3, #2
 800be72:	2200      	movs	r2, #0
 800be74:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800be78:	f000 f852 	bl	800bf20 <_lseek_r>
 800be7c:	89a3      	ldrh	r3, [r4, #12]
 800be7e:	4632      	mov	r2, r6
 800be80:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800be84:	81a3      	strh	r3, [r4, #12]
 800be86:	4628      	mov	r0, r5
 800be88:	463b      	mov	r3, r7
 800be8a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800be8e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800be92:	f000 b869 	b.w	800bf68 <_write_r>

0800be96 <__sseek>:
 800be96:	b510      	push	{r4, lr}
 800be98:	460c      	mov	r4, r1
 800be9a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800be9e:	f000 f83f 	bl	800bf20 <_lseek_r>
 800bea2:	1c43      	adds	r3, r0, #1
 800bea4:	89a3      	ldrh	r3, [r4, #12]
 800bea6:	bf15      	itete	ne
 800bea8:	6560      	strne	r0, [r4, #84]	@ 0x54
 800beaa:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800beae:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800beb2:	81a3      	strheq	r3, [r4, #12]
 800beb4:	bf18      	it	ne
 800beb6:	81a3      	strhne	r3, [r4, #12]
 800beb8:	bd10      	pop	{r4, pc}

0800beba <__sclose>:
 800beba:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bebe:	f000 b81f 	b.w	800bf00 <_close_r>

0800bec2 <memset>:
 800bec2:	4603      	mov	r3, r0
 800bec4:	4402      	add	r2, r0
 800bec6:	4293      	cmp	r3, r2
 800bec8:	d100      	bne.n	800becc <memset+0xa>
 800beca:	4770      	bx	lr
 800becc:	f803 1b01 	strb.w	r1, [r3], #1
 800bed0:	e7f9      	b.n	800bec6 <memset+0x4>

0800bed2 <strncmp>:
 800bed2:	b510      	push	{r4, lr}
 800bed4:	b16a      	cbz	r2, 800bef2 <strncmp+0x20>
 800bed6:	3901      	subs	r1, #1
 800bed8:	1884      	adds	r4, r0, r2
 800beda:	f810 2b01 	ldrb.w	r2, [r0], #1
 800bede:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800bee2:	429a      	cmp	r2, r3
 800bee4:	d103      	bne.n	800beee <strncmp+0x1c>
 800bee6:	42a0      	cmp	r0, r4
 800bee8:	d001      	beq.n	800beee <strncmp+0x1c>
 800beea:	2a00      	cmp	r2, #0
 800beec:	d1f5      	bne.n	800beda <strncmp+0x8>
 800beee:	1ad0      	subs	r0, r2, r3
 800bef0:	bd10      	pop	{r4, pc}
 800bef2:	4610      	mov	r0, r2
 800bef4:	e7fc      	b.n	800bef0 <strncmp+0x1e>
	...

0800bef8 <_localeconv_r>:
 800bef8:	4800      	ldr	r0, [pc, #0]	@ (800befc <_localeconv_r+0x4>)
 800befa:	4770      	bx	lr
 800befc:	2000028c 	.word	0x2000028c

0800bf00 <_close_r>:
 800bf00:	b538      	push	{r3, r4, r5, lr}
 800bf02:	2300      	movs	r3, #0
 800bf04:	4d05      	ldr	r5, [pc, #20]	@ (800bf1c <_close_r+0x1c>)
 800bf06:	4604      	mov	r4, r0
 800bf08:	4608      	mov	r0, r1
 800bf0a:	602b      	str	r3, [r5, #0]
 800bf0c:	f7f5 ff9b 	bl	8001e46 <_close>
 800bf10:	1c43      	adds	r3, r0, #1
 800bf12:	d102      	bne.n	800bf1a <_close_r+0x1a>
 800bf14:	682b      	ldr	r3, [r5, #0]
 800bf16:	b103      	cbz	r3, 800bf1a <_close_r+0x1a>
 800bf18:	6023      	str	r3, [r4, #0]
 800bf1a:	bd38      	pop	{r3, r4, r5, pc}
 800bf1c:	200016c4 	.word	0x200016c4

0800bf20 <_lseek_r>:
 800bf20:	b538      	push	{r3, r4, r5, lr}
 800bf22:	4604      	mov	r4, r0
 800bf24:	4608      	mov	r0, r1
 800bf26:	4611      	mov	r1, r2
 800bf28:	2200      	movs	r2, #0
 800bf2a:	4d05      	ldr	r5, [pc, #20]	@ (800bf40 <_lseek_r+0x20>)
 800bf2c:	602a      	str	r2, [r5, #0]
 800bf2e:	461a      	mov	r2, r3
 800bf30:	f7f5 ffad 	bl	8001e8e <_lseek>
 800bf34:	1c43      	adds	r3, r0, #1
 800bf36:	d102      	bne.n	800bf3e <_lseek_r+0x1e>
 800bf38:	682b      	ldr	r3, [r5, #0]
 800bf3a:	b103      	cbz	r3, 800bf3e <_lseek_r+0x1e>
 800bf3c:	6023      	str	r3, [r4, #0]
 800bf3e:	bd38      	pop	{r3, r4, r5, pc}
 800bf40:	200016c4 	.word	0x200016c4

0800bf44 <_read_r>:
 800bf44:	b538      	push	{r3, r4, r5, lr}
 800bf46:	4604      	mov	r4, r0
 800bf48:	4608      	mov	r0, r1
 800bf4a:	4611      	mov	r1, r2
 800bf4c:	2200      	movs	r2, #0
 800bf4e:	4d05      	ldr	r5, [pc, #20]	@ (800bf64 <_read_r+0x20>)
 800bf50:	602a      	str	r2, [r5, #0]
 800bf52:	461a      	mov	r2, r3
 800bf54:	f7f5 ff3e 	bl	8001dd4 <_read>
 800bf58:	1c43      	adds	r3, r0, #1
 800bf5a:	d102      	bne.n	800bf62 <_read_r+0x1e>
 800bf5c:	682b      	ldr	r3, [r5, #0]
 800bf5e:	b103      	cbz	r3, 800bf62 <_read_r+0x1e>
 800bf60:	6023      	str	r3, [r4, #0]
 800bf62:	bd38      	pop	{r3, r4, r5, pc}
 800bf64:	200016c4 	.word	0x200016c4

0800bf68 <_write_r>:
 800bf68:	b538      	push	{r3, r4, r5, lr}
 800bf6a:	4604      	mov	r4, r0
 800bf6c:	4608      	mov	r0, r1
 800bf6e:	4611      	mov	r1, r2
 800bf70:	2200      	movs	r2, #0
 800bf72:	4d05      	ldr	r5, [pc, #20]	@ (800bf88 <_write_r+0x20>)
 800bf74:	602a      	str	r2, [r5, #0]
 800bf76:	461a      	mov	r2, r3
 800bf78:	f7f5 ff49 	bl	8001e0e <_write>
 800bf7c:	1c43      	adds	r3, r0, #1
 800bf7e:	d102      	bne.n	800bf86 <_write_r+0x1e>
 800bf80:	682b      	ldr	r3, [r5, #0]
 800bf82:	b103      	cbz	r3, 800bf86 <_write_r+0x1e>
 800bf84:	6023      	str	r3, [r4, #0]
 800bf86:	bd38      	pop	{r3, r4, r5, pc}
 800bf88:	200016c4 	.word	0x200016c4

0800bf8c <__errno>:
 800bf8c:	4b01      	ldr	r3, [pc, #4]	@ (800bf94 <__errno+0x8>)
 800bf8e:	6818      	ldr	r0, [r3, #0]
 800bf90:	4770      	bx	lr
 800bf92:	bf00      	nop
 800bf94:	20000308 	.word	0x20000308

0800bf98 <__libc_init_array>:
 800bf98:	b570      	push	{r4, r5, r6, lr}
 800bf9a:	2600      	movs	r6, #0
 800bf9c:	4d0c      	ldr	r5, [pc, #48]	@ (800bfd0 <__libc_init_array+0x38>)
 800bf9e:	4c0d      	ldr	r4, [pc, #52]	@ (800bfd4 <__libc_init_array+0x3c>)
 800bfa0:	1b64      	subs	r4, r4, r5
 800bfa2:	10a4      	asrs	r4, r4, #2
 800bfa4:	42a6      	cmp	r6, r4
 800bfa6:	d109      	bne.n	800bfbc <__libc_init_array+0x24>
 800bfa8:	f002 fd6e 	bl	800ea88 <_init>
 800bfac:	2600      	movs	r6, #0
 800bfae:	4d0a      	ldr	r5, [pc, #40]	@ (800bfd8 <__libc_init_array+0x40>)
 800bfb0:	4c0a      	ldr	r4, [pc, #40]	@ (800bfdc <__libc_init_array+0x44>)
 800bfb2:	1b64      	subs	r4, r4, r5
 800bfb4:	10a4      	asrs	r4, r4, #2
 800bfb6:	42a6      	cmp	r6, r4
 800bfb8:	d105      	bne.n	800bfc6 <__libc_init_array+0x2e>
 800bfba:	bd70      	pop	{r4, r5, r6, pc}
 800bfbc:	f855 3b04 	ldr.w	r3, [r5], #4
 800bfc0:	4798      	blx	r3
 800bfc2:	3601      	adds	r6, #1
 800bfc4:	e7ee      	b.n	800bfa4 <__libc_init_array+0xc>
 800bfc6:	f855 3b04 	ldr.w	r3, [r5], #4
 800bfca:	4798      	blx	r3
 800bfcc:	3601      	adds	r6, #1
 800bfce:	e7f2      	b.n	800bfb6 <__libc_init_array+0x1e>
 800bfd0:	0800f048 	.word	0x0800f048
 800bfd4:	0800f048 	.word	0x0800f048
 800bfd8:	0800f048 	.word	0x0800f048
 800bfdc:	0800f04c 	.word	0x0800f04c

0800bfe0 <__retarget_lock_init_recursive>:
 800bfe0:	4770      	bx	lr

0800bfe2 <__retarget_lock_acquire_recursive>:
 800bfe2:	4770      	bx	lr

0800bfe4 <__retarget_lock_release_recursive>:
 800bfe4:	4770      	bx	lr

0800bfe6 <memchr>:
 800bfe6:	4603      	mov	r3, r0
 800bfe8:	b510      	push	{r4, lr}
 800bfea:	b2c9      	uxtb	r1, r1
 800bfec:	4402      	add	r2, r0
 800bfee:	4293      	cmp	r3, r2
 800bff0:	4618      	mov	r0, r3
 800bff2:	d101      	bne.n	800bff8 <memchr+0x12>
 800bff4:	2000      	movs	r0, #0
 800bff6:	e003      	b.n	800c000 <memchr+0x1a>
 800bff8:	7804      	ldrb	r4, [r0, #0]
 800bffa:	3301      	adds	r3, #1
 800bffc:	428c      	cmp	r4, r1
 800bffe:	d1f6      	bne.n	800bfee <memchr+0x8>
 800c000:	bd10      	pop	{r4, pc}

0800c002 <memcpy>:
 800c002:	440a      	add	r2, r1
 800c004:	4291      	cmp	r1, r2
 800c006:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 800c00a:	d100      	bne.n	800c00e <memcpy+0xc>
 800c00c:	4770      	bx	lr
 800c00e:	b510      	push	{r4, lr}
 800c010:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c014:	4291      	cmp	r1, r2
 800c016:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c01a:	d1f9      	bne.n	800c010 <memcpy+0xe>
 800c01c:	bd10      	pop	{r4, pc}
	...

0800c020 <nan>:
 800c020:	2000      	movs	r0, #0
 800c022:	4901      	ldr	r1, [pc, #4]	@ (800c028 <nan+0x8>)
 800c024:	4770      	bx	lr
 800c026:	bf00      	nop
 800c028:	7ff80000 	.word	0x7ff80000

0800c02c <quorem>:
 800c02c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c030:	6903      	ldr	r3, [r0, #16]
 800c032:	690c      	ldr	r4, [r1, #16]
 800c034:	4607      	mov	r7, r0
 800c036:	42a3      	cmp	r3, r4
 800c038:	db7e      	blt.n	800c138 <quorem+0x10c>
 800c03a:	3c01      	subs	r4, #1
 800c03c:	00a3      	lsls	r3, r4, #2
 800c03e:	f100 0514 	add.w	r5, r0, #20
 800c042:	f101 0814 	add.w	r8, r1, #20
 800c046:	9300      	str	r3, [sp, #0]
 800c048:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800c04c:	9301      	str	r3, [sp, #4]
 800c04e:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800c052:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800c056:	3301      	adds	r3, #1
 800c058:	429a      	cmp	r2, r3
 800c05a:	fbb2 f6f3 	udiv	r6, r2, r3
 800c05e:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800c062:	d32e      	bcc.n	800c0c2 <quorem+0x96>
 800c064:	f04f 0a00 	mov.w	sl, #0
 800c068:	46c4      	mov	ip, r8
 800c06a:	46ae      	mov	lr, r5
 800c06c:	46d3      	mov	fp, sl
 800c06e:	f85c 3b04 	ldr.w	r3, [ip], #4
 800c072:	b298      	uxth	r0, r3
 800c074:	fb06 a000 	mla	r0, r6, r0, sl
 800c078:	0c1b      	lsrs	r3, r3, #16
 800c07a:	0c02      	lsrs	r2, r0, #16
 800c07c:	fb06 2303 	mla	r3, r6, r3, r2
 800c080:	f8de 2000 	ldr.w	r2, [lr]
 800c084:	b280      	uxth	r0, r0
 800c086:	b292      	uxth	r2, r2
 800c088:	1a12      	subs	r2, r2, r0
 800c08a:	445a      	add	r2, fp
 800c08c:	f8de 0000 	ldr.w	r0, [lr]
 800c090:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800c094:	b29b      	uxth	r3, r3
 800c096:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800c09a:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800c09e:	b292      	uxth	r2, r2
 800c0a0:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800c0a4:	45e1      	cmp	r9, ip
 800c0a6:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800c0aa:	f84e 2b04 	str.w	r2, [lr], #4
 800c0ae:	d2de      	bcs.n	800c06e <quorem+0x42>
 800c0b0:	9b00      	ldr	r3, [sp, #0]
 800c0b2:	58eb      	ldr	r3, [r5, r3]
 800c0b4:	b92b      	cbnz	r3, 800c0c2 <quorem+0x96>
 800c0b6:	9b01      	ldr	r3, [sp, #4]
 800c0b8:	3b04      	subs	r3, #4
 800c0ba:	429d      	cmp	r5, r3
 800c0bc:	461a      	mov	r2, r3
 800c0be:	d32f      	bcc.n	800c120 <quorem+0xf4>
 800c0c0:	613c      	str	r4, [r7, #16]
 800c0c2:	4638      	mov	r0, r7
 800c0c4:	f001 fd10 	bl	800dae8 <__mcmp>
 800c0c8:	2800      	cmp	r0, #0
 800c0ca:	db25      	blt.n	800c118 <quorem+0xec>
 800c0cc:	4629      	mov	r1, r5
 800c0ce:	2000      	movs	r0, #0
 800c0d0:	f858 2b04 	ldr.w	r2, [r8], #4
 800c0d4:	f8d1 c000 	ldr.w	ip, [r1]
 800c0d8:	fa1f fe82 	uxth.w	lr, r2
 800c0dc:	fa1f f38c 	uxth.w	r3, ip
 800c0e0:	eba3 030e 	sub.w	r3, r3, lr
 800c0e4:	4403      	add	r3, r0
 800c0e6:	0c12      	lsrs	r2, r2, #16
 800c0e8:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800c0ec:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800c0f0:	b29b      	uxth	r3, r3
 800c0f2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800c0f6:	45c1      	cmp	r9, r8
 800c0f8:	ea4f 4022 	mov.w	r0, r2, asr #16
 800c0fc:	f841 3b04 	str.w	r3, [r1], #4
 800c100:	d2e6      	bcs.n	800c0d0 <quorem+0xa4>
 800c102:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800c106:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800c10a:	b922      	cbnz	r2, 800c116 <quorem+0xea>
 800c10c:	3b04      	subs	r3, #4
 800c10e:	429d      	cmp	r5, r3
 800c110:	461a      	mov	r2, r3
 800c112:	d30b      	bcc.n	800c12c <quorem+0x100>
 800c114:	613c      	str	r4, [r7, #16]
 800c116:	3601      	adds	r6, #1
 800c118:	4630      	mov	r0, r6
 800c11a:	b003      	add	sp, #12
 800c11c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c120:	6812      	ldr	r2, [r2, #0]
 800c122:	3b04      	subs	r3, #4
 800c124:	2a00      	cmp	r2, #0
 800c126:	d1cb      	bne.n	800c0c0 <quorem+0x94>
 800c128:	3c01      	subs	r4, #1
 800c12a:	e7c6      	b.n	800c0ba <quorem+0x8e>
 800c12c:	6812      	ldr	r2, [r2, #0]
 800c12e:	3b04      	subs	r3, #4
 800c130:	2a00      	cmp	r2, #0
 800c132:	d1ef      	bne.n	800c114 <quorem+0xe8>
 800c134:	3c01      	subs	r4, #1
 800c136:	e7ea      	b.n	800c10e <quorem+0xe2>
 800c138:	2000      	movs	r0, #0
 800c13a:	e7ee      	b.n	800c11a <quorem+0xee>
 800c13c:	0000      	movs	r0, r0
	...

0800c140 <_dtoa_r>:
 800c140:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c144:	4614      	mov	r4, r2
 800c146:	461d      	mov	r5, r3
 800c148:	69c7      	ldr	r7, [r0, #28]
 800c14a:	b097      	sub	sp, #92	@ 0x5c
 800c14c:	4683      	mov	fp, r0
 800c14e:	e9cd 4502 	strd	r4, r5, [sp, #8]
 800c152:	9e23      	ldr	r6, [sp, #140]	@ 0x8c
 800c154:	b97f      	cbnz	r7, 800c176 <_dtoa_r+0x36>
 800c156:	2010      	movs	r0, #16
 800c158:	f001 f93c 	bl	800d3d4 <malloc>
 800c15c:	4602      	mov	r2, r0
 800c15e:	f8cb 001c 	str.w	r0, [fp, #28]
 800c162:	b920      	cbnz	r0, 800c16e <_dtoa_r+0x2e>
 800c164:	21ef      	movs	r1, #239	@ 0xef
 800c166:	4ba8      	ldr	r3, [pc, #672]	@ (800c408 <_dtoa_r+0x2c8>)
 800c168:	48a8      	ldr	r0, [pc, #672]	@ (800c40c <_dtoa_r+0x2cc>)
 800c16a:	f002 f971 	bl	800e450 <__assert_func>
 800c16e:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800c172:	6007      	str	r7, [r0, #0]
 800c174:	60c7      	str	r7, [r0, #12]
 800c176:	f8db 301c 	ldr.w	r3, [fp, #28]
 800c17a:	6819      	ldr	r1, [r3, #0]
 800c17c:	b159      	cbz	r1, 800c196 <_dtoa_r+0x56>
 800c17e:	685a      	ldr	r2, [r3, #4]
 800c180:	2301      	movs	r3, #1
 800c182:	4093      	lsls	r3, r2
 800c184:	604a      	str	r2, [r1, #4]
 800c186:	608b      	str	r3, [r1, #8]
 800c188:	4658      	mov	r0, fp
 800c18a:	f001 fa2b 	bl	800d5e4 <_Bfree>
 800c18e:	2200      	movs	r2, #0
 800c190:	f8db 301c 	ldr.w	r3, [fp, #28]
 800c194:	601a      	str	r2, [r3, #0]
 800c196:	1e2b      	subs	r3, r5, #0
 800c198:	bfaf      	iteee	ge
 800c19a:	2300      	movge	r3, #0
 800c19c:	2201      	movlt	r2, #1
 800c19e:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800c1a2:	9303      	strlt	r3, [sp, #12]
 800c1a4:	bfa8      	it	ge
 800c1a6:	6033      	strge	r3, [r6, #0]
 800c1a8:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800c1ac:	4b98      	ldr	r3, [pc, #608]	@ (800c410 <_dtoa_r+0x2d0>)
 800c1ae:	bfb8      	it	lt
 800c1b0:	6032      	strlt	r2, [r6, #0]
 800c1b2:	ea33 0308 	bics.w	r3, r3, r8
 800c1b6:	d112      	bne.n	800c1de <_dtoa_r+0x9e>
 800c1b8:	f242 730f 	movw	r3, #9999	@ 0x270f
 800c1bc:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 800c1be:	6013      	str	r3, [r2, #0]
 800c1c0:	f3c8 0313 	ubfx	r3, r8, #0, #20
 800c1c4:	4323      	orrs	r3, r4
 800c1c6:	f000 8550 	beq.w	800cc6a <_dtoa_r+0xb2a>
 800c1ca:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800c1cc:	f8df a244 	ldr.w	sl, [pc, #580]	@ 800c414 <_dtoa_r+0x2d4>
 800c1d0:	2b00      	cmp	r3, #0
 800c1d2:	f000 8552 	beq.w	800cc7a <_dtoa_r+0xb3a>
 800c1d6:	f10a 0303 	add.w	r3, sl, #3
 800c1da:	f000 bd4c 	b.w	800cc76 <_dtoa_r+0xb36>
 800c1de:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800c1e2:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800c1e6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800c1ea:	2200      	movs	r2, #0
 800c1ec:	2300      	movs	r3, #0
 800c1ee:	f7f4 fc8f 	bl	8000b10 <__aeabi_dcmpeq>
 800c1f2:	4607      	mov	r7, r0
 800c1f4:	b158      	cbz	r0, 800c20e <_dtoa_r+0xce>
 800c1f6:	2301      	movs	r3, #1
 800c1f8:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 800c1fa:	6013      	str	r3, [r2, #0]
 800c1fc:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800c1fe:	b113      	cbz	r3, 800c206 <_dtoa_r+0xc6>
 800c200:	4b85      	ldr	r3, [pc, #532]	@ (800c418 <_dtoa_r+0x2d8>)
 800c202:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 800c204:	6013      	str	r3, [r2, #0]
 800c206:	f8df a214 	ldr.w	sl, [pc, #532]	@ 800c41c <_dtoa_r+0x2dc>
 800c20a:	f000 bd36 	b.w	800cc7a <_dtoa_r+0xb3a>
 800c20e:	ab14      	add	r3, sp, #80	@ 0x50
 800c210:	9301      	str	r3, [sp, #4]
 800c212:	ab15      	add	r3, sp, #84	@ 0x54
 800c214:	9300      	str	r3, [sp, #0]
 800c216:	4658      	mov	r0, fp
 800c218:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800c21c:	f001 fd7c 	bl	800dd18 <__d2b>
 800c220:	f3c8 560a 	ubfx	r6, r8, #20, #11
 800c224:	4681      	mov	r9, r0
 800c226:	2e00      	cmp	r6, #0
 800c228:	d077      	beq.n	800c31a <_dtoa_r+0x1da>
 800c22a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800c22e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800c230:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800c234:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800c238:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800c23c:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800c240:	9712      	str	r7, [sp, #72]	@ 0x48
 800c242:	4619      	mov	r1, r3
 800c244:	2200      	movs	r2, #0
 800c246:	4b76      	ldr	r3, [pc, #472]	@ (800c420 <_dtoa_r+0x2e0>)
 800c248:	f7f4 f842 	bl	80002d0 <__aeabi_dsub>
 800c24c:	a368      	add	r3, pc, #416	@ (adr r3, 800c3f0 <_dtoa_r+0x2b0>)
 800c24e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c252:	f7f4 f9f5 	bl	8000640 <__aeabi_dmul>
 800c256:	a368      	add	r3, pc, #416	@ (adr r3, 800c3f8 <_dtoa_r+0x2b8>)
 800c258:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c25c:	f7f4 f83a 	bl	80002d4 <__adddf3>
 800c260:	4604      	mov	r4, r0
 800c262:	4630      	mov	r0, r6
 800c264:	460d      	mov	r5, r1
 800c266:	f7f4 f981 	bl	800056c <__aeabi_i2d>
 800c26a:	a365      	add	r3, pc, #404	@ (adr r3, 800c400 <_dtoa_r+0x2c0>)
 800c26c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c270:	f7f4 f9e6 	bl	8000640 <__aeabi_dmul>
 800c274:	4602      	mov	r2, r0
 800c276:	460b      	mov	r3, r1
 800c278:	4620      	mov	r0, r4
 800c27a:	4629      	mov	r1, r5
 800c27c:	f7f4 f82a 	bl	80002d4 <__adddf3>
 800c280:	4604      	mov	r4, r0
 800c282:	460d      	mov	r5, r1
 800c284:	f7f4 fc8c 	bl	8000ba0 <__aeabi_d2iz>
 800c288:	2200      	movs	r2, #0
 800c28a:	4607      	mov	r7, r0
 800c28c:	2300      	movs	r3, #0
 800c28e:	4620      	mov	r0, r4
 800c290:	4629      	mov	r1, r5
 800c292:	f7f4 fc47 	bl	8000b24 <__aeabi_dcmplt>
 800c296:	b140      	cbz	r0, 800c2aa <_dtoa_r+0x16a>
 800c298:	4638      	mov	r0, r7
 800c29a:	f7f4 f967 	bl	800056c <__aeabi_i2d>
 800c29e:	4622      	mov	r2, r4
 800c2a0:	462b      	mov	r3, r5
 800c2a2:	f7f4 fc35 	bl	8000b10 <__aeabi_dcmpeq>
 800c2a6:	b900      	cbnz	r0, 800c2aa <_dtoa_r+0x16a>
 800c2a8:	3f01      	subs	r7, #1
 800c2aa:	2f16      	cmp	r7, #22
 800c2ac:	d853      	bhi.n	800c356 <_dtoa_r+0x216>
 800c2ae:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800c2b2:	4b5c      	ldr	r3, [pc, #368]	@ (800c424 <_dtoa_r+0x2e4>)
 800c2b4:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800c2b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c2bc:	f7f4 fc32 	bl	8000b24 <__aeabi_dcmplt>
 800c2c0:	2800      	cmp	r0, #0
 800c2c2:	d04a      	beq.n	800c35a <_dtoa_r+0x21a>
 800c2c4:	2300      	movs	r3, #0
 800c2c6:	3f01      	subs	r7, #1
 800c2c8:	930f      	str	r3, [sp, #60]	@ 0x3c
 800c2ca:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800c2cc:	1b9b      	subs	r3, r3, r6
 800c2ce:	1e5a      	subs	r2, r3, #1
 800c2d0:	bf46      	itte	mi
 800c2d2:	f1c3 0801 	rsbmi	r8, r3, #1
 800c2d6:	2300      	movmi	r3, #0
 800c2d8:	f04f 0800 	movpl.w	r8, #0
 800c2dc:	9209      	str	r2, [sp, #36]	@ 0x24
 800c2de:	bf48      	it	mi
 800c2e0:	9309      	strmi	r3, [sp, #36]	@ 0x24
 800c2e2:	2f00      	cmp	r7, #0
 800c2e4:	db3b      	blt.n	800c35e <_dtoa_r+0x21e>
 800c2e6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c2e8:	970e      	str	r7, [sp, #56]	@ 0x38
 800c2ea:	443b      	add	r3, r7
 800c2ec:	9309      	str	r3, [sp, #36]	@ 0x24
 800c2ee:	2300      	movs	r3, #0
 800c2f0:	930a      	str	r3, [sp, #40]	@ 0x28
 800c2f2:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800c2f4:	2b09      	cmp	r3, #9
 800c2f6:	d866      	bhi.n	800c3c6 <_dtoa_r+0x286>
 800c2f8:	2b05      	cmp	r3, #5
 800c2fa:	bfc4      	itt	gt
 800c2fc:	3b04      	subgt	r3, #4
 800c2fe:	9320      	strgt	r3, [sp, #128]	@ 0x80
 800c300:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800c302:	bfc8      	it	gt
 800c304:	2400      	movgt	r4, #0
 800c306:	f1a3 0302 	sub.w	r3, r3, #2
 800c30a:	bfd8      	it	le
 800c30c:	2401      	movle	r4, #1
 800c30e:	2b03      	cmp	r3, #3
 800c310:	d864      	bhi.n	800c3dc <_dtoa_r+0x29c>
 800c312:	e8df f003 	tbb	[pc, r3]
 800c316:	382b      	.short	0x382b
 800c318:	5636      	.short	0x5636
 800c31a:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 800c31e:	441e      	add	r6, r3
 800c320:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800c324:	2b20      	cmp	r3, #32
 800c326:	bfc1      	itttt	gt
 800c328:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800c32c:	fa08 f803 	lslgt.w	r8, r8, r3
 800c330:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800c334:	fa24 f303 	lsrgt.w	r3, r4, r3
 800c338:	bfd6      	itet	le
 800c33a:	f1c3 0320 	rsble	r3, r3, #32
 800c33e:	ea48 0003 	orrgt.w	r0, r8, r3
 800c342:	fa04 f003 	lslle.w	r0, r4, r3
 800c346:	f7f4 f901 	bl	800054c <__aeabi_ui2d>
 800c34a:	2201      	movs	r2, #1
 800c34c:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800c350:	3e01      	subs	r6, #1
 800c352:	9212      	str	r2, [sp, #72]	@ 0x48
 800c354:	e775      	b.n	800c242 <_dtoa_r+0x102>
 800c356:	2301      	movs	r3, #1
 800c358:	e7b6      	b.n	800c2c8 <_dtoa_r+0x188>
 800c35a:	900f      	str	r0, [sp, #60]	@ 0x3c
 800c35c:	e7b5      	b.n	800c2ca <_dtoa_r+0x18a>
 800c35e:	427b      	negs	r3, r7
 800c360:	930a      	str	r3, [sp, #40]	@ 0x28
 800c362:	2300      	movs	r3, #0
 800c364:	eba8 0807 	sub.w	r8, r8, r7
 800c368:	930e      	str	r3, [sp, #56]	@ 0x38
 800c36a:	e7c2      	b.n	800c2f2 <_dtoa_r+0x1b2>
 800c36c:	2300      	movs	r3, #0
 800c36e:	930b      	str	r3, [sp, #44]	@ 0x2c
 800c370:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800c372:	2b00      	cmp	r3, #0
 800c374:	dc35      	bgt.n	800c3e2 <_dtoa_r+0x2a2>
 800c376:	2301      	movs	r3, #1
 800c378:	461a      	mov	r2, r3
 800c37a:	e9cd 3307 	strd	r3, r3, [sp, #28]
 800c37e:	9221      	str	r2, [sp, #132]	@ 0x84
 800c380:	e00b      	b.n	800c39a <_dtoa_r+0x25a>
 800c382:	2301      	movs	r3, #1
 800c384:	e7f3      	b.n	800c36e <_dtoa_r+0x22e>
 800c386:	2300      	movs	r3, #0
 800c388:	930b      	str	r3, [sp, #44]	@ 0x2c
 800c38a:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800c38c:	18fb      	adds	r3, r7, r3
 800c38e:	9308      	str	r3, [sp, #32]
 800c390:	3301      	adds	r3, #1
 800c392:	2b01      	cmp	r3, #1
 800c394:	9307      	str	r3, [sp, #28]
 800c396:	bfb8      	it	lt
 800c398:	2301      	movlt	r3, #1
 800c39a:	2100      	movs	r1, #0
 800c39c:	2204      	movs	r2, #4
 800c39e:	f8db 001c 	ldr.w	r0, [fp, #28]
 800c3a2:	f102 0514 	add.w	r5, r2, #20
 800c3a6:	429d      	cmp	r5, r3
 800c3a8:	d91f      	bls.n	800c3ea <_dtoa_r+0x2aa>
 800c3aa:	6041      	str	r1, [r0, #4]
 800c3ac:	4658      	mov	r0, fp
 800c3ae:	f001 f8d9 	bl	800d564 <_Balloc>
 800c3b2:	4682      	mov	sl, r0
 800c3b4:	2800      	cmp	r0, #0
 800c3b6:	d139      	bne.n	800c42c <_dtoa_r+0x2ec>
 800c3b8:	4602      	mov	r2, r0
 800c3ba:	f240 11af 	movw	r1, #431	@ 0x1af
 800c3be:	4b1a      	ldr	r3, [pc, #104]	@ (800c428 <_dtoa_r+0x2e8>)
 800c3c0:	e6d2      	b.n	800c168 <_dtoa_r+0x28>
 800c3c2:	2301      	movs	r3, #1
 800c3c4:	e7e0      	b.n	800c388 <_dtoa_r+0x248>
 800c3c6:	2401      	movs	r4, #1
 800c3c8:	2300      	movs	r3, #0
 800c3ca:	940b      	str	r4, [sp, #44]	@ 0x2c
 800c3cc:	9320      	str	r3, [sp, #128]	@ 0x80
 800c3ce:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800c3d2:	2200      	movs	r2, #0
 800c3d4:	e9cd 3307 	strd	r3, r3, [sp, #28]
 800c3d8:	2312      	movs	r3, #18
 800c3da:	e7d0      	b.n	800c37e <_dtoa_r+0x23e>
 800c3dc:	2301      	movs	r3, #1
 800c3de:	930b      	str	r3, [sp, #44]	@ 0x2c
 800c3e0:	e7f5      	b.n	800c3ce <_dtoa_r+0x28e>
 800c3e2:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800c3e4:	e9cd 3307 	strd	r3, r3, [sp, #28]
 800c3e8:	e7d7      	b.n	800c39a <_dtoa_r+0x25a>
 800c3ea:	3101      	adds	r1, #1
 800c3ec:	0052      	lsls	r2, r2, #1
 800c3ee:	e7d8      	b.n	800c3a2 <_dtoa_r+0x262>
 800c3f0:	636f4361 	.word	0x636f4361
 800c3f4:	3fd287a7 	.word	0x3fd287a7
 800c3f8:	8b60c8b3 	.word	0x8b60c8b3
 800c3fc:	3fc68a28 	.word	0x3fc68a28
 800c400:	509f79fb 	.word	0x509f79fb
 800c404:	3fd34413 	.word	0x3fd34413
 800c408:	0800ecb9 	.word	0x0800ecb9
 800c40c:	0800ecd0 	.word	0x0800ecd0
 800c410:	7ff00000 	.word	0x7ff00000
 800c414:	0800ecb5 	.word	0x0800ecb5
 800c418:	0800ec81 	.word	0x0800ec81
 800c41c:	0800ec80 	.word	0x0800ec80
 800c420:	3ff80000 	.word	0x3ff80000
 800c424:	0800ee28 	.word	0x0800ee28
 800c428:	0800ed28 	.word	0x0800ed28
 800c42c:	f8db 301c 	ldr.w	r3, [fp, #28]
 800c430:	6018      	str	r0, [r3, #0]
 800c432:	9b07      	ldr	r3, [sp, #28]
 800c434:	2b0e      	cmp	r3, #14
 800c436:	f200 80a4 	bhi.w	800c582 <_dtoa_r+0x442>
 800c43a:	2c00      	cmp	r4, #0
 800c43c:	f000 80a1 	beq.w	800c582 <_dtoa_r+0x442>
 800c440:	2f00      	cmp	r7, #0
 800c442:	dd33      	ble.n	800c4ac <_dtoa_r+0x36c>
 800c444:	4b86      	ldr	r3, [pc, #536]	@ (800c660 <_dtoa_r+0x520>)
 800c446:	f007 020f 	and.w	r2, r7, #15
 800c44a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c44e:	05f8      	lsls	r0, r7, #23
 800c450:	e9d3 3400 	ldrd	r3, r4, [r3]
 800c454:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800c458:	ea4f 1427 	mov.w	r4, r7, asr #4
 800c45c:	d516      	bpl.n	800c48c <_dtoa_r+0x34c>
 800c45e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800c462:	4b80      	ldr	r3, [pc, #512]	@ (800c664 <_dtoa_r+0x524>)
 800c464:	2603      	movs	r6, #3
 800c466:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800c46a:	f7f4 fa13 	bl	8000894 <__aeabi_ddiv>
 800c46e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c472:	f004 040f 	and.w	r4, r4, #15
 800c476:	4d7b      	ldr	r5, [pc, #492]	@ (800c664 <_dtoa_r+0x524>)
 800c478:	b954      	cbnz	r4, 800c490 <_dtoa_r+0x350>
 800c47a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c47e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c482:	f7f4 fa07 	bl	8000894 <__aeabi_ddiv>
 800c486:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c48a:	e028      	b.n	800c4de <_dtoa_r+0x39e>
 800c48c:	2602      	movs	r6, #2
 800c48e:	e7f2      	b.n	800c476 <_dtoa_r+0x336>
 800c490:	07e1      	lsls	r1, r4, #31
 800c492:	d508      	bpl.n	800c4a6 <_dtoa_r+0x366>
 800c494:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800c498:	e9d5 2300 	ldrd	r2, r3, [r5]
 800c49c:	f7f4 f8d0 	bl	8000640 <__aeabi_dmul>
 800c4a0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800c4a4:	3601      	adds	r6, #1
 800c4a6:	1064      	asrs	r4, r4, #1
 800c4a8:	3508      	adds	r5, #8
 800c4aa:	e7e5      	b.n	800c478 <_dtoa_r+0x338>
 800c4ac:	f000 80d2 	beq.w	800c654 <_dtoa_r+0x514>
 800c4b0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800c4b4:	427c      	negs	r4, r7
 800c4b6:	4b6a      	ldr	r3, [pc, #424]	@ (800c660 <_dtoa_r+0x520>)
 800c4b8:	f004 020f 	and.w	r2, r4, #15
 800c4bc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c4c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c4c4:	f7f4 f8bc 	bl	8000640 <__aeabi_dmul>
 800c4c8:	2602      	movs	r6, #2
 800c4ca:	2300      	movs	r3, #0
 800c4cc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c4d0:	4d64      	ldr	r5, [pc, #400]	@ (800c664 <_dtoa_r+0x524>)
 800c4d2:	1124      	asrs	r4, r4, #4
 800c4d4:	2c00      	cmp	r4, #0
 800c4d6:	f040 80b2 	bne.w	800c63e <_dtoa_r+0x4fe>
 800c4da:	2b00      	cmp	r3, #0
 800c4dc:	d1d3      	bne.n	800c486 <_dtoa_r+0x346>
 800c4de:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800c4e2:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c4e4:	2b00      	cmp	r3, #0
 800c4e6:	f000 80b7 	beq.w	800c658 <_dtoa_r+0x518>
 800c4ea:	2200      	movs	r2, #0
 800c4ec:	4620      	mov	r0, r4
 800c4ee:	4629      	mov	r1, r5
 800c4f0:	4b5d      	ldr	r3, [pc, #372]	@ (800c668 <_dtoa_r+0x528>)
 800c4f2:	f7f4 fb17 	bl	8000b24 <__aeabi_dcmplt>
 800c4f6:	2800      	cmp	r0, #0
 800c4f8:	f000 80ae 	beq.w	800c658 <_dtoa_r+0x518>
 800c4fc:	9b07      	ldr	r3, [sp, #28]
 800c4fe:	2b00      	cmp	r3, #0
 800c500:	f000 80aa 	beq.w	800c658 <_dtoa_r+0x518>
 800c504:	9b08      	ldr	r3, [sp, #32]
 800c506:	2b00      	cmp	r3, #0
 800c508:	dd37      	ble.n	800c57a <_dtoa_r+0x43a>
 800c50a:	1e7b      	subs	r3, r7, #1
 800c50c:	4620      	mov	r0, r4
 800c50e:	9304      	str	r3, [sp, #16]
 800c510:	2200      	movs	r2, #0
 800c512:	4629      	mov	r1, r5
 800c514:	4b55      	ldr	r3, [pc, #340]	@ (800c66c <_dtoa_r+0x52c>)
 800c516:	f7f4 f893 	bl	8000640 <__aeabi_dmul>
 800c51a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c51e:	9c08      	ldr	r4, [sp, #32]
 800c520:	3601      	adds	r6, #1
 800c522:	4630      	mov	r0, r6
 800c524:	f7f4 f822 	bl	800056c <__aeabi_i2d>
 800c528:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800c52c:	f7f4 f888 	bl	8000640 <__aeabi_dmul>
 800c530:	2200      	movs	r2, #0
 800c532:	4b4f      	ldr	r3, [pc, #316]	@ (800c670 <_dtoa_r+0x530>)
 800c534:	f7f3 fece 	bl	80002d4 <__adddf3>
 800c538:	4605      	mov	r5, r0
 800c53a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800c53e:	2c00      	cmp	r4, #0
 800c540:	f040 809a 	bne.w	800c678 <_dtoa_r+0x538>
 800c544:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c548:	2200      	movs	r2, #0
 800c54a:	4b4a      	ldr	r3, [pc, #296]	@ (800c674 <_dtoa_r+0x534>)
 800c54c:	f7f3 fec0 	bl	80002d0 <__aeabi_dsub>
 800c550:	4602      	mov	r2, r0
 800c552:	460b      	mov	r3, r1
 800c554:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800c558:	462a      	mov	r2, r5
 800c55a:	4633      	mov	r3, r6
 800c55c:	f7f4 fb00 	bl	8000b60 <__aeabi_dcmpgt>
 800c560:	2800      	cmp	r0, #0
 800c562:	f040 828e 	bne.w	800ca82 <_dtoa_r+0x942>
 800c566:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c56a:	462a      	mov	r2, r5
 800c56c:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800c570:	f7f4 fad8 	bl	8000b24 <__aeabi_dcmplt>
 800c574:	2800      	cmp	r0, #0
 800c576:	f040 8127 	bne.w	800c7c8 <_dtoa_r+0x688>
 800c57a:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800c57e:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800c582:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800c584:	2b00      	cmp	r3, #0
 800c586:	f2c0 8163 	blt.w	800c850 <_dtoa_r+0x710>
 800c58a:	2f0e      	cmp	r7, #14
 800c58c:	f300 8160 	bgt.w	800c850 <_dtoa_r+0x710>
 800c590:	4b33      	ldr	r3, [pc, #204]	@ (800c660 <_dtoa_r+0x520>)
 800c592:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800c596:	e9d3 3400 	ldrd	r3, r4, [r3]
 800c59a:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800c59e:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800c5a0:	2b00      	cmp	r3, #0
 800c5a2:	da03      	bge.n	800c5ac <_dtoa_r+0x46c>
 800c5a4:	9b07      	ldr	r3, [sp, #28]
 800c5a6:	2b00      	cmp	r3, #0
 800c5a8:	f340 8100 	ble.w	800c7ac <_dtoa_r+0x66c>
 800c5ac:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800c5b0:	4656      	mov	r6, sl
 800c5b2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c5b6:	4620      	mov	r0, r4
 800c5b8:	4629      	mov	r1, r5
 800c5ba:	f7f4 f96b 	bl	8000894 <__aeabi_ddiv>
 800c5be:	f7f4 faef 	bl	8000ba0 <__aeabi_d2iz>
 800c5c2:	4680      	mov	r8, r0
 800c5c4:	f7f3 ffd2 	bl	800056c <__aeabi_i2d>
 800c5c8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c5cc:	f7f4 f838 	bl	8000640 <__aeabi_dmul>
 800c5d0:	4602      	mov	r2, r0
 800c5d2:	460b      	mov	r3, r1
 800c5d4:	4620      	mov	r0, r4
 800c5d6:	4629      	mov	r1, r5
 800c5d8:	f7f3 fe7a 	bl	80002d0 <__aeabi_dsub>
 800c5dc:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800c5e0:	9d07      	ldr	r5, [sp, #28]
 800c5e2:	f806 4b01 	strb.w	r4, [r6], #1
 800c5e6:	eba6 040a 	sub.w	r4, r6, sl
 800c5ea:	42a5      	cmp	r5, r4
 800c5ec:	4602      	mov	r2, r0
 800c5ee:	460b      	mov	r3, r1
 800c5f0:	f040 8116 	bne.w	800c820 <_dtoa_r+0x6e0>
 800c5f4:	f7f3 fe6e 	bl	80002d4 <__adddf3>
 800c5f8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c5fc:	4604      	mov	r4, r0
 800c5fe:	460d      	mov	r5, r1
 800c600:	f7f4 faae 	bl	8000b60 <__aeabi_dcmpgt>
 800c604:	2800      	cmp	r0, #0
 800c606:	f040 80f8 	bne.w	800c7fa <_dtoa_r+0x6ba>
 800c60a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c60e:	4620      	mov	r0, r4
 800c610:	4629      	mov	r1, r5
 800c612:	f7f4 fa7d 	bl	8000b10 <__aeabi_dcmpeq>
 800c616:	b118      	cbz	r0, 800c620 <_dtoa_r+0x4e0>
 800c618:	f018 0f01 	tst.w	r8, #1
 800c61c:	f040 80ed 	bne.w	800c7fa <_dtoa_r+0x6ba>
 800c620:	4649      	mov	r1, r9
 800c622:	4658      	mov	r0, fp
 800c624:	f000 ffde 	bl	800d5e4 <_Bfree>
 800c628:	2300      	movs	r3, #0
 800c62a:	7033      	strb	r3, [r6, #0]
 800c62c:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 800c62e:	3701      	adds	r7, #1
 800c630:	601f      	str	r7, [r3, #0]
 800c632:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800c634:	2b00      	cmp	r3, #0
 800c636:	f000 8320 	beq.w	800cc7a <_dtoa_r+0xb3a>
 800c63a:	601e      	str	r6, [r3, #0]
 800c63c:	e31d      	b.n	800cc7a <_dtoa_r+0xb3a>
 800c63e:	07e2      	lsls	r2, r4, #31
 800c640:	d505      	bpl.n	800c64e <_dtoa_r+0x50e>
 800c642:	e9d5 2300 	ldrd	r2, r3, [r5]
 800c646:	f7f3 fffb 	bl	8000640 <__aeabi_dmul>
 800c64a:	2301      	movs	r3, #1
 800c64c:	3601      	adds	r6, #1
 800c64e:	1064      	asrs	r4, r4, #1
 800c650:	3508      	adds	r5, #8
 800c652:	e73f      	b.n	800c4d4 <_dtoa_r+0x394>
 800c654:	2602      	movs	r6, #2
 800c656:	e742      	b.n	800c4de <_dtoa_r+0x39e>
 800c658:	9c07      	ldr	r4, [sp, #28]
 800c65a:	9704      	str	r7, [sp, #16]
 800c65c:	e761      	b.n	800c522 <_dtoa_r+0x3e2>
 800c65e:	bf00      	nop
 800c660:	0800ee28 	.word	0x0800ee28
 800c664:	0800ee00 	.word	0x0800ee00
 800c668:	3ff00000 	.word	0x3ff00000
 800c66c:	40240000 	.word	0x40240000
 800c670:	401c0000 	.word	0x401c0000
 800c674:	40140000 	.word	0x40140000
 800c678:	4b70      	ldr	r3, [pc, #448]	@ (800c83c <_dtoa_r+0x6fc>)
 800c67a:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800c67c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800c680:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800c684:	4454      	add	r4, sl
 800c686:	2900      	cmp	r1, #0
 800c688:	d045      	beq.n	800c716 <_dtoa_r+0x5d6>
 800c68a:	2000      	movs	r0, #0
 800c68c:	496c      	ldr	r1, [pc, #432]	@ (800c840 <_dtoa_r+0x700>)
 800c68e:	f7f4 f901 	bl	8000894 <__aeabi_ddiv>
 800c692:	4633      	mov	r3, r6
 800c694:	462a      	mov	r2, r5
 800c696:	f7f3 fe1b 	bl	80002d0 <__aeabi_dsub>
 800c69a:	4656      	mov	r6, sl
 800c69c:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800c6a0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c6a4:	f7f4 fa7c 	bl	8000ba0 <__aeabi_d2iz>
 800c6a8:	4605      	mov	r5, r0
 800c6aa:	f7f3 ff5f 	bl	800056c <__aeabi_i2d>
 800c6ae:	4602      	mov	r2, r0
 800c6b0:	460b      	mov	r3, r1
 800c6b2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c6b6:	f7f3 fe0b 	bl	80002d0 <__aeabi_dsub>
 800c6ba:	4602      	mov	r2, r0
 800c6bc:	460b      	mov	r3, r1
 800c6be:	3530      	adds	r5, #48	@ 0x30
 800c6c0:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800c6c4:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800c6c8:	f806 5b01 	strb.w	r5, [r6], #1
 800c6cc:	f7f4 fa2a 	bl	8000b24 <__aeabi_dcmplt>
 800c6d0:	2800      	cmp	r0, #0
 800c6d2:	d163      	bne.n	800c79c <_dtoa_r+0x65c>
 800c6d4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800c6d8:	2000      	movs	r0, #0
 800c6da:	495a      	ldr	r1, [pc, #360]	@ (800c844 <_dtoa_r+0x704>)
 800c6dc:	f7f3 fdf8 	bl	80002d0 <__aeabi_dsub>
 800c6e0:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800c6e4:	f7f4 fa1e 	bl	8000b24 <__aeabi_dcmplt>
 800c6e8:	2800      	cmp	r0, #0
 800c6ea:	f040 8087 	bne.w	800c7fc <_dtoa_r+0x6bc>
 800c6ee:	42a6      	cmp	r6, r4
 800c6f0:	f43f af43 	beq.w	800c57a <_dtoa_r+0x43a>
 800c6f4:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800c6f8:	2200      	movs	r2, #0
 800c6fa:	4b53      	ldr	r3, [pc, #332]	@ (800c848 <_dtoa_r+0x708>)
 800c6fc:	f7f3 ffa0 	bl	8000640 <__aeabi_dmul>
 800c700:	2200      	movs	r2, #0
 800c702:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800c706:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c70a:	4b4f      	ldr	r3, [pc, #316]	@ (800c848 <_dtoa_r+0x708>)
 800c70c:	f7f3 ff98 	bl	8000640 <__aeabi_dmul>
 800c710:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c714:	e7c4      	b.n	800c6a0 <_dtoa_r+0x560>
 800c716:	4631      	mov	r1, r6
 800c718:	4628      	mov	r0, r5
 800c71a:	f7f3 ff91 	bl	8000640 <__aeabi_dmul>
 800c71e:	4656      	mov	r6, sl
 800c720:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800c724:	9413      	str	r4, [sp, #76]	@ 0x4c
 800c726:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c72a:	f7f4 fa39 	bl	8000ba0 <__aeabi_d2iz>
 800c72e:	4605      	mov	r5, r0
 800c730:	f7f3 ff1c 	bl	800056c <__aeabi_i2d>
 800c734:	4602      	mov	r2, r0
 800c736:	460b      	mov	r3, r1
 800c738:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c73c:	f7f3 fdc8 	bl	80002d0 <__aeabi_dsub>
 800c740:	4602      	mov	r2, r0
 800c742:	460b      	mov	r3, r1
 800c744:	3530      	adds	r5, #48	@ 0x30
 800c746:	f806 5b01 	strb.w	r5, [r6], #1
 800c74a:	42a6      	cmp	r6, r4
 800c74c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800c750:	f04f 0200 	mov.w	r2, #0
 800c754:	d124      	bne.n	800c7a0 <_dtoa_r+0x660>
 800c756:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800c75a:	4b39      	ldr	r3, [pc, #228]	@ (800c840 <_dtoa_r+0x700>)
 800c75c:	f7f3 fdba 	bl	80002d4 <__adddf3>
 800c760:	4602      	mov	r2, r0
 800c762:	460b      	mov	r3, r1
 800c764:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c768:	f7f4 f9fa 	bl	8000b60 <__aeabi_dcmpgt>
 800c76c:	2800      	cmp	r0, #0
 800c76e:	d145      	bne.n	800c7fc <_dtoa_r+0x6bc>
 800c770:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800c774:	2000      	movs	r0, #0
 800c776:	4932      	ldr	r1, [pc, #200]	@ (800c840 <_dtoa_r+0x700>)
 800c778:	f7f3 fdaa 	bl	80002d0 <__aeabi_dsub>
 800c77c:	4602      	mov	r2, r0
 800c77e:	460b      	mov	r3, r1
 800c780:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c784:	f7f4 f9ce 	bl	8000b24 <__aeabi_dcmplt>
 800c788:	2800      	cmp	r0, #0
 800c78a:	f43f aef6 	beq.w	800c57a <_dtoa_r+0x43a>
 800c78e:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 800c790:	1e73      	subs	r3, r6, #1
 800c792:	9313      	str	r3, [sp, #76]	@ 0x4c
 800c794:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800c798:	2b30      	cmp	r3, #48	@ 0x30
 800c79a:	d0f8      	beq.n	800c78e <_dtoa_r+0x64e>
 800c79c:	9f04      	ldr	r7, [sp, #16]
 800c79e:	e73f      	b.n	800c620 <_dtoa_r+0x4e0>
 800c7a0:	4b29      	ldr	r3, [pc, #164]	@ (800c848 <_dtoa_r+0x708>)
 800c7a2:	f7f3 ff4d 	bl	8000640 <__aeabi_dmul>
 800c7a6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c7aa:	e7bc      	b.n	800c726 <_dtoa_r+0x5e6>
 800c7ac:	d10c      	bne.n	800c7c8 <_dtoa_r+0x688>
 800c7ae:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800c7b2:	2200      	movs	r2, #0
 800c7b4:	4b25      	ldr	r3, [pc, #148]	@ (800c84c <_dtoa_r+0x70c>)
 800c7b6:	f7f3 ff43 	bl	8000640 <__aeabi_dmul>
 800c7ba:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800c7be:	f7f4 f9c5 	bl	8000b4c <__aeabi_dcmpge>
 800c7c2:	2800      	cmp	r0, #0
 800c7c4:	f000 815b 	beq.w	800ca7e <_dtoa_r+0x93e>
 800c7c8:	2400      	movs	r4, #0
 800c7ca:	4625      	mov	r5, r4
 800c7cc:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800c7ce:	4656      	mov	r6, sl
 800c7d0:	43db      	mvns	r3, r3
 800c7d2:	9304      	str	r3, [sp, #16]
 800c7d4:	2700      	movs	r7, #0
 800c7d6:	4621      	mov	r1, r4
 800c7d8:	4658      	mov	r0, fp
 800c7da:	f000 ff03 	bl	800d5e4 <_Bfree>
 800c7de:	2d00      	cmp	r5, #0
 800c7e0:	d0dc      	beq.n	800c79c <_dtoa_r+0x65c>
 800c7e2:	b12f      	cbz	r7, 800c7f0 <_dtoa_r+0x6b0>
 800c7e4:	42af      	cmp	r7, r5
 800c7e6:	d003      	beq.n	800c7f0 <_dtoa_r+0x6b0>
 800c7e8:	4639      	mov	r1, r7
 800c7ea:	4658      	mov	r0, fp
 800c7ec:	f000 fefa 	bl	800d5e4 <_Bfree>
 800c7f0:	4629      	mov	r1, r5
 800c7f2:	4658      	mov	r0, fp
 800c7f4:	f000 fef6 	bl	800d5e4 <_Bfree>
 800c7f8:	e7d0      	b.n	800c79c <_dtoa_r+0x65c>
 800c7fa:	9704      	str	r7, [sp, #16]
 800c7fc:	4633      	mov	r3, r6
 800c7fe:	461e      	mov	r6, r3
 800c800:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800c804:	2a39      	cmp	r2, #57	@ 0x39
 800c806:	d107      	bne.n	800c818 <_dtoa_r+0x6d8>
 800c808:	459a      	cmp	sl, r3
 800c80a:	d1f8      	bne.n	800c7fe <_dtoa_r+0x6be>
 800c80c:	9a04      	ldr	r2, [sp, #16]
 800c80e:	3201      	adds	r2, #1
 800c810:	9204      	str	r2, [sp, #16]
 800c812:	2230      	movs	r2, #48	@ 0x30
 800c814:	f88a 2000 	strb.w	r2, [sl]
 800c818:	781a      	ldrb	r2, [r3, #0]
 800c81a:	3201      	adds	r2, #1
 800c81c:	701a      	strb	r2, [r3, #0]
 800c81e:	e7bd      	b.n	800c79c <_dtoa_r+0x65c>
 800c820:	2200      	movs	r2, #0
 800c822:	4b09      	ldr	r3, [pc, #36]	@ (800c848 <_dtoa_r+0x708>)
 800c824:	f7f3 ff0c 	bl	8000640 <__aeabi_dmul>
 800c828:	2200      	movs	r2, #0
 800c82a:	2300      	movs	r3, #0
 800c82c:	4604      	mov	r4, r0
 800c82e:	460d      	mov	r5, r1
 800c830:	f7f4 f96e 	bl	8000b10 <__aeabi_dcmpeq>
 800c834:	2800      	cmp	r0, #0
 800c836:	f43f aebc 	beq.w	800c5b2 <_dtoa_r+0x472>
 800c83a:	e6f1      	b.n	800c620 <_dtoa_r+0x4e0>
 800c83c:	0800ee28 	.word	0x0800ee28
 800c840:	3fe00000 	.word	0x3fe00000
 800c844:	3ff00000 	.word	0x3ff00000
 800c848:	40240000 	.word	0x40240000
 800c84c:	40140000 	.word	0x40140000
 800c850:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800c852:	2a00      	cmp	r2, #0
 800c854:	f000 80db 	beq.w	800ca0e <_dtoa_r+0x8ce>
 800c858:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800c85a:	2a01      	cmp	r2, #1
 800c85c:	f300 80bf 	bgt.w	800c9de <_dtoa_r+0x89e>
 800c860:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800c862:	2a00      	cmp	r2, #0
 800c864:	f000 80b7 	beq.w	800c9d6 <_dtoa_r+0x896>
 800c868:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800c86c:	4646      	mov	r6, r8
 800c86e:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800c870:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c872:	2101      	movs	r1, #1
 800c874:	441a      	add	r2, r3
 800c876:	4658      	mov	r0, fp
 800c878:	4498      	add	r8, r3
 800c87a:	9209      	str	r2, [sp, #36]	@ 0x24
 800c87c:	f000 ffb0 	bl	800d7e0 <__i2b>
 800c880:	4605      	mov	r5, r0
 800c882:	b15e      	cbz	r6, 800c89c <_dtoa_r+0x75c>
 800c884:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c886:	2b00      	cmp	r3, #0
 800c888:	dd08      	ble.n	800c89c <_dtoa_r+0x75c>
 800c88a:	42b3      	cmp	r3, r6
 800c88c:	bfa8      	it	ge
 800c88e:	4633      	movge	r3, r6
 800c890:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c892:	eba8 0803 	sub.w	r8, r8, r3
 800c896:	1af6      	subs	r6, r6, r3
 800c898:	1ad3      	subs	r3, r2, r3
 800c89a:	9309      	str	r3, [sp, #36]	@ 0x24
 800c89c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c89e:	b1f3      	cbz	r3, 800c8de <_dtoa_r+0x79e>
 800c8a0:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c8a2:	2b00      	cmp	r3, #0
 800c8a4:	f000 80b7 	beq.w	800ca16 <_dtoa_r+0x8d6>
 800c8a8:	b18c      	cbz	r4, 800c8ce <_dtoa_r+0x78e>
 800c8aa:	4629      	mov	r1, r5
 800c8ac:	4622      	mov	r2, r4
 800c8ae:	4658      	mov	r0, fp
 800c8b0:	f001 f854 	bl	800d95c <__pow5mult>
 800c8b4:	464a      	mov	r2, r9
 800c8b6:	4601      	mov	r1, r0
 800c8b8:	4605      	mov	r5, r0
 800c8ba:	4658      	mov	r0, fp
 800c8bc:	f000 ffa6 	bl	800d80c <__multiply>
 800c8c0:	4649      	mov	r1, r9
 800c8c2:	9004      	str	r0, [sp, #16]
 800c8c4:	4658      	mov	r0, fp
 800c8c6:	f000 fe8d 	bl	800d5e4 <_Bfree>
 800c8ca:	9b04      	ldr	r3, [sp, #16]
 800c8cc:	4699      	mov	r9, r3
 800c8ce:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c8d0:	1b1a      	subs	r2, r3, r4
 800c8d2:	d004      	beq.n	800c8de <_dtoa_r+0x79e>
 800c8d4:	4649      	mov	r1, r9
 800c8d6:	4658      	mov	r0, fp
 800c8d8:	f001 f840 	bl	800d95c <__pow5mult>
 800c8dc:	4681      	mov	r9, r0
 800c8de:	2101      	movs	r1, #1
 800c8e0:	4658      	mov	r0, fp
 800c8e2:	f000 ff7d 	bl	800d7e0 <__i2b>
 800c8e6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c8e8:	4604      	mov	r4, r0
 800c8ea:	2b00      	cmp	r3, #0
 800c8ec:	f000 81c9 	beq.w	800cc82 <_dtoa_r+0xb42>
 800c8f0:	461a      	mov	r2, r3
 800c8f2:	4601      	mov	r1, r0
 800c8f4:	4658      	mov	r0, fp
 800c8f6:	f001 f831 	bl	800d95c <__pow5mult>
 800c8fa:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800c8fc:	4604      	mov	r4, r0
 800c8fe:	2b01      	cmp	r3, #1
 800c900:	f300 808f 	bgt.w	800ca22 <_dtoa_r+0x8e2>
 800c904:	9b02      	ldr	r3, [sp, #8]
 800c906:	2b00      	cmp	r3, #0
 800c908:	f040 8087 	bne.w	800ca1a <_dtoa_r+0x8da>
 800c90c:	9b03      	ldr	r3, [sp, #12]
 800c90e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800c912:	2b00      	cmp	r3, #0
 800c914:	f040 8083 	bne.w	800ca1e <_dtoa_r+0x8de>
 800c918:	9b03      	ldr	r3, [sp, #12]
 800c91a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800c91e:	0d1b      	lsrs	r3, r3, #20
 800c920:	051b      	lsls	r3, r3, #20
 800c922:	b12b      	cbz	r3, 800c930 <_dtoa_r+0x7f0>
 800c924:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c926:	f108 0801 	add.w	r8, r8, #1
 800c92a:	3301      	adds	r3, #1
 800c92c:	9309      	str	r3, [sp, #36]	@ 0x24
 800c92e:	2301      	movs	r3, #1
 800c930:	930a      	str	r3, [sp, #40]	@ 0x28
 800c932:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c934:	2b00      	cmp	r3, #0
 800c936:	f000 81aa 	beq.w	800cc8e <_dtoa_r+0xb4e>
 800c93a:	6923      	ldr	r3, [r4, #16]
 800c93c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800c940:	6918      	ldr	r0, [r3, #16]
 800c942:	f000 ff01 	bl	800d748 <__hi0bits>
 800c946:	f1c0 0020 	rsb	r0, r0, #32
 800c94a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c94c:	4418      	add	r0, r3
 800c94e:	f010 001f 	ands.w	r0, r0, #31
 800c952:	d071      	beq.n	800ca38 <_dtoa_r+0x8f8>
 800c954:	f1c0 0320 	rsb	r3, r0, #32
 800c958:	2b04      	cmp	r3, #4
 800c95a:	dd65      	ble.n	800ca28 <_dtoa_r+0x8e8>
 800c95c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c95e:	f1c0 001c 	rsb	r0, r0, #28
 800c962:	4403      	add	r3, r0
 800c964:	4480      	add	r8, r0
 800c966:	4406      	add	r6, r0
 800c968:	9309      	str	r3, [sp, #36]	@ 0x24
 800c96a:	f1b8 0f00 	cmp.w	r8, #0
 800c96e:	dd05      	ble.n	800c97c <_dtoa_r+0x83c>
 800c970:	4649      	mov	r1, r9
 800c972:	4642      	mov	r2, r8
 800c974:	4658      	mov	r0, fp
 800c976:	f001 f84b 	bl	800da10 <__lshift>
 800c97a:	4681      	mov	r9, r0
 800c97c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c97e:	2b00      	cmp	r3, #0
 800c980:	dd05      	ble.n	800c98e <_dtoa_r+0x84e>
 800c982:	4621      	mov	r1, r4
 800c984:	461a      	mov	r2, r3
 800c986:	4658      	mov	r0, fp
 800c988:	f001 f842 	bl	800da10 <__lshift>
 800c98c:	4604      	mov	r4, r0
 800c98e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c990:	2b00      	cmp	r3, #0
 800c992:	d053      	beq.n	800ca3c <_dtoa_r+0x8fc>
 800c994:	4621      	mov	r1, r4
 800c996:	4648      	mov	r0, r9
 800c998:	f001 f8a6 	bl	800dae8 <__mcmp>
 800c99c:	2800      	cmp	r0, #0
 800c99e:	da4d      	bge.n	800ca3c <_dtoa_r+0x8fc>
 800c9a0:	1e7b      	subs	r3, r7, #1
 800c9a2:	4649      	mov	r1, r9
 800c9a4:	9304      	str	r3, [sp, #16]
 800c9a6:	220a      	movs	r2, #10
 800c9a8:	2300      	movs	r3, #0
 800c9aa:	4658      	mov	r0, fp
 800c9ac:	f000 fe3c 	bl	800d628 <__multadd>
 800c9b0:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c9b2:	4681      	mov	r9, r0
 800c9b4:	2b00      	cmp	r3, #0
 800c9b6:	f000 816c 	beq.w	800cc92 <_dtoa_r+0xb52>
 800c9ba:	2300      	movs	r3, #0
 800c9bc:	4629      	mov	r1, r5
 800c9be:	220a      	movs	r2, #10
 800c9c0:	4658      	mov	r0, fp
 800c9c2:	f000 fe31 	bl	800d628 <__multadd>
 800c9c6:	9b08      	ldr	r3, [sp, #32]
 800c9c8:	4605      	mov	r5, r0
 800c9ca:	2b00      	cmp	r3, #0
 800c9cc:	dc61      	bgt.n	800ca92 <_dtoa_r+0x952>
 800c9ce:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800c9d0:	2b02      	cmp	r3, #2
 800c9d2:	dc3b      	bgt.n	800ca4c <_dtoa_r+0x90c>
 800c9d4:	e05d      	b.n	800ca92 <_dtoa_r+0x952>
 800c9d6:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800c9d8:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800c9dc:	e746      	b.n	800c86c <_dtoa_r+0x72c>
 800c9de:	9b07      	ldr	r3, [sp, #28]
 800c9e0:	1e5c      	subs	r4, r3, #1
 800c9e2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c9e4:	42a3      	cmp	r3, r4
 800c9e6:	bfbf      	itttt	lt
 800c9e8:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800c9ea:	9a0e      	ldrlt	r2, [sp, #56]	@ 0x38
 800c9ec:	1ae3      	sublt	r3, r4, r3
 800c9ee:	18d2      	addlt	r2, r2, r3
 800c9f0:	bfa8      	it	ge
 800c9f2:	1b1c      	subge	r4, r3, r4
 800c9f4:	9b07      	ldr	r3, [sp, #28]
 800c9f6:	bfbe      	ittt	lt
 800c9f8:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800c9fa:	920e      	strlt	r2, [sp, #56]	@ 0x38
 800c9fc:	2400      	movlt	r4, #0
 800c9fe:	2b00      	cmp	r3, #0
 800ca00:	bfb5      	itete	lt
 800ca02:	eba8 0603 	sublt.w	r6, r8, r3
 800ca06:	4646      	movge	r6, r8
 800ca08:	2300      	movlt	r3, #0
 800ca0a:	9b07      	ldrge	r3, [sp, #28]
 800ca0c:	e730      	b.n	800c870 <_dtoa_r+0x730>
 800ca0e:	4646      	mov	r6, r8
 800ca10:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800ca12:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800ca14:	e735      	b.n	800c882 <_dtoa_r+0x742>
 800ca16:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800ca18:	e75c      	b.n	800c8d4 <_dtoa_r+0x794>
 800ca1a:	2300      	movs	r3, #0
 800ca1c:	e788      	b.n	800c930 <_dtoa_r+0x7f0>
 800ca1e:	9b02      	ldr	r3, [sp, #8]
 800ca20:	e786      	b.n	800c930 <_dtoa_r+0x7f0>
 800ca22:	2300      	movs	r3, #0
 800ca24:	930a      	str	r3, [sp, #40]	@ 0x28
 800ca26:	e788      	b.n	800c93a <_dtoa_r+0x7fa>
 800ca28:	d09f      	beq.n	800c96a <_dtoa_r+0x82a>
 800ca2a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800ca2c:	331c      	adds	r3, #28
 800ca2e:	441a      	add	r2, r3
 800ca30:	4498      	add	r8, r3
 800ca32:	441e      	add	r6, r3
 800ca34:	9209      	str	r2, [sp, #36]	@ 0x24
 800ca36:	e798      	b.n	800c96a <_dtoa_r+0x82a>
 800ca38:	4603      	mov	r3, r0
 800ca3a:	e7f6      	b.n	800ca2a <_dtoa_r+0x8ea>
 800ca3c:	9b07      	ldr	r3, [sp, #28]
 800ca3e:	9704      	str	r7, [sp, #16]
 800ca40:	2b00      	cmp	r3, #0
 800ca42:	dc20      	bgt.n	800ca86 <_dtoa_r+0x946>
 800ca44:	9308      	str	r3, [sp, #32]
 800ca46:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800ca48:	2b02      	cmp	r3, #2
 800ca4a:	dd1e      	ble.n	800ca8a <_dtoa_r+0x94a>
 800ca4c:	9b08      	ldr	r3, [sp, #32]
 800ca4e:	2b00      	cmp	r3, #0
 800ca50:	f47f aebc 	bne.w	800c7cc <_dtoa_r+0x68c>
 800ca54:	4621      	mov	r1, r4
 800ca56:	2205      	movs	r2, #5
 800ca58:	4658      	mov	r0, fp
 800ca5a:	f000 fde5 	bl	800d628 <__multadd>
 800ca5e:	4601      	mov	r1, r0
 800ca60:	4604      	mov	r4, r0
 800ca62:	4648      	mov	r0, r9
 800ca64:	f001 f840 	bl	800dae8 <__mcmp>
 800ca68:	2800      	cmp	r0, #0
 800ca6a:	f77f aeaf 	ble.w	800c7cc <_dtoa_r+0x68c>
 800ca6e:	2331      	movs	r3, #49	@ 0x31
 800ca70:	4656      	mov	r6, sl
 800ca72:	f806 3b01 	strb.w	r3, [r6], #1
 800ca76:	9b04      	ldr	r3, [sp, #16]
 800ca78:	3301      	adds	r3, #1
 800ca7a:	9304      	str	r3, [sp, #16]
 800ca7c:	e6aa      	b.n	800c7d4 <_dtoa_r+0x694>
 800ca7e:	9c07      	ldr	r4, [sp, #28]
 800ca80:	9704      	str	r7, [sp, #16]
 800ca82:	4625      	mov	r5, r4
 800ca84:	e7f3      	b.n	800ca6e <_dtoa_r+0x92e>
 800ca86:	9b07      	ldr	r3, [sp, #28]
 800ca88:	9308      	str	r3, [sp, #32]
 800ca8a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800ca8c:	2b00      	cmp	r3, #0
 800ca8e:	f000 8104 	beq.w	800cc9a <_dtoa_r+0xb5a>
 800ca92:	2e00      	cmp	r6, #0
 800ca94:	dd05      	ble.n	800caa2 <_dtoa_r+0x962>
 800ca96:	4629      	mov	r1, r5
 800ca98:	4632      	mov	r2, r6
 800ca9a:	4658      	mov	r0, fp
 800ca9c:	f000 ffb8 	bl	800da10 <__lshift>
 800caa0:	4605      	mov	r5, r0
 800caa2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800caa4:	2b00      	cmp	r3, #0
 800caa6:	d05a      	beq.n	800cb5e <_dtoa_r+0xa1e>
 800caa8:	4658      	mov	r0, fp
 800caaa:	6869      	ldr	r1, [r5, #4]
 800caac:	f000 fd5a 	bl	800d564 <_Balloc>
 800cab0:	4606      	mov	r6, r0
 800cab2:	b928      	cbnz	r0, 800cac0 <_dtoa_r+0x980>
 800cab4:	4602      	mov	r2, r0
 800cab6:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800caba:	4b83      	ldr	r3, [pc, #524]	@ (800ccc8 <_dtoa_r+0xb88>)
 800cabc:	f7ff bb54 	b.w	800c168 <_dtoa_r+0x28>
 800cac0:	692a      	ldr	r2, [r5, #16]
 800cac2:	f105 010c 	add.w	r1, r5, #12
 800cac6:	3202      	adds	r2, #2
 800cac8:	0092      	lsls	r2, r2, #2
 800caca:	300c      	adds	r0, #12
 800cacc:	f7ff fa99 	bl	800c002 <memcpy>
 800cad0:	2201      	movs	r2, #1
 800cad2:	4631      	mov	r1, r6
 800cad4:	4658      	mov	r0, fp
 800cad6:	f000 ff9b 	bl	800da10 <__lshift>
 800cada:	462f      	mov	r7, r5
 800cadc:	4605      	mov	r5, r0
 800cade:	f10a 0301 	add.w	r3, sl, #1
 800cae2:	9307      	str	r3, [sp, #28]
 800cae4:	9b08      	ldr	r3, [sp, #32]
 800cae6:	4453      	add	r3, sl
 800cae8:	930b      	str	r3, [sp, #44]	@ 0x2c
 800caea:	9b02      	ldr	r3, [sp, #8]
 800caec:	f003 0301 	and.w	r3, r3, #1
 800caf0:	930a      	str	r3, [sp, #40]	@ 0x28
 800caf2:	9b07      	ldr	r3, [sp, #28]
 800caf4:	4621      	mov	r1, r4
 800caf6:	3b01      	subs	r3, #1
 800caf8:	4648      	mov	r0, r9
 800cafa:	9302      	str	r3, [sp, #8]
 800cafc:	f7ff fa96 	bl	800c02c <quorem>
 800cb00:	4639      	mov	r1, r7
 800cb02:	9008      	str	r0, [sp, #32]
 800cb04:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800cb08:	4648      	mov	r0, r9
 800cb0a:	f000 ffed 	bl	800dae8 <__mcmp>
 800cb0e:	462a      	mov	r2, r5
 800cb10:	9009      	str	r0, [sp, #36]	@ 0x24
 800cb12:	4621      	mov	r1, r4
 800cb14:	4658      	mov	r0, fp
 800cb16:	f001 f803 	bl	800db20 <__mdiff>
 800cb1a:	68c2      	ldr	r2, [r0, #12]
 800cb1c:	4606      	mov	r6, r0
 800cb1e:	bb02      	cbnz	r2, 800cb62 <_dtoa_r+0xa22>
 800cb20:	4601      	mov	r1, r0
 800cb22:	4648      	mov	r0, r9
 800cb24:	f000 ffe0 	bl	800dae8 <__mcmp>
 800cb28:	4602      	mov	r2, r0
 800cb2a:	4631      	mov	r1, r6
 800cb2c:	4658      	mov	r0, fp
 800cb2e:	920c      	str	r2, [sp, #48]	@ 0x30
 800cb30:	f000 fd58 	bl	800d5e4 <_Bfree>
 800cb34:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800cb36:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800cb38:	9e07      	ldr	r6, [sp, #28]
 800cb3a:	ea43 0102 	orr.w	r1, r3, r2
 800cb3e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800cb40:	4319      	orrs	r1, r3
 800cb42:	d110      	bne.n	800cb66 <_dtoa_r+0xa26>
 800cb44:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800cb48:	d029      	beq.n	800cb9e <_dtoa_r+0xa5e>
 800cb4a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cb4c:	2b00      	cmp	r3, #0
 800cb4e:	dd02      	ble.n	800cb56 <_dtoa_r+0xa16>
 800cb50:	9b08      	ldr	r3, [sp, #32]
 800cb52:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 800cb56:	9b02      	ldr	r3, [sp, #8]
 800cb58:	f883 8000 	strb.w	r8, [r3]
 800cb5c:	e63b      	b.n	800c7d6 <_dtoa_r+0x696>
 800cb5e:	4628      	mov	r0, r5
 800cb60:	e7bb      	b.n	800cada <_dtoa_r+0x99a>
 800cb62:	2201      	movs	r2, #1
 800cb64:	e7e1      	b.n	800cb2a <_dtoa_r+0x9ea>
 800cb66:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cb68:	2b00      	cmp	r3, #0
 800cb6a:	db04      	blt.n	800cb76 <_dtoa_r+0xa36>
 800cb6c:	9920      	ldr	r1, [sp, #128]	@ 0x80
 800cb6e:	430b      	orrs	r3, r1
 800cb70:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800cb72:	430b      	orrs	r3, r1
 800cb74:	d120      	bne.n	800cbb8 <_dtoa_r+0xa78>
 800cb76:	2a00      	cmp	r2, #0
 800cb78:	dded      	ble.n	800cb56 <_dtoa_r+0xa16>
 800cb7a:	4649      	mov	r1, r9
 800cb7c:	2201      	movs	r2, #1
 800cb7e:	4658      	mov	r0, fp
 800cb80:	f000 ff46 	bl	800da10 <__lshift>
 800cb84:	4621      	mov	r1, r4
 800cb86:	4681      	mov	r9, r0
 800cb88:	f000 ffae 	bl	800dae8 <__mcmp>
 800cb8c:	2800      	cmp	r0, #0
 800cb8e:	dc03      	bgt.n	800cb98 <_dtoa_r+0xa58>
 800cb90:	d1e1      	bne.n	800cb56 <_dtoa_r+0xa16>
 800cb92:	f018 0f01 	tst.w	r8, #1
 800cb96:	d0de      	beq.n	800cb56 <_dtoa_r+0xa16>
 800cb98:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800cb9c:	d1d8      	bne.n	800cb50 <_dtoa_r+0xa10>
 800cb9e:	2339      	movs	r3, #57	@ 0x39
 800cba0:	9a02      	ldr	r2, [sp, #8]
 800cba2:	7013      	strb	r3, [r2, #0]
 800cba4:	4633      	mov	r3, r6
 800cba6:	461e      	mov	r6, r3
 800cba8:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800cbac:	3b01      	subs	r3, #1
 800cbae:	2a39      	cmp	r2, #57	@ 0x39
 800cbb0:	d052      	beq.n	800cc58 <_dtoa_r+0xb18>
 800cbb2:	3201      	adds	r2, #1
 800cbb4:	701a      	strb	r2, [r3, #0]
 800cbb6:	e60e      	b.n	800c7d6 <_dtoa_r+0x696>
 800cbb8:	2a00      	cmp	r2, #0
 800cbba:	dd07      	ble.n	800cbcc <_dtoa_r+0xa8c>
 800cbbc:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800cbc0:	d0ed      	beq.n	800cb9e <_dtoa_r+0xa5e>
 800cbc2:	9a02      	ldr	r2, [sp, #8]
 800cbc4:	f108 0301 	add.w	r3, r8, #1
 800cbc8:	7013      	strb	r3, [r2, #0]
 800cbca:	e604      	b.n	800c7d6 <_dtoa_r+0x696>
 800cbcc:	9b07      	ldr	r3, [sp, #28]
 800cbce:	9a07      	ldr	r2, [sp, #28]
 800cbd0:	f803 8c01 	strb.w	r8, [r3, #-1]
 800cbd4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800cbd6:	4293      	cmp	r3, r2
 800cbd8:	d028      	beq.n	800cc2c <_dtoa_r+0xaec>
 800cbda:	4649      	mov	r1, r9
 800cbdc:	2300      	movs	r3, #0
 800cbde:	220a      	movs	r2, #10
 800cbe0:	4658      	mov	r0, fp
 800cbe2:	f000 fd21 	bl	800d628 <__multadd>
 800cbe6:	42af      	cmp	r7, r5
 800cbe8:	4681      	mov	r9, r0
 800cbea:	f04f 0300 	mov.w	r3, #0
 800cbee:	f04f 020a 	mov.w	r2, #10
 800cbf2:	4639      	mov	r1, r7
 800cbf4:	4658      	mov	r0, fp
 800cbf6:	d107      	bne.n	800cc08 <_dtoa_r+0xac8>
 800cbf8:	f000 fd16 	bl	800d628 <__multadd>
 800cbfc:	4607      	mov	r7, r0
 800cbfe:	4605      	mov	r5, r0
 800cc00:	9b07      	ldr	r3, [sp, #28]
 800cc02:	3301      	adds	r3, #1
 800cc04:	9307      	str	r3, [sp, #28]
 800cc06:	e774      	b.n	800caf2 <_dtoa_r+0x9b2>
 800cc08:	f000 fd0e 	bl	800d628 <__multadd>
 800cc0c:	4629      	mov	r1, r5
 800cc0e:	4607      	mov	r7, r0
 800cc10:	2300      	movs	r3, #0
 800cc12:	220a      	movs	r2, #10
 800cc14:	4658      	mov	r0, fp
 800cc16:	f000 fd07 	bl	800d628 <__multadd>
 800cc1a:	4605      	mov	r5, r0
 800cc1c:	e7f0      	b.n	800cc00 <_dtoa_r+0xac0>
 800cc1e:	9b08      	ldr	r3, [sp, #32]
 800cc20:	2700      	movs	r7, #0
 800cc22:	2b00      	cmp	r3, #0
 800cc24:	bfcc      	ite	gt
 800cc26:	461e      	movgt	r6, r3
 800cc28:	2601      	movle	r6, #1
 800cc2a:	4456      	add	r6, sl
 800cc2c:	4649      	mov	r1, r9
 800cc2e:	2201      	movs	r2, #1
 800cc30:	4658      	mov	r0, fp
 800cc32:	f000 feed 	bl	800da10 <__lshift>
 800cc36:	4621      	mov	r1, r4
 800cc38:	4681      	mov	r9, r0
 800cc3a:	f000 ff55 	bl	800dae8 <__mcmp>
 800cc3e:	2800      	cmp	r0, #0
 800cc40:	dcb0      	bgt.n	800cba4 <_dtoa_r+0xa64>
 800cc42:	d102      	bne.n	800cc4a <_dtoa_r+0xb0a>
 800cc44:	f018 0f01 	tst.w	r8, #1
 800cc48:	d1ac      	bne.n	800cba4 <_dtoa_r+0xa64>
 800cc4a:	4633      	mov	r3, r6
 800cc4c:	461e      	mov	r6, r3
 800cc4e:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800cc52:	2a30      	cmp	r2, #48	@ 0x30
 800cc54:	d0fa      	beq.n	800cc4c <_dtoa_r+0xb0c>
 800cc56:	e5be      	b.n	800c7d6 <_dtoa_r+0x696>
 800cc58:	459a      	cmp	sl, r3
 800cc5a:	d1a4      	bne.n	800cba6 <_dtoa_r+0xa66>
 800cc5c:	9b04      	ldr	r3, [sp, #16]
 800cc5e:	3301      	adds	r3, #1
 800cc60:	9304      	str	r3, [sp, #16]
 800cc62:	2331      	movs	r3, #49	@ 0x31
 800cc64:	f88a 3000 	strb.w	r3, [sl]
 800cc68:	e5b5      	b.n	800c7d6 <_dtoa_r+0x696>
 800cc6a:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800cc6c:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800cccc <_dtoa_r+0xb8c>
 800cc70:	b11b      	cbz	r3, 800cc7a <_dtoa_r+0xb3a>
 800cc72:	f10a 0308 	add.w	r3, sl, #8
 800cc76:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 800cc78:	6013      	str	r3, [r2, #0]
 800cc7a:	4650      	mov	r0, sl
 800cc7c:	b017      	add	sp, #92	@ 0x5c
 800cc7e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cc82:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800cc84:	2b01      	cmp	r3, #1
 800cc86:	f77f ae3d 	ble.w	800c904 <_dtoa_r+0x7c4>
 800cc8a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800cc8c:	930a      	str	r3, [sp, #40]	@ 0x28
 800cc8e:	2001      	movs	r0, #1
 800cc90:	e65b      	b.n	800c94a <_dtoa_r+0x80a>
 800cc92:	9b08      	ldr	r3, [sp, #32]
 800cc94:	2b00      	cmp	r3, #0
 800cc96:	f77f aed6 	ble.w	800ca46 <_dtoa_r+0x906>
 800cc9a:	4656      	mov	r6, sl
 800cc9c:	4621      	mov	r1, r4
 800cc9e:	4648      	mov	r0, r9
 800cca0:	f7ff f9c4 	bl	800c02c <quorem>
 800cca4:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800cca8:	9b08      	ldr	r3, [sp, #32]
 800ccaa:	f806 8b01 	strb.w	r8, [r6], #1
 800ccae:	eba6 020a 	sub.w	r2, r6, sl
 800ccb2:	4293      	cmp	r3, r2
 800ccb4:	ddb3      	ble.n	800cc1e <_dtoa_r+0xade>
 800ccb6:	4649      	mov	r1, r9
 800ccb8:	2300      	movs	r3, #0
 800ccba:	220a      	movs	r2, #10
 800ccbc:	4658      	mov	r0, fp
 800ccbe:	f000 fcb3 	bl	800d628 <__multadd>
 800ccc2:	4681      	mov	r9, r0
 800ccc4:	e7ea      	b.n	800cc9c <_dtoa_r+0xb5c>
 800ccc6:	bf00      	nop
 800ccc8:	0800ed28 	.word	0x0800ed28
 800cccc:	0800ecac 	.word	0x0800ecac

0800ccd0 <_free_r>:
 800ccd0:	b538      	push	{r3, r4, r5, lr}
 800ccd2:	4605      	mov	r5, r0
 800ccd4:	2900      	cmp	r1, #0
 800ccd6:	d040      	beq.n	800cd5a <_free_r+0x8a>
 800ccd8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ccdc:	1f0c      	subs	r4, r1, #4
 800ccde:	2b00      	cmp	r3, #0
 800cce0:	bfb8      	it	lt
 800cce2:	18e4      	addlt	r4, r4, r3
 800cce4:	f000 fc32 	bl	800d54c <__malloc_lock>
 800cce8:	4a1c      	ldr	r2, [pc, #112]	@ (800cd5c <_free_r+0x8c>)
 800ccea:	6813      	ldr	r3, [r2, #0]
 800ccec:	b933      	cbnz	r3, 800ccfc <_free_r+0x2c>
 800ccee:	6063      	str	r3, [r4, #4]
 800ccf0:	6014      	str	r4, [r2, #0]
 800ccf2:	4628      	mov	r0, r5
 800ccf4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ccf8:	f000 bc2e 	b.w	800d558 <__malloc_unlock>
 800ccfc:	42a3      	cmp	r3, r4
 800ccfe:	d908      	bls.n	800cd12 <_free_r+0x42>
 800cd00:	6820      	ldr	r0, [r4, #0]
 800cd02:	1821      	adds	r1, r4, r0
 800cd04:	428b      	cmp	r3, r1
 800cd06:	bf01      	itttt	eq
 800cd08:	6819      	ldreq	r1, [r3, #0]
 800cd0a:	685b      	ldreq	r3, [r3, #4]
 800cd0c:	1809      	addeq	r1, r1, r0
 800cd0e:	6021      	streq	r1, [r4, #0]
 800cd10:	e7ed      	b.n	800ccee <_free_r+0x1e>
 800cd12:	461a      	mov	r2, r3
 800cd14:	685b      	ldr	r3, [r3, #4]
 800cd16:	b10b      	cbz	r3, 800cd1c <_free_r+0x4c>
 800cd18:	42a3      	cmp	r3, r4
 800cd1a:	d9fa      	bls.n	800cd12 <_free_r+0x42>
 800cd1c:	6811      	ldr	r1, [r2, #0]
 800cd1e:	1850      	adds	r0, r2, r1
 800cd20:	42a0      	cmp	r0, r4
 800cd22:	d10b      	bne.n	800cd3c <_free_r+0x6c>
 800cd24:	6820      	ldr	r0, [r4, #0]
 800cd26:	4401      	add	r1, r0
 800cd28:	1850      	adds	r0, r2, r1
 800cd2a:	4283      	cmp	r3, r0
 800cd2c:	6011      	str	r1, [r2, #0]
 800cd2e:	d1e0      	bne.n	800ccf2 <_free_r+0x22>
 800cd30:	6818      	ldr	r0, [r3, #0]
 800cd32:	685b      	ldr	r3, [r3, #4]
 800cd34:	4408      	add	r0, r1
 800cd36:	6010      	str	r0, [r2, #0]
 800cd38:	6053      	str	r3, [r2, #4]
 800cd3a:	e7da      	b.n	800ccf2 <_free_r+0x22>
 800cd3c:	d902      	bls.n	800cd44 <_free_r+0x74>
 800cd3e:	230c      	movs	r3, #12
 800cd40:	602b      	str	r3, [r5, #0]
 800cd42:	e7d6      	b.n	800ccf2 <_free_r+0x22>
 800cd44:	6820      	ldr	r0, [r4, #0]
 800cd46:	1821      	adds	r1, r4, r0
 800cd48:	428b      	cmp	r3, r1
 800cd4a:	bf01      	itttt	eq
 800cd4c:	6819      	ldreq	r1, [r3, #0]
 800cd4e:	685b      	ldreq	r3, [r3, #4]
 800cd50:	1809      	addeq	r1, r1, r0
 800cd52:	6021      	streq	r1, [r4, #0]
 800cd54:	6063      	str	r3, [r4, #4]
 800cd56:	6054      	str	r4, [r2, #4]
 800cd58:	e7cb      	b.n	800ccf2 <_free_r+0x22>
 800cd5a:	bd38      	pop	{r3, r4, r5, pc}
 800cd5c:	200016d0 	.word	0x200016d0

0800cd60 <rshift>:
 800cd60:	6903      	ldr	r3, [r0, #16]
 800cd62:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800cd66:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800cd6a:	f100 0414 	add.w	r4, r0, #20
 800cd6e:	ea4f 1261 	mov.w	r2, r1, asr #5
 800cd72:	dd46      	ble.n	800ce02 <rshift+0xa2>
 800cd74:	f011 011f 	ands.w	r1, r1, #31
 800cd78:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800cd7c:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800cd80:	d10c      	bne.n	800cd9c <rshift+0x3c>
 800cd82:	4629      	mov	r1, r5
 800cd84:	f100 0710 	add.w	r7, r0, #16
 800cd88:	42b1      	cmp	r1, r6
 800cd8a:	d335      	bcc.n	800cdf8 <rshift+0x98>
 800cd8c:	1a9b      	subs	r3, r3, r2
 800cd8e:	009b      	lsls	r3, r3, #2
 800cd90:	1eea      	subs	r2, r5, #3
 800cd92:	4296      	cmp	r6, r2
 800cd94:	bf38      	it	cc
 800cd96:	2300      	movcc	r3, #0
 800cd98:	4423      	add	r3, r4
 800cd9a:	e015      	b.n	800cdc8 <rshift+0x68>
 800cd9c:	46a1      	mov	r9, r4
 800cd9e:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800cda2:	f1c1 0820 	rsb	r8, r1, #32
 800cda6:	40cf      	lsrs	r7, r1
 800cda8:	f105 0e04 	add.w	lr, r5, #4
 800cdac:	4576      	cmp	r6, lr
 800cdae:	46f4      	mov	ip, lr
 800cdb0:	d816      	bhi.n	800cde0 <rshift+0x80>
 800cdb2:	1a9a      	subs	r2, r3, r2
 800cdb4:	0092      	lsls	r2, r2, #2
 800cdb6:	3a04      	subs	r2, #4
 800cdb8:	3501      	adds	r5, #1
 800cdba:	42ae      	cmp	r6, r5
 800cdbc:	bf38      	it	cc
 800cdbe:	2200      	movcc	r2, #0
 800cdc0:	18a3      	adds	r3, r4, r2
 800cdc2:	50a7      	str	r7, [r4, r2]
 800cdc4:	b107      	cbz	r7, 800cdc8 <rshift+0x68>
 800cdc6:	3304      	adds	r3, #4
 800cdc8:	42a3      	cmp	r3, r4
 800cdca:	eba3 0204 	sub.w	r2, r3, r4
 800cdce:	bf08      	it	eq
 800cdd0:	2300      	moveq	r3, #0
 800cdd2:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800cdd6:	6102      	str	r2, [r0, #16]
 800cdd8:	bf08      	it	eq
 800cdda:	6143      	streq	r3, [r0, #20]
 800cddc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800cde0:	f8dc c000 	ldr.w	ip, [ip]
 800cde4:	fa0c fc08 	lsl.w	ip, ip, r8
 800cde8:	ea4c 0707 	orr.w	r7, ip, r7
 800cdec:	f849 7b04 	str.w	r7, [r9], #4
 800cdf0:	f85e 7b04 	ldr.w	r7, [lr], #4
 800cdf4:	40cf      	lsrs	r7, r1
 800cdf6:	e7d9      	b.n	800cdac <rshift+0x4c>
 800cdf8:	f851 cb04 	ldr.w	ip, [r1], #4
 800cdfc:	f847 cf04 	str.w	ip, [r7, #4]!
 800ce00:	e7c2      	b.n	800cd88 <rshift+0x28>
 800ce02:	4623      	mov	r3, r4
 800ce04:	e7e0      	b.n	800cdc8 <rshift+0x68>

0800ce06 <__hexdig_fun>:
 800ce06:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800ce0a:	2b09      	cmp	r3, #9
 800ce0c:	d802      	bhi.n	800ce14 <__hexdig_fun+0xe>
 800ce0e:	3820      	subs	r0, #32
 800ce10:	b2c0      	uxtb	r0, r0
 800ce12:	4770      	bx	lr
 800ce14:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800ce18:	2b05      	cmp	r3, #5
 800ce1a:	d801      	bhi.n	800ce20 <__hexdig_fun+0x1a>
 800ce1c:	3847      	subs	r0, #71	@ 0x47
 800ce1e:	e7f7      	b.n	800ce10 <__hexdig_fun+0xa>
 800ce20:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800ce24:	2b05      	cmp	r3, #5
 800ce26:	d801      	bhi.n	800ce2c <__hexdig_fun+0x26>
 800ce28:	3827      	subs	r0, #39	@ 0x27
 800ce2a:	e7f1      	b.n	800ce10 <__hexdig_fun+0xa>
 800ce2c:	2000      	movs	r0, #0
 800ce2e:	4770      	bx	lr

0800ce30 <__gethex>:
 800ce30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ce34:	468a      	mov	sl, r1
 800ce36:	4690      	mov	r8, r2
 800ce38:	b085      	sub	sp, #20
 800ce3a:	9302      	str	r3, [sp, #8]
 800ce3c:	680b      	ldr	r3, [r1, #0]
 800ce3e:	9001      	str	r0, [sp, #4]
 800ce40:	1c9c      	adds	r4, r3, #2
 800ce42:	46a1      	mov	r9, r4
 800ce44:	f814 0b01 	ldrb.w	r0, [r4], #1
 800ce48:	2830      	cmp	r0, #48	@ 0x30
 800ce4a:	d0fa      	beq.n	800ce42 <__gethex+0x12>
 800ce4c:	eba9 0303 	sub.w	r3, r9, r3
 800ce50:	f1a3 0b02 	sub.w	fp, r3, #2
 800ce54:	f7ff ffd7 	bl	800ce06 <__hexdig_fun>
 800ce58:	4605      	mov	r5, r0
 800ce5a:	2800      	cmp	r0, #0
 800ce5c:	d168      	bne.n	800cf30 <__gethex+0x100>
 800ce5e:	2201      	movs	r2, #1
 800ce60:	4648      	mov	r0, r9
 800ce62:	499f      	ldr	r1, [pc, #636]	@ (800d0e0 <__gethex+0x2b0>)
 800ce64:	f7ff f835 	bl	800bed2 <strncmp>
 800ce68:	4607      	mov	r7, r0
 800ce6a:	2800      	cmp	r0, #0
 800ce6c:	d167      	bne.n	800cf3e <__gethex+0x10e>
 800ce6e:	f899 0001 	ldrb.w	r0, [r9, #1]
 800ce72:	4626      	mov	r6, r4
 800ce74:	f7ff ffc7 	bl	800ce06 <__hexdig_fun>
 800ce78:	2800      	cmp	r0, #0
 800ce7a:	d062      	beq.n	800cf42 <__gethex+0x112>
 800ce7c:	4623      	mov	r3, r4
 800ce7e:	7818      	ldrb	r0, [r3, #0]
 800ce80:	4699      	mov	r9, r3
 800ce82:	2830      	cmp	r0, #48	@ 0x30
 800ce84:	f103 0301 	add.w	r3, r3, #1
 800ce88:	d0f9      	beq.n	800ce7e <__gethex+0x4e>
 800ce8a:	f7ff ffbc 	bl	800ce06 <__hexdig_fun>
 800ce8e:	fab0 f580 	clz	r5, r0
 800ce92:	f04f 0b01 	mov.w	fp, #1
 800ce96:	096d      	lsrs	r5, r5, #5
 800ce98:	464a      	mov	r2, r9
 800ce9a:	4616      	mov	r6, r2
 800ce9c:	7830      	ldrb	r0, [r6, #0]
 800ce9e:	3201      	adds	r2, #1
 800cea0:	f7ff ffb1 	bl	800ce06 <__hexdig_fun>
 800cea4:	2800      	cmp	r0, #0
 800cea6:	d1f8      	bne.n	800ce9a <__gethex+0x6a>
 800cea8:	2201      	movs	r2, #1
 800ceaa:	4630      	mov	r0, r6
 800ceac:	498c      	ldr	r1, [pc, #560]	@ (800d0e0 <__gethex+0x2b0>)
 800ceae:	f7ff f810 	bl	800bed2 <strncmp>
 800ceb2:	2800      	cmp	r0, #0
 800ceb4:	d13f      	bne.n	800cf36 <__gethex+0x106>
 800ceb6:	b944      	cbnz	r4, 800ceca <__gethex+0x9a>
 800ceb8:	1c74      	adds	r4, r6, #1
 800ceba:	4622      	mov	r2, r4
 800cebc:	4616      	mov	r6, r2
 800cebe:	7830      	ldrb	r0, [r6, #0]
 800cec0:	3201      	adds	r2, #1
 800cec2:	f7ff ffa0 	bl	800ce06 <__hexdig_fun>
 800cec6:	2800      	cmp	r0, #0
 800cec8:	d1f8      	bne.n	800cebc <__gethex+0x8c>
 800ceca:	1ba4      	subs	r4, r4, r6
 800cecc:	00a7      	lsls	r7, r4, #2
 800cece:	7833      	ldrb	r3, [r6, #0]
 800ced0:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 800ced4:	2b50      	cmp	r3, #80	@ 0x50
 800ced6:	d13e      	bne.n	800cf56 <__gethex+0x126>
 800ced8:	7873      	ldrb	r3, [r6, #1]
 800ceda:	2b2b      	cmp	r3, #43	@ 0x2b
 800cedc:	d033      	beq.n	800cf46 <__gethex+0x116>
 800cede:	2b2d      	cmp	r3, #45	@ 0x2d
 800cee0:	d034      	beq.n	800cf4c <__gethex+0x11c>
 800cee2:	2400      	movs	r4, #0
 800cee4:	1c71      	adds	r1, r6, #1
 800cee6:	7808      	ldrb	r0, [r1, #0]
 800cee8:	f7ff ff8d 	bl	800ce06 <__hexdig_fun>
 800ceec:	1e43      	subs	r3, r0, #1
 800ceee:	b2db      	uxtb	r3, r3
 800cef0:	2b18      	cmp	r3, #24
 800cef2:	d830      	bhi.n	800cf56 <__gethex+0x126>
 800cef4:	f1a0 0210 	sub.w	r2, r0, #16
 800cef8:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800cefc:	f7ff ff83 	bl	800ce06 <__hexdig_fun>
 800cf00:	f100 3cff 	add.w	ip, r0, #4294967295	@ 0xffffffff
 800cf04:	fa5f fc8c 	uxtb.w	ip, ip
 800cf08:	f1bc 0f18 	cmp.w	ip, #24
 800cf0c:	f04f 030a 	mov.w	r3, #10
 800cf10:	d91e      	bls.n	800cf50 <__gethex+0x120>
 800cf12:	b104      	cbz	r4, 800cf16 <__gethex+0xe6>
 800cf14:	4252      	negs	r2, r2
 800cf16:	4417      	add	r7, r2
 800cf18:	f8ca 1000 	str.w	r1, [sl]
 800cf1c:	b1ed      	cbz	r5, 800cf5a <__gethex+0x12a>
 800cf1e:	f1bb 0f00 	cmp.w	fp, #0
 800cf22:	bf0c      	ite	eq
 800cf24:	2506      	moveq	r5, #6
 800cf26:	2500      	movne	r5, #0
 800cf28:	4628      	mov	r0, r5
 800cf2a:	b005      	add	sp, #20
 800cf2c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cf30:	2500      	movs	r5, #0
 800cf32:	462c      	mov	r4, r5
 800cf34:	e7b0      	b.n	800ce98 <__gethex+0x68>
 800cf36:	2c00      	cmp	r4, #0
 800cf38:	d1c7      	bne.n	800ceca <__gethex+0x9a>
 800cf3a:	4627      	mov	r7, r4
 800cf3c:	e7c7      	b.n	800cece <__gethex+0x9e>
 800cf3e:	464e      	mov	r6, r9
 800cf40:	462f      	mov	r7, r5
 800cf42:	2501      	movs	r5, #1
 800cf44:	e7c3      	b.n	800cece <__gethex+0x9e>
 800cf46:	2400      	movs	r4, #0
 800cf48:	1cb1      	adds	r1, r6, #2
 800cf4a:	e7cc      	b.n	800cee6 <__gethex+0xb6>
 800cf4c:	2401      	movs	r4, #1
 800cf4e:	e7fb      	b.n	800cf48 <__gethex+0x118>
 800cf50:	fb03 0002 	mla	r0, r3, r2, r0
 800cf54:	e7ce      	b.n	800cef4 <__gethex+0xc4>
 800cf56:	4631      	mov	r1, r6
 800cf58:	e7de      	b.n	800cf18 <__gethex+0xe8>
 800cf5a:	4629      	mov	r1, r5
 800cf5c:	eba6 0309 	sub.w	r3, r6, r9
 800cf60:	3b01      	subs	r3, #1
 800cf62:	2b07      	cmp	r3, #7
 800cf64:	dc0a      	bgt.n	800cf7c <__gethex+0x14c>
 800cf66:	9801      	ldr	r0, [sp, #4]
 800cf68:	f000 fafc 	bl	800d564 <_Balloc>
 800cf6c:	4604      	mov	r4, r0
 800cf6e:	b940      	cbnz	r0, 800cf82 <__gethex+0x152>
 800cf70:	4602      	mov	r2, r0
 800cf72:	21e4      	movs	r1, #228	@ 0xe4
 800cf74:	4b5b      	ldr	r3, [pc, #364]	@ (800d0e4 <__gethex+0x2b4>)
 800cf76:	485c      	ldr	r0, [pc, #368]	@ (800d0e8 <__gethex+0x2b8>)
 800cf78:	f001 fa6a 	bl	800e450 <__assert_func>
 800cf7c:	3101      	adds	r1, #1
 800cf7e:	105b      	asrs	r3, r3, #1
 800cf80:	e7ef      	b.n	800cf62 <__gethex+0x132>
 800cf82:	2300      	movs	r3, #0
 800cf84:	f100 0a14 	add.w	sl, r0, #20
 800cf88:	4655      	mov	r5, sl
 800cf8a:	469b      	mov	fp, r3
 800cf8c:	45b1      	cmp	r9, r6
 800cf8e:	d337      	bcc.n	800d000 <__gethex+0x1d0>
 800cf90:	f845 bb04 	str.w	fp, [r5], #4
 800cf94:	eba5 050a 	sub.w	r5, r5, sl
 800cf98:	10ad      	asrs	r5, r5, #2
 800cf9a:	6125      	str	r5, [r4, #16]
 800cf9c:	4658      	mov	r0, fp
 800cf9e:	f000 fbd3 	bl	800d748 <__hi0bits>
 800cfa2:	016d      	lsls	r5, r5, #5
 800cfa4:	f8d8 6000 	ldr.w	r6, [r8]
 800cfa8:	1a2d      	subs	r5, r5, r0
 800cfaa:	42b5      	cmp	r5, r6
 800cfac:	dd54      	ble.n	800d058 <__gethex+0x228>
 800cfae:	1bad      	subs	r5, r5, r6
 800cfb0:	4629      	mov	r1, r5
 800cfb2:	4620      	mov	r0, r4
 800cfb4:	f000 ff5b 	bl	800de6e <__any_on>
 800cfb8:	4681      	mov	r9, r0
 800cfba:	b178      	cbz	r0, 800cfdc <__gethex+0x1ac>
 800cfbc:	f04f 0901 	mov.w	r9, #1
 800cfc0:	1e6b      	subs	r3, r5, #1
 800cfc2:	1159      	asrs	r1, r3, #5
 800cfc4:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800cfc8:	f003 021f 	and.w	r2, r3, #31
 800cfcc:	fa09 f202 	lsl.w	r2, r9, r2
 800cfd0:	420a      	tst	r2, r1
 800cfd2:	d003      	beq.n	800cfdc <__gethex+0x1ac>
 800cfd4:	454b      	cmp	r3, r9
 800cfd6:	dc36      	bgt.n	800d046 <__gethex+0x216>
 800cfd8:	f04f 0902 	mov.w	r9, #2
 800cfdc:	4629      	mov	r1, r5
 800cfde:	4620      	mov	r0, r4
 800cfe0:	f7ff febe 	bl	800cd60 <rshift>
 800cfe4:	442f      	add	r7, r5
 800cfe6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800cfea:	42bb      	cmp	r3, r7
 800cfec:	da42      	bge.n	800d074 <__gethex+0x244>
 800cfee:	4621      	mov	r1, r4
 800cff0:	9801      	ldr	r0, [sp, #4]
 800cff2:	f000 faf7 	bl	800d5e4 <_Bfree>
 800cff6:	2300      	movs	r3, #0
 800cff8:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800cffa:	25a3      	movs	r5, #163	@ 0xa3
 800cffc:	6013      	str	r3, [r2, #0]
 800cffe:	e793      	b.n	800cf28 <__gethex+0xf8>
 800d000:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 800d004:	2a2e      	cmp	r2, #46	@ 0x2e
 800d006:	d012      	beq.n	800d02e <__gethex+0x1fe>
 800d008:	2b20      	cmp	r3, #32
 800d00a:	d104      	bne.n	800d016 <__gethex+0x1e6>
 800d00c:	f845 bb04 	str.w	fp, [r5], #4
 800d010:	f04f 0b00 	mov.w	fp, #0
 800d014:	465b      	mov	r3, fp
 800d016:	7830      	ldrb	r0, [r6, #0]
 800d018:	9303      	str	r3, [sp, #12]
 800d01a:	f7ff fef4 	bl	800ce06 <__hexdig_fun>
 800d01e:	9b03      	ldr	r3, [sp, #12]
 800d020:	f000 000f 	and.w	r0, r0, #15
 800d024:	4098      	lsls	r0, r3
 800d026:	ea4b 0b00 	orr.w	fp, fp, r0
 800d02a:	3304      	adds	r3, #4
 800d02c:	e7ae      	b.n	800cf8c <__gethex+0x15c>
 800d02e:	45b1      	cmp	r9, r6
 800d030:	d8ea      	bhi.n	800d008 <__gethex+0x1d8>
 800d032:	2201      	movs	r2, #1
 800d034:	4630      	mov	r0, r6
 800d036:	492a      	ldr	r1, [pc, #168]	@ (800d0e0 <__gethex+0x2b0>)
 800d038:	9303      	str	r3, [sp, #12]
 800d03a:	f7fe ff4a 	bl	800bed2 <strncmp>
 800d03e:	9b03      	ldr	r3, [sp, #12]
 800d040:	2800      	cmp	r0, #0
 800d042:	d1e1      	bne.n	800d008 <__gethex+0x1d8>
 800d044:	e7a2      	b.n	800cf8c <__gethex+0x15c>
 800d046:	4620      	mov	r0, r4
 800d048:	1ea9      	subs	r1, r5, #2
 800d04a:	f000 ff10 	bl	800de6e <__any_on>
 800d04e:	2800      	cmp	r0, #0
 800d050:	d0c2      	beq.n	800cfd8 <__gethex+0x1a8>
 800d052:	f04f 0903 	mov.w	r9, #3
 800d056:	e7c1      	b.n	800cfdc <__gethex+0x1ac>
 800d058:	da09      	bge.n	800d06e <__gethex+0x23e>
 800d05a:	1b75      	subs	r5, r6, r5
 800d05c:	4621      	mov	r1, r4
 800d05e:	462a      	mov	r2, r5
 800d060:	9801      	ldr	r0, [sp, #4]
 800d062:	f000 fcd5 	bl	800da10 <__lshift>
 800d066:	4604      	mov	r4, r0
 800d068:	1b7f      	subs	r7, r7, r5
 800d06a:	f100 0a14 	add.w	sl, r0, #20
 800d06e:	f04f 0900 	mov.w	r9, #0
 800d072:	e7b8      	b.n	800cfe6 <__gethex+0x1b6>
 800d074:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800d078:	42bd      	cmp	r5, r7
 800d07a:	dd6f      	ble.n	800d15c <__gethex+0x32c>
 800d07c:	1bed      	subs	r5, r5, r7
 800d07e:	42ae      	cmp	r6, r5
 800d080:	dc34      	bgt.n	800d0ec <__gethex+0x2bc>
 800d082:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800d086:	2b02      	cmp	r3, #2
 800d088:	d022      	beq.n	800d0d0 <__gethex+0x2a0>
 800d08a:	2b03      	cmp	r3, #3
 800d08c:	d024      	beq.n	800d0d8 <__gethex+0x2a8>
 800d08e:	2b01      	cmp	r3, #1
 800d090:	d115      	bne.n	800d0be <__gethex+0x28e>
 800d092:	42ae      	cmp	r6, r5
 800d094:	d113      	bne.n	800d0be <__gethex+0x28e>
 800d096:	2e01      	cmp	r6, #1
 800d098:	d10b      	bne.n	800d0b2 <__gethex+0x282>
 800d09a:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800d09e:	9a02      	ldr	r2, [sp, #8]
 800d0a0:	2562      	movs	r5, #98	@ 0x62
 800d0a2:	6013      	str	r3, [r2, #0]
 800d0a4:	2301      	movs	r3, #1
 800d0a6:	6123      	str	r3, [r4, #16]
 800d0a8:	f8ca 3000 	str.w	r3, [sl]
 800d0ac:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d0ae:	601c      	str	r4, [r3, #0]
 800d0b0:	e73a      	b.n	800cf28 <__gethex+0xf8>
 800d0b2:	4620      	mov	r0, r4
 800d0b4:	1e71      	subs	r1, r6, #1
 800d0b6:	f000 feda 	bl	800de6e <__any_on>
 800d0ba:	2800      	cmp	r0, #0
 800d0bc:	d1ed      	bne.n	800d09a <__gethex+0x26a>
 800d0be:	4621      	mov	r1, r4
 800d0c0:	9801      	ldr	r0, [sp, #4]
 800d0c2:	f000 fa8f 	bl	800d5e4 <_Bfree>
 800d0c6:	2300      	movs	r3, #0
 800d0c8:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800d0ca:	2550      	movs	r5, #80	@ 0x50
 800d0cc:	6013      	str	r3, [r2, #0]
 800d0ce:	e72b      	b.n	800cf28 <__gethex+0xf8>
 800d0d0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d0d2:	2b00      	cmp	r3, #0
 800d0d4:	d1f3      	bne.n	800d0be <__gethex+0x28e>
 800d0d6:	e7e0      	b.n	800d09a <__gethex+0x26a>
 800d0d8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d0da:	2b00      	cmp	r3, #0
 800d0dc:	d1dd      	bne.n	800d09a <__gethex+0x26a>
 800d0de:	e7ee      	b.n	800d0be <__gethex+0x28e>
 800d0e0:	0800ec18 	.word	0x0800ec18
 800d0e4:	0800ed28 	.word	0x0800ed28
 800d0e8:	0800ed39 	.word	0x0800ed39
 800d0ec:	1e6f      	subs	r7, r5, #1
 800d0ee:	f1b9 0f00 	cmp.w	r9, #0
 800d0f2:	d130      	bne.n	800d156 <__gethex+0x326>
 800d0f4:	b127      	cbz	r7, 800d100 <__gethex+0x2d0>
 800d0f6:	4639      	mov	r1, r7
 800d0f8:	4620      	mov	r0, r4
 800d0fa:	f000 feb8 	bl	800de6e <__any_on>
 800d0fe:	4681      	mov	r9, r0
 800d100:	2301      	movs	r3, #1
 800d102:	4629      	mov	r1, r5
 800d104:	1b76      	subs	r6, r6, r5
 800d106:	2502      	movs	r5, #2
 800d108:	117a      	asrs	r2, r7, #5
 800d10a:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800d10e:	f007 071f 	and.w	r7, r7, #31
 800d112:	40bb      	lsls	r3, r7
 800d114:	4213      	tst	r3, r2
 800d116:	4620      	mov	r0, r4
 800d118:	bf18      	it	ne
 800d11a:	f049 0902 	orrne.w	r9, r9, #2
 800d11e:	f7ff fe1f 	bl	800cd60 <rshift>
 800d122:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800d126:	f1b9 0f00 	cmp.w	r9, #0
 800d12a:	d047      	beq.n	800d1bc <__gethex+0x38c>
 800d12c:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800d130:	2b02      	cmp	r3, #2
 800d132:	d015      	beq.n	800d160 <__gethex+0x330>
 800d134:	2b03      	cmp	r3, #3
 800d136:	d017      	beq.n	800d168 <__gethex+0x338>
 800d138:	2b01      	cmp	r3, #1
 800d13a:	d109      	bne.n	800d150 <__gethex+0x320>
 800d13c:	f019 0f02 	tst.w	r9, #2
 800d140:	d006      	beq.n	800d150 <__gethex+0x320>
 800d142:	f8da 3000 	ldr.w	r3, [sl]
 800d146:	ea49 0903 	orr.w	r9, r9, r3
 800d14a:	f019 0f01 	tst.w	r9, #1
 800d14e:	d10e      	bne.n	800d16e <__gethex+0x33e>
 800d150:	f045 0510 	orr.w	r5, r5, #16
 800d154:	e032      	b.n	800d1bc <__gethex+0x38c>
 800d156:	f04f 0901 	mov.w	r9, #1
 800d15a:	e7d1      	b.n	800d100 <__gethex+0x2d0>
 800d15c:	2501      	movs	r5, #1
 800d15e:	e7e2      	b.n	800d126 <__gethex+0x2f6>
 800d160:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d162:	f1c3 0301 	rsb	r3, r3, #1
 800d166:	930f      	str	r3, [sp, #60]	@ 0x3c
 800d168:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d16a:	2b00      	cmp	r3, #0
 800d16c:	d0f0      	beq.n	800d150 <__gethex+0x320>
 800d16e:	f04f 0c00 	mov.w	ip, #0
 800d172:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800d176:	f104 0314 	add.w	r3, r4, #20
 800d17a:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800d17e:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800d182:	4618      	mov	r0, r3
 800d184:	f853 2b04 	ldr.w	r2, [r3], #4
 800d188:	f1b2 3fff 	cmp.w	r2, #4294967295	@ 0xffffffff
 800d18c:	d01b      	beq.n	800d1c6 <__gethex+0x396>
 800d18e:	3201      	adds	r2, #1
 800d190:	6002      	str	r2, [r0, #0]
 800d192:	2d02      	cmp	r5, #2
 800d194:	f104 0314 	add.w	r3, r4, #20
 800d198:	d13c      	bne.n	800d214 <__gethex+0x3e4>
 800d19a:	f8d8 2000 	ldr.w	r2, [r8]
 800d19e:	3a01      	subs	r2, #1
 800d1a0:	42b2      	cmp	r2, r6
 800d1a2:	d109      	bne.n	800d1b8 <__gethex+0x388>
 800d1a4:	2201      	movs	r2, #1
 800d1a6:	1171      	asrs	r1, r6, #5
 800d1a8:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800d1ac:	f006 061f 	and.w	r6, r6, #31
 800d1b0:	fa02 f606 	lsl.w	r6, r2, r6
 800d1b4:	421e      	tst	r6, r3
 800d1b6:	d13a      	bne.n	800d22e <__gethex+0x3fe>
 800d1b8:	f045 0520 	orr.w	r5, r5, #32
 800d1bc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d1be:	601c      	str	r4, [r3, #0]
 800d1c0:	9b02      	ldr	r3, [sp, #8]
 800d1c2:	601f      	str	r7, [r3, #0]
 800d1c4:	e6b0      	b.n	800cf28 <__gethex+0xf8>
 800d1c6:	4299      	cmp	r1, r3
 800d1c8:	f843 cc04 	str.w	ip, [r3, #-4]
 800d1cc:	d8d9      	bhi.n	800d182 <__gethex+0x352>
 800d1ce:	68a3      	ldr	r3, [r4, #8]
 800d1d0:	459b      	cmp	fp, r3
 800d1d2:	db17      	blt.n	800d204 <__gethex+0x3d4>
 800d1d4:	6861      	ldr	r1, [r4, #4]
 800d1d6:	9801      	ldr	r0, [sp, #4]
 800d1d8:	3101      	adds	r1, #1
 800d1da:	f000 f9c3 	bl	800d564 <_Balloc>
 800d1de:	4681      	mov	r9, r0
 800d1e0:	b918      	cbnz	r0, 800d1ea <__gethex+0x3ba>
 800d1e2:	4602      	mov	r2, r0
 800d1e4:	2184      	movs	r1, #132	@ 0x84
 800d1e6:	4b19      	ldr	r3, [pc, #100]	@ (800d24c <__gethex+0x41c>)
 800d1e8:	e6c5      	b.n	800cf76 <__gethex+0x146>
 800d1ea:	6922      	ldr	r2, [r4, #16]
 800d1ec:	f104 010c 	add.w	r1, r4, #12
 800d1f0:	3202      	adds	r2, #2
 800d1f2:	0092      	lsls	r2, r2, #2
 800d1f4:	300c      	adds	r0, #12
 800d1f6:	f7fe ff04 	bl	800c002 <memcpy>
 800d1fa:	4621      	mov	r1, r4
 800d1fc:	9801      	ldr	r0, [sp, #4]
 800d1fe:	f000 f9f1 	bl	800d5e4 <_Bfree>
 800d202:	464c      	mov	r4, r9
 800d204:	6923      	ldr	r3, [r4, #16]
 800d206:	1c5a      	adds	r2, r3, #1
 800d208:	6122      	str	r2, [r4, #16]
 800d20a:	2201      	movs	r2, #1
 800d20c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800d210:	615a      	str	r2, [r3, #20]
 800d212:	e7be      	b.n	800d192 <__gethex+0x362>
 800d214:	6922      	ldr	r2, [r4, #16]
 800d216:	455a      	cmp	r2, fp
 800d218:	dd0b      	ble.n	800d232 <__gethex+0x402>
 800d21a:	2101      	movs	r1, #1
 800d21c:	4620      	mov	r0, r4
 800d21e:	f7ff fd9f 	bl	800cd60 <rshift>
 800d222:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800d226:	3701      	adds	r7, #1
 800d228:	42bb      	cmp	r3, r7
 800d22a:	f6ff aee0 	blt.w	800cfee <__gethex+0x1be>
 800d22e:	2501      	movs	r5, #1
 800d230:	e7c2      	b.n	800d1b8 <__gethex+0x388>
 800d232:	f016 061f 	ands.w	r6, r6, #31
 800d236:	d0fa      	beq.n	800d22e <__gethex+0x3fe>
 800d238:	4453      	add	r3, sl
 800d23a:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800d23e:	f000 fa83 	bl	800d748 <__hi0bits>
 800d242:	f1c6 0620 	rsb	r6, r6, #32
 800d246:	42b0      	cmp	r0, r6
 800d248:	dbe7      	blt.n	800d21a <__gethex+0x3ea>
 800d24a:	e7f0      	b.n	800d22e <__gethex+0x3fe>
 800d24c:	0800ed28 	.word	0x0800ed28

0800d250 <L_shift>:
 800d250:	f1c2 0208 	rsb	r2, r2, #8
 800d254:	0092      	lsls	r2, r2, #2
 800d256:	b570      	push	{r4, r5, r6, lr}
 800d258:	f1c2 0620 	rsb	r6, r2, #32
 800d25c:	6843      	ldr	r3, [r0, #4]
 800d25e:	6804      	ldr	r4, [r0, #0]
 800d260:	fa03 f506 	lsl.w	r5, r3, r6
 800d264:	432c      	orrs	r4, r5
 800d266:	40d3      	lsrs	r3, r2
 800d268:	6004      	str	r4, [r0, #0]
 800d26a:	f840 3f04 	str.w	r3, [r0, #4]!
 800d26e:	4288      	cmp	r0, r1
 800d270:	d3f4      	bcc.n	800d25c <L_shift+0xc>
 800d272:	bd70      	pop	{r4, r5, r6, pc}

0800d274 <__match>:
 800d274:	b530      	push	{r4, r5, lr}
 800d276:	6803      	ldr	r3, [r0, #0]
 800d278:	3301      	adds	r3, #1
 800d27a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d27e:	b914      	cbnz	r4, 800d286 <__match+0x12>
 800d280:	6003      	str	r3, [r0, #0]
 800d282:	2001      	movs	r0, #1
 800d284:	bd30      	pop	{r4, r5, pc}
 800d286:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d28a:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800d28e:	2d19      	cmp	r5, #25
 800d290:	bf98      	it	ls
 800d292:	3220      	addls	r2, #32
 800d294:	42a2      	cmp	r2, r4
 800d296:	d0f0      	beq.n	800d27a <__match+0x6>
 800d298:	2000      	movs	r0, #0
 800d29a:	e7f3      	b.n	800d284 <__match+0x10>

0800d29c <__hexnan>:
 800d29c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d2a0:	2500      	movs	r5, #0
 800d2a2:	680b      	ldr	r3, [r1, #0]
 800d2a4:	4682      	mov	sl, r0
 800d2a6:	115e      	asrs	r6, r3, #5
 800d2a8:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800d2ac:	f013 031f 	ands.w	r3, r3, #31
 800d2b0:	bf18      	it	ne
 800d2b2:	3604      	addne	r6, #4
 800d2b4:	1f37      	subs	r7, r6, #4
 800d2b6:	4690      	mov	r8, r2
 800d2b8:	46b9      	mov	r9, r7
 800d2ba:	463c      	mov	r4, r7
 800d2bc:	46ab      	mov	fp, r5
 800d2be:	b087      	sub	sp, #28
 800d2c0:	6801      	ldr	r1, [r0, #0]
 800d2c2:	9301      	str	r3, [sp, #4]
 800d2c4:	f846 5c04 	str.w	r5, [r6, #-4]
 800d2c8:	9502      	str	r5, [sp, #8]
 800d2ca:	784a      	ldrb	r2, [r1, #1]
 800d2cc:	1c4b      	adds	r3, r1, #1
 800d2ce:	9303      	str	r3, [sp, #12]
 800d2d0:	b342      	cbz	r2, 800d324 <__hexnan+0x88>
 800d2d2:	4610      	mov	r0, r2
 800d2d4:	9105      	str	r1, [sp, #20]
 800d2d6:	9204      	str	r2, [sp, #16]
 800d2d8:	f7ff fd95 	bl	800ce06 <__hexdig_fun>
 800d2dc:	2800      	cmp	r0, #0
 800d2de:	d151      	bne.n	800d384 <__hexnan+0xe8>
 800d2e0:	9a04      	ldr	r2, [sp, #16]
 800d2e2:	9905      	ldr	r1, [sp, #20]
 800d2e4:	2a20      	cmp	r2, #32
 800d2e6:	d818      	bhi.n	800d31a <__hexnan+0x7e>
 800d2e8:	9b02      	ldr	r3, [sp, #8]
 800d2ea:	459b      	cmp	fp, r3
 800d2ec:	dd13      	ble.n	800d316 <__hexnan+0x7a>
 800d2ee:	454c      	cmp	r4, r9
 800d2f0:	d206      	bcs.n	800d300 <__hexnan+0x64>
 800d2f2:	2d07      	cmp	r5, #7
 800d2f4:	dc04      	bgt.n	800d300 <__hexnan+0x64>
 800d2f6:	462a      	mov	r2, r5
 800d2f8:	4649      	mov	r1, r9
 800d2fa:	4620      	mov	r0, r4
 800d2fc:	f7ff ffa8 	bl	800d250 <L_shift>
 800d300:	4544      	cmp	r4, r8
 800d302:	d952      	bls.n	800d3aa <__hexnan+0x10e>
 800d304:	2300      	movs	r3, #0
 800d306:	f1a4 0904 	sub.w	r9, r4, #4
 800d30a:	f844 3c04 	str.w	r3, [r4, #-4]
 800d30e:	461d      	mov	r5, r3
 800d310:	464c      	mov	r4, r9
 800d312:	f8cd b008 	str.w	fp, [sp, #8]
 800d316:	9903      	ldr	r1, [sp, #12]
 800d318:	e7d7      	b.n	800d2ca <__hexnan+0x2e>
 800d31a:	2a29      	cmp	r2, #41	@ 0x29
 800d31c:	d157      	bne.n	800d3ce <__hexnan+0x132>
 800d31e:	3102      	adds	r1, #2
 800d320:	f8ca 1000 	str.w	r1, [sl]
 800d324:	f1bb 0f00 	cmp.w	fp, #0
 800d328:	d051      	beq.n	800d3ce <__hexnan+0x132>
 800d32a:	454c      	cmp	r4, r9
 800d32c:	d206      	bcs.n	800d33c <__hexnan+0xa0>
 800d32e:	2d07      	cmp	r5, #7
 800d330:	dc04      	bgt.n	800d33c <__hexnan+0xa0>
 800d332:	462a      	mov	r2, r5
 800d334:	4649      	mov	r1, r9
 800d336:	4620      	mov	r0, r4
 800d338:	f7ff ff8a 	bl	800d250 <L_shift>
 800d33c:	4544      	cmp	r4, r8
 800d33e:	d936      	bls.n	800d3ae <__hexnan+0x112>
 800d340:	4623      	mov	r3, r4
 800d342:	f1a8 0204 	sub.w	r2, r8, #4
 800d346:	f853 1b04 	ldr.w	r1, [r3], #4
 800d34a:	429f      	cmp	r7, r3
 800d34c:	f842 1f04 	str.w	r1, [r2, #4]!
 800d350:	d2f9      	bcs.n	800d346 <__hexnan+0xaa>
 800d352:	1b3b      	subs	r3, r7, r4
 800d354:	f023 0303 	bic.w	r3, r3, #3
 800d358:	3304      	adds	r3, #4
 800d35a:	3401      	adds	r4, #1
 800d35c:	3e03      	subs	r6, #3
 800d35e:	42b4      	cmp	r4, r6
 800d360:	bf88      	it	hi
 800d362:	2304      	movhi	r3, #4
 800d364:	2200      	movs	r2, #0
 800d366:	4443      	add	r3, r8
 800d368:	f843 2b04 	str.w	r2, [r3], #4
 800d36c:	429f      	cmp	r7, r3
 800d36e:	d2fb      	bcs.n	800d368 <__hexnan+0xcc>
 800d370:	683b      	ldr	r3, [r7, #0]
 800d372:	b91b      	cbnz	r3, 800d37c <__hexnan+0xe0>
 800d374:	4547      	cmp	r7, r8
 800d376:	d128      	bne.n	800d3ca <__hexnan+0x12e>
 800d378:	2301      	movs	r3, #1
 800d37a:	603b      	str	r3, [r7, #0]
 800d37c:	2005      	movs	r0, #5
 800d37e:	b007      	add	sp, #28
 800d380:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d384:	3501      	adds	r5, #1
 800d386:	2d08      	cmp	r5, #8
 800d388:	f10b 0b01 	add.w	fp, fp, #1
 800d38c:	dd06      	ble.n	800d39c <__hexnan+0x100>
 800d38e:	4544      	cmp	r4, r8
 800d390:	d9c1      	bls.n	800d316 <__hexnan+0x7a>
 800d392:	2300      	movs	r3, #0
 800d394:	2501      	movs	r5, #1
 800d396:	f844 3c04 	str.w	r3, [r4, #-4]
 800d39a:	3c04      	subs	r4, #4
 800d39c:	6822      	ldr	r2, [r4, #0]
 800d39e:	f000 000f 	and.w	r0, r0, #15
 800d3a2:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800d3a6:	6020      	str	r0, [r4, #0]
 800d3a8:	e7b5      	b.n	800d316 <__hexnan+0x7a>
 800d3aa:	2508      	movs	r5, #8
 800d3ac:	e7b3      	b.n	800d316 <__hexnan+0x7a>
 800d3ae:	9b01      	ldr	r3, [sp, #4]
 800d3b0:	2b00      	cmp	r3, #0
 800d3b2:	d0dd      	beq.n	800d370 <__hexnan+0xd4>
 800d3b4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800d3b8:	f1c3 0320 	rsb	r3, r3, #32
 800d3bc:	40da      	lsrs	r2, r3
 800d3be:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800d3c2:	4013      	ands	r3, r2
 800d3c4:	f846 3c04 	str.w	r3, [r6, #-4]
 800d3c8:	e7d2      	b.n	800d370 <__hexnan+0xd4>
 800d3ca:	3f04      	subs	r7, #4
 800d3cc:	e7d0      	b.n	800d370 <__hexnan+0xd4>
 800d3ce:	2004      	movs	r0, #4
 800d3d0:	e7d5      	b.n	800d37e <__hexnan+0xe2>
	...

0800d3d4 <malloc>:
 800d3d4:	4b02      	ldr	r3, [pc, #8]	@ (800d3e0 <malloc+0xc>)
 800d3d6:	4601      	mov	r1, r0
 800d3d8:	6818      	ldr	r0, [r3, #0]
 800d3da:	f000 b825 	b.w	800d428 <_malloc_r>
 800d3de:	bf00      	nop
 800d3e0:	20000308 	.word	0x20000308

0800d3e4 <sbrk_aligned>:
 800d3e4:	b570      	push	{r4, r5, r6, lr}
 800d3e6:	4e0f      	ldr	r6, [pc, #60]	@ (800d424 <sbrk_aligned+0x40>)
 800d3e8:	460c      	mov	r4, r1
 800d3ea:	6831      	ldr	r1, [r6, #0]
 800d3ec:	4605      	mov	r5, r0
 800d3ee:	b911      	cbnz	r1, 800d3f6 <sbrk_aligned+0x12>
 800d3f0:	f001 f81e 	bl	800e430 <_sbrk_r>
 800d3f4:	6030      	str	r0, [r6, #0]
 800d3f6:	4621      	mov	r1, r4
 800d3f8:	4628      	mov	r0, r5
 800d3fa:	f001 f819 	bl	800e430 <_sbrk_r>
 800d3fe:	1c43      	adds	r3, r0, #1
 800d400:	d103      	bne.n	800d40a <sbrk_aligned+0x26>
 800d402:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 800d406:	4620      	mov	r0, r4
 800d408:	bd70      	pop	{r4, r5, r6, pc}
 800d40a:	1cc4      	adds	r4, r0, #3
 800d40c:	f024 0403 	bic.w	r4, r4, #3
 800d410:	42a0      	cmp	r0, r4
 800d412:	d0f8      	beq.n	800d406 <sbrk_aligned+0x22>
 800d414:	1a21      	subs	r1, r4, r0
 800d416:	4628      	mov	r0, r5
 800d418:	f001 f80a 	bl	800e430 <_sbrk_r>
 800d41c:	3001      	adds	r0, #1
 800d41e:	d1f2      	bne.n	800d406 <sbrk_aligned+0x22>
 800d420:	e7ef      	b.n	800d402 <sbrk_aligned+0x1e>
 800d422:	bf00      	nop
 800d424:	200016cc 	.word	0x200016cc

0800d428 <_malloc_r>:
 800d428:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d42c:	1ccd      	adds	r5, r1, #3
 800d42e:	f025 0503 	bic.w	r5, r5, #3
 800d432:	3508      	adds	r5, #8
 800d434:	2d0c      	cmp	r5, #12
 800d436:	bf38      	it	cc
 800d438:	250c      	movcc	r5, #12
 800d43a:	2d00      	cmp	r5, #0
 800d43c:	4606      	mov	r6, r0
 800d43e:	db01      	blt.n	800d444 <_malloc_r+0x1c>
 800d440:	42a9      	cmp	r1, r5
 800d442:	d904      	bls.n	800d44e <_malloc_r+0x26>
 800d444:	230c      	movs	r3, #12
 800d446:	6033      	str	r3, [r6, #0]
 800d448:	2000      	movs	r0, #0
 800d44a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d44e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800d524 <_malloc_r+0xfc>
 800d452:	f000 f87b 	bl	800d54c <__malloc_lock>
 800d456:	f8d8 3000 	ldr.w	r3, [r8]
 800d45a:	461c      	mov	r4, r3
 800d45c:	bb44      	cbnz	r4, 800d4b0 <_malloc_r+0x88>
 800d45e:	4629      	mov	r1, r5
 800d460:	4630      	mov	r0, r6
 800d462:	f7ff ffbf 	bl	800d3e4 <sbrk_aligned>
 800d466:	1c43      	adds	r3, r0, #1
 800d468:	4604      	mov	r4, r0
 800d46a:	d158      	bne.n	800d51e <_malloc_r+0xf6>
 800d46c:	f8d8 4000 	ldr.w	r4, [r8]
 800d470:	4627      	mov	r7, r4
 800d472:	2f00      	cmp	r7, #0
 800d474:	d143      	bne.n	800d4fe <_malloc_r+0xd6>
 800d476:	2c00      	cmp	r4, #0
 800d478:	d04b      	beq.n	800d512 <_malloc_r+0xea>
 800d47a:	6823      	ldr	r3, [r4, #0]
 800d47c:	4639      	mov	r1, r7
 800d47e:	4630      	mov	r0, r6
 800d480:	eb04 0903 	add.w	r9, r4, r3
 800d484:	f000 ffd4 	bl	800e430 <_sbrk_r>
 800d488:	4581      	cmp	r9, r0
 800d48a:	d142      	bne.n	800d512 <_malloc_r+0xea>
 800d48c:	6821      	ldr	r1, [r4, #0]
 800d48e:	4630      	mov	r0, r6
 800d490:	1a6d      	subs	r5, r5, r1
 800d492:	4629      	mov	r1, r5
 800d494:	f7ff ffa6 	bl	800d3e4 <sbrk_aligned>
 800d498:	3001      	adds	r0, #1
 800d49a:	d03a      	beq.n	800d512 <_malloc_r+0xea>
 800d49c:	6823      	ldr	r3, [r4, #0]
 800d49e:	442b      	add	r3, r5
 800d4a0:	6023      	str	r3, [r4, #0]
 800d4a2:	f8d8 3000 	ldr.w	r3, [r8]
 800d4a6:	685a      	ldr	r2, [r3, #4]
 800d4a8:	bb62      	cbnz	r2, 800d504 <_malloc_r+0xdc>
 800d4aa:	f8c8 7000 	str.w	r7, [r8]
 800d4ae:	e00f      	b.n	800d4d0 <_malloc_r+0xa8>
 800d4b0:	6822      	ldr	r2, [r4, #0]
 800d4b2:	1b52      	subs	r2, r2, r5
 800d4b4:	d420      	bmi.n	800d4f8 <_malloc_r+0xd0>
 800d4b6:	2a0b      	cmp	r2, #11
 800d4b8:	d917      	bls.n	800d4ea <_malloc_r+0xc2>
 800d4ba:	1961      	adds	r1, r4, r5
 800d4bc:	42a3      	cmp	r3, r4
 800d4be:	6025      	str	r5, [r4, #0]
 800d4c0:	bf18      	it	ne
 800d4c2:	6059      	strne	r1, [r3, #4]
 800d4c4:	6863      	ldr	r3, [r4, #4]
 800d4c6:	bf08      	it	eq
 800d4c8:	f8c8 1000 	streq.w	r1, [r8]
 800d4cc:	5162      	str	r2, [r4, r5]
 800d4ce:	604b      	str	r3, [r1, #4]
 800d4d0:	4630      	mov	r0, r6
 800d4d2:	f000 f841 	bl	800d558 <__malloc_unlock>
 800d4d6:	f104 000b 	add.w	r0, r4, #11
 800d4da:	1d23      	adds	r3, r4, #4
 800d4dc:	f020 0007 	bic.w	r0, r0, #7
 800d4e0:	1ac2      	subs	r2, r0, r3
 800d4e2:	bf1c      	itt	ne
 800d4e4:	1a1b      	subne	r3, r3, r0
 800d4e6:	50a3      	strne	r3, [r4, r2]
 800d4e8:	e7af      	b.n	800d44a <_malloc_r+0x22>
 800d4ea:	6862      	ldr	r2, [r4, #4]
 800d4ec:	42a3      	cmp	r3, r4
 800d4ee:	bf0c      	ite	eq
 800d4f0:	f8c8 2000 	streq.w	r2, [r8]
 800d4f4:	605a      	strne	r2, [r3, #4]
 800d4f6:	e7eb      	b.n	800d4d0 <_malloc_r+0xa8>
 800d4f8:	4623      	mov	r3, r4
 800d4fa:	6864      	ldr	r4, [r4, #4]
 800d4fc:	e7ae      	b.n	800d45c <_malloc_r+0x34>
 800d4fe:	463c      	mov	r4, r7
 800d500:	687f      	ldr	r7, [r7, #4]
 800d502:	e7b6      	b.n	800d472 <_malloc_r+0x4a>
 800d504:	461a      	mov	r2, r3
 800d506:	685b      	ldr	r3, [r3, #4]
 800d508:	42a3      	cmp	r3, r4
 800d50a:	d1fb      	bne.n	800d504 <_malloc_r+0xdc>
 800d50c:	2300      	movs	r3, #0
 800d50e:	6053      	str	r3, [r2, #4]
 800d510:	e7de      	b.n	800d4d0 <_malloc_r+0xa8>
 800d512:	230c      	movs	r3, #12
 800d514:	4630      	mov	r0, r6
 800d516:	6033      	str	r3, [r6, #0]
 800d518:	f000 f81e 	bl	800d558 <__malloc_unlock>
 800d51c:	e794      	b.n	800d448 <_malloc_r+0x20>
 800d51e:	6005      	str	r5, [r0, #0]
 800d520:	e7d6      	b.n	800d4d0 <_malloc_r+0xa8>
 800d522:	bf00      	nop
 800d524:	200016d0 	.word	0x200016d0

0800d528 <__ascii_mbtowc>:
 800d528:	b082      	sub	sp, #8
 800d52a:	b901      	cbnz	r1, 800d52e <__ascii_mbtowc+0x6>
 800d52c:	a901      	add	r1, sp, #4
 800d52e:	b142      	cbz	r2, 800d542 <__ascii_mbtowc+0x1a>
 800d530:	b14b      	cbz	r3, 800d546 <__ascii_mbtowc+0x1e>
 800d532:	7813      	ldrb	r3, [r2, #0]
 800d534:	600b      	str	r3, [r1, #0]
 800d536:	7812      	ldrb	r2, [r2, #0]
 800d538:	1e10      	subs	r0, r2, #0
 800d53a:	bf18      	it	ne
 800d53c:	2001      	movne	r0, #1
 800d53e:	b002      	add	sp, #8
 800d540:	4770      	bx	lr
 800d542:	4610      	mov	r0, r2
 800d544:	e7fb      	b.n	800d53e <__ascii_mbtowc+0x16>
 800d546:	f06f 0001 	mvn.w	r0, #1
 800d54a:	e7f8      	b.n	800d53e <__ascii_mbtowc+0x16>

0800d54c <__malloc_lock>:
 800d54c:	4801      	ldr	r0, [pc, #4]	@ (800d554 <__malloc_lock+0x8>)
 800d54e:	f7fe bd48 	b.w	800bfe2 <__retarget_lock_acquire_recursive>
 800d552:	bf00      	nop
 800d554:	200016c8 	.word	0x200016c8

0800d558 <__malloc_unlock>:
 800d558:	4801      	ldr	r0, [pc, #4]	@ (800d560 <__malloc_unlock+0x8>)
 800d55a:	f7fe bd43 	b.w	800bfe4 <__retarget_lock_release_recursive>
 800d55e:	bf00      	nop
 800d560:	200016c8 	.word	0x200016c8

0800d564 <_Balloc>:
 800d564:	b570      	push	{r4, r5, r6, lr}
 800d566:	69c6      	ldr	r6, [r0, #28]
 800d568:	4604      	mov	r4, r0
 800d56a:	460d      	mov	r5, r1
 800d56c:	b976      	cbnz	r6, 800d58c <_Balloc+0x28>
 800d56e:	2010      	movs	r0, #16
 800d570:	f7ff ff30 	bl	800d3d4 <malloc>
 800d574:	4602      	mov	r2, r0
 800d576:	61e0      	str	r0, [r4, #28]
 800d578:	b920      	cbnz	r0, 800d584 <_Balloc+0x20>
 800d57a:	216b      	movs	r1, #107	@ 0x6b
 800d57c:	4b17      	ldr	r3, [pc, #92]	@ (800d5dc <_Balloc+0x78>)
 800d57e:	4818      	ldr	r0, [pc, #96]	@ (800d5e0 <_Balloc+0x7c>)
 800d580:	f000 ff66 	bl	800e450 <__assert_func>
 800d584:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800d588:	6006      	str	r6, [r0, #0]
 800d58a:	60c6      	str	r6, [r0, #12]
 800d58c:	69e6      	ldr	r6, [r4, #28]
 800d58e:	68f3      	ldr	r3, [r6, #12]
 800d590:	b183      	cbz	r3, 800d5b4 <_Balloc+0x50>
 800d592:	69e3      	ldr	r3, [r4, #28]
 800d594:	68db      	ldr	r3, [r3, #12]
 800d596:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800d59a:	b9b8      	cbnz	r0, 800d5cc <_Balloc+0x68>
 800d59c:	2101      	movs	r1, #1
 800d59e:	fa01 f605 	lsl.w	r6, r1, r5
 800d5a2:	1d72      	adds	r2, r6, #5
 800d5a4:	4620      	mov	r0, r4
 800d5a6:	0092      	lsls	r2, r2, #2
 800d5a8:	f000 ff70 	bl	800e48c <_calloc_r>
 800d5ac:	b160      	cbz	r0, 800d5c8 <_Balloc+0x64>
 800d5ae:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800d5b2:	e00e      	b.n	800d5d2 <_Balloc+0x6e>
 800d5b4:	2221      	movs	r2, #33	@ 0x21
 800d5b6:	2104      	movs	r1, #4
 800d5b8:	4620      	mov	r0, r4
 800d5ba:	f000 ff67 	bl	800e48c <_calloc_r>
 800d5be:	69e3      	ldr	r3, [r4, #28]
 800d5c0:	60f0      	str	r0, [r6, #12]
 800d5c2:	68db      	ldr	r3, [r3, #12]
 800d5c4:	2b00      	cmp	r3, #0
 800d5c6:	d1e4      	bne.n	800d592 <_Balloc+0x2e>
 800d5c8:	2000      	movs	r0, #0
 800d5ca:	bd70      	pop	{r4, r5, r6, pc}
 800d5cc:	6802      	ldr	r2, [r0, #0]
 800d5ce:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800d5d2:	2300      	movs	r3, #0
 800d5d4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800d5d8:	e7f7      	b.n	800d5ca <_Balloc+0x66>
 800d5da:	bf00      	nop
 800d5dc:	0800ecb9 	.word	0x0800ecb9
 800d5e0:	0800ed99 	.word	0x0800ed99

0800d5e4 <_Bfree>:
 800d5e4:	b570      	push	{r4, r5, r6, lr}
 800d5e6:	69c6      	ldr	r6, [r0, #28]
 800d5e8:	4605      	mov	r5, r0
 800d5ea:	460c      	mov	r4, r1
 800d5ec:	b976      	cbnz	r6, 800d60c <_Bfree+0x28>
 800d5ee:	2010      	movs	r0, #16
 800d5f0:	f7ff fef0 	bl	800d3d4 <malloc>
 800d5f4:	4602      	mov	r2, r0
 800d5f6:	61e8      	str	r0, [r5, #28]
 800d5f8:	b920      	cbnz	r0, 800d604 <_Bfree+0x20>
 800d5fa:	218f      	movs	r1, #143	@ 0x8f
 800d5fc:	4b08      	ldr	r3, [pc, #32]	@ (800d620 <_Bfree+0x3c>)
 800d5fe:	4809      	ldr	r0, [pc, #36]	@ (800d624 <_Bfree+0x40>)
 800d600:	f000 ff26 	bl	800e450 <__assert_func>
 800d604:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800d608:	6006      	str	r6, [r0, #0]
 800d60a:	60c6      	str	r6, [r0, #12]
 800d60c:	b13c      	cbz	r4, 800d61e <_Bfree+0x3a>
 800d60e:	69eb      	ldr	r3, [r5, #28]
 800d610:	6862      	ldr	r2, [r4, #4]
 800d612:	68db      	ldr	r3, [r3, #12]
 800d614:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800d618:	6021      	str	r1, [r4, #0]
 800d61a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800d61e:	bd70      	pop	{r4, r5, r6, pc}
 800d620:	0800ecb9 	.word	0x0800ecb9
 800d624:	0800ed99 	.word	0x0800ed99

0800d628 <__multadd>:
 800d628:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d62c:	4607      	mov	r7, r0
 800d62e:	460c      	mov	r4, r1
 800d630:	461e      	mov	r6, r3
 800d632:	2000      	movs	r0, #0
 800d634:	690d      	ldr	r5, [r1, #16]
 800d636:	f101 0c14 	add.w	ip, r1, #20
 800d63a:	f8dc 3000 	ldr.w	r3, [ip]
 800d63e:	3001      	adds	r0, #1
 800d640:	b299      	uxth	r1, r3
 800d642:	fb02 6101 	mla	r1, r2, r1, r6
 800d646:	0c1e      	lsrs	r6, r3, #16
 800d648:	0c0b      	lsrs	r3, r1, #16
 800d64a:	fb02 3306 	mla	r3, r2, r6, r3
 800d64e:	b289      	uxth	r1, r1
 800d650:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800d654:	4285      	cmp	r5, r0
 800d656:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800d65a:	f84c 1b04 	str.w	r1, [ip], #4
 800d65e:	dcec      	bgt.n	800d63a <__multadd+0x12>
 800d660:	b30e      	cbz	r6, 800d6a6 <__multadd+0x7e>
 800d662:	68a3      	ldr	r3, [r4, #8]
 800d664:	42ab      	cmp	r3, r5
 800d666:	dc19      	bgt.n	800d69c <__multadd+0x74>
 800d668:	6861      	ldr	r1, [r4, #4]
 800d66a:	4638      	mov	r0, r7
 800d66c:	3101      	adds	r1, #1
 800d66e:	f7ff ff79 	bl	800d564 <_Balloc>
 800d672:	4680      	mov	r8, r0
 800d674:	b928      	cbnz	r0, 800d682 <__multadd+0x5a>
 800d676:	4602      	mov	r2, r0
 800d678:	21ba      	movs	r1, #186	@ 0xba
 800d67a:	4b0c      	ldr	r3, [pc, #48]	@ (800d6ac <__multadd+0x84>)
 800d67c:	480c      	ldr	r0, [pc, #48]	@ (800d6b0 <__multadd+0x88>)
 800d67e:	f000 fee7 	bl	800e450 <__assert_func>
 800d682:	6922      	ldr	r2, [r4, #16]
 800d684:	f104 010c 	add.w	r1, r4, #12
 800d688:	3202      	adds	r2, #2
 800d68a:	0092      	lsls	r2, r2, #2
 800d68c:	300c      	adds	r0, #12
 800d68e:	f7fe fcb8 	bl	800c002 <memcpy>
 800d692:	4621      	mov	r1, r4
 800d694:	4638      	mov	r0, r7
 800d696:	f7ff ffa5 	bl	800d5e4 <_Bfree>
 800d69a:	4644      	mov	r4, r8
 800d69c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800d6a0:	3501      	adds	r5, #1
 800d6a2:	615e      	str	r6, [r3, #20]
 800d6a4:	6125      	str	r5, [r4, #16]
 800d6a6:	4620      	mov	r0, r4
 800d6a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d6ac:	0800ed28 	.word	0x0800ed28
 800d6b0:	0800ed99 	.word	0x0800ed99

0800d6b4 <__s2b>:
 800d6b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d6b8:	4615      	mov	r5, r2
 800d6ba:	2209      	movs	r2, #9
 800d6bc:	461f      	mov	r7, r3
 800d6be:	3308      	adds	r3, #8
 800d6c0:	460c      	mov	r4, r1
 800d6c2:	fb93 f3f2 	sdiv	r3, r3, r2
 800d6c6:	4606      	mov	r6, r0
 800d6c8:	2201      	movs	r2, #1
 800d6ca:	2100      	movs	r1, #0
 800d6cc:	429a      	cmp	r2, r3
 800d6ce:	db09      	blt.n	800d6e4 <__s2b+0x30>
 800d6d0:	4630      	mov	r0, r6
 800d6d2:	f7ff ff47 	bl	800d564 <_Balloc>
 800d6d6:	b940      	cbnz	r0, 800d6ea <__s2b+0x36>
 800d6d8:	4602      	mov	r2, r0
 800d6da:	21d3      	movs	r1, #211	@ 0xd3
 800d6dc:	4b18      	ldr	r3, [pc, #96]	@ (800d740 <__s2b+0x8c>)
 800d6de:	4819      	ldr	r0, [pc, #100]	@ (800d744 <__s2b+0x90>)
 800d6e0:	f000 feb6 	bl	800e450 <__assert_func>
 800d6e4:	0052      	lsls	r2, r2, #1
 800d6e6:	3101      	adds	r1, #1
 800d6e8:	e7f0      	b.n	800d6cc <__s2b+0x18>
 800d6ea:	9b08      	ldr	r3, [sp, #32]
 800d6ec:	2d09      	cmp	r5, #9
 800d6ee:	6143      	str	r3, [r0, #20]
 800d6f0:	f04f 0301 	mov.w	r3, #1
 800d6f4:	6103      	str	r3, [r0, #16]
 800d6f6:	dd16      	ble.n	800d726 <__s2b+0x72>
 800d6f8:	f104 0909 	add.w	r9, r4, #9
 800d6fc:	46c8      	mov	r8, r9
 800d6fe:	442c      	add	r4, r5
 800d700:	f818 3b01 	ldrb.w	r3, [r8], #1
 800d704:	4601      	mov	r1, r0
 800d706:	220a      	movs	r2, #10
 800d708:	4630      	mov	r0, r6
 800d70a:	3b30      	subs	r3, #48	@ 0x30
 800d70c:	f7ff ff8c 	bl	800d628 <__multadd>
 800d710:	45a0      	cmp	r8, r4
 800d712:	d1f5      	bne.n	800d700 <__s2b+0x4c>
 800d714:	f1a5 0408 	sub.w	r4, r5, #8
 800d718:	444c      	add	r4, r9
 800d71a:	1b2d      	subs	r5, r5, r4
 800d71c:	1963      	adds	r3, r4, r5
 800d71e:	42bb      	cmp	r3, r7
 800d720:	db04      	blt.n	800d72c <__s2b+0x78>
 800d722:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d726:	2509      	movs	r5, #9
 800d728:	340a      	adds	r4, #10
 800d72a:	e7f6      	b.n	800d71a <__s2b+0x66>
 800d72c:	f814 3b01 	ldrb.w	r3, [r4], #1
 800d730:	4601      	mov	r1, r0
 800d732:	220a      	movs	r2, #10
 800d734:	4630      	mov	r0, r6
 800d736:	3b30      	subs	r3, #48	@ 0x30
 800d738:	f7ff ff76 	bl	800d628 <__multadd>
 800d73c:	e7ee      	b.n	800d71c <__s2b+0x68>
 800d73e:	bf00      	nop
 800d740:	0800ed28 	.word	0x0800ed28
 800d744:	0800ed99 	.word	0x0800ed99

0800d748 <__hi0bits>:
 800d748:	4603      	mov	r3, r0
 800d74a:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800d74e:	bf3a      	itte	cc
 800d750:	0403      	lslcc	r3, r0, #16
 800d752:	2010      	movcc	r0, #16
 800d754:	2000      	movcs	r0, #0
 800d756:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800d75a:	bf3c      	itt	cc
 800d75c:	021b      	lslcc	r3, r3, #8
 800d75e:	3008      	addcc	r0, #8
 800d760:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800d764:	bf3c      	itt	cc
 800d766:	011b      	lslcc	r3, r3, #4
 800d768:	3004      	addcc	r0, #4
 800d76a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800d76e:	bf3c      	itt	cc
 800d770:	009b      	lslcc	r3, r3, #2
 800d772:	3002      	addcc	r0, #2
 800d774:	2b00      	cmp	r3, #0
 800d776:	db05      	blt.n	800d784 <__hi0bits+0x3c>
 800d778:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800d77c:	f100 0001 	add.w	r0, r0, #1
 800d780:	bf08      	it	eq
 800d782:	2020      	moveq	r0, #32
 800d784:	4770      	bx	lr

0800d786 <__lo0bits>:
 800d786:	6803      	ldr	r3, [r0, #0]
 800d788:	4602      	mov	r2, r0
 800d78a:	f013 0007 	ands.w	r0, r3, #7
 800d78e:	d00b      	beq.n	800d7a8 <__lo0bits+0x22>
 800d790:	07d9      	lsls	r1, r3, #31
 800d792:	d421      	bmi.n	800d7d8 <__lo0bits+0x52>
 800d794:	0798      	lsls	r0, r3, #30
 800d796:	bf49      	itett	mi
 800d798:	085b      	lsrmi	r3, r3, #1
 800d79a:	089b      	lsrpl	r3, r3, #2
 800d79c:	2001      	movmi	r0, #1
 800d79e:	6013      	strmi	r3, [r2, #0]
 800d7a0:	bf5c      	itt	pl
 800d7a2:	2002      	movpl	r0, #2
 800d7a4:	6013      	strpl	r3, [r2, #0]
 800d7a6:	4770      	bx	lr
 800d7a8:	b299      	uxth	r1, r3
 800d7aa:	b909      	cbnz	r1, 800d7b0 <__lo0bits+0x2a>
 800d7ac:	2010      	movs	r0, #16
 800d7ae:	0c1b      	lsrs	r3, r3, #16
 800d7b0:	b2d9      	uxtb	r1, r3
 800d7b2:	b909      	cbnz	r1, 800d7b8 <__lo0bits+0x32>
 800d7b4:	3008      	adds	r0, #8
 800d7b6:	0a1b      	lsrs	r3, r3, #8
 800d7b8:	0719      	lsls	r1, r3, #28
 800d7ba:	bf04      	itt	eq
 800d7bc:	091b      	lsreq	r3, r3, #4
 800d7be:	3004      	addeq	r0, #4
 800d7c0:	0799      	lsls	r1, r3, #30
 800d7c2:	bf04      	itt	eq
 800d7c4:	089b      	lsreq	r3, r3, #2
 800d7c6:	3002      	addeq	r0, #2
 800d7c8:	07d9      	lsls	r1, r3, #31
 800d7ca:	d403      	bmi.n	800d7d4 <__lo0bits+0x4e>
 800d7cc:	085b      	lsrs	r3, r3, #1
 800d7ce:	f100 0001 	add.w	r0, r0, #1
 800d7d2:	d003      	beq.n	800d7dc <__lo0bits+0x56>
 800d7d4:	6013      	str	r3, [r2, #0]
 800d7d6:	4770      	bx	lr
 800d7d8:	2000      	movs	r0, #0
 800d7da:	4770      	bx	lr
 800d7dc:	2020      	movs	r0, #32
 800d7de:	4770      	bx	lr

0800d7e0 <__i2b>:
 800d7e0:	b510      	push	{r4, lr}
 800d7e2:	460c      	mov	r4, r1
 800d7e4:	2101      	movs	r1, #1
 800d7e6:	f7ff febd 	bl	800d564 <_Balloc>
 800d7ea:	4602      	mov	r2, r0
 800d7ec:	b928      	cbnz	r0, 800d7fa <__i2b+0x1a>
 800d7ee:	f240 1145 	movw	r1, #325	@ 0x145
 800d7f2:	4b04      	ldr	r3, [pc, #16]	@ (800d804 <__i2b+0x24>)
 800d7f4:	4804      	ldr	r0, [pc, #16]	@ (800d808 <__i2b+0x28>)
 800d7f6:	f000 fe2b 	bl	800e450 <__assert_func>
 800d7fa:	2301      	movs	r3, #1
 800d7fc:	6144      	str	r4, [r0, #20]
 800d7fe:	6103      	str	r3, [r0, #16]
 800d800:	bd10      	pop	{r4, pc}
 800d802:	bf00      	nop
 800d804:	0800ed28 	.word	0x0800ed28
 800d808:	0800ed99 	.word	0x0800ed99

0800d80c <__multiply>:
 800d80c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d810:	4614      	mov	r4, r2
 800d812:	690a      	ldr	r2, [r1, #16]
 800d814:	6923      	ldr	r3, [r4, #16]
 800d816:	460f      	mov	r7, r1
 800d818:	429a      	cmp	r2, r3
 800d81a:	bfa2      	ittt	ge
 800d81c:	4623      	movge	r3, r4
 800d81e:	460c      	movge	r4, r1
 800d820:	461f      	movge	r7, r3
 800d822:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800d826:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800d82a:	68a3      	ldr	r3, [r4, #8]
 800d82c:	6861      	ldr	r1, [r4, #4]
 800d82e:	eb0a 0609 	add.w	r6, sl, r9
 800d832:	42b3      	cmp	r3, r6
 800d834:	b085      	sub	sp, #20
 800d836:	bfb8      	it	lt
 800d838:	3101      	addlt	r1, #1
 800d83a:	f7ff fe93 	bl	800d564 <_Balloc>
 800d83e:	b930      	cbnz	r0, 800d84e <__multiply+0x42>
 800d840:	4602      	mov	r2, r0
 800d842:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800d846:	4b43      	ldr	r3, [pc, #268]	@ (800d954 <__multiply+0x148>)
 800d848:	4843      	ldr	r0, [pc, #268]	@ (800d958 <__multiply+0x14c>)
 800d84a:	f000 fe01 	bl	800e450 <__assert_func>
 800d84e:	f100 0514 	add.w	r5, r0, #20
 800d852:	462b      	mov	r3, r5
 800d854:	2200      	movs	r2, #0
 800d856:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800d85a:	4543      	cmp	r3, r8
 800d85c:	d321      	bcc.n	800d8a2 <__multiply+0x96>
 800d85e:	f107 0114 	add.w	r1, r7, #20
 800d862:	f104 0214 	add.w	r2, r4, #20
 800d866:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800d86a:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800d86e:	9302      	str	r3, [sp, #8]
 800d870:	1b13      	subs	r3, r2, r4
 800d872:	3b15      	subs	r3, #21
 800d874:	f023 0303 	bic.w	r3, r3, #3
 800d878:	3304      	adds	r3, #4
 800d87a:	f104 0715 	add.w	r7, r4, #21
 800d87e:	42ba      	cmp	r2, r7
 800d880:	bf38      	it	cc
 800d882:	2304      	movcc	r3, #4
 800d884:	9301      	str	r3, [sp, #4]
 800d886:	9b02      	ldr	r3, [sp, #8]
 800d888:	9103      	str	r1, [sp, #12]
 800d88a:	428b      	cmp	r3, r1
 800d88c:	d80c      	bhi.n	800d8a8 <__multiply+0x9c>
 800d88e:	2e00      	cmp	r6, #0
 800d890:	dd03      	ble.n	800d89a <__multiply+0x8e>
 800d892:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800d896:	2b00      	cmp	r3, #0
 800d898:	d05a      	beq.n	800d950 <__multiply+0x144>
 800d89a:	6106      	str	r6, [r0, #16]
 800d89c:	b005      	add	sp, #20
 800d89e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d8a2:	f843 2b04 	str.w	r2, [r3], #4
 800d8a6:	e7d8      	b.n	800d85a <__multiply+0x4e>
 800d8a8:	f8b1 a000 	ldrh.w	sl, [r1]
 800d8ac:	f1ba 0f00 	cmp.w	sl, #0
 800d8b0:	d023      	beq.n	800d8fa <__multiply+0xee>
 800d8b2:	46a9      	mov	r9, r5
 800d8b4:	f04f 0c00 	mov.w	ip, #0
 800d8b8:	f104 0e14 	add.w	lr, r4, #20
 800d8bc:	f85e 7b04 	ldr.w	r7, [lr], #4
 800d8c0:	f8d9 3000 	ldr.w	r3, [r9]
 800d8c4:	fa1f fb87 	uxth.w	fp, r7
 800d8c8:	b29b      	uxth	r3, r3
 800d8ca:	fb0a 330b 	mla	r3, sl, fp, r3
 800d8ce:	4463      	add	r3, ip
 800d8d0:	f8d9 c000 	ldr.w	ip, [r9]
 800d8d4:	0c3f      	lsrs	r7, r7, #16
 800d8d6:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 800d8da:	fb0a c707 	mla	r7, sl, r7, ip
 800d8de:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800d8e2:	b29b      	uxth	r3, r3
 800d8e4:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800d8e8:	4572      	cmp	r2, lr
 800d8ea:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800d8ee:	f849 3b04 	str.w	r3, [r9], #4
 800d8f2:	d8e3      	bhi.n	800d8bc <__multiply+0xb0>
 800d8f4:	9b01      	ldr	r3, [sp, #4]
 800d8f6:	f845 c003 	str.w	ip, [r5, r3]
 800d8fa:	9b03      	ldr	r3, [sp, #12]
 800d8fc:	3104      	adds	r1, #4
 800d8fe:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800d902:	f1b9 0f00 	cmp.w	r9, #0
 800d906:	d021      	beq.n	800d94c <__multiply+0x140>
 800d908:	46ae      	mov	lr, r5
 800d90a:	f04f 0a00 	mov.w	sl, #0
 800d90e:	682b      	ldr	r3, [r5, #0]
 800d910:	f104 0c14 	add.w	ip, r4, #20
 800d914:	f8bc b000 	ldrh.w	fp, [ip]
 800d918:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800d91c:	b29b      	uxth	r3, r3
 800d91e:	fb09 770b 	mla	r7, r9, fp, r7
 800d922:	4457      	add	r7, sl
 800d924:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800d928:	f84e 3b04 	str.w	r3, [lr], #4
 800d92c:	f85c 3b04 	ldr.w	r3, [ip], #4
 800d930:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800d934:	f8be 3000 	ldrh.w	r3, [lr]
 800d938:	4562      	cmp	r2, ip
 800d93a:	fb09 330a 	mla	r3, r9, sl, r3
 800d93e:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800d942:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800d946:	d8e5      	bhi.n	800d914 <__multiply+0x108>
 800d948:	9f01      	ldr	r7, [sp, #4]
 800d94a:	51eb      	str	r3, [r5, r7]
 800d94c:	3504      	adds	r5, #4
 800d94e:	e79a      	b.n	800d886 <__multiply+0x7a>
 800d950:	3e01      	subs	r6, #1
 800d952:	e79c      	b.n	800d88e <__multiply+0x82>
 800d954:	0800ed28 	.word	0x0800ed28
 800d958:	0800ed99 	.word	0x0800ed99

0800d95c <__pow5mult>:
 800d95c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d960:	4615      	mov	r5, r2
 800d962:	f012 0203 	ands.w	r2, r2, #3
 800d966:	4607      	mov	r7, r0
 800d968:	460e      	mov	r6, r1
 800d96a:	d007      	beq.n	800d97c <__pow5mult+0x20>
 800d96c:	4c25      	ldr	r4, [pc, #148]	@ (800da04 <__pow5mult+0xa8>)
 800d96e:	3a01      	subs	r2, #1
 800d970:	2300      	movs	r3, #0
 800d972:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800d976:	f7ff fe57 	bl	800d628 <__multadd>
 800d97a:	4606      	mov	r6, r0
 800d97c:	10ad      	asrs	r5, r5, #2
 800d97e:	d03d      	beq.n	800d9fc <__pow5mult+0xa0>
 800d980:	69fc      	ldr	r4, [r7, #28]
 800d982:	b97c      	cbnz	r4, 800d9a4 <__pow5mult+0x48>
 800d984:	2010      	movs	r0, #16
 800d986:	f7ff fd25 	bl	800d3d4 <malloc>
 800d98a:	4602      	mov	r2, r0
 800d98c:	61f8      	str	r0, [r7, #28]
 800d98e:	b928      	cbnz	r0, 800d99c <__pow5mult+0x40>
 800d990:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800d994:	4b1c      	ldr	r3, [pc, #112]	@ (800da08 <__pow5mult+0xac>)
 800d996:	481d      	ldr	r0, [pc, #116]	@ (800da0c <__pow5mult+0xb0>)
 800d998:	f000 fd5a 	bl	800e450 <__assert_func>
 800d99c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800d9a0:	6004      	str	r4, [r0, #0]
 800d9a2:	60c4      	str	r4, [r0, #12]
 800d9a4:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800d9a8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800d9ac:	b94c      	cbnz	r4, 800d9c2 <__pow5mult+0x66>
 800d9ae:	f240 2171 	movw	r1, #625	@ 0x271
 800d9b2:	4638      	mov	r0, r7
 800d9b4:	f7ff ff14 	bl	800d7e0 <__i2b>
 800d9b8:	2300      	movs	r3, #0
 800d9ba:	4604      	mov	r4, r0
 800d9bc:	f8c8 0008 	str.w	r0, [r8, #8]
 800d9c0:	6003      	str	r3, [r0, #0]
 800d9c2:	f04f 0900 	mov.w	r9, #0
 800d9c6:	07eb      	lsls	r3, r5, #31
 800d9c8:	d50a      	bpl.n	800d9e0 <__pow5mult+0x84>
 800d9ca:	4631      	mov	r1, r6
 800d9cc:	4622      	mov	r2, r4
 800d9ce:	4638      	mov	r0, r7
 800d9d0:	f7ff ff1c 	bl	800d80c <__multiply>
 800d9d4:	4680      	mov	r8, r0
 800d9d6:	4631      	mov	r1, r6
 800d9d8:	4638      	mov	r0, r7
 800d9da:	f7ff fe03 	bl	800d5e4 <_Bfree>
 800d9de:	4646      	mov	r6, r8
 800d9e0:	106d      	asrs	r5, r5, #1
 800d9e2:	d00b      	beq.n	800d9fc <__pow5mult+0xa0>
 800d9e4:	6820      	ldr	r0, [r4, #0]
 800d9e6:	b938      	cbnz	r0, 800d9f8 <__pow5mult+0x9c>
 800d9e8:	4622      	mov	r2, r4
 800d9ea:	4621      	mov	r1, r4
 800d9ec:	4638      	mov	r0, r7
 800d9ee:	f7ff ff0d 	bl	800d80c <__multiply>
 800d9f2:	6020      	str	r0, [r4, #0]
 800d9f4:	f8c0 9000 	str.w	r9, [r0]
 800d9f8:	4604      	mov	r4, r0
 800d9fa:	e7e4      	b.n	800d9c6 <__pow5mult+0x6a>
 800d9fc:	4630      	mov	r0, r6
 800d9fe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800da02:	bf00      	nop
 800da04:	0800edf4 	.word	0x0800edf4
 800da08:	0800ecb9 	.word	0x0800ecb9
 800da0c:	0800ed99 	.word	0x0800ed99

0800da10 <__lshift>:
 800da10:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800da14:	460c      	mov	r4, r1
 800da16:	4607      	mov	r7, r0
 800da18:	4691      	mov	r9, r2
 800da1a:	6923      	ldr	r3, [r4, #16]
 800da1c:	6849      	ldr	r1, [r1, #4]
 800da1e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800da22:	68a3      	ldr	r3, [r4, #8]
 800da24:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800da28:	f108 0601 	add.w	r6, r8, #1
 800da2c:	42b3      	cmp	r3, r6
 800da2e:	db0b      	blt.n	800da48 <__lshift+0x38>
 800da30:	4638      	mov	r0, r7
 800da32:	f7ff fd97 	bl	800d564 <_Balloc>
 800da36:	4605      	mov	r5, r0
 800da38:	b948      	cbnz	r0, 800da4e <__lshift+0x3e>
 800da3a:	4602      	mov	r2, r0
 800da3c:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800da40:	4b27      	ldr	r3, [pc, #156]	@ (800dae0 <__lshift+0xd0>)
 800da42:	4828      	ldr	r0, [pc, #160]	@ (800dae4 <__lshift+0xd4>)
 800da44:	f000 fd04 	bl	800e450 <__assert_func>
 800da48:	3101      	adds	r1, #1
 800da4a:	005b      	lsls	r3, r3, #1
 800da4c:	e7ee      	b.n	800da2c <__lshift+0x1c>
 800da4e:	2300      	movs	r3, #0
 800da50:	f100 0114 	add.w	r1, r0, #20
 800da54:	f100 0210 	add.w	r2, r0, #16
 800da58:	4618      	mov	r0, r3
 800da5a:	4553      	cmp	r3, sl
 800da5c:	db33      	blt.n	800dac6 <__lshift+0xb6>
 800da5e:	6920      	ldr	r0, [r4, #16]
 800da60:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800da64:	f104 0314 	add.w	r3, r4, #20
 800da68:	f019 091f 	ands.w	r9, r9, #31
 800da6c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800da70:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800da74:	d02b      	beq.n	800dace <__lshift+0xbe>
 800da76:	468a      	mov	sl, r1
 800da78:	2200      	movs	r2, #0
 800da7a:	f1c9 0e20 	rsb	lr, r9, #32
 800da7e:	6818      	ldr	r0, [r3, #0]
 800da80:	fa00 f009 	lsl.w	r0, r0, r9
 800da84:	4310      	orrs	r0, r2
 800da86:	f84a 0b04 	str.w	r0, [sl], #4
 800da8a:	f853 2b04 	ldr.w	r2, [r3], #4
 800da8e:	459c      	cmp	ip, r3
 800da90:	fa22 f20e 	lsr.w	r2, r2, lr
 800da94:	d8f3      	bhi.n	800da7e <__lshift+0x6e>
 800da96:	ebac 0304 	sub.w	r3, ip, r4
 800da9a:	3b15      	subs	r3, #21
 800da9c:	f023 0303 	bic.w	r3, r3, #3
 800daa0:	3304      	adds	r3, #4
 800daa2:	f104 0015 	add.w	r0, r4, #21
 800daa6:	4584      	cmp	ip, r0
 800daa8:	bf38      	it	cc
 800daaa:	2304      	movcc	r3, #4
 800daac:	50ca      	str	r2, [r1, r3]
 800daae:	b10a      	cbz	r2, 800dab4 <__lshift+0xa4>
 800dab0:	f108 0602 	add.w	r6, r8, #2
 800dab4:	3e01      	subs	r6, #1
 800dab6:	4638      	mov	r0, r7
 800dab8:	4621      	mov	r1, r4
 800daba:	612e      	str	r6, [r5, #16]
 800dabc:	f7ff fd92 	bl	800d5e4 <_Bfree>
 800dac0:	4628      	mov	r0, r5
 800dac2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800dac6:	f842 0f04 	str.w	r0, [r2, #4]!
 800daca:	3301      	adds	r3, #1
 800dacc:	e7c5      	b.n	800da5a <__lshift+0x4a>
 800dace:	3904      	subs	r1, #4
 800dad0:	f853 2b04 	ldr.w	r2, [r3], #4
 800dad4:	459c      	cmp	ip, r3
 800dad6:	f841 2f04 	str.w	r2, [r1, #4]!
 800dada:	d8f9      	bhi.n	800dad0 <__lshift+0xc0>
 800dadc:	e7ea      	b.n	800dab4 <__lshift+0xa4>
 800dade:	bf00      	nop
 800dae0:	0800ed28 	.word	0x0800ed28
 800dae4:	0800ed99 	.word	0x0800ed99

0800dae8 <__mcmp>:
 800dae8:	4603      	mov	r3, r0
 800daea:	690a      	ldr	r2, [r1, #16]
 800daec:	6900      	ldr	r0, [r0, #16]
 800daee:	b530      	push	{r4, r5, lr}
 800daf0:	1a80      	subs	r0, r0, r2
 800daf2:	d10e      	bne.n	800db12 <__mcmp+0x2a>
 800daf4:	3314      	adds	r3, #20
 800daf6:	3114      	adds	r1, #20
 800daf8:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800dafc:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800db00:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800db04:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800db08:	4295      	cmp	r5, r2
 800db0a:	d003      	beq.n	800db14 <__mcmp+0x2c>
 800db0c:	d205      	bcs.n	800db1a <__mcmp+0x32>
 800db0e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800db12:	bd30      	pop	{r4, r5, pc}
 800db14:	42a3      	cmp	r3, r4
 800db16:	d3f3      	bcc.n	800db00 <__mcmp+0x18>
 800db18:	e7fb      	b.n	800db12 <__mcmp+0x2a>
 800db1a:	2001      	movs	r0, #1
 800db1c:	e7f9      	b.n	800db12 <__mcmp+0x2a>
	...

0800db20 <__mdiff>:
 800db20:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800db24:	4689      	mov	r9, r1
 800db26:	4606      	mov	r6, r0
 800db28:	4611      	mov	r1, r2
 800db2a:	4648      	mov	r0, r9
 800db2c:	4614      	mov	r4, r2
 800db2e:	f7ff ffdb 	bl	800dae8 <__mcmp>
 800db32:	1e05      	subs	r5, r0, #0
 800db34:	d112      	bne.n	800db5c <__mdiff+0x3c>
 800db36:	4629      	mov	r1, r5
 800db38:	4630      	mov	r0, r6
 800db3a:	f7ff fd13 	bl	800d564 <_Balloc>
 800db3e:	4602      	mov	r2, r0
 800db40:	b928      	cbnz	r0, 800db4e <__mdiff+0x2e>
 800db42:	f240 2137 	movw	r1, #567	@ 0x237
 800db46:	4b3e      	ldr	r3, [pc, #248]	@ (800dc40 <__mdiff+0x120>)
 800db48:	483e      	ldr	r0, [pc, #248]	@ (800dc44 <__mdiff+0x124>)
 800db4a:	f000 fc81 	bl	800e450 <__assert_func>
 800db4e:	2301      	movs	r3, #1
 800db50:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800db54:	4610      	mov	r0, r2
 800db56:	b003      	add	sp, #12
 800db58:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800db5c:	bfbc      	itt	lt
 800db5e:	464b      	movlt	r3, r9
 800db60:	46a1      	movlt	r9, r4
 800db62:	4630      	mov	r0, r6
 800db64:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800db68:	bfba      	itte	lt
 800db6a:	461c      	movlt	r4, r3
 800db6c:	2501      	movlt	r5, #1
 800db6e:	2500      	movge	r5, #0
 800db70:	f7ff fcf8 	bl	800d564 <_Balloc>
 800db74:	4602      	mov	r2, r0
 800db76:	b918      	cbnz	r0, 800db80 <__mdiff+0x60>
 800db78:	f240 2145 	movw	r1, #581	@ 0x245
 800db7c:	4b30      	ldr	r3, [pc, #192]	@ (800dc40 <__mdiff+0x120>)
 800db7e:	e7e3      	b.n	800db48 <__mdiff+0x28>
 800db80:	f100 0b14 	add.w	fp, r0, #20
 800db84:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800db88:	f109 0310 	add.w	r3, r9, #16
 800db8c:	60c5      	str	r5, [r0, #12]
 800db8e:	f04f 0c00 	mov.w	ip, #0
 800db92:	f109 0514 	add.w	r5, r9, #20
 800db96:	46d9      	mov	r9, fp
 800db98:	6926      	ldr	r6, [r4, #16]
 800db9a:	f104 0e14 	add.w	lr, r4, #20
 800db9e:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800dba2:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800dba6:	9301      	str	r3, [sp, #4]
 800dba8:	9b01      	ldr	r3, [sp, #4]
 800dbaa:	f85e 0b04 	ldr.w	r0, [lr], #4
 800dbae:	f853 af04 	ldr.w	sl, [r3, #4]!
 800dbb2:	b281      	uxth	r1, r0
 800dbb4:	9301      	str	r3, [sp, #4]
 800dbb6:	fa1f f38a 	uxth.w	r3, sl
 800dbba:	1a5b      	subs	r3, r3, r1
 800dbbc:	0c00      	lsrs	r0, r0, #16
 800dbbe:	4463      	add	r3, ip
 800dbc0:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800dbc4:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800dbc8:	b29b      	uxth	r3, r3
 800dbca:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800dbce:	4576      	cmp	r6, lr
 800dbd0:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800dbd4:	f849 3b04 	str.w	r3, [r9], #4
 800dbd8:	d8e6      	bhi.n	800dba8 <__mdiff+0x88>
 800dbda:	1b33      	subs	r3, r6, r4
 800dbdc:	3b15      	subs	r3, #21
 800dbde:	f023 0303 	bic.w	r3, r3, #3
 800dbe2:	3415      	adds	r4, #21
 800dbe4:	3304      	adds	r3, #4
 800dbe6:	42a6      	cmp	r6, r4
 800dbe8:	bf38      	it	cc
 800dbea:	2304      	movcc	r3, #4
 800dbec:	441d      	add	r5, r3
 800dbee:	445b      	add	r3, fp
 800dbf0:	461e      	mov	r6, r3
 800dbf2:	462c      	mov	r4, r5
 800dbf4:	4544      	cmp	r4, r8
 800dbf6:	d30e      	bcc.n	800dc16 <__mdiff+0xf6>
 800dbf8:	f108 0103 	add.w	r1, r8, #3
 800dbfc:	1b49      	subs	r1, r1, r5
 800dbfe:	f021 0103 	bic.w	r1, r1, #3
 800dc02:	3d03      	subs	r5, #3
 800dc04:	45a8      	cmp	r8, r5
 800dc06:	bf38      	it	cc
 800dc08:	2100      	movcc	r1, #0
 800dc0a:	440b      	add	r3, r1
 800dc0c:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800dc10:	b199      	cbz	r1, 800dc3a <__mdiff+0x11a>
 800dc12:	6117      	str	r7, [r2, #16]
 800dc14:	e79e      	b.n	800db54 <__mdiff+0x34>
 800dc16:	46e6      	mov	lr, ip
 800dc18:	f854 1b04 	ldr.w	r1, [r4], #4
 800dc1c:	fa1f fc81 	uxth.w	ip, r1
 800dc20:	44f4      	add	ip, lr
 800dc22:	0c08      	lsrs	r0, r1, #16
 800dc24:	4471      	add	r1, lr
 800dc26:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800dc2a:	b289      	uxth	r1, r1
 800dc2c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800dc30:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800dc34:	f846 1b04 	str.w	r1, [r6], #4
 800dc38:	e7dc      	b.n	800dbf4 <__mdiff+0xd4>
 800dc3a:	3f01      	subs	r7, #1
 800dc3c:	e7e6      	b.n	800dc0c <__mdiff+0xec>
 800dc3e:	bf00      	nop
 800dc40:	0800ed28 	.word	0x0800ed28
 800dc44:	0800ed99 	.word	0x0800ed99

0800dc48 <__ulp>:
 800dc48:	4b0e      	ldr	r3, [pc, #56]	@ (800dc84 <__ulp+0x3c>)
 800dc4a:	400b      	ands	r3, r1
 800dc4c:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 800dc50:	2b00      	cmp	r3, #0
 800dc52:	dc08      	bgt.n	800dc66 <__ulp+0x1e>
 800dc54:	425b      	negs	r3, r3
 800dc56:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800dc5a:	ea4f 5223 	mov.w	r2, r3, asr #20
 800dc5e:	da04      	bge.n	800dc6a <__ulp+0x22>
 800dc60:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800dc64:	4113      	asrs	r3, r2
 800dc66:	2200      	movs	r2, #0
 800dc68:	e008      	b.n	800dc7c <__ulp+0x34>
 800dc6a:	f1a2 0314 	sub.w	r3, r2, #20
 800dc6e:	2b1e      	cmp	r3, #30
 800dc70:	bfd6      	itet	le
 800dc72:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 800dc76:	2201      	movgt	r2, #1
 800dc78:	40da      	lsrle	r2, r3
 800dc7a:	2300      	movs	r3, #0
 800dc7c:	4619      	mov	r1, r3
 800dc7e:	4610      	mov	r0, r2
 800dc80:	4770      	bx	lr
 800dc82:	bf00      	nop
 800dc84:	7ff00000 	.word	0x7ff00000

0800dc88 <__b2d>:
 800dc88:	6902      	ldr	r2, [r0, #16]
 800dc8a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dc8c:	f100 0614 	add.w	r6, r0, #20
 800dc90:	eb06 0282 	add.w	r2, r6, r2, lsl #2
 800dc94:	f852 4c04 	ldr.w	r4, [r2, #-4]
 800dc98:	4f1e      	ldr	r7, [pc, #120]	@ (800dd14 <__b2d+0x8c>)
 800dc9a:	4620      	mov	r0, r4
 800dc9c:	f7ff fd54 	bl	800d748 <__hi0bits>
 800dca0:	4603      	mov	r3, r0
 800dca2:	f1c0 0020 	rsb	r0, r0, #32
 800dca6:	2b0a      	cmp	r3, #10
 800dca8:	f1a2 0504 	sub.w	r5, r2, #4
 800dcac:	6008      	str	r0, [r1, #0]
 800dcae:	dc12      	bgt.n	800dcd6 <__b2d+0x4e>
 800dcb0:	42ae      	cmp	r6, r5
 800dcb2:	bf2c      	ite	cs
 800dcb4:	2200      	movcs	r2, #0
 800dcb6:	f852 2c08 	ldrcc.w	r2, [r2, #-8]
 800dcba:	f1c3 0c0b 	rsb	ip, r3, #11
 800dcbe:	3315      	adds	r3, #21
 800dcc0:	fa24 fe0c 	lsr.w	lr, r4, ip
 800dcc4:	fa04 f303 	lsl.w	r3, r4, r3
 800dcc8:	fa22 f20c 	lsr.w	r2, r2, ip
 800dccc:	ea4e 0107 	orr.w	r1, lr, r7
 800dcd0:	431a      	orrs	r2, r3
 800dcd2:	4610      	mov	r0, r2
 800dcd4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800dcd6:	42ae      	cmp	r6, r5
 800dcd8:	bf36      	itet	cc
 800dcda:	f1a2 0508 	subcc.w	r5, r2, #8
 800dcde:	2200      	movcs	r2, #0
 800dce0:	f852 2c08 	ldrcc.w	r2, [r2, #-8]
 800dce4:	3b0b      	subs	r3, #11
 800dce6:	d012      	beq.n	800dd0e <__b2d+0x86>
 800dce8:	f1c3 0720 	rsb	r7, r3, #32
 800dcec:	fa22 f107 	lsr.w	r1, r2, r7
 800dcf0:	409c      	lsls	r4, r3
 800dcf2:	430c      	orrs	r4, r1
 800dcf4:	42b5      	cmp	r5, r6
 800dcf6:	f044 517f 	orr.w	r1, r4, #1069547520	@ 0x3fc00000
 800dcfa:	bf94      	ite	ls
 800dcfc:	2400      	movls	r4, #0
 800dcfe:	f855 4c04 	ldrhi.w	r4, [r5, #-4]
 800dd02:	409a      	lsls	r2, r3
 800dd04:	40fc      	lsrs	r4, r7
 800dd06:	f441 1140 	orr.w	r1, r1, #3145728	@ 0x300000
 800dd0a:	4322      	orrs	r2, r4
 800dd0c:	e7e1      	b.n	800dcd2 <__b2d+0x4a>
 800dd0e:	ea44 0107 	orr.w	r1, r4, r7
 800dd12:	e7de      	b.n	800dcd2 <__b2d+0x4a>
 800dd14:	3ff00000 	.word	0x3ff00000

0800dd18 <__d2b>:
 800dd18:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
 800dd1c:	2101      	movs	r1, #1
 800dd1e:	4690      	mov	r8, r2
 800dd20:	4699      	mov	r9, r3
 800dd22:	9e08      	ldr	r6, [sp, #32]
 800dd24:	f7ff fc1e 	bl	800d564 <_Balloc>
 800dd28:	4604      	mov	r4, r0
 800dd2a:	b930      	cbnz	r0, 800dd3a <__d2b+0x22>
 800dd2c:	4602      	mov	r2, r0
 800dd2e:	f240 310f 	movw	r1, #783	@ 0x30f
 800dd32:	4b23      	ldr	r3, [pc, #140]	@ (800ddc0 <__d2b+0xa8>)
 800dd34:	4823      	ldr	r0, [pc, #140]	@ (800ddc4 <__d2b+0xac>)
 800dd36:	f000 fb8b 	bl	800e450 <__assert_func>
 800dd3a:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800dd3e:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800dd42:	b10d      	cbz	r5, 800dd48 <__d2b+0x30>
 800dd44:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800dd48:	9301      	str	r3, [sp, #4]
 800dd4a:	f1b8 0300 	subs.w	r3, r8, #0
 800dd4e:	d024      	beq.n	800dd9a <__d2b+0x82>
 800dd50:	4668      	mov	r0, sp
 800dd52:	9300      	str	r3, [sp, #0]
 800dd54:	f7ff fd17 	bl	800d786 <__lo0bits>
 800dd58:	e9dd 1200 	ldrd	r1, r2, [sp]
 800dd5c:	b1d8      	cbz	r0, 800dd96 <__d2b+0x7e>
 800dd5e:	f1c0 0320 	rsb	r3, r0, #32
 800dd62:	fa02 f303 	lsl.w	r3, r2, r3
 800dd66:	430b      	orrs	r3, r1
 800dd68:	40c2      	lsrs	r2, r0
 800dd6a:	6163      	str	r3, [r4, #20]
 800dd6c:	9201      	str	r2, [sp, #4]
 800dd6e:	9b01      	ldr	r3, [sp, #4]
 800dd70:	2b00      	cmp	r3, #0
 800dd72:	bf0c      	ite	eq
 800dd74:	2201      	moveq	r2, #1
 800dd76:	2202      	movne	r2, #2
 800dd78:	61a3      	str	r3, [r4, #24]
 800dd7a:	6122      	str	r2, [r4, #16]
 800dd7c:	b1ad      	cbz	r5, 800ddaa <__d2b+0x92>
 800dd7e:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800dd82:	4405      	add	r5, r0
 800dd84:	6035      	str	r5, [r6, #0]
 800dd86:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800dd8a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800dd8c:	6018      	str	r0, [r3, #0]
 800dd8e:	4620      	mov	r0, r4
 800dd90:	b002      	add	sp, #8
 800dd92:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 800dd96:	6161      	str	r1, [r4, #20]
 800dd98:	e7e9      	b.n	800dd6e <__d2b+0x56>
 800dd9a:	a801      	add	r0, sp, #4
 800dd9c:	f7ff fcf3 	bl	800d786 <__lo0bits>
 800dda0:	9b01      	ldr	r3, [sp, #4]
 800dda2:	2201      	movs	r2, #1
 800dda4:	6163      	str	r3, [r4, #20]
 800dda6:	3020      	adds	r0, #32
 800dda8:	e7e7      	b.n	800dd7a <__d2b+0x62>
 800ddaa:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800ddae:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800ddb2:	6030      	str	r0, [r6, #0]
 800ddb4:	6918      	ldr	r0, [r3, #16]
 800ddb6:	f7ff fcc7 	bl	800d748 <__hi0bits>
 800ddba:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800ddbe:	e7e4      	b.n	800dd8a <__d2b+0x72>
 800ddc0:	0800ed28 	.word	0x0800ed28
 800ddc4:	0800ed99 	.word	0x0800ed99

0800ddc8 <__ratio>:
 800ddc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ddcc:	b085      	sub	sp, #20
 800ddce:	e9cd 1000 	strd	r1, r0, [sp]
 800ddd2:	a902      	add	r1, sp, #8
 800ddd4:	f7ff ff58 	bl	800dc88 <__b2d>
 800ddd8:	468b      	mov	fp, r1
 800ddda:	4606      	mov	r6, r0
 800dddc:	460f      	mov	r7, r1
 800ddde:	9800      	ldr	r0, [sp, #0]
 800dde0:	a903      	add	r1, sp, #12
 800dde2:	f7ff ff51 	bl	800dc88 <__b2d>
 800dde6:	460d      	mov	r5, r1
 800dde8:	9b01      	ldr	r3, [sp, #4]
 800ddea:	4689      	mov	r9, r1
 800ddec:	6919      	ldr	r1, [r3, #16]
 800ddee:	9b00      	ldr	r3, [sp, #0]
 800ddf0:	4604      	mov	r4, r0
 800ddf2:	691b      	ldr	r3, [r3, #16]
 800ddf4:	4630      	mov	r0, r6
 800ddf6:	1ac9      	subs	r1, r1, r3
 800ddf8:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800ddfc:	1a9b      	subs	r3, r3, r2
 800ddfe:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 800de02:	2b00      	cmp	r3, #0
 800de04:	bfcd      	iteet	gt
 800de06:	463a      	movgt	r2, r7
 800de08:	462a      	movle	r2, r5
 800de0a:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800de0e:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
 800de12:	bfd8      	it	le
 800de14:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 800de18:	464b      	mov	r3, r9
 800de1a:	4622      	mov	r2, r4
 800de1c:	4659      	mov	r1, fp
 800de1e:	f7f2 fd39 	bl	8000894 <__aeabi_ddiv>
 800de22:	b005      	add	sp, #20
 800de24:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800de28 <__copybits>:
 800de28:	3901      	subs	r1, #1
 800de2a:	b570      	push	{r4, r5, r6, lr}
 800de2c:	1149      	asrs	r1, r1, #5
 800de2e:	6914      	ldr	r4, [r2, #16]
 800de30:	3101      	adds	r1, #1
 800de32:	f102 0314 	add.w	r3, r2, #20
 800de36:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800de3a:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800de3e:	1f05      	subs	r5, r0, #4
 800de40:	42a3      	cmp	r3, r4
 800de42:	d30c      	bcc.n	800de5e <__copybits+0x36>
 800de44:	1aa3      	subs	r3, r4, r2
 800de46:	3b11      	subs	r3, #17
 800de48:	f023 0303 	bic.w	r3, r3, #3
 800de4c:	3211      	adds	r2, #17
 800de4e:	42a2      	cmp	r2, r4
 800de50:	bf88      	it	hi
 800de52:	2300      	movhi	r3, #0
 800de54:	4418      	add	r0, r3
 800de56:	2300      	movs	r3, #0
 800de58:	4288      	cmp	r0, r1
 800de5a:	d305      	bcc.n	800de68 <__copybits+0x40>
 800de5c:	bd70      	pop	{r4, r5, r6, pc}
 800de5e:	f853 6b04 	ldr.w	r6, [r3], #4
 800de62:	f845 6f04 	str.w	r6, [r5, #4]!
 800de66:	e7eb      	b.n	800de40 <__copybits+0x18>
 800de68:	f840 3b04 	str.w	r3, [r0], #4
 800de6c:	e7f4      	b.n	800de58 <__copybits+0x30>

0800de6e <__any_on>:
 800de6e:	f100 0214 	add.w	r2, r0, #20
 800de72:	6900      	ldr	r0, [r0, #16]
 800de74:	114b      	asrs	r3, r1, #5
 800de76:	4298      	cmp	r0, r3
 800de78:	b510      	push	{r4, lr}
 800de7a:	db11      	blt.n	800dea0 <__any_on+0x32>
 800de7c:	dd0a      	ble.n	800de94 <__any_on+0x26>
 800de7e:	f011 011f 	ands.w	r1, r1, #31
 800de82:	d007      	beq.n	800de94 <__any_on+0x26>
 800de84:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800de88:	fa24 f001 	lsr.w	r0, r4, r1
 800de8c:	fa00 f101 	lsl.w	r1, r0, r1
 800de90:	428c      	cmp	r4, r1
 800de92:	d10b      	bne.n	800deac <__any_on+0x3e>
 800de94:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800de98:	4293      	cmp	r3, r2
 800de9a:	d803      	bhi.n	800dea4 <__any_on+0x36>
 800de9c:	2000      	movs	r0, #0
 800de9e:	bd10      	pop	{r4, pc}
 800dea0:	4603      	mov	r3, r0
 800dea2:	e7f7      	b.n	800de94 <__any_on+0x26>
 800dea4:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800dea8:	2900      	cmp	r1, #0
 800deaa:	d0f5      	beq.n	800de98 <__any_on+0x2a>
 800deac:	2001      	movs	r0, #1
 800deae:	e7f6      	b.n	800de9e <__any_on+0x30>

0800deb0 <__ascii_wctomb>:
 800deb0:	4603      	mov	r3, r0
 800deb2:	4608      	mov	r0, r1
 800deb4:	b141      	cbz	r1, 800dec8 <__ascii_wctomb+0x18>
 800deb6:	2aff      	cmp	r2, #255	@ 0xff
 800deb8:	d904      	bls.n	800dec4 <__ascii_wctomb+0x14>
 800deba:	228a      	movs	r2, #138	@ 0x8a
 800debc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800dec0:	601a      	str	r2, [r3, #0]
 800dec2:	4770      	bx	lr
 800dec4:	2001      	movs	r0, #1
 800dec6:	700a      	strb	r2, [r1, #0]
 800dec8:	4770      	bx	lr
	...

0800decc <_strtoll_l.constprop.0>:
 800decc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ded0:	4689      	mov	r9, r1
 800ded2:	461e      	mov	r6, r3
 800ded4:	460d      	mov	r5, r1
 800ded6:	4690      	mov	r8, r2
 800ded8:	b085      	sub	sp, #20
 800deda:	4a42      	ldr	r2, [pc, #264]	@ (800dfe4 <_strtoll_l.constprop.0+0x118>)
 800dedc:	9002      	str	r0, [sp, #8]
 800dede:	462b      	mov	r3, r5
 800dee0:	f815 4b01 	ldrb.w	r4, [r5], #1
 800dee4:	5d17      	ldrb	r7, [r2, r4]
 800dee6:	f017 0708 	ands.w	r7, r7, #8
 800deea:	d1f8      	bne.n	800dede <_strtoll_l.constprop.0+0x12>
 800deec:	2c2d      	cmp	r4, #45	@ 0x2d
 800deee:	d149      	bne.n	800df84 <_strtoll_l.constprop.0+0xb8>
 800def0:	2701      	movs	r7, #1
 800def2:	782c      	ldrb	r4, [r5, #0]
 800def4:	1c9d      	adds	r5, r3, #2
 800def6:	f036 0310 	bics.w	r3, r6, #16
 800defa:	d109      	bne.n	800df10 <_strtoll_l.constprop.0+0x44>
 800defc:	2c30      	cmp	r4, #48	@ 0x30
 800defe:	d146      	bne.n	800df8e <_strtoll_l.constprop.0+0xc2>
 800df00:	782b      	ldrb	r3, [r5, #0]
 800df02:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 800df06:	2b58      	cmp	r3, #88	@ 0x58
 800df08:	d141      	bne.n	800df8e <_strtoll_l.constprop.0+0xc2>
 800df0a:	2610      	movs	r6, #16
 800df0c:	786c      	ldrb	r4, [r5, #1]
 800df0e:	3502      	adds	r5, #2
 800df10:	f107 4a00 	add.w	sl, r7, #2147483648	@ 0x80000000
 800df14:	f107 3bff 	add.w	fp, r7, #4294967295	@ 0xffffffff
 800df18:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 800df1c:	17f3      	asrs	r3, r6, #31
 800df1e:	4632      	mov	r2, r6
 800df20:	4658      	mov	r0, fp
 800df22:	4651      	mov	r1, sl
 800df24:	9303      	str	r3, [sp, #12]
 800df26:	f7f3 f807 	bl	8000f38 <__aeabi_uldivmod>
 800df2a:	9201      	str	r2, [sp, #4]
 800df2c:	2200      	movs	r2, #0
 800df2e:	468e      	mov	lr, r1
 800df30:	4684      	mov	ip, r0
 800df32:	4611      	mov	r1, r2
 800df34:	4610      	mov	r0, r2
 800df36:	f1a4 0330 	sub.w	r3, r4, #48	@ 0x30
 800df3a:	2b09      	cmp	r3, #9
 800df3c:	d905      	bls.n	800df4a <_strtoll_l.constprop.0+0x7e>
 800df3e:	f1a4 0341 	sub.w	r3, r4, #65	@ 0x41
 800df42:	2b19      	cmp	r3, #25
 800df44:	d82a      	bhi.n	800df9c <_strtoll_l.constprop.0+0xd0>
 800df46:	f1a4 0337 	sub.w	r3, r4, #55	@ 0x37
 800df4a:	429e      	cmp	r6, r3
 800df4c:	dd30      	ble.n	800dfb0 <_strtoll_l.constprop.0+0xe4>
 800df4e:	1c54      	adds	r4, r2, #1
 800df50:	d015      	beq.n	800df7e <_strtoll_l.constprop.0+0xb2>
 800df52:	4584      	cmp	ip, r0
 800df54:	eb7e 0201 	sbcs.w	r2, lr, r1
 800df58:	d327      	bcc.n	800dfaa <_strtoll_l.constprop.0+0xde>
 800df5a:	458e      	cmp	lr, r1
 800df5c:	bf08      	it	eq
 800df5e:	4584      	cmpeq	ip, r0
 800df60:	d102      	bne.n	800df68 <_strtoll_l.constprop.0+0x9c>
 800df62:	9a01      	ldr	r2, [sp, #4]
 800df64:	429a      	cmp	r2, r3
 800df66:	db20      	blt.n	800dfaa <_strtoll_l.constprop.0+0xde>
 800df68:	4371      	muls	r1, r6
 800df6a:	9a03      	ldr	r2, [sp, #12]
 800df6c:	fb00 1102 	mla	r1, r0, r2, r1
 800df70:	fba6 0200 	umull	r0, r2, r6, r0
 800df74:	440a      	add	r2, r1
 800df76:	1818      	adds	r0, r3, r0
 800df78:	eb42 71e3 	adc.w	r1, r2, r3, asr #31
 800df7c:	2201      	movs	r2, #1
 800df7e:	f815 4b01 	ldrb.w	r4, [r5], #1
 800df82:	e7d8      	b.n	800df36 <_strtoll_l.constprop.0+0x6a>
 800df84:	2c2b      	cmp	r4, #43	@ 0x2b
 800df86:	bf04      	itt	eq
 800df88:	782c      	ldrbeq	r4, [r5, #0]
 800df8a:	1c9d      	addeq	r5, r3, #2
 800df8c:	e7b3      	b.n	800def6 <_strtoll_l.constprop.0+0x2a>
 800df8e:	2e00      	cmp	r6, #0
 800df90:	d1be      	bne.n	800df10 <_strtoll_l.constprop.0+0x44>
 800df92:	2c30      	cmp	r4, #48	@ 0x30
 800df94:	bf0c      	ite	eq
 800df96:	2608      	moveq	r6, #8
 800df98:	260a      	movne	r6, #10
 800df9a:	e7b9      	b.n	800df10 <_strtoll_l.constprop.0+0x44>
 800df9c:	f1a4 0361 	sub.w	r3, r4, #97	@ 0x61
 800dfa0:	2b19      	cmp	r3, #25
 800dfa2:	d805      	bhi.n	800dfb0 <_strtoll_l.constprop.0+0xe4>
 800dfa4:	f1a4 0357 	sub.w	r3, r4, #87	@ 0x57
 800dfa8:	e7cf      	b.n	800df4a <_strtoll_l.constprop.0+0x7e>
 800dfaa:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800dfae:	e7e6      	b.n	800df7e <_strtoll_l.constprop.0+0xb2>
 800dfb0:	1c53      	adds	r3, r2, #1
 800dfb2:	d10a      	bne.n	800dfca <_strtoll_l.constprop.0+0xfe>
 800dfb4:	2322      	movs	r3, #34	@ 0x22
 800dfb6:	9a02      	ldr	r2, [sp, #8]
 800dfb8:	4658      	mov	r0, fp
 800dfba:	4651      	mov	r1, sl
 800dfbc:	6013      	str	r3, [r2, #0]
 800dfbe:	f1b8 0f00 	cmp.w	r8, #0
 800dfc2:	d10a      	bne.n	800dfda <_strtoll_l.constprop.0+0x10e>
 800dfc4:	b005      	add	sp, #20
 800dfc6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dfca:	b117      	cbz	r7, 800dfd2 <_strtoll_l.constprop.0+0x106>
 800dfcc:	4240      	negs	r0, r0
 800dfce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800dfd2:	f1b8 0f00 	cmp.w	r8, #0
 800dfd6:	d0f5      	beq.n	800dfc4 <_strtoll_l.constprop.0+0xf8>
 800dfd8:	b10a      	cbz	r2, 800dfde <_strtoll_l.constprop.0+0x112>
 800dfda:	f105 39ff 	add.w	r9, r5, #4294967295	@ 0xffffffff
 800dfde:	f8c8 9000 	str.w	r9, [r8]
 800dfe2:	e7ef      	b.n	800dfc4 <_strtoll_l.constprop.0+0xf8>
 800dfe4:	0800eef1 	.word	0x0800eef1

0800dfe8 <strtoll>:
 800dfe8:	4613      	mov	r3, r2
 800dfea:	460a      	mov	r2, r1
 800dfec:	4601      	mov	r1, r0
 800dfee:	4802      	ldr	r0, [pc, #8]	@ (800dff8 <strtoll+0x10>)
 800dff0:	6800      	ldr	r0, [r0, #0]
 800dff2:	f7ff bf6b 	b.w	800decc <_strtoll_l.constprop.0>
 800dff6:	bf00      	nop
 800dff8:	20000308 	.word	0x20000308

0800dffc <__ssputs_r>:
 800dffc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e000:	461f      	mov	r7, r3
 800e002:	688e      	ldr	r6, [r1, #8]
 800e004:	4682      	mov	sl, r0
 800e006:	42be      	cmp	r6, r7
 800e008:	460c      	mov	r4, r1
 800e00a:	4690      	mov	r8, r2
 800e00c:	680b      	ldr	r3, [r1, #0]
 800e00e:	d82d      	bhi.n	800e06c <__ssputs_r+0x70>
 800e010:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800e014:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800e018:	d026      	beq.n	800e068 <__ssputs_r+0x6c>
 800e01a:	6965      	ldr	r5, [r4, #20]
 800e01c:	6909      	ldr	r1, [r1, #16]
 800e01e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800e022:	eba3 0901 	sub.w	r9, r3, r1
 800e026:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800e02a:	1c7b      	adds	r3, r7, #1
 800e02c:	444b      	add	r3, r9
 800e02e:	106d      	asrs	r5, r5, #1
 800e030:	429d      	cmp	r5, r3
 800e032:	bf38      	it	cc
 800e034:	461d      	movcc	r5, r3
 800e036:	0553      	lsls	r3, r2, #21
 800e038:	d527      	bpl.n	800e08a <__ssputs_r+0x8e>
 800e03a:	4629      	mov	r1, r5
 800e03c:	f7ff f9f4 	bl	800d428 <_malloc_r>
 800e040:	4606      	mov	r6, r0
 800e042:	b360      	cbz	r0, 800e09e <__ssputs_r+0xa2>
 800e044:	464a      	mov	r2, r9
 800e046:	6921      	ldr	r1, [r4, #16]
 800e048:	f7fd ffdb 	bl	800c002 <memcpy>
 800e04c:	89a3      	ldrh	r3, [r4, #12]
 800e04e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800e052:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e056:	81a3      	strh	r3, [r4, #12]
 800e058:	6126      	str	r6, [r4, #16]
 800e05a:	444e      	add	r6, r9
 800e05c:	6026      	str	r6, [r4, #0]
 800e05e:	463e      	mov	r6, r7
 800e060:	6165      	str	r5, [r4, #20]
 800e062:	eba5 0509 	sub.w	r5, r5, r9
 800e066:	60a5      	str	r5, [r4, #8]
 800e068:	42be      	cmp	r6, r7
 800e06a:	d900      	bls.n	800e06e <__ssputs_r+0x72>
 800e06c:	463e      	mov	r6, r7
 800e06e:	4632      	mov	r2, r6
 800e070:	4641      	mov	r1, r8
 800e072:	6820      	ldr	r0, [r4, #0]
 800e074:	f000 f9c2 	bl	800e3fc <memmove>
 800e078:	2000      	movs	r0, #0
 800e07a:	68a3      	ldr	r3, [r4, #8]
 800e07c:	1b9b      	subs	r3, r3, r6
 800e07e:	60a3      	str	r3, [r4, #8]
 800e080:	6823      	ldr	r3, [r4, #0]
 800e082:	4433      	add	r3, r6
 800e084:	6023      	str	r3, [r4, #0]
 800e086:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e08a:	462a      	mov	r2, r5
 800e08c:	f000 fa12 	bl	800e4b4 <_realloc_r>
 800e090:	4606      	mov	r6, r0
 800e092:	2800      	cmp	r0, #0
 800e094:	d1e0      	bne.n	800e058 <__ssputs_r+0x5c>
 800e096:	4650      	mov	r0, sl
 800e098:	6921      	ldr	r1, [r4, #16]
 800e09a:	f7fe fe19 	bl	800ccd0 <_free_r>
 800e09e:	230c      	movs	r3, #12
 800e0a0:	f8ca 3000 	str.w	r3, [sl]
 800e0a4:	89a3      	ldrh	r3, [r4, #12]
 800e0a6:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800e0aa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e0ae:	81a3      	strh	r3, [r4, #12]
 800e0b0:	e7e9      	b.n	800e086 <__ssputs_r+0x8a>
	...

0800e0b4 <_svfiprintf_r>:
 800e0b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e0b8:	4698      	mov	r8, r3
 800e0ba:	898b      	ldrh	r3, [r1, #12]
 800e0bc:	4607      	mov	r7, r0
 800e0be:	061b      	lsls	r3, r3, #24
 800e0c0:	460d      	mov	r5, r1
 800e0c2:	4614      	mov	r4, r2
 800e0c4:	b09d      	sub	sp, #116	@ 0x74
 800e0c6:	d510      	bpl.n	800e0ea <_svfiprintf_r+0x36>
 800e0c8:	690b      	ldr	r3, [r1, #16]
 800e0ca:	b973      	cbnz	r3, 800e0ea <_svfiprintf_r+0x36>
 800e0cc:	2140      	movs	r1, #64	@ 0x40
 800e0ce:	f7ff f9ab 	bl	800d428 <_malloc_r>
 800e0d2:	6028      	str	r0, [r5, #0]
 800e0d4:	6128      	str	r0, [r5, #16]
 800e0d6:	b930      	cbnz	r0, 800e0e6 <_svfiprintf_r+0x32>
 800e0d8:	230c      	movs	r3, #12
 800e0da:	603b      	str	r3, [r7, #0]
 800e0dc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800e0e0:	b01d      	add	sp, #116	@ 0x74
 800e0e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e0e6:	2340      	movs	r3, #64	@ 0x40
 800e0e8:	616b      	str	r3, [r5, #20]
 800e0ea:	2300      	movs	r3, #0
 800e0ec:	9309      	str	r3, [sp, #36]	@ 0x24
 800e0ee:	2320      	movs	r3, #32
 800e0f0:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800e0f4:	2330      	movs	r3, #48	@ 0x30
 800e0f6:	f04f 0901 	mov.w	r9, #1
 800e0fa:	f8cd 800c 	str.w	r8, [sp, #12]
 800e0fe:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 800e298 <_svfiprintf_r+0x1e4>
 800e102:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800e106:	4623      	mov	r3, r4
 800e108:	469a      	mov	sl, r3
 800e10a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e10e:	b10a      	cbz	r2, 800e114 <_svfiprintf_r+0x60>
 800e110:	2a25      	cmp	r2, #37	@ 0x25
 800e112:	d1f9      	bne.n	800e108 <_svfiprintf_r+0x54>
 800e114:	ebba 0b04 	subs.w	fp, sl, r4
 800e118:	d00b      	beq.n	800e132 <_svfiprintf_r+0x7e>
 800e11a:	465b      	mov	r3, fp
 800e11c:	4622      	mov	r2, r4
 800e11e:	4629      	mov	r1, r5
 800e120:	4638      	mov	r0, r7
 800e122:	f7ff ff6b 	bl	800dffc <__ssputs_r>
 800e126:	3001      	adds	r0, #1
 800e128:	f000 80a7 	beq.w	800e27a <_svfiprintf_r+0x1c6>
 800e12c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800e12e:	445a      	add	r2, fp
 800e130:	9209      	str	r2, [sp, #36]	@ 0x24
 800e132:	f89a 3000 	ldrb.w	r3, [sl]
 800e136:	2b00      	cmp	r3, #0
 800e138:	f000 809f 	beq.w	800e27a <_svfiprintf_r+0x1c6>
 800e13c:	2300      	movs	r3, #0
 800e13e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800e142:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e146:	f10a 0a01 	add.w	sl, sl, #1
 800e14a:	9304      	str	r3, [sp, #16]
 800e14c:	9307      	str	r3, [sp, #28]
 800e14e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800e152:	931a      	str	r3, [sp, #104]	@ 0x68
 800e154:	4654      	mov	r4, sl
 800e156:	2205      	movs	r2, #5
 800e158:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e15c:	484e      	ldr	r0, [pc, #312]	@ (800e298 <_svfiprintf_r+0x1e4>)
 800e15e:	f7fd ff42 	bl	800bfe6 <memchr>
 800e162:	9a04      	ldr	r2, [sp, #16]
 800e164:	b9d8      	cbnz	r0, 800e19e <_svfiprintf_r+0xea>
 800e166:	06d0      	lsls	r0, r2, #27
 800e168:	bf44      	itt	mi
 800e16a:	2320      	movmi	r3, #32
 800e16c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800e170:	0711      	lsls	r1, r2, #28
 800e172:	bf44      	itt	mi
 800e174:	232b      	movmi	r3, #43	@ 0x2b
 800e176:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800e17a:	f89a 3000 	ldrb.w	r3, [sl]
 800e17e:	2b2a      	cmp	r3, #42	@ 0x2a
 800e180:	d015      	beq.n	800e1ae <_svfiprintf_r+0xfa>
 800e182:	4654      	mov	r4, sl
 800e184:	2000      	movs	r0, #0
 800e186:	f04f 0c0a 	mov.w	ip, #10
 800e18a:	9a07      	ldr	r2, [sp, #28]
 800e18c:	4621      	mov	r1, r4
 800e18e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e192:	3b30      	subs	r3, #48	@ 0x30
 800e194:	2b09      	cmp	r3, #9
 800e196:	d94b      	bls.n	800e230 <_svfiprintf_r+0x17c>
 800e198:	b1b0      	cbz	r0, 800e1c8 <_svfiprintf_r+0x114>
 800e19a:	9207      	str	r2, [sp, #28]
 800e19c:	e014      	b.n	800e1c8 <_svfiprintf_r+0x114>
 800e19e:	eba0 0308 	sub.w	r3, r0, r8
 800e1a2:	fa09 f303 	lsl.w	r3, r9, r3
 800e1a6:	4313      	orrs	r3, r2
 800e1a8:	46a2      	mov	sl, r4
 800e1aa:	9304      	str	r3, [sp, #16]
 800e1ac:	e7d2      	b.n	800e154 <_svfiprintf_r+0xa0>
 800e1ae:	9b03      	ldr	r3, [sp, #12]
 800e1b0:	1d19      	adds	r1, r3, #4
 800e1b2:	681b      	ldr	r3, [r3, #0]
 800e1b4:	9103      	str	r1, [sp, #12]
 800e1b6:	2b00      	cmp	r3, #0
 800e1b8:	bfbb      	ittet	lt
 800e1ba:	425b      	neglt	r3, r3
 800e1bc:	f042 0202 	orrlt.w	r2, r2, #2
 800e1c0:	9307      	strge	r3, [sp, #28]
 800e1c2:	9307      	strlt	r3, [sp, #28]
 800e1c4:	bfb8      	it	lt
 800e1c6:	9204      	strlt	r2, [sp, #16]
 800e1c8:	7823      	ldrb	r3, [r4, #0]
 800e1ca:	2b2e      	cmp	r3, #46	@ 0x2e
 800e1cc:	d10a      	bne.n	800e1e4 <_svfiprintf_r+0x130>
 800e1ce:	7863      	ldrb	r3, [r4, #1]
 800e1d0:	2b2a      	cmp	r3, #42	@ 0x2a
 800e1d2:	d132      	bne.n	800e23a <_svfiprintf_r+0x186>
 800e1d4:	9b03      	ldr	r3, [sp, #12]
 800e1d6:	3402      	adds	r4, #2
 800e1d8:	1d1a      	adds	r2, r3, #4
 800e1da:	681b      	ldr	r3, [r3, #0]
 800e1dc:	9203      	str	r2, [sp, #12]
 800e1de:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800e1e2:	9305      	str	r3, [sp, #20]
 800e1e4:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 800e29c <_svfiprintf_r+0x1e8>
 800e1e8:	2203      	movs	r2, #3
 800e1ea:	4650      	mov	r0, sl
 800e1ec:	7821      	ldrb	r1, [r4, #0]
 800e1ee:	f7fd fefa 	bl	800bfe6 <memchr>
 800e1f2:	b138      	cbz	r0, 800e204 <_svfiprintf_r+0x150>
 800e1f4:	2240      	movs	r2, #64	@ 0x40
 800e1f6:	9b04      	ldr	r3, [sp, #16]
 800e1f8:	eba0 000a 	sub.w	r0, r0, sl
 800e1fc:	4082      	lsls	r2, r0
 800e1fe:	4313      	orrs	r3, r2
 800e200:	3401      	adds	r4, #1
 800e202:	9304      	str	r3, [sp, #16]
 800e204:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e208:	2206      	movs	r2, #6
 800e20a:	4825      	ldr	r0, [pc, #148]	@ (800e2a0 <_svfiprintf_r+0x1ec>)
 800e20c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800e210:	f7fd fee9 	bl	800bfe6 <memchr>
 800e214:	2800      	cmp	r0, #0
 800e216:	d036      	beq.n	800e286 <_svfiprintf_r+0x1d2>
 800e218:	4b22      	ldr	r3, [pc, #136]	@ (800e2a4 <_svfiprintf_r+0x1f0>)
 800e21a:	bb1b      	cbnz	r3, 800e264 <_svfiprintf_r+0x1b0>
 800e21c:	9b03      	ldr	r3, [sp, #12]
 800e21e:	3307      	adds	r3, #7
 800e220:	f023 0307 	bic.w	r3, r3, #7
 800e224:	3308      	adds	r3, #8
 800e226:	9303      	str	r3, [sp, #12]
 800e228:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e22a:	4433      	add	r3, r6
 800e22c:	9309      	str	r3, [sp, #36]	@ 0x24
 800e22e:	e76a      	b.n	800e106 <_svfiprintf_r+0x52>
 800e230:	460c      	mov	r4, r1
 800e232:	2001      	movs	r0, #1
 800e234:	fb0c 3202 	mla	r2, ip, r2, r3
 800e238:	e7a8      	b.n	800e18c <_svfiprintf_r+0xd8>
 800e23a:	2300      	movs	r3, #0
 800e23c:	f04f 0c0a 	mov.w	ip, #10
 800e240:	4619      	mov	r1, r3
 800e242:	3401      	adds	r4, #1
 800e244:	9305      	str	r3, [sp, #20]
 800e246:	4620      	mov	r0, r4
 800e248:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e24c:	3a30      	subs	r2, #48	@ 0x30
 800e24e:	2a09      	cmp	r2, #9
 800e250:	d903      	bls.n	800e25a <_svfiprintf_r+0x1a6>
 800e252:	2b00      	cmp	r3, #0
 800e254:	d0c6      	beq.n	800e1e4 <_svfiprintf_r+0x130>
 800e256:	9105      	str	r1, [sp, #20]
 800e258:	e7c4      	b.n	800e1e4 <_svfiprintf_r+0x130>
 800e25a:	4604      	mov	r4, r0
 800e25c:	2301      	movs	r3, #1
 800e25e:	fb0c 2101 	mla	r1, ip, r1, r2
 800e262:	e7f0      	b.n	800e246 <_svfiprintf_r+0x192>
 800e264:	ab03      	add	r3, sp, #12
 800e266:	9300      	str	r3, [sp, #0]
 800e268:	462a      	mov	r2, r5
 800e26a:	4638      	mov	r0, r7
 800e26c:	4b0e      	ldr	r3, [pc, #56]	@ (800e2a8 <_svfiprintf_r+0x1f4>)
 800e26e:	a904      	add	r1, sp, #16
 800e270:	f7fd f944 	bl	800b4fc <_printf_float>
 800e274:	1c42      	adds	r2, r0, #1
 800e276:	4606      	mov	r6, r0
 800e278:	d1d6      	bne.n	800e228 <_svfiprintf_r+0x174>
 800e27a:	89ab      	ldrh	r3, [r5, #12]
 800e27c:	065b      	lsls	r3, r3, #25
 800e27e:	f53f af2d 	bmi.w	800e0dc <_svfiprintf_r+0x28>
 800e282:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800e284:	e72c      	b.n	800e0e0 <_svfiprintf_r+0x2c>
 800e286:	ab03      	add	r3, sp, #12
 800e288:	9300      	str	r3, [sp, #0]
 800e28a:	462a      	mov	r2, r5
 800e28c:	4638      	mov	r0, r7
 800e28e:	4b06      	ldr	r3, [pc, #24]	@ (800e2a8 <_svfiprintf_r+0x1f4>)
 800e290:	a904      	add	r1, sp, #16
 800e292:	f7fd fbd1 	bl	800ba38 <_printf_i>
 800e296:	e7ed      	b.n	800e274 <_svfiprintf_r+0x1c0>
 800e298:	0800eff1 	.word	0x0800eff1
 800e29c:	0800eff7 	.word	0x0800eff7
 800e2a0:	0800effb 	.word	0x0800effb
 800e2a4:	0800b4fd 	.word	0x0800b4fd
 800e2a8:	0800dffd 	.word	0x0800dffd

0800e2ac <__sflush_r>:
 800e2ac:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800e2b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e2b2:	0716      	lsls	r6, r2, #28
 800e2b4:	4605      	mov	r5, r0
 800e2b6:	460c      	mov	r4, r1
 800e2b8:	d454      	bmi.n	800e364 <__sflush_r+0xb8>
 800e2ba:	684b      	ldr	r3, [r1, #4]
 800e2bc:	2b00      	cmp	r3, #0
 800e2be:	dc02      	bgt.n	800e2c6 <__sflush_r+0x1a>
 800e2c0:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800e2c2:	2b00      	cmp	r3, #0
 800e2c4:	dd48      	ble.n	800e358 <__sflush_r+0xac>
 800e2c6:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800e2c8:	2e00      	cmp	r6, #0
 800e2ca:	d045      	beq.n	800e358 <__sflush_r+0xac>
 800e2cc:	2300      	movs	r3, #0
 800e2ce:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800e2d2:	682f      	ldr	r7, [r5, #0]
 800e2d4:	6a21      	ldr	r1, [r4, #32]
 800e2d6:	602b      	str	r3, [r5, #0]
 800e2d8:	d030      	beq.n	800e33c <__sflush_r+0x90>
 800e2da:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800e2dc:	89a3      	ldrh	r3, [r4, #12]
 800e2de:	0759      	lsls	r1, r3, #29
 800e2e0:	d505      	bpl.n	800e2ee <__sflush_r+0x42>
 800e2e2:	6863      	ldr	r3, [r4, #4]
 800e2e4:	1ad2      	subs	r2, r2, r3
 800e2e6:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800e2e8:	b10b      	cbz	r3, 800e2ee <__sflush_r+0x42>
 800e2ea:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800e2ec:	1ad2      	subs	r2, r2, r3
 800e2ee:	2300      	movs	r3, #0
 800e2f0:	4628      	mov	r0, r5
 800e2f2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800e2f4:	6a21      	ldr	r1, [r4, #32]
 800e2f6:	47b0      	blx	r6
 800e2f8:	1c43      	adds	r3, r0, #1
 800e2fa:	89a3      	ldrh	r3, [r4, #12]
 800e2fc:	d106      	bne.n	800e30c <__sflush_r+0x60>
 800e2fe:	6829      	ldr	r1, [r5, #0]
 800e300:	291d      	cmp	r1, #29
 800e302:	d82b      	bhi.n	800e35c <__sflush_r+0xb0>
 800e304:	4a28      	ldr	r2, [pc, #160]	@ (800e3a8 <__sflush_r+0xfc>)
 800e306:	410a      	asrs	r2, r1
 800e308:	07d6      	lsls	r6, r2, #31
 800e30a:	d427      	bmi.n	800e35c <__sflush_r+0xb0>
 800e30c:	2200      	movs	r2, #0
 800e30e:	6062      	str	r2, [r4, #4]
 800e310:	6922      	ldr	r2, [r4, #16]
 800e312:	04d9      	lsls	r1, r3, #19
 800e314:	6022      	str	r2, [r4, #0]
 800e316:	d504      	bpl.n	800e322 <__sflush_r+0x76>
 800e318:	1c42      	adds	r2, r0, #1
 800e31a:	d101      	bne.n	800e320 <__sflush_r+0x74>
 800e31c:	682b      	ldr	r3, [r5, #0]
 800e31e:	b903      	cbnz	r3, 800e322 <__sflush_r+0x76>
 800e320:	6560      	str	r0, [r4, #84]	@ 0x54
 800e322:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800e324:	602f      	str	r7, [r5, #0]
 800e326:	b1b9      	cbz	r1, 800e358 <__sflush_r+0xac>
 800e328:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800e32c:	4299      	cmp	r1, r3
 800e32e:	d002      	beq.n	800e336 <__sflush_r+0x8a>
 800e330:	4628      	mov	r0, r5
 800e332:	f7fe fccd 	bl	800ccd0 <_free_r>
 800e336:	2300      	movs	r3, #0
 800e338:	6363      	str	r3, [r4, #52]	@ 0x34
 800e33a:	e00d      	b.n	800e358 <__sflush_r+0xac>
 800e33c:	2301      	movs	r3, #1
 800e33e:	4628      	mov	r0, r5
 800e340:	47b0      	blx	r6
 800e342:	4602      	mov	r2, r0
 800e344:	1c50      	adds	r0, r2, #1
 800e346:	d1c9      	bne.n	800e2dc <__sflush_r+0x30>
 800e348:	682b      	ldr	r3, [r5, #0]
 800e34a:	2b00      	cmp	r3, #0
 800e34c:	d0c6      	beq.n	800e2dc <__sflush_r+0x30>
 800e34e:	2b1d      	cmp	r3, #29
 800e350:	d001      	beq.n	800e356 <__sflush_r+0xaa>
 800e352:	2b16      	cmp	r3, #22
 800e354:	d11d      	bne.n	800e392 <__sflush_r+0xe6>
 800e356:	602f      	str	r7, [r5, #0]
 800e358:	2000      	movs	r0, #0
 800e35a:	e021      	b.n	800e3a0 <__sflush_r+0xf4>
 800e35c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e360:	b21b      	sxth	r3, r3
 800e362:	e01a      	b.n	800e39a <__sflush_r+0xee>
 800e364:	690f      	ldr	r7, [r1, #16]
 800e366:	2f00      	cmp	r7, #0
 800e368:	d0f6      	beq.n	800e358 <__sflush_r+0xac>
 800e36a:	0793      	lsls	r3, r2, #30
 800e36c:	bf18      	it	ne
 800e36e:	2300      	movne	r3, #0
 800e370:	680e      	ldr	r6, [r1, #0]
 800e372:	bf08      	it	eq
 800e374:	694b      	ldreq	r3, [r1, #20]
 800e376:	1bf6      	subs	r6, r6, r7
 800e378:	600f      	str	r7, [r1, #0]
 800e37a:	608b      	str	r3, [r1, #8]
 800e37c:	2e00      	cmp	r6, #0
 800e37e:	ddeb      	ble.n	800e358 <__sflush_r+0xac>
 800e380:	4633      	mov	r3, r6
 800e382:	463a      	mov	r2, r7
 800e384:	4628      	mov	r0, r5
 800e386:	6a21      	ldr	r1, [r4, #32]
 800e388:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 800e38c:	47e0      	blx	ip
 800e38e:	2800      	cmp	r0, #0
 800e390:	dc07      	bgt.n	800e3a2 <__sflush_r+0xf6>
 800e392:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e396:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e39a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800e39e:	81a3      	strh	r3, [r4, #12]
 800e3a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e3a2:	4407      	add	r7, r0
 800e3a4:	1a36      	subs	r6, r6, r0
 800e3a6:	e7e9      	b.n	800e37c <__sflush_r+0xd0>
 800e3a8:	dfbffffe 	.word	0xdfbffffe

0800e3ac <_fflush_r>:
 800e3ac:	b538      	push	{r3, r4, r5, lr}
 800e3ae:	690b      	ldr	r3, [r1, #16]
 800e3b0:	4605      	mov	r5, r0
 800e3b2:	460c      	mov	r4, r1
 800e3b4:	b913      	cbnz	r3, 800e3bc <_fflush_r+0x10>
 800e3b6:	2500      	movs	r5, #0
 800e3b8:	4628      	mov	r0, r5
 800e3ba:	bd38      	pop	{r3, r4, r5, pc}
 800e3bc:	b118      	cbz	r0, 800e3c6 <_fflush_r+0x1a>
 800e3be:	6a03      	ldr	r3, [r0, #32]
 800e3c0:	b90b      	cbnz	r3, 800e3c6 <_fflush_r+0x1a>
 800e3c2:	f7fd fce5 	bl	800bd90 <__sinit>
 800e3c6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e3ca:	2b00      	cmp	r3, #0
 800e3cc:	d0f3      	beq.n	800e3b6 <_fflush_r+0xa>
 800e3ce:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800e3d0:	07d0      	lsls	r0, r2, #31
 800e3d2:	d404      	bmi.n	800e3de <_fflush_r+0x32>
 800e3d4:	0599      	lsls	r1, r3, #22
 800e3d6:	d402      	bmi.n	800e3de <_fflush_r+0x32>
 800e3d8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800e3da:	f7fd fe02 	bl	800bfe2 <__retarget_lock_acquire_recursive>
 800e3de:	4628      	mov	r0, r5
 800e3e0:	4621      	mov	r1, r4
 800e3e2:	f7ff ff63 	bl	800e2ac <__sflush_r>
 800e3e6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800e3e8:	4605      	mov	r5, r0
 800e3ea:	07da      	lsls	r2, r3, #31
 800e3ec:	d4e4      	bmi.n	800e3b8 <_fflush_r+0xc>
 800e3ee:	89a3      	ldrh	r3, [r4, #12]
 800e3f0:	059b      	lsls	r3, r3, #22
 800e3f2:	d4e1      	bmi.n	800e3b8 <_fflush_r+0xc>
 800e3f4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800e3f6:	f7fd fdf5 	bl	800bfe4 <__retarget_lock_release_recursive>
 800e3fa:	e7dd      	b.n	800e3b8 <_fflush_r+0xc>

0800e3fc <memmove>:
 800e3fc:	4288      	cmp	r0, r1
 800e3fe:	b510      	push	{r4, lr}
 800e400:	eb01 0402 	add.w	r4, r1, r2
 800e404:	d902      	bls.n	800e40c <memmove+0x10>
 800e406:	4284      	cmp	r4, r0
 800e408:	4623      	mov	r3, r4
 800e40a:	d807      	bhi.n	800e41c <memmove+0x20>
 800e40c:	1e43      	subs	r3, r0, #1
 800e40e:	42a1      	cmp	r1, r4
 800e410:	d008      	beq.n	800e424 <memmove+0x28>
 800e412:	f811 2b01 	ldrb.w	r2, [r1], #1
 800e416:	f803 2f01 	strb.w	r2, [r3, #1]!
 800e41a:	e7f8      	b.n	800e40e <memmove+0x12>
 800e41c:	4601      	mov	r1, r0
 800e41e:	4402      	add	r2, r0
 800e420:	428a      	cmp	r2, r1
 800e422:	d100      	bne.n	800e426 <memmove+0x2a>
 800e424:	bd10      	pop	{r4, pc}
 800e426:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800e42a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800e42e:	e7f7      	b.n	800e420 <memmove+0x24>

0800e430 <_sbrk_r>:
 800e430:	b538      	push	{r3, r4, r5, lr}
 800e432:	2300      	movs	r3, #0
 800e434:	4d05      	ldr	r5, [pc, #20]	@ (800e44c <_sbrk_r+0x1c>)
 800e436:	4604      	mov	r4, r0
 800e438:	4608      	mov	r0, r1
 800e43a:	602b      	str	r3, [r5, #0]
 800e43c:	f7f3 fd34 	bl	8001ea8 <_sbrk>
 800e440:	1c43      	adds	r3, r0, #1
 800e442:	d102      	bne.n	800e44a <_sbrk_r+0x1a>
 800e444:	682b      	ldr	r3, [r5, #0]
 800e446:	b103      	cbz	r3, 800e44a <_sbrk_r+0x1a>
 800e448:	6023      	str	r3, [r4, #0]
 800e44a:	bd38      	pop	{r3, r4, r5, pc}
 800e44c:	200016c4 	.word	0x200016c4

0800e450 <__assert_func>:
 800e450:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800e452:	4614      	mov	r4, r2
 800e454:	461a      	mov	r2, r3
 800e456:	4b09      	ldr	r3, [pc, #36]	@ (800e47c <__assert_func+0x2c>)
 800e458:	4605      	mov	r5, r0
 800e45a:	681b      	ldr	r3, [r3, #0]
 800e45c:	68d8      	ldr	r0, [r3, #12]
 800e45e:	b954      	cbnz	r4, 800e476 <__assert_func+0x26>
 800e460:	4b07      	ldr	r3, [pc, #28]	@ (800e480 <__assert_func+0x30>)
 800e462:	461c      	mov	r4, r3
 800e464:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800e468:	9100      	str	r1, [sp, #0]
 800e46a:	462b      	mov	r3, r5
 800e46c:	4905      	ldr	r1, [pc, #20]	@ (800e484 <__assert_func+0x34>)
 800e46e:	f000 f84f 	bl	800e510 <fiprintf>
 800e472:	f000 f85f 	bl	800e534 <abort>
 800e476:	4b04      	ldr	r3, [pc, #16]	@ (800e488 <__assert_func+0x38>)
 800e478:	e7f4      	b.n	800e464 <__assert_func+0x14>
 800e47a:	bf00      	nop
 800e47c:	20000308 	.word	0x20000308
 800e480:	0800f03d 	.word	0x0800f03d
 800e484:	0800f00f 	.word	0x0800f00f
 800e488:	0800f002 	.word	0x0800f002

0800e48c <_calloc_r>:
 800e48c:	b570      	push	{r4, r5, r6, lr}
 800e48e:	fba1 5402 	umull	r5, r4, r1, r2
 800e492:	b93c      	cbnz	r4, 800e4a4 <_calloc_r+0x18>
 800e494:	4629      	mov	r1, r5
 800e496:	f7fe ffc7 	bl	800d428 <_malloc_r>
 800e49a:	4606      	mov	r6, r0
 800e49c:	b928      	cbnz	r0, 800e4aa <_calloc_r+0x1e>
 800e49e:	2600      	movs	r6, #0
 800e4a0:	4630      	mov	r0, r6
 800e4a2:	bd70      	pop	{r4, r5, r6, pc}
 800e4a4:	220c      	movs	r2, #12
 800e4a6:	6002      	str	r2, [r0, #0]
 800e4a8:	e7f9      	b.n	800e49e <_calloc_r+0x12>
 800e4aa:	462a      	mov	r2, r5
 800e4ac:	4621      	mov	r1, r4
 800e4ae:	f7fd fd08 	bl	800bec2 <memset>
 800e4b2:	e7f5      	b.n	800e4a0 <_calloc_r+0x14>

0800e4b4 <_realloc_r>:
 800e4b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e4b8:	4680      	mov	r8, r0
 800e4ba:	4615      	mov	r5, r2
 800e4bc:	460c      	mov	r4, r1
 800e4be:	b921      	cbnz	r1, 800e4ca <_realloc_r+0x16>
 800e4c0:	4611      	mov	r1, r2
 800e4c2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e4c6:	f7fe bfaf 	b.w	800d428 <_malloc_r>
 800e4ca:	b92a      	cbnz	r2, 800e4d8 <_realloc_r+0x24>
 800e4cc:	f7fe fc00 	bl	800ccd0 <_free_r>
 800e4d0:	2400      	movs	r4, #0
 800e4d2:	4620      	mov	r0, r4
 800e4d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e4d8:	f000 f833 	bl	800e542 <_malloc_usable_size_r>
 800e4dc:	4285      	cmp	r5, r0
 800e4de:	4606      	mov	r6, r0
 800e4e0:	d802      	bhi.n	800e4e8 <_realloc_r+0x34>
 800e4e2:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800e4e6:	d8f4      	bhi.n	800e4d2 <_realloc_r+0x1e>
 800e4e8:	4629      	mov	r1, r5
 800e4ea:	4640      	mov	r0, r8
 800e4ec:	f7fe ff9c 	bl	800d428 <_malloc_r>
 800e4f0:	4607      	mov	r7, r0
 800e4f2:	2800      	cmp	r0, #0
 800e4f4:	d0ec      	beq.n	800e4d0 <_realloc_r+0x1c>
 800e4f6:	42b5      	cmp	r5, r6
 800e4f8:	462a      	mov	r2, r5
 800e4fa:	4621      	mov	r1, r4
 800e4fc:	bf28      	it	cs
 800e4fe:	4632      	movcs	r2, r6
 800e500:	f7fd fd7f 	bl	800c002 <memcpy>
 800e504:	4621      	mov	r1, r4
 800e506:	4640      	mov	r0, r8
 800e508:	f7fe fbe2 	bl	800ccd0 <_free_r>
 800e50c:	463c      	mov	r4, r7
 800e50e:	e7e0      	b.n	800e4d2 <_realloc_r+0x1e>

0800e510 <fiprintf>:
 800e510:	b40e      	push	{r1, r2, r3}
 800e512:	b503      	push	{r0, r1, lr}
 800e514:	4601      	mov	r1, r0
 800e516:	ab03      	add	r3, sp, #12
 800e518:	4805      	ldr	r0, [pc, #20]	@ (800e530 <fiprintf+0x20>)
 800e51a:	f853 2b04 	ldr.w	r2, [r3], #4
 800e51e:	6800      	ldr	r0, [r0, #0]
 800e520:	9301      	str	r3, [sp, #4]
 800e522:	f000 f83d 	bl	800e5a0 <_vfiprintf_r>
 800e526:	b002      	add	sp, #8
 800e528:	f85d eb04 	ldr.w	lr, [sp], #4
 800e52c:	b003      	add	sp, #12
 800e52e:	4770      	bx	lr
 800e530:	20000308 	.word	0x20000308

0800e534 <abort>:
 800e534:	2006      	movs	r0, #6
 800e536:	b508      	push	{r3, lr}
 800e538:	f000 fa06 	bl	800e948 <raise>
 800e53c:	2001      	movs	r0, #1
 800e53e:	f7f3 fc3e 	bl	8001dbe <_exit>

0800e542 <_malloc_usable_size_r>:
 800e542:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e546:	1f18      	subs	r0, r3, #4
 800e548:	2b00      	cmp	r3, #0
 800e54a:	bfbc      	itt	lt
 800e54c:	580b      	ldrlt	r3, [r1, r0]
 800e54e:	18c0      	addlt	r0, r0, r3
 800e550:	4770      	bx	lr

0800e552 <__sfputc_r>:
 800e552:	6893      	ldr	r3, [r2, #8]
 800e554:	b410      	push	{r4}
 800e556:	3b01      	subs	r3, #1
 800e558:	2b00      	cmp	r3, #0
 800e55a:	6093      	str	r3, [r2, #8]
 800e55c:	da07      	bge.n	800e56e <__sfputc_r+0x1c>
 800e55e:	6994      	ldr	r4, [r2, #24]
 800e560:	42a3      	cmp	r3, r4
 800e562:	db01      	blt.n	800e568 <__sfputc_r+0x16>
 800e564:	290a      	cmp	r1, #10
 800e566:	d102      	bne.n	800e56e <__sfputc_r+0x1c>
 800e568:	bc10      	pop	{r4}
 800e56a:	f000 b931 	b.w	800e7d0 <__swbuf_r>
 800e56e:	6813      	ldr	r3, [r2, #0]
 800e570:	1c58      	adds	r0, r3, #1
 800e572:	6010      	str	r0, [r2, #0]
 800e574:	7019      	strb	r1, [r3, #0]
 800e576:	4608      	mov	r0, r1
 800e578:	bc10      	pop	{r4}
 800e57a:	4770      	bx	lr

0800e57c <__sfputs_r>:
 800e57c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e57e:	4606      	mov	r6, r0
 800e580:	460f      	mov	r7, r1
 800e582:	4614      	mov	r4, r2
 800e584:	18d5      	adds	r5, r2, r3
 800e586:	42ac      	cmp	r4, r5
 800e588:	d101      	bne.n	800e58e <__sfputs_r+0x12>
 800e58a:	2000      	movs	r0, #0
 800e58c:	e007      	b.n	800e59e <__sfputs_r+0x22>
 800e58e:	463a      	mov	r2, r7
 800e590:	4630      	mov	r0, r6
 800e592:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e596:	f7ff ffdc 	bl	800e552 <__sfputc_r>
 800e59a:	1c43      	adds	r3, r0, #1
 800e59c:	d1f3      	bne.n	800e586 <__sfputs_r+0xa>
 800e59e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800e5a0 <_vfiprintf_r>:
 800e5a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e5a4:	460d      	mov	r5, r1
 800e5a6:	4614      	mov	r4, r2
 800e5a8:	4698      	mov	r8, r3
 800e5aa:	4606      	mov	r6, r0
 800e5ac:	b09d      	sub	sp, #116	@ 0x74
 800e5ae:	b118      	cbz	r0, 800e5b8 <_vfiprintf_r+0x18>
 800e5b0:	6a03      	ldr	r3, [r0, #32]
 800e5b2:	b90b      	cbnz	r3, 800e5b8 <_vfiprintf_r+0x18>
 800e5b4:	f7fd fbec 	bl	800bd90 <__sinit>
 800e5b8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800e5ba:	07d9      	lsls	r1, r3, #31
 800e5bc:	d405      	bmi.n	800e5ca <_vfiprintf_r+0x2a>
 800e5be:	89ab      	ldrh	r3, [r5, #12]
 800e5c0:	059a      	lsls	r2, r3, #22
 800e5c2:	d402      	bmi.n	800e5ca <_vfiprintf_r+0x2a>
 800e5c4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800e5c6:	f7fd fd0c 	bl	800bfe2 <__retarget_lock_acquire_recursive>
 800e5ca:	89ab      	ldrh	r3, [r5, #12]
 800e5cc:	071b      	lsls	r3, r3, #28
 800e5ce:	d501      	bpl.n	800e5d4 <_vfiprintf_r+0x34>
 800e5d0:	692b      	ldr	r3, [r5, #16]
 800e5d2:	b99b      	cbnz	r3, 800e5fc <_vfiprintf_r+0x5c>
 800e5d4:	4629      	mov	r1, r5
 800e5d6:	4630      	mov	r0, r6
 800e5d8:	f000 f938 	bl	800e84c <__swsetup_r>
 800e5dc:	b170      	cbz	r0, 800e5fc <_vfiprintf_r+0x5c>
 800e5de:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800e5e0:	07dc      	lsls	r4, r3, #31
 800e5e2:	d504      	bpl.n	800e5ee <_vfiprintf_r+0x4e>
 800e5e4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800e5e8:	b01d      	add	sp, #116	@ 0x74
 800e5ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e5ee:	89ab      	ldrh	r3, [r5, #12]
 800e5f0:	0598      	lsls	r0, r3, #22
 800e5f2:	d4f7      	bmi.n	800e5e4 <_vfiprintf_r+0x44>
 800e5f4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800e5f6:	f7fd fcf5 	bl	800bfe4 <__retarget_lock_release_recursive>
 800e5fa:	e7f3      	b.n	800e5e4 <_vfiprintf_r+0x44>
 800e5fc:	2300      	movs	r3, #0
 800e5fe:	9309      	str	r3, [sp, #36]	@ 0x24
 800e600:	2320      	movs	r3, #32
 800e602:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800e606:	2330      	movs	r3, #48	@ 0x30
 800e608:	f04f 0901 	mov.w	r9, #1
 800e60c:	f8cd 800c 	str.w	r8, [sp, #12]
 800e610:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 800e7bc <_vfiprintf_r+0x21c>
 800e614:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800e618:	4623      	mov	r3, r4
 800e61a:	469a      	mov	sl, r3
 800e61c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e620:	b10a      	cbz	r2, 800e626 <_vfiprintf_r+0x86>
 800e622:	2a25      	cmp	r2, #37	@ 0x25
 800e624:	d1f9      	bne.n	800e61a <_vfiprintf_r+0x7a>
 800e626:	ebba 0b04 	subs.w	fp, sl, r4
 800e62a:	d00b      	beq.n	800e644 <_vfiprintf_r+0xa4>
 800e62c:	465b      	mov	r3, fp
 800e62e:	4622      	mov	r2, r4
 800e630:	4629      	mov	r1, r5
 800e632:	4630      	mov	r0, r6
 800e634:	f7ff ffa2 	bl	800e57c <__sfputs_r>
 800e638:	3001      	adds	r0, #1
 800e63a:	f000 80a7 	beq.w	800e78c <_vfiprintf_r+0x1ec>
 800e63e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800e640:	445a      	add	r2, fp
 800e642:	9209      	str	r2, [sp, #36]	@ 0x24
 800e644:	f89a 3000 	ldrb.w	r3, [sl]
 800e648:	2b00      	cmp	r3, #0
 800e64a:	f000 809f 	beq.w	800e78c <_vfiprintf_r+0x1ec>
 800e64e:	2300      	movs	r3, #0
 800e650:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800e654:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e658:	f10a 0a01 	add.w	sl, sl, #1
 800e65c:	9304      	str	r3, [sp, #16]
 800e65e:	9307      	str	r3, [sp, #28]
 800e660:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800e664:	931a      	str	r3, [sp, #104]	@ 0x68
 800e666:	4654      	mov	r4, sl
 800e668:	2205      	movs	r2, #5
 800e66a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e66e:	4853      	ldr	r0, [pc, #332]	@ (800e7bc <_vfiprintf_r+0x21c>)
 800e670:	f7fd fcb9 	bl	800bfe6 <memchr>
 800e674:	9a04      	ldr	r2, [sp, #16]
 800e676:	b9d8      	cbnz	r0, 800e6b0 <_vfiprintf_r+0x110>
 800e678:	06d1      	lsls	r1, r2, #27
 800e67a:	bf44      	itt	mi
 800e67c:	2320      	movmi	r3, #32
 800e67e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800e682:	0713      	lsls	r3, r2, #28
 800e684:	bf44      	itt	mi
 800e686:	232b      	movmi	r3, #43	@ 0x2b
 800e688:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800e68c:	f89a 3000 	ldrb.w	r3, [sl]
 800e690:	2b2a      	cmp	r3, #42	@ 0x2a
 800e692:	d015      	beq.n	800e6c0 <_vfiprintf_r+0x120>
 800e694:	4654      	mov	r4, sl
 800e696:	2000      	movs	r0, #0
 800e698:	f04f 0c0a 	mov.w	ip, #10
 800e69c:	9a07      	ldr	r2, [sp, #28]
 800e69e:	4621      	mov	r1, r4
 800e6a0:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e6a4:	3b30      	subs	r3, #48	@ 0x30
 800e6a6:	2b09      	cmp	r3, #9
 800e6a8:	d94b      	bls.n	800e742 <_vfiprintf_r+0x1a2>
 800e6aa:	b1b0      	cbz	r0, 800e6da <_vfiprintf_r+0x13a>
 800e6ac:	9207      	str	r2, [sp, #28]
 800e6ae:	e014      	b.n	800e6da <_vfiprintf_r+0x13a>
 800e6b0:	eba0 0308 	sub.w	r3, r0, r8
 800e6b4:	fa09 f303 	lsl.w	r3, r9, r3
 800e6b8:	4313      	orrs	r3, r2
 800e6ba:	46a2      	mov	sl, r4
 800e6bc:	9304      	str	r3, [sp, #16]
 800e6be:	e7d2      	b.n	800e666 <_vfiprintf_r+0xc6>
 800e6c0:	9b03      	ldr	r3, [sp, #12]
 800e6c2:	1d19      	adds	r1, r3, #4
 800e6c4:	681b      	ldr	r3, [r3, #0]
 800e6c6:	9103      	str	r1, [sp, #12]
 800e6c8:	2b00      	cmp	r3, #0
 800e6ca:	bfbb      	ittet	lt
 800e6cc:	425b      	neglt	r3, r3
 800e6ce:	f042 0202 	orrlt.w	r2, r2, #2
 800e6d2:	9307      	strge	r3, [sp, #28]
 800e6d4:	9307      	strlt	r3, [sp, #28]
 800e6d6:	bfb8      	it	lt
 800e6d8:	9204      	strlt	r2, [sp, #16]
 800e6da:	7823      	ldrb	r3, [r4, #0]
 800e6dc:	2b2e      	cmp	r3, #46	@ 0x2e
 800e6de:	d10a      	bne.n	800e6f6 <_vfiprintf_r+0x156>
 800e6e0:	7863      	ldrb	r3, [r4, #1]
 800e6e2:	2b2a      	cmp	r3, #42	@ 0x2a
 800e6e4:	d132      	bne.n	800e74c <_vfiprintf_r+0x1ac>
 800e6e6:	9b03      	ldr	r3, [sp, #12]
 800e6e8:	3402      	adds	r4, #2
 800e6ea:	1d1a      	adds	r2, r3, #4
 800e6ec:	681b      	ldr	r3, [r3, #0]
 800e6ee:	9203      	str	r2, [sp, #12]
 800e6f0:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800e6f4:	9305      	str	r3, [sp, #20]
 800e6f6:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 800e7c0 <_vfiprintf_r+0x220>
 800e6fa:	2203      	movs	r2, #3
 800e6fc:	4650      	mov	r0, sl
 800e6fe:	7821      	ldrb	r1, [r4, #0]
 800e700:	f7fd fc71 	bl	800bfe6 <memchr>
 800e704:	b138      	cbz	r0, 800e716 <_vfiprintf_r+0x176>
 800e706:	2240      	movs	r2, #64	@ 0x40
 800e708:	9b04      	ldr	r3, [sp, #16]
 800e70a:	eba0 000a 	sub.w	r0, r0, sl
 800e70e:	4082      	lsls	r2, r0
 800e710:	4313      	orrs	r3, r2
 800e712:	3401      	adds	r4, #1
 800e714:	9304      	str	r3, [sp, #16]
 800e716:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e71a:	2206      	movs	r2, #6
 800e71c:	4829      	ldr	r0, [pc, #164]	@ (800e7c4 <_vfiprintf_r+0x224>)
 800e71e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800e722:	f7fd fc60 	bl	800bfe6 <memchr>
 800e726:	2800      	cmp	r0, #0
 800e728:	d03f      	beq.n	800e7aa <_vfiprintf_r+0x20a>
 800e72a:	4b27      	ldr	r3, [pc, #156]	@ (800e7c8 <_vfiprintf_r+0x228>)
 800e72c:	bb1b      	cbnz	r3, 800e776 <_vfiprintf_r+0x1d6>
 800e72e:	9b03      	ldr	r3, [sp, #12]
 800e730:	3307      	adds	r3, #7
 800e732:	f023 0307 	bic.w	r3, r3, #7
 800e736:	3308      	adds	r3, #8
 800e738:	9303      	str	r3, [sp, #12]
 800e73a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e73c:	443b      	add	r3, r7
 800e73e:	9309      	str	r3, [sp, #36]	@ 0x24
 800e740:	e76a      	b.n	800e618 <_vfiprintf_r+0x78>
 800e742:	460c      	mov	r4, r1
 800e744:	2001      	movs	r0, #1
 800e746:	fb0c 3202 	mla	r2, ip, r2, r3
 800e74a:	e7a8      	b.n	800e69e <_vfiprintf_r+0xfe>
 800e74c:	2300      	movs	r3, #0
 800e74e:	f04f 0c0a 	mov.w	ip, #10
 800e752:	4619      	mov	r1, r3
 800e754:	3401      	adds	r4, #1
 800e756:	9305      	str	r3, [sp, #20]
 800e758:	4620      	mov	r0, r4
 800e75a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e75e:	3a30      	subs	r2, #48	@ 0x30
 800e760:	2a09      	cmp	r2, #9
 800e762:	d903      	bls.n	800e76c <_vfiprintf_r+0x1cc>
 800e764:	2b00      	cmp	r3, #0
 800e766:	d0c6      	beq.n	800e6f6 <_vfiprintf_r+0x156>
 800e768:	9105      	str	r1, [sp, #20]
 800e76a:	e7c4      	b.n	800e6f6 <_vfiprintf_r+0x156>
 800e76c:	4604      	mov	r4, r0
 800e76e:	2301      	movs	r3, #1
 800e770:	fb0c 2101 	mla	r1, ip, r1, r2
 800e774:	e7f0      	b.n	800e758 <_vfiprintf_r+0x1b8>
 800e776:	ab03      	add	r3, sp, #12
 800e778:	9300      	str	r3, [sp, #0]
 800e77a:	462a      	mov	r2, r5
 800e77c:	4630      	mov	r0, r6
 800e77e:	4b13      	ldr	r3, [pc, #76]	@ (800e7cc <_vfiprintf_r+0x22c>)
 800e780:	a904      	add	r1, sp, #16
 800e782:	f7fc febb 	bl	800b4fc <_printf_float>
 800e786:	4607      	mov	r7, r0
 800e788:	1c78      	adds	r0, r7, #1
 800e78a:	d1d6      	bne.n	800e73a <_vfiprintf_r+0x19a>
 800e78c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800e78e:	07d9      	lsls	r1, r3, #31
 800e790:	d405      	bmi.n	800e79e <_vfiprintf_r+0x1fe>
 800e792:	89ab      	ldrh	r3, [r5, #12]
 800e794:	059a      	lsls	r2, r3, #22
 800e796:	d402      	bmi.n	800e79e <_vfiprintf_r+0x1fe>
 800e798:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800e79a:	f7fd fc23 	bl	800bfe4 <__retarget_lock_release_recursive>
 800e79e:	89ab      	ldrh	r3, [r5, #12]
 800e7a0:	065b      	lsls	r3, r3, #25
 800e7a2:	f53f af1f 	bmi.w	800e5e4 <_vfiprintf_r+0x44>
 800e7a6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800e7a8:	e71e      	b.n	800e5e8 <_vfiprintf_r+0x48>
 800e7aa:	ab03      	add	r3, sp, #12
 800e7ac:	9300      	str	r3, [sp, #0]
 800e7ae:	462a      	mov	r2, r5
 800e7b0:	4630      	mov	r0, r6
 800e7b2:	4b06      	ldr	r3, [pc, #24]	@ (800e7cc <_vfiprintf_r+0x22c>)
 800e7b4:	a904      	add	r1, sp, #16
 800e7b6:	f7fd f93f 	bl	800ba38 <_printf_i>
 800e7ba:	e7e4      	b.n	800e786 <_vfiprintf_r+0x1e6>
 800e7bc:	0800eff1 	.word	0x0800eff1
 800e7c0:	0800eff7 	.word	0x0800eff7
 800e7c4:	0800effb 	.word	0x0800effb
 800e7c8:	0800b4fd 	.word	0x0800b4fd
 800e7cc:	0800e57d 	.word	0x0800e57d

0800e7d0 <__swbuf_r>:
 800e7d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e7d2:	460e      	mov	r6, r1
 800e7d4:	4614      	mov	r4, r2
 800e7d6:	4605      	mov	r5, r0
 800e7d8:	b118      	cbz	r0, 800e7e2 <__swbuf_r+0x12>
 800e7da:	6a03      	ldr	r3, [r0, #32]
 800e7dc:	b90b      	cbnz	r3, 800e7e2 <__swbuf_r+0x12>
 800e7de:	f7fd fad7 	bl	800bd90 <__sinit>
 800e7e2:	69a3      	ldr	r3, [r4, #24]
 800e7e4:	60a3      	str	r3, [r4, #8]
 800e7e6:	89a3      	ldrh	r3, [r4, #12]
 800e7e8:	071a      	lsls	r2, r3, #28
 800e7ea:	d501      	bpl.n	800e7f0 <__swbuf_r+0x20>
 800e7ec:	6923      	ldr	r3, [r4, #16]
 800e7ee:	b943      	cbnz	r3, 800e802 <__swbuf_r+0x32>
 800e7f0:	4621      	mov	r1, r4
 800e7f2:	4628      	mov	r0, r5
 800e7f4:	f000 f82a 	bl	800e84c <__swsetup_r>
 800e7f8:	b118      	cbz	r0, 800e802 <__swbuf_r+0x32>
 800e7fa:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 800e7fe:	4638      	mov	r0, r7
 800e800:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e802:	6823      	ldr	r3, [r4, #0]
 800e804:	6922      	ldr	r2, [r4, #16]
 800e806:	b2f6      	uxtb	r6, r6
 800e808:	1a98      	subs	r0, r3, r2
 800e80a:	6963      	ldr	r3, [r4, #20]
 800e80c:	4637      	mov	r7, r6
 800e80e:	4283      	cmp	r3, r0
 800e810:	dc05      	bgt.n	800e81e <__swbuf_r+0x4e>
 800e812:	4621      	mov	r1, r4
 800e814:	4628      	mov	r0, r5
 800e816:	f7ff fdc9 	bl	800e3ac <_fflush_r>
 800e81a:	2800      	cmp	r0, #0
 800e81c:	d1ed      	bne.n	800e7fa <__swbuf_r+0x2a>
 800e81e:	68a3      	ldr	r3, [r4, #8]
 800e820:	3b01      	subs	r3, #1
 800e822:	60a3      	str	r3, [r4, #8]
 800e824:	6823      	ldr	r3, [r4, #0]
 800e826:	1c5a      	adds	r2, r3, #1
 800e828:	6022      	str	r2, [r4, #0]
 800e82a:	701e      	strb	r6, [r3, #0]
 800e82c:	6962      	ldr	r2, [r4, #20]
 800e82e:	1c43      	adds	r3, r0, #1
 800e830:	429a      	cmp	r2, r3
 800e832:	d004      	beq.n	800e83e <__swbuf_r+0x6e>
 800e834:	89a3      	ldrh	r3, [r4, #12]
 800e836:	07db      	lsls	r3, r3, #31
 800e838:	d5e1      	bpl.n	800e7fe <__swbuf_r+0x2e>
 800e83a:	2e0a      	cmp	r6, #10
 800e83c:	d1df      	bne.n	800e7fe <__swbuf_r+0x2e>
 800e83e:	4621      	mov	r1, r4
 800e840:	4628      	mov	r0, r5
 800e842:	f7ff fdb3 	bl	800e3ac <_fflush_r>
 800e846:	2800      	cmp	r0, #0
 800e848:	d0d9      	beq.n	800e7fe <__swbuf_r+0x2e>
 800e84a:	e7d6      	b.n	800e7fa <__swbuf_r+0x2a>

0800e84c <__swsetup_r>:
 800e84c:	b538      	push	{r3, r4, r5, lr}
 800e84e:	4b29      	ldr	r3, [pc, #164]	@ (800e8f4 <__swsetup_r+0xa8>)
 800e850:	4605      	mov	r5, r0
 800e852:	6818      	ldr	r0, [r3, #0]
 800e854:	460c      	mov	r4, r1
 800e856:	b118      	cbz	r0, 800e860 <__swsetup_r+0x14>
 800e858:	6a03      	ldr	r3, [r0, #32]
 800e85a:	b90b      	cbnz	r3, 800e860 <__swsetup_r+0x14>
 800e85c:	f7fd fa98 	bl	800bd90 <__sinit>
 800e860:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e864:	0719      	lsls	r1, r3, #28
 800e866:	d422      	bmi.n	800e8ae <__swsetup_r+0x62>
 800e868:	06da      	lsls	r2, r3, #27
 800e86a:	d407      	bmi.n	800e87c <__swsetup_r+0x30>
 800e86c:	2209      	movs	r2, #9
 800e86e:	602a      	str	r2, [r5, #0]
 800e870:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e874:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800e878:	81a3      	strh	r3, [r4, #12]
 800e87a:	e033      	b.n	800e8e4 <__swsetup_r+0x98>
 800e87c:	0758      	lsls	r0, r3, #29
 800e87e:	d512      	bpl.n	800e8a6 <__swsetup_r+0x5a>
 800e880:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800e882:	b141      	cbz	r1, 800e896 <__swsetup_r+0x4a>
 800e884:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800e888:	4299      	cmp	r1, r3
 800e88a:	d002      	beq.n	800e892 <__swsetup_r+0x46>
 800e88c:	4628      	mov	r0, r5
 800e88e:	f7fe fa1f 	bl	800ccd0 <_free_r>
 800e892:	2300      	movs	r3, #0
 800e894:	6363      	str	r3, [r4, #52]	@ 0x34
 800e896:	89a3      	ldrh	r3, [r4, #12]
 800e898:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800e89c:	81a3      	strh	r3, [r4, #12]
 800e89e:	2300      	movs	r3, #0
 800e8a0:	6063      	str	r3, [r4, #4]
 800e8a2:	6923      	ldr	r3, [r4, #16]
 800e8a4:	6023      	str	r3, [r4, #0]
 800e8a6:	89a3      	ldrh	r3, [r4, #12]
 800e8a8:	f043 0308 	orr.w	r3, r3, #8
 800e8ac:	81a3      	strh	r3, [r4, #12]
 800e8ae:	6923      	ldr	r3, [r4, #16]
 800e8b0:	b94b      	cbnz	r3, 800e8c6 <__swsetup_r+0x7a>
 800e8b2:	89a3      	ldrh	r3, [r4, #12]
 800e8b4:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800e8b8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800e8bc:	d003      	beq.n	800e8c6 <__swsetup_r+0x7a>
 800e8be:	4621      	mov	r1, r4
 800e8c0:	4628      	mov	r0, r5
 800e8c2:	f000 f882 	bl	800e9ca <__smakebuf_r>
 800e8c6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e8ca:	f013 0201 	ands.w	r2, r3, #1
 800e8ce:	d00a      	beq.n	800e8e6 <__swsetup_r+0x9a>
 800e8d0:	2200      	movs	r2, #0
 800e8d2:	60a2      	str	r2, [r4, #8]
 800e8d4:	6962      	ldr	r2, [r4, #20]
 800e8d6:	4252      	negs	r2, r2
 800e8d8:	61a2      	str	r2, [r4, #24]
 800e8da:	6922      	ldr	r2, [r4, #16]
 800e8dc:	b942      	cbnz	r2, 800e8f0 <__swsetup_r+0xa4>
 800e8de:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800e8e2:	d1c5      	bne.n	800e870 <__swsetup_r+0x24>
 800e8e4:	bd38      	pop	{r3, r4, r5, pc}
 800e8e6:	0799      	lsls	r1, r3, #30
 800e8e8:	bf58      	it	pl
 800e8ea:	6962      	ldrpl	r2, [r4, #20]
 800e8ec:	60a2      	str	r2, [r4, #8]
 800e8ee:	e7f4      	b.n	800e8da <__swsetup_r+0x8e>
 800e8f0:	2000      	movs	r0, #0
 800e8f2:	e7f7      	b.n	800e8e4 <__swsetup_r+0x98>
 800e8f4:	20000308 	.word	0x20000308

0800e8f8 <_raise_r>:
 800e8f8:	291f      	cmp	r1, #31
 800e8fa:	b538      	push	{r3, r4, r5, lr}
 800e8fc:	4605      	mov	r5, r0
 800e8fe:	460c      	mov	r4, r1
 800e900:	d904      	bls.n	800e90c <_raise_r+0x14>
 800e902:	2316      	movs	r3, #22
 800e904:	6003      	str	r3, [r0, #0]
 800e906:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800e90a:	bd38      	pop	{r3, r4, r5, pc}
 800e90c:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800e90e:	b112      	cbz	r2, 800e916 <_raise_r+0x1e>
 800e910:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800e914:	b94b      	cbnz	r3, 800e92a <_raise_r+0x32>
 800e916:	4628      	mov	r0, r5
 800e918:	f000 f830 	bl	800e97c <_getpid_r>
 800e91c:	4622      	mov	r2, r4
 800e91e:	4601      	mov	r1, r0
 800e920:	4628      	mov	r0, r5
 800e922:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e926:	f000 b817 	b.w	800e958 <_kill_r>
 800e92a:	2b01      	cmp	r3, #1
 800e92c:	d00a      	beq.n	800e944 <_raise_r+0x4c>
 800e92e:	1c59      	adds	r1, r3, #1
 800e930:	d103      	bne.n	800e93a <_raise_r+0x42>
 800e932:	2316      	movs	r3, #22
 800e934:	6003      	str	r3, [r0, #0]
 800e936:	2001      	movs	r0, #1
 800e938:	e7e7      	b.n	800e90a <_raise_r+0x12>
 800e93a:	2100      	movs	r1, #0
 800e93c:	4620      	mov	r0, r4
 800e93e:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800e942:	4798      	blx	r3
 800e944:	2000      	movs	r0, #0
 800e946:	e7e0      	b.n	800e90a <_raise_r+0x12>

0800e948 <raise>:
 800e948:	4b02      	ldr	r3, [pc, #8]	@ (800e954 <raise+0xc>)
 800e94a:	4601      	mov	r1, r0
 800e94c:	6818      	ldr	r0, [r3, #0]
 800e94e:	f7ff bfd3 	b.w	800e8f8 <_raise_r>
 800e952:	bf00      	nop
 800e954:	20000308 	.word	0x20000308

0800e958 <_kill_r>:
 800e958:	b538      	push	{r3, r4, r5, lr}
 800e95a:	2300      	movs	r3, #0
 800e95c:	4d06      	ldr	r5, [pc, #24]	@ (800e978 <_kill_r+0x20>)
 800e95e:	4604      	mov	r4, r0
 800e960:	4608      	mov	r0, r1
 800e962:	4611      	mov	r1, r2
 800e964:	602b      	str	r3, [r5, #0]
 800e966:	f7f3 fa1a 	bl	8001d9e <_kill>
 800e96a:	1c43      	adds	r3, r0, #1
 800e96c:	d102      	bne.n	800e974 <_kill_r+0x1c>
 800e96e:	682b      	ldr	r3, [r5, #0]
 800e970:	b103      	cbz	r3, 800e974 <_kill_r+0x1c>
 800e972:	6023      	str	r3, [r4, #0]
 800e974:	bd38      	pop	{r3, r4, r5, pc}
 800e976:	bf00      	nop
 800e978:	200016c4 	.word	0x200016c4

0800e97c <_getpid_r>:
 800e97c:	f7f3 ba08 	b.w	8001d90 <_getpid>

0800e980 <__swhatbuf_r>:
 800e980:	b570      	push	{r4, r5, r6, lr}
 800e982:	460c      	mov	r4, r1
 800e984:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e988:	4615      	mov	r5, r2
 800e98a:	2900      	cmp	r1, #0
 800e98c:	461e      	mov	r6, r3
 800e98e:	b096      	sub	sp, #88	@ 0x58
 800e990:	da0c      	bge.n	800e9ac <__swhatbuf_r+0x2c>
 800e992:	89a3      	ldrh	r3, [r4, #12]
 800e994:	2100      	movs	r1, #0
 800e996:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800e99a:	bf14      	ite	ne
 800e99c:	2340      	movne	r3, #64	@ 0x40
 800e99e:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800e9a2:	2000      	movs	r0, #0
 800e9a4:	6031      	str	r1, [r6, #0]
 800e9a6:	602b      	str	r3, [r5, #0]
 800e9a8:	b016      	add	sp, #88	@ 0x58
 800e9aa:	bd70      	pop	{r4, r5, r6, pc}
 800e9ac:	466a      	mov	r2, sp
 800e9ae:	f000 f849 	bl	800ea44 <_fstat_r>
 800e9b2:	2800      	cmp	r0, #0
 800e9b4:	dbed      	blt.n	800e992 <__swhatbuf_r+0x12>
 800e9b6:	9901      	ldr	r1, [sp, #4]
 800e9b8:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800e9bc:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800e9c0:	4259      	negs	r1, r3
 800e9c2:	4159      	adcs	r1, r3
 800e9c4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800e9c8:	e7eb      	b.n	800e9a2 <__swhatbuf_r+0x22>

0800e9ca <__smakebuf_r>:
 800e9ca:	898b      	ldrh	r3, [r1, #12]
 800e9cc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800e9ce:	079d      	lsls	r5, r3, #30
 800e9d0:	4606      	mov	r6, r0
 800e9d2:	460c      	mov	r4, r1
 800e9d4:	d507      	bpl.n	800e9e6 <__smakebuf_r+0x1c>
 800e9d6:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800e9da:	6023      	str	r3, [r4, #0]
 800e9dc:	6123      	str	r3, [r4, #16]
 800e9de:	2301      	movs	r3, #1
 800e9e0:	6163      	str	r3, [r4, #20]
 800e9e2:	b003      	add	sp, #12
 800e9e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e9e6:	466a      	mov	r2, sp
 800e9e8:	ab01      	add	r3, sp, #4
 800e9ea:	f7ff ffc9 	bl	800e980 <__swhatbuf_r>
 800e9ee:	9f00      	ldr	r7, [sp, #0]
 800e9f0:	4605      	mov	r5, r0
 800e9f2:	4639      	mov	r1, r7
 800e9f4:	4630      	mov	r0, r6
 800e9f6:	f7fe fd17 	bl	800d428 <_malloc_r>
 800e9fa:	b948      	cbnz	r0, 800ea10 <__smakebuf_r+0x46>
 800e9fc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ea00:	059a      	lsls	r2, r3, #22
 800ea02:	d4ee      	bmi.n	800e9e2 <__smakebuf_r+0x18>
 800ea04:	f023 0303 	bic.w	r3, r3, #3
 800ea08:	f043 0302 	orr.w	r3, r3, #2
 800ea0c:	81a3      	strh	r3, [r4, #12]
 800ea0e:	e7e2      	b.n	800e9d6 <__smakebuf_r+0xc>
 800ea10:	89a3      	ldrh	r3, [r4, #12]
 800ea12:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800ea16:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ea1a:	81a3      	strh	r3, [r4, #12]
 800ea1c:	9b01      	ldr	r3, [sp, #4]
 800ea1e:	6020      	str	r0, [r4, #0]
 800ea20:	b15b      	cbz	r3, 800ea3a <__smakebuf_r+0x70>
 800ea22:	4630      	mov	r0, r6
 800ea24:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ea28:	f000 f81e 	bl	800ea68 <_isatty_r>
 800ea2c:	b128      	cbz	r0, 800ea3a <__smakebuf_r+0x70>
 800ea2e:	89a3      	ldrh	r3, [r4, #12]
 800ea30:	f023 0303 	bic.w	r3, r3, #3
 800ea34:	f043 0301 	orr.w	r3, r3, #1
 800ea38:	81a3      	strh	r3, [r4, #12]
 800ea3a:	89a3      	ldrh	r3, [r4, #12]
 800ea3c:	431d      	orrs	r5, r3
 800ea3e:	81a5      	strh	r5, [r4, #12]
 800ea40:	e7cf      	b.n	800e9e2 <__smakebuf_r+0x18>
	...

0800ea44 <_fstat_r>:
 800ea44:	b538      	push	{r3, r4, r5, lr}
 800ea46:	2300      	movs	r3, #0
 800ea48:	4d06      	ldr	r5, [pc, #24]	@ (800ea64 <_fstat_r+0x20>)
 800ea4a:	4604      	mov	r4, r0
 800ea4c:	4608      	mov	r0, r1
 800ea4e:	4611      	mov	r1, r2
 800ea50:	602b      	str	r3, [r5, #0]
 800ea52:	f7f3 fa03 	bl	8001e5c <_fstat>
 800ea56:	1c43      	adds	r3, r0, #1
 800ea58:	d102      	bne.n	800ea60 <_fstat_r+0x1c>
 800ea5a:	682b      	ldr	r3, [r5, #0]
 800ea5c:	b103      	cbz	r3, 800ea60 <_fstat_r+0x1c>
 800ea5e:	6023      	str	r3, [r4, #0]
 800ea60:	bd38      	pop	{r3, r4, r5, pc}
 800ea62:	bf00      	nop
 800ea64:	200016c4 	.word	0x200016c4

0800ea68 <_isatty_r>:
 800ea68:	b538      	push	{r3, r4, r5, lr}
 800ea6a:	2300      	movs	r3, #0
 800ea6c:	4d05      	ldr	r5, [pc, #20]	@ (800ea84 <_isatty_r+0x1c>)
 800ea6e:	4604      	mov	r4, r0
 800ea70:	4608      	mov	r0, r1
 800ea72:	602b      	str	r3, [r5, #0]
 800ea74:	f7f3 fa01 	bl	8001e7a <_isatty>
 800ea78:	1c43      	adds	r3, r0, #1
 800ea7a:	d102      	bne.n	800ea82 <_isatty_r+0x1a>
 800ea7c:	682b      	ldr	r3, [r5, #0]
 800ea7e:	b103      	cbz	r3, 800ea82 <_isatty_r+0x1a>
 800ea80:	6023      	str	r3, [r4, #0]
 800ea82:	bd38      	pop	{r3, r4, r5, pc}
 800ea84:	200016c4 	.word	0x200016c4

0800ea88 <_init>:
 800ea88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ea8a:	bf00      	nop
 800ea8c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ea8e:	bc08      	pop	{r3}
 800ea90:	469e      	mov	lr, r3
 800ea92:	4770      	bx	lr

0800ea94 <_fini>:
 800ea94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ea96:	bf00      	nop
 800ea98:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ea9a:	bc08      	pop	{r3}
 800ea9c:	469e      	mov	lr, r3
 800ea9e:	4770      	bx	lr
