
ScintilatorProbeSoftware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a8c0  08000110  08000110  00001110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005f0  0800a9d0  0800a9d0  0000b9d0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800afc0  0800afc0  0000c344  2**0
                  CONTENTS
  4 .ARM          00000008  0800afc0  0800afc0  0000bfc0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800afc8  0800afc8  0000c344  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800afc8  0800afc8  0000bfc8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800afcc  0800afcc  0000bfcc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000344  20000000  0800afd0  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000120c  20000348  0800b314  0000c348  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20001554  0800b314  0000c554  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000c344  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001a92a  00000000  00000000  0000c36d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000046e8  00000000  00000000  00026c97  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loclists 0000cb1e  00000000  00000000  0002b37f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001108  00000000  00000000  00037ea0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001936  00000000  00000000  00038fa8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001bbe3  00000000  00000000  0003a8de  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001cede  00000000  00000000  000564c1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00094807  00000000  00000000  0007339f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00107ba6  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000045ec  00000000  00000000  00107bec  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000071  00000000  00000000  0010c1d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000348 	.word	0x20000348
 800012c:	00000000 	.word	0x00000000
 8000130:	0800a9b8 	.word	0x0800a9b8

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	2000034c 	.word	0x2000034c
 800014c:	0800a9b8 	.word	0x0800a9b8

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_fmul>:
 8000160:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000164:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000168:	bf1e      	ittt	ne
 800016a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 800016e:	ea92 0f0c 	teqne	r2, ip
 8000172:	ea93 0f0c 	teqne	r3, ip
 8000176:	d06f      	beq.n	8000258 <__aeabi_fmul+0xf8>
 8000178:	441a      	add	r2, r3
 800017a:	ea80 0c01 	eor.w	ip, r0, r1
 800017e:	0240      	lsls	r0, r0, #9
 8000180:	bf18      	it	ne
 8000182:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000186:	d01e      	beq.n	80001c6 <__aeabi_fmul+0x66>
 8000188:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800018c:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000190:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000194:	fba0 3101 	umull	r3, r1, r0, r1
 8000198:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 800019c:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 80001a0:	bf3e      	ittt	cc
 80001a2:	0049      	lslcc	r1, r1, #1
 80001a4:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80001a8:	005b      	lslcc	r3, r3, #1
 80001aa:	ea40 0001 	orr.w	r0, r0, r1
 80001ae:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 80001b2:	2afd      	cmp	r2, #253	@ 0xfd
 80001b4:	d81d      	bhi.n	80001f2 <__aeabi_fmul+0x92>
 80001b6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80001ba:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80001be:	bf08      	it	eq
 80001c0:	f020 0001 	biceq.w	r0, r0, #1
 80001c4:	4770      	bx	lr
 80001c6:	f090 0f00 	teq	r0, #0
 80001ca:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 80001ce:	bf08      	it	eq
 80001d0:	0249      	lsleq	r1, r1, #9
 80001d2:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80001d6:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80001da:	3a7f      	subs	r2, #127	@ 0x7f
 80001dc:	bfc2      	ittt	gt
 80001de:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 80001e2:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80001e6:	4770      	bxgt	lr
 80001e8:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80001ec:	f04f 0300 	mov.w	r3, #0
 80001f0:	3a01      	subs	r2, #1
 80001f2:	dc5d      	bgt.n	80002b0 <__aeabi_fmul+0x150>
 80001f4:	f112 0f19 	cmn.w	r2, #25
 80001f8:	bfdc      	itt	le
 80001fa:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 80001fe:	4770      	bxle	lr
 8000200:	f1c2 0200 	rsb	r2, r2, #0
 8000204:	0041      	lsls	r1, r0, #1
 8000206:	fa21 f102 	lsr.w	r1, r1, r2
 800020a:	f1c2 0220 	rsb	r2, r2, #32
 800020e:	fa00 fc02 	lsl.w	ip, r0, r2
 8000212:	ea5f 0031 	movs.w	r0, r1, rrx
 8000216:	f140 0000 	adc.w	r0, r0, #0
 800021a:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 800021e:	bf08      	it	eq
 8000220:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000224:	4770      	bx	lr
 8000226:	f092 0f00 	teq	r2, #0
 800022a:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 800022e:	bf02      	ittt	eq
 8000230:	0040      	lsleq	r0, r0, #1
 8000232:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000236:	3a01      	subeq	r2, #1
 8000238:	d0f9      	beq.n	800022e <__aeabi_fmul+0xce>
 800023a:	ea40 000c 	orr.w	r0, r0, ip
 800023e:	f093 0f00 	teq	r3, #0
 8000242:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000246:	bf02      	ittt	eq
 8000248:	0049      	lsleq	r1, r1, #1
 800024a:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 800024e:	3b01      	subeq	r3, #1
 8000250:	d0f9      	beq.n	8000246 <__aeabi_fmul+0xe6>
 8000252:	ea41 010c 	orr.w	r1, r1, ip
 8000256:	e78f      	b.n	8000178 <__aeabi_fmul+0x18>
 8000258:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 800025c:	ea92 0f0c 	teq	r2, ip
 8000260:	bf18      	it	ne
 8000262:	ea93 0f0c 	teqne	r3, ip
 8000266:	d00a      	beq.n	800027e <__aeabi_fmul+0x11e>
 8000268:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 800026c:	bf18      	it	ne
 800026e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000272:	d1d8      	bne.n	8000226 <__aeabi_fmul+0xc6>
 8000274:	ea80 0001 	eor.w	r0, r0, r1
 8000278:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 800027c:	4770      	bx	lr
 800027e:	f090 0f00 	teq	r0, #0
 8000282:	bf17      	itett	ne
 8000284:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000288:	4608      	moveq	r0, r1
 800028a:	f091 0f00 	teqne	r1, #0
 800028e:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 8000292:	d014      	beq.n	80002be <__aeabi_fmul+0x15e>
 8000294:	ea92 0f0c 	teq	r2, ip
 8000298:	d101      	bne.n	800029e <__aeabi_fmul+0x13e>
 800029a:	0242      	lsls	r2, r0, #9
 800029c:	d10f      	bne.n	80002be <__aeabi_fmul+0x15e>
 800029e:	ea93 0f0c 	teq	r3, ip
 80002a2:	d103      	bne.n	80002ac <__aeabi_fmul+0x14c>
 80002a4:	024b      	lsls	r3, r1, #9
 80002a6:	bf18      	it	ne
 80002a8:	4608      	movne	r0, r1
 80002aa:	d108      	bne.n	80002be <__aeabi_fmul+0x15e>
 80002ac:	ea80 0001 	eor.w	r0, r0, r1
 80002b0:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 80002b4:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 80002b8:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80002bc:	4770      	bx	lr
 80002be:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 80002c2:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 80002c6:	4770      	bx	lr

080002c8 <__aeabi_drsub>:
 80002c8:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002cc:	e002      	b.n	80002d4 <__adddf3>
 80002ce:	bf00      	nop

080002d0 <__aeabi_dsub>:
 80002d0:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002d4 <__adddf3>:
 80002d4:	b530      	push	{r4, r5, lr}
 80002d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002de:	ea94 0f05 	teq	r4, r5
 80002e2:	bf08      	it	eq
 80002e4:	ea90 0f02 	teqeq	r0, r2
 80002e8:	bf1f      	itttt	ne
 80002ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002fa:	f000 80e2 	beq.w	80004c2 <__adddf3+0x1ee>
 80002fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000302:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000306:	bfb8      	it	lt
 8000308:	426d      	neglt	r5, r5
 800030a:	dd0c      	ble.n	8000326 <__adddf3+0x52>
 800030c:	442c      	add	r4, r5
 800030e:	ea80 0202 	eor.w	r2, r0, r2
 8000312:	ea81 0303 	eor.w	r3, r1, r3
 8000316:	ea82 0000 	eor.w	r0, r2, r0
 800031a:	ea83 0101 	eor.w	r1, r3, r1
 800031e:	ea80 0202 	eor.w	r2, r0, r2
 8000322:	ea81 0303 	eor.w	r3, r1, r3
 8000326:	2d36      	cmp	r5, #54	@ 0x36
 8000328:	bf88      	it	hi
 800032a:	bd30      	pophi	{r4, r5, pc}
 800032c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000330:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000334:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000338:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800033c:	d002      	beq.n	8000344 <__adddf3+0x70>
 800033e:	4240      	negs	r0, r0
 8000340:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000344:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000348:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800034c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000350:	d002      	beq.n	8000358 <__adddf3+0x84>
 8000352:	4252      	negs	r2, r2
 8000354:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000358:	ea94 0f05 	teq	r4, r5
 800035c:	f000 80a7 	beq.w	80004ae <__adddf3+0x1da>
 8000360:	f1a4 0401 	sub.w	r4, r4, #1
 8000364:	f1d5 0e20 	rsbs	lr, r5, #32
 8000368:	db0d      	blt.n	8000386 <__adddf3+0xb2>
 800036a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800036e:	fa22 f205 	lsr.w	r2, r2, r5
 8000372:	1880      	adds	r0, r0, r2
 8000374:	f141 0100 	adc.w	r1, r1, #0
 8000378:	fa03 f20e 	lsl.w	r2, r3, lr
 800037c:	1880      	adds	r0, r0, r2
 800037e:	fa43 f305 	asr.w	r3, r3, r5
 8000382:	4159      	adcs	r1, r3
 8000384:	e00e      	b.n	80003a4 <__adddf3+0xd0>
 8000386:	f1a5 0520 	sub.w	r5, r5, #32
 800038a:	f10e 0e20 	add.w	lr, lr, #32
 800038e:	2a01      	cmp	r2, #1
 8000390:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000394:	bf28      	it	cs
 8000396:	f04c 0c02 	orrcs.w	ip, ip, #2
 800039a:	fa43 f305 	asr.w	r3, r3, r5
 800039e:	18c0      	adds	r0, r0, r3
 80003a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003a4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003a8:	d507      	bpl.n	80003ba <__adddf3+0xe6>
 80003aa:	f04f 0e00 	mov.w	lr, #0
 80003ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80003b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80003ba:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003be:	d31b      	bcc.n	80003f8 <__adddf3+0x124>
 80003c0:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003c4:	d30c      	bcc.n	80003e0 <__adddf3+0x10c>
 80003c6:	0849      	lsrs	r1, r1, #1
 80003c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80003cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d0:	f104 0401 	add.w	r4, r4, #1
 80003d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d8:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003dc:	f080 809a 	bcs.w	8000514 <__adddf3+0x240>
 80003e0:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003e4:	bf08      	it	eq
 80003e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003ea:	f150 0000 	adcs.w	r0, r0, #0
 80003ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003f2:	ea41 0105 	orr.w	r1, r1, r5
 80003f6:	bd30      	pop	{r4, r5, pc}
 80003f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003fc:	4140      	adcs	r0, r0
 80003fe:	eb41 0101 	adc.w	r1, r1, r1
 8000402:	3c01      	subs	r4, #1
 8000404:	bf28      	it	cs
 8000406:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800040a:	d2e9      	bcs.n	80003e0 <__adddf3+0x10c>
 800040c:	f091 0f00 	teq	r1, #0
 8000410:	bf04      	itt	eq
 8000412:	4601      	moveq	r1, r0
 8000414:	2000      	moveq	r0, #0
 8000416:	fab1 f381 	clz	r3, r1
 800041a:	bf08      	it	eq
 800041c:	3320      	addeq	r3, #32
 800041e:	f1a3 030b 	sub.w	r3, r3, #11
 8000422:	f1b3 0220 	subs.w	r2, r3, #32
 8000426:	da0c      	bge.n	8000442 <__adddf3+0x16e>
 8000428:	320c      	adds	r2, #12
 800042a:	dd08      	ble.n	800043e <__adddf3+0x16a>
 800042c:	f102 0c14 	add.w	ip, r2, #20
 8000430:	f1c2 020c 	rsb	r2, r2, #12
 8000434:	fa01 f00c 	lsl.w	r0, r1, ip
 8000438:	fa21 f102 	lsr.w	r1, r1, r2
 800043c:	e00c      	b.n	8000458 <__adddf3+0x184>
 800043e:	f102 0214 	add.w	r2, r2, #20
 8000442:	bfd8      	it	le
 8000444:	f1c2 0c20 	rsble	ip, r2, #32
 8000448:	fa01 f102 	lsl.w	r1, r1, r2
 800044c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000450:	bfdc      	itt	le
 8000452:	ea41 010c 	orrle.w	r1, r1, ip
 8000456:	4090      	lslle	r0, r2
 8000458:	1ae4      	subs	r4, r4, r3
 800045a:	bfa2      	ittt	ge
 800045c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000460:	4329      	orrge	r1, r5
 8000462:	bd30      	popge	{r4, r5, pc}
 8000464:	ea6f 0404 	mvn.w	r4, r4
 8000468:	3c1f      	subs	r4, #31
 800046a:	da1c      	bge.n	80004a6 <__adddf3+0x1d2>
 800046c:	340c      	adds	r4, #12
 800046e:	dc0e      	bgt.n	800048e <__adddf3+0x1ba>
 8000470:	f104 0414 	add.w	r4, r4, #20
 8000474:	f1c4 0220 	rsb	r2, r4, #32
 8000478:	fa20 f004 	lsr.w	r0, r0, r4
 800047c:	fa01 f302 	lsl.w	r3, r1, r2
 8000480:	ea40 0003 	orr.w	r0, r0, r3
 8000484:	fa21 f304 	lsr.w	r3, r1, r4
 8000488:	ea45 0103 	orr.w	r1, r5, r3
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	f1c4 040c 	rsb	r4, r4, #12
 8000492:	f1c4 0220 	rsb	r2, r4, #32
 8000496:	fa20 f002 	lsr.w	r0, r0, r2
 800049a:	fa01 f304 	lsl.w	r3, r1, r4
 800049e:	ea40 0003 	orr.w	r0, r0, r3
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	fa21 f004 	lsr.w	r0, r1, r4
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	f094 0f00 	teq	r4, #0
 80004b2:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004b6:	bf06      	itte	eq
 80004b8:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004bc:	3401      	addeq	r4, #1
 80004be:	3d01      	subne	r5, #1
 80004c0:	e74e      	b.n	8000360 <__adddf3+0x8c>
 80004c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004c6:	bf18      	it	ne
 80004c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004cc:	d029      	beq.n	8000522 <__adddf3+0x24e>
 80004ce:	ea94 0f05 	teq	r4, r5
 80004d2:	bf08      	it	eq
 80004d4:	ea90 0f02 	teqeq	r0, r2
 80004d8:	d005      	beq.n	80004e6 <__adddf3+0x212>
 80004da:	ea54 0c00 	orrs.w	ip, r4, r0
 80004de:	bf04      	itt	eq
 80004e0:	4619      	moveq	r1, r3
 80004e2:	4610      	moveq	r0, r2
 80004e4:	bd30      	pop	{r4, r5, pc}
 80004e6:	ea91 0f03 	teq	r1, r3
 80004ea:	bf1e      	ittt	ne
 80004ec:	2100      	movne	r1, #0
 80004ee:	2000      	movne	r0, #0
 80004f0:	bd30      	popne	{r4, r5, pc}
 80004f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004f6:	d105      	bne.n	8000504 <__adddf3+0x230>
 80004f8:	0040      	lsls	r0, r0, #1
 80004fa:	4149      	adcs	r1, r1
 80004fc:	bf28      	it	cs
 80004fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000502:	bd30      	pop	{r4, r5, pc}
 8000504:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000508:	bf3c      	itt	cc
 800050a:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800050e:	bd30      	popcc	{r4, r5, pc}
 8000510:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000514:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000518:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800051c:	f04f 0000 	mov.w	r0, #0
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000526:	bf1a      	itte	ne
 8000528:	4619      	movne	r1, r3
 800052a:	4610      	movne	r0, r2
 800052c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000530:	bf1c      	itt	ne
 8000532:	460b      	movne	r3, r1
 8000534:	4602      	movne	r2, r0
 8000536:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800053a:	bf06      	itte	eq
 800053c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000540:	ea91 0f03 	teqeq	r1, r3
 8000544:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000548:	bd30      	pop	{r4, r5, pc}
 800054a:	bf00      	nop

0800054c <__aeabi_ui2d>:
 800054c:	f090 0f00 	teq	r0, #0
 8000550:	bf04      	itt	eq
 8000552:	2100      	moveq	r1, #0
 8000554:	4770      	bxeq	lr
 8000556:	b530      	push	{r4, r5, lr}
 8000558:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800055c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000560:	f04f 0500 	mov.w	r5, #0
 8000564:	f04f 0100 	mov.w	r1, #0
 8000568:	e750      	b.n	800040c <__adddf3+0x138>
 800056a:	bf00      	nop

0800056c <__aeabi_i2d>:
 800056c:	f090 0f00 	teq	r0, #0
 8000570:	bf04      	itt	eq
 8000572:	2100      	moveq	r1, #0
 8000574:	4770      	bxeq	lr
 8000576:	b530      	push	{r4, r5, lr}
 8000578:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800057c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000580:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000584:	bf48      	it	mi
 8000586:	4240      	negmi	r0, r0
 8000588:	f04f 0100 	mov.w	r1, #0
 800058c:	e73e      	b.n	800040c <__adddf3+0x138>
 800058e:	bf00      	nop

08000590 <__aeabi_f2d>:
 8000590:	0042      	lsls	r2, r0, #1
 8000592:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000596:	ea4f 0131 	mov.w	r1, r1, rrx
 800059a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800059e:	bf1f      	itttt	ne
 80005a0:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80005a4:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005a8:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005ac:	4770      	bxne	lr
 80005ae:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005b2:	bf08      	it	eq
 80005b4:	4770      	bxeq	lr
 80005b6:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005ba:	bf04      	itt	eq
 80005bc:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005c0:	4770      	bxeq	lr
 80005c2:	b530      	push	{r4, r5, lr}
 80005c4:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005cc:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005d0:	e71c      	b.n	800040c <__adddf3+0x138>
 80005d2:	bf00      	nop

080005d4 <__aeabi_ul2d>:
 80005d4:	ea50 0201 	orrs.w	r2, r0, r1
 80005d8:	bf08      	it	eq
 80005da:	4770      	bxeq	lr
 80005dc:	b530      	push	{r4, r5, lr}
 80005de:	f04f 0500 	mov.w	r5, #0
 80005e2:	e00a      	b.n	80005fa <__aeabi_l2d+0x16>

080005e4 <__aeabi_l2d>:
 80005e4:	ea50 0201 	orrs.w	r2, r0, r1
 80005e8:	bf08      	it	eq
 80005ea:	4770      	bxeq	lr
 80005ec:	b530      	push	{r4, r5, lr}
 80005ee:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005f2:	d502      	bpl.n	80005fa <__aeabi_l2d+0x16>
 80005f4:	4240      	negs	r0, r0
 80005f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005fa:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005fe:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000602:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000606:	f43f aed8 	beq.w	80003ba <__adddf3+0xe6>
 800060a:	f04f 0203 	mov.w	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000622:	f1c2 0320 	rsb	r3, r2, #32
 8000626:	fa00 fc03 	lsl.w	ip, r0, r3
 800062a:	fa20 f002 	lsr.w	r0, r0, r2
 800062e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000632:	ea40 000e 	orr.w	r0, r0, lr
 8000636:	fa21 f102 	lsr.w	r1, r1, r2
 800063a:	4414      	add	r4, r2
 800063c:	e6bd      	b.n	80003ba <__adddf3+0xe6>
 800063e:	bf00      	nop

08000640 <__aeabi_dmul>:
 8000640:	b570      	push	{r4, r5, r6, lr}
 8000642:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000646:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800064a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800064e:	bf1d      	ittte	ne
 8000650:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000654:	ea94 0f0c 	teqne	r4, ip
 8000658:	ea95 0f0c 	teqne	r5, ip
 800065c:	f000 f8de 	bleq	800081c <__aeabi_dmul+0x1dc>
 8000660:	442c      	add	r4, r5
 8000662:	ea81 0603 	eor.w	r6, r1, r3
 8000666:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800066a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800066e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000672:	bf18      	it	ne
 8000674:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000678:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800067c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000680:	d038      	beq.n	80006f4 <__aeabi_dmul+0xb4>
 8000682:	fba0 ce02 	umull	ip, lr, r0, r2
 8000686:	f04f 0500 	mov.w	r5, #0
 800068a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800068e:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 8000692:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000696:	f04f 0600 	mov.w	r6, #0
 800069a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800069e:	f09c 0f00 	teq	ip, #0
 80006a2:	bf18      	it	ne
 80006a4:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006ac:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006b0:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006b4:	d204      	bcs.n	80006c0 <__aeabi_dmul+0x80>
 80006b6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006ba:	416d      	adcs	r5, r5
 80006bc:	eb46 0606 	adc.w	r6, r6, r6
 80006c0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006c4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006cc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006d4:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006d8:	bf88      	it	hi
 80006da:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006de:	d81e      	bhi.n	800071e <__aeabi_dmul+0xde>
 80006e0:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006e4:	bf08      	it	eq
 80006e6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006ea:	f150 0000 	adcs.w	r0, r0, #0
 80006ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006f2:	bd70      	pop	{r4, r5, r6, pc}
 80006f4:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006f8:	ea46 0101 	orr.w	r1, r6, r1
 80006fc:	ea40 0002 	orr.w	r0, r0, r2
 8000700:	ea81 0103 	eor.w	r1, r1, r3
 8000704:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000708:	bfc2      	ittt	gt
 800070a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800070e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000712:	bd70      	popgt	{r4, r5, r6, pc}
 8000714:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000718:	f04f 0e00 	mov.w	lr, #0
 800071c:	3c01      	subs	r4, #1
 800071e:	f300 80ab 	bgt.w	8000878 <__aeabi_dmul+0x238>
 8000722:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000726:	bfde      	ittt	le
 8000728:	2000      	movle	r0, #0
 800072a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800072e:	bd70      	pople	{r4, r5, r6, pc}
 8000730:	f1c4 0400 	rsb	r4, r4, #0
 8000734:	3c20      	subs	r4, #32
 8000736:	da35      	bge.n	80007a4 <__aeabi_dmul+0x164>
 8000738:	340c      	adds	r4, #12
 800073a:	dc1b      	bgt.n	8000774 <__aeabi_dmul+0x134>
 800073c:	f104 0414 	add.w	r4, r4, #20
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f305 	lsl.w	r3, r0, r5
 8000748:	fa20 f004 	lsr.w	r0, r0, r4
 800074c:	fa01 f205 	lsl.w	r2, r1, r5
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000758:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800075c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000760:	fa21 f604 	lsr.w	r6, r1, r4
 8000764:	eb42 0106 	adc.w	r1, r2, r6
 8000768:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800076c:	bf08      	it	eq
 800076e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000772:	bd70      	pop	{r4, r5, r6, pc}
 8000774:	f1c4 040c 	rsb	r4, r4, #12
 8000778:	f1c4 0520 	rsb	r5, r4, #32
 800077c:	fa00 f304 	lsl.w	r3, r0, r4
 8000780:	fa20 f005 	lsr.w	r0, r0, r5
 8000784:	fa01 f204 	lsl.w	r2, r1, r4
 8000788:	ea40 0002 	orr.w	r0, r0, r2
 800078c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000790:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000794:	f141 0100 	adc.w	r1, r1, #0
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f1c4 0520 	rsb	r5, r4, #32
 80007a8:	fa00 f205 	lsl.w	r2, r0, r5
 80007ac:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b0:	fa20 f304 	lsr.w	r3, r0, r4
 80007b4:	fa01 f205 	lsl.w	r2, r1, r5
 80007b8:	ea43 0302 	orr.w	r3, r3, r2
 80007bc:	fa21 f004 	lsr.w	r0, r1, r4
 80007c0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007c4:	fa21 f204 	lsr.w	r2, r1, r4
 80007c8:	ea20 0002 	bic.w	r0, r0, r2
 80007cc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007d4:	bf08      	it	eq
 80007d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007da:	bd70      	pop	{r4, r5, r6, pc}
 80007dc:	f094 0f00 	teq	r4, #0
 80007e0:	d10f      	bne.n	8000802 <__aeabi_dmul+0x1c2>
 80007e2:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007e6:	0040      	lsls	r0, r0, #1
 80007e8:	eb41 0101 	adc.w	r1, r1, r1
 80007ec:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007f0:	bf08      	it	eq
 80007f2:	3c01      	subeq	r4, #1
 80007f4:	d0f7      	beq.n	80007e6 <__aeabi_dmul+0x1a6>
 80007f6:	ea41 0106 	orr.w	r1, r1, r6
 80007fa:	f095 0f00 	teq	r5, #0
 80007fe:	bf18      	it	ne
 8000800:	4770      	bxne	lr
 8000802:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000806:	0052      	lsls	r2, r2, #1
 8000808:	eb43 0303 	adc.w	r3, r3, r3
 800080c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000810:	bf08      	it	eq
 8000812:	3d01      	subeq	r5, #1
 8000814:	d0f7      	beq.n	8000806 <__aeabi_dmul+0x1c6>
 8000816:	ea43 0306 	orr.w	r3, r3, r6
 800081a:	4770      	bx	lr
 800081c:	ea94 0f0c 	teq	r4, ip
 8000820:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000824:	bf18      	it	ne
 8000826:	ea95 0f0c 	teqne	r5, ip
 800082a:	d00c      	beq.n	8000846 <__aeabi_dmul+0x206>
 800082c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000830:	bf18      	it	ne
 8000832:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000836:	d1d1      	bne.n	80007dc <__aeabi_dmul+0x19c>
 8000838:	ea81 0103 	eor.w	r1, r1, r3
 800083c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000840:	f04f 0000 	mov.w	r0, #0
 8000844:	bd70      	pop	{r4, r5, r6, pc}
 8000846:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800084a:	bf06      	itte	eq
 800084c:	4610      	moveq	r0, r2
 800084e:	4619      	moveq	r1, r3
 8000850:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000854:	d019      	beq.n	800088a <__aeabi_dmul+0x24a>
 8000856:	ea94 0f0c 	teq	r4, ip
 800085a:	d102      	bne.n	8000862 <__aeabi_dmul+0x222>
 800085c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000860:	d113      	bne.n	800088a <__aeabi_dmul+0x24a>
 8000862:	ea95 0f0c 	teq	r5, ip
 8000866:	d105      	bne.n	8000874 <__aeabi_dmul+0x234>
 8000868:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800086c:	bf1c      	itt	ne
 800086e:	4610      	movne	r0, r2
 8000870:	4619      	movne	r1, r3
 8000872:	d10a      	bne.n	800088a <__aeabi_dmul+0x24a>
 8000874:	ea81 0103 	eor.w	r1, r1, r3
 8000878:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800087c:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000880:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000884:	f04f 0000 	mov.w	r0, #0
 8000888:	bd70      	pop	{r4, r5, r6, pc}
 800088a:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 800088e:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 8000892:	bd70      	pop	{r4, r5, r6, pc}

08000894 <__aeabi_ddiv>:
 8000894:	b570      	push	{r4, r5, r6, lr}
 8000896:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800089a:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800089e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008a2:	bf1d      	ittte	ne
 80008a4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a8:	ea94 0f0c 	teqne	r4, ip
 80008ac:	ea95 0f0c 	teqne	r5, ip
 80008b0:	f000 f8a7 	bleq	8000a02 <__aeabi_ddiv+0x16e>
 80008b4:	eba4 0405 	sub.w	r4, r4, r5
 80008b8:	ea81 0e03 	eor.w	lr, r1, r3
 80008bc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008c4:	f000 8088 	beq.w	80009d8 <__aeabi_ddiv+0x144>
 80008c8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008cc:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008d0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008d4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008dc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008e4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e8:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008ec:	429d      	cmp	r5, r3
 80008ee:	bf08      	it	eq
 80008f0:	4296      	cmpeq	r6, r2
 80008f2:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008f6:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008fa:	d202      	bcs.n	8000902 <__aeabi_ddiv+0x6e>
 80008fc:	085b      	lsrs	r3, r3, #1
 80008fe:	ea4f 0232 	mov.w	r2, r2, rrx
 8000902:	1ab6      	subs	r6, r6, r2
 8000904:	eb65 0503 	sbc.w	r5, r5, r3
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000912:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 000c 	orrcs.w	r0, r0, ip
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000958:	085b      	lsrs	r3, r3, #1
 800095a:	ea4f 0232 	mov.w	r2, r2, rrx
 800095e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000962:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000966:	bf22      	ittt	cs
 8000968:	1ab6      	subcs	r6, r6, r2
 800096a:	4675      	movcs	r5, lr
 800096c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000970:	ea55 0e06 	orrs.w	lr, r5, r6
 8000974:	d018      	beq.n	80009a8 <__aeabi_ddiv+0x114>
 8000976:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800097a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800097e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000982:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000986:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800098a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800098e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000992:	d1c0      	bne.n	8000916 <__aeabi_ddiv+0x82>
 8000994:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000998:	d10b      	bne.n	80009b2 <__aeabi_ddiv+0x11e>
 800099a:	ea41 0100 	orr.w	r1, r1, r0
 800099e:	f04f 0000 	mov.w	r0, #0
 80009a2:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80009a6:	e7b6      	b.n	8000916 <__aeabi_ddiv+0x82>
 80009a8:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009ac:	bf04      	itt	eq
 80009ae:	4301      	orreq	r1, r0
 80009b0:	2000      	moveq	r0, #0
 80009b2:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009b6:	bf88      	it	hi
 80009b8:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009bc:	f63f aeaf 	bhi.w	800071e <__aeabi_dmul+0xde>
 80009c0:	ebb5 0c03 	subs.w	ip, r5, r3
 80009c4:	bf04      	itt	eq
 80009c6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009ca:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009ce:	f150 0000 	adcs.w	r0, r0, #0
 80009d2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	pop	{r4, r5, r6, pc}
 80009d8:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009dc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009e4:	bfc2      	ittt	gt
 80009e6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009ee:	bd70      	popgt	{r4, r5, r6, pc}
 80009f0:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009f4:	f04f 0e00 	mov.w	lr, #0
 80009f8:	3c01      	subs	r4, #1
 80009fa:	e690      	b.n	800071e <__aeabi_dmul+0xde>
 80009fc:	ea45 0e06 	orr.w	lr, r5, r6
 8000a00:	e68d      	b.n	800071e <__aeabi_dmul+0xde>
 8000a02:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a06:	ea94 0f0c 	teq	r4, ip
 8000a0a:	bf08      	it	eq
 8000a0c:	ea95 0f0c 	teqeq	r5, ip
 8000a10:	f43f af3b 	beq.w	800088a <__aeabi_dmul+0x24a>
 8000a14:	ea94 0f0c 	teq	r4, ip
 8000a18:	d10a      	bne.n	8000a30 <__aeabi_ddiv+0x19c>
 8000a1a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a1e:	f47f af34 	bne.w	800088a <__aeabi_dmul+0x24a>
 8000a22:	ea95 0f0c 	teq	r5, ip
 8000a26:	f47f af25 	bne.w	8000874 <__aeabi_dmul+0x234>
 8000a2a:	4610      	mov	r0, r2
 8000a2c:	4619      	mov	r1, r3
 8000a2e:	e72c      	b.n	800088a <__aeabi_dmul+0x24a>
 8000a30:	ea95 0f0c 	teq	r5, ip
 8000a34:	d106      	bne.n	8000a44 <__aeabi_ddiv+0x1b0>
 8000a36:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a3a:	f43f aefd 	beq.w	8000838 <__aeabi_dmul+0x1f8>
 8000a3e:	4610      	mov	r0, r2
 8000a40:	4619      	mov	r1, r3
 8000a42:	e722      	b.n	800088a <__aeabi_dmul+0x24a>
 8000a44:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a48:	bf18      	it	ne
 8000a4a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a4e:	f47f aec5 	bne.w	80007dc <__aeabi_dmul+0x19c>
 8000a52:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a56:	f47f af0d 	bne.w	8000874 <__aeabi_dmul+0x234>
 8000a5a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a5e:	f47f aeeb 	bne.w	8000838 <__aeabi_dmul+0x1f8>
 8000a62:	e712      	b.n	800088a <__aeabi_dmul+0x24a>

08000a64 <__gedf2>:
 8000a64:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8000a68:	e006      	b.n	8000a78 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__ledf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	e002      	b.n	8000a78 <__cmpdf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__cmpdf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a84:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a88:	bf18      	it	ne
 8000a8a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a8e:	d01b      	beq.n	8000ac8 <__cmpdf2+0x54>
 8000a90:	b001      	add	sp, #4
 8000a92:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a96:	bf0c      	ite	eq
 8000a98:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a9c:	ea91 0f03 	teqne	r1, r3
 8000aa0:	bf02      	ittt	eq
 8000aa2:	ea90 0f02 	teqeq	r0, r2
 8000aa6:	2000      	moveq	r0, #0
 8000aa8:	4770      	bxeq	lr
 8000aaa:	f110 0f00 	cmn.w	r0, #0
 8000aae:	ea91 0f03 	teq	r1, r3
 8000ab2:	bf58      	it	pl
 8000ab4:	4299      	cmppl	r1, r3
 8000ab6:	bf08      	it	eq
 8000ab8:	4290      	cmpeq	r0, r2
 8000aba:	bf2c      	ite	cs
 8000abc:	17d8      	asrcs	r0, r3, #31
 8000abe:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000ac2:	f040 0001 	orr.w	r0, r0, #1
 8000ac6:	4770      	bx	lr
 8000ac8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000acc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad0:	d102      	bne.n	8000ad8 <__cmpdf2+0x64>
 8000ad2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ad6:	d107      	bne.n	8000ae8 <__cmpdf2+0x74>
 8000ad8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000adc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae0:	d1d6      	bne.n	8000a90 <__cmpdf2+0x1c>
 8000ae2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ae6:	d0d3      	beq.n	8000a90 <__cmpdf2+0x1c>
 8000ae8:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aec:	4770      	bx	lr
 8000aee:	bf00      	nop

08000af0 <__aeabi_cdrcmple>:
 8000af0:	4684      	mov	ip, r0
 8000af2:	4610      	mov	r0, r2
 8000af4:	4662      	mov	r2, ip
 8000af6:	468c      	mov	ip, r1
 8000af8:	4619      	mov	r1, r3
 8000afa:	4663      	mov	r3, ip
 8000afc:	e000      	b.n	8000b00 <__aeabi_cdcmpeq>
 8000afe:	bf00      	nop

08000b00 <__aeabi_cdcmpeq>:
 8000b00:	b501      	push	{r0, lr}
 8000b02:	f7ff ffb7 	bl	8000a74 <__cmpdf2>
 8000b06:	2800      	cmp	r0, #0
 8000b08:	bf48      	it	mi
 8000b0a:	f110 0f00 	cmnmi.w	r0, #0
 8000b0e:	bd01      	pop	{r0, pc}

08000b10 <__aeabi_dcmpeq>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff fff4 	bl	8000b00 <__aeabi_cdcmpeq>
 8000b18:	bf0c      	ite	eq
 8000b1a:	2001      	moveq	r0, #1
 8000b1c:	2000      	movne	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmplt>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffea 	bl	8000b00 <__aeabi_cdcmpeq>
 8000b2c:	bf34      	ite	cc
 8000b2e:	2001      	movcc	r0, #1
 8000b30:	2000      	movcs	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmple>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffe0 	bl	8000b00 <__aeabi_cdcmpeq>
 8000b40:	bf94      	ite	ls
 8000b42:	2001      	movls	r0, #1
 8000b44:	2000      	movhi	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpge>:
 8000b4c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b50:	f7ff ffce 	bl	8000af0 <__aeabi_cdrcmple>
 8000b54:	bf94      	ite	ls
 8000b56:	2001      	movls	r0, #1
 8000b58:	2000      	movhi	r0, #0
 8000b5a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5e:	bf00      	nop

08000b60 <__aeabi_dcmpgt>:
 8000b60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b64:	f7ff ffc4 	bl	8000af0 <__aeabi_cdrcmple>
 8000b68:	bf34      	ite	cc
 8000b6a:	2001      	movcc	r0, #1
 8000b6c:	2000      	movcs	r0, #0
 8000b6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b72:	bf00      	nop

08000b74 <__aeabi_dcmpun>:
 8000b74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b7c:	d102      	bne.n	8000b84 <__aeabi_dcmpun+0x10>
 8000b7e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b82:	d10a      	bne.n	8000b9a <__aeabi_dcmpun+0x26>
 8000b84:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b8c:	d102      	bne.n	8000b94 <__aeabi_dcmpun+0x20>
 8000b8e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b92:	d102      	bne.n	8000b9a <__aeabi_dcmpun+0x26>
 8000b94:	f04f 0000 	mov.w	r0, #0
 8000b98:	4770      	bx	lr
 8000b9a:	f04f 0001 	mov.w	r0, #1
 8000b9e:	4770      	bx	lr

08000ba0 <__aeabi_d2iz>:
 8000ba0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ba4:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000ba8:	d215      	bcs.n	8000bd6 <__aeabi_d2iz+0x36>
 8000baa:	d511      	bpl.n	8000bd0 <__aeabi_d2iz+0x30>
 8000bac:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bb0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bb4:	d912      	bls.n	8000bdc <__aeabi_d2iz+0x3c>
 8000bb6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bba:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bbe:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bc2:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bc6:	fa23 f002 	lsr.w	r0, r3, r2
 8000bca:	bf18      	it	ne
 8000bcc:	4240      	negne	r0, r0
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d105      	bne.n	8000be8 <__aeabi_d2iz+0x48>
 8000bdc:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000be0:	bf08      	it	eq
 8000be2:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000be6:	4770      	bx	lr
 8000be8:	f04f 0000 	mov.w	r0, #0
 8000bec:	4770      	bx	lr
 8000bee:	bf00      	nop

08000bf0 <__aeabi_d2uiz>:
 8000bf0:	004a      	lsls	r2, r1, #1
 8000bf2:	d211      	bcs.n	8000c18 <__aeabi_d2uiz+0x28>
 8000bf4:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bf8:	d211      	bcs.n	8000c1e <__aeabi_d2uiz+0x2e>
 8000bfa:	d50d      	bpl.n	8000c18 <__aeabi_d2uiz+0x28>
 8000bfc:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000c00:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c04:	d40e      	bmi.n	8000c24 <__aeabi_d2uiz+0x34>
 8000c06:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c0a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000c0e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c12:	fa23 f002 	lsr.w	r0, r3, r2
 8000c16:	4770      	bx	lr
 8000c18:	f04f 0000 	mov.w	r0, #0
 8000c1c:	4770      	bx	lr
 8000c1e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c22:	d102      	bne.n	8000c2a <__aeabi_d2uiz+0x3a>
 8000c24:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000c28:	4770      	bx	lr
 8000c2a:	f04f 0000 	mov.w	r0, #0
 8000c2e:	4770      	bx	lr

08000c30 <__aeabi_d2f>:
 8000c30:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c34:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c38:	bf24      	itt	cs
 8000c3a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c3e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c42:	d90d      	bls.n	8000c60 <__aeabi_d2f+0x30>
 8000c44:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c48:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c4c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c50:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c54:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c58:	bf08      	it	eq
 8000c5a:	f020 0001 	biceq.w	r0, r0, #1
 8000c5e:	4770      	bx	lr
 8000c60:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c64:	d121      	bne.n	8000caa <__aeabi_d2f+0x7a>
 8000c66:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c6a:	bfbc      	itt	lt
 8000c6c:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c70:	4770      	bxlt	lr
 8000c72:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c76:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c7a:	f1c2 0218 	rsb	r2, r2, #24
 8000c7e:	f1c2 0c20 	rsb	ip, r2, #32
 8000c82:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c86:	fa20 f002 	lsr.w	r0, r0, r2
 8000c8a:	bf18      	it	ne
 8000c8c:	f040 0001 	orrne.w	r0, r0, #1
 8000c90:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c94:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c98:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c9c:	ea40 000c 	orr.w	r0, r0, ip
 8000ca0:	fa23 f302 	lsr.w	r3, r3, r2
 8000ca4:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ca8:	e7cc      	b.n	8000c44 <__aeabi_d2f+0x14>
 8000caa:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000cae:	d107      	bne.n	8000cc0 <__aeabi_d2f+0x90>
 8000cb0:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cb4:	bf1e      	ittt	ne
 8000cb6:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000cba:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000cbe:	4770      	bxne	lr
 8000cc0:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000cc4:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000cc8:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ccc:	4770      	bx	lr
 8000cce:	bf00      	nop

08000cd0 <__aeabi_frsub>:
 8000cd0:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000cd4:	e002      	b.n	8000cdc <__addsf3>
 8000cd6:	bf00      	nop

08000cd8 <__aeabi_fsub>:
 8000cd8:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000cdc <__addsf3>:
 8000cdc:	0042      	lsls	r2, r0, #1
 8000cde:	bf1f      	itttt	ne
 8000ce0:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000ce4:	ea92 0f03 	teqne	r2, r3
 8000ce8:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000cec:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000cf0:	d06a      	beq.n	8000dc8 <__addsf3+0xec>
 8000cf2:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000cf6:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000cfa:	bfc1      	itttt	gt
 8000cfc:	18d2      	addgt	r2, r2, r3
 8000cfe:	4041      	eorgt	r1, r0
 8000d00:	4048      	eorgt	r0, r1
 8000d02:	4041      	eorgt	r1, r0
 8000d04:	bfb8      	it	lt
 8000d06:	425b      	neglt	r3, r3
 8000d08:	2b19      	cmp	r3, #25
 8000d0a:	bf88      	it	hi
 8000d0c:	4770      	bxhi	lr
 8000d0e:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000d12:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000d16:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000d1a:	bf18      	it	ne
 8000d1c:	4240      	negne	r0, r0
 8000d1e:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000d22:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000d26:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000d2a:	bf18      	it	ne
 8000d2c:	4249      	negne	r1, r1
 8000d2e:	ea92 0f03 	teq	r2, r3
 8000d32:	d03f      	beq.n	8000db4 <__addsf3+0xd8>
 8000d34:	f1a2 0201 	sub.w	r2, r2, #1
 8000d38:	fa41 fc03 	asr.w	ip, r1, r3
 8000d3c:	eb10 000c 	adds.w	r0, r0, ip
 8000d40:	f1c3 0320 	rsb	r3, r3, #32
 8000d44:	fa01 f103 	lsl.w	r1, r1, r3
 8000d48:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000d4c:	d502      	bpl.n	8000d54 <__addsf3+0x78>
 8000d4e:	4249      	negs	r1, r1
 8000d50:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000d54:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000d58:	d313      	bcc.n	8000d82 <__addsf3+0xa6>
 8000d5a:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000d5e:	d306      	bcc.n	8000d6e <__addsf3+0x92>
 8000d60:	0840      	lsrs	r0, r0, #1
 8000d62:	ea4f 0131 	mov.w	r1, r1, rrx
 8000d66:	f102 0201 	add.w	r2, r2, #1
 8000d6a:	2afe      	cmp	r2, #254	@ 0xfe
 8000d6c:	d251      	bcs.n	8000e12 <__addsf3+0x136>
 8000d6e:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000d72:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d76:	bf08      	it	eq
 8000d78:	f020 0001 	biceq.w	r0, r0, #1
 8000d7c:	ea40 0003 	orr.w	r0, r0, r3
 8000d80:	4770      	bx	lr
 8000d82:	0049      	lsls	r1, r1, #1
 8000d84:	eb40 0000 	adc.w	r0, r0, r0
 8000d88:	3a01      	subs	r2, #1
 8000d8a:	bf28      	it	cs
 8000d8c:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000d90:	d2ed      	bcs.n	8000d6e <__addsf3+0x92>
 8000d92:	fab0 fc80 	clz	ip, r0
 8000d96:	f1ac 0c08 	sub.w	ip, ip, #8
 8000d9a:	ebb2 020c 	subs.w	r2, r2, ip
 8000d9e:	fa00 f00c 	lsl.w	r0, r0, ip
 8000da2:	bfaa      	itet	ge
 8000da4:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000da8:	4252      	neglt	r2, r2
 8000daa:	4318      	orrge	r0, r3
 8000dac:	bfbc      	itt	lt
 8000dae:	40d0      	lsrlt	r0, r2
 8000db0:	4318      	orrlt	r0, r3
 8000db2:	4770      	bx	lr
 8000db4:	f092 0f00 	teq	r2, #0
 8000db8:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000dbc:	bf06      	itte	eq
 8000dbe:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000dc2:	3201      	addeq	r2, #1
 8000dc4:	3b01      	subne	r3, #1
 8000dc6:	e7b5      	b.n	8000d34 <__addsf3+0x58>
 8000dc8:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000dcc:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000dd0:	bf18      	it	ne
 8000dd2:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000dd6:	d021      	beq.n	8000e1c <__addsf3+0x140>
 8000dd8:	ea92 0f03 	teq	r2, r3
 8000ddc:	d004      	beq.n	8000de8 <__addsf3+0x10c>
 8000dde:	f092 0f00 	teq	r2, #0
 8000de2:	bf08      	it	eq
 8000de4:	4608      	moveq	r0, r1
 8000de6:	4770      	bx	lr
 8000de8:	ea90 0f01 	teq	r0, r1
 8000dec:	bf1c      	itt	ne
 8000dee:	2000      	movne	r0, #0
 8000df0:	4770      	bxne	lr
 8000df2:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000df6:	d104      	bne.n	8000e02 <__addsf3+0x126>
 8000df8:	0040      	lsls	r0, r0, #1
 8000dfa:	bf28      	it	cs
 8000dfc:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000e00:	4770      	bx	lr
 8000e02:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000e06:	bf3c      	itt	cc
 8000e08:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000e0c:	4770      	bxcc	lr
 8000e0e:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000e12:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000e16:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000e1a:	4770      	bx	lr
 8000e1c:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000e20:	bf16      	itet	ne
 8000e22:	4608      	movne	r0, r1
 8000e24:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000e28:	4601      	movne	r1, r0
 8000e2a:	0242      	lsls	r2, r0, #9
 8000e2c:	bf06      	itte	eq
 8000e2e:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000e32:	ea90 0f01 	teqeq	r0, r1
 8000e36:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000e3a:	4770      	bx	lr

08000e3c <__aeabi_ui2f>:
 8000e3c:	f04f 0300 	mov.w	r3, #0
 8000e40:	e004      	b.n	8000e4c <__aeabi_i2f+0x8>
 8000e42:	bf00      	nop

08000e44 <__aeabi_i2f>:
 8000e44:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000e48:	bf48      	it	mi
 8000e4a:	4240      	negmi	r0, r0
 8000e4c:	ea5f 0c00 	movs.w	ip, r0
 8000e50:	bf08      	it	eq
 8000e52:	4770      	bxeq	lr
 8000e54:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000e58:	4601      	mov	r1, r0
 8000e5a:	f04f 0000 	mov.w	r0, #0
 8000e5e:	e01c      	b.n	8000e9a <__aeabi_l2f+0x2a>

08000e60 <__aeabi_ul2f>:
 8000e60:	ea50 0201 	orrs.w	r2, r0, r1
 8000e64:	bf08      	it	eq
 8000e66:	4770      	bxeq	lr
 8000e68:	f04f 0300 	mov.w	r3, #0
 8000e6c:	e00a      	b.n	8000e84 <__aeabi_l2f+0x14>
 8000e6e:	bf00      	nop

08000e70 <__aeabi_l2f>:
 8000e70:	ea50 0201 	orrs.w	r2, r0, r1
 8000e74:	bf08      	it	eq
 8000e76:	4770      	bxeq	lr
 8000e78:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000e7c:	d502      	bpl.n	8000e84 <__aeabi_l2f+0x14>
 8000e7e:	4240      	negs	r0, r0
 8000e80:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000e84:	ea5f 0c01 	movs.w	ip, r1
 8000e88:	bf02      	ittt	eq
 8000e8a:	4684      	moveq	ip, r0
 8000e8c:	4601      	moveq	r1, r0
 8000e8e:	2000      	moveq	r0, #0
 8000e90:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000e94:	bf08      	it	eq
 8000e96:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000e9a:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000e9e:	fabc f28c 	clz	r2, ip
 8000ea2:	3a08      	subs	r2, #8
 8000ea4:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000ea8:	db10      	blt.n	8000ecc <__aeabi_l2f+0x5c>
 8000eaa:	fa01 fc02 	lsl.w	ip, r1, r2
 8000eae:	4463      	add	r3, ip
 8000eb0:	fa00 fc02 	lsl.w	ip, r0, r2
 8000eb4:	f1c2 0220 	rsb	r2, r2, #32
 8000eb8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000ebc:	fa20 f202 	lsr.w	r2, r0, r2
 8000ec0:	eb43 0002 	adc.w	r0, r3, r2
 8000ec4:	bf08      	it	eq
 8000ec6:	f020 0001 	biceq.w	r0, r0, #1
 8000eca:	4770      	bx	lr
 8000ecc:	f102 0220 	add.w	r2, r2, #32
 8000ed0:	fa01 fc02 	lsl.w	ip, r1, r2
 8000ed4:	f1c2 0220 	rsb	r2, r2, #32
 8000ed8:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000edc:	fa21 f202 	lsr.w	r2, r1, r2
 8000ee0:	eb43 0002 	adc.w	r0, r3, r2
 8000ee4:	bf08      	it	eq
 8000ee6:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000eea:	4770      	bx	lr

08000eec <__aeabi_f2iz>:
 8000eec:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000ef0:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 8000ef4:	d30f      	bcc.n	8000f16 <__aeabi_f2iz+0x2a>
 8000ef6:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 8000efa:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000efe:	d90d      	bls.n	8000f1c <__aeabi_f2iz+0x30>
 8000f00:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000f04:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000f08:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000f0c:	fa23 f002 	lsr.w	r0, r3, r2
 8000f10:	bf18      	it	ne
 8000f12:	4240      	negne	r0, r0
 8000f14:	4770      	bx	lr
 8000f16:	f04f 0000 	mov.w	r0, #0
 8000f1a:	4770      	bx	lr
 8000f1c:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 8000f20:	d101      	bne.n	8000f26 <__aeabi_f2iz+0x3a>
 8000f22:	0242      	lsls	r2, r0, #9
 8000f24:	d105      	bne.n	8000f32 <__aeabi_f2iz+0x46>
 8000f26:	f010 4000 	ands.w	r0, r0, #2147483648	@ 0x80000000
 8000f2a:	bf08      	it	eq
 8000f2c:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000f30:	4770      	bx	lr
 8000f32:	f04f 0000 	mov.w	r0, #0
 8000f36:	4770      	bx	lr

08000f38 <__aeabi_f2uiz>:
 8000f38:	0042      	lsls	r2, r0, #1
 8000f3a:	d20e      	bcs.n	8000f5a <__aeabi_f2uiz+0x22>
 8000f3c:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 8000f40:	d30b      	bcc.n	8000f5a <__aeabi_f2uiz+0x22>
 8000f42:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 8000f46:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000f4a:	d409      	bmi.n	8000f60 <__aeabi_f2uiz+0x28>
 8000f4c:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000f50:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000f54:	fa23 f002 	lsr.w	r0, r3, r2
 8000f58:	4770      	bx	lr
 8000f5a:	f04f 0000 	mov.w	r0, #0
 8000f5e:	4770      	bx	lr
 8000f60:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 8000f64:	d101      	bne.n	8000f6a <__aeabi_f2uiz+0x32>
 8000f66:	0242      	lsls	r2, r0, #9
 8000f68:	d102      	bne.n	8000f70 <__aeabi_f2uiz+0x38>
 8000f6a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000f6e:	4770      	bx	lr
 8000f70:	f04f 0000 	mov.w	r0, #0
 8000f74:	4770      	bx	lr
 8000f76:	bf00      	nop

08000f78 <__aeabi_uldivmod>:
 8000f78:	b953      	cbnz	r3, 8000f90 <__aeabi_uldivmod+0x18>
 8000f7a:	b94a      	cbnz	r2, 8000f90 <__aeabi_uldivmod+0x18>
 8000f7c:	2900      	cmp	r1, #0
 8000f7e:	bf08      	it	eq
 8000f80:	2800      	cmpeq	r0, #0
 8000f82:	bf1c      	itt	ne
 8000f84:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000f88:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000f8c:	f000 b99e 	b.w	80012cc <__aeabi_idiv0>
 8000f90:	f1ad 0c08 	sub.w	ip, sp, #8
 8000f94:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000f98:	f000 f83c 	bl	8001014 <__udivmoddi4>
 8000f9c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000fa0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000fa4:	b004      	add	sp, #16
 8000fa6:	4770      	bx	lr

08000fa8 <__aeabi_d2lz>:
 8000fa8:	b538      	push	{r3, r4, r5, lr}
 8000faa:	2200      	movs	r2, #0
 8000fac:	2300      	movs	r3, #0
 8000fae:	4604      	mov	r4, r0
 8000fb0:	460d      	mov	r5, r1
 8000fb2:	f7ff fdb7 	bl	8000b24 <__aeabi_dcmplt>
 8000fb6:	b928      	cbnz	r0, 8000fc4 <__aeabi_d2lz+0x1c>
 8000fb8:	4620      	mov	r0, r4
 8000fba:	4629      	mov	r1, r5
 8000fbc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000fc0:	f000 b80a 	b.w	8000fd8 <__aeabi_d2ulz>
 8000fc4:	4620      	mov	r0, r4
 8000fc6:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000fca:	f000 f805 	bl	8000fd8 <__aeabi_d2ulz>
 8000fce:	4240      	negs	r0, r0
 8000fd0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000fd4:	bd38      	pop	{r3, r4, r5, pc}
 8000fd6:	bf00      	nop

08000fd8 <__aeabi_d2ulz>:
 8000fd8:	b5d0      	push	{r4, r6, r7, lr}
 8000fda:	2200      	movs	r2, #0
 8000fdc:	4b0b      	ldr	r3, [pc, #44]	@ (800100c <__aeabi_d2ulz+0x34>)
 8000fde:	4606      	mov	r6, r0
 8000fe0:	460f      	mov	r7, r1
 8000fe2:	f7ff fb2d 	bl	8000640 <__aeabi_dmul>
 8000fe6:	f7ff fe03 	bl	8000bf0 <__aeabi_d2uiz>
 8000fea:	4604      	mov	r4, r0
 8000fec:	f7ff faae 	bl	800054c <__aeabi_ui2d>
 8000ff0:	2200      	movs	r2, #0
 8000ff2:	4b07      	ldr	r3, [pc, #28]	@ (8001010 <__aeabi_d2ulz+0x38>)
 8000ff4:	f7ff fb24 	bl	8000640 <__aeabi_dmul>
 8000ff8:	4602      	mov	r2, r0
 8000ffa:	460b      	mov	r3, r1
 8000ffc:	4630      	mov	r0, r6
 8000ffe:	4639      	mov	r1, r7
 8001000:	f7ff f966 	bl	80002d0 <__aeabi_dsub>
 8001004:	f7ff fdf4 	bl	8000bf0 <__aeabi_d2uiz>
 8001008:	4621      	mov	r1, r4
 800100a:	bdd0      	pop	{r4, r6, r7, pc}
 800100c:	3df00000 	.word	0x3df00000
 8001010:	41f00000 	.word	0x41f00000

08001014 <__udivmoddi4>:
 8001014:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001018:	9d08      	ldr	r5, [sp, #32]
 800101a:	460c      	mov	r4, r1
 800101c:	2b00      	cmp	r3, #0
 800101e:	d14e      	bne.n	80010be <__udivmoddi4+0xaa>
 8001020:	4694      	mov	ip, r2
 8001022:	458c      	cmp	ip, r1
 8001024:	4686      	mov	lr, r0
 8001026:	fab2 f282 	clz	r2, r2
 800102a:	d962      	bls.n	80010f2 <__udivmoddi4+0xde>
 800102c:	b14a      	cbz	r2, 8001042 <__udivmoddi4+0x2e>
 800102e:	f1c2 0320 	rsb	r3, r2, #32
 8001032:	4091      	lsls	r1, r2
 8001034:	fa20 f303 	lsr.w	r3, r0, r3
 8001038:	fa0c fc02 	lsl.w	ip, ip, r2
 800103c:	4319      	orrs	r1, r3
 800103e:	fa00 fe02 	lsl.w	lr, r0, r2
 8001042:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8001046:	fbb1 f4f7 	udiv	r4, r1, r7
 800104a:	fb07 1114 	mls	r1, r7, r4, r1
 800104e:	fa1f f68c 	uxth.w	r6, ip
 8001052:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8001056:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800105a:	fb04 f106 	mul.w	r1, r4, r6
 800105e:	4299      	cmp	r1, r3
 8001060:	d90a      	bls.n	8001078 <__udivmoddi4+0x64>
 8001062:	eb1c 0303 	adds.w	r3, ip, r3
 8001066:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 800106a:	f080 8110 	bcs.w	800128e <__udivmoddi4+0x27a>
 800106e:	4299      	cmp	r1, r3
 8001070:	f240 810d 	bls.w	800128e <__udivmoddi4+0x27a>
 8001074:	3c02      	subs	r4, #2
 8001076:	4463      	add	r3, ip
 8001078:	1a59      	subs	r1, r3, r1
 800107a:	fbb1 f0f7 	udiv	r0, r1, r7
 800107e:	fb07 1110 	mls	r1, r7, r0, r1
 8001082:	fb00 f606 	mul.w	r6, r0, r6
 8001086:	fa1f f38e 	uxth.w	r3, lr
 800108a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800108e:	429e      	cmp	r6, r3
 8001090:	d90a      	bls.n	80010a8 <__udivmoddi4+0x94>
 8001092:	eb1c 0303 	adds.w	r3, ip, r3
 8001096:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 800109a:	f080 80fa 	bcs.w	8001292 <__udivmoddi4+0x27e>
 800109e:	429e      	cmp	r6, r3
 80010a0:	f240 80f7 	bls.w	8001292 <__udivmoddi4+0x27e>
 80010a4:	4463      	add	r3, ip
 80010a6:	3802      	subs	r0, #2
 80010a8:	2100      	movs	r1, #0
 80010aa:	1b9b      	subs	r3, r3, r6
 80010ac:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80010b0:	b11d      	cbz	r5, 80010ba <__udivmoddi4+0xa6>
 80010b2:	40d3      	lsrs	r3, r2
 80010b4:	2200      	movs	r2, #0
 80010b6:	e9c5 3200 	strd	r3, r2, [r5]
 80010ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80010be:	428b      	cmp	r3, r1
 80010c0:	d905      	bls.n	80010ce <__udivmoddi4+0xba>
 80010c2:	b10d      	cbz	r5, 80010c8 <__udivmoddi4+0xb4>
 80010c4:	e9c5 0100 	strd	r0, r1, [r5]
 80010c8:	2100      	movs	r1, #0
 80010ca:	4608      	mov	r0, r1
 80010cc:	e7f5      	b.n	80010ba <__udivmoddi4+0xa6>
 80010ce:	fab3 f183 	clz	r1, r3
 80010d2:	2900      	cmp	r1, #0
 80010d4:	d146      	bne.n	8001164 <__udivmoddi4+0x150>
 80010d6:	42a3      	cmp	r3, r4
 80010d8:	d302      	bcc.n	80010e0 <__udivmoddi4+0xcc>
 80010da:	4290      	cmp	r0, r2
 80010dc:	f0c0 80ee 	bcc.w	80012bc <__udivmoddi4+0x2a8>
 80010e0:	1a86      	subs	r6, r0, r2
 80010e2:	eb64 0303 	sbc.w	r3, r4, r3
 80010e6:	2001      	movs	r0, #1
 80010e8:	2d00      	cmp	r5, #0
 80010ea:	d0e6      	beq.n	80010ba <__udivmoddi4+0xa6>
 80010ec:	e9c5 6300 	strd	r6, r3, [r5]
 80010f0:	e7e3      	b.n	80010ba <__udivmoddi4+0xa6>
 80010f2:	2a00      	cmp	r2, #0
 80010f4:	f040 808f 	bne.w	8001216 <__udivmoddi4+0x202>
 80010f8:	eba1 040c 	sub.w	r4, r1, ip
 80010fc:	2101      	movs	r1, #1
 80010fe:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8001102:	fa1f f78c 	uxth.w	r7, ip
 8001106:	fbb4 f6f8 	udiv	r6, r4, r8
 800110a:	fb08 4416 	mls	r4, r8, r6, r4
 800110e:	fb07 f006 	mul.w	r0, r7, r6
 8001112:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8001116:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800111a:	4298      	cmp	r0, r3
 800111c:	d908      	bls.n	8001130 <__udivmoddi4+0x11c>
 800111e:	eb1c 0303 	adds.w	r3, ip, r3
 8001122:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8001126:	d202      	bcs.n	800112e <__udivmoddi4+0x11a>
 8001128:	4298      	cmp	r0, r3
 800112a:	f200 80cb 	bhi.w	80012c4 <__udivmoddi4+0x2b0>
 800112e:	4626      	mov	r6, r4
 8001130:	1a1c      	subs	r4, r3, r0
 8001132:	fbb4 f0f8 	udiv	r0, r4, r8
 8001136:	fb08 4410 	mls	r4, r8, r0, r4
 800113a:	fb00 f707 	mul.w	r7, r0, r7
 800113e:	fa1f f38e 	uxth.w	r3, lr
 8001142:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8001146:	429f      	cmp	r7, r3
 8001148:	d908      	bls.n	800115c <__udivmoddi4+0x148>
 800114a:	eb1c 0303 	adds.w	r3, ip, r3
 800114e:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 8001152:	d202      	bcs.n	800115a <__udivmoddi4+0x146>
 8001154:	429f      	cmp	r7, r3
 8001156:	f200 80ae 	bhi.w	80012b6 <__udivmoddi4+0x2a2>
 800115a:	4620      	mov	r0, r4
 800115c:	1bdb      	subs	r3, r3, r7
 800115e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8001162:	e7a5      	b.n	80010b0 <__udivmoddi4+0x9c>
 8001164:	f1c1 0720 	rsb	r7, r1, #32
 8001168:	408b      	lsls	r3, r1
 800116a:	fa22 fc07 	lsr.w	ip, r2, r7
 800116e:	ea4c 0c03 	orr.w	ip, ip, r3
 8001172:	fa24 f607 	lsr.w	r6, r4, r7
 8001176:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800117a:	fbb6 f8f9 	udiv	r8, r6, r9
 800117e:	fa1f fe8c 	uxth.w	lr, ip
 8001182:	fb09 6618 	mls	r6, r9, r8, r6
 8001186:	fa20 f307 	lsr.w	r3, r0, r7
 800118a:	408c      	lsls	r4, r1
 800118c:	fa00 fa01 	lsl.w	sl, r0, r1
 8001190:	fb08 f00e 	mul.w	r0, r8, lr
 8001194:	431c      	orrs	r4, r3
 8001196:	0c23      	lsrs	r3, r4, #16
 8001198:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800119c:	4298      	cmp	r0, r3
 800119e:	fa02 f201 	lsl.w	r2, r2, r1
 80011a2:	d90a      	bls.n	80011ba <__udivmoddi4+0x1a6>
 80011a4:	eb1c 0303 	adds.w	r3, ip, r3
 80011a8:	f108 36ff 	add.w	r6, r8, #4294967295	@ 0xffffffff
 80011ac:	f080 8081 	bcs.w	80012b2 <__udivmoddi4+0x29e>
 80011b0:	4298      	cmp	r0, r3
 80011b2:	d97e      	bls.n	80012b2 <__udivmoddi4+0x29e>
 80011b4:	f1a8 0802 	sub.w	r8, r8, #2
 80011b8:	4463      	add	r3, ip
 80011ba:	1a1e      	subs	r6, r3, r0
 80011bc:	fbb6 f3f9 	udiv	r3, r6, r9
 80011c0:	fb09 6613 	mls	r6, r9, r3, r6
 80011c4:	fb03 fe0e 	mul.w	lr, r3, lr
 80011c8:	b2a4      	uxth	r4, r4
 80011ca:	ea44 4406 	orr.w	r4, r4, r6, lsl #16
 80011ce:	45a6      	cmp	lr, r4
 80011d0:	d908      	bls.n	80011e4 <__udivmoddi4+0x1d0>
 80011d2:	eb1c 0404 	adds.w	r4, ip, r4
 80011d6:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 80011da:	d266      	bcs.n	80012aa <__udivmoddi4+0x296>
 80011dc:	45a6      	cmp	lr, r4
 80011de:	d964      	bls.n	80012aa <__udivmoddi4+0x296>
 80011e0:	3b02      	subs	r3, #2
 80011e2:	4464      	add	r4, ip
 80011e4:	ea43 4008 	orr.w	r0, r3, r8, lsl #16
 80011e8:	fba0 8302 	umull	r8, r3, r0, r2
 80011ec:	eba4 040e 	sub.w	r4, r4, lr
 80011f0:	429c      	cmp	r4, r3
 80011f2:	46c6      	mov	lr, r8
 80011f4:	461e      	mov	r6, r3
 80011f6:	d350      	bcc.n	800129a <__udivmoddi4+0x286>
 80011f8:	d04d      	beq.n	8001296 <__udivmoddi4+0x282>
 80011fa:	b155      	cbz	r5, 8001212 <__udivmoddi4+0x1fe>
 80011fc:	ebba 030e 	subs.w	r3, sl, lr
 8001200:	eb64 0406 	sbc.w	r4, r4, r6
 8001204:	fa04 f707 	lsl.w	r7, r4, r7
 8001208:	40cb      	lsrs	r3, r1
 800120a:	431f      	orrs	r7, r3
 800120c:	40cc      	lsrs	r4, r1
 800120e:	e9c5 7400 	strd	r7, r4, [r5]
 8001212:	2100      	movs	r1, #0
 8001214:	e751      	b.n	80010ba <__udivmoddi4+0xa6>
 8001216:	fa0c fc02 	lsl.w	ip, ip, r2
 800121a:	f1c2 0320 	rsb	r3, r2, #32
 800121e:	40d9      	lsrs	r1, r3
 8001220:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8001224:	fa20 f303 	lsr.w	r3, r0, r3
 8001228:	fa00 fe02 	lsl.w	lr, r0, r2
 800122c:	fbb1 f0f8 	udiv	r0, r1, r8
 8001230:	fb08 1110 	mls	r1, r8, r0, r1
 8001234:	4094      	lsls	r4, r2
 8001236:	431c      	orrs	r4, r3
 8001238:	fa1f f78c 	uxth.w	r7, ip
 800123c:	0c23      	lsrs	r3, r4, #16
 800123e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8001242:	fb00 f107 	mul.w	r1, r0, r7
 8001246:	4299      	cmp	r1, r3
 8001248:	d908      	bls.n	800125c <__udivmoddi4+0x248>
 800124a:	eb1c 0303 	adds.w	r3, ip, r3
 800124e:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8001252:	d22c      	bcs.n	80012ae <__udivmoddi4+0x29a>
 8001254:	4299      	cmp	r1, r3
 8001256:	d92a      	bls.n	80012ae <__udivmoddi4+0x29a>
 8001258:	3802      	subs	r0, #2
 800125a:	4463      	add	r3, ip
 800125c:	1a5b      	subs	r3, r3, r1
 800125e:	fbb3 f1f8 	udiv	r1, r3, r8
 8001262:	fb08 3311 	mls	r3, r8, r1, r3
 8001266:	b2a4      	uxth	r4, r4
 8001268:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800126c:	fb01 f307 	mul.w	r3, r1, r7
 8001270:	42a3      	cmp	r3, r4
 8001272:	d908      	bls.n	8001286 <__udivmoddi4+0x272>
 8001274:	eb1c 0404 	adds.w	r4, ip, r4
 8001278:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 800127c:	d213      	bcs.n	80012a6 <__udivmoddi4+0x292>
 800127e:	42a3      	cmp	r3, r4
 8001280:	d911      	bls.n	80012a6 <__udivmoddi4+0x292>
 8001282:	3902      	subs	r1, #2
 8001284:	4464      	add	r4, ip
 8001286:	1ae4      	subs	r4, r4, r3
 8001288:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800128c:	e73b      	b.n	8001106 <__udivmoddi4+0xf2>
 800128e:	4604      	mov	r4, r0
 8001290:	e6f2      	b.n	8001078 <__udivmoddi4+0x64>
 8001292:	4608      	mov	r0, r1
 8001294:	e708      	b.n	80010a8 <__udivmoddi4+0x94>
 8001296:	45c2      	cmp	sl, r8
 8001298:	d2af      	bcs.n	80011fa <__udivmoddi4+0x1e6>
 800129a:	ebb8 0e02 	subs.w	lr, r8, r2
 800129e:	eb63 060c 	sbc.w	r6, r3, ip
 80012a2:	3801      	subs	r0, #1
 80012a4:	e7a9      	b.n	80011fa <__udivmoddi4+0x1e6>
 80012a6:	4631      	mov	r1, r6
 80012a8:	e7ed      	b.n	8001286 <__udivmoddi4+0x272>
 80012aa:	4603      	mov	r3, r0
 80012ac:	e79a      	b.n	80011e4 <__udivmoddi4+0x1d0>
 80012ae:	4630      	mov	r0, r6
 80012b0:	e7d4      	b.n	800125c <__udivmoddi4+0x248>
 80012b2:	46b0      	mov	r8, r6
 80012b4:	e781      	b.n	80011ba <__udivmoddi4+0x1a6>
 80012b6:	4463      	add	r3, ip
 80012b8:	3802      	subs	r0, #2
 80012ba:	e74f      	b.n	800115c <__udivmoddi4+0x148>
 80012bc:	4606      	mov	r6, r0
 80012be:	4623      	mov	r3, r4
 80012c0:	4608      	mov	r0, r1
 80012c2:	e711      	b.n	80010e8 <__udivmoddi4+0xd4>
 80012c4:	3e02      	subs	r6, #2
 80012c6:	4463      	add	r3, ip
 80012c8:	e732      	b.n	8001130 <__udivmoddi4+0x11c>
 80012ca:	bf00      	nop

080012cc <__aeabi_idiv0>:
 80012cc:	4770      	bx	lr
 80012ce:	bf00      	nop

080012d0 <SystemClock_Config>:
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80012d0:	2300      	movs	r3, #0
{
 80012d2:	b5d0      	push	{r4, r6, r7, lr}
 80012d4:	b094      	sub	sp, #80	@ 0x50
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80012d6:	2601      	movs	r6, #1
 80012d8:	f44f 3780 	mov.w	r7, #65536	@ 0x10000
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80012dc:	2101      	movs	r1, #1
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80012de:	2402      	movs	r4, #2
 80012e0:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80012e4:	e9cd 330f 	strd	r3, r3, [sp, #60]	@ 0x3c
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80012e8:	e9cd 3306 	strd	r3, r3, [sp, #24]
 80012ec:	e9cd 3308 	strd	r3, r3, [sp, #32]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80012f0:	e9cd 3301 	strd	r3, r3, [sp, #4]
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80012f4:	930c      	str	r3, [sp, #48]	@ 0x30
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80012f6:	9305      	str	r3, [sp, #20]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80012f8:	9300      	str	r3, [sp, #0]
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80012fa:	930d      	str	r3, [sp, #52]	@ 0x34
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80012fc:	9303      	str	r3, [sp, #12]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80012fe:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001302:	a80a      	add	r0, sp, #40	@ 0x28
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001304:	e9cd 670a 	strd	r6, r7, [sp, #40]	@ 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001308:	910e      	str	r1, [sp, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800130a:	9411      	str	r4, [sp, #68]	@ 0x44
 800130c:	9212      	str	r2, [sp, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800130e:	9313      	str	r3, [sp, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001310:	f002 f9fa 	bl	8003708 <HAL_RCC_OscConfig>
 8001314:	b108      	cbz	r0, 800131a <SystemClock_Config+0x4a>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001316:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001318:	e7fe      	b.n	8001318 <SystemClock_Config+0x48>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800131a:	4603      	mov	r3, r0
 800131c:	220f      	movs	r2, #15
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800131e:	9307      	str	r3, [sp, #28]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001320:	9309      	str	r3, [sp, #36]	@ 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001322:	f44f 6380 	mov.w	r3, #1024	@ 0x400
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001326:	4621      	mov	r1, r4
 8001328:	a805      	add	r0, sp, #20
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800132a:	9406      	str	r4, [sp, #24]
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800132c:	9205      	str	r2, [sp, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800132e:	9308      	str	r3, [sp, #32]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001330:	f002 fbd8 	bl	8003ae4 <HAL_RCC_ClockConfig>
 8001334:	b108      	cbz	r0, 800133a <SystemClock_Config+0x6a>
 8001336:	b672      	cpsid	i
  while (1)
 8001338:	e7fe      	b.n	8001338 <SystemClock_Config+0x68>
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC|RCC_PERIPHCLK_USB;
 800133a:	2112      	movs	r1, #18
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 800133c:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8001340:	2300      	movs	r3, #0
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001342:	4668      	mov	r0, sp
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8001344:	e9cd 2302 	strd	r2, r3, [sp, #8]
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC|RCC_PERIPHCLK_USB;
 8001348:	9100      	str	r1, [sp, #0]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800134a:	f002 fc8d 	bl	8003c68 <HAL_RCCEx_PeriphCLKConfig>
 800134e:	b108      	cbz	r0, 8001354 <SystemClock_Config+0x84>
 8001350:	b672      	cpsid	i
  while (1)
 8001352:	e7fe      	b.n	8001352 <SystemClock_Config+0x82>
}
 8001354:	b014      	add	sp, #80	@ 0x50
 8001356:	bdd0      	pop	{r4, r6, r7, pc}

08001358 <main>:
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001358:	2400      	movs	r4, #0
{
 800135a:	b580      	push	{r7, lr}
 800135c:	b096      	sub	sp, #88	@ 0x58
  HAL_Init();
 800135e:	f000 fd9b 	bl	8001e98 <HAL_Init>
  SystemClock_Config();
 8001362:	f7ff ffb5 	bl	80012d0 <SystemClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001366:	e9cd 440e 	strd	r4, r4, [sp, #56]	@ 0x38
 800136a:	e9cd 4410 	strd	r4, r4, [sp, #64]	@ 0x40
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800136e:	4ba3      	ldr	r3, [pc, #652]	@ (80015fc <main+0x2a4>)
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_RESET);
 8001370:	2140      	movs	r1, #64	@ 0x40
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001372:	699a      	ldr	r2, [r3, #24]
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_RESET);
 8001374:	48a2      	ldr	r0, [pc, #648]	@ (8001600 <main+0x2a8>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001376:	f042 0210 	orr.w	r2, r2, #16
 800137a:	619a      	str	r2, [r3, #24]
 800137c:	699a      	ldr	r2, [r3, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800137e:	2601      	movs	r6, #1
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001380:	f002 0210 	and.w	r2, r2, #16
 8001384:	9201      	str	r2, [sp, #4]
 8001386:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001388:	699a      	ldr	r2, [r3, #24]
  htim1.Instance = TIM1;
 800138a:	4d9e      	ldr	r5, [pc, #632]	@ (8001604 <main+0x2ac>)
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800138c:	f042 0220 	orr.w	r2, r2, #32
 8001390:	619a      	str	r2, [r3, #24]
 8001392:	699a      	ldr	r2, [r3, #24]
 8001394:	f002 0220 	and.w	r2, r2, #32
 8001398:	9202      	str	r2, [sp, #8]
 800139a:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800139c:	699a      	ldr	r2, [r3, #24]
 800139e:	f042 0204 	orr.w	r2, r2, #4
 80013a2:	619a      	str	r2, [r3, #24]
 80013a4:	699b      	ldr	r3, [r3, #24]
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_RESET);
 80013a6:	4622      	mov	r2, r4
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80013a8:	f003 0304 	and.w	r3, r3, #4
 80013ac:	9303      	str	r3, [sp, #12]
 80013ae:	9b03      	ldr	r3, [sp, #12]
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_RESET);
 80013b0:	f001 f9ac 	bl	800270c <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 80013b4:	2340      	movs	r3, #64	@ 0x40
 80013b6:	930e      	str	r3, [sp, #56]	@ 0x38
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013b8:	2302      	movs	r3, #2
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013ba:	4891      	ldr	r0, [pc, #580]	@ (8001600 <main+0x2a8>)
 80013bc:	a90e      	add	r1, sp, #56	@ 0x38
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013be:	9311      	str	r3, [sp, #68]	@ 0x44
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013c0:	e9cd 640f 	strd	r6, r4, [sp, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013c4:	f001 f886 	bl	80024d4 <HAL_GPIO_Init>
  MX_USB_DEVICE_Init();
 80013c8:	f004 fd10 	bl	8005dec <MX_USB_DEVICE_Init>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80013cc:	2220      	movs	r2, #32
 80013ce:	4621      	mov	r1, r4
 80013d0:	a80e      	add	r0, sp, #56	@ 0x38
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80013d2:	e9cd 4404 	strd	r4, r4, [sp, #16]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80013d6:	e9cd 4406 	strd	r4, r4, [sp, #24]
 80013da:	e9cd 4408 	strd	r4, r4, [sp, #32]
 80013de:	e9cd 440a 	strd	r4, r4, [sp, #40]	@ 0x28
 80013e2:	940c      	str	r4, [sp, #48]	@ 0x30
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80013e4:	f006 fd05 	bl	8007df2 <memset>
  htim1.Init.Period = 1400;
 80013e8:	f44f 63af 	mov.w	r3, #1400	@ 0x578
 80013ec:	60eb      	str	r3, [r5, #12]
  htim1.Init.RepetitionCounter = 0;
 80013ee:	2380      	movs	r3, #128	@ 0x80
 80013f0:	61ab      	str	r3, [r5, #24]
  htim1.Instance = TIM1;
 80013f2:	4b85      	ldr	r3, [pc, #532]	@ (8001608 <main+0x2b0>)
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80013f4:	4628      	mov	r0, r5
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80013f6:	e9c5 4401 	strd	r4, r4, [r5, #4]
  htim1.Init.RepetitionCounter = 0;
 80013fa:	e9c5 4404 	strd	r4, r4, [r5, #16]
  htim1.Instance = TIM1;
 80013fe:	602b      	str	r3, [r5, #0]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001400:	f002 fd66 	bl	8003ed0 <HAL_TIM_PWM_Init>
 8001404:	b108      	cbz	r0, 800140a <main+0xb2>
 8001406:	b672      	cpsid	i
  while (1)
 8001408:	e7fe      	b.n	8001408 <main+0xb0>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800140a:	f04f 0800 	mov.w	r8, #0
 800140e:	f04f 0900 	mov.w	r9, #0
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001412:	4628      	mov	r0, r5
 8001414:	a904      	add	r1, sp, #16
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001416:	e9cd 8904 	strd	r8, r9, [sp, #16]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800141a:	f003 f8d5 	bl	80045c8 <HAL_TIMEx_MasterConfigSynchronization>
 800141e:	b108      	cbz	r0, 8001424 <main+0xcc>
 8001420:	b672      	cpsid	i
  while (1)
 8001422:	e7fe      	b.n	8001422 <main+0xca>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001424:	2360      	movs	r3, #96	@ 0x60
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001426:	4602      	mov	r2, r0
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001428:	e9cd 0007 	strd	r0, r0, [sp, #28]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800142c:	9009      	str	r0, [sp, #36]	@ 0x24
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800142e:	900c      	str	r0, [sp, #48]	@ 0x30
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001430:	a906      	add	r1, sp, #24
 8001432:	4628      	mov	r0, r5
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001434:	e9cd 890a 	strd	r8, r9, [sp, #40]	@ 0x28
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001438:	9306      	str	r3, [sp, #24]
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800143a:	f002 fe83 	bl	8004144 <HAL_TIM_PWM_ConfigChannel>
 800143e:	b108      	cbz	r0, 8001444 <main+0xec>
 8001440:	b672      	cpsid	i
  while (1)
 8001442:	e7fe      	b.n	8001442 <main+0xea>
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001444:	2200      	movs	r2, #0
 8001446:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800144a:	e9cd 000e 	strd	r0, r0, [sp, #56]	@ 0x38
  sBreakDeadTimeConfig.DeadTime = 0;
 800144e:	e9cd 0010 	strd	r0, r0, [sp, #64]	@ 0x40
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001452:	9015      	str	r0, [sp, #84]	@ 0x54
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001454:	a90e      	add	r1, sp, #56	@ 0x38
 8001456:	4628      	mov	r0, r5
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001458:	e9cd 2312 	strd	r2, r3, [sp, #72]	@ 0x48
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800145c:	f003 f8e6 	bl	800462c <HAL_TIMEx_ConfigBreakDeadTime>
 8001460:	4607      	mov	r7, r0
 8001462:	b108      	cbz	r0, 8001468 <main+0x110>
 8001464:	b672      	cpsid	i
  while (1)
 8001466:	e7fe      	b.n	8001466 <main+0x10e>
  HAL_TIM_MspPostInit(&htim1);
 8001468:	4628      	mov	r0, r5
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800146a:	f44f 2560 	mov.w	r5, #917504	@ 0xe0000
  hadc1.Instance = ADC1;
 800146e:	4c67      	ldr	r4, [pc, #412]	@ (800160c <main+0x2b4>)
  HAL_TIM_MspPostInit(&htim1);
 8001470:	f000 fbf0 	bl	8001c54 <HAL_TIM_MspPostInit>
  hadc1.Instance = ADC1;
 8001474:	4b66      	ldr	r3, [pc, #408]	@ (8001610 <main+0x2b8>)
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001476:	4620      	mov	r0, r4
  ADC_ChannelConfTypeDef sConfig = {0};
 8001478:	e9cd 770e 	strd	r7, r7, [sp, #56]	@ 0x38
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800147c:	e9c4 7701 	strd	r7, r7, [r4, #4]
  ADC_ChannelConfTypeDef sConfig = {0};
 8001480:	9710      	str	r7, [sp, #64]	@ 0x40
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001482:	7326      	strb	r6, [r4, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001484:	7527      	strb	r7, [r4, #20]
  hadc1.Init.NbrOfConversion = 1;
 8001486:	6126      	str	r6, [r4, #16]
  hadc1.Instance = ADC1;
 8001488:	6023      	str	r3, [r4, #0]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800148a:	61e5      	str	r5, [r4, #28]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800148c:	f000 fd28 	bl	8001ee0 <HAL_ADC_Init>
 8001490:	b108      	cbz	r0, 8001496 <main+0x13e>
 8001492:	b672      	cpsid	i
  while (1)
 8001494:	e7fe      	b.n	8001494 <main+0x13c>
  sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 8001496:	2307      	movs	r3, #7
  sConfig.Channel = ADC_CHANNEL_0;
 8001498:	2200      	movs	r2, #0
  sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 800149a:	9310      	str	r3, [sp, #64]	@ 0x40
  sConfig.Channel = ADC_CHANNEL_0;
 800149c:	2301      	movs	r3, #1
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800149e:	4620      	mov	r0, r4
 80014a0:	a90e      	add	r1, sp, #56	@ 0x38
  sConfig.Channel = ADC_CHANNEL_0;
 80014a2:	e9cd 230e 	strd	r2, r3, [sp, #56]	@ 0x38
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80014a6:	f000 fe5b 	bl	8002160 <HAL_ADC_ConfigChannel>
 80014aa:	b108      	cbz	r0, 80014b0 <main+0x158>
 80014ac:	b672      	cpsid	i
  while (1)
 80014ae:	e7fe      	b.n	80014ae <main+0x156>
  hadc2.Instance = ADC2;
 80014b0:	4c58      	ldr	r4, [pc, #352]	@ (8001614 <main+0x2bc>)
 80014b2:	4b59      	ldr	r3, [pc, #356]	@ (8001618 <main+0x2c0>)
  ADC_ChannelConfTypeDef sConfig = {0};
 80014b4:	e9cd 000e 	strd	r0, r0, [sp, #56]	@ 0x38
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80014b8:	e9c4 0001 	strd	r0, r0, [r4, #4]
  ADC_ChannelConfTypeDef sConfig = {0};
 80014bc:	9010      	str	r0, [sp, #64]	@ 0x40
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 80014be:	7520      	strb	r0, [r4, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 80014c0:	4620      	mov	r0, r4
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80014c2:	61e5      	str	r5, [r4, #28]
  hadc2.Init.ContinuousConvMode = ENABLE;
 80014c4:	7326      	strb	r6, [r4, #12]
  hadc2.Init.NbrOfConversion = 1;
 80014c6:	6126      	str	r6, [r4, #16]
  hadc2.Instance = ADC2;
 80014c8:	6023      	str	r3, [r4, #0]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 80014ca:	f000 fd09 	bl	8001ee0 <HAL_ADC_Init>
 80014ce:	b108      	cbz	r0, 80014d4 <main+0x17c>
 80014d0:	b672      	cpsid	i
  while (1)
 80014d2:	e7fe      	b.n	80014d2 <main+0x17a>
  sConfig.Channel = ADC_CHANNEL_1;
 80014d4:	2301      	movs	r3, #1
 80014d6:	2201      	movs	r2, #1
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80014d8:	9010      	str	r0, [sp, #64]	@ 0x40
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80014da:	a90e      	add	r1, sp, #56	@ 0x38
 80014dc:	4620      	mov	r0, r4
  sConfig.Channel = ADC_CHANNEL_1;
 80014de:	e9cd 230e 	strd	r2, r3, [sp, #56]	@ 0x38
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80014e2:	f000 fe3d 	bl	8002160 <HAL_ADC_ConfigChannel>
 80014e6:	4603      	mov	r3, r0
 80014e8:	b108      	cbz	r0, 80014ee <main+0x196>
 80014ea:	b672      	cpsid	i
  while (1)
 80014ec:	e7fe      	b.n	80014ec <main+0x194>
  htim2.Init.Prescaler = 100;
 80014ee:	2164      	movs	r1, #100	@ 0x64
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80014f0:	e9cd 0006 	strd	r0, r0, [sp, #24]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80014f4:	e9cd 000e 	strd	r0, r0, [sp, #56]	@ 0x38
 80014f8:	e9cd 0010 	strd	r0, r0, [sp, #64]	@ 0x40
 80014fc:	e9cd 0012 	strd	r0, r0, [sp, #72]	@ 0x48
 8001500:	9014      	str	r0, [sp, #80]	@ 0x50
  htim2.Instance = TIM2;
 8001502:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
  htim2.Init.Period = 600;
 8001506:	f44f 7216 	mov.w	r2, #600	@ 0x258
  htim2.Instance = TIM2;
 800150a:	4c44      	ldr	r4, [pc, #272]	@ (800161c <main+0x2c4>)
  htim2.Init.Prescaler = 100;
 800150c:	e9c4 0100 	strd	r0, r1, [r4]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001510:	4620      	mov	r0, r4
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001512:	60a3      	str	r3, [r4, #8]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001514:	6123      	str	r3, [r4, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001516:	61a3      	str	r3, [r4, #24]
  htim2.Init.Period = 600;
 8001518:	60e2      	str	r2, [r4, #12]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800151a:	f002 fcd9 	bl	8003ed0 <HAL_TIM_PWM_Init>
 800151e:	b108      	cbz	r0, 8001524 <main+0x1cc>
 8001520:	b672      	cpsid	i
  while (1)
 8001522:	e7fe      	b.n	8001522 <main+0x1ca>
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001524:	4620      	mov	r0, r4
 8001526:	a906      	add	r1, sp, #24
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001528:	e9cd 8906 	strd	r8, r9, [sp, #24]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800152c:	f003 f84c 	bl	80045c8 <HAL_TIMEx_MasterConfigSynchronization>
 8001530:	b108      	cbz	r0, 8001536 <main+0x1de>
 8001532:	b672      	cpsid	i
  while (1)
 8001534:	e7fe      	b.n	8001534 <main+0x1dc>
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001536:	2300      	movs	r3, #0
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001538:	2460      	movs	r4, #96	@ 0x60
 800153a:	2500      	movs	r5, #0
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800153c:	220c      	movs	r2, #12
 800153e:	4837      	ldr	r0, [pc, #220]	@ (800161c <main+0x2c4>)
 8001540:	a90e      	add	r1, sp, #56	@ 0x38
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001542:	e9cd 450e 	strd	r4, r5, [sp, #56]	@ 0x38
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001546:	9310      	str	r3, [sp, #64]	@ 0x40
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001548:	9312      	str	r3, [sp, #72]	@ 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800154a:	f002 fdfb 	bl	8004144 <HAL_TIM_PWM_ConfigChannel>
 800154e:	4604      	mov	r4, r0
 8001550:	b108      	cbz	r0, 8001556 <main+0x1fe>
 8001552:	b672      	cpsid	i
  while (1)
 8001554:	e7fe      	b.n	8001554 <main+0x1fc>
  HAL_TIM_MspPostInit(&htim2);
 8001556:	4831      	ldr	r0, [pc, #196]	@ (800161c <main+0x2c4>)
 8001558:	f000 fb7c 	bl	8001c54 <HAL_TIM_MspPostInit>
  htim3.Instance = TIM3;
 800155c:	4d30      	ldr	r5, [pc, #192]	@ (8001620 <main+0x2c8>)
 800155e:	4b31      	ldr	r3, [pc, #196]	@ (8001624 <main+0x2cc>)
  htim3.Init.Period = 5000;
 8001560:	f241 3288 	movw	r2, #5000	@ 0x1388
  htim3.Instance = TIM3;
 8001564:	602b      	str	r3, [r5, #0]
  htim3.Init.Prescaler = 6399;
 8001566:	f641 03ff 	movw	r3, #6399	@ 0x18ff
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800156a:	4628      	mov	r0, r5
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800156c:	e9cd 440e 	strd	r4, r4, [sp, #56]	@ 0x38
 8001570:	e9cd 4410 	strd	r4, r4, [sp, #64]	@ 0x40
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001574:	e9cd 4406 	strd	r4, r4, [sp, #24]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001578:	60ac      	str	r4, [r5, #8]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800157a:	612c      	str	r4, [r5, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800157c:	61ac      	str	r4, [r5, #24]
  htim3.Init.Period = 5000;
 800157e:	60ea      	str	r2, [r5, #12]
  htim3.Init.Prescaler = 6399;
 8001580:	606b      	str	r3, [r5, #4]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001582:	f002 fbf1 	bl	8003d68 <HAL_TIM_Base_Init>
 8001586:	b108      	cbz	r0, 800158c <main+0x234>
 8001588:	b672      	cpsid	i
  while (1)
 800158a:	e7fe      	b.n	800158a <main+0x232>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800158c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001590:	4628      	mov	r0, r5
 8001592:	a90e      	add	r1, sp, #56	@ 0x38
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001594:	930e      	str	r3, [sp, #56]	@ 0x38
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001596:	f002 fec7 	bl	8004328 <HAL_TIM_ConfigClockSource>
 800159a:	b108      	cbz	r0, 80015a0 <main+0x248>
 800159c:	b672      	cpsid	i
  while (1)
 800159e:	e7fe      	b.n	800159e <main+0x246>
  if (HAL_TIM_OnePulse_Init(&htim3, TIM_OPMODE_SINGLE) != HAL_OK)
 80015a0:	2108      	movs	r1, #8
 80015a2:	4628      	mov	r0, r5
 80015a4:	f002 fd5e 	bl	8004064 <HAL_TIM_OnePulse_Init>
 80015a8:	b108      	cbz	r0, 80015ae <main+0x256>
 80015aa:	b672      	cpsid	i
  while (1)
 80015ac:	e7fe      	b.n	80015ac <main+0x254>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80015ae:	2200      	movs	r2, #0
 80015b0:	2300      	movs	r3, #0
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80015b2:	a906      	add	r1, sp, #24
 80015b4:	4628      	mov	r0, r5
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80015b6:	e9cd 2306 	strd	r2, r3, [sp, #24]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80015ba:	f003 f805 	bl	80045c8 <HAL_TIMEx_MasterConfigSynchronization>
 80015be:	4601      	mov	r1, r0
 80015c0:	b108      	cbz	r0, 80015c6 <main+0x26e>
 80015c2:	b672      	cpsid	i
  while (1)
 80015c4:	e7fe      	b.n	80015c4 <main+0x26c>
  TIM2->CCR4 = 300;
 80015c6:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80015ca:	f44f 7296 	mov.w	r2, #300	@ 0x12c
  TIM1->CCR1 = 1400;
 80015ce:	f44f 64af 	mov.w	r4, #1400	@ 0x578
 80015d2:	480d      	ldr	r0, [pc, #52]	@ (8001608 <main+0x2b0>)
 80015d4:	6344      	str	r4, [r0, #52]	@ 0x34
  TIM2->CCR4 = 300;
 80015d6:	641a      	str	r2, [r3, #64]	@ 0x40
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 80015d8:	480a      	ldr	r0, [pc, #40]	@ (8001604 <main+0x2ac>)
 80015da:	f002 fce9 	bl	8003fb0 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4);
 80015de:	210c      	movs	r1, #12
 80015e0:	480e      	ldr	r0, [pc, #56]	@ (800161c <main+0x2c4>)
 80015e2:	f002 fce5 	bl	8003fb0 <HAL_TIM_PWM_Start>
  HAL_TIM_Base_Start_IT(&htim3);
 80015e6:	4628      	mov	r0, r5
 80015e8:	f002 fc2e 	bl	8003e48 <HAL_TIM_Base_Start_IT>
  HAL_ADC_Start_IT(&hadc1);
 80015ec:	4807      	ldr	r0, [pc, #28]	@ (800160c <main+0x2b4>)
 80015ee:	f000 fe91 	bl	8002314 <HAL_ADC_Start_IT>
  HAL_ADC_Start_IT(&hadc2);
 80015f2:	4808      	ldr	r0, [pc, #32]	@ (8001614 <main+0x2bc>)
 80015f4:	f000 fe8e 	bl	8002314 <HAL_ADC_Start_IT>
  while (1)
 80015f8:	e7fe      	b.n	80015f8 <main+0x2a0>
 80015fa:	bf00      	nop
 80015fc:	40021000 	.word	0x40021000
 8001600:	40010800 	.word	0x40010800
 8001604:	20000598 	.word	0x20000598
 8001608:	40012c00 	.word	0x40012c00
 800160c:	20000610 	.word	0x20000610
 8001610:	40012400 	.word	0x40012400
 8001614:	200005e0 	.word	0x200005e0
 8001618:	40012800 	.word	0x40012800
 800161c:	2000054c 	.word	0x2000054c
 8001620:	20000504 	.word	0x20000504
 8001624:	40000400 	.word	0x40000400

08001628 <parse_gcode>:
Gcode parse_gcode(char* buff, int len){
 8001628:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    if(buff[0] >= 'A' && buff[0] <= 'Z'){
 800162c:	780f      	ldrb	r7, [r1, #0]
Gcode parse_gcode(char* buff, int len){
 800162e:	4682      	mov	sl, r0
    if(buff[0] >= 'A' && buff[0] <= 'Z'){
 8001630:	f1a7 0341 	sub.w	r3, r7, #65	@ 0x41
 8001634:	2b19      	cmp	r3, #25
Gcode parse_gcode(char* buff, int len){
 8001636:	b089      	sub	sp, #36	@ 0x24
    if(buff[0] >= 'A' && buff[0] <= 'Z'){
 8001638:	d906      	bls.n	8001648 <parse_gcode+0x20>
    }else if(buff[0] >= 'a' && buff[0] <= 'z'){
 800163a:	f1a7 0361 	sub.w	r3, r7, #97	@ 0x61
 800163e:	2b19      	cmp	r3, #25
 8001640:	d86b      	bhi.n	800171a <parse_gcode+0xf2>
        gcode.letter = buff[0] - ('a'-'A');
 8001642:	f1a7 0320 	sub.w	r3, r7, #32
 8001646:	b2df      	uxtb	r7, r3
    index++;
 8001648:	1c4b      	adds	r3, r1, #1
    while(index < buff+len){
 800164a:	4411      	add	r1, r2
 800164c:	428b      	cmp	r3, r1
    gcode.number = 0;
 800164e:	f04f 0800 	mov.w	r8, #0
    while(index < buff+len){
 8001652:	d305      	bcc.n	8001660 <parse_gcode+0x38>
 8001654:	e0c2      	b.n	80017dc <parse_gcode+0x1b4>
 8001656:	428b      	cmp	r3, r1
            gcode.number = gcode.number*10 + (*index - '0');
 8001658:	eb02 0845 	add.w	r8, r2, r5, lsl #1
    while(index < buff+len){
 800165c:	f000 80bc 	beq.w	80017d8 <parse_gcode+0x1b0>
            gcode.number = gcode.number*10 + (*index - '0');
 8001660:	461e      	mov	r6, r3
        if(*index >= '0' && *index <= '9'){
 8001662:	f813 0b01 	ldrb.w	r0, [r3], #1
            gcode.number = gcode.number*10 + (*index - '0');
 8001666:	eb08 0588 	add.w	r5, r8, r8, lsl #2
        if(*index >= '0' && *index <= '9'){
 800166a:	f1a0 0230 	sub.w	r2, r0, #48	@ 0x30
 800166e:	b2d4      	uxtb	r4, r2
 8001670:	2c09      	cmp	r4, #9
 8001672:	d9f0      	bls.n	8001656 <parse_gcode+0x2e>
        }else if (*index == ' ' || *index == '\n'){
 8001674:	2820      	cmp	r0, #32
 8001676:	d001      	beq.n	800167c <parse_gcode+0x54>
 8001678:	280a      	cmp	r0, #10
 800167a:	d14e      	bne.n	800171a <parse_gcode+0xf2>
            index++;
 800167c:	1c74      	adds	r4, r6, #1
    while(index < buff+len){
 800167e:	428c      	cmp	r4, r1
 8001680:	f080 80ac 	bcs.w	80017dc <parse_gcode+0x1b4>
 8001684:	f04f 0c00 	mov.w	ip, #0
 8001688:	1e4b      	subs	r3, r1, #1
 800168a:	f8cd 801c 	str.w	r8, [sp, #28]
 800168e:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 8001692:	4666      	mov	r6, ip
 8001694:	46e1      	mov	r9, ip
 8001696:	4698      	mov	r8, r3
 8001698:	3c01      	subs	r4, #1
 800169a:	9706      	str	r7, [sp, #24]
 800169c:	f8cd c00c 	str.w	ip, [sp, #12]
 80016a0:	e01c      	b.n	80016dc <parse_gcode+0xb4>
            if(*index >= '0' && *index <= '9'){
 80016a2:	f1a3 0b30 	sub.w	fp, r3, #48	@ 0x30
 80016a6:	fa5f f28b 	uxtb.w	r2, fp
 80016aa:	2a09      	cmp	r2, #9
 80016ac:	d841      	bhi.n	8001732 <parse_gcode+0x10a>
                    gcode.arguments[arg_index].value = gcode.arguments[arg_index].value*10 + (*index - '0');
 80016ae:	1caf      	adds	r7, r5, #2
 80016b0:	eb0a 07c7 	add.w	r7, sl, r7, lsl #3
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	9300      	str	r3, [sp, #0]
                if(decimals == 0){
 80016b8:	f1b9 0f00 	cmp.w	r9, #0
 80016bc:	d150      	bne.n	8001760 <parse_gcode+0x138>
                    gcode.arguments[arg_index].value = gcode.arguments[arg_index].value*10 + (*index - '0');
 80016be:	4658      	mov	r0, fp
 80016c0:	f7ff fbc0 	bl	8000e44 <__aeabi_i2f>
 80016c4:	494c      	ldr	r1, [pc, #304]	@ (80017f8 <parse_gcode+0x1d0>)
 80016c6:	4683      	mov	fp, r0
 80016c8:	9800      	ldr	r0, [sp, #0]
 80016ca:	f7fe fd49 	bl	8000160 <__aeabi_fmul>
 80016ce:	4601      	mov	r1, r0
 80016d0:	4658      	mov	r0, fp
 80016d2:	f7ff fb03 	bl	8000cdc <__addsf3>
 80016d6:	6078      	str	r0, [r7, #4]
    while(index < buff+len){
 80016d8:	4544      	cmp	r4, r8
 80016da:	d017      	beq.n	800170c <parse_gcode+0xe4>
            if(*index >= '0' && *index <= '9'){
 80016dc:	f814 3f01 	ldrb.w	r3, [r4, #1]!
        if(inside_arg){
 80016e0:	2e00      	cmp	r6, #0
 80016e2:	d1de      	bne.n	80016a2 <parse_gcode+0x7a>
            if(*index >= 'A' && *index <= 'Z'){
 80016e4:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 80016e8:	2a19      	cmp	r2, #25
 80016ea:	d82a      	bhi.n	8001742 <parse_gcode+0x11a>
                gcode.arguments[arg_index].name = *index;
 80016ec:	1cea      	adds	r2, r5, #3
 80016ee:	f80a 3032 	strb.w	r3, [sl, r2, lsl #3]
                gcode.arguments[arg_index].value = 0;
 80016f2:	2300      	movs	r3, #0
 80016f4:	eb0a 02c2 	add.w	r2, sl, r2, lsl #3
 80016f8:	6053      	str	r3, [r2, #4]
    while(index < buff+len){
 80016fa:	4544      	cmp	r4, r8
                gcode.arg_len = arg_index+1;
 80016fc:	f105 0302 	add.w	r3, r5, #2
                inside_arg = 1;
 8001700:	f04f 0601 	mov.w	r6, #1
                gcode.arg_len = arg_index+1;
 8001704:	9303      	str	r3, [sp, #12]
                arg_index++;
 8001706:	f105 0501 	add.w	r5, r5, #1
    while(index < buff+len){
 800170a:	d1e7      	bne.n	80016dc <parse_gcode+0xb4>
 800170c:	9f06      	ldr	r7, [sp, #24]
 800170e:	f8dd c00c 	ldr.w	ip, [sp, #12]
 8001712:	f8dd 801c 	ldr.w	r8, [sp, #28]
    return gcode;
 8001716:	2301      	movs	r3, #1
 8001718:	e001      	b.n	800171e <parse_gcode+0xf6>
 800171a:	2300      	movs	r3, #0
 800171c:	469c      	mov	ip, r3
}
 800171e:	4650      	mov	r0, sl
        return gcode;
 8001720:	e9ca 8c02 	strd	r8, ip, [sl, #8]
 8001724:	f8ca 3000 	str.w	r3, [sl]
 8001728:	f88a 7004 	strb.w	r7, [sl, #4]
}
 800172c:	b009      	add	sp, #36	@ 0x24
 800172e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            }else if(*index == '.'){
 8001732:	2b2e      	cmp	r3, #46	@ 0x2e
 8001734:	d04b      	beq.n	80017ce <parse_gcode+0x1a6>
            }else if (*index == ' '){
 8001736:	2b20      	cmp	r3, #32
 8001738:	d13e      	bne.n	80017b8 <parse_gcode+0x190>
                decimals = 0;
 800173a:	f04f 0900 	mov.w	r9, #0
                inside_arg = 0;
 800173e:	464e      	mov	r6, r9
 8001740:	e7ca      	b.n	80016d8 <parse_gcode+0xb0>
            }else if(*index >= 'a' && *index <= 'z'){
 8001742:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 8001746:	2a19      	cmp	r2, #25
 8001748:	d834      	bhi.n	80017b4 <parse_gcode+0x18c>
                arg_index++;
 800174a:	3501      	adds	r5, #1
                gcode.arguments[arg_index].name = *index - ('a' - 'A');
 800174c:	3b20      	subs	r3, #32
 800174e:	1caa      	adds	r2, r5, #2
 8001750:	f80a 3032 	strb.w	r3, [sl, r2, lsl #3]
                gcode.arguments[arg_index].value = 0;
 8001754:	2300      	movs	r3, #0
 8001756:	eb0a 02c2 	add.w	r2, sl, r2, lsl #3
                inside_arg = 1;
 800175a:	2601      	movs	r6, #1
                gcode.arguments[arg_index].value = 0;
 800175c:	6053      	str	r3, [r2, #4]
                inside_arg = 1;
 800175e:	e7bb      	b.n	80016d8 <parse_gcode+0xb0>
                    gcode.arguments[arg_index].value = gcode.arguments[arg_index].value + ((float)(*index - '0') * pow(0.1,decimals));
 8001760:	4648      	mov	r0, r9
 8001762:	f7fe ff03 	bl	800056c <__aeabi_i2d>
 8001766:	a322      	add	r3, pc, #136	@ (adr r3, 80017f0 <parse_gcode+0x1c8>)
 8001768:	e9d3 2300 	ldrd	r2, r3, [r3]
 800176c:	f7fe ff68 	bl	8000640 <__aeabi_dmul>
 8001770:	f004 fdd6 	bl	8006320 <exp>
 8001774:	4602      	mov	r2, r0
 8001776:	460b      	mov	r3, r1
 8001778:	4658      	mov	r0, fp
 800177a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800177e:	f7ff fb61 	bl	8000e44 <__aeabi_i2f>
 8001782:	f7fe ff05 	bl	8000590 <__aeabi_f2d>
 8001786:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800178a:	f7fe ff59 	bl	8000640 <__aeabi_dmul>
 800178e:	4602      	mov	r2, r0
 8001790:	460b      	mov	r3, r1
 8001792:	9800      	ldr	r0, [sp, #0]
 8001794:	e9cd 2300 	strd	r2, r3, [sp]
 8001798:	f7fe fefa 	bl	8000590 <__aeabi_f2d>
 800179c:	4602      	mov	r2, r0
 800179e:	460b      	mov	r3, r1
 80017a0:	e9dd 0100 	ldrd	r0, r1, [sp]
 80017a4:	f7fe fd96 	bl	80002d4 <__adddf3>
 80017a8:	f7ff fa42 	bl	8000c30 <__aeabi_d2f>
                    decimals++;
 80017ac:	f109 0901 	add.w	r9, r9, #1
                    gcode.arguments[arg_index].value = gcode.arguments[arg_index].value + ((float)(*index - '0') * pow(0.1,decimals));
 80017b0:	6078      	str	r0, [r7, #4]
                    decimals++;
 80017b2:	e791      	b.n	80016d8 <parse_gcode+0xb0>
            }else if (*index == ' '){
 80017b4:	2b20      	cmp	r3, #32
 80017b6:	d08f      	beq.n	80016d8 <parse_gcode+0xb0>
            }else if (*index == '\n'){
 80017b8:	f1a3 030a 	sub.w	r3, r3, #10
 80017bc:	fab3 f383 	clz	r3, r3
 80017c0:	9f06      	ldr	r7, [sp, #24]
 80017c2:	f8dd c00c 	ldr.w	ip, [sp, #12]
 80017c6:	f8dd 801c 	ldr.w	r8, [sp, #28]
 80017ca:	095b      	lsrs	r3, r3, #5
 80017cc:	e7a7      	b.n	800171e <parse_gcode+0xf6>
                if(decimals > 0){
 80017ce:	f1b9 0f00 	cmp.w	r9, #0
 80017d2:	d106      	bne.n	80017e2 <parse_gcode+0x1ba>
                decimals = 1;
 80017d4:	46b1      	mov	r9, r6
 80017d6:	e77f      	b.n	80016d8 <parse_gcode+0xb0>
        index++;
 80017d8:	460c      	mov	r4, r1
 80017da:	e750      	b.n	800167e <parse_gcode+0x56>
    while(index < buff+len){
 80017dc:	f04f 0c00 	mov.w	ip, #0
 80017e0:	e799      	b.n	8001716 <parse_gcode+0xee>
 80017e2:	2300      	movs	r3, #0
 80017e4:	9f06      	ldr	r7, [sp, #24]
 80017e6:	f8dd c00c 	ldr.w	ip, [sp, #12]
 80017ea:	f8dd 801c 	ldr.w	r8, [sp, #28]
 80017ee:	e796      	b.n	800171e <parse_gcode+0xf6>
 80017f0:	bbb55515 	.word	0xbbb55515
 80017f4:	c0026bb1 	.word	0xc0026bb1
 80017f8:	41200000 	.word	0x41200000

080017fc <USB_CDC_RxHandler>:
{
 80017fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80017fe:	4604      	mov	r4, r0
 8001800:	460d      	mov	r5, r1
 8001802:	f2ad 5d14 	subw	sp, sp, #1300	@ 0x514
	Gcode gcode = parse_gcode((char*)Buf, Len);
 8001806:	4668      	mov	r0, sp
 8001808:	4621      	mov	r1, r4
 800180a:	462a      	mov	r2, r5
 800180c:	f7ff ff0c 	bl	8001628 <parse_gcode>
	if(Buf[0] == 'A'){
 8001810:	7823      	ldrb	r3, [r4, #0]
	Gcode gcode = parse_gcode((char*)Buf, Len);
 8001812:	9f03      	ldr	r7, [sp, #12]
	if(Buf[0] == 'A'){
 8001814:	2b41      	cmp	r3, #65	@ 0x41
 8001816:	d041      	beq.n	800189c <USB_CDC_RxHandler+0xa0>
	}else if (Buf[0] == 'B'){
 8001818:	2b42      	cmp	r3, #66	@ 0x42
 800181a:	d035      	beq.n	8001888 <USB_CDC_RxHandler+0x8c>
		sprintf(TxBuffer, "Received data not starting with A or B '%s' with len %i\n", Buf, (int)Len);
 800181c:	ae44      	add	r6, sp, #272	@ 0x110
 800181e:	462b      	mov	r3, r5
 8001820:	4622      	mov	r2, r4
 8001822:	4630      	mov	r0, r6
 8001824:	493e      	ldr	r1, [pc, #248]	@ (8001920 <USB_CDC_RxHandler+0x124>)
 8001826:	f006 fa81 	bl	8007d2c <siprintf>
	if(gcode.letter == 'P'){
 800182a:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800182e:	2b50      	cmp	r3, #80	@ 0x50
 8001830:	d00a      	beq.n	8001848 <USB_CDC_RxHandler+0x4c>
	uint32_t l = strlen(TxBuffer);
 8001832:	4630      	mov	r0, r6
 8001834:	f7fe fc8c 	bl	8000150 <strlen>
 8001838:	4601      	mov	r1, r0
    CDC_Transmit_FS((uint8_t*)TxBuffer, l);
 800183a:	4630      	mov	r0, r6
 800183c:	b289      	uxth	r1, r1
 800183e:	f004 fb41 	bl	8005ec4 <CDC_Transmit_FS>
}
 8001842:	f20d 5d14 	addw	sp, sp, #1300	@ 0x514
 8001846:	bdf0      	pop	{r4, r5, r6, r7, pc}
		switch(gcode.number){
 8001848:	9b02      	ldr	r3, [sp, #8]
 800184a:	2b01      	cmp	r3, #1
 800184c:	d035      	beq.n	80018ba <USB_CDC_RxHandler+0xbe>
 800184e:	2b02      	cmp	r3, #2
 8001850:	d1ef      	bne.n	8001832 <USB_CDC_RxHandler+0x36>
	while(i<gcode->arg_len){
 8001852:	2f00      	cmp	r7, #0
	int i = 0;
 8001854:	bfc8      	it	gt
 8001856:	2300      	movgt	r3, #0
	while(i<gcode->arg_len){
 8001858:	dc03      	bgt.n	8001862 <USB_CDC_RxHandler+0x66>
 800185a:	e055      	b.n	8001908 <USB_CDC_RxHandler+0x10c>
		i++;
 800185c:	3301      	adds	r3, #1
	while(i<gcode->arg_len){
 800185e:	42bb      	cmp	r3, r7
 8001860:	d052      	beq.n	8001908 <USB_CDC_RxHandler+0x10c>
		if(gcode->arguments[i].name == arg_name){
 8001862:	eb0d 02c3 	add.w	r2, sp, r3, lsl #3
 8001866:	7c12      	ldrb	r2, [r2, #16]
 8001868:	2a56      	cmp	r2, #86	@ 0x56
 800186a:	d1f7      	bne.n	800185c <USB_CDC_RxHandler+0x60>
			*out = gcode->arguments[i].value;
 800186c:	eb0d 03c3 	add.w	r3, sp, r3, lsl #3
 8001870:	6958      	ldr	r0, [r3, #20]
 8001872:	4b2c      	ldr	r3, [pc, #176]	@ (8001924 <USB_CDC_RxHandler+0x128>)
 8001874:	6018      	str	r0, [r3, #0]
					sprintf(TxBuffer, "Called P1 - set voltage to %4.2f\n", target_voltage);
 8001876:	f7fe fe8b 	bl	8000590 <__aeabi_f2d>
 800187a:	4602      	mov	r2, r0
 800187c:	460b      	mov	r3, r1
 800187e:	4630      	mov	r0, r6
 8001880:	4929      	ldr	r1, [pc, #164]	@ (8001928 <USB_CDC_RxHandler+0x12c>)
 8001882:	f006 fa53 	bl	8007d2c <siprintf>
 8001886:	e7d4      	b.n	8001832 <USB_CDC_RxHandler+0x36>
		int value = atoll((char*)(Buf+1));
 8001888:	1c60      	adds	r0, r4, #1
 800188a:	f005 fd2d 	bl	80072e8 <atoll>
		sprintf(TxBuffer, "Received data starting with B and value %i\n", value);
 800188e:	ae44      	add	r6, sp, #272	@ 0x110
		int value = atoll((char*)(Buf+1));
 8001890:	4602      	mov	r2, r0
		sprintf(TxBuffer, "Received data starting with B and value %i\n", value);
 8001892:	4926      	ldr	r1, [pc, #152]	@ (800192c <USB_CDC_RxHandler+0x130>)
 8001894:	4630      	mov	r0, r6
 8001896:	f006 fa49 	bl	8007d2c <siprintf>
 800189a:	e7c6      	b.n	800182a <USB_CDC_RxHandler+0x2e>
		float value = atof((char*)(Buf+1));
 800189c:	1c60      	adds	r0, r4, #1
 800189e:	f004 ff18 	bl	80066d2 <atof>
 80018a2:	f7ff f9c5 	bl	8000c30 <__aeabi_d2f>
		sprintf(TxBuffer, "Received data starting with A and value %f\n", value);
 80018a6:	f7fe fe73 	bl	8000590 <__aeabi_f2d>
 80018aa:	ae44      	add	r6, sp, #272	@ 0x110
 80018ac:	4602      	mov	r2, r0
 80018ae:	460b      	mov	r3, r1
 80018b0:	4630      	mov	r0, r6
 80018b2:	491f      	ldr	r1, [pc, #124]	@ (8001930 <USB_CDC_RxHandler+0x134>)
 80018b4:	f006 fa3a 	bl	8007d2c <siprintf>
 80018b8:	e7b7      	b.n	800182a <USB_CDC_RxHandler+0x2e>
	while(i<gcode->arg_len){
 80018ba:	2f00      	cmp	r7, #0
 80018bc:	dd1b      	ble.n	80018f6 <USB_CDC_RxHandler+0xfa>
	int i = 0;
 80018be:	2300      	movs	r3, #0
 80018c0:	e002      	b.n	80018c8 <USB_CDC_RxHandler+0xcc>
		i++;
 80018c2:	3301      	adds	r3, #1
	while(i<gcode->arg_len){
 80018c4:	42bb      	cmp	r3, r7
 80018c6:	d016      	beq.n	80018f6 <USB_CDC_RxHandler+0xfa>
		if(gcode->arguments[i].name == arg_name){
 80018c8:	eb0d 02c3 	add.w	r2, sp, r3, lsl #3
 80018cc:	7c12      	ldrb	r2, [r2, #16]
 80018ce:	2a41      	cmp	r2, #65	@ 0x41
 80018d0:	d1f7      	bne.n	80018c2 <USB_CDC_RxHandler+0xc6>
			*out = gcode->arguments[i].value;
 80018d2:	eb0d 03c3 	add.w	r3, sp, r3, lsl #3
					TIM1->CCR1 = 1400-(int)val;
 80018d6:	6958      	ldr	r0, [r3, #20]
 80018d8:	f7ff fb08 	bl	8000eec <__aeabi_f2iz>
 80018dc:	4603      	mov	r3, r0
 80018de:	4a15      	ldr	r2, [pc, #84]	@ (8001934 <USB_CDC_RxHandler+0x138>)
 80018e0:	f5c3 63af 	rsb	r3, r3, #1400	@ 0x578
 80018e4:	6353      	str	r3, [r2, #52]	@ 0x34
					sprintf(TxBuffer, "Called P1 - set pwm to %ld\n", 1400-TIM1->CCR1);
 80018e6:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80018e8:	4630      	mov	r0, r6
 80018ea:	4913      	ldr	r1, [pc, #76]	@ (8001938 <USB_CDC_RxHandler+0x13c>)
 80018ec:	f5c2 62af 	rsb	r2, r2, #1400	@ 0x578
 80018f0:	f006 fa1c 	bl	8007d2c <siprintf>
 80018f4:	e79d      	b.n	8001832 <USB_CDC_RxHandler+0x36>
					sprintf(TxBuffer, "Called P1 - actual pwm: %ld\n",1400-TIM1->CCR1);
 80018f6:	4b0f      	ldr	r3, [pc, #60]	@ (8001934 <USB_CDC_RxHandler+0x138>)
 80018f8:	4630      	mov	r0, r6
 80018fa:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80018fc:	490f      	ldr	r1, [pc, #60]	@ (800193c <USB_CDC_RxHandler+0x140>)
 80018fe:	f5c2 62af 	rsb	r2, r2, #1400	@ 0x578
 8001902:	f006 fa13 	bl	8007d2c <siprintf>
 8001906:	e794      	b.n	8001832 <USB_CDC_RxHandler+0x36>
					sprintf(TxBuffer, "Called P1 - actual voltage: %4.2f\n",target_voltage);
 8001908:	4b06      	ldr	r3, [pc, #24]	@ (8001924 <USB_CDC_RxHandler+0x128>)
 800190a:	6818      	ldr	r0, [r3, #0]
 800190c:	f7fe fe40 	bl	8000590 <__aeabi_f2d>
 8001910:	4602      	mov	r2, r0
 8001912:	460b      	mov	r3, r1
 8001914:	4630      	mov	r0, r6
 8001916:	490a      	ldr	r1, [pc, #40]	@ (8001940 <USB_CDC_RxHandler+0x144>)
 8001918:	f006 fa08 	bl	8007d2c <siprintf>
 800191c:	e789      	b.n	8001832 <USB_CDC_RxHandler+0x36>
 800191e:	bf00      	nop
 8001920:	0800aa28 	.word	0x0800aa28
 8001924:	20000500 	.word	0x20000500
 8001928:	0800aaa0 	.word	0x0800aaa0
 800192c:	0800a9fc 	.word	0x0800a9fc
 8001930:	0800a9d0 	.word	0x0800a9d0
 8001934:	40012c00 	.word	0x40012c00
 8001938:	0800aa64 	.word	0x0800aa64
 800193c:	0800aa80 	.word	0x0800aa80
 8001940:	0800aac4 	.word	0x0800aac4
 8001944:	00000000 	.word	0x00000000

08001948 <HAL_ADC_ConvCpltCallback>:
{
 8001948:	b5f0      	push	{r4, r5, r6, r7, lr}
	if(hadc == &hadc1){
 800194a:	4947      	ldr	r1, [pc, #284]	@ (8001a68 <HAL_ADC_ConvCpltCallback+0x120>)
{
 800194c:	f2ad 4d04 	subw	sp, sp, #1028	@ 0x404
	if(hadc == &hadc1){
 8001950:	4288      	cmp	r0, r1
 8001952:	d01f      	beq.n	8001994 <HAL_ADC_ConvCpltCallback+0x4c>
	}else if(hadc == &hadc2){
 8001954:	4a45      	ldr	r2, [pc, #276]	@ (8001a6c <HAL_ADC_ConvCpltCallback+0x124>)
 8001956:	4290      	cmp	r0, r2
 8001958:	d002      	beq.n	8001960 <HAL_ADC_ConvCpltCallback+0x18>
}
 800195a:	f20d 4d04 	addw	sp, sp, #1028	@ 0x404
 800195e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if(peak_reset_counter == 0){
 8001960:	4d43      	ldr	r5, [pc, #268]	@ (8001a70 <HAL_ADC_ConvCpltCallback+0x128>)
 8001962:	682c      	ldr	r4, [r5, #0]
 8001964:	b15c      	cbz	r4, 800197e <HAL_ADC_ConvCpltCallback+0x36>
			peak_reset_counter--;
 8001966:	1e62      	subs	r2, r4, #1
 8001968:	602a      	str	r2, [r5, #0]
			if(peak_reset_counter == 0){
 800196a:	2a00      	cmp	r2, #0
 800196c:	d1f5      	bne.n	800195a <HAL_ADC_ConvCpltCallback+0x12>
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_RESET);
 800196e:	2140      	movs	r1, #64	@ 0x40
 8001970:	4840      	ldr	r0, [pc, #256]	@ (8001a74 <HAL_ADC_ConvCpltCallback+0x12c>)
}
 8001972:	f20d 4d04 	addw	sp, sp, #1028	@ 0x404
 8001976:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_RESET);
 800197a:	f000 bec7 	b.w	800270c <HAL_GPIO_WritePin>
			uint32_t raw_adc = HAL_ADC_GetValue(&hadc1);
 800197e:	4608      	mov	r0, r1
 8001980:	f000 fb70 	bl	8002064 <HAL_ADC_GetValue>
			if(raw_adc >= PEAK_THRESSHOLD){
 8001984:	28c7      	cmp	r0, #199	@ 0xc7
 8001986:	d9e8      	bls.n	800195a <HAL_ADC_ConvCpltCallback+0x12>
				if(raw_adc > peak_height){
 8001988:	4e3b      	ldr	r6, [pc, #236]	@ (8001a78 <HAL_ADC_ConvCpltCallback+0x130>)
 800198a:	6832      	ldr	r2, [r6, #0]
 800198c:	4282      	cmp	r2, r0
 800198e:	d250      	bcs.n	8001a32 <HAL_ADC_ConvCpltCallback+0xea>
					peak_height = raw_adc;
 8001990:	6030      	str	r0, [r6, #0]
 8001992:	e7e2      	b.n	800195a <HAL_ADC_ConvCpltCallback+0x12>
		if(decimation_index >= REPORT_DECIMATION){
 8001994:	4c39      	ldr	r4, [pc, #228]	@ (8001a7c <HAL_ADC_ConvCpltCallback+0x134>)
		uint32_t raw_adc = HAL_ADC_GetValue(&hadc1);
 8001996:	f000 fb65 	bl	8002064 <HAL_ADC_GetValue>
		if(decimation_index >= REPORT_DECIMATION){
 800199a:	8823      	ldrh	r3, [r4, #0]
			voltage_history[history_index] = (uint16_t)voltage;
 800199c:	4d38      	ldr	r5, [pc, #224]	@ (8001a80 <HAL_ADC_ConvCpltCallback+0x138>)
		if(decimation_index >= REPORT_DECIMATION){
 800199e:	2b09      	cmp	r3, #9
 80019a0:	d807      	bhi.n	80019b2 <HAL_ADC_ConvCpltCallback+0x6a>
			voltage_history[history_index] = (uint16_t)voltage;
 80019a2:	882a      	ldrh	r2, [r5, #0]
		if(history_index >= REPORT_CHUNK){
 80019a4:	2a63      	cmp	r2, #99	@ 0x63
 80019a6:	d820      	bhi.n	80019ea <HAL_ADC_ConvCpltCallback+0xa2>
		decimation_index++;
 80019a8:	3301      	adds	r3, #1
 80019aa:	8023      	strh	r3, [r4, #0]
}
 80019ac:	f20d 4d04 	addw	sp, sp, #1028	@ 0x404
 80019b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
		float voltage = raw_adc*ADC_TO_VOLTAGE;
 80019b2:	f7fe fdcb 	bl	800054c <__aeabi_ui2d>
 80019b6:	a32a      	add	r3, pc, #168	@ (adr r3, 8001a60 <HAL_ADC_ConvCpltCallback+0x118>)
 80019b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019bc:	f7fe fe40 	bl	8000640 <__aeabi_dmul>
 80019c0:	f7ff f936 	bl	8000c30 <__aeabi_d2f>
			voltage_history[history_index] = (uint16_t)voltage;
 80019c4:	f7ff fab8 	bl	8000f38 <__aeabi_f2uiz>
			decimation_index = 0;
 80019c8:	2300      	movs	r3, #0
			pwm_history[history_index] = 1400 - TIM1->CCR1;
 80019ca:	4a2e      	ldr	r2, [pc, #184]	@ (8001a84 <HAL_ADC_ConvCpltCallback+0x13c>)
			voltage_history[history_index] = (uint16_t)voltage;
 80019cc:	882e      	ldrh	r6, [r5, #0]
			pwm_history[history_index] = 1400 - TIM1->CCR1;
 80019ce:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80019d0:	492d      	ldr	r1, [pc, #180]	@ (8001a88 <HAL_ADC_ConvCpltCallback+0x140>)
 80019d2:	f5c2 62af 	rsb	r2, r2, #1400	@ 0x578
			voltage_history[history_index] = (uint16_t)voltage;
 80019d6:	4f2d      	ldr	r7, [pc, #180]	@ (8001a8c <HAL_ADC_ConvCpltCallback+0x144>)
			pwm_history[history_index] = 1400 - TIM1->CCR1;
 80019d8:	f821 2016 	strh.w	r2, [r1, r6, lsl #1]
			history_index++;
 80019dc:	1c72      	adds	r2, r6, #1
 80019de:	b292      	uxth	r2, r2
 80019e0:	802a      	strh	r2, [r5, #0]
			voltage_history[history_index] = (uint16_t)voltage;
 80019e2:	f827 0016 	strh.w	r0, [r7, r6, lsl #1]
			decimation_index = 0;
 80019e6:	8023      	strh	r3, [r4, #0]
 80019e8:	e7dc      	b.n	80019a4 <HAL_ADC_ConvCpltCallback+0x5c>
			history_index = 0;
 80019ea:	2300      	movs	r3, #0
			sprintf(TxBuffer, "R1: %i\n",REPORT_CHUNK);
 80019ec:	2264      	movs	r2, #100	@ 0x64
 80019ee:	4928      	ldr	r1, [pc, #160]	@ (8001a90 <HAL_ADC_ConvCpltCallback+0x148>)
 80019f0:	4668      	mov	r0, sp
			history_index = 0;
 80019f2:	802b      	strh	r3, [r5, #0]
			sprintf(TxBuffer, "R1: %i\n",REPORT_CHUNK);
 80019f4:	f006 f99a 	bl	8007d2c <siprintf>
			uint32_t l = strlen(TxBuffer);
 80019f8:	4668      	mov	r0, sp
 80019fa:	f7fe fba9 	bl	8000150 <strlen>
 80019fe:	4605      	mov	r5, r0
			memcpy(TxBuffer+l, voltage_history, sizeof(uint16_t)*REPORT_CHUNK);
 8001a00:	eb0d 0600 	add.w	r6, sp, r0
 8001a04:	22c8      	movs	r2, #200	@ 0xc8
 8001a06:	4921      	ldr	r1, [pc, #132]	@ (8001a8c <HAL_ADC_ConvCpltCallback+0x144>)
 8001a08:	4630      	mov	r0, r6
 8001a0a:	f006 fa92 	bl	8007f32 <memcpy>
			memcpy(TxBuffer+l + sizeof(uint16_t)*REPORT_CHUNK, pwm_history, sizeof(uint16_t)*REPORT_CHUNK);
 8001a0e:	f105 00c8 	add.w	r0, r5, #200	@ 0xc8
 8001a12:	22c8      	movs	r2, #200	@ 0xc8
 8001a14:	491c      	ldr	r1, [pc, #112]	@ (8001a88 <HAL_ADC_ConvCpltCallback+0x140>)
 8001a16:	4468      	add	r0, sp
 8001a18:	f006 fa8b 	bl	8007f32 <memcpy>
			TxBuffer[l + sizeof(uint16_t)*(REPORT_CHUNK*2)] = '\n';
 8001a1c:	230a      	movs	r3, #10
			CDC_Transmit_FS((uint8_t*)TxBuffer, l + sizeof(uint16_t)*(REPORT_CHUNK*2) + 1);
 8001a1e:	f205 1191 	addw	r1, r5, #401	@ 0x191
			TxBuffer[l + sizeof(uint16_t)*(REPORT_CHUNK*2)] = '\n';
 8001a22:	f886 3190 	strb.w	r3, [r6, #400]	@ 0x190
			CDC_Transmit_FS((uint8_t*)TxBuffer, l + sizeof(uint16_t)*(REPORT_CHUNK*2) + 1);
 8001a26:	4668      	mov	r0, sp
 8001a28:	b289      	uxth	r1, r1
 8001a2a:	f004 fa4b 	bl	8005ec4 <CDC_Transmit_FS>
		decimation_index++;
 8001a2e:	8823      	ldrh	r3, [r4, #0]
 8001a30:	e7ba      	b.n	80019a8 <HAL_ADC_ConvCpltCallback+0x60>
					sprintf(TxBuffer, "R2:%lu\n",peak_height);
 8001a32:	4918      	ldr	r1, [pc, #96]	@ (8001a94 <HAL_ADC_ConvCpltCallback+0x14c>)
 8001a34:	4668      	mov	r0, sp
 8001a36:	f006 f979 	bl	8007d2c <siprintf>
					uint32_t l = strlen(TxBuffer);
 8001a3a:	4668      	mov	r0, sp
 8001a3c:	f7fe fb88 	bl	8000150 <strlen>
 8001a40:	4601      	mov	r1, r0
					CDC_Transmit_FS((uint8_t*)TxBuffer, l);
 8001a42:	4668      	mov	r0, sp
 8001a44:	b289      	uxth	r1, r1
 8001a46:	f004 fa3d 	bl	8005ec4 <CDC_Transmit_FS>
					peak_reset_counter = PEAK_RESET_SAMPLES;
 8001a4a:	2305      	movs	r3, #5
					HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_SET);
 8001a4c:	2201      	movs	r2, #1
 8001a4e:	2140      	movs	r1, #64	@ 0x40
 8001a50:	4808      	ldr	r0, [pc, #32]	@ (8001a74 <HAL_ADC_ConvCpltCallback+0x12c>)
					peak_height = 0;
 8001a52:	6034      	str	r4, [r6, #0]
					peak_reset_counter = PEAK_RESET_SAMPLES;
 8001a54:	602b      	str	r3, [r5, #0]
					HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_SET);
 8001a56:	f000 fe59 	bl	800270c <HAL_GPIO_WritePin>
 8001a5a:	e77e      	b.n	800195a <HAL_ADC_ConvCpltCallback+0x12>
 8001a5c:	f3af 8000 	nop.w
 8001a60:	2e8a630d 	.word	0x2e8a630d
 8001a64:	3fe808ba 	.word	0x3fe808ba
 8001a68:	20000610 	.word	0x20000610
 8001a6c:	200005e0 	.word	0x200005e0
 8001a70:	200004f8 	.word	0x200004f8
 8001a74:	40010800 	.word	0x40010800
 8001a78:	200004fc 	.word	0x200004fc
 8001a7c:	20000364 	.word	0x20000364
 8001a80:	20000366 	.word	0x20000366
 8001a84:	40012c00 	.word	0x40012c00
 8001a88:	20000368 	.word	0x20000368
 8001a8c:	20000430 	.word	0x20000430
 8001a90:	0800aae8 	.word	0x0800aae8
 8001a94:	0800aaf0 	.word	0x0800aaf0

08001a98 <HandleTim3>:
void HandleTim3(void){
 8001a98:	b508      	push	{r3, lr}
	if (TIM2->CCR4){
 8001a9a:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001a9e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001aa0:	b16a      	cbz	r2, 8001abe <HandleTim3+0x26>
		TIM2->CCR4 = 0;
 8001aa2:	2200      	movs	r2, #0
 8001aa4:	641a      	str	r2, [r3, #64]	@ 0x40
	TIM3->CNT = 4500;
 8001aa6:	f241 1294 	movw	r2, #4500	@ 0x1194
 8001aaa:	4b07      	ldr	r3, [pc, #28]	@ (8001ac8 <HandleTim3+0x30>)
	HAL_TIM_Base_Stop_IT(&htim3);
 8001aac:	4807      	ldr	r0, [pc, #28]	@ (8001acc <HandleTim3+0x34>)
	TIM3->CNT = 4500;
 8001aae:	625a      	str	r2, [r3, #36]	@ 0x24
	HAL_TIM_Base_Stop_IT(&htim3);
 8001ab0:	f002 f9f4 	bl	8003e9c <HAL_TIM_Base_Stop_IT>
}
 8001ab4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	HAL_TIM_Base_Start_IT(&htim3);
 8001ab8:	4804      	ldr	r0, [pc, #16]	@ (8001acc <HandleTim3+0x34>)
 8001aba:	f002 b9c5 	b.w	8003e48 <HAL_TIM_Base_Start_IT>
		TIM2->CCR4 = 300;
 8001abe:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8001ac2:	641a      	str	r2, [r3, #64]	@ 0x40
 8001ac4:	e7ef      	b.n	8001aa6 <HandleTim3+0xe>
 8001ac6:	bf00      	nop
 8001ac8:	40000400 	.word	0x40000400
 8001acc:	20000504 	.word	0x20000504

08001ad0 <Error_Handler>:
 8001ad0:	b672      	cpsid	i
  while (1)
 8001ad2:	e7fe      	b.n	8001ad2 <Error_Handler+0x2>

08001ad4 <HAL_MspInit>:

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001ad4:	4b0e      	ldr	r3, [pc, #56]	@ (8001b10 <HAL_MspInit+0x3c>)
{
 8001ad6:	b082      	sub	sp, #8
  __HAL_RCC_AFIO_CLK_ENABLE();
 8001ad8:	699a      	ldr	r2, [r3, #24]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001ada:	490e      	ldr	r1, [pc, #56]	@ (8001b14 <HAL_MspInit+0x40>)
  __HAL_RCC_AFIO_CLK_ENABLE();
 8001adc:	f042 0201 	orr.w	r2, r2, #1
 8001ae0:	619a      	str	r2, [r3, #24]
 8001ae2:	699a      	ldr	r2, [r3, #24]
 8001ae4:	f002 0201 	and.w	r2, r2, #1
 8001ae8:	9200      	str	r2, [sp, #0]
 8001aea:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001aec:	69da      	ldr	r2, [r3, #28]
 8001aee:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8001af2:	61da      	str	r2, [r3, #28]
 8001af4:	69db      	ldr	r3, [r3, #28]
 8001af6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001afa:	9301      	str	r3, [sp, #4]
 8001afc:	9b01      	ldr	r3, [sp, #4]
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001afe:	684b      	ldr	r3, [r1, #4]
 8001b00:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8001b04:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001b08:	604b      	str	r3, [r1, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001b0a:	b002      	add	sp, #8
 8001b0c:	4770      	bx	lr
 8001b0e:	bf00      	nop
 8001b10:	40021000 	.word	0x40021000
 8001b14:	40010000 	.word	0x40010000

08001b18 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001b18:	b530      	push	{r4, r5, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b1a:	2400      	movs	r4, #0
  if(hadc->Instance==ADC1)
 8001b1c:	4a25      	ldr	r2, [pc, #148]	@ (8001bb4 <HAL_ADC_MspInit+0x9c>)
 8001b1e:	6803      	ldr	r3, [r0, #0]
{
 8001b20:	b089      	sub	sp, #36	@ 0x24
  if(hadc->Instance==ADC1)
 8001b22:	4293      	cmp	r3, r2
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b24:	e9cd 4404 	strd	r4, r4, [sp, #16]
 8001b28:	e9cd 4406 	strd	r4, r4, [sp, #24]
  if(hadc->Instance==ADC1)
 8001b2c:	d004      	beq.n	8001b38 <HAL_ADC_MspInit+0x20>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
  else if(hadc->Instance==ADC2)
 8001b2e:	4a22      	ldr	r2, [pc, #136]	@ (8001bb8 <HAL_ADC_MspInit+0xa0>)
 8001b30:	4293      	cmp	r3, r2
 8001b32:	d026      	beq.n	8001b82 <HAL_ADC_MspInit+0x6a>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8001b34:	b009      	add	sp, #36	@ 0x24
 8001b36:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001b38:	4b20      	ldr	r3, [pc, #128]	@ (8001bbc <HAL_ADC_MspInit+0xa4>)
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b3a:	4821      	ldr	r0, [pc, #132]	@ (8001bc0 <HAL_ADC_MspInit+0xa8>)
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001b3c:	699a      	ldr	r2, [r3, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b3e:	a904      	add	r1, sp, #16
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001b40:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001b44:	619a      	str	r2, [r3, #24]
 8001b46:	699a      	ldr	r2, [r3, #24]
 8001b48:	f402 7200 	and.w	r2, r2, #512	@ 0x200
 8001b4c:	9200      	str	r2, [sp, #0]
 8001b4e:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b50:	699a      	ldr	r2, [r3, #24]
 8001b52:	f042 0204 	orr.w	r2, r2, #4
 8001b56:	619a      	str	r2, [r3, #24]
 8001b58:	699b      	ldr	r3, [r3, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001b5a:	2201      	movs	r2, #1
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b5c:	f003 0304 	and.w	r3, r3, #4
 8001b60:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001b62:	2303      	movs	r3, #3
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b64:	9d01      	ldr	r5, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001b66:	e9cd 2304 	strd	r2, r3, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b6a:	f000 fcb3 	bl	80024d4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 8001b6e:	4622      	mov	r2, r4
 8001b70:	4621      	mov	r1, r4
 8001b72:	2012      	movs	r0, #18
 8001b74:	f000 fc4c 	bl	8002410 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8001b78:	2012      	movs	r0, #18
 8001b7a:	f000 fc85 	bl	8002488 <HAL_NVIC_EnableIRQ>
}
 8001b7e:	b009      	add	sp, #36	@ 0x24
 8001b80:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_ADC2_CLK_ENABLE();
 8001b82:	4b0e      	ldr	r3, [pc, #56]	@ (8001bbc <HAL_ADC_MspInit+0xa4>)
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b84:	480e      	ldr	r0, [pc, #56]	@ (8001bc0 <HAL_ADC_MspInit+0xa8>)
    __HAL_RCC_ADC2_CLK_ENABLE();
 8001b86:	699a      	ldr	r2, [r3, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b88:	a904      	add	r1, sp, #16
    __HAL_RCC_ADC2_CLK_ENABLE();
 8001b8a:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8001b8e:	619a      	str	r2, [r3, #24]
 8001b90:	699a      	ldr	r2, [r3, #24]
 8001b92:	f402 6280 	and.w	r2, r2, #1024	@ 0x400
 8001b96:	9202      	str	r2, [sp, #8]
 8001b98:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b9a:	699a      	ldr	r2, [r3, #24]
 8001b9c:	f042 0204 	orr.w	r2, r2, #4
 8001ba0:	619a      	str	r2, [r3, #24]
 8001ba2:	699b      	ldr	r3, [r3, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001ba4:	2202      	movs	r2, #2
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ba6:	f003 0304 	and.w	r3, r3, #4
 8001baa:	9303      	str	r3, [sp, #12]
 8001bac:	9d03      	ldr	r5, [sp, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001bae:	2303      	movs	r3, #3
 8001bb0:	e7d9      	b.n	8001b66 <HAL_ADC_MspInit+0x4e>
 8001bb2:	bf00      	nop
 8001bb4:	40012400 	.word	0x40012400
 8001bb8:	40012800 	.word	0x40012800
 8001bbc:	40021000 	.word	0x40021000
 8001bc0:	40010800 	.word	0x40010800

08001bc4 <HAL_TIM_PWM_MspInit>:
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
  if(htim_pwm->Instance==TIM1)
 8001bc4:	4a11      	ldr	r2, [pc, #68]	@ (8001c0c <HAL_TIM_PWM_MspInit+0x48>)
 8001bc6:	6803      	ldr	r3, [r0, #0]
{
 8001bc8:	b082      	sub	sp, #8
  if(htim_pwm->Instance==TIM1)
 8001bca:	4293      	cmp	r3, r2
 8001bcc:	d011      	beq.n	8001bf2 <HAL_TIM_PWM_MspInit+0x2e>
    __HAL_RCC_TIM1_CLK_ENABLE();
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
  else if(htim_pwm->Instance==TIM2)
 8001bce:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001bd2:	d001      	beq.n	8001bd8 <HAL_TIM_PWM_MspInit+0x14>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001bd4:	b002      	add	sp, #8
 8001bd6:	4770      	bx	lr
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001bd8:	f503 3304 	add.w	r3, r3, #135168	@ 0x21000
 8001bdc:	69da      	ldr	r2, [r3, #28]
 8001bde:	f042 0201 	orr.w	r2, r2, #1
 8001be2:	61da      	str	r2, [r3, #28]
 8001be4:	69db      	ldr	r3, [r3, #28]
 8001be6:	f003 0301 	and.w	r3, r3, #1
 8001bea:	9301      	str	r3, [sp, #4]
 8001bec:	9b01      	ldr	r3, [sp, #4]
}
 8001bee:	b002      	add	sp, #8
 8001bf0:	4770      	bx	lr
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001bf2:	4b07      	ldr	r3, [pc, #28]	@ (8001c10 <HAL_TIM_PWM_MspInit+0x4c>)
 8001bf4:	699a      	ldr	r2, [r3, #24]
 8001bf6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001bfa:	619a      	str	r2, [r3, #24]
 8001bfc:	699b      	ldr	r3, [r3, #24]
 8001bfe:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001c02:	9300      	str	r3, [sp, #0]
 8001c04:	9b00      	ldr	r3, [sp, #0]
}
 8001c06:	b002      	add	sp, #8
 8001c08:	4770      	bx	lr
 8001c0a:	bf00      	nop
 8001c0c:	40012c00 	.word	0x40012c00
 8001c10:	40021000 	.word	0x40021000

08001c14 <HAL_TIM_Base_MspInit>:
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
  if(htim_base->Instance==TIM3)
 8001c14:	4b0e      	ldr	r3, [pc, #56]	@ (8001c50 <HAL_TIM_Base_MspInit+0x3c>)
 8001c16:	6802      	ldr	r2, [r0, #0]
 8001c18:	429a      	cmp	r2, r3
 8001c1a:	d000      	beq.n	8001c1e <HAL_TIM_Base_MspInit+0xa>
 8001c1c:	4770      	bx	lr

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8001c1e:	2200      	movs	r2, #0
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001c20:	f503 3303 	add.w	r3, r3, #134144	@ 0x20c00
 8001c24:	69d9      	ldr	r1, [r3, #28]
{
 8001c26:	b500      	push	{lr}
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001c28:	f041 0102 	orr.w	r1, r1, #2
 8001c2c:	61d9      	str	r1, [r3, #28]
 8001c2e:	69db      	ldr	r3, [r3, #28]
{
 8001c30:	b083      	sub	sp, #12
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001c32:	f003 0302 	and.w	r3, r3, #2
 8001c36:	9301      	str	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8001c38:	201d      	movs	r0, #29
 8001c3a:	4611      	mov	r1, r2
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001c3c:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8001c3e:	f000 fbe7 	bl	8002410 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001c42:	201d      	movs	r0, #29

  /* USER CODE END TIM3_MspInit 1 */

  }

}
 8001c44:	b003      	add	sp, #12
 8001c46:	f85d eb04 	ldr.w	lr, [sp], #4
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001c4a:	f000 bc1d 	b.w	8002488 <HAL_NVIC_EnableIRQ>
 8001c4e:	bf00      	nop
 8001c50:	40000400 	.word	0x40000400

08001c54 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c54:	2300      	movs	r3, #0
{
 8001c56:	b570      	push	{r4, r5, r6, lr}
  if(htim->Instance==TIM1)
 8001c58:	491e      	ldr	r1, [pc, #120]	@ (8001cd4 <HAL_TIM_MspPostInit+0x80>)
 8001c5a:	6802      	ldr	r2, [r0, #0]
{
 8001c5c:	b086      	sub	sp, #24
  if(htim->Instance==TIM1)
 8001c5e:	428a      	cmp	r2, r1
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c60:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8001c64:	e9cd 3304 	strd	r3, r3, [sp, #16]
  if(htim->Instance==TIM1)
 8001c68:	d004      	beq.n	8001c74 <HAL_TIM_MspPostInit+0x20>

  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }
  else if(htim->Instance==TIM2)
 8001c6a:	f1b2 4f80 	cmp.w	r2, #1073741824	@ 0x40000000
 8001c6e:	d01b      	beq.n	8001ca8 <HAL_TIM_MspPostInit+0x54>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8001c70:	b006      	add	sp, #24
 8001c72:	bd70      	pop	{r4, r5, r6, pc}
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001c74:	f44f 7480 	mov.w	r4, #256	@ 0x100
 8001c78:	2502      	movs	r5, #2
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c7a:	2602      	movs	r6, #2
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c7c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8001c80:	f503 3304 	add.w	r3, r3, #135168	@ 0x21000
 8001c84:	699a      	ldr	r2, [r3, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c86:	4814      	ldr	r0, [pc, #80]	@ (8001cd8 <HAL_TIM_MspPostInit+0x84>)
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c88:	f042 0204 	orr.w	r2, r2, #4
 8001c8c:	619a      	str	r2, [r3, #24]
 8001c8e:	699b      	ldr	r3, [r3, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c90:	a902      	add	r1, sp, #8
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c92:	f003 0304 	and.w	r3, r3, #4
 8001c96:	9300      	str	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001c98:	e9cd 4502 	strd	r4, r5, [sp, #8]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c9c:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c9e:	9605      	str	r6, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ca0:	f000 fc18 	bl	80024d4 <HAL_GPIO_Init>
}
 8001ca4:	b006      	add	sp, #24
 8001ca6:	bd70      	pop	{r4, r5, r6, pc}
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001ca8:	2408      	movs	r4, #8
 8001caa:	2502      	movs	r5, #2
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cac:	2602      	movs	r6, #2
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001cae:	4b0b      	ldr	r3, [pc, #44]	@ (8001cdc <HAL_TIM_MspPostInit+0x88>)
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001cb0:	4809      	ldr	r0, [pc, #36]	@ (8001cd8 <HAL_TIM_MspPostInit+0x84>)
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001cb2:	699a      	ldr	r2, [r3, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001cb4:	a902      	add	r1, sp, #8
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001cb6:	f042 0204 	orr.w	r2, r2, #4
 8001cba:	619a      	str	r2, [r3, #24]
 8001cbc:	699b      	ldr	r3, [r3, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001cbe:	e9cd 4502 	strd	r4, r5, [sp, #8]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001cc2:	f003 0304 	and.w	r3, r3, #4
 8001cc6:	9301      	str	r3, [sp, #4]
 8001cc8:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cca:	9605      	str	r6, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ccc:	f000 fc02 	bl	80024d4 <HAL_GPIO_Init>
}
 8001cd0:	b006      	add	sp, #24
 8001cd2:	bd70      	pop	{r4, r5, r6, pc}
 8001cd4:	40012c00 	.word	0x40012c00
 8001cd8:	40010800 	.word	0x40010800
 8001cdc:	40021000 	.word	0x40021000

08001ce0 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001ce0:	e7fe      	b.n	8001ce0 <NMI_Handler>
 8001ce2:	bf00      	nop

08001ce4 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001ce4:	e7fe      	b.n	8001ce4 <HardFault_Handler>
 8001ce6:	bf00      	nop

08001ce8 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001ce8:	e7fe      	b.n	8001ce8 <MemManage_Handler>
 8001cea:	bf00      	nop

08001cec <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001cec:	e7fe      	b.n	8001cec <BusFault_Handler>
 8001cee:	bf00      	nop

08001cf0 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001cf0:	e7fe      	b.n	8001cf0 <UsageFault_Handler>
 8001cf2:	bf00      	nop

08001cf4 <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001cf4:	4770      	bx	lr
 8001cf6:	bf00      	nop

08001cf8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
 8001cf8:	4770      	bx	lr
 8001cfa:	bf00      	nop

08001cfc <PendSV_Handler>:
}

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
 8001cfc:	4770      	bx	lr
 8001cfe:	bf00      	nop

08001d00 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001d00:	f000 b8dc 	b.w	8001ebc <HAL_IncTick>

08001d04 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 8001d04:	b508      	push	{r3, lr}
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8001d06:	4804      	ldr	r0, [pc, #16]	@ (8001d18 <ADC1_2_IRQHandler+0x14>)
 8001d08:	f000 f9b2 	bl	8002070 <HAL_ADC_IRQHandler>
  HAL_ADC_IRQHandler(&hadc2);
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 8001d0c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_ADC_IRQHandler(&hadc2);
 8001d10:	4802      	ldr	r0, [pc, #8]	@ (8001d1c <ADC1_2_IRQHandler+0x18>)
 8001d12:	f000 b9ad 	b.w	8002070 <HAL_ADC_IRQHandler>
 8001d16:	bf00      	nop
 8001d18:	20000610 	.word	0x20000610
 8001d1c:	200005e0 	.word	0x200005e0

08001d20 <USB_LP_CAN1_RX0_IRQHandler>:
void USB_LP_CAN1_RX0_IRQHandler(void)
{
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8001d20:	4801      	ldr	r0, [pc, #4]	@ (8001d28 <USB_LP_CAN1_RX0_IRQHandler+0x8>)
 8001d22:	f000 be09 	b.w	8002938 <HAL_PCD_IRQHandler>
 8001d26:	bf00      	nop
 8001d28:	20001130 	.word	0x20001130

08001d2c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001d2c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001d2e:	4803      	ldr	r0, [pc, #12]	@ (8001d3c <TIM3_IRQHandler+0x10>)
 8001d30:	f002 fbae 	bl	8004490 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */
  HandleTim3();
  /* USER CODE END TIM3_IRQn 1 */
}
 8001d34:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HandleTim3();
 8001d38:	f7ff beae 	b.w	8001a98 <HandleTim3>
 8001d3c:	20000504 	.word	0x20000504

08001d40 <_getpid>:
}

int _getpid(void)
{
  return 1;
}
 8001d40:	2001      	movs	r0, #1
 8001d42:	4770      	bx	lr

08001d44 <_kill>:

int _kill(int pid, int sig)
{
 8001d44:	b508      	push	{r3, lr}
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001d46:	f006 f8b9 	bl	8007ebc <__errno>
 8001d4a:	2216      	movs	r2, #22
 8001d4c:	4603      	mov	r3, r0
  return -1;
}
 8001d4e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
  errno = EINVAL;
 8001d52:	601a      	str	r2, [r3, #0]
}
 8001d54:	bd08      	pop	{r3, pc}
 8001d56:	bf00      	nop

08001d58 <_exit>:

void _exit (int status)
{
 8001d58:	b508      	push	{r3, lr}
  errno = EINVAL;
 8001d5a:	f006 f8af 	bl	8007ebc <__errno>
 8001d5e:	2316      	movs	r3, #22
 8001d60:	6003      	str	r3, [r0, #0]
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
 8001d62:	e7fe      	b.n	8001d62 <_exit+0xa>

08001d64 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001d64:	b570      	push	{r4, r5, r6, lr}
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d66:	1e16      	subs	r6, r2, #0
 8001d68:	dd07      	ble.n	8001d7a <_read+0x16>
 8001d6a:	460c      	mov	r4, r1
 8001d6c:	198d      	adds	r5, r1, r6
  {
    *ptr++ = __io_getchar();
 8001d6e:	f3af 8000 	nop.w
 8001d72:	f804 0b01 	strb.w	r0, [r4], #1
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d76:	42a5      	cmp	r5, r4
 8001d78:	d1f9      	bne.n	8001d6e <_read+0xa>
  }

  return len;
}
 8001d7a:	4630      	mov	r0, r6
 8001d7c:	bd70      	pop	{r4, r5, r6, pc}
 8001d7e:	bf00      	nop

08001d80 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001d80:	b570      	push	{r4, r5, r6, lr}
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d82:	1e16      	subs	r6, r2, #0
 8001d84:	dd07      	ble.n	8001d96 <_write+0x16>
 8001d86:	460c      	mov	r4, r1
 8001d88:	198d      	adds	r5, r1, r6
  {
    __io_putchar(*ptr++);
 8001d8a:	f814 0b01 	ldrb.w	r0, [r4], #1
 8001d8e:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d92:	42ac      	cmp	r4, r5
 8001d94:	d1f9      	bne.n	8001d8a <_write+0xa>
  }
  return len;
}
 8001d96:	4630      	mov	r0, r6
 8001d98:	bd70      	pop	{r4, r5, r6, pc}
 8001d9a:	bf00      	nop

08001d9c <_close>:

int _close(int file)
{
  (void)file;
  return -1;
}
 8001d9c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001da0:	4770      	bx	lr
 8001da2:	bf00      	nop

08001da4 <_fstat>:


int _fstat(int file, struct stat *st)
{
  (void)file;
  st->st_mode = S_IFCHR;
 8001da4:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
  return 0;
}
 8001da8:	2000      	movs	r0, #0
  st->st_mode = S_IFCHR;
 8001daa:	604b      	str	r3, [r1, #4]
}
 8001dac:	4770      	bx	lr
 8001dae:	bf00      	nop

08001db0 <_isatty>:

int _isatty(int file)
{
  (void)file;
  return 1;
}
 8001db0:	2001      	movs	r0, #1
 8001db2:	4770      	bx	lr

08001db4 <_lseek>:
{
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
}
 8001db4:	2000      	movs	r0, #0
 8001db6:	4770      	bx	lr

08001db8 <_sbrk>:
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001db8:	490d      	ldr	r1, [pc, #52]	@ (8001df0 <_sbrk+0x38>)
{
 8001dba:	4603      	mov	r3, r0
 8001dbc:	b510      	push	{r4, lr}
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001dbe:	4a0d      	ldr	r2, [pc, #52]	@ (8001df4 <_sbrk+0x3c>)
 8001dc0:	4c0d      	ldr	r4, [pc, #52]	@ (8001df8 <_sbrk+0x40>)
  if (NULL == __sbrk_heap_end)
 8001dc2:	6808      	ldr	r0, [r1, #0]
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001dc4:	1b12      	subs	r2, r2, r4
  if (NULL == __sbrk_heap_end)
 8001dc6:	b120      	cbz	r0, 8001dd2 <_sbrk+0x1a>
  {
    __sbrk_heap_end = &_end;
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001dc8:	4403      	add	r3, r0
 8001dca:	4293      	cmp	r3, r2
 8001dcc:	d807      	bhi.n	8001dde <_sbrk+0x26>
    errno = ENOMEM;
    return (void *)-1;
  }

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;
 8001dce:	600b      	str	r3, [r1, #0]

  return (void *)prev_heap_end;
}
 8001dd0:	bd10      	pop	{r4, pc}
    __sbrk_heap_end = &_end;
 8001dd2:	4c0a      	ldr	r4, [pc, #40]	@ (8001dfc <_sbrk+0x44>)
 8001dd4:	4620      	mov	r0, r4
  if (__sbrk_heap_end + incr > max_heap)
 8001dd6:	4403      	add	r3, r0
 8001dd8:	4293      	cmp	r3, r2
    __sbrk_heap_end = &_end;
 8001dda:	600c      	str	r4, [r1, #0]
  if (__sbrk_heap_end + incr > max_heap)
 8001ddc:	d9f7      	bls.n	8001dce <_sbrk+0x16>
    errno = ENOMEM;
 8001dde:	f006 f86d 	bl	8007ebc <__errno>
 8001de2:	220c      	movs	r2, #12
 8001de4:	4603      	mov	r3, r0
    return (void *)-1;
 8001de6:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
    errno = ENOMEM;
 8001dea:	601a      	str	r2, [r3, #0]
}
 8001dec:	bd10      	pop	{r4, pc}
 8001dee:	bf00      	nop
 8001df0:	20000640 	.word	0x20000640
 8001df4:	20005000 	.word	0x20005000
 8001df8:	00000400 	.word	0x00000400
 8001dfc:	20001558 	.word	0x20001558

08001e00 <SystemInit>:

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001e00:	4770      	bx	lr
 8001e02:	bf00      	nop

08001e04 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001e04:	f7ff fffc 	bl	8001e00 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001e08:	480b      	ldr	r0, [pc, #44]	@ (8001e38 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001e0a:	490c      	ldr	r1, [pc, #48]	@ (8001e3c <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001e0c:	4a0c      	ldr	r2, [pc, #48]	@ (8001e40 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001e0e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001e10:	e002      	b.n	8001e18 <LoopCopyDataInit>

08001e12 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001e12:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001e14:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001e16:	3304      	adds	r3, #4

08001e18 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001e18:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001e1a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001e1c:	d3f9      	bcc.n	8001e12 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001e1e:	4a09      	ldr	r2, [pc, #36]	@ (8001e44 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001e20:	4c09      	ldr	r4, [pc, #36]	@ (8001e48 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001e22:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001e24:	e001      	b.n	8001e2a <LoopFillZerobss>

08001e26 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001e26:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001e28:	3204      	adds	r2, #4

08001e2a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001e2a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001e2c:	d3fb      	bcc.n	8001e26 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001e2e:	f006 f84b 	bl	8007ec8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001e32:	f7ff fa91 	bl	8001358 <main>
  bx lr
 8001e36:	4770      	bx	lr
  ldr r0, =_sdata
 8001e38:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001e3c:	20000344 	.word	0x20000344
  ldr r2, =_sidata
 8001e40:	0800afd0 	.word	0x0800afd0
  ldr r2, =_sbss
 8001e44:	20000348 	.word	0x20000348
  ldr r4, =_ebss
 8001e48:	20001554 	.word	0x20001554

08001e4c <CAN1_RX1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001e4c:	e7fe      	b.n	8001e4c <CAN1_RX1_IRQHandler>
	...

08001e50 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001e50:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001e52:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001e56:	4a0d      	ldr	r2, [pc, #52]	@ (8001e8c <HAL_InitTick+0x3c>)
{
 8001e58:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001e5a:	7811      	ldrb	r1, [r2, #0]
 8001e5c:	4a0c      	ldr	r2, [pc, #48]	@ (8001e90 <HAL_InitTick+0x40>)
 8001e5e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001e62:	6812      	ldr	r2, [r2, #0]
 8001e64:	fbb2 f0f3 	udiv	r0, r2, r3
 8001e68:	f000 fb1c 	bl	80024a4 <HAL_SYSTICK_Config>
 8001e6c:	b908      	cbnz	r0, 8001e72 <HAL_InitTick+0x22>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001e6e:	2d0f      	cmp	r5, #15
 8001e70:	d901      	bls.n	8001e76 <HAL_InitTick+0x26>
    return HAL_ERROR;
 8001e72:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 8001e74:	bd38      	pop	{r3, r4, r5, pc}
 8001e76:	4604      	mov	r4, r0
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001e78:	4602      	mov	r2, r0
 8001e7a:	4629      	mov	r1, r5
 8001e7c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001e80:	f000 fac6 	bl	8002410 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001e84:	4b03      	ldr	r3, [pc, #12]	@ (8001e94 <HAL_InitTick+0x44>)
 8001e86:	4620      	mov	r0, r4
 8001e88:	601d      	str	r5, [r3, #0]
}
 8001e8a:	bd38      	pop	{r3, r4, r5, pc}
 8001e8c:	20000004 	.word	0x20000004
 8001e90:	20000000 	.word	0x20000000
 8001e94:	20000008 	.word	0x20000008

08001e98 <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001e98:	4a07      	ldr	r2, [pc, #28]	@ (8001eb8 <HAL_Init+0x20>)
{
 8001e9a:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001e9c:	6813      	ldr	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001e9e:	2003      	movs	r0, #3
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001ea0:	f043 0310 	orr.w	r3, r3, #16
 8001ea4:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001ea6:	f000 faa1 	bl	80023ec <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8001eaa:	200f      	movs	r0, #15
 8001eac:	f7ff ffd0 	bl	8001e50 <HAL_InitTick>
  HAL_MspInit();
 8001eb0:	f7ff fe10 	bl	8001ad4 <HAL_MspInit>
}
 8001eb4:	2000      	movs	r0, #0
 8001eb6:	bd08      	pop	{r3, pc}
 8001eb8:	40022000 	.word	0x40022000

08001ebc <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8001ebc:	4a03      	ldr	r2, [pc, #12]	@ (8001ecc <HAL_IncTick+0x10>)
 8001ebe:	4b04      	ldr	r3, [pc, #16]	@ (8001ed0 <HAL_IncTick+0x14>)
 8001ec0:	6811      	ldr	r1, [r2, #0]
 8001ec2:	781b      	ldrb	r3, [r3, #0]
 8001ec4:	440b      	add	r3, r1
 8001ec6:	6013      	str	r3, [r2, #0]
}
 8001ec8:	4770      	bx	lr
 8001eca:	bf00      	nop
 8001ecc:	20000644 	.word	0x20000644
 8001ed0:	20000004 	.word	0x20000004

08001ed4 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8001ed4:	4b01      	ldr	r3, [pc, #4]	@ (8001edc <HAL_GetTick+0x8>)
 8001ed6:	6818      	ldr	r0, [r3, #0]
}
 8001ed8:	4770      	bx	lr
 8001eda:	bf00      	nop
 8001edc:	20000644 	.word	0x20000644

08001ee0 <HAL_ADC_Init>:
  uint32_t tmp_cr1 = 0U;
  uint32_t tmp_cr2 = 0U;
  uint32_t tmp_sqr1 = 0U;
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001ee0:	2800      	cmp	r0, #0
 8001ee2:	f000 808d 	beq.w	8002000 <HAL_ADC_Init+0x120>
{
 8001ee6:	b538      	push	{r3, r4, r5, lr}
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001ee8:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 8001eea:	4604      	mov	r4, r0
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d06f      	beq.n	8001fd0 <HAL_ADC_Init+0xf0>
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
  uint32_t tickstart = 0U;
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8001ef0:	6823      	ldr	r3, [r4, #0]
 8001ef2:	689a      	ldr	r2, [r3, #8]
 8001ef4:	07d1      	lsls	r1, r2, #31
 8001ef6:	d449      	bmi.n	8001f8c <HAL_ADC_Init+0xac>
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001ef8:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 8001efa:	06d2      	lsls	r2, r2, #27
 8001efc:	d505      	bpl.n	8001f0a <HAL_ADC_Init+0x2a>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001efe:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8001f00:	f043 0310 	orr.w	r3, r3, #16
 8001f04:	62a3      	str	r3, [r4, #40]	@ 0x28
    return HAL_ERROR;
 8001f06:	2001      	movs	r0, #1
}
 8001f08:	bd38      	pop	{r3, r4, r5, pc}
    ADC_STATE_CLR_SET(hadc->State,
 8001f0a:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001f0c:	6861      	ldr	r1, [r4, #4]
 8001f0e:	69e0      	ldr	r0, [r4, #28]
    ADC_STATE_CLR_SET(hadc->State,
 8001f10:	f422 5288 	bic.w	r2, r2, #4352	@ 0x1100
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8001f14:	7b25      	ldrb	r5, [r4, #12]
    ADC_STATE_CLR_SET(hadc->State,
 8001f16:	f022 0202 	bic.w	r2, r2, #2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001f1a:	4301      	orrs	r1, r0
    ADC_STATE_CLR_SET(hadc->State,
 8001f1c:	f042 0202 	orr.w	r2, r2, #2
 8001f20:	62a2      	str	r2, [r4, #40]	@ 0x28
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001f22:	ea41 0245 	orr.w	r2, r1, r5, lsl #1
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8001f26:	68a1      	ldr	r1, [r4, #8]
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001f28:	f894 c014 	ldrb.w	ip, [r4, #20]
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8001f2c:	f5b1 7f80 	cmp.w	r1, #256	@ 0x100
 8001f30:	d054      	beq.n	8001fdc <HAL_ADC_Init+0xfc>
 8001f32:	f1a1 0001 	sub.w	r0, r1, #1
 8001f36:	fab0 f080 	clz	r0, r0
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001f3a:	f1bc 0f01 	cmp.w	ip, #1
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8001f3e:	ea4f 1050 	mov.w	r0, r0, lsr #5
 8001f42:	ea4f 2000 	mov.w	r0, r0, lsl #8
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001f46:	d05e      	beq.n	8002006 <HAL_ADC_Init+0x126>
      MODIFY_REG(hadc->Instance->CR1,
 8001f48:	685d      	ldr	r5, [r3, #4]
 8001f4a:	f425 4569 	bic.w	r5, r5, #59648	@ 0xe900
 8001f4e:	4328      	orrs	r0, r5
 8001f50:	6058      	str	r0, [r3, #4]
      MODIFY_REG(hadc->Instance->CR2,
 8001f52:	689d      	ldr	r5, [r3, #8]
 8001f54:	4841      	ldr	r0, [pc, #260]	@ (800205c <HAL_ADC_Init+0x17c>)
 8001f56:	4028      	ands	r0, r5
 8001f58:	4310      	orrs	r0, r2
 8001f5a:	6098      	str	r0, [r3, #8]
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8001f5c:	2901      	cmp	r1, #1
 8001f5e:	d04b      	beq.n	8001ff8 <HAL_ADC_Init+0x118>
  uint32_t tmp_sqr1 = 0U;
 8001f60:	2000      	movs	r0, #0
    MODIFY_REG(hadc->Instance->SQR1,
 8001f62:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001f64:	f421 0170 	bic.w	r1, r1, #15728640	@ 0xf00000
 8001f68:	4301      	orrs	r1, r0
 8001f6a:	62d9      	str	r1, [r3, #44]	@ 0x2c
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001f6c:	6899      	ldr	r1, [r3, #8]
 8001f6e:	4b3c      	ldr	r3, [pc, #240]	@ (8002060 <HAL_ADC_Init+0x180>)
 8001f70:	400b      	ands	r3, r1
 8001f72:	429a      	cmp	r2, r3
 8001f74:	d061      	beq.n	800203a <HAL_ADC_Init+0x15a>
      ADC_STATE_CLR_SET(hadc->State,
 8001f76:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8001f78:	f023 0312 	bic.w	r3, r3, #18
 8001f7c:	f043 0310 	orr.w	r3, r3, #16
 8001f80:	62a3      	str	r3, [r4, #40]	@ 0x28
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001f82:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8001f84:	f043 0301 	orr.w	r3, r3, #1
 8001f88:	62e3      	str	r3, [r4, #44]	@ 0x2c
      tmp_hal_status = HAL_ERROR;
 8001f8a:	e7bc      	b.n	8001f06 <HAL_ADC_Init+0x26>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8001f8c:	689a      	ldr	r2, [r3, #8]
 8001f8e:	f022 0201 	bic.w	r2, r2, #1
 8001f92:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001f94:	f7ff ff9e 	bl	8001ed4 <HAL_GetTick>
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001f98:	6823      	ldr	r3, [r4, #0]
    tickstart = HAL_GetTick();
 8001f9a:	4605      	mov	r5, r0
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001f9c:	689a      	ldr	r2, [r3, #8]
 8001f9e:	07d2      	lsls	r2, r2, #31
 8001fa0:	d5aa      	bpl.n	8001ef8 <HAL_ADC_Init+0x18>
 8001fa2:	e002      	b.n	8001faa <HAL_ADC_Init+0xca>
 8001fa4:	689a      	ldr	r2, [r3, #8]
 8001fa6:	07d1      	lsls	r1, r2, #31
 8001fa8:	d5a6      	bpl.n	8001ef8 <HAL_ADC_Init+0x18>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001faa:	f7ff ff93 	bl	8001ed4 <HAL_GetTick>
 8001fae:	1b40      	subs	r0, r0, r5
 8001fb0:	2802      	cmp	r0, #2
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8001fb2:	6823      	ldr	r3, [r4, #0]
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001fb4:	d9f6      	bls.n	8001fa4 <HAL_ADC_Init+0xc4>
        if(ADC_IS_ENABLE(hadc) != RESET)
 8001fb6:	689a      	ldr	r2, [r3, #8]
 8001fb8:	07d0      	lsls	r0, r2, #31
 8001fba:	d5f3      	bpl.n	8001fa4 <HAL_ADC_Init+0xc4>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001fbc:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8001fbe:	f043 0310 	orr.w	r3, r3, #16
 8001fc2:	62a3      	str	r3, [r4, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001fc4:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8001fc6:	f043 0301 	orr.w	r3, r3, #1
 8001fca:	62e3      	str	r3, [r4, #44]	@ 0x2c
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001fcc:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8001fce:	e796      	b.n	8001efe <HAL_ADC_Init+0x1e>
    ADC_CLEAR_ERRORCODE(hadc);
 8001fd0:	62c3      	str	r3, [r0, #44]	@ 0x2c
    hadc->Lock = HAL_UNLOCKED;
 8001fd2:	f880 3024 	strb.w	r3, [r0, #36]	@ 0x24
    HAL_ADC_MspInit(hadc);
 8001fd6:	f7ff fd9f 	bl	8001b18 <HAL_ADC_MspInit>
 8001fda:	e789      	b.n	8001ef0 <HAL_ADC_Init+0x10>
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001fdc:	f1bc 0f01 	cmp.w	ip, #1
 8001fe0:	d010      	beq.n	8002004 <HAL_ADC_Init+0x124>
      MODIFY_REG(hadc->Instance->CR1,
 8001fe2:	6858      	ldr	r0, [r3, #4]
      MODIFY_REG(hadc->Instance->CR2,
 8001fe4:	491d      	ldr	r1, [pc, #116]	@ (800205c <HAL_ADC_Init+0x17c>)
      MODIFY_REG(hadc->Instance->CR1,
 8001fe6:	f420 4069 	bic.w	r0, r0, #59648	@ 0xe900
 8001fea:	f440 7080 	orr.w	r0, r0, #256	@ 0x100
 8001fee:	6058      	str	r0, [r3, #4]
      MODIFY_REG(hadc->Instance->CR2,
 8001ff0:	6898      	ldr	r0, [r3, #8]
 8001ff2:	4001      	ands	r1, r0
 8001ff4:	4311      	orrs	r1, r2
 8001ff6:	6099      	str	r1, [r3, #8]
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8001ff8:	6920      	ldr	r0, [r4, #16]
 8001ffa:	3801      	subs	r0, #1
 8001ffc:	0500      	lsls	r0, r0, #20
 8001ffe:	e7b0      	b.n	8001f62 <HAL_ADC_Init+0x82>
    return HAL_ERROR;
 8002000:	2001      	movs	r0, #1
}
 8002002:	4770      	bx	lr
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8002004:	4608      	mov	r0, r1
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8002006:	b30d      	cbz	r5, 800204c <HAL_ADC_Init+0x16c>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002008:	6aa5      	ldr	r5, [r4, #40]	@ 0x28
 800200a:	f045 0520 	orr.w	r5, r5, #32
 800200e:	62a5      	str	r5, [r4, #40]	@ 0x28
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002010:	6ae5      	ldr	r5, [r4, #44]	@ 0x2c
 8002012:	f045 0501 	orr.w	r5, r5, #1
 8002016:	62e5      	str	r5, [r4, #44]	@ 0x2c
      MODIFY_REG(hadc->Instance->CR1,
 8002018:	685d      	ldr	r5, [r3, #4]
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 800201a:	f5b1 7f80 	cmp.w	r1, #256	@ 0x100
      MODIFY_REG(hadc->Instance->CR1,
 800201e:	f425 4569 	bic.w	r5, r5, #59648	@ 0xe900
 8002022:	ea40 0005 	orr.w	r0, r0, r5
 8002026:	6058      	str	r0, [r3, #4]
      MODIFY_REG(hadc->Instance->CR2,
 8002028:	689d      	ldr	r5, [r3, #8]
 800202a:	480c      	ldr	r0, [pc, #48]	@ (800205c <HAL_ADC_Init+0x17c>)
 800202c:	ea00 0005 	and.w	r0, r0, r5
 8002030:	ea40 0002 	orr.w	r0, r0, r2
 8002034:	6098      	str	r0, [r3, #8]
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8002036:	d191      	bne.n	8001f5c <HAL_ADC_Init+0x7c>
 8002038:	e7de      	b.n	8001ff8 <HAL_ADC_Init+0x118>
      ADC_CLEAR_ERRORCODE(hadc);
 800203a:	2000      	movs	r0, #0
 800203c:	62e0      	str	r0, [r4, #44]	@ 0x2c
      ADC_STATE_CLR_SET(hadc->State,
 800203e:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8002040:	f023 0303 	bic.w	r3, r3, #3
 8002044:	f043 0301 	orr.w	r3, r3, #1
 8002048:	62a3      	str	r3, [r4, #40]	@ 0x28
}
 800204a:	bd38      	pop	{r3, r4, r5, pc}
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 800204c:	69a5      	ldr	r5, [r4, #24]
 800204e:	3d01      	subs	r5, #1
 8002050:	ea40 3045 	orr.w	r0, r0, r5, lsl #13
 8002054:	f440 6000 	orr.w	r0, r0, #2048	@ 0x800
 8002058:	e7de      	b.n	8002018 <HAL_ADC_Init+0x138>
 800205a:	bf00      	nop
 800205c:	ffe1f7fd 	.word	0xffe1f7fd
 8002060:	ff1f0efe 	.word	0xff1f0efe

08002064 <HAL_ADC_GetValue>:
  return hadc->Instance->DR;
 8002064:	6803      	ldr	r3, [r0, #0]
 8002066:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
}
 8002068:	4770      	bx	lr
 800206a:	bf00      	nop

0800206c <HAL_ADC_LevelOutOfWindowCallback>:
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
 800206c:	4770      	bx	lr
 800206e:	bf00      	nop

08002070 <HAL_ADC_IRQHandler>:
  uint32_t tmp_sr = hadc->Instance->SR;
 8002070:	6803      	ldr	r3, [r0, #0]
{
 8002072:	b570      	push	{r4, r5, r6, lr}
  uint32_t tmp_sr = hadc->Instance->SR;
 8002074:	681e      	ldr	r6, [r3, #0]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 8002076:	685d      	ldr	r5, [r3, #4]
{
 8002078:	4604      	mov	r4, r0
  if((tmp_cr1 & ADC_IT_EOC) == ADC_IT_EOC)
 800207a:	06a8      	lsls	r0, r5, #26
 800207c:	d501      	bpl.n	8002082 <HAL_ADC_IRQHandler+0x12>
    if((tmp_sr & ADC_FLAG_EOC) == ADC_FLAG_EOC)
 800207e:	07b1      	lsls	r1, r6, #30
 8002080:	d426      	bmi.n	80020d0 <HAL_ADC_IRQHandler+0x60>
  if((tmp_cr1 & ADC_IT_JEOC) == ADC_IT_JEOC)
 8002082:	0628      	lsls	r0, r5, #24
 8002084:	d501      	bpl.n	800208a <HAL_ADC_IRQHandler+0x1a>
    if((tmp_sr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC)
 8002086:	0771      	lsls	r1, r6, #29
 8002088:	d404      	bmi.n	8002094 <HAL_ADC_IRQHandler+0x24>
  if((tmp_cr1 & ADC_IT_AWD) == ADC_IT_AWD)
 800208a:	066a      	lsls	r2, r5, #25
 800208c:	d501      	bpl.n	8002092 <HAL_ADC_IRQHandler+0x22>
    if((tmp_sr & ADC_FLAG_AWD) == ADC_FLAG_AWD)
 800208e:	07f3      	lsls	r3, r6, #31
 8002090:	d433      	bmi.n	80020fa <HAL_ADC_IRQHandler+0x8a>
}
 8002092:	bd70      	pop	{r4, r5, r6, pc}
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002094:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 8002096:	06d2      	lsls	r2, r2, #27
 8002098:	d403      	bmi.n	80020a2 <HAL_ADC_IRQHandler+0x32>
        SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 800209a:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 800209c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80020a0:	62a2      	str	r2, [r4, #40]	@ 0x28
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 80020a2:	689a      	ldr	r2, [r3, #8]
 80020a4:	f402 42e0 	and.w	r2, r2, #28672	@ 0x7000
 80020a8:	f5b2 4fe0 	cmp.w	r2, #28672	@ 0x7000
 80020ac:	d034      	beq.n	8002118 <HAL_ADC_IRQHandler+0xa8>
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 80020ae:	685a      	ldr	r2, [r3, #4]
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 80020b0:	0550      	lsls	r0, r2, #21
 80020b2:	d405      	bmi.n	80020c0 <HAL_ADC_IRQHandler+0x50>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 80020b4:	689a      	ldr	r2, [r3, #8]
 80020b6:	f402 2260 	and.w	r2, r2, #917504	@ 0xe0000
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 80020ba:	f5b2 2f60 	cmp.w	r2, #917504	@ 0xe0000
 80020be:	d028      	beq.n	8002112 <HAL_ADC_IRQHandler+0xa2>
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 80020c0:	4620      	mov	r0, r4
 80020c2:	f000 f991 	bl	80023e8 <HAL_ADCEx_InjectedConvCpltCallback>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 80020c6:	f06f 020c 	mvn.w	r2, #12
 80020ca:	6823      	ldr	r3, [r4, #0]
 80020cc:	601a      	str	r2, [r3, #0]
 80020ce:	e7dc      	b.n	800208a <HAL_ADC_IRQHandler+0x1a>
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80020d0:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 80020d2:	06d2      	lsls	r2, r2, #27
 80020d4:	d403      	bmi.n	80020de <HAL_ADC_IRQHandler+0x6e>
        SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 80020d6:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 80020d8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80020dc:	62a2      	str	r2, [r4, #40]	@ 0x28
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80020de:	689a      	ldr	r2, [r3, #8]
 80020e0:	f402 2260 	and.w	r2, r2, #917504	@ 0xe0000
 80020e4:	f5b2 2f60 	cmp.w	r2, #917504	@ 0xe0000
 80020e8:	d026      	beq.n	8002138 <HAL_ADC_IRQHandler+0xc8>
      HAL_ADC_ConvCpltCallback(hadc);
 80020ea:	4620      	mov	r0, r4
 80020ec:	f7ff fc2c 	bl	8001948 <HAL_ADC_ConvCpltCallback>
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80020f0:	f06f 0212 	mvn.w	r2, #18
 80020f4:	6823      	ldr	r3, [r4, #0]
 80020f6:	601a      	str	r2, [r3, #0]
 80020f8:	e7c3      	b.n	8002082 <HAL_ADC_IRQHandler+0x12>
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80020fa:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 80020fc:	4620      	mov	r0, r4
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80020fe:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002102:	62a3      	str	r3, [r4, #40]	@ 0x28
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8002104:	f7ff ffb2 	bl	800206c <HAL_ADC_LevelOutOfWindowCallback>
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8002108:	f06f 0201 	mvn.w	r2, #1
 800210c:	6823      	ldr	r3, [r4, #0]
 800210e:	601a      	str	r2, [r3, #0]
}
 8002110:	bd70      	pop	{r4, r5, r6, pc}
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8002112:	7b22      	ldrb	r2, [r4, #12]
 8002114:	2a00      	cmp	r2, #0
 8002116:	d1d3      	bne.n	80020c0 <HAL_ADC_IRQHandler+0x50>
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8002118:	685a      	ldr	r2, [r3, #4]
 800211a:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800211e:	605a      	str	r2, [r3, #4]
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8002120:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8002122:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8002126:	62a3      	str	r3, [r4, #40]	@ 0x28
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8002128:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 800212a:	05d9      	lsls	r1, r3, #23
 800212c:	d4c8      	bmi.n	80020c0 <HAL_ADC_IRQHandler+0x50>
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800212e:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8002130:	f043 0301 	orr.w	r3, r3, #1
 8002134:	62a3      	str	r3, [r4, #40]	@ 0x28
 8002136:	e7c3      	b.n	80020c0 <HAL_ADC_IRQHandler+0x50>
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002138:	7b22      	ldrb	r2, [r4, #12]
 800213a:	2a00      	cmp	r2, #0
 800213c:	d1d5      	bne.n	80020ea <HAL_ADC_IRQHandler+0x7a>
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 800213e:	685a      	ldr	r2, [r3, #4]
 8002140:	f022 0220 	bic.w	r2, r2, #32
 8002144:	605a      	str	r2, [r3, #4]
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002146:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8002148:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800214c:	62a3      	str	r3, [r4, #40]	@ 0x28
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800214e:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8002150:	04db      	lsls	r3, r3, #19
 8002152:	d4ca      	bmi.n	80020ea <HAL_ADC_IRQHandler+0x7a>
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002154:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8002156:	f043 0301 	orr.w	r3, r3, #1
 800215a:	62a3      	str	r3, [r4, #40]	@ 0x28
 800215c:	e7c5      	b.n	80020ea <HAL_ADC_IRQHandler+0x7a>
 800215e:	bf00      	nop

08002160 <HAL_ADC_ConfigChannel>:
  __IO uint32_t wait_loop_index = 0U;
 8002160:	2200      	movs	r2, #0
{ 
 8002162:	b530      	push	{r4, r5, lr}
 8002164:	b083      	sub	sp, #12
  __IO uint32_t wait_loop_index = 0U;
 8002166:	9201      	str	r2, [sp, #4]
  __HAL_LOCK(hadc);
 8002168:	f890 2024 	ldrb.w	r2, [r0, #36]	@ 0x24
 800216c:	2a01      	cmp	r2, #1
 800216e:	d066      	beq.n	800223e <HAL_ADC_ConfigChannel+0xde>
 8002170:	4603      	mov	r3, r0
 8002172:	2001      	movs	r0, #1
 8002174:	f883 0024 	strb.w	r0, [r3, #36]	@ 0x24
  if (sConfig->Rank < 7U)
 8002178:	684c      	ldr	r4, [r1, #4]
    MODIFY_REG(hadc->Instance->SQR3                        ,
 800217a:	681a      	ldr	r2, [r3, #0]
  if (sConfig->Rank < 7U)
 800217c:	2c06      	cmp	r4, #6
    MODIFY_REG(hadc->Instance->SQR3                        ,
 800217e:	6808      	ldr	r0, [r1, #0]
 8002180:	eb04 0c84 	add.w	ip, r4, r4, lsl #2
  if (sConfig->Rank < 7U)
 8002184:	d92f      	bls.n	80021e6 <HAL_ADC_ConfigChannel+0x86>
  else if (sConfig->Rank < 13U)
 8002186:	2c0c      	cmp	r4, #12
 8002188:	d84b      	bhi.n	8002222 <HAL_ADC_ConfigChannel+0xc2>
    MODIFY_REG(hadc->Instance->SQR2                        ,
 800218a:	251f      	movs	r5, #31
 800218c:	6b14      	ldr	r4, [r2, #48]	@ 0x30
 800218e:	f1ac 0c23 	sub.w	ip, ip, #35	@ 0x23
 8002192:	fa05 f50c 	lsl.w	r5, r5, ip
 8002196:	fa00 fe0c 	lsl.w	lr, r0, ip
 800219a:	ea24 0405 	bic.w	r4, r4, r5
 800219e:	ea44 040e 	orr.w	r4, r4, lr
 80021a2:	6314      	str	r4, [r2, #48]	@ 0x30
  if (sConfig->Channel >= ADC_CHANNEL_10)
 80021a4:	2809      	cmp	r0, #9
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 80021a6:	6889      	ldr	r1, [r1, #8]
 80021a8:	eb00 0440 	add.w	r4, r0, r0, lsl #1
  if (sConfig->Channel >= ADC_CHANNEL_10)
 80021ac:	d92d      	bls.n	800220a <HAL_ADC_ConfigChannel+0xaa>
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 80021ae:	f04f 0c07 	mov.w	ip, #7
 80021b2:	3c1e      	subs	r4, #30
 80021b4:	40a1      	lsls	r1, r4
 80021b6:	fa0c fc04 	lsl.w	ip, ip, r4
 80021ba:	68d4      	ldr	r4, [r2, #12]
 80021bc:	ea24 040c 	bic.w	r4, r4, ip
 80021c0:	4321      	orrs	r1, r4
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80021c2:	f1a0 0410 	sub.w	r4, r0, #16
 80021c6:	2c01      	cmp	r4, #1
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 80021c8:	60d1      	str	r1, [r2, #12]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80021ca:	d828      	bhi.n	800221e <HAL_ADC_ConfigChannel+0xbe>
    if (hadc->Instance == ADC1)
 80021cc:	492c      	ldr	r1, [pc, #176]	@ (8002280 <HAL_ADC_ConfigChannel+0x120>)
 80021ce:	428a      	cmp	r2, r1
 80021d0:	d038      	beq.n	8002244 <HAL_ADC_ConfigChannel+0xe4>
      tmp_hal_status = HAL_ERROR;
 80021d2:	2001      	movs	r0, #1
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80021d4:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80021d6:	f042 0220 	orr.w	r2, r2, #32
 80021da:	629a      	str	r2, [r3, #40]	@ 0x28
  __HAL_UNLOCK(hadc);
 80021dc:	2200      	movs	r2, #0
 80021de:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
}
 80021e2:	b003      	add	sp, #12
 80021e4:	bd30      	pop	{r4, r5, pc}
    MODIFY_REG(hadc->Instance->SQR3                        ,
 80021e6:	f04f 0e1f 	mov.w	lr, #31
 80021ea:	6b54      	ldr	r4, [r2, #52]	@ 0x34
 80021ec:	f1ac 0c05 	sub.w	ip, ip, #5
 80021f0:	fa00 f50c 	lsl.w	r5, r0, ip
 80021f4:	fa0e fc0c 	lsl.w	ip, lr, ip
 80021f8:	ea24 040c 	bic.w	r4, r4, ip
 80021fc:	432c      	orrs	r4, r5
  if (sConfig->Channel >= ADC_CHANNEL_10)
 80021fe:	2809      	cmp	r0, #9
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8002200:	6354      	str	r4, [r2, #52]	@ 0x34
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8002202:	6889      	ldr	r1, [r1, #8]
 8002204:	eb00 0440 	add.w	r4, r0, r0, lsl #1
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8002208:	d8d1      	bhi.n	80021ae <HAL_ADC_ConfigChannel+0x4e>
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 800220a:	f04f 0c07 	mov.w	ip, #7
 800220e:	6910      	ldr	r0, [r2, #16]
 8002210:	40a1      	lsls	r1, r4
 8002212:	fa0c f404 	lsl.w	r4, ip, r4
 8002216:	ea20 0004 	bic.w	r0, r0, r4
 800221a:	4301      	orrs	r1, r0
 800221c:	6111      	str	r1, [r2, #16]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800221e:	2000      	movs	r0, #0
 8002220:	e7dc      	b.n	80021dc <HAL_ADC_ConfigChannel+0x7c>
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8002222:	251f      	movs	r5, #31
 8002224:	6ad4      	ldr	r4, [r2, #44]	@ 0x2c
 8002226:	f1ac 0c41 	sub.w	ip, ip, #65	@ 0x41
 800222a:	fa05 f50c 	lsl.w	r5, r5, ip
 800222e:	fa00 fe0c 	lsl.w	lr, r0, ip
 8002232:	ea24 0405 	bic.w	r4, r4, r5
 8002236:	ea44 040e 	orr.w	r4, r4, lr
 800223a:	62d4      	str	r4, [r2, #44]	@ 0x2c
 800223c:	e7b2      	b.n	80021a4 <HAL_ADC_ConfigChannel+0x44>
  __HAL_LOCK(hadc);
 800223e:	2002      	movs	r0, #2
}
 8002240:	b003      	add	sp, #12
 8002242:	bd30      	pop	{r4, r5, pc}
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8002244:	6891      	ldr	r1, [r2, #8]
 8002246:	0209      	lsls	r1, r1, #8
 8002248:	d4e9      	bmi.n	800221e <HAL_ADC_ConfigChannel+0xbe>
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 800224a:	6891      	ldr	r1, [r2, #8]
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800224c:	2810      	cmp	r0, #16
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 800224e:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8002252:	6091      	str	r1, [r2, #8]
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002254:	d1e3      	bne.n	800221e <HAL_ADC_ConfigChannel+0xbe>
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002256:	4a0b      	ldr	r2, [pc, #44]	@ (8002284 <HAL_ADC_ConfigChannel+0x124>)
 8002258:	490b      	ldr	r1, [pc, #44]	@ (8002288 <HAL_ADC_ConfigChannel+0x128>)
 800225a:	6812      	ldr	r2, [r2, #0]
 800225c:	fba1 1202 	umull	r1, r2, r1, r2
 8002260:	0c92      	lsrs	r2, r2, #18
 8002262:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8002266:	0052      	lsls	r2, r2, #1
 8002268:	9201      	str	r2, [sp, #4]
          while(wait_loop_index != 0U)
 800226a:	9a01      	ldr	r2, [sp, #4]
 800226c:	2a00      	cmp	r2, #0
 800226e:	d0d6      	beq.n	800221e <HAL_ADC_ConfigChannel+0xbe>
            wait_loop_index--;
 8002270:	9a01      	ldr	r2, [sp, #4]
 8002272:	3a01      	subs	r2, #1
 8002274:	9201      	str	r2, [sp, #4]
          while(wait_loop_index != 0U)
 8002276:	9a01      	ldr	r2, [sp, #4]
 8002278:	2a00      	cmp	r2, #0
 800227a:	d1f9      	bne.n	8002270 <HAL_ADC_ConfigChannel+0x110>
 800227c:	e7cf      	b.n	800221e <HAL_ADC_ConfigChannel+0xbe>
 800227e:	bf00      	nop
 8002280:	40012400 	.word	0x40012400
 8002284:	20000000 	.word	0x20000000
 8002288:	431bde83 	.word	0x431bde83

0800228c <ADC_Enable>:
  __IO uint32_t wait_loop_index = 0U;
 800228c:	2300      	movs	r3, #0
{
 800228e:	b530      	push	{r4, r5, lr}
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002290:	6802      	ldr	r2, [r0, #0]
{
 8002292:	b083      	sub	sp, #12
  __IO uint32_t wait_loop_index = 0U;
 8002294:	9301      	str	r3, [sp, #4]
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002296:	6893      	ldr	r3, [r2, #8]
 8002298:	07d9      	lsls	r1, r3, #31
 800229a:	d427      	bmi.n	80022ec <ADC_Enable+0x60>
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800229c:	4b1b      	ldr	r3, [pc, #108]	@ (800230c <ADC_Enable+0x80>)
 800229e:	4604      	mov	r4, r0
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	481b      	ldr	r0, [pc, #108]	@ (8002310 <ADC_Enable+0x84>)
    __HAL_ADC_ENABLE(hadc);
 80022a4:	6891      	ldr	r1, [r2, #8]
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80022a6:	fba0 0303 	umull	r0, r3, r0, r3
    __HAL_ADC_ENABLE(hadc);
 80022aa:	f041 0101 	orr.w	r1, r1, #1
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80022ae:	0c9b      	lsrs	r3, r3, #18
    __HAL_ADC_ENABLE(hadc);
 80022b0:	6091      	str	r1, [r2, #8]
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80022b2:	9301      	str	r3, [sp, #4]
    while(wait_loop_index != 0U)
 80022b4:	9b01      	ldr	r3, [sp, #4]
 80022b6:	b12b      	cbz	r3, 80022c4 <ADC_Enable+0x38>
      wait_loop_index--;
 80022b8:	9b01      	ldr	r3, [sp, #4]
 80022ba:	3b01      	subs	r3, #1
 80022bc:	9301      	str	r3, [sp, #4]
    while(wait_loop_index != 0U)
 80022be:	9b01      	ldr	r3, [sp, #4]
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d1f9      	bne.n	80022b8 <ADC_Enable+0x2c>
    tickstart = HAL_GetTick();
 80022c4:	f7ff fe06 	bl	8001ed4 <HAL_GetTick>
    while(ADC_IS_ENABLE(hadc) == RESET)
 80022c8:	6823      	ldr	r3, [r4, #0]
    tickstart = HAL_GetTick();
 80022ca:	4605      	mov	r5, r0
    while(ADC_IS_ENABLE(hadc) == RESET)
 80022cc:	689b      	ldr	r3, [r3, #8]
 80022ce:	07da      	lsls	r2, r3, #31
 80022d0:	d40c      	bmi.n	80022ec <ADC_Enable+0x60>
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80022d2:	f7ff fdff 	bl	8001ed4 <HAL_GetTick>
 80022d6:	1b43      	subs	r3, r0, r5
 80022d8:	2b02      	cmp	r3, #2
        if(ADC_IS_ENABLE(hadc) == RESET)
 80022da:	6823      	ldr	r3, [r4, #0]
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80022dc:	d903      	bls.n	80022e6 <ADC_Enable+0x5a>
        if(ADC_IS_ENABLE(hadc) == RESET)
 80022de:	689a      	ldr	r2, [r3, #8]
 80022e0:	f012 0201 	ands.w	r2, r2, #1
 80022e4:	d005      	beq.n	80022f2 <ADC_Enable+0x66>
    while(ADC_IS_ENABLE(hadc) == RESET)
 80022e6:	689b      	ldr	r3, [r3, #8]
 80022e8:	07db      	lsls	r3, r3, #31
 80022ea:	d5f2      	bpl.n	80022d2 <ADC_Enable+0x46>
  return HAL_OK;
 80022ec:	2000      	movs	r0, #0
}
 80022ee:	b003      	add	sp, #12
 80022f0:	bd30      	pop	{r4, r5, pc}
          __HAL_UNLOCK(hadc);
 80022f2:	2001      	movs	r0, #1
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80022f4:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
          __HAL_UNLOCK(hadc);
 80022f6:	f884 2024 	strb.w	r2, [r4, #36]	@ 0x24
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80022fa:	f043 0310 	orr.w	r3, r3, #16
 80022fe:	62a3      	str	r3, [r4, #40]	@ 0x28
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002300:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8002302:	4303      	orrs	r3, r0
 8002304:	62e3      	str	r3, [r4, #44]	@ 0x2c
}
 8002306:	b003      	add	sp, #12
 8002308:	bd30      	pop	{r4, r5, pc}
 800230a:	bf00      	nop
 800230c:	20000000 	.word	0x20000000
 8002310:	431bde83 	.word	0x431bde83

08002314 <HAL_ADC_Start_IT>:
  __HAL_LOCK(hadc);
 8002314:	f890 3024 	ldrb.w	r3, [r0, #36]	@ 0x24
 8002318:	2b01      	cmp	r3, #1
 800231a:	d03d      	beq.n	8002398 <HAL_ADC_Start_IT+0x84>
 800231c:	2301      	movs	r3, #1
{
 800231e:	b510      	push	{r4, lr}
  __HAL_LOCK(hadc);
 8002320:	f880 3024 	strb.w	r3, [r0, #36]	@ 0x24
  tmp_hal_status = ADC_Enable(hadc);
 8002324:	4604      	mov	r4, r0
 8002326:	f7ff ffb1 	bl	800228c <ADC_Enable>
  if (tmp_hal_status == HAL_OK)
 800232a:	2800      	cmp	r0, #0
 800232c:	d130      	bne.n	8002390 <HAL_ADC_Start_IT+0x7c>
    ADC_STATE_CLR_SET(hadc->State,
 800232e:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8002330:	6822      	ldr	r2, [r4, #0]
 8002332:	492b      	ldr	r1, [pc, #172]	@ (80023e0 <HAL_ADC_Start_IT+0xcc>)
    ADC_STATE_CLR_SET(hadc->State,
 8002334:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8002338:	f023 0301 	bic.w	r3, r3, #1
 800233c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8002340:	428a      	cmp	r2, r1
    ADC_STATE_CLR_SET(hadc->State,
 8002342:	62a3      	str	r3, [r4, #40]	@ 0x28
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8002344:	d02a      	beq.n	800239c <HAL_ADC_Start_IT+0x88>
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002346:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8002348:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800234c:	62a3      	str	r3, [r4, #40]	@ 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800234e:	6853      	ldr	r3, [r2, #4]
 8002350:	0559      	lsls	r1, r3, #21
 8002352:	d42f      	bmi.n	80023b4 <HAL_ADC_Start_IT+0xa0>
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002354:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
    __HAL_UNLOCK(hadc);
 8002356:	2100      	movs	r1, #0
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002358:	f413 5380 	ands.w	r3, r3, #4096	@ 0x1000
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800235c:	bf18      	it	ne
 800235e:	6ae3      	ldrne	r3, [r4, #44]	@ 0x2c
    __HAL_UNLOCK(hadc);
 8002360:	f884 1024 	strb.w	r1, [r4, #36]	@ 0x24
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002364:	bf18      	it	ne
 8002366:	f023 0306 	bicne.w	r3, r3, #6
      ADC_CLEAR_ERRORCODE(hadc);
 800236a:	62e3      	str	r3, [r4, #44]	@ 0x2c
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 800236c:	f06f 0302 	mvn.w	r3, #2
 8002370:	6013      	str	r3, [r2, #0]
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOC);
 8002372:	6853      	ldr	r3, [r2, #4]
 8002374:	f043 0320 	orr.w	r3, r3, #32
 8002378:	6053      	str	r3, [r2, #4]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 800237a:	6893      	ldr	r3, [r2, #8]
 800237c:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 8002380:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 8002384:	d01d      	beq.n	80023c2 <HAL_ADC_Start_IT+0xae>
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8002386:	6893      	ldr	r3, [r2, #8]
 8002388:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800238c:	6093      	str	r3, [r2, #8]
}
 800238e:	bd10      	pop	{r4, pc}
    __HAL_UNLOCK(hadc);
 8002390:	2300      	movs	r3, #0
 8002392:	f884 3024 	strb.w	r3, [r4, #36]	@ 0x24
}
 8002396:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hadc);
 8002398:	2002      	movs	r0, #2
}
 800239a:	4770      	bx	lr
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 800239c:	4b11      	ldr	r3, [pc, #68]	@ (80023e4 <HAL_ADC_Start_IT+0xd0>)
 800239e:	6859      	ldr	r1, [r3, #4]
 80023a0:	f411 2f70 	tst.w	r1, #983040	@ 0xf0000
 80023a4:	d0cf      	beq.n	8002346 <HAL_ADC_Start_IT+0x32>
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80023a6:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 80023a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80023ac:	62a1      	str	r1, [r4, #40]	@ 0x28
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 80023ae:	685b      	ldr	r3, [r3, #4]
 80023b0:	055b      	lsls	r3, r3, #21
 80023b2:	d5cf      	bpl.n	8002354 <HAL_ADC_Start_IT+0x40>
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80023b4:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 80023b6:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80023ba:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80023be:	62a3      	str	r3, [r4, #40]	@ 0x28
 80023c0:	e7c8      	b.n	8002354 <HAL_ADC_Start_IT+0x40>
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 80023c2:	4b07      	ldr	r3, [pc, #28]	@ (80023e0 <HAL_ADC_Start_IT+0xcc>)
 80023c4:	429a      	cmp	r2, r3
 80023c6:	d004      	beq.n	80023d2 <HAL_ADC_Start_IT+0xbe>
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 80023c8:	6893      	ldr	r3, [r2, #8]
 80023ca:	f443 03a0 	orr.w	r3, r3, #5242880	@ 0x500000
 80023ce:	6093      	str	r3, [r2, #8]
}
 80023d0:	bd10      	pop	{r4, pc}
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 80023d2:	f5a3 6380 	sub.w	r3, r3, #1024	@ 0x400
 80023d6:	685b      	ldr	r3, [r3, #4]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 80023d8:	f413 2f70 	tst.w	r3, #983040	@ 0xf0000
 80023dc:	d1d3      	bne.n	8002386 <HAL_ADC_Start_IT+0x72>
 80023de:	e7f3      	b.n	80023c8 <HAL_ADC_Start_IT+0xb4>
 80023e0:	40012800 	.word	0x40012800
 80023e4:	40012400 	.word	0x40012400

080023e8 <HAL_ADCEx_InjectedConvCpltCallback>:
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADCEx_InjectedConvCpltCallback could be implemented in the user file
  */
}
 80023e8:	4770      	bx	lr
 80023ea:	bf00      	nop

080023ec <HAL_NVIC_SetPriorityGrouping>:
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80023ec:	f64f 0cff 	movw	ip, #63743	@ 0xf8ff
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80023f0:	4906      	ldr	r1, [pc, #24]	@ (800240c <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80023f2:	0203      	lsls	r3, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80023f4:	68ca      	ldr	r2, [r1, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80023f6:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80023fa:	ea02 020c 	and.w	r2, r2, ip
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80023fe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002400:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002404:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
  SCB->AIRCR =  reg_value;
 8002408:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 800240a:	4770      	bx	lr
 800240c:	e000ed00 	.word	0xe000ed00

08002410 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002410:	4b1b      	ldr	r3, [pc, #108]	@ (8002480 <HAL_NVIC_SetPriority+0x70>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002412:	b500      	push	{lr}
 8002414:	68db      	ldr	r3, [r3, #12]
 8002416:	f3c3 2302 	ubfx	r3, r3, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800241a:	f1c3 0e07 	rsb	lr, r3, #7
 800241e:	f1be 0f04 	cmp.w	lr, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002422:	f103 0c04 	add.w	ip, r3, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002426:	bf28      	it	cs
 8002428:	f04f 0e04 	movcs.w	lr, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800242c:	f1bc 0f06 	cmp.w	ip, #6
 8002430:	d91c      	bls.n	800246c <HAL_NVIC_SetPriority+0x5c>
 8002432:	f1a3 0c03 	sub.w	ip, r3, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002436:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800243a:	fa03 f30c 	lsl.w	r3, r3, ip
 800243e:	ea22 0203 	bic.w	r2, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002442:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002446:	fa03 f30e 	lsl.w	r3, r3, lr
 800244a:	ea21 0303 	bic.w	r3, r1, r3
 800244e:	fa03 f30c 	lsl.w	r3, r3, ip
 8002452:	4313      	orrs	r3, r2
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002454:	011b      	lsls	r3, r3, #4
  if ((int32_t)(IRQn) >= 0)
 8002456:	2800      	cmp	r0, #0
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002458:	b2db      	uxtb	r3, r3
  if ((int32_t)(IRQn) >= 0)
 800245a:	db0a      	blt.n	8002472 <HAL_NVIC_SetPriority+0x62>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800245c:	f100 4060 	add.w	r0, r0, #3758096384	@ 0xe0000000
 8002460:	f500 4061 	add.w	r0, r0, #57600	@ 0xe100
 8002464:	f880 3300 	strb.w	r3, [r0, #768]	@ 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8002468:	f85d fb04 	ldr.w	pc, [sp], #4
 800246c:	2200      	movs	r2, #0
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800246e:	4694      	mov	ip, r2
 8002470:	e7e7      	b.n	8002442 <HAL_NVIC_SetPriority+0x32>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002472:	4a04      	ldr	r2, [pc, #16]	@ (8002484 <HAL_NVIC_SetPriority+0x74>)
 8002474:	f000 000f 	and.w	r0, r0, #15
 8002478:	4402      	add	r2, r0
 800247a:	7613      	strb	r3, [r2, #24]
 800247c:	f85d fb04 	ldr.w	pc, [sp], #4
 8002480:	e000ed00 	.word	0xe000ed00
 8002484:	e000ecfc 	.word	0xe000ecfc

08002488 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8002488:	2800      	cmp	r0, #0
 800248a:	db07      	blt.n	800249c <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800248c:	2301      	movs	r3, #1
 800248e:	f000 011f 	and.w	r1, r0, #31
 8002492:	4a03      	ldr	r2, [pc, #12]	@ (80024a0 <HAL_NVIC_EnableIRQ+0x18>)
 8002494:	0940      	lsrs	r0, r0, #5
 8002496:	408b      	lsls	r3, r1
 8002498:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 800249c:	4770      	bx	lr
 800249e:	bf00      	nop
 80024a0:	e000e100 	.word	0xe000e100

080024a4 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80024a4:	3801      	subs	r0, #1
 80024a6:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 80024aa:	d301      	bcc.n	80024b0 <HAL_SYSTICK_Config+0xc>
  {
    return (1UL);                                                   /* Reload value impossible */
 80024ac:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 80024ae:	4770      	bx	lr
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80024b0:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80024b4:	f04f 0cf0 	mov.w	ip, #240	@ 0xf0
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80024b8:	2200      	movs	r2, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80024ba:	2107      	movs	r1, #7
{
 80024bc:	b410      	push	{r4}
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80024be:	4c04      	ldr	r4, [pc, #16]	@ (80024d0 <HAL_SYSTICK_Config+0x2c>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80024c0:	6158      	str	r0, [r3, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80024c2:	f884 c023 	strb.w	ip, [r4, #35]	@ 0x23
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80024c6:	4610      	mov	r0, r2
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80024c8:	619a      	str	r2, [r3, #24]
}
 80024ca:	bc10      	pop	{r4}
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80024cc:	6119      	str	r1, [r3, #16]
 80024ce:	4770      	bx	lr
 80024d0:	e000ed00 	.word	0xe000ed00

080024d4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80024d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80024d8:	680d      	ldr	r5, [r1, #0]
{
 80024da:	b083      	sub	sp, #12
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80024dc:	2d00      	cmp	r5, #0
 80024de:	f000 80c3 	beq.w	8002668 <HAL_GPIO_Init+0x194>
 80024e2:	2200      	movs	r2, #0
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80024e4:	4e80      	ldr	r6, [pc, #512]	@ (80026e8 <HAL_GPIO_Init+0x214>)
  uint32_t config = 0x00u;
 80024e6:	4692      	mov	sl, r2
  uint32_t position = 0x00u;
 80024e8:	4613      	mov	r3, r2
      switch (GPIO_Init->Mode)
 80024ea:	f8df 8200 	ldr.w	r8, [pc, #512]	@ 80026ec <HAL_GPIO_Init+0x218>
 80024ee:	4f80      	ldr	r7, [pc, #512]	@ (80026f0 <HAL_GPIO_Init+0x21c>)
 80024f0:	e006      	b.n	8002500 <HAL_GPIO_Init+0x2c>
          CLEAR_BIT(EXTI->IMR, iocurrent);
        }
      }
    }

	position++;
 80024f2:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80024f4:	fa35 f403 	lsrs.w	r4, r5, r3
 80024f8:	f102 0204 	add.w	r2, r2, #4
 80024fc:	f000 80b4 	beq.w	8002668 <HAL_GPIO_Init+0x194>
    ioposition = (0x01uL << position);
 8002500:	2401      	movs	r4, #1
 8002502:	409c      	lsls	r4, r3
    if (iocurrent == ioposition)
 8002504:	ea34 0e05 	bics.w	lr, r4, r5
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002508:	ea04 0c05 	and.w	ip, r4, r5
    if (iocurrent == ioposition)
 800250c:	d1f1      	bne.n	80024f2 <HAL_GPIO_Init+0x1e>
      switch (GPIO_Init->Mode)
 800250e:	684d      	ldr	r5, [r1, #4]
 8002510:	2d12      	cmp	r5, #18
 8002512:	f200 80ac 	bhi.w	800266e <HAL_GPIO_Init+0x19a>
 8002516:	2d12      	cmp	r5, #18
 8002518:	d81a      	bhi.n	8002550 <HAL_GPIO_Init+0x7c>
 800251a:	e8df f005 	tbb	[pc, r5]
 800251e:	c5b3      	.short	0xc5b3
 8002520:	1919ccc1 	.word	0x1919ccc1
 8002524:	19191919 	.word	0x19191919
 8002528:	19191919 	.word	0x19191919
 800252c:	bd191919 	.word	0xbd191919
 8002530:	c8          	.byte	0xc8
 8002531:	00          	.byte	0x00
 8002532:	f8df e1c0 	ldr.w	lr, [pc, #448]	@ 80026f4 <HAL_GPIO_Init+0x220>
 8002536:	4575      	cmp	r5, lr
 8002538:	f000 80a4 	beq.w	8002684 <HAL_GPIO_Init+0x1b0>
 800253c:	f50e 2e70 	add.w	lr, lr, #983040	@ 0xf0000
 8002540:	4575      	cmp	r5, lr
 8002542:	f000 809f 	beq.w	8002684 <HAL_GPIO_Init+0x1b0>
 8002546:	f5ae 1e80 	sub.w	lr, lr, #1048576	@ 0x100000
 800254a:	4575      	cmp	r5, lr
 800254c:	f000 809a 	beq.w	8002684 <HAL_GPIO_Init+0x1b0>
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002550:	f1bc 0fff 	cmp.w	ip, #255	@ 0xff
 8002554:	bf9c      	itt	ls
 8002556:	4686      	movls	lr, r0
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002558:	4693      	movls	fp, r2
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800255a:	f04f 050f 	mov.w	r5, #15
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800255e:	bf84      	itt	hi
 8002560:	f100 0e04 	addhi.w	lr, r0, #4
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002564:	f1a2 0b20 	subhi.w	fp, r2, #32
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002568:	f8de 4000 	ldr.w	r4, [lr]
 800256c:	fa0a f90b 	lsl.w	r9, sl, fp
 8002570:	fa05 fb0b 	lsl.w	fp, r5, fp
 8002574:	ea24 040b 	bic.w	r4, r4, fp
 8002578:	ea44 0409 	orr.w	r4, r4, r9
 800257c:	f8ce 4000 	str.w	r4, [lr]
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002580:	684c      	ldr	r4, [r1, #4]
 8002582:	f014 5f80 	tst.w	r4, #268435456	@ 0x10000000
 8002586:	f000 8085 	beq.w	8002694 <HAL_GPIO_Init+0x1c0>
        __HAL_RCC_AFIO_CLK_ENABLE();
 800258a:	f8d6 e018 	ldr.w	lr, [r6, #24]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800258e:	f003 0903 	and.w	r9, r3, #3
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002592:	f04e 0e01 	orr.w	lr, lr, #1
 8002596:	f8c6 e018 	str.w	lr, [r6, #24]
 800259a:	f8d6 e018 	ldr.w	lr, [r6, #24]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800259e:	ea4f 0989 	mov.w	r9, r9, lsl #2
        __HAL_RCC_AFIO_CLK_ENABLE();
 80025a2:	f00e 0e01 	and.w	lr, lr, #1
 80025a6:	f8cd e004 	str.w	lr, [sp, #4]
 80025aa:	f8dd e004 	ldr.w	lr, [sp, #4]
        temp = AFIO->EXTICR[position >> 2u];
 80025ae:	f023 0e03 	bic.w	lr, r3, #3
 80025b2:	f10e 4e80 	add.w	lr, lr, #1073741824	@ 0x40000000
 80025b6:	f50e 3e80 	add.w	lr, lr, #65536	@ 0x10000
 80025ba:	f8de b008 	ldr.w	fp, [lr, #8]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80025be:	fa05 f509 	lsl.w	r5, r5, r9
 80025c2:	ea2b 0505 	bic.w	r5, fp, r5
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80025c6:	f8df b130 	ldr.w	fp, [pc, #304]	@ 80026f8 <HAL_GPIO_Init+0x224>
 80025ca:	4558      	cmp	r0, fp
 80025cc:	d013      	beq.n	80025f6 <HAL_GPIO_Init+0x122>
 80025ce:	f50b 6b80 	add.w	fp, fp, #1024	@ 0x400
 80025d2:	4558      	cmp	r0, fp
 80025d4:	d079      	beq.n	80026ca <HAL_GPIO_Init+0x1f6>
 80025d6:	f8df b124 	ldr.w	fp, [pc, #292]	@ 80026fc <HAL_GPIO_Init+0x228>
 80025da:	4558      	cmp	r0, fp
 80025dc:	d06e      	beq.n	80026bc <HAL_GPIO_Init+0x1e8>
 80025de:	f8df b120 	ldr.w	fp, [pc, #288]	@ 8002700 <HAL_GPIO_Init+0x22c>
 80025e2:	4558      	cmp	r0, fp
 80025e4:	bf0c      	ite	eq
 80025e6:	f04f 0b03 	moveq.w	fp, #3
 80025ea:	f04f 0b04 	movne.w	fp, #4
 80025ee:	fa0b f909 	lsl.w	r9, fp, r9
 80025f2:	ea45 0509 	orr.w	r5, r5, r9
        AFIO->EXTICR[position >> 2u] = temp;
 80025f6:	f8ce 5008 	str.w	r5, [lr, #8]
          SET_BIT(EXTI->RTSR, iocurrent);
 80025fa:	f8df e108 	ldr.w	lr, [pc, #264]	@ 8002704 <HAL_GPIO_Init+0x230>
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80025fe:	f414 1f80 	tst.w	r4, #1048576	@ 0x100000
          SET_BIT(EXTI->RTSR, iocurrent);
 8002602:	f8de 5008 	ldr.w	r5, [lr, #8]
 8002606:	bf14      	ite	ne
 8002608:	ea45 050c 	orrne.w	r5, r5, ip
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800260c:	ea25 050c 	biceq.w	r5, r5, ip
 8002610:	f8ce 5008 	str.w	r5, [lr, #8]
          SET_BIT(EXTI->FTSR, iocurrent);
 8002614:	f8df e0ec 	ldr.w	lr, [pc, #236]	@ 8002704 <HAL_GPIO_Init+0x230>
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002618:	f414 1f00 	tst.w	r4, #2097152	@ 0x200000
          SET_BIT(EXTI->FTSR, iocurrent);
 800261c:	f8de 500c 	ldr.w	r5, [lr, #12]
 8002620:	bf14      	ite	ne
 8002622:	ea45 050c 	orrne.w	r5, r5, ip
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002626:	ea25 050c 	biceq.w	r5, r5, ip
 800262a:	f8ce 500c 	str.w	r5, [lr, #12]
          SET_BIT(EXTI->EMR, iocurrent);
 800262e:	f8df e0d4 	ldr.w	lr, [pc, #212]	@ 8002704 <HAL_GPIO_Init+0x230>
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002632:	f414 3f00 	tst.w	r4, #131072	@ 0x20000
          SET_BIT(EXTI->EMR, iocurrent);
 8002636:	f8de 5004 	ldr.w	r5, [lr, #4]
 800263a:	bf14      	ite	ne
 800263c:	ea45 050c 	orrne.w	r5, r5, ip
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002640:	ea25 050c 	biceq.w	r5, r5, ip
 8002644:	f8ce 5004 	str.w	r5, [lr, #4]
          SET_BIT(EXTI->IMR, iocurrent);
 8002648:	4d2e      	ldr	r5, [pc, #184]	@ (8002704 <HAL_GPIO_Init+0x230>)
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800264a:	f414 3f80 	tst.w	r4, #65536	@ 0x10000
          SET_BIT(EXTI->IMR, iocurrent);
 800264e:	682c      	ldr	r4, [r5, #0]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002650:	d01d      	beq.n	800268e <HAL_GPIO_Init+0x1ba>
          SET_BIT(EXTI->IMR, iocurrent);
 8002652:	ea44 040c 	orr.w	r4, r4, ip
 8002656:	602c      	str	r4, [r5, #0]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002658:	680d      	ldr	r5, [r1, #0]
	position++;
 800265a:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800265c:	fa35 f403 	lsrs.w	r4, r5, r3
 8002660:	f102 0204 	add.w	r2, r2, #4
 8002664:	f47f af4c 	bne.w	8002500 <HAL_GPIO_Init+0x2c>
  }
}
 8002668:	b003      	add	sp, #12
 800266a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      switch (GPIO_Init->Mode)
 800266e:	4545      	cmp	r5, r8
 8002670:	d008      	beq.n	8002684 <HAL_GPIO_Init+0x1b0>
 8002672:	f67f af5e 	bls.w	8002532 <HAL_GPIO_Init+0x5e>
 8002676:	42bd      	cmp	r5, r7
 8002678:	d004      	beq.n	8002684 <HAL_GPIO_Init+0x1b0>
 800267a:	f8df e08c 	ldr.w	lr, [pc, #140]	@ 8002708 <HAL_GPIO_Init+0x234>
 800267e:	4575      	cmp	r5, lr
 8002680:	f47f af66 	bne.w	8002550 <HAL_GPIO_Init+0x7c>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002684:	688d      	ldr	r5, [r1, #8]
 8002686:	bb3d      	cbnz	r5, 80026d8 <HAL_GPIO_Init+0x204>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002688:	f04f 0a04 	mov.w	sl, #4
 800268c:	e760      	b.n	8002550 <HAL_GPIO_Init+0x7c>
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800268e:	ea24 040c 	bic.w	r4, r4, ip
 8002692:	602c      	str	r4, [r5, #0]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002694:	680d      	ldr	r5, [r1, #0]
 8002696:	e72c      	b.n	80024f2 <HAL_GPIO_Init+0x1e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002698:	68cc      	ldr	r4, [r1, #12]
 800269a:	f104 0a04 	add.w	sl, r4, #4
          break;
 800269e:	e757      	b.n	8002550 <HAL_GPIO_Init+0x7c>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80026a0:	68cc      	ldr	r4, [r1, #12]
 80026a2:	f104 0a08 	add.w	sl, r4, #8
          break;
 80026a6:	e753      	b.n	8002550 <HAL_GPIO_Init+0x7c>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80026a8:	f8d1 a00c 	ldr.w	sl, [r1, #12]
          break;
 80026ac:	e750      	b.n	8002550 <HAL_GPIO_Init+0x7c>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80026ae:	68cc      	ldr	r4, [r1, #12]
 80026b0:	f104 0a0c 	add.w	sl, r4, #12
          break;
 80026b4:	e74c      	b.n	8002550 <HAL_GPIO_Init+0x7c>
      switch (GPIO_Init->Mode)
 80026b6:	f04f 0a00 	mov.w	sl, #0
 80026ba:	e749      	b.n	8002550 <HAL_GPIO_Init+0x7c>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80026bc:	f04f 0b02 	mov.w	fp, #2
 80026c0:	fa0b f909 	lsl.w	r9, fp, r9
 80026c4:	ea45 0509 	orr.w	r5, r5, r9
 80026c8:	e795      	b.n	80025f6 <HAL_GPIO_Init+0x122>
 80026ca:	f04f 0b01 	mov.w	fp, #1
 80026ce:	fa0b f909 	lsl.w	r9, fp, r9
 80026d2:	ea45 0509 	orr.w	r5, r5, r9
 80026d6:	e78e      	b.n	80025f6 <HAL_GPIO_Init+0x122>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80026d8:	2d01      	cmp	r5, #1
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80026da:	f04f 0a08 	mov.w	sl, #8
            GPIOx->BSRR = ioposition;
 80026de:	bf0c      	ite	eq
 80026e0:	6104      	streq	r4, [r0, #16]
            GPIOx->BRR = ioposition;
 80026e2:	6144      	strne	r4, [r0, #20]
 80026e4:	e734      	b.n	8002550 <HAL_GPIO_Init+0x7c>
 80026e6:	bf00      	nop
 80026e8:	40021000 	.word	0x40021000
 80026ec:	10220000 	.word	0x10220000
 80026f0:	10310000 	.word	0x10310000
 80026f4:	10120000 	.word	0x10120000
 80026f8:	40010800 	.word	0x40010800
 80026fc:	40011000 	.word	0x40011000
 8002700:	40011400 	.word	0x40011400
 8002704:	40010400 	.word	0x40010400
 8002708:	10320000 	.word	0x10320000

0800270c <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800270c:	b902      	cbnz	r2, 8002710 <HAL_GPIO_WritePin+0x4>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800270e:	0409      	lsls	r1, r1, #16
 8002710:	6101      	str	r1, [r0, #16]
  }
}
 8002712:	4770      	bx	lr

08002714 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002714:	b538      	push	{r3, r4, r5, lr}
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002716:	b1d0      	cbz	r0, 800274e <HAL_PCD_Init+0x3a>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002718:	f890 3291 	ldrb.w	r3, [r0, #657]	@ 0x291
 800271c:	4604      	mov	r4, r0
 800271e:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 8002722:	2b00      	cmp	r3, #0
 8002724:	f000 80e0 	beq.w	80028e8 <HAL_PCD_Init+0x1d4>
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002728:	2203      	movs	r2, #3

  /* Disable DMA mode for FS instance */
  hpcd->Init.dma_enable = 0U;
 800272a:	2300      	movs	r3, #0

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800272c:	4625      	mov	r5, r4
  hpcd->State = HAL_PCD_STATE_BUSY;
 800272e:	f884 2291 	strb.w	r2, [r4, #657]	@ 0x291
  hpcd->Init.dma_enable = 0U;
 8002732:	7163      	strb	r3, [r4, #5]
  __HAL_PCD_DISABLE(hpcd);
 8002734:	6820      	ldr	r0, [r4, #0]
 8002736:	f001 ffb9 	bl	80046ac <USB_DisableGlobalInt>
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800273a:	f855 0b04 	ldr.w	r0, [r5], #4
 800273e:	e895 000e 	ldmia.w	r5, {r1, r2, r3}
 8002742:	f001 ffa1 	bl	8004688 <USB_CoreInit>
 8002746:	b128      	cbz	r0, 8002754 <HAL_PCD_Init+0x40>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002748:	2302      	movs	r3, #2
 800274a:	f884 3291 	strb.w	r3, [r4, #657]	@ 0x291
    return HAL_ERROR;
 800274e:	2501      	movs	r5, #1
  hpcd->USB_Address = 0U;
  hpcd->State = HAL_PCD_STATE_READY;
  (void)USB_DevDisconnect(hpcd->Instance);

  return HAL_OK;
}
 8002750:	4628      	mov	r0, r5
 8002752:	bd38      	pop	{r3, r4, r5, pc}
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8002754:	4601      	mov	r1, r0
 8002756:	6820      	ldr	r0, [r4, #0]
 8002758:	f001 ffb2 	bl	80046c0 <USB_SetCurrentMode>
 800275c:	2800      	cmp	r0, #0
 800275e:	d1f3      	bne.n	8002748 <HAL_PCD_Init+0x34>
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002760:	7922      	ldrb	r2, [r4, #4]
 8002762:	2a00      	cmp	r2, #0
 8002764:	f000 80ae 	beq.w	80028c4 <HAL_PCD_Init+0x1b0>
    hpcd->IN_ep[i].num = i;
 8002768:	f44f 7380 	mov.w	r3, #256	@ 0x100
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800276c:	2a01      	cmp	r2, #1
    hpcd->IN_ep[i].xfer_buff = 0U;
 800276e:	e9c4 0008 	strd	r0, r0, [r4, #32]
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002772:	74e0      	strb	r0, [r4, #19]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002774:	62a0      	str	r0, [r4, #40]	@ 0x28
    hpcd->IN_ep[i].num = i;
 8002776:	8223      	strh	r3, [r4, #16]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002778:	f000 80bb 	beq.w	80028f2 <HAL_PCD_Init+0x1de>
    hpcd->IN_ep[i].num = i;
 800277c:	f240 1301 	movw	r3, #257	@ 0x101
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002780:	2a02      	cmp	r2, #2
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002782:	e9c4 0012 	strd	r0, r0, [r4, #72]	@ 0x48
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002786:	f884 003b 	strb.w	r0, [r4, #59]	@ 0x3b
    hpcd->IN_ep[i].xfer_len = 0U;
 800278a:	6520      	str	r0, [r4, #80]	@ 0x50
    hpcd->IN_ep[i].num = i;
 800278c:	8723      	strh	r3, [r4, #56]	@ 0x38
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800278e:	d045      	beq.n	800281c <HAL_PCD_Init+0x108>
    hpcd->IN_ep[i].num = i;
 8002790:	f44f 7381 	mov.w	r3, #258	@ 0x102
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002794:	2a03      	cmp	r2, #3
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002796:	e9c4 001c 	strd	r0, r0, [r4, #112]	@ 0x70
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800279a:	f884 0063 	strb.w	r0, [r4, #99]	@ 0x63
    hpcd->IN_ep[i].xfer_len = 0U;
 800279e:	67a0      	str	r0, [r4, #120]	@ 0x78
    hpcd->IN_ep[i].num = i;
 80027a0:	f8a4 3060 	strh.w	r3, [r4, #96]	@ 0x60
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80027a4:	d03a      	beq.n	800281c <HAL_PCD_Init+0x108>
    hpcd->IN_ep[i].num = i;
 80027a6:	f240 1303 	movw	r3, #259	@ 0x103
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80027aa:	2a04      	cmp	r2, #4
    hpcd->IN_ep[i].xfer_buff = 0U;
 80027ac:	e9c4 0026 	strd	r0, r0, [r4, #152]	@ 0x98
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80027b0:	f884 008b 	strb.w	r0, [r4, #139]	@ 0x8b
    hpcd->IN_ep[i].xfer_len = 0U;
 80027b4:	f8c4 00a0 	str.w	r0, [r4, #160]	@ 0xa0
    hpcd->IN_ep[i].num = i;
 80027b8:	f8a4 3088 	strh.w	r3, [r4, #136]	@ 0x88
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80027bc:	d02e      	beq.n	800281c <HAL_PCD_Init+0x108>
    hpcd->IN_ep[i].num = i;
 80027be:	f44f 7382 	mov.w	r3, #260	@ 0x104
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80027c2:	2a05      	cmp	r2, #5
    hpcd->IN_ep[i].xfer_buff = 0U;
 80027c4:	e9c4 0030 	strd	r0, r0, [r4, #192]	@ 0xc0
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80027c8:	f884 00b3 	strb.w	r0, [r4, #179]	@ 0xb3
    hpcd->IN_ep[i].xfer_len = 0U;
 80027cc:	f8c4 00c8 	str.w	r0, [r4, #200]	@ 0xc8
    hpcd->IN_ep[i].num = i;
 80027d0:	f8a4 30b0 	strh.w	r3, [r4, #176]	@ 0xb0
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80027d4:	d022      	beq.n	800281c <HAL_PCD_Init+0x108>
    hpcd->IN_ep[i].num = i;
 80027d6:	f240 1305 	movw	r3, #261	@ 0x105
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80027da:	2a06      	cmp	r2, #6
    hpcd->IN_ep[i].xfer_buff = 0U;
 80027dc:	e9c4 003a 	strd	r0, r0, [r4, #232]	@ 0xe8
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80027e0:	f884 00db 	strb.w	r0, [r4, #219]	@ 0xdb
    hpcd->IN_ep[i].xfer_len = 0U;
 80027e4:	f8c4 00f0 	str.w	r0, [r4, #240]	@ 0xf0
    hpcd->IN_ep[i].num = i;
 80027e8:	f8a4 30d8 	strh.w	r3, [r4, #216]	@ 0xd8
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80027ec:	d016      	beq.n	800281c <HAL_PCD_Init+0x108>
    hpcd->IN_ep[i].num = i;
 80027ee:	f44f 7383 	mov.w	r3, #262	@ 0x106
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80027f2:	2a07      	cmp	r2, #7
    hpcd->IN_ep[i].xfer_buff = 0U;
 80027f4:	e9c4 0044 	strd	r0, r0, [r4, #272]	@ 0x110
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80027f8:	f884 0103 	strb.w	r0, [r4, #259]	@ 0x103
    hpcd->IN_ep[i].xfer_len = 0U;
 80027fc:	f8c4 0118 	str.w	r0, [r4, #280]	@ 0x118
    hpcd->IN_ep[i].num = i;
 8002800:	f8a4 3100 	strh.w	r3, [r4, #256]	@ 0x100
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002804:	d00a      	beq.n	800281c <HAL_PCD_Init+0x108>
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002806:	2300      	movs	r3, #0
    hpcd->IN_ep[i].num = i;
 8002808:	f240 1107 	movw	r1, #263	@ 0x107
    hpcd->IN_ep[i].xfer_buff = 0U;
 800280c:	e9c4 334e 	strd	r3, r3, [r4, #312]	@ 0x138
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002810:	f884 312b 	strb.w	r3, [r4, #299]	@ 0x12b
    hpcd->IN_ep[i].num = i;
 8002814:	f8a4 1128 	strh.w	r1, [r4, #296]	@ 0x128
    hpcd->IN_ep[i].xfer_len = 0U;
 8002818:	f8c4 3140 	str.w	r3, [r4, #320]	@ 0x140
    hpcd->OUT_ep[i].num = i;
 800281c:	2300      	movs	r3, #0
 800281e:	2101      	movs	r1, #1
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002820:	2a02      	cmp	r2, #2
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002822:	e9c4 3358 	strd	r3, r3, [r4, #352]	@ 0x160
 8002826:	e9c4 3362 	strd	r3, r3, [r4, #392]	@ 0x188
    hpcd->OUT_ep[i].num = i;
 800282a:	f8a4 3150 	strh.w	r3, [r4, #336]	@ 0x150
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800282e:	f884 3153 	strb.w	r3, [r4, #339]	@ 0x153
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002832:	f8c4 3168 	str.w	r3, [r4, #360]	@ 0x168
    hpcd->OUT_ep[i].num = i;
 8002836:	f8a4 1178 	strh.w	r1, [r4, #376]	@ 0x178
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800283a:	f884 317b 	strb.w	r3, [r4, #379]	@ 0x17b
    hpcd->OUT_ep[i].xfer_len = 0U;
 800283e:	f8c4 3190 	str.w	r3, [r4, #400]	@ 0x190
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002842:	d03f      	beq.n	80028c4 <HAL_PCD_Init+0x1b0>
    hpcd->OUT_ep[i].num = i;
 8002844:	2102      	movs	r1, #2
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002846:	2a03      	cmp	r2, #3
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002848:	e9c4 336c 	strd	r3, r3, [r4, #432]	@ 0x1b0
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800284c:	f884 31a3 	strb.w	r3, [r4, #419]	@ 0x1a3
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002850:	f8c4 31b8 	str.w	r3, [r4, #440]	@ 0x1b8
    hpcd->OUT_ep[i].num = i;
 8002854:	f8a4 11a0 	strh.w	r1, [r4, #416]	@ 0x1a0
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002858:	d034      	beq.n	80028c4 <HAL_PCD_Init+0x1b0>
    hpcd->OUT_ep[i].num = i;
 800285a:	2103      	movs	r1, #3
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800285c:	2a04      	cmp	r2, #4
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800285e:	e9c4 3376 	strd	r3, r3, [r4, #472]	@ 0x1d8
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002862:	f884 31cb 	strb.w	r3, [r4, #459]	@ 0x1cb
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002866:	f8c4 31e0 	str.w	r3, [r4, #480]	@ 0x1e0
    hpcd->OUT_ep[i].num = i;
 800286a:	f8a4 11c8 	strh.w	r1, [r4, #456]	@ 0x1c8
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800286e:	d029      	beq.n	80028c4 <HAL_PCD_Init+0x1b0>
    hpcd->OUT_ep[i].num = i;
 8002870:	2104      	movs	r1, #4
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002872:	2a05      	cmp	r2, #5
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002874:	e9c4 3380 	strd	r3, r3, [r4, #512]	@ 0x200
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002878:	f884 31f3 	strb.w	r3, [r4, #499]	@ 0x1f3
    hpcd->OUT_ep[i].xfer_len = 0U;
 800287c:	f8c4 3208 	str.w	r3, [r4, #520]	@ 0x208
    hpcd->OUT_ep[i].num = i;
 8002880:	f8a4 11f0 	strh.w	r1, [r4, #496]	@ 0x1f0
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002884:	d01e      	beq.n	80028c4 <HAL_PCD_Init+0x1b0>
    hpcd->OUT_ep[i].num = i;
 8002886:	2105      	movs	r1, #5
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002888:	2a06      	cmp	r2, #6
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800288a:	e9c4 338a 	strd	r3, r3, [r4, #552]	@ 0x228
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800288e:	f884 321b 	strb.w	r3, [r4, #539]	@ 0x21b
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002892:	f8c4 3230 	str.w	r3, [r4, #560]	@ 0x230
    hpcd->OUT_ep[i].num = i;
 8002896:	f8a4 1218 	strh.w	r1, [r4, #536]	@ 0x218
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800289a:	d013      	beq.n	80028c4 <HAL_PCD_Init+0x1b0>
    hpcd->OUT_ep[i].num = i;
 800289c:	2106      	movs	r1, #6
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800289e:	2a07      	cmp	r2, #7
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80028a0:	e9c4 3394 	strd	r3, r3, [r4, #592]	@ 0x250
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80028a4:	f884 3243 	strb.w	r3, [r4, #579]	@ 0x243
    hpcd->OUT_ep[i].xfer_len = 0U;
 80028a8:	f8c4 3258 	str.w	r3, [r4, #600]	@ 0x258
    hpcd->OUT_ep[i].num = i;
 80028ac:	f8a4 1240 	strh.w	r1, [r4, #576]	@ 0x240
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80028b0:	d008      	beq.n	80028c4 <HAL_PCD_Init+0x1b0>
    hpcd->OUT_ep[i].num = i;
 80028b2:	2207      	movs	r2, #7
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80028b4:	e9c4 339e 	strd	r3, r3, [r4, #632]	@ 0x278
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80028b8:	f884 326b 	strb.w	r3, [r4, #619]	@ 0x26b
    hpcd->OUT_ep[i].xfer_len = 0U;
 80028bc:	f8c4 3280 	str.w	r3, [r4, #640]	@ 0x280
    hpcd->OUT_ep[i].num = i;
 80028c0:	f8a4 2268 	strh.w	r2, [r4, #616]	@ 0x268
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80028c4:	e895 000e 	ldmia.w	r5, {r1, r2, r3}
 80028c8:	6820      	ldr	r0, [r4, #0]
 80028ca:	f001 fefb 	bl	80046c4 <USB_DevInit>
 80028ce:	4605      	mov	r5, r0
 80028d0:	2800      	cmp	r0, #0
 80028d2:	f47f af39 	bne.w	8002748 <HAL_PCD_Init+0x34>
  hpcd->State = HAL_PCD_STATE_READY;
 80028d6:	2301      	movs	r3, #1
  hpcd->USB_Address = 0U;
 80028d8:	7360      	strb	r0, [r4, #13]
  (void)USB_DevDisconnect(hpcd->Instance);
 80028da:	6820      	ldr	r0, [r4, #0]
  hpcd->State = HAL_PCD_STATE_READY;
 80028dc:	f884 3291 	strb.w	r3, [r4, #657]	@ 0x291
  (void)USB_DevDisconnect(hpcd->Instance);
 80028e0:	f002 fca8 	bl	8005234 <USB_DevDisconnect>
}
 80028e4:	4628      	mov	r0, r5
 80028e6:	bd38      	pop	{r3, r4, r5, pc}
    hpcd->Lock = HAL_UNLOCKED;
 80028e8:	f880 2290 	strb.w	r2, [r0, #656]	@ 0x290
    HAL_PCD_MspInit(hpcd);
 80028ec:	f003 fbee 	bl	80060cc <HAL_PCD_MspInit>
 80028f0:	e71a      	b.n	8002728 <HAL_PCD_Init+0x14>
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80028f2:	e9c4 0058 	strd	r0, r0, [r4, #352]	@ 0x160
    hpcd->OUT_ep[i].num = i;
 80028f6:	f8a4 0150 	strh.w	r0, [r4, #336]	@ 0x150
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80028fa:	f884 0153 	strb.w	r0, [r4, #339]	@ 0x153
    hpcd->OUT_ep[i].xfer_len = 0U;
 80028fe:	f8c4 0168 	str.w	r0, [r4, #360]	@ 0x168
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002902:	e7df      	b.n	80028c4 <HAL_PCD_Init+0x1b0>

08002904 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8002904:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(hpcd);
 8002906:	f890 3290 	ldrb.w	r3, [r0, #656]	@ 0x290
 800290a:	2b01      	cmp	r3, #1
 800290c:	d012      	beq.n	8002934 <HAL_PCD_Start+0x30>
 800290e:	4604      	mov	r4, r0
 8002910:	2501      	movs	r5, #1
  __HAL_PCD_ENABLE(hpcd);
 8002912:	6800      	ldr	r0, [r0, #0]
  __HAL_LOCK(hpcd);
 8002914:	f884 5290 	strb.w	r5, [r4, #656]	@ 0x290
  __HAL_PCD_ENABLE(hpcd);
 8002918:	f001 febe 	bl	8004698 <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 800291c:	4629      	mov	r1, r5
 800291e:	4620      	mov	r0, r4
 8002920:	f003 fcfc 	bl	800631c <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 8002924:	6820      	ldr	r0, [r4, #0]
 8002926:	f002 fc83 	bl	8005230 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800292a:	2300      	movs	r3, #0
 800292c:	f884 3290 	strb.w	r3, [r4, #656]	@ 0x290

  return HAL_OK;
 8002930:	4618      	mov	r0, r3
}
 8002932:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(hpcd);
 8002934:	2002      	movs	r0, #2
}
 8002936:	bd38      	pop	{r3, r4, r5, pc}

08002938 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8002938:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800293c:	4604      	mov	r4, r0
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 800293e:	6800      	ldr	r0, [r0, #0]
 8002940:	f002 fc7a 	bl	8005238 <USB_ReadInterrupts>
  uint16_t store_ep[8];
  uint8_t i;

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 8002944:	f410 4500 	ands.w	r5, r0, #32768	@ 0x8000
 8002948:	d126      	bne.n	8002998 <HAL_PCD_IRQHandler+0x60>
    (void)PCD_EP_ISR_Handler(hpcd);

    return;
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 800294a:	0542      	lsls	r2, r0, #21
 800294c:	f100 819e 	bmi.w	8002c8c <HAL_PCD_IRQHandler+0x354>
    (void)HAL_PCD_SetAddress(hpcd, 0U);

    return;
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 8002950:	0443      	lsls	r3, r0, #17
 8002952:	d416      	bmi.n	8002982 <HAL_PCD_IRQHandler+0x4a>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);

    return;
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 8002954:	0487      	lsls	r7, r0, #18
 8002956:	f100 821a 	bmi.w	8002d8e <HAL_PCD_IRQHandler+0x456>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);

    return;
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 800295a:	04c6      	lsls	r6, r0, #19
 800295c:	f100 82e9 	bmi.w	8002f32 <HAL_PCD_IRQHandler+0x5fa>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);

    return;
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 8002960:	0505      	lsls	r5, r0, #20
 8002962:	d47c      	bmi.n	8002a5e <HAL_PCD_IRQHandler+0x126>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 8002964:	0582      	lsls	r2, r0, #22
 8002966:	f100 839b 	bmi.w	80030a0 <HAL_PCD_IRQHandler+0x768>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 800296a:	05c3      	lsls	r3, r0, #23
 800296c:	d512      	bpl.n	8002994 <HAL_PCD_IRQHandler+0x5c>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 800296e:	6822      	ldr	r2, [r4, #0]
 8002970:	f8b2 3044 	ldrh.w	r3, [r2, #68]	@ 0x44
 8002974:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002978:	041b      	lsls	r3, r3, #16
 800297a:	0c1b      	lsrs	r3, r3, #16
 800297c:	f8a2 3044 	strh.w	r3, [r2, #68]	@ 0x44

    return;
 8002980:	e008      	b.n	8002994 <HAL_PCD_IRQHandler+0x5c>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8002982:	6822      	ldr	r2, [r4, #0]
 8002984:	f8b2 3044 	ldrh.w	r3, [r2, #68]	@ 0x44
 8002988:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800298c:	041b      	lsls	r3, r3, #16
 800298e:	0c1b      	lsrs	r3, r3, #16
 8002990:	f8a2 3044 	strh.w	r3, [r2, #68]	@ 0x44
  }
}
 8002994:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8002998:	6820      	ldr	r0, [r4, #0]
 800299a:	f8b0 3044 	ldrh.w	r3, [r0, #68]	@ 0x44
 800299e:	041a      	lsls	r2, r3, #16
 80029a0:	d5f8      	bpl.n	8002994 <HAL_PCD_IRQHandler+0x5c>
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 80029a2:	f640 778f 	movw	r7, #3983	@ 0xf8f
      if ((wEPVal & USB_EP_CTR_TX) != 0U)
      {
        ep = &hpcd->IN_ep[epindex];

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 80029a6:	4ec8      	ldr	r6, [pc, #800]	@ (8002cc8 <HAL_PCD_IRQHandler+0x390>)
 80029a8:	e010      	b.n	80029cc <HAL_PCD_IRQHandler+0x94>
      if ((wIstr & USB_ISTR_DIR) == 0U)
 80029aa:	f011 0110 	ands.w	r1, r1, #16
 80029ae:	f000 80f4 	beq.w	8002b9a <HAL_PCD_IRQHandler+0x262>
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 80029b2:	8801      	ldrh	r1, [r0, #0]
        if ((wEPVal & USB_EP_SETUP) != 0U)
 80029b4:	f411 6500 	ands.w	r5, r1, #2048	@ 0x800
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 80029b8:	b28b      	uxth	r3, r1
        if ((wEPVal & USB_EP_SETUP) != 0U)
 80029ba:	f040 8115 	bne.w	8002be8 <HAL_PCD_IRQHandler+0x2b0>
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80029be:	041b      	lsls	r3, r3, #16
 80029c0:	f100 8184 	bmi.w	8002ccc <HAL_PCD_IRQHandler+0x394>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80029c4:	f8b0 3044 	ldrh.w	r3, [r0, #68]	@ 0x44
 80029c8:	0419      	lsls	r1, r3, #16
 80029ca:	d5e3      	bpl.n	8002994 <HAL_PCD_IRQHandler+0x5c>
    wIstr = hpcd->Instance->ISTR;
 80029cc:	f8b0 5044 	ldrh.w	r5, [r0, #68]	@ 0x44
 80029d0:	b2a9      	uxth	r1, r5
    if (epindex == 0U)
 80029d2:	f015 050f 	ands.w	r5, r5, #15
 80029d6:	d0e8      	beq.n	80029aa <HAL_PCD_IRQHandler+0x72>
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 80029d8:	f830 3025 	ldrh.w	r3, [r0, r5, lsl #2]
 80029dc:	ea4f 0885 	mov.w	r8, r5, lsl #2
      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80029e0:	0419      	lsls	r1, r3, #16
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 80029e2:	fa1f f983 	uxth.w	r9, r3
      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80029e6:	f100 8094 	bmi.w	8002b12 <HAL_PCD_IRQHandler+0x1da>
      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 80029ea:	f019 0f80 	tst.w	r9, #128	@ 0x80
 80029ee:	d0e9      	beq.n	80029c4 <HAL_PCD_IRQHandler+0x8c>
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 80029f0:	f830 3025 	ldrh.w	r3, [r0, r5, lsl #2]
 80029f4:	b29b      	uxth	r3, r3
 80029f6:	4033      	ands	r3, r6
 80029f8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80029fc:	f820 3025 	strh.w	r3, [r0, r5, lsl #2]

        if (ep->type == EP_TYPE_ISOC)
 8002a00:	eb08 0305 	add.w	r3, r8, r5
 8002a04:	eb04 02c3 	add.w	r2, r4, r3, lsl #3
 8002a08:	7cd1      	ldrb	r1, [r2, #19]
 8002a0a:	00db      	lsls	r3, r3, #3
 8002a0c:	2901      	cmp	r1, #1
 8002a0e:	f000 81c9 	beq.w	8002da4 <HAL_PCD_IRQHandler+0x46c>
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8002a12:	f892 c010 	ldrb.w	ip, [r2, #16]
          if ((wEPVal & USB_EP_KIND) == 0U)
 8002a16:	f419 7a80 	ands.w	sl, r9, #256	@ 0x100

            if (ep->xfer_len > TxPctSize)
 8002a1a:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8002a1c:	f500 6e80 	add.w	lr, r0, #1024	@ 0x400
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8002a20:	ea4f 0bcc 	mov.w	fp, ip, lsl #3
          if ((wEPVal & USB_EP_KIND) == 0U)
 8002a24:	f040 81f1 	bne.w	8002e0a <HAL_PCD_IRQHandler+0x4d2>
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8002a28:	f8b0 5050 	ldrh.w	r5, [r0, #80]	@ 0x50
 8002a2c:	b2ad      	uxth	r5, r5
 8002a2e:	445d      	add	r5, fp
 8002a30:	3502      	adds	r5, #2
 8002a32:	f83e 5015 	ldrh.w	r5, [lr, r5, lsl #1]
            if (ep->xfer_len > TxPctSize)
 8002a36:	f3c5 0509 	ubfx	r5, r5, #0, #10
 8002a3a:	428d      	cmp	r5, r1
 8002a3c:	f080 81dd 	bcs.w	8002dfa <HAL_PCD_IRQHandler+0x4c2>
            {
              ep->xfer_len -= TxPctSize;
 8002a40:	1b49      	subs	r1, r1, r5
 8002a42:	6291      	str	r1, [r2, #40]	@ 0x28
        ep = &hpcd->IN_ep[epindex];
 8002a44:	f103 0110 	add.w	r1, r3, #16
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 8002a48:	6a53      	ldr	r3, [r2, #36]	@ 0x24
              ep->xfer_count += TxPctSize;
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002a4a:	4421      	add	r1, r4
              ep->xfer_buff += TxPctSize;
 8002a4c:	442b      	add	r3, r5
 8002a4e:	6253      	str	r3, [r2, #36]	@ 0x24
              ep->xfer_count += TxPctSize;
 8002a50:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 8002a52:	442b      	add	r3, r5
 8002a54:	62d3      	str	r3, [r2, #44]	@ 0x2c
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002a56:	f002 f8f5 	bl	8004c44 <USB_EPStartXfer>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8002a5a:	6820      	ldr	r0, [r4, #0]
 8002a5c:	e7b2      	b.n	80029c4 <HAL_PCD_IRQHandler+0x8c>
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 8002a5e:	6823      	ldr	r3, [r4, #0]
 8002a60:	f8b3 9000 	ldrh.w	r9, [r3]
 8002a64:	f8b3 8004 	ldrh.w	r8, [r3, #4]
 8002a68:	f8b3 e008 	ldrh.w	lr, [r3, #8]
 8002a6c:	f8b3 c00c 	ldrh.w	ip, [r3, #12]
 8002a70:	8a1f      	ldrh	r7, [r3, #16]
 8002a72:	8a9e      	ldrh	r6, [r3, #20]
 8002a74:	8b1d      	ldrh	r5, [r3, #24]
 8002a76:	8b99      	ldrh	r1, [r3, #28]
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 8002a78:	f8b3 2040 	ldrh.w	r2, [r3, #64]	@ 0x40
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 8002a7c:	fa1f f989 	uxth.w	r9, r9
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 8002a80:	b292      	uxth	r2, r2
 8002a82:	f042 0201 	orr.w	r2, r2, #1
 8002a86:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 8002a8a:	f8b3 2040 	ldrh.w	r2, [r3, #64]	@ 0x40
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 8002a8e:	fa1f f888 	uxth.w	r8, r8
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 8002a92:	f022 0201 	bic.w	r2, r2, #1
 8002a96:	0412      	lsls	r2, r2, #16
 8002a98:	0c12      	lsrs	r2, r2, #16
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 8002a9a:	fa1f fe8e 	uxth.w	lr, lr
 8002a9e:	fa1f fc8c 	uxth.w	ip, ip
 8002aa2:	b2bf      	uxth	r7, r7
 8002aa4:	b2b6      	uxth	r6, r6
 8002aa6:	b2ad      	uxth	r5, r5
 8002aa8:	b289      	uxth	r1, r1
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 8002aaa:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 8002aae:	f8b3 2044 	ldrh.w	r2, [r3, #68]	@ 0x44
 8002ab2:	0550      	lsls	r0, r2, #21
 8002ab4:	d5fb      	bpl.n	8002aae <HAL_PCD_IRQHandler+0x176>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8002ab6:	f8b3 2044 	ldrh.w	r2, [r3, #68]	@ 0x44
    HAL_PCD_SuspendCallback(hpcd);
 8002aba:	4620      	mov	r0, r4
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8002abc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002ac0:	0412      	lsls	r2, r2, #16
 8002ac2:	0c12      	lsrs	r2, r2, #16
 8002ac4:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 8002ac8:	f8a3 9000 	strh.w	r9, [r3]
 8002acc:	f8a3 8004 	strh.w	r8, [r3, #4]
 8002ad0:	f8a3 e008 	strh.w	lr, [r3, #8]
 8002ad4:	f8a3 c00c 	strh.w	ip, [r3, #12]
 8002ad8:	821f      	strh	r7, [r3, #16]
 8002ada:	829e      	strh	r6, [r3, #20]
 8002adc:	831d      	strh	r5, [r3, #24]
 8002ade:	8399      	strh	r1, [r3, #28]
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8002ae0:	f8b3 2040 	ldrh.w	r2, [r3, #64]	@ 0x40
 8002ae4:	b292      	uxth	r2, r2
 8002ae6:	f042 0208 	orr.w	r2, r2, #8
 8002aea:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8002aee:	f8b3 2044 	ldrh.w	r2, [r3, #68]	@ 0x44
 8002af2:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002af6:	0412      	lsls	r2, r2, #16
 8002af8:	0c12      	lsrs	r2, r2, #16
 8002afa:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 8002afe:	f8b3 2040 	ldrh.w	r2, [r3, #64]	@ 0x40
 8002b02:	b292      	uxth	r2, r2
 8002b04:	f042 0204 	orr.w	r2, r2, #4
 8002b08:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    HAL_PCD_SuspendCallback(hpcd);
 8002b0c:	f003 fb30 	bl	8006170 <HAL_PCD_SuspendCallback>
    return;
 8002b10:	e740      	b.n	8002994 <HAL_PCD_IRQHandler+0x5c>
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8002b12:	f830 3025 	ldrh.w	r3, [r0, r5, lsl #2]
        if (ep->doublebuffer == 0U)
 8002b16:	eb08 0105 	add.w	r1, r8, r5
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8002b1a:	403b      	ands	r3, r7
 8002b1c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002b20:	f820 3025 	strh.w	r3, [r0, r5, lsl #2]
        if (ep->doublebuffer == 0U)
 8002b24:	eb04 01c1 	add.w	r1, r4, r1, lsl #3
 8002b28:	f891 315c 	ldrb.w	r3, [r1, #348]	@ 0x15c
 8002b2c:	f500 6280 	add.w	r2, r0, #1024	@ 0x400
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d179      	bne.n	8002c28 <HAL_PCD_IRQHandler+0x2f0>
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002b34:	f8b0 3050 	ldrh.w	r3, [r0, #80]	@ 0x50
 8002b38:	f891 c150 	ldrb.w	ip, [r1, #336]	@ 0x150
 8002b3c:	b29b      	uxth	r3, r3
 8002b3e:	3306      	adds	r3, #6
 8002b40:	eb03 03cc 	add.w	r3, r3, ip, lsl #3
 8002b44:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002b48:	f3c3 0309 	ubfx	r3, r3, #0, #10
          if (count != 0U)
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	f040 820e 	bne.w	8002f6e <HAL_PCD_IRQHandler+0x636>
{
 8002b52:	f04f 0a00 	mov.w	sl, #0
        ep->xfer_count += count;
 8002b56:	eb08 0205 	add.w	r2, r8, r5
 8002b5a:	eb04 03c2 	add.w	r3, r4, r2, lsl #3
 8002b5e:	00d1      	lsls	r1, r2, #3
 8002b60:	f8d3 216c 	ldr.w	r2, [r3, #364]	@ 0x16c
 8002b64:	4452      	add	r2, sl
 8002b66:	f8c3 216c 	str.w	r2, [r3, #364]	@ 0x16c
        ep->xfer_buff += count;
 8002b6a:	f8d3 2164 	ldr.w	r2, [r3, #356]	@ 0x164
 8002b6e:	4452      	add	r2, sl
 8002b70:	f8c3 2164 	str.w	r2, [r3, #356]	@ 0x164
        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8002b74:	f8d3 2168 	ldr.w	r2, [r3, #360]	@ 0x168
 8002b78:	b122      	cbz	r2, 8002b84 <HAL_PCD_IRQHandler+0x24c>
 8002b7a:	f8d3 3160 	ldr.w	r3, [r3, #352]	@ 0x160
 8002b7e:	4553      	cmp	r3, sl
 8002b80:	f240 81bd 	bls.w	8002efe <HAL_PCD_IRQHandler+0x5c6>
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8002b84:	eb08 0305 	add.w	r3, r8, r5
 8002b88:	eb04 03c3 	add.w	r3, r4, r3, lsl #3
 8002b8c:	4620      	mov	r0, r4
 8002b8e:	f893 1150 	ldrb.w	r1, [r3, #336]	@ 0x150
 8002b92:	f003 fac3 	bl	800611c <HAL_PCD_DataOutStageCallback>
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8002b96:	6820      	ldr	r0, [r4, #0]
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8002b98:	e727      	b.n	80029ea <HAL_PCD_IRQHandler+0xb2>
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002b9a:	8803      	ldrh	r3, [r0, #0]
 8002b9c:	b29b      	uxth	r3, r3
 8002b9e:	4033      	ands	r3, r6
 8002ba0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002ba4:	8003      	strh	r3, [r0, #0]
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8002ba6:	f8b0 3050 	ldrh.w	r3, [r0, #80]	@ 0x50
 8002baa:	7c22      	ldrb	r2, [r4, #16]
 8002bac:	b29b      	uxth	r3, r3
 8002bae:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8002bb2:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8002bb6:	f8b3 3404 	ldrh.w	r3, [r3, #1028]	@ 0x404
        ep->xfer_buff += ep->xfer_count;
 8002bba:	6a62      	ldr	r2, [r4, #36]	@ 0x24
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8002bbc:	f3c3 0309 	ubfx	r3, r3, #0, #10
        ep->xfer_buff += ep->xfer_count;
 8002bc0:	441a      	add	r2, r3
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8002bc2:	62e3      	str	r3, [r4, #44]	@ 0x2c
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8002bc4:	4620      	mov	r0, r4
        ep->xfer_buff += ep->xfer_count;
 8002bc6:	6262      	str	r2, [r4, #36]	@ 0x24
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8002bc8:	f003 fab2 	bl	8006130 <HAL_PCD_DataInStageCallback>
        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8002bcc:	7b63      	ldrb	r3, [r4, #13]
 8002bce:	b34b      	cbz	r3, 8002c24 <HAL_PCD_IRQHandler+0x2ec>
 8002bd0:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8002bd2:	6820      	ldr	r0, [r4, #0]
        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	f47f aef5 	bne.w	80029c4 <HAL_PCD_IRQHandler+0x8c>
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8002bda:	7b62      	ldrb	r2, [r4, #13]
 8002bdc:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8002be0:	f8a0 204c 	strh.w	r2, [r0, #76]	@ 0x4c
          hpcd->USB_Address = 0U;
 8002be4:	7363      	strb	r3, [r4, #13]
 8002be6:	e6ed      	b.n	80029c4 <HAL_PCD_IRQHandler+0x8c>
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002be8:	f8b0 3050 	ldrh.w	r3, [r0, #80]	@ 0x50
 8002bec:	f894 2150 	ldrb.w	r2, [r4, #336]	@ 0x150
 8002bf0:	b29b      	uxth	r3, r3
 8002bf2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8002bf6:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8002bfa:	f8b3 340c 	ldrh.w	r3, [r3, #1036]	@ 0x40c
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8002bfe:	f8b4 2156 	ldrh.w	r2, [r4, #342]	@ 0x156
 8002c02:	f3c3 0309 	ubfx	r3, r3, #0, #10
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002c06:	f8c4 316c 	str.w	r3, [r4, #364]	@ 0x16c
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8002c0a:	f504 7126 	add.w	r1, r4, #664	@ 0x298
 8002c0e:	f002 fb29 	bl	8005264 <USB_ReadPMA>
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002c12:	6822      	ldr	r2, [r4, #0]
          HAL_PCD_SetupStageCallback(hpcd);
 8002c14:	4620      	mov	r0, r4
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002c16:	8813      	ldrh	r3, [r2, #0]
 8002c18:	403b      	ands	r3, r7
 8002c1a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002c1e:	8013      	strh	r3, [r2, #0]
          HAL_PCD_SetupStageCallback(hpcd);
 8002c20:	f003 fa74 	bl	800610c <HAL_PCD_SetupStageCallback>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8002c24:	6820      	ldr	r0, [r4, #0]
 8002c26:	e6cd      	b.n	80029c4 <HAL_PCD_IRQHandler+0x8c>
          if (ep->type == EP_TYPE_BULK)
 8002c28:	f891 3153 	ldrb.w	r3, [r1, #339]	@ 0x153

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002c2c:	f891 c150 	ldrb.w	ip, [r1, #336]	@ 0x150
          if (ep->type == EP_TYPE_BULK)
 8002c30:	2b02      	cmp	r3, #2
 8002c32:	f000 81ec 	beq.w	800300e <HAL_PCD_IRQHandler+0x6d6>
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8002c36:	f830 302c 	ldrh.w	r3, [r0, ip, lsl #2]
 8002c3a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002c3e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002c42:	041b      	lsls	r3, r3, #16
 8002c44:	0c1b      	lsrs	r3, r3, #16
 8002c46:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002c4a:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8002c4e:	f820 302c 	strh.w	r3, [r0, ip, lsl #2]
            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8002c52:	f891 c150 	ldrb.w	ip, [r1, #336]	@ 0x150
 8002c56:	f830 302c 	ldrh.w	r3, [r0, ip, lsl #2]
 8002c5a:	f413 4f80 	tst.w	r3, #16384	@ 0x4000
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002c5e:	f8b0 3050 	ldrh.w	r3, [r0, #80]	@ 0x50
 8002c62:	b29b      	uxth	r3, r3
            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8002c64:	f000 8153 	beq.w	8002f0e <HAL_PCD_IRQHandler+0x5d6>
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002c68:	3302      	adds	r3, #2
 8002c6a:	eb03 03cc 	add.w	r3, r3, ip, lsl #3
 8002c6e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002c72:	f3c3 0309 	ubfx	r3, r3, #0, #10
              if (count != 0U)
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	f43f af6b 	beq.w	8002b52 <HAL_PCD_IRQHandler+0x21a>
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8002c7c:	f8b1 2158 	ldrh.w	r2, [r1, #344]	@ 0x158
 8002c80:	f8d1 1164 	ldr.w	r1, [r1, #356]	@ 0x164
        ep->xfer_count += count;
 8002c84:	469a      	mov	sl, r3
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8002c86:	f002 faed 	bl	8005264 <USB_ReadPMA>
 8002c8a:	e764      	b.n	8002b56 <HAL_PCD_IRQHandler+0x21e>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8002c8c:	6822      	ldr	r2, [r4, #0]
    HAL_PCD_ResetCallback(hpcd);
 8002c8e:	4620      	mov	r0, r4
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8002c90:	f8b2 3044 	ldrh.w	r3, [r2, #68]	@ 0x44
 8002c94:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8002c98:	041b      	lsls	r3, r3, #16
 8002c9a:	0c1b      	lsrs	r3, r3, #16
 8002c9c:	f8a2 3044 	strh.w	r3, [r2, #68]	@ 0x44
    HAL_PCD_ResetCallback(hpcd);
 8002ca0:	f003 fa54 	bl	800614c <HAL_PCD_ResetCallback>
  __HAL_LOCK(hpcd);
 8002ca4:	f894 3290 	ldrb.w	r3, [r4, #656]	@ 0x290
 8002ca8:	2b01      	cmp	r3, #1
 8002caa:	f43f ae73 	beq.w	8002994 <HAL_PCD_IRQHandler+0x5c>
 8002cae:	2301      	movs	r3, #1
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8002cb0:	4629      	mov	r1, r5
 8002cb2:	6820      	ldr	r0, [r4, #0]
  hpcd->USB_Address = address;
 8002cb4:	7365      	strb	r5, [r4, #13]
  __HAL_LOCK(hpcd);
 8002cb6:	f884 3290 	strb.w	r3, [r4, #656]	@ 0x290
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8002cba:	f002 fab3 	bl	8005224 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8002cbe:	f884 5290 	strb.w	r5, [r4, #656]	@ 0x290
}
 8002cc2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002cc6:	bf00      	nop
 8002cc8:	ffff8f0f 	.word	0xffff8f0f
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002ccc:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8002cd0:	8802      	ldrh	r2, [r0, #0]
 8002cd2:	4013      	ands	r3, r2
 8002cd4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002cd8:	8003      	strh	r3, [r0, #0]
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002cda:	f8b0 3050 	ldrh.w	r3, [r0, #80]	@ 0x50
 8002cde:	f894 2150 	ldrb.w	r2, [r4, #336]	@ 0x150
 8002ce2:	b29b      	uxth	r3, r3
 8002ce4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8002ce8:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8002cec:	f8b3 340c 	ldrh.w	r3, [r3, #1036]	@ 0x40c
 8002cf0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002cf4:	f8c4 316c 	str.w	r3, [r4, #364]	@ 0x16c
          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8002cf8:	b193      	cbz	r3, 8002d20 <HAL_PCD_IRQHandler+0x3e8>
 8002cfa:	f8d4 1164 	ldr.w	r1, [r4, #356]	@ 0x164
 8002cfe:	b179      	cbz	r1, 8002d20 <HAL_PCD_IRQHandler+0x3e8>
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8002d00:	f8b4 2156 	ldrh.w	r2, [r4, #342]	@ 0x156
 8002d04:	f002 faae 	bl	8005264 <USB_ReadPMA>
            ep->xfer_buff += ep->xfer_count;
 8002d08:	f8d4 3164 	ldr.w	r3, [r4, #356]	@ 0x164
 8002d0c:	f8d4 216c 	ldr.w	r2, [r4, #364]	@ 0x16c
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8002d10:	4620      	mov	r0, r4
            ep->xfer_buff += ep->xfer_count;
 8002d12:	4413      	add	r3, r2
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8002d14:	4629      	mov	r1, r5
            ep->xfer_buff += ep->xfer_count;
 8002d16:	f8c4 3164 	str.w	r3, [r4, #356]	@ 0x164
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8002d1a:	f003 f9ff 	bl	800611c <HAL_PCD_DataOutStageCallback>
          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8002d1e:	6820      	ldr	r0, [r4, #0]
 8002d20:	8803      	ldrh	r3, [r0, #0]
          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 8002d22:	0519      	lsls	r1, r3, #20
          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8002d24:	b29a      	uxth	r2, r3
          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 8002d26:	f53f ae4d 	bmi.w	80029c4 <HAL_PCD_IRQHandler+0x8c>
 8002d2a:	f402 5240 	and.w	r2, r2, #12288	@ 0x3000
 8002d2e:	f5b2 5f40 	cmp.w	r2, #12288	@ 0x3000
 8002d32:	f43f ae47 	beq.w	80029c4 <HAL_PCD_IRQHandler+0x8c>
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8002d36:	f8b0 3050 	ldrh.w	r3, [r0, #80]	@ 0x50
 8002d3a:	f200 410c 	addw	r1, r0, #1036	@ 0x40c
 8002d3e:	b29b      	uxth	r3, r3
 8002d40:	5aca      	ldrh	r2, [r1, r3]
 8002d42:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8002d46:	52ca      	strh	r2, [r1, r3]
 8002d48:	f8d4 2160 	ldr.w	r2, [r4, #352]	@ 0x160
 8002d4c:	2a3e      	cmp	r2, #62	@ 0x3e
 8002d4e:	f240 81b4 	bls.w	80030ba <HAL_PCD_IRQHandler+0x782>
 8002d52:	0955      	lsrs	r5, r2, #5
 8002d54:	06d2      	lsls	r2, r2, #27
 8002d56:	5aca      	ldrh	r2, [r1, r3]
 8002d58:	bf08      	it	eq
 8002d5a:	f105 35ff 	addeq.w	r5, r5, #4294967295	@ 0xffffffff
 8002d5e:	b292      	uxth	r2, r2
 8002d60:	ea42 2285 	orr.w	r2, r2, r5, lsl #10
 8002d64:	ea6f 4242 	mvn.w	r2, r2, lsl #17
 8002d68:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 8002d6c:	b292      	uxth	r2, r2
 8002d6e:	52ca      	strh	r2, [r1, r3]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8002d70:	8803      	ldrh	r3, [r0, #0]
 8002d72:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8002d76:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002d7a:	041b      	lsls	r3, r3, #16
 8002d7c:	0c1b      	lsrs	r3, r3, #16
 8002d7e:	f483 5340 	eor.w	r3, r3, #12288	@ 0x3000
 8002d82:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002d86:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002d8a:	8003      	strh	r3, [r0, #0]
 8002d8c:	e61a      	b.n	80029c4 <HAL_PCD_IRQHandler+0x8c>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8002d8e:	6822      	ldr	r2, [r4, #0]
 8002d90:	f8b2 3044 	ldrh.w	r3, [r2, #68]	@ 0x44
 8002d94:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8002d98:	041b      	lsls	r3, r3, #16
 8002d9a:	0c1b      	lsrs	r3, r3, #16
 8002d9c:	f8a2 3044 	strh.w	r3, [r2, #68]	@ 0x44
}
 8002da0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
          ep->xfer_len = 0U;
 8002da4:	2100      	movs	r1, #0
 8002da6:	1c6b      	adds	r3, r5, #1
 8002da8:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8002dac:	f844 1033 	str.w	r1, [r4, r3, lsl #3]
          if (ep->doublebuffer != 0U)
 8002db0:	7f13      	ldrb	r3, [r2, #28]
 8002db2:	b1c3      	cbz	r3, 8002de6 <HAL_PCD_IRQHandler+0x4ae>
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8002db4:	f019 0940 	ands.w	r9, r9, #64	@ 0x40
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002db8:	7c53      	ldrb	r3, [r2, #17]
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8002dba:	f040 811d 	bne.w	8002ff8 <HAL_PCD_IRQHandler+0x6c0>
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	f040 8208 	bne.w	80031d4 <HAL_PCD_IRQHandler+0x89c>
 8002dc4:	7c13      	ldrb	r3, [r2, #16]
 8002dc6:	f8b0 2050 	ldrh.w	r2, [r0, #80]	@ 0x50
 8002dca:	eb00 1303 	add.w	r3, r0, r3, lsl #4
 8002dce:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8002dd2:	b292      	uxth	r2, r2
 8002dd4:	5a99      	ldrh	r1, [r3, r2]
 8002dd6:	f3c1 0109 	ubfx	r1, r1, #0, #10
 8002dda:	5299      	strh	r1, [r3, r2]
 8002ddc:	5a99      	ldrh	r1, [r3, r2]
 8002dde:	b289      	uxth	r1, r1
 8002de0:	f441 4100 	orr.w	r1, r1, #32768	@ 0x8000
 8002de4:	5299      	strh	r1, [r3, r2]
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002de6:	44a8      	add	r8, r5
 8002de8:	eb04 08c8 	add.w	r8, r4, r8, lsl #3
 8002dec:	4620      	mov	r0, r4
 8002dee:	f898 1010 	ldrb.w	r1, [r8, #16]
 8002df2:	f003 f99d 	bl	8006130 <HAL_PCD_DataInStageCallback>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8002df6:	6820      	ldr	r0, [r4, #0]
 8002df8:	e5e4      	b.n	80029c4 <HAL_PCD_IRQHandler+0x8c>
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002dfa:	4620      	mov	r0, r4
 8002dfc:	4661      	mov	r1, ip
 8002dfe:	f8c2 a028 	str.w	sl, [r2, #40]	@ 0x28
 8002e02:	f003 f995 	bl	8006130 <HAL_PCD_DataInStageCallback>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8002e06:	6820      	ldr	r0, [r4, #0]
 8002e08:	e5dc      	b.n	80029c4 <HAL_PCD_IRQHandler+0x8c>

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002e0a:	f8b0 3050 	ldrh.w	r3, [r0, #80]	@ 0x50
 8002e0e:	f409 4a80 	and.w	sl, r9, #16384	@ 0x4000
 8002e12:	b29b      	uxth	r3, r3
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8002e14:	f019 0940 	ands.w	r9, r9, #64	@ 0x40
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002e18:	445b      	add	r3, fp
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8002e1a:	f000 80b0 	beq.w	8002f7e <HAL_PCD_IRQHandler+0x646>
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002e1e:	3302      	adds	r3, #2
 8002e20:	f83e 3013 	ldrh.w	r3, [lr, r3, lsl #1]
 8002e24:	f3c3 0309 	ubfx	r3, r3, #0, #10

    if (ep->xfer_len > TxPctSize)
 8002e28:	428b      	cmp	r3, r1
 8002e2a:	f080 819f 	bcs.w	800316c <HAL_PCD_IRQHandler+0x834>
    {
      ep->xfer_len -= TxPctSize;
 8002e2e:	1ac9      	subs	r1, r1, r3
 8002e30:	6291      	str	r1, [r2, #40]	@ 0x28
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002e32:	f1ba 0f00 	cmp.w	sl, #0
 8002e36:	d00d      	beq.n	8002e54 <HAL_PCD_IRQHandler+0x51c>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8002e38:	f830 102c 	ldrh.w	r1, [r0, ip, lsl #2]
 8002e3c:	f421 41e0 	bic.w	r1, r1, #28672	@ 0x7000
 8002e40:	f021 0170 	bic.w	r1, r1, #112	@ 0x70
 8002e44:	0409      	lsls	r1, r1, #16
 8002e46:	0c09      	lsrs	r1, r1, #16
 8002e48:	f441 4140 	orr.w	r1, r1, #49152	@ 0xc000
 8002e4c:	f041 0180 	orr.w	r1, r1, #128	@ 0x80
 8002e50:	f820 102c 	strh.w	r1, [r0, ip, lsl #2]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8002e54:	eb08 0e05 	add.w	lr, r8, r5
 8002e58:	eb04 0ece 	add.w	lr, r4, lr, lsl #3
 8002e5c:	f89e 1034 	ldrb.w	r1, [lr, #52]	@ 0x34
 8002e60:	2901      	cmp	r1, #1
 8002e62:	f040 80b3 	bne.w	8002fcc <HAL_PCD_IRQHandler+0x694>
      {
        ep->xfer_buff += TxPctSize;
 8002e66:	f8de 1024 	ldr.w	r1, [lr, #36]	@ 0x24
 8002e6a:	4419      	add	r1, r3
 8002e6c:	f8ce 1024 	str.w	r1, [lr, #36]	@ 0x24
        ep->xfer_count += TxPctSize;
 8002e70:	f8d2 902c 	ldr.w	r9, [r2, #44]	@ 0x2c
 8002e74:	4499      	add	r9, r3
 8002e76:	f8c2 902c 	str.w	r9, [r2, #44]	@ 0x2c

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8002e7a:	f8de 9030 	ldr.w	r9, [lr, #48]	@ 0x30
 8002e7e:	f8de 2020 	ldr.w	r2, [lr, #32]
 8002e82:	4591      	cmp	r9, r2
 8002e84:	f0c0 828f 	bcc.w	80033a6 <HAL_PCD_IRQHandler+0xa6e>
        {
          len = ep->maxpacket;
          ep->xfer_len_db -= len;
 8002e88:	eba9 0302 	sub.w	r3, r9, r2
 8002e8c:	f8ce 3030 	str.w	r3, [lr, #48]	@ 0x30
          ep->xfer_len_db = 0U;
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8002e90:	b293      	uxth	r3, r2
 8002e92:	eb08 0e05 	add.w	lr, r8, r5
 8002e96:	eb04 0ece 	add.w	lr, r4, lr, lsl #3
 8002e9a:	f89e e011 	ldrb.w	lr, [lr, #17]
 8002e9e:	f1be 0f00 	cmp.w	lr, #0
 8002ea2:	f040 8272 	bne.w	800338a <HAL_PCD_IRQHandler+0xa52>
 8002ea6:	eb00 1c0c 	add.w	ip, r0, ip, lsl #4
 8002eaa:	f20c 4e04 	addw	lr, ip, #1028	@ 0x404
 8002eae:	f8b0 c050 	ldrh.w	ip, [r0, #80]	@ 0x50
 8002eb2:	2a3e      	cmp	r2, #62	@ 0x3e
 8002eb4:	fa1f fc8c 	uxth.w	ip, ip
 8002eb8:	f83e 900c 	ldrh.w	r9, [lr, ip]
 8002ebc:	f3c9 0909 	ubfx	r9, r9, #0, #10
 8002ec0:	f82e 900c 	strh.w	r9, [lr, ip]
 8002ec4:	f240 829e 	bls.w	8003404 <HAL_PCD_IRQHandler+0xacc>
 8002ec8:	ea4f 1952 	mov.w	r9, r2, lsr #5
 8002ecc:	06d2      	lsls	r2, r2, #27
 8002ece:	f83e 200c 	ldrh.w	r2, [lr, ip]
 8002ed2:	bf08      	it	eq
 8002ed4:	f109 39ff 	addeq.w	r9, r9, #4294967295	@ 0xffffffff
 8002ed8:	b292      	uxth	r2, r2
 8002eda:	ea42 2289 	orr.w	r2, r2, r9, lsl #10
 8002ede:	ea6f 4242 	mvn.w	r2, r2, lsl #17
 8002ee2:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 8002ee6:	b292      	uxth	r2, r2
 8002ee8:	f82e 200c 	strh.w	r2, [lr, ip]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8002eec:	eb08 0205 	add.w	r2, r8, r5
 8002ef0:	eb04 02c2 	add.w	r2, r4, r2, lsl #3
 8002ef4:	8b12      	ldrh	r2, [r2, #24]
 8002ef6:	f002 f9a5 	bl	8005244 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8002efa:	6820      	ldr	r0, [r4, #0]
 8002efc:	e066      	b.n	8002fcc <HAL_PCD_IRQHandler+0x694>
        ep = &hpcd->OUT_ep[epindex];
 8002efe:	f501 71a8 	add.w	r1, r1, #336	@ 0x150
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002f02:	6820      	ldr	r0, [r4, #0]
 8002f04:	4421      	add	r1, r4
 8002f06:	f001 fe9d 	bl	8004c44 <USB_EPStartXfer>
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8002f0a:	6820      	ldr	r0, [r4, #0]
 8002f0c:	e56d      	b.n	80029ea <HAL_PCD_IRQHandler+0xb2>
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002f0e:	3306      	adds	r3, #6
 8002f10:	eb03 03cc 	add.w	r3, r3, ip, lsl #3
 8002f14:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002f18:	f3c3 0309 	ubfx	r3, r3, #0, #10
              if (count != 0U)
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	f43f ae18 	beq.w	8002b52 <HAL_PCD_IRQHandler+0x21a>
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8002f22:	f8b1 215a 	ldrh.w	r2, [r1, #346]	@ 0x15a
 8002f26:	f8d1 1164 	ldr.w	r1, [r1, #356]	@ 0x164
        ep->xfer_count += count;
 8002f2a:	469a      	mov	sl, r3
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8002f2c:	f002 f99a 	bl	8005264 <USB_ReadPMA>
 8002f30:	e611      	b.n	8002b56 <HAL_PCD_IRQHandler+0x21e>
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 8002f32:	6822      	ldr	r2, [r4, #0]
    HAL_PCD_ResumeCallback(hpcd);
 8002f34:	4620      	mov	r0, r4
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 8002f36:	f8b2 3040 	ldrh.w	r3, [r2, #64]	@ 0x40
 8002f3a:	f023 0304 	bic.w	r3, r3, #4
 8002f3e:	041b      	lsls	r3, r3, #16
 8002f40:	0c1b      	lsrs	r3, r3, #16
 8002f42:	f8a2 3040 	strh.w	r3, [r2, #64]	@ 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8002f46:	f8b2 3040 	ldrh.w	r3, [r2, #64]	@ 0x40
 8002f4a:	f023 0308 	bic.w	r3, r3, #8
 8002f4e:	041b      	lsls	r3, r3, #16
 8002f50:	0c1b      	lsrs	r3, r3, #16
 8002f52:	f8a2 3040 	strh.w	r3, [r2, #64]	@ 0x40
    HAL_PCD_ResumeCallback(hpcd);
 8002f56:	f003 f91b 	bl	8006190 <HAL_PCD_ResumeCallback>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8002f5a:	6822      	ldr	r2, [r4, #0]
 8002f5c:	f8b2 3044 	ldrh.w	r3, [r2, #68]	@ 0x44
 8002f60:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8002f64:	041b      	lsls	r3, r3, #16
 8002f66:	0c1b      	lsrs	r3, r3, #16
 8002f68:	f8a2 3044 	strh.w	r3, [r2, #68]	@ 0x44
    return;
 8002f6c:	e512      	b.n	8002994 <HAL_PCD_IRQHandler+0x5c>
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8002f6e:	f8b1 2156 	ldrh.w	r2, [r1, #342]	@ 0x156
 8002f72:	f8d1 1164 	ldr.w	r1, [r1, #356]	@ 0x164
        ep->xfer_count += count;
 8002f76:	469a      	mov	sl, r3
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8002f78:	f002 f974 	bl	8005264 <USB_ReadPMA>
 8002f7c:	e5eb      	b.n	8002b56 <HAL_PCD_IRQHandler+0x21e>
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002f7e:	3306      	adds	r3, #6
 8002f80:	f83e 3013 	ldrh.w	r3, [lr, r3, lsl #1]
 8002f84:	f3c3 0309 	ubfx	r3, r3, #0, #10
    if (ep->xfer_len >= TxPctSize)
 8002f88:	428b      	cmp	r3, r1
 8002f8a:	f200 80a1 	bhi.w	80030d0 <HAL_PCD_IRQHandler+0x798>
      ep->xfer_len -= TxPctSize;
 8002f8e:	1ac9      	subs	r1, r1, r3
 8002f90:	6291      	str	r1, [r2, #40]	@ 0x28
    if (ep->xfer_len == 0U)
 8002f92:	2900      	cmp	r1, #0
 8002f94:	f000 809e 	beq.w	80030d4 <HAL_PCD_IRQHandler+0x79c>
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8002f98:	f1ba 0f00 	cmp.w	sl, #0
 8002f9c:	d10d      	bne.n	8002fba <HAL_PCD_IRQHandler+0x682>
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8002f9e:	f830 102c 	ldrh.w	r1, [r0, ip, lsl #2]
 8002fa2:	f421 41e0 	bic.w	r1, r1, #28672	@ 0x7000
 8002fa6:	f021 0170 	bic.w	r1, r1, #112	@ 0x70
 8002faa:	0409      	lsls	r1, r1, #16
 8002fac:	0c09      	lsrs	r1, r1, #16
 8002fae:	f441 4140 	orr.w	r1, r1, #49152	@ 0xc000
 8002fb2:	f041 0180 	orr.w	r1, r1, #128	@ 0x80
 8002fb6:	f820 102c 	strh.w	r1, [r0, ip, lsl #2]
      if (ep->xfer_fill_db == 1U)
 8002fba:	eb08 0e05 	add.w	lr, r8, r5
 8002fbe:	eb04 0ece 	add.w	lr, r4, lr, lsl #3
 8002fc2:	f89e 1034 	ldrb.w	r1, [lr, #52]	@ 0x34
 8002fc6:	2901      	cmp	r1, #1
 8002fc8:	f000 8197 	beq.w	80032fa <HAL_PCD_IRQHandler+0x9c2>
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8002fcc:	44a8      	add	r8, r5
 8002fce:	eb04 08c8 	add.w	r8, r4, r8, lsl #3
 8002fd2:	f898 2010 	ldrb.w	r2, [r8, #16]
 8002fd6:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8002fda:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002fde:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002fe2:	041b      	lsls	r3, r3, #16
 8002fe4:	0c1b      	lsrs	r3, r3, #16
 8002fe6:	f083 0330 	eor.w	r3, r3, #48	@ 0x30
 8002fea:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002fee:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002ff2:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]

  return HAL_OK;
 8002ff6:	e4e5      	b.n	80029c4 <HAL_PCD_IRQHandler+0x8c>
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	f040 80f9 	bne.w	80031f0 <HAL_PCD_IRQHandler+0x8b8>
 8002ffe:	7c13      	ldrb	r3, [r2, #16]
 8003000:	f8b0 2050 	ldrh.w	r2, [r0, #80]	@ 0x50
 8003004:	eb00 1303 	add.w	r3, r0, r3, lsl #4
 8003008:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800300c:	e6e1      	b.n	8002dd2 <HAL_PCD_IRQHandler+0x49a>
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800300e:	f8b0 3050 	ldrh.w	r3, [r0, #80]	@ 0x50
 8003012:	ea4f 0acc 	mov.w	sl, ip, lsl #3
 8003016:	b29b      	uxth	r3, r3
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8003018:	f419 4b80 	ands.w	fp, r9, #16384	@ 0x4000
    if (ep->xfer_len >= count)
 800301c:	f8d1 e168 	ldr.w	lr, [r1, #360]	@ 0x168
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8003020:	4453      	add	r3, sl
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8003022:	f000 80f2 	beq.w	800320a <HAL_PCD_IRQHandler+0x8d2>
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8003026:	3302      	adds	r3, #2
 8003028:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800302c:	f3c3 0309 	ubfx	r3, r3, #0, #10
    if (ep->xfer_len >= count)
 8003030:	4573      	cmp	r3, lr
 8003032:	469a      	mov	sl, r3
 8003034:	f200 815d 	bhi.w	80032f2 <HAL_PCD_IRQHandler+0x9ba>
      ep->xfer_len -= count;
 8003038:	ebae 0203 	sub.w	r2, lr, r3
 800303c:	f8c1 2168 	str.w	r2, [r1, #360]	@ 0x168
    if (ep->xfer_len == 0U)
 8003040:	b97a      	cbnz	r2, 8003062 <HAL_PCD_IRQHandler+0x72a>
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8003042:	f830 202c 	ldrh.w	r2, [r0, ip, lsl #2]
 8003046:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800304a:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 800304e:	0412      	lsls	r2, r2, #16
 8003050:	0c12      	lsrs	r2, r2, #16
 8003052:	f482 5200 	eor.w	r2, r2, #8192	@ 0x2000
 8003056:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800305a:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800305e:	f820 202c 	strh.w	r2, [r0, ip, lsl #2]
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8003062:	f019 0f40 	tst.w	r9, #64	@ 0x40
 8003066:	d00d      	beq.n	8003084 <HAL_PCD_IRQHandler+0x74c>
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8003068:	f830 202c 	ldrh.w	r2, [r0, ip, lsl #2]
 800306c:	f422 42e0 	bic.w	r2, r2, #28672	@ 0x7000
 8003070:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8003074:	0412      	lsls	r2, r2, #16
 8003076:	0c12      	lsrs	r2, r2, #16
 8003078:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800307c:	f042 02c0 	orr.w	r2, r2, #192	@ 0xc0
 8003080:	f820 202c 	strh.w	r2, [r0, ip, lsl #2]
    if (count != 0U)
 8003084:	2b00      	cmp	r3, #0
 8003086:	f43f ad66 	beq.w	8002b56 <HAL_PCD_IRQHandler+0x21e>
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 800308a:	eb08 0105 	add.w	r1, r8, r5
 800308e:	eb04 01c1 	add.w	r1, r4, r1, lsl #3
 8003092:	f8b1 2158 	ldrh.w	r2, [r1, #344]	@ 0x158
 8003096:	f8d1 1164 	ldr.w	r1, [r1, #356]	@ 0x164
 800309a:	f002 f8e3 	bl	8005264 <USB_ReadPMA>
 800309e:	e55a      	b.n	8002b56 <HAL_PCD_IRQHandler+0x21e>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 80030a0:	6822      	ldr	r2, [r4, #0]
    HAL_PCD_SOFCallback(hpcd);
 80030a2:	4620      	mov	r0, r4
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 80030a4:	f8b2 3044 	ldrh.w	r3, [r2, #68]	@ 0x44
 80030a8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80030ac:	041b      	lsls	r3, r3, #16
 80030ae:	0c1b      	lsrs	r3, r3, #16
 80030b0:	f8a2 3044 	strh.w	r3, [r2, #68]	@ 0x44
    HAL_PCD_SOFCallback(hpcd);
 80030b4:	f003 f846 	bl	8006144 <HAL_PCD_SOFCallback>
    return;
 80030b8:	e46c      	b.n	8002994 <HAL_PCD_IRQHandler+0x5c>
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 80030ba:	2a00      	cmp	r2, #0
 80030bc:	f040 80e1 	bne.w	8003282 <HAL_PCD_IRQHandler+0x94a>
 80030c0:	5aca      	ldrh	r2, [r1, r3]
 80030c2:	ea6f 4242 	mvn.w	r2, r2, lsl #17
 80030c6:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 80030ca:	b292      	uxth	r2, r2
 80030cc:	52ca      	strh	r2, [r1, r3]
 80030ce:	e64f      	b.n	8002d70 <HAL_PCD_IRQHandler+0x438>
 80030d0:	f8c2 9028 	str.w	r9, [r2, #40]	@ 0x28
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80030d4:	eb08 0305 	add.w	r3, r8, r5
 80030d8:	eb04 03c3 	add.w	r3, r4, r3, lsl #3
 80030dc:	7c5b      	ldrb	r3, [r3, #17]
 80030de:	2b00      	cmp	r3, #0
 80030e0:	f040 80ee 	bne.w	80032c0 <HAL_PCD_IRQHandler+0x988>
 80030e4:	f8b0 1050 	ldrh.w	r1, [r0, #80]	@ 0x50
 80030e8:	ea4f 130c 	mov.w	r3, ip, lsl #4
 80030ec:	f203 4e04 	addw	lr, r3, #1028	@ 0x404
 80030f0:	b289      	uxth	r1, r1
 80030f2:	4486      	add	lr, r0
 80030f4:	f83e 2001 	ldrh.w	r2, [lr, r1]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80030f8:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80030fc:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8003100:	f82e 2001 	strh.w	r2, [lr, r1]
 8003104:	f83e 2001 	ldrh.w	r2, [lr, r1]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003108:	4403      	add	r3, r0
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800310a:	ea6f 4242 	mvn.w	r2, r2, lsl #17
 800310e:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 8003112:	b292      	uxth	r2, r2
 8003114:	f82e 2001 	strh.w	r2, [lr, r1]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003118:	f8b0 1050 	ldrh.w	r1, [r0, #80]	@ 0x50
 800311c:	b289      	uxth	r1, r1
 800311e:	5a5a      	ldrh	r2, [r3, r1]
 8003120:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8003124:	525a      	strh	r2, [r3, r1]
 8003126:	5a5a      	ldrh	r2, [r3, r1]
 8003128:	ea6f 4242 	mvn.w	r2, r2, lsl #17
 800312c:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 8003130:	b292      	uxth	r2, r2
 8003132:	525a      	strh	r2, [r3, r1]
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003134:	4661      	mov	r1, ip
 8003136:	4620      	mov	r0, r4
 8003138:	f002 fffa 	bl	8006130 <HAL_PCD_DataInStageCallback>
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 800313c:	f1ba 0f00 	cmp.w	sl, #0
 8003140:	d146      	bne.n	80031d0 <HAL_PCD_IRQHandler+0x898>
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8003142:	eb08 0305 	add.w	r3, r8, r5
 8003146:	eb04 03c3 	add.w	r3, r4, r3, lsl #3
 800314a:	7c1a      	ldrb	r2, [r3, #16]
 800314c:	6820      	ldr	r0, [r4, #0]
 800314e:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8003152:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003156:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800315a:	041b      	lsls	r3, r3, #16
 800315c:	0c1b      	lsrs	r3, r3, #16
 800315e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003162:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003166:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
 800316a:	e72f      	b.n	8002fcc <HAL_PCD_IRQHandler+0x694>
 800316c:	2100      	movs	r1, #0
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800316e:	7c53      	ldrb	r3, [r2, #17]
 8003170:	6291      	str	r1, [r2, #40]	@ 0x28
 8003172:	2b00      	cmp	r3, #0
 8003174:	f040 8090 	bne.w	8003298 <HAL_PCD_IRQHandler+0x960>
 8003178:	f8b0 2050 	ldrh.w	r2, [r0, #80]	@ 0x50
 800317c:	ea4f 130c 	mov.w	r3, ip, lsl #4
 8003180:	f203 4104 	addw	r1, r3, #1028	@ 0x404
 8003184:	b292      	uxth	r2, r2
 8003186:	4401      	add	r1, r0
 8003188:	f831 e002 	ldrh.w	lr, [r1, r2]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800318c:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003190:	f3ce 0e09 	ubfx	lr, lr, #0, #10
 8003194:	f821 e002 	strh.w	lr, [r1, r2]
 8003198:	f831 e002 	ldrh.w	lr, [r1, r2]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800319c:	4403      	add	r3, r0
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800319e:	fa1f fe8e 	uxth.w	lr, lr
 80031a2:	f44e 4e00 	orr.w	lr, lr, #32768	@ 0x8000
 80031a6:	f821 e002 	strh.w	lr, [r1, r2]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80031aa:	f8b0 2050 	ldrh.w	r2, [r0, #80]	@ 0x50
 80031ae:	b292      	uxth	r2, r2
 80031b0:	5a99      	ldrh	r1, [r3, r2]
 80031b2:	f3c1 0109 	ubfx	r1, r1, #0, #10
 80031b6:	5299      	strh	r1, [r3, r2]
 80031b8:	5a99      	ldrh	r1, [r3, r2]
 80031ba:	b289      	uxth	r1, r1
 80031bc:	f441 4100 	orr.w	r1, r1, #32768	@ 0x8000
 80031c0:	5299      	strh	r1, [r3, r2]
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80031c2:	4661      	mov	r1, ip
 80031c4:	4620      	mov	r0, r4
 80031c6:	f002 ffb3 	bl	8006130 <HAL_PCD_DataInStageCallback>
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80031ca:	f1ba 0f00 	cmp.w	sl, #0
 80031ce:	d1b8      	bne.n	8003142 <HAL_PCD_IRQHandler+0x80a>
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 80031d0:	6820      	ldr	r0, [r4, #0]
 80031d2:	e6fb      	b.n	8002fcc <HAL_PCD_IRQHandler+0x694>
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80031d4:	2b01      	cmp	r3, #1
 80031d6:	f47f ae06 	bne.w	8002de6 <HAL_PCD_IRQHandler+0x4ae>
 80031da:	7c13      	ldrb	r3, [r2, #16]
 80031dc:	f8b0 2050 	ldrh.w	r2, [r0, #80]	@ 0x50
 80031e0:	eb00 1303 	add.w	r3, r0, r3, lsl #4
 80031e4:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80031e8:	b292      	uxth	r2, r2
 80031ea:	f823 9002 	strh.w	r9, [r3, r2]
 80031ee:	e5fa      	b.n	8002de6 <HAL_PCD_IRQHandler+0x4ae>
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80031f0:	2b01      	cmp	r3, #1
 80031f2:	f47f adf8 	bne.w	8002de6 <HAL_PCD_IRQHandler+0x4ae>
 80031f6:	7c13      	ldrb	r3, [r2, #16]
 80031f8:	f8b0 2050 	ldrh.w	r2, [r0, #80]	@ 0x50
 80031fc:	eb00 1303 	add.w	r3, r0, r3, lsl #4
 8003200:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8003204:	b292      	uxth	r2, r2
 8003206:	5299      	strh	r1, [r3, r2]
 8003208:	e5ed      	b.n	8002de6 <HAL_PCD_IRQHandler+0x4ae>
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800320a:	3306      	adds	r3, #6
 800320c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003210:	f3c3 0309 	ubfx	r3, r3, #0, #10
    if (ep->xfer_len >= count)
 8003214:	4573      	cmp	r3, lr
 8003216:	469a      	mov	sl, r3
 8003218:	d868      	bhi.n	80032ec <HAL_PCD_IRQHandler+0x9b4>
      ep->xfer_len -= count;
 800321a:	ebae 0203 	sub.w	r2, lr, r3
 800321e:	f8c1 2168 	str.w	r2, [r1, #360]	@ 0x168
    if (ep->xfer_len == 0U)
 8003222:	b97a      	cbnz	r2, 8003244 <HAL_PCD_IRQHandler+0x90c>
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8003224:	f830 202c 	ldrh.w	r2, [r0, ip, lsl #2]
 8003228:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800322c:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8003230:	0412      	lsls	r2, r2, #16
 8003232:	0c12      	lsrs	r2, r2, #16
 8003234:	f482 5200 	eor.w	r2, r2, #8192	@ 0x2000
 8003238:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800323c:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8003240:	f820 202c 	strh.w	r2, [r0, ip, lsl #2]
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8003244:	f019 0f40 	tst.w	r9, #64	@ 0x40
 8003248:	d10d      	bne.n	8003266 <HAL_PCD_IRQHandler+0x92e>
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 800324a:	f830 202c 	ldrh.w	r2, [r0, ip, lsl #2]
 800324e:	f422 42e0 	bic.w	r2, r2, #28672	@ 0x7000
 8003252:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8003256:	0412      	lsls	r2, r2, #16
 8003258:	0c12      	lsrs	r2, r2, #16
 800325a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800325e:	f042 02c0 	orr.w	r2, r2, #192	@ 0xc0
 8003262:	f820 202c 	strh.w	r2, [r0, ip, lsl #2]
    if (count != 0U)
 8003266:	2b00      	cmp	r3, #0
 8003268:	f43f ac75 	beq.w	8002b56 <HAL_PCD_IRQHandler+0x21e>
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 800326c:	eb08 0105 	add.w	r1, r8, r5
 8003270:	eb04 01c1 	add.w	r1, r4, r1, lsl #3
 8003274:	f8b1 215a 	ldrh.w	r2, [r1, #346]	@ 0x15a
 8003278:	f8d1 1164 	ldr.w	r1, [r1, #356]	@ 0x164
 800327c:	f001 fff2 	bl	8005264 <USB_ReadPMA>
 8003280:	e469      	b.n	8002b56 <HAL_PCD_IRQHandler+0x21e>
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8003282:	0855      	lsrs	r5, r2, #1
 8003284:	07d2      	lsls	r2, r2, #31
 8003286:	5aca      	ldrh	r2, [r1, r3]
 8003288:	bf48      	it	mi
 800328a:	3501      	addmi	r5, #1
 800328c:	b292      	uxth	r2, r2
 800328e:	ea42 2285 	orr.w	r2, r2, r5, lsl #10
 8003292:	b292      	uxth	r2, r2
 8003294:	52ca      	strh	r2, [r1, r3]
 8003296:	e56b      	b.n	8002d70 <HAL_PCD_IRQHandler+0x438>
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003298:	2b01      	cmp	r3, #1
 800329a:	d192      	bne.n	80031c2 <HAL_PCD_IRQHandler+0x88a>
 800329c:	f8b0 2050 	ldrh.w	r2, [r0, #80]	@ 0x50
 80032a0:	ea4f 130c 	mov.w	r3, ip, lsl #4
 80032a4:	f203 4e04 	addw	lr, r3, #1028	@ 0x404
 80032a8:	b292      	uxth	r2, r2
 80032aa:	4486      	add	lr, r0
 80032ac:	f82e 1002 	strh.w	r1, [lr, r2]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80032b0:	f8b0 2050 	ldrh.w	r2, [r0, #80]	@ 0x50
 80032b4:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80032b8:	4403      	add	r3, r0
 80032ba:	b292      	uxth	r2, r2
 80032bc:	5299      	strh	r1, [r3, r2]
 80032be:	e780      	b.n	80031c2 <HAL_PCD_IRQHandler+0x88a>
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80032c0:	2b01      	cmp	r3, #1
 80032c2:	f47f af37 	bne.w	8003134 <HAL_PCD_IRQHandler+0x7fc>
 80032c6:	2100      	movs	r1, #0
 80032c8:	f8b0 2050 	ldrh.w	r2, [r0, #80]	@ 0x50
 80032cc:	ea4f 130c 	mov.w	r3, ip, lsl #4
 80032d0:	f203 4e04 	addw	lr, r3, #1028	@ 0x404
 80032d4:	b292      	uxth	r2, r2
 80032d6:	4486      	add	lr, r0
 80032d8:	f82e 1002 	strh.w	r1, [lr, r2]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80032dc:	f8b0 2050 	ldrh.w	r2, [r0, #80]	@ 0x50
 80032e0:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80032e4:	4403      	add	r3, r0
 80032e6:	b292      	uxth	r2, r2
 80032e8:	5299      	strh	r1, [r3, r2]
 80032ea:	e723      	b.n	8003134 <HAL_PCD_IRQHandler+0x7fc>
      ep->xfer_len = 0U;
 80032ec:	f8c1 b168 	str.w	fp, [r1, #360]	@ 0x168
    if (ep->xfer_len == 0U)
 80032f0:	e798      	b.n	8003224 <HAL_PCD_IRQHandler+0x8ec>
      ep->xfer_len = 0U;
 80032f2:	2200      	movs	r2, #0
 80032f4:	f8c1 2168 	str.w	r2, [r1, #360]	@ 0x168
    if (ep->xfer_len == 0U)
 80032f8:	e6a3      	b.n	8003042 <HAL_PCD_IRQHandler+0x70a>
        ep->xfer_buff += TxPctSize;
 80032fa:	f8de 1024 	ldr.w	r1, [lr, #36]	@ 0x24
 80032fe:	4419      	add	r1, r3
 8003300:	f8ce 1024 	str.w	r1, [lr, #36]	@ 0x24
        ep->xfer_count += TxPctSize;
 8003304:	f8d2 902c 	ldr.w	r9, [r2, #44]	@ 0x2c
 8003308:	4499      	add	r9, r3
 800330a:	f8c2 902c 	str.w	r9, [r2, #44]	@ 0x2c
        if (ep->xfer_len_db >= ep->maxpacket)
 800330e:	f8de 9030 	ldr.w	r9, [lr, #48]	@ 0x30
 8003312:	f8de 2020 	ldr.w	r2, [lr, #32]
 8003316:	4591      	cmp	r9, r2
 8003318:	d359      	bcc.n	80033ce <HAL_PCD_IRQHandler+0xa96>
          ep->xfer_len_db -= len;
 800331a:	eba9 0302 	sub.w	r3, r9, r2
 800331e:	f8ce 3030 	str.w	r3, [lr, #48]	@ 0x30
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8003322:	b293      	uxth	r3, r2
 8003324:	eb08 0e05 	add.w	lr, r8, r5
 8003328:	eb04 0ece 	add.w	lr, r4, lr, lsl #3
 800332c:	f89e e011 	ldrb.w	lr, [lr, #17]
 8003330:	f1be 0f00 	cmp.w	lr, #0
 8003334:	d13e      	bne.n	80033b4 <HAL_PCD_IRQHandler+0xa7c>
 8003336:	eb00 1c0c 	add.w	ip, r0, ip, lsl #4
 800333a:	f20c 4e0c 	addw	lr, ip, #1036	@ 0x40c
 800333e:	f8b0 c050 	ldrh.w	ip, [r0, #80]	@ 0x50
 8003342:	2a3e      	cmp	r2, #62	@ 0x3e
 8003344:	fa1f fc8c 	uxth.w	ip, ip
 8003348:	f83e 900c 	ldrh.w	r9, [lr, ip]
 800334c:	f3c9 0909 	ubfx	r9, r9, #0, #10
 8003350:	f82e 900c 	strh.w	r9, [lr, ip]
 8003354:	d961      	bls.n	800341a <HAL_PCD_IRQHandler+0xae2>
 8003356:	ea4f 1952 	mov.w	r9, r2, lsr #5
 800335a:	06d2      	lsls	r2, r2, #27
 800335c:	f83e 200c 	ldrh.w	r2, [lr, ip]
 8003360:	bf08      	it	eq
 8003362:	f109 39ff 	addeq.w	r9, r9, #4294967295	@ 0xffffffff
 8003366:	b292      	uxth	r2, r2
 8003368:	ea42 2289 	orr.w	r2, r2, r9, lsl #10
 800336c:	ea6f 4242 	mvn.w	r2, r2, lsl #17
 8003370:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 8003374:	b292      	uxth	r2, r2
 8003376:	f82e 200c 	strh.w	r2, [lr, ip]
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 800337a:	eb08 0205 	add.w	r2, r8, r5
 800337e:	eb04 02c2 	add.w	r2, r4, r2, lsl #3
 8003382:	8b52      	ldrh	r2, [r2, #26]
 8003384:	f001 ff5e 	bl	8005244 <USB_WritePMA>
 8003388:	e722      	b.n	80031d0 <HAL_PCD_IRQHandler+0x898>
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800338a:	f1be 0f01 	cmp.w	lr, #1
 800338e:	f47f adad 	bne.w	8002eec <HAL_PCD_IRQHandler+0x5b4>
 8003392:	f8b0 2050 	ldrh.w	r2, [r0, #80]	@ 0x50
 8003396:	eb00 1c0c 	add.w	ip, r0, ip, lsl #4
 800339a:	f20c 4c04 	addw	ip, ip, #1028	@ 0x404
 800339e:	b292      	uxth	r2, r2
 80033a0:	f82c 3002 	strh.w	r3, [ip, r2]
 80033a4:	e5a2      	b.n	8002eec <HAL_PCD_IRQHandler+0x5b4>
        else if (ep->xfer_len_db == 0U)
 80033a6:	f1b9 0f00 	cmp.w	r9, #0
 80033aa:	d117      	bne.n	80033dc <HAL_PCD_IRQHandler+0xaa4>
    if (ep->xfer_len > TxPctSize)
 80033ac:	461a      	mov	r2, r3
          ep->xfer_fill_db = 0U;
 80033ae:	f88e 9034 	strb.w	r9, [lr, #52]	@ 0x34
 80033b2:	e56e      	b.n	8002e92 <HAL_PCD_IRQHandler+0x55a>
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80033b4:	f1be 0f01 	cmp.w	lr, #1
 80033b8:	d1df      	bne.n	800337a <HAL_PCD_IRQHandler+0xa42>
 80033ba:	f8b0 2050 	ldrh.w	r2, [r0, #80]	@ 0x50
 80033be:	eb00 1c0c 	add.w	ip, r0, ip, lsl #4
 80033c2:	f20c 4c0c 	addw	ip, ip, #1036	@ 0x40c
 80033c6:	b292      	uxth	r2, r2
 80033c8:	f82c 3002 	strh.w	r3, [ip, r2]
 80033cc:	e7d5      	b.n	800337a <HAL_PCD_IRQHandler+0xa42>
        else if (ep->xfer_len_db == 0U)
 80033ce:	f1b9 0f00 	cmp.w	r9, #0
 80033d2:	d10d      	bne.n	80033f0 <HAL_PCD_IRQHandler+0xab8>
    if (ep->xfer_len >= TxPctSize)
 80033d4:	461a      	mov	r2, r3
          ep->xfer_fill_db = 0U;
 80033d6:	f88e 9034 	strb.w	r9, [lr, #52]	@ 0x34
 80033da:	e7a3      	b.n	8003324 <HAL_PCD_IRQHandler+0x9ec>
          ep->xfer_fill_db = 0U;
 80033dc:	f04f 0a00 	mov.w	sl, #0
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80033e0:	464a      	mov	r2, r9
 80033e2:	fa1f f389 	uxth.w	r3, r9
          ep->xfer_fill_db = 0U;
 80033e6:	f88e a034 	strb.w	sl, [lr, #52]	@ 0x34
          ep->xfer_len_db = 0U;
 80033ea:	f8ce a030 	str.w	sl, [lr, #48]	@ 0x30
 80033ee:	e550      	b.n	8002e92 <HAL_PCD_IRQHandler+0x55a>
          ep->xfer_len_db = 0U;
 80033f0:	f04f 0a00 	mov.w	sl, #0
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80033f4:	464a      	mov	r2, r9
 80033f6:	fa1f f389 	uxth.w	r3, r9
          ep->xfer_len_db = 0U;
 80033fa:	f8ce a030 	str.w	sl, [lr, #48]	@ 0x30
          ep->xfer_fill_db = 0;
 80033fe:	f88e a034 	strb.w	sl, [lr, #52]	@ 0x34
 8003402:	e78f      	b.n	8003324 <HAL_PCD_IRQHandler+0x9ec>
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8003404:	b9a2      	cbnz	r2, 8003430 <HAL_PCD_IRQHandler+0xaf8>
 8003406:	f83e 200c 	ldrh.w	r2, [lr, ip]
 800340a:	ea6f 4242 	mvn.w	r2, r2, lsl #17
 800340e:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 8003412:	b292      	uxth	r2, r2
 8003414:	f82e 200c 	strh.w	r2, [lr, ip]
 8003418:	e568      	b.n	8002eec <HAL_PCD_IRQHandler+0x5b4>
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800341a:	b9c2      	cbnz	r2, 800344e <HAL_PCD_IRQHandler+0xb16>
 800341c:	f83e 200c 	ldrh.w	r2, [lr, ip]
 8003420:	ea6f 4242 	mvn.w	r2, r2, lsl #17
 8003424:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 8003428:	b292      	uxth	r2, r2
 800342a:	f82e 200c 	strh.w	r2, [lr, ip]
 800342e:	e7a4      	b.n	800337a <HAL_PCD_IRQHandler+0xa42>
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8003430:	ea4f 0952 	mov.w	r9, r2, lsr #1
 8003434:	07d2      	lsls	r2, r2, #31
 8003436:	f83e 200c 	ldrh.w	r2, [lr, ip]
 800343a:	bf48      	it	mi
 800343c:	f109 0901 	addmi.w	r9, r9, #1
 8003440:	b292      	uxth	r2, r2
 8003442:	ea42 2289 	orr.w	r2, r2, r9, lsl #10
 8003446:	b292      	uxth	r2, r2
 8003448:	f82e 200c 	strh.w	r2, [lr, ip]
 800344c:	e54e      	b.n	8002eec <HAL_PCD_IRQHandler+0x5b4>
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800344e:	ea4f 0952 	mov.w	r9, r2, lsr #1
 8003452:	07d2      	lsls	r2, r2, #31
 8003454:	f83e 200c 	ldrh.w	r2, [lr, ip]
 8003458:	bf48      	it	mi
 800345a:	f109 0901 	addmi.w	r9, r9, #1
 800345e:	b292      	uxth	r2, r2
 8003460:	ea42 2289 	orr.w	r2, r2, r9, lsl #10
 8003464:	b292      	uxth	r2, r2
 8003466:	f82e 200c 	strh.w	r2, [lr, ip]
 800346a:	e786      	b.n	800337a <HAL_PCD_IRQHandler+0xa42>

0800346c <HAL_PCD_SetAddress>:
  __HAL_LOCK(hpcd);
 800346c:	f890 2290 	ldrb.w	r2, [r0, #656]	@ 0x290
 8003470:	2a01      	cmp	r2, #1
 8003472:	d00d      	beq.n	8003490 <HAL_PCD_SetAddress+0x24>
{
 8003474:	b510      	push	{r4, lr}
  __HAL_LOCK(hpcd);
 8003476:	2201      	movs	r2, #1
 8003478:	4604      	mov	r4, r0
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800347a:	6800      	ldr	r0, [r0, #0]
  hpcd->USB_Address = address;
 800347c:	7361      	strb	r1, [r4, #13]
  __HAL_LOCK(hpcd);
 800347e:	f884 2290 	strb.w	r2, [r4, #656]	@ 0x290
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8003482:	f001 fecf 	bl	8005224 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8003486:	2300      	movs	r3, #0
 8003488:	f884 3290 	strb.w	r3, [r4, #656]	@ 0x290
  return HAL_OK;
 800348c:	4618      	mov	r0, r3
}
 800348e:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hpcd);
 8003490:	2002      	movs	r0, #2
}
 8003492:	4770      	bx	lr

08003494 <HAL_PCD_EP_Open>:
  if ((ep_addr & 0x80U) == 0x80U)
 8003494:	f001 0c07 	and.w	ip, r1, #7
{
 8003498:	b510      	push	{r4, lr}
  if ((ep_addr & 0x80U) == 0x80U)
 800349a:	0609      	lsls	r1, r1, #24
{
 800349c:	4604      	mov	r4, r0
 800349e:	eb0c 008c 	add.w	r0, ip, ip, lsl #2
 80034a2:	ea4f 00c0 	mov.w	r0, r0, lsl #3
  if ((ep_addr & 0x80U) == 0x80U)
 80034a6:	d41f      	bmi.n	80034e8 <HAL_PCD_EP_Open+0x54>
    ep->is_in = 0U;
 80034a8:	f04f 0e00 	mov.w	lr, #0
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80034ac:	f500 71a8 	add.w	r1, r0, #336	@ 0x150
    ep->is_in = 0U;
 80034b0:	4420      	add	r0, r4
 80034b2:	f880 e151 	strb.w	lr, [r0, #337]	@ 0x151
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80034b6:	4421      	add	r1, r4
  if (ep_type == EP_TYPE_BULK)
 80034b8:	2b02      	cmp	r3, #2
  ep->type = ep_type;
 80034ba:	70cb      	strb	r3, [r1, #3]
    ep->data_pid_start = 0U;
 80034bc:	bf08      	it	eq
 80034be:	2300      	moveq	r3, #0
  ep->num = ep_addr & EP_ADDR_MSK;
 80034c0:	f881 c000 	strb.w	ip, [r1]
    ep->data_pid_start = 0U;
 80034c4:	bf08      	it	eq
 80034c6:	710b      	strbeq	r3, [r1, #4]
  ep->maxpacket = ep_mps;
 80034c8:	610a      	str	r2, [r1, #16]
  __HAL_LOCK(hpcd);
 80034ca:	f894 3290 	ldrb.w	r3, [r4, #656]	@ 0x290
 80034ce:	2b01      	cmp	r3, #1
 80034d0:	d013      	beq.n	80034fa <HAL_PCD_EP_Open+0x66>
 80034d2:	2301      	movs	r3, #1
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80034d4:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(hpcd);
 80034d6:	f884 3290 	strb.w	r3, [r4, #656]	@ 0x290
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80034da:	f001 f909 	bl	80046f0 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80034de:	2300      	movs	r3, #0
 80034e0:	f884 3290 	strb.w	r3, [r4, #656]	@ 0x290
  return ret;
 80034e4:	4618      	mov	r0, r3
}
 80034e6:	bd10      	pop	{r4, pc}
    ep->is_in = 1U;
 80034e8:	f04f 0e01 	mov.w	lr, #1
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80034ec:	f100 0110 	add.w	r1, r0, #16
    ep->is_in = 1U;
 80034f0:	4420      	add	r0, r4
 80034f2:	f880 e011 	strb.w	lr, [r0, #17]
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80034f6:	4421      	add	r1, r4
    ep->is_in = 1U;
 80034f8:	e7de      	b.n	80034b8 <HAL_PCD_EP_Open+0x24>
  __HAL_LOCK(hpcd);
 80034fa:	2002      	movs	r0, #2
}
 80034fc:	bd10      	pop	{r4, pc}
 80034fe:	bf00      	nop

08003500 <HAL_PCD_EP_Close>:
  if ((ep_addr & 0x80U) == 0x80U)
 8003500:	f001 0207 	and.w	r2, r1, #7
 8003504:	eb02 0382 	add.w	r3, r2, r2, lsl #2
 8003508:	0609      	lsls	r1, r1, #24
{
 800350a:	b510      	push	{r4, lr}
 800350c:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8003510:	4604      	mov	r4, r0
  if ((ep_addr & 0x80U) == 0x80U)
 8003512:	d416      	bmi.n	8003542 <HAL_PCD_EP_Close+0x42>
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003514:	f503 71a8 	add.w	r1, r3, #336	@ 0x150
 8003518:	4401      	add	r1, r0
    ep->is_in = 0U;
 800351a:	4403      	add	r3, r0
 800351c:	2000      	movs	r0, #0
 800351e:	f883 0151 	strb.w	r0, [r3, #337]	@ 0x151
  ep->num = ep_addr & EP_ADDR_MSK;
 8003522:	700a      	strb	r2, [r1, #0]
  __HAL_LOCK(hpcd);
 8003524:	f894 3290 	ldrb.w	r3, [r4, #656]	@ 0x290
 8003528:	2b01      	cmp	r3, #1
 800352a:	d015      	beq.n	8003558 <HAL_PCD_EP_Close+0x58>
 800352c:	2301      	movs	r3, #1
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800352e:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(hpcd);
 8003530:	f884 3290 	strb.w	r3, [r4, #656]	@ 0x290
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8003534:	f001 faa4 	bl	8004a80 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003538:	2300      	movs	r3, #0
 800353a:	f884 3290 	strb.w	r3, [r4, #656]	@ 0x290
  return HAL_OK;
 800353e:	4618      	mov	r0, r3
}
 8003540:	bd10      	pop	{r4, pc}
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003542:	f103 0110 	add.w	r1, r3, #16
 8003546:	4401      	add	r1, r0
    ep->is_in = 1U;
 8003548:	4403      	add	r3, r0
 800354a:	2001      	movs	r0, #1
 800354c:	7458      	strb	r0, [r3, #17]
  ep->num = ep_addr & EP_ADDR_MSK;
 800354e:	700a      	strb	r2, [r1, #0]
  __HAL_LOCK(hpcd);
 8003550:	f894 3290 	ldrb.w	r3, [r4, #656]	@ 0x290
 8003554:	2b01      	cmp	r3, #1
 8003556:	d1e9      	bne.n	800352c <HAL_PCD_EP_Close+0x2c>
 8003558:	2002      	movs	r0, #2
}
 800355a:	bd10      	pop	{r4, pc}

0800355c <HAL_PCD_EP_Receive>:
{
 800355c:	b510      	push	{r4, lr}
  ep->xfer_count = 0U;
 800355e:	2400      	movs	r4, #0
 8003560:	f001 0e07 	and.w	lr, r1, #7
  ep->xfer_buff = pBuf;
 8003564:	eb0e 018e 	add.w	r1, lr, lr, lsl #2
 8003568:	eb00 0cc1 	add.w	ip, r0, r1, lsl #3
  ep->xfer_len = len;
 800356c:	e9cc 2359 	strd	r2, r3, [ip, #356]	@ 0x164
  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003570:	6800      	ldr	r0, [r0, #0]
 8003572:	f50c 71a8 	add.w	r1, ip, #336	@ 0x150
  ep->xfer_count = 0U;
 8003576:	f8cc 416c 	str.w	r4, [ip, #364]	@ 0x16c
  ep->is_in = 0U;
 800357a:	f88c 4151 	strb.w	r4, [ip, #337]	@ 0x151
  ep->num = ep_addr & EP_ADDR_MSK;
 800357e:	f88c e150 	strb.w	lr, [ip, #336]	@ 0x150
  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003582:	f001 fb5f 	bl	8004c44 <USB_EPStartXfer>
}
 8003586:	4620      	mov	r0, r4
 8003588:	bd10      	pop	{r4, pc}
 800358a:	bf00      	nop

0800358c <HAL_PCD_EP_GetRxCount>:
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800358c:	f001 0107 	and.w	r1, r1, #7
 8003590:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 8003594:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
}
 8003598:	f8d0 016c 	ldr.w	r0, [r0, #364]	@ 0x16c
 800359c:	4770      	bx	lr
 800359e:	bf00      	nop

080035a0 <HAL_PCD_EP_Transmit>:
  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80035a0:	f001 0107 	and.w	r1, r1, #7
{
 80035a4:	b538      	push	{r3, r4, r5, lr}
  ep->xfer_buff = pBuf;
 80035a6:	eb01 0e81 	add.w	lr, r1, r1, lsl #2
 80035aa:	eb00 0cce 	add.w	ip, r0, lr, lsl #3
  ep->xfer_fill_db = 1U;
 80035ae:	2501      	movs	r5, #1
  ep->xfer_count = 0U;
 80035b0:	2400      	movs	r4, #0
  ep->num = ep_addr & EP_ADDR_MSK;
 80035b2:	f88c 1010 	strb.w	r1, [ip, #16]
  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80035b6:	4661      	mov	r1, ip
  (void)USB_EPStartXfer(hpcd->Instance, ep);
 80035b8:	6800      	ldr	r0, [r0, #0]
  ep->xfer_buff = pBuf;
 80035ba:	f8cc 2024 	str.w	r2, [ip, #36]	@ 0x24
  ep->xfer_len = len;
 80035be:	f8cc 3028 	str.w	r3, [ip, #40]	@ 0x28
  ep->xfer_len_db = len;
 80035c2:	f8cc 3030 	str.w	r3, [ip, #48]	@ 0x30
  ep->xfer_fill_db = 1U;
 80035c6:	f88c 5034 	strb.w	r5, [ip, #52]	@ 0x34
  ep->xfer_count = 0U;
 80035ca:	f8cc 402c 	str.w	r4, [ip, #44]	@ 0x2c
  ep->is_in = 1U;
 80035ce:	f88c 5011 	strb.w	r5, [ip, #17]
  (void)USB_EPStartXfer(hpcd->Instance, ep);
 80035d2:	3110      	adds	r1, #16
 80035d4:	f001 fb36 	bl	8004c44 <USB_EPStartXfer>
}
 80035d8:	4620      	mov	r0, r4
 80035da:	bd38      	pop	{r3, r4, r5, pc}

080035dc <HAL_PCD_EP_SetStall>:
{
 80035dc:	b538      	push	{r3, r4, r5, lr}
  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80035de:	7903      	ldrb	r3, [r0, #4]
 80035e0:	f001 0507 	and.w	r5, r1, #7
 80035e4:	42ab      	cmp	r3, r5
 80035e6:	d330      	bcc.n	800364a <HAL_PCD_EP_SetStall+0x6e>
  if ((0x80U & ep_addr) == 0x80U)
 80035e8:	060b      	lsls	r3, r1, #24
 80035ea:	4604      	mov	r4, r0
 80035ec:	d41b      	bmi.n	8003626 <HAL_PCD_EP_SetStall+0x4a>
    ep = &hpcd->OUT_ep[ep_addr];
 80035ee:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 80035f2:	00c9      	lsls	r1, r1, #3
 80035f4:	f501 72a8 	add.w	r2, r1, #336	@ 0x150
    ep->is_in = 0U;
 80035f8:	1843      	adds	r3, r0, r1
    ep = &hpcd->OUT_ep[ep_addr];
 80035fa:	1881      	adds	r1, r0, r2
    ep->is_in = 0U;
 80035fc:	2200      	movs	r2, #0
 80035fe:	f883 2151 	strb.w	r2, [r3, #337]	@ 0x151
  ep->is_stall = 1U;
 8003602:	2301      	movs	r3, #1
  ep->num = ep_addr & EP_ADDR_MSK;
 8003604:	700d      	strb	r5, [r1, #0]
  ep->is_stall = 1U;
 8003606:	708b      	strb	r3, [r1, #2]
  __HAL_LOCK(hpcd);
 8003608:	f894 2290 	ldrb.w	r2, [r4, #656]	@ 0x290
 800360c:	429a      	cmp	r2, r3
 800360e:	d01a      	beq.n	8003646 <HAL_PCD_EP_SetStall+0x6a>
  (void)USB_EPSetStall(hpcd->Instance, ep);
 8003610:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(hpcd);
 8003612:	f884 3290 	strb.w	r3, [r4, #656]	@ 0x290
  (void)USB_EPSetStall(hpcd->Instance, ep);
 8003616:	f001 fd8d 	bl	8005134 <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800361a:	b1c5      	cbz	r5, 800364e <HAL_PCD_EP_SetStall+0x72>
  __HAL_UNLOCK(hpcd);
 800361c:	2300      	movs	r3, #0
 800361e:	f884 3290 	strb.w	r3, [r4, #656]	@ 0x290
  return HAL_OK;
 8003622:	4618      	mov	r0, r3
}
 8003624:	bd38      	pop	{r3, r4, r5, pc}
    ep->is_in = 1U;
 8003626:	2201      	movs	r2, #1
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003628:	eb05 0385 	add.w	r3, r5, r5, lsl #2
 800362c:	00db      	lsls	r3, r3, #3
 800362e:	f103 0110 	add.w	r1, r3, #16
    ep->is_in = 1U;
 8003632:	4403      	add	r3, r0
 8003634:	745a      	strb	r2, [r3, #17]
  ep->is_stall = 1U;
 8003636:	2301      	movs	r3, #1
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003638:	4401      	add	r1, r0
  ep->num = ep_addr & EP_ADDR_MSK;
 800363a:	700d      	strb	r5, [r1, #0]
  ep->is_stall = 1U;
 800363c:	708b      	strb	r3, [r1, #2]
  __HAL_LOCK(hpcd);
 800363e:	f894 2290 	ldrb.w	r2, [r4, #656]	@ 0x290
 8003642:	429a      	cmp	r2, r3
 8003644:	d1e4      	bne.n	8003610 <HAL_PCD_EP_SetStall+0x34>
 8003646:	2002      	movs	r0, #2
}
 8003648:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 800364a:	2001      	movs	r0, #1
}
 800364c:	bd38      	pop	{r3, r4, r5, pc}
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 800364e:	6820      	ldr	r0, [r4, #0]
 8003650:	f504 7126 	add.w	r1, r4, #664	@ 0x298
 8003654:	f001 fdf4 	bl	8005240 <USB_EP0_OutStart>
 8003658:	e7e0      	b.n	800361c <HAL_PCD_EP_SetStall+0x40>
 800365a:	bf00      	nop

0800365c <HAL_PCD_EP_ClrStall>:
{
 800365c:	b538      	push	{r3, r4, r5, lr}
  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800365e:	7902      	ldrb	r2, [r0, #4]
 8003660:	f001 030f 	and.w	r3, r1, #15
 8003664:	429a      	cmp	r2, r3
 8003666:	d32f      	bcc.n	80036c8 <HAL_PCD_EP_ClrStall+0x6c>
  if ((0x80U & ep_addr) == 0x80U)
 8003668:	f001 0207 	and.w	r2, r1, #7
 800366c:	eb02 0382 	add.w	r3, r2, r2, lsl #2
 8003670:	0609      	lsls	r1, r1, #24
 8003672:	4604      	mov	r4, r0
 8003674:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8003678:	d417      	bmi.n	80036aa <HAL_PCD_EP_ClrStall+0x4e>
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800367a:	f503 71a8 	add.w	r1, r3, #336	@ 0x150
 800367e:	4401      	add	r1, r0
    ep->is_in = 0U;
 8003680:	4403      	add	r3, r0
  ep->is_stall = 0U;
 8003682:	2500      	movs	r5, #0
    ep->is_in = 0U;
 8003684:	2000      	movs	r0, #0
 8003686:	f883 0151 	strb.w	r0, [r3, #337]	@ 0x151
  ep->num = ep_addr & EP_ADDR_MSK;
 800368a:	700a      	strb	r2, [r1, #0]
  ep->is_stall = 0U;
 800368c:	708d      	strb	r5, [r1, #2]
  __HAL_LOCK(hpcd);
 800368e:	f894 3290 	ldrb.w	r3, [r4, #656]	@ 0x290
 8003692:	2b01      	cmp	r3, #1
 8003694:	d016      	beq.n	80036c4 <HAL_PCD_EP_ClrStall+0x68>
 8003696:	2301      	movs	r3, #1
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8003698:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(hpcd);
 800369a:	f884 3290 	strb.w	r3, [r4, #656]	@ 0x290
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800369e:	f001 fd71 	bl	8005184 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80036a2:	f884 5290 	strb.w	r5, [r4, #656]	@ 0x290
  return HAL_OK;
 80036a6:	4628      	mov	r0, r5
}
 80036a8:	bd38      	pop	{r3, r4, r5, pc}
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80036aa:	f103 0110 	add.w	r1, r3, #16
 80036ae:	4401      	add	r1, r0
    ep->is_in = 1U;
 80036b0:	4403      	add	r3, r0
  ep->is_stall = 0U;
 80036b2:	2500      	movs	r5, #0
    ep->is_in = 1U;
 80036b4:	2001      	movs	r0, #1
 80036b6:	7458      	strb	r0, [r3, #17]
  ep->num = ep_addr & EP_ADDR_MSK;
 80036b8:	700a      	strb	r2, [r1, #0]
  ep->is_stall = 0U;
 80036ba:	708d      	strb	r5, [r1, #2]
  __HAL_LOCK(hpcd);
 80036bc:	f894 3290 	ldrb.w	r3, [r4, #656]	@ 0x290
 80036c0:	2b01      	cmp	r3, #1
 80036c2:	d1e8      	bne.n	8003696 <HAL_PCD_EP_ClrStall+0x3a>
 80036c4:	2002      	movs	r0, #2
}
 80036c6:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 80036c8:	2001      	movs	r0, #1
}
 80036ca:	bd38      	pop	{r3, r4, r5, pc}

080036cc <HAL_PCDEx_PMAConfig>:
                                       uint16_t ep_kind, uint32_t pmaadress)
{
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 80036cc:	f011 0f80 	tst.w	r1, #128	@ 0x80
 80036d0:	d00c      	beq.n	80036ec <HAL_PCDEx_PMAConfig+0x20>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80036d2:	f001 0107 	and.w	r1, r1, #7
 80036d6:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 80036da:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
 80036de:	3010      	adds	r0, #16
  if (ep_kind == PCD_SNG_BUF)
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 80036e0:	b299      	uxth	r1, r3
  if (ep_kind == PCD_SNG_BUF)
 80036e2:	b962      	cbnz	r2, 80036fe <HAL_PCDEx_PMAConfig+0x32>
    ep->pmaadress = (uint16_t)pmaadress;
 80036e4:	80c1      	strh	r1, [r0, #6]
 80036e6:	7302      	strb	r2, [r0, #12]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
}
 80036e8:	2000      	movs	r0, #0
 80036ea:	4770      	bx	lr
    ep = &hpcd->OUT_ep[ep_addr];
 80036ec:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 80036f0:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
 80036f4:	f500 70a8 	add.w	r0, r0, #336	@ 0x150
    ep->pmaadress = (uint16_t)pmaadress;
 80036f8:	b299      	uxth	r1, r3
  if (ep_kind == PCD_SNG_BUF)
 80036fa:	2a00      	cmp	r2, #0
 80036fc:	d0f2      	beq.n	80036e4 <HAL_PCDEx_PMAConfig+0x18>
    ep->doublebuffer = 1U;
 80036fe:	2201      	movs	r2, #1
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8003700:	6083      	str	r3, [r0, #8]
 8003702:	7302      	strb	r2, [r0, #12]
}
 8003704:	2000      	movs	r0, #0
 8003706:	4770      	bx	lr

08003708 <HAL_RCC_OscConfig>:
{
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003708:	2800      	cmp	r0, #0
 800370a:	f000 81e4 	beq.w	8003ad6 <HAL_RCC_OscConfig+0x3ce>
{
 800370e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003712:	6803      	ldr	r3, [r0, #0]
 8003714:	4604      	mov	r4, r0
 8003716:	07dd      	lsls	r5, r3, #31
{
 8003718:	b082      	sub	sp, #8
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800371a:	d535      	bpl.n	8003788 <HAL_RCC_OscConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800371c:	4999      	ldr	r1, [pc, #612]	@ (8003984 <HAL_RCC_OscConfig+0x27c>)
 800371e:	684a      	ldr	r2, [r1, #4]
 8003720:	f002 020c 	and.w	r2, r2, #12
 8003724:	2a04      	cmp	r2, #4
 8003726:	f000 80ed 	beq.w	8003904 <HAL_RCC_OscConfig+0x1fc>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800372a:	684a      	ldr	r2, [r1, #4]
 800372c:	f002 020c 	and.w	r2, r2, #12
 8003730:	2a08      	cmp	r2, #8
 8003732:	f000 80e3 	beq.w	80038fc <HAL_RCC_OscConfig+0x1f4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003736:	6863      	ldr	r3, [r4, #4]
 8003738:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800373c:	d010      	beq.n	8003760 <HAL_RCC_OscConfig+0x58>
 800373e:	2b00      	cmp	r3, #0
 8003740:	f000 810a 	beq.w	8003958 <HAL_RCC_OscConfig+0x250>
 8003744:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003748:	f000 8180 	beq.w	8003a4c <HAL_RCC_OscConfig+0x344>
 800374c:	4b8d      	ldr	r3, [pc, #564]	@ (8003984 <HAL_RCC_OscConfig+0x27c>)
 800374e:	681a      	ldr	r2, [r3, #0]
 8003750:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8003754:	601a      	str	r2, [r3, #0]
 8003756:	681a      	ldr	r2, [r3, #0]
 8003758:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 800375c:	601a      	str	r2, [r3, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800375e:	e004      	b.n	800376a <HAL_RCC_OscConfig+0x62>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003760:	4a88      	ldr	r2, [pc, #544]	@ (8003984 <HAL_RCC_OscConfig+0x27c>)
 8003762:	6813      	ldr	r3, [r2, #0]
 8003764:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003768:	6013      	str	r3, [r2, #0]
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800376a:	f7fe fbb3 	bl	8001ed4 <HAL_GetTick>

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800376e:	4e85      	ldr	r6, [pc, #532]	@ (8003984 <HAL_RCC_OscConfig+0x27c>)
        tickstart = HAL_GetTick();
 8003770:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003772:	e005      	b.n	8003780 <HAL_RCC_OscConfig+0x78>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003774:	f7fe fbae 	bl	8001ed4 <HAL_GetTick>
 8003778:	1b40      	subs	r0, r0, r5
 800377a:	2864      	cmp	r0, #100	@ 0x64
 800377c:	f200 80e8 	bhi.w	8003950 <HAL_RCC_OscConfig+0x248>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003780:	6833      	ldr	r3, [r6, #0]
 8003782:	039a      	lsls	r2, r3, #14
 8003784:	d5f6      	bpl.n	8003774 <HAL_RCC_OscConfig+0x6c>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003786:	6823      	ldr	r3, [r4, #0]
 8003788:	079f      	lsls	r7, r3, #30
 800378a:	d528      	bpl.n	80037de <HAL_RCC_OscConfig+0xd6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800378c:	4a7d      	ldr	r2, [pc, #500]	@ (8003984 <HAL_RCC_OscConfig+0x27c>)
 800378e:	6851      	ldr	r1, [r2, #4]
 8003790:	f011 0f0c 	tst.w	r1, #12
 8003794:	f000 8096 	beq.w	80038c4 <HAL_RCC_OscConfig+0x1bc>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8003798:	6851      	ldr	r1, [r2, #4]
 800379a:	f001 010c 	and.w	r1, r1, #12
 800379e:	2908      	cmp	r1, #8
 80037a0:	f000 808c 	beq.w	80038bc <HAL_RCC_OscConfig+0x1b4>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80037a4:	6923      	ldr	r3, [r4, #16]
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	f000 8116 	beq.w	80039d8 <HAL_RCC_OscConfig+0x2d0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80037ac:	2201      	movs	r2, #1
 80037ae:	4b76      	ldr	r3, [pc, #472]	@ (8003988 <HAL_RCC_OscConfig+0x280>)

        /* Get Start Tick */
        tickstart = HAL_GetTick();

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80037b0:	4e74      	ldr	r6, [pc, #464]	@ (8003984 <HAL_RCC_OscConfig+0x27c>)
        __HAL_RCC_HSI_ENABLE();
 80037b2:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80037b4:	f7fe fb8e 	bl	8001ed4 <HAL_GetTick>
 80037b8:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80037ba:	e005      	b.n	80037c8 <HAL_RCC_OscConfig+0xc0>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80037bc:	f7fe fb8a 	bl	8001ed4 <HAL_GetTick>
 80037c0:	1b40      	subs	r0, r0, r5
 80037c2:	2802      	cmp	r0, #2
 80037c4:	f200 80c4 	bhi.w	8003950 <HAL_RCC_OscConfig+0x248>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80037c8:	6833      	ldr	r3, [r6, #0]
 80037ca:	0798      	lsls	r0, r3, #30
 80037cc:	d5f6      	bpl.n	80037bc <HAL_RCC_OscConfig+0xb4>
            return HAL_TIMEOUT;
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80037ce:	6833      	ldr	r3, [r6, #0]
 80037d0:	6962      	ldr	r2, [r4, #20]
 80037d2:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 80037d6:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 80037da:	6033      	str	r3, [r6, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80037dc:	6823      	ldr	r3, [r4, #0]
 80037de:	071a      	lsls	r2, r3, #28
 80037e0:	d429      	bmi.n	8003836 <HAL_RCC_OscConfig+0x12e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80037e2:	075d      	lsls	r5, r3, #29
 80037e4:	d54b      	bpl.n	800387e <HAL_RCC_OscConfig+0x176>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80037e6:	4b67      	ldr	r3, [pc, #412]	@ (8003984 <HAL_RCC_OscConfig+0x27c>)
 80037e8:	69da      	ldr	r2, [r3, #28]
 80037ea:	00d0      	lsls	r0, r2, #3
 80037ec:	f100 8084 	bmi.w	80038f8 <HAL_RCC_OscConfig+0x1f0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
      pwrclkchanged = SET;
 80037f0:	2501      	movs	r5, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 80037f2:	69da      	ldr	r2, [r3, #28]
 80037f4:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 80037f8:	61da      	str	r2, [r3, #28]
 80037fa:	69db      	ldr	r3, [r3, #28]
 80037fc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003800:	9300      	str	r3, [sp, #0]
 8003802:	9b00      	ldr	r3, [sp, #0]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003804:	4e61      	ldr	r6, [pc, #388]	@ (800398c <HAL_RCC_OscConfig+0x284>)
 8003806:	6833      	ldr	r3, [r6, #0]
 8003808:	05d9      	lsls	r1, r3, #23
 800380a:	f140 8091 	bpl.w	8003930 <HAL_RCC_OscConfig+0x228>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800380e:	68e3      	ldr	r3, [r4, #12]
 8003810:	2b01      	cmp	r3, #1
 8003812:	f000 80f2 	beq.w	80039fa <HAL_RCC_OscConfig+0x2f2>
 8003816:	2b00      	cmp	r3, #0
 8003818:	f000 80be 	beq.w	8003998 <HAL_RCC_OscConfig+0x290>
 800381c:	2b05      	cmp	r3, #5
 800381e:	4b59      	ldr	r3, [pc, #356]	@ (8003984 <HAL_RCC_OscConfig+0x27c>)
 8003820:	6a1a      	ldr	r2, [r3, #32]
 8003822:	f000 8120 	beq.w	8003a66 <HAL_RCC_OscConfig+0x35e>
 8003826:	f022 0201 	bic.w	r2, r2, #1
 800382a:	621a      	str	r2, [r3, #32]
 800382c:	6a1a      	ldr	r2, [r3, #32]
 800382e:	f022 0204 	bic.w	r2, r2, #4
 8003832:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003834:	e0e6      	b.n	8003a04 <HAL_RCC_OscConfig+0x2fc>
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003836:	69a3      	ldr	r3, [r4, #24]
 8003838:	2b00      	cmp	r3, #0
 800383a:	d04c      	beq.n	80038d6 <HAL_RCC_OscConfig+0x1ce>
      __HAL_RCC_LSI_ENABLE();
 800383c:	2201      	movs	r2, #1
 800383e:	4b52      	ldr	r3, [pc, #328]	@ (8003988 <HAL_RCC_OscConfig+0x280>)
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003840:	4e50      	ldr	r6, [pc, #320]	@ (8003984 <HAL_RCC_OscConfig+0x27c>)
      __HAL_RCC_LSI_ENABLE();
 8003842:	f8c3 2480 	str.w	r2, [r3, #1152]	@ 0x480
      tickstart = HAL_GetTick();
 8003846:	f7fe fb45 	bl	8001ed4 <HAL_GetTick>
 800384a:	4605      	mov	r5, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800384c:	e004      	b.n	8003858 <HAL_RCC_OscConfig+0x150>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800384e:	f7fe fb41 	bl	8001ed4 <HAL_GetTick>
 8003852:	1b40      	subs	r0, r0, r5
 8003854:	2802      	cmp	r0, #2
 8003856:	d87b      	bhi.n	8003950 <HAL_RCC_OscConfig+0x248>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003858:	6a73      	ldr	r3, [r6, #36]	@ 0x24
 800385a:	079b      	lsls	r3, r3, #30
 800385c:	d5f7      	bpl.n	800384e <HAL_RCC_OscConfig+0x146>
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800385e:	4b4c      	ldr	r3, [pc, #304]	@ (8003990 <HAL_RCC_OscConfig+0x288>)
 8003860:	4a4c      	ldr	r2, [pc, #304]	@ (8003994 <HAL_RCC_OscConfig+0x28c>)
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	fba2 2303 	umull	r2, r3, r2, r3
 8003868:	0a5b      	lsrs	r3, r3, #9
 800386a:	9301      	str	r3, [sp, #4]
  do
  {
    __NOP();
 800386c:	bf00      	nop
  }
  while (Delay --);
 800386e:	9b01      	ldr	r3, [sp, #4]
 8003870:	1e5a      	subs	r2, r3, #1
 8003872:	9201      	str	r2, [sp, #4]
 8003874:	2b00      	cmp	r3, #0
 8003876:	d1f9      	bne.n	800386c <HAL_RCC_OscConfig+0x164>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003878:	6823      	ldr	r3, [r4, #0]
 800387a:	075d      	lsls	r5, r3, #29
 800387c:	d4b3      	bmi.n	80037e6 <HAL_RCC_OscConfig+0xde>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800387e:	69e3      	ldr	r3, [r4, #28]
 8003880:	b1c3      	cbz	r3, 80038b4 <HAL_RCC_OscConfig+0x1ac>
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003882:	4d40      	ldr	r5, [pc, #256]	@ (8003984 <HAL_RCC_OscConfig+0x27c>)
 8003884:	686a      	ldr	r2, [r5, #4]
 8003886:	f002 020c 	and.w	r2, r2, #12
 800388a:	2a08      	cmp	r2, #8
 800388c:	f000 80cd 	beq.w	8003a2a <HAL_RCC_OscConfig+0x322>
        __HAL_RCC_PLL_DISABLE();
 8003890:	2200      	movs	r2, #0
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003892:	2b02      	cmp	r3, #2
        __HAL_RCC_PLL_DISABLE();
 8003894:	4b3c      	ldr	r3, [pc, #240]	@ (8003988 <HAL_RCC_OscConfig+0x280>)
 8003896:	661a      	str	r2, [r3, #96]	@ 0x60
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003898:	f000 80ed 	beq.w	8003a76 <HAL_RCC_OscConfig+0x36e>
        tickstart = HAL_GetTick();
 800389c:	f7fe fb1a 	bl	8001ed4 <HAL_GetTick>
 80038a0:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80038a2:	e004      	b.n	80038ae <HAL_RCC_OscConfig+0x1a6>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80038a4:	f7fe fb16 	bl	8001ed4 <HAL_GetTick>
 80038a8:	1b00      	subs	r0, r0, r4
 80038aa:	2802      	cmp	r0, #2
 80038ac:	d850      	bhi.n	8003950 <HAL_RCC_OscConfig+0x248>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80038ae:	682b      	ldr	r3, [r5, #0]
 80038b0:	019b      	lsls	r3, r3, #6
 80038b2:	d4f7      	bmi.n	80038a4 <HAL_RCC_OscConfig+0x19c>
  return HAL_OK;
 80038b4:	2000      	movs	r0, #0
}
 80038b6:	b002      	add	sp, #8
 80038b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80038bc:	6852      	ldr	r2, [r2, #4]
 80038be:	03d6      	lsls	r6, r2, #15
 80038c0:	f53f af70 	bmi.w	80037a4 <HAL_RCC_OscConfig+0x9c>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80038c4:	4a2f      	ldr	r2, [pc, #188]	@ (8003984 <HAL_RCC_OscConfig+0x27c>)
 80038c6:	6812      	ldr	r2, [r2, #0]
 80038c8:	0795      	lsls	r5, r2, #30
 80038ca:	d525      	bpl.n	8003918 <HAL_RCC_OscConfig+0x210>
 80038cc:	6922      	ldr	r2, [r4, #16]
 80038ce:	2a01      	cmp	r2, #1
 80038d0:	d022      	beq.n	8003918 <HAL_RCC_OscConfig+0x210>
    return HAL_ERROR;
 80038d2:	2001      	movs	r0, #1
 80038d4:	e7ef      	b.n	80038b6 <HAL_RCC_OscConfig+0x1ae>
      __HAL_RCC_LSI_DISABLE();
 80038d6:	4a2c      	ldr	r2, [pc, #176]	@ (8003988 <HAL_RCC_OscConfig+0x280>)
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80038d8:	4e2a      	ldr	r6, [pc, #168]	@ (8003984 <HAL_RCC_OscConfig+0x27c>)
      __HAL_RCC_LSI_DISABLE();
 80038da:	f8c2 3480 	str.w	r3, [r2, #1152]	@ 0x480
      tickstart = HAL_GetTick();
 80038de:	f7fe faf9 	bl	8001ed4 <HAL_GetTick>
 80038e2:	4605      	mov	r5, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80038e4:	e004      	b.n	80038f0 <HAL_RCC_OscConfig+0x1e8>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80038e6:	f7fe faf5 	bl	8001ed4 <HAL_GetTick>
 80038ea:	1b40      	subs	r0, r0, r5
 80038ec:	2802      	cmp	r0, #2
 80038ee:	d82f      	bhi.n	8003950 <HAL_RCC_OscConfig+0x248>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80038f0:	6a73      	ldr	r3, [r6, #36]	@ 0x24
 80038f2:	079f      	lsls	r7, r3, #30
 80038f4:	d4f7      	bmi.n	80038e6 <HAL_RCC_OscConfig+0x1de>
 80038f6:	e7bf      	b.n	8003878 <HAL_RCC_OscConfig+0x170>
    FlagStatus       pwrclkchanged = RESET;
 80038f8:	2500      	movs	r5, #0
 80038fa:	e783      	b.n	8003804 <HAL_RCC_OscConfig+0xfc>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80038fc:	684a      	ldr	r2, [r1, #4]
 80038fe:	03d0      	lsls	r0, r2, #15
 8003900:	f57f af19 	bpl.w	8003736 <HAL_RCC_OscConfig+0x2e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003904:	4a1f      	ldr	r2, [pc, #124]	@ (8003984 <HAL_RCC_OscConfig+0x27c>)
 8003906:	6812      	ldr	r2, [r2, #0]
 8003908:	0391      	lsls	r1, r2, #14
 800390a:	f57f af3d 	bpl.w	8003788 <HAL_RCC_OscConfig+0x80>
 800390e:	6862      	ldr	r2, [r4, #4]
 8003910:	2a00      	cmp	r2, #0
 8003912:	f47f af39 	bne.w	8003788 <HAL_RCC_OscConfig+0x80>
 8003916:	e7dc      	b.n	80038d2 <HAL_RCC_OscConfig+0x1ca>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003918:	491a      	ldr	r1, [pc, #104]	@ (8003984 <HAL_RCC_OscConfig+0x27c>)
 800391a:	6960      	ldr	r0, [r4, #20]
 800391c:	680a      	ldr	r2, [r1, #0]
 800391e:	f022 02f8 	bic.w	r2, r2, #248	@ 0xf8
 8003922:	ea42 02c0 	orr.w	r2, r2, r0, lsl #3
 8003926:	600a      	str	r2, [r1, #0]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003928:	071a      	lsls	r2, r3, #28
 800392a:	f57f af5a 	bpl.w	80037e2 <HAL_RCC_OscConfig+0xda>
 800392e:	e782      	b.n	8003836 <HAL_RCC_OscConfig+0x12e>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003930:	6833      	ldr	r3, [r6, #0]
 8003932:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003936:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8003938:	f7fe facc 	bl	8001ed4 <HAL_GetTick>
 800393c:	4607      	mov	r7, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800393e:	6833      	ldr	r3, [r6, #0]
 8003940:	05da      	lsls	r2, r3, #23
 8003942:	f53f af64 	bmi.w	800380e <HAL_RCC_OscConfig+0x106>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003946:	f7fe fac5 	bl	8001ed4 <HAL_GetTick>
 800394a:	1bc0      	subs	r0, r0, r7
 800394c:	2864      	cmp	r0, #100	@ 0x64
 800394e:	d9f6      	bls.n	800393e <HAL_RCC_OscConfig+0x236>
            return HAL_TIMEOUT;
 8003950:	2003      	movs	r0, #3
}
 8003952:	b002      	add	sp, #8
 8003954:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003958:	4d0a      	ldr	r5, [pc, #40]	@ (8003984 <HAL_RCC_OscConfig+0x27c>)
 800395a:	682b      	ldr	r3, [r5, #0]
 800395c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003960:	602b      	str	r3, [r5, #0]
 8003962:	682b      	ldr	r3, [r5, #0]
 8003964:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003968:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800396a:	f7fe fab3 	bl	8001ed4 <HAL_GetTick>
 800396e:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003970:	e004      	b.n	800397c <HAL_RCC_OscConfig+0x274>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003972:	f7fe faaf 	bl	8001ed4 <HAL_GetTick>
 8003976:	1b80      	subs	r0, r0, r6
 8003978:	2864      	cmp	r0, #100	@ 0x64
 800397a:	d8e9      	bhi.n	8003950 <HAL_RCC_OscConfig+0x248>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800397c:	682b      	ldr	r3, [r5, #0]
 800397e:	039b      	lsls	r3, r3, #14
 8003980:	d4f7      	bmi.n	8003972 <HAL_RCC_OscConfig+0x26a>
 8003982:	e700      	b.n	8003786 <HAL_RCC_OscConfig+0x7e>
 8003984:	40021000 	.word	0x40021000
 8003988:	42420000 	.word	0x42420000
 800398c:	40007000 	.word	0x40007000
 8003990:	20000000 	.word	0x20000000
 8003994:	10624dd3 	.word	0x10624dd3
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003998:	4e50      	ldr	r6, [pc, #320]	@ (8003adc <HAL_RCC_OscConfig+0x3d4>)
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800399a:	f241 3888 	movw	r8, #5000	@ 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800399e:	6a33      	ldr	r3, [r6, #32]
 80039a0:	f023 0301 	bic.w	r3, r3, #1
 80039a4:	6233      	str	r3, [r6, #32]
 80039a6:	6a33      	ldr	r3, [r6, #32]
 80039a8:	f023 0304 	bic.w	r3, r3, #4
 80039ac:	6233      	str	r3, [r6, #32]
      tickstart = HAL_GetTick();
 80039ae:	f7fe fa91 	bl	8001ed4 <HAL_GetTick>
 80039b2:	4607      	mov	r7, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80039b4:	e004      	b.n	80039c0 <HAL_RCC_OscConfig+0x2b8>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80039b6:	f7fe fa8d 	bl	8001ed4 <HAL_GetTick>
 80039ba:	1bc0      	subs	r0, r0, r7
 80039bc:	4540      	cmp	r0, r8
 80039be:	d8c7      	bhi.n	8003950 <HAL_RCC_OscConfig+0x248>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80039c0:	6a33      	ldr	r3, [r6, #32]
 80039c2:	0798      	lsls	r0, r3, #30
 80039c4:	d4f7      	bmi.n	80039b6 <HAL_RCC_OscConfig+0x2ae>
    if (pwrclkchanged == SET)
 80039c6:	2d00      	cmp	r5, #0
 80039c8:	f43f af59 	beq.w	800387e <HAL_RCC_OscConfig+0x176>
      __HAL_RCC_PWR_CLK_DISABLE();
 80039cc:	4a43      	ldr	r2, [pc, #268]	@ (8003adc <HAL_RCC_OscConfig+0x3d4>)
 80039ce:	69d3      	ldr	r3, [r2, #28]
 80039d0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80039d4:	61d3      	str	r3, [r2, #28]
 80039d6:	e752      	b.n	800387e <HAL_RCC_OscConfig+0x176>
        __HAL_RCC_HSI_DISABLE();
 80039d8:	4a41      	ldr	r2, [pc, #260]	@ (8003ae0 <HAL_RCC_OscConfig+0x3d8>)
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80039da:	4e40      	ldr	r6, [pc, #256]	@ (8003adc <HAL_RCC_OscConfig+0x3d4>)
        __HAL_RCC_HSI_DISABLE();
 80039dc:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 80039de:	f7fe fa79 	bl	8001ed4 <HAL_GetTick>
 80039e2:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80039e4:	e004      	b.n	80039f0 <HAL_RCC_OscConfig+0x2e8>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80039e6:	f7fe fa75 	bl	8001ed4 <HAL_GetTick>
 80039ea:	1b40      	subs	r0, r0, r5
 80039ec:	2802      	cmp	r0, #2
 80039ee:	d8af      	bhi.n	8003950 <HAL_RCC_OscConfig+0x248>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80039f0:	6833      	ldr	r3, [r6, #0]
 80039f2:	0799      	lsls	r1, r3, #30
 80039f4:	d4f7      	bmi.n	80039e6 <HAL_RCC_OscConfig+0x2de>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80039f6:	6823      	ldr	r3, [r4, #0]
 80039f8:	e6f1      	b.n	80037de <HAL_RCC_OscConfig+0xd6>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80039fa:	4a38      	ldr	r2, [pc, #224]	@ (8003adc <HAL_RCC_OscConfig+0x3d4>)
 80039fc:	6a13      	ldr	r3, [r2, #32]
 80039fe:	f043 0301 	orr.w	r3, r3, #1
 8003a02:	6213      	str	r3, [r2, #32]
      tickstart = HAL_GetTick();
 8003a04:	f7fe fa66 	bl	8001ed4 <HAL_GetTick>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003a08:	f241 3888 	movw	r8, #5000	@ 0x1388
      tickstart = HAL_GetTick();
 8003a0c:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003a0e:	4f33      	ldr	r7, [pc, #204]	@ (8003adc <HAL_RCC_OscConfig+0x3d4>)
 8003a10:	e004      	b.n	8003a1c <HAL_RCC_OscConfig+0x314>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003a12:	f7fe fa5f 	bl	8001ed4 <HAL_GetTick>
 8003a16:	1b80      	subs	r0, r0, r6
 8003a18:	4540      	cmp	r0, r8
 8003a1a:	d899      	bhi.n	8003950 <HAL_RCC_OscConfig+0x248>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003a1c:	6a3b      	ldr	r3, [r7, #32]
 8003a1e:	079b      	lsls	r3, r3, #30
 8003a20:	d5f7      	bpl.n	8003a12 <HAL_RCC_OscConfig+0x30a>
    if (pwrclkchanged == SET)
 8003a22:	2d00      	cmp	r5, #0
 8003a24:	f43f af2b 	beq.w	800387e <HAL_RCC_OscConfig+0x176>
 8003a28:	e7d0      	b.n	80039cc <HAL_RCC_OscConfig+0x2c4>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003a2a:	2b01      	cmp	r3, #1
 8003a2c:	f43f af51 	beq.w	80038d2 <HAL_RCC_OscConfig+0x1ca>
        pll_config = RCC->CFGR;
 8003a30:	686b      	ldr	r3, [r5, #4]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003a32:	6a22      	ldr	r2, [r4, #32]
 8003a34:	f403 3180 	and.w	r1, r3, #65536	@ 0x10000
 8003a38:	4291      	cmp	r1, r2
 8003a3a:	f47f af4a 	bne.w	80038d2 <HAL_RCC_OscConfig+0x1ca>
 8003a3e:	6a60      	ldr	r0, [r4, #36]	@ 0x24
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003a40:	f403 1370 	and.w	r3, r3, #3932160	@ 0x3c0000
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003a44:	1a18      	subs	r0, r3, r0
 8003a46:	bf18      	it	ne
 8003a48:	2001      	movne	r0, #1
 8003a4a:	e734      	b.n	80038b6 <HAL_RCC_OscConfig+0x1ae>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003a4c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003a50:	f5a3 333c 	sub.w	r3, r3, #192512	@ 0x2f000
 8003a54:	681a      	ldr	r2, [r3, #0]
 8003a56:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 8003a5a:	601a      	str	r2, [r3, #0]
 8003a5c:	681a      	ldr	r2, [r3, #0]
 8003a5e:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8003a62:	601a      	str	r2, [r3, #0]
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003a64:	e681      	b.n	800376a <HAL_RCC_OscConfig+0x62>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003a66:	f042 0204 	orr.w	r2, r2, #4
 8003a6a:	621a      	str	r2, [r3, #32]
 8003a6c:	6a1a      	ldr	r2, [r3, #32]
 8003a6e:	f042 0201 	orr.w	r2, r2, #1
 8003a72:	621a      	str	r2, [r3, #32]
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003a74:	e7c6      	b.n	8003a04 <HAL_RCC_OscConfig+0x2fc>
        tickstart = HAL_GetTick();
 8003a76:	f7fe fa2d 	bl	8001ed4 <HAL_GetTick>
 8003a7a:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003a7c:	e005      	b.n	8003a8a <HAL_RCC_OscConfig+0x382>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003a7e:	f7fe fa29 	bl	8001ed4 <HAL_GetTick>
 8003a82:	1b80      	subs	r0, r0, r6
 8003a84:	2802      	cmp	r0, #2
 8003a86:	f63f af63 	bhi.w	8003950 <HAL_RCC_OscConfig+0x248>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003a8a:	682b      	ldr	r3, [r5, #0]
 8003a8c:	0199      	lsls	r1, r3, #6
 8003a8e:	d4f6      	bmi.n	8003a7e <HAL_RCC_OscConfig+0x376>
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003a90:	6a23      	ldr	r3, [r4, #32]
 8003a92:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003a96:	d105      	bne.n	8003aa4 <HAL_RCC_OscConfig+0x39c>
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003a98:	686a      	ldr	r2, [r5, #4]
 8003a9a:	68a1      	ldr	r1, [r4, #8]
 8003a9c:	f422 3200 	bic.w	r2, r2, #131072	@ 0x20000
 8003aa0:	430a      	orrs	r2, r1
 8003aa2:	606a      	str	r2, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 8003aa4:	2001      	movs	r0, #1
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003aa6:	4d0d      	ldr	r5, [pc, #52]	@ (8003adc <HAL_RCC_OscConfig+0x3d4>)
 8003aa8:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 8003aaa:	686a      	ldr	r2, [r5, #4]
 8003aac:	430b      	orrs	r3, r1
 8003aae:	f422 1274 	bic.w	r2, r2, #3997696	@ 0x3d0000
        __HAL_RCC_PLL_ENABLE();
 8003ab2:	490b      	ldr	r1, [pc, #44]	@ (8003ae0 <HAL_RCC_OscConfig+0x3d8>)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003ab4:	4313      	orrs	r3, r2
 8003ab6:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 8003ab8:	6608      	str	r0, [r1, #96]	@ 0x60
        tickstart = HAL_GetTick();
 8003aba:	f7fe fa0b 	bl	8001ed4 <HAL_GetTick>
 8003abe:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003ac0:	e005      	b.n	8003ace <HAL_RCC_OscConfig+0x3c6>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003ac2:	f7fe fa07 	bl	8001ed4 <HAL_GetTick>
 8003ac6:	1b00      	subs	r0, r0, r4
 8003ac8:	2802      	cmp	r0, #2
 8003aca:	f63f af41 	bhi.w	8003950 <HAL_RCC_OscConfig+0x248>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003ace:	682b      	ldr	r3, [r5, #0]
 8003ad0:	019a      	lsls	r2, r3, #6
 8003ad2:	d5f6      	bpl.n	8003ac2 <HAL_RCC_OscConfig+0x3ba>
 8003ad4:	e6ee      	b.n	80038b4 <HAL_RCC_OscConfig+0x1ac>
    return HAL_ERROR;
 8003ad6:	2001      	movs	r0, #1
}
 8003ad8:	4770      	bx	lr
 8003ada:	bf00      	nop
 8003adc:	40021000 	.word	0x40021000
 8003ae0:	42420000 	.word	0x42420000

08003ae4 <HAL_RCC_ClockConfig>:
  if (RCC_ClkInitStruct == NULL)
 8003ae4:	2800      	cmp	r0, #0
 8003ae6:	f000 80a1 	beq.w	8003c2c <HAL_RCC_ClockConfig+0x148>
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003aea:	4a56      	ldr	r2, [pc, #344]	@ (8003c44 <HAL_RCC_ClockConfig+0x160>)
{
 8003aec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003af0:	6813      	ldr	r3, [r2, #0]
 8003af2:	4604      	mov	r4, r0
 8003af4:	f003 0307 	and.w	r3, r3, #7
 8003af8:	428b      	cmp	r3, r1
 8003afa:	460d      	mov	r5, r1
 8003afc:	d20c      	bcs.n	8003b18 <HAL_RCC_ClockConfig+0x34>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003afe:	6813      	ldr	r3, [r2, #0]
 8003b00:	f023 0307 	bic.w	r3, r3, #7
 8003b04:	430b      	orrs	r3, r1
 8003b06:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003b08:	6813      	ldr	r3, [r2, #0]
 8003b0a:	f003 0307 	and.w	r3, r3, #7
 8003b0e:	428b      	cmp	r3, r1
 8003b10:	d002      	beq.n	8003b18 <HAL_RCC_ClockConfig+0x34>
    return HAL_ERROR;
 8003b12:	2001      	movs	r0, #1
}
 8003b14:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003b18:	6823      	ldr	r3, [r4, #0]
 8003b1a:	079e      	lsls	r6, r3, #30
 8003b1c:	d514      	bpl.n	8003b48 <HAL_RCC_ClockConfig+0x64>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003b1e:	0758      	lsls	r0, r3, #29
 8003b20:	d504      	bpl.n	8003b2c <HAL_RCC_ClockConfig+0x48>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003b22:	4949      	ldr	r1, [pc, #292]	@ (8003c48 <HAL_RCC_ClockConfig+0x164>)
 8003b24:	684a      	ldr	r2, [r1, #4]
 8003b26:	f442 62e0 	orr.w	r2, r2, #1792	@ 0x700
 8003b2a:	604a      	str	r2, [r1, #4]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003b2c:	0719      	lsls	r1, r3, #28
 8003b2e:	d504      	bpl.n	8003b3a <HAL_RCC_ClockConfig+0x56>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003b30:	4945      	ldr	r1, [pc, #276]	@ (8003c48 <HAL_RCC_ClockConfig+0x164>)
 8003b32:	684a      	ldr	r2, [r1, #4]
 8003b34:	f442 5260 	orr.w	r2, r2, #14336	@ 0x3800
 8003b38:	604a      	str	r2, [r1, #4]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003b3a:	4943      	ldr	r1, [pc, #268]	@ (8003c48 <HAL_RCC_ClockConfig+0x164>)
 8003b3c:	68a0      	ldr	r0, [r4, #8]
 8003b3e:	684a      	ldr	r2, [r1, #4]
 8003b40:	f022 02f0 	bic.w	r2, r2, #240	@ 0xf0
 8003b44:	4302      	orrs	r2, r0
 8003b46:	604a      	str	r2, [r1, #4]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003b48:	07da      	lsls	r2, r3, #31
 8003b4a:	d520      	bpl.n	8003b8e <HAL_RCC_ClockConfig+0xaa>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003b4c:	6862      	ldr	r2, [r4, #4]
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003b4e:	4b3e      	ldr	r3, [pc, #248]	@ (8003c48 <HAL_RCC_ClockConfig+0x164>)
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003b50:	2a01      	cmp	r2, #1
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003b52:	681b      	ldr	r3, [r3, #0]
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003b54:	d06c      	beq.n	8003c30 <HAL_RCC_ClockConfig+0x14c>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003b56:	2a02      	cmp	r2, #2
 8003b58:	d065      	beq.n	8003c26 <HAL_RCC_ClockConfig+0x142>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003b5a:	079e      	lsls	r6, r3, #30
 8003b5c:	d5d9      	bpl.n	8003b12 <HAL_RCC_ClockConfig+0x2e>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003b5e:	4e3a      	ldr	r6, [pc, #232]	@ (8003c48 <HAL_RCC_ClockConfig+0x164>)
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003b60:	f241 3888 	movw	r8, #5000	@ 0x1388
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003b64:	6873      	ldr	r3, [r6, #4]
 8003b66:	f023 0303 	bic.w	r3, r3, #3
 8003b6a:	4313      	orrs	r3, r2
 8003b6c:	6073      	str	r3, [r6, #4]
    tickstart = HAL_GetTick();
 8003b6e:	f7fe f9b1 	bl	8001ed4 <HAL_GetTick>
 8003b72:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003b74:	e004      	b.n	8003b80 <HAL_RCC_ClockConfig+0x9c>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003b76:	f7fe f9ad 	bl	8001ed4 <HAL_GetTick>
 8003b7a:	1bc0      	subs	r0, r0, r7
 8003b7c:	4540      	cmp	r0, r8
 8003b7e:	d85a      	bhi.n	8003c36 <HAL_RCC_ClockConfig+0x152>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003b80:	6873      	ldr	r3, [r6, #4]
 8003b82:	6862      	ldr	r2, [r4, #4]
 8003b84:	f003 030c 	and.w	r3, r3, #12
 8003b88:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8003b8c:	d1f3      	bne.n	8003b76 <HAL_RCC_ClockConfig+0x92>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003b8e:	4a2d      	ldr	r2, [pc, #180]	@ (8003c44 <HAL_RCC_ClockConfig+0x160>)
 8003b90:	6813      	ldr	r3, [r2, #0]
 8003b92:	f003 0307 	and.w	r3, r3, #7
 8003b96:	42ab      	cmp	r3, r5
 8003b98:	d909      	bls.n	8003bae <HAL_RCC_ClockConfig+0xca>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003b9a:	6813      	ldr	r3, [r2, #0]
 8003b9c:	f023 0307 	bic.w	r3, r3, #7
 8003ba0:	432b      	orrs	r3, r5
 8003ba2:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003ba4:	6813      	ldr	r3, [r2, #0]
 8003ba6:	f003 0307 	and.w	r3, r3, #7
 8003baa:	42ab      	cmp	r3, r5
 8003bac:	d1b1      	bne.n	8003b12 <HAL_RCC_ClockConfig+0x2e>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003bae:	6823      	ldr	r3, [r4, #0]
 8003bb0:	0758      	lsls	r0, r3, #29
 8003bb2:	d506      	bpl.n	8003bc2 <HAL_RCC_ClockConfig+0xde>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003bb4:	4924      	ldr	r1, [pc, #144]	@ (8003c48 <HAL_RCC_ClockConfig+0x164>)
 8003bb6:	68e0      	ldr	r0, [r4, #12]
 8003bb8:	684a      	ldr	r2, [r1, #4]
 8003bba:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8003bbe:	4302      	orrs	r2, r0
 8003bc0:	604a      	str	r2, [r1, #4]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003bc2:	0719      	lsls	r1, r3, #28
 8003bc4:	d507      	bpl.n	8003bd6 <HAL_RCC_ClockConfig+0xf2>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003bc6:	4a20      	ldr	r2, [pc, #128]	@ (8003c48 <HAL_RCC_ClockConfig+0x164>)
 8003bc8:	6921      	ldr	r1, [r4, #16]
 8003bca:	6853      	ldr	r3, [r2, #4]
 8003bcc:	f423 5360 	bic.w	r3, r3, #14336	@ 0x3800
 8003bd0:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8003bd4:	6053      	str	r3, [r2, #4]
  tmpreg = RCC->CFGR;
 8003bd6:	491c      	ldr	r1, [pc, #112]	@ (8003c48 <HAL_RCC_ClockConfig+0x164>)
 8003bd8:	684a      	ldr	r2, [r1, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 8003bda:	f002 030c 	and.w	r3, r2, #12
 8003bde:	2b08      	cmp	r3, #8
 8003be0:	d010      	beq.n	8003c04 <HAL_RCC_ClockConfig+0x120>
      sysclockfreq = HSE_VALUE;
 8003be2:	4b1a      	ldr	r3, [pc, #104]	@ (8003c4c <HAL_RCC_ClockConfig+0x168>)
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003be4:	4a18      	ldr	r2, [pc, #96]	@ (8003c48 <HAL_RCC_ClockConfig+0x164>)
 8003be6:	481a      	ldr	r0, [pc, #104]	@ (8003c50 <HAL_RCC_ClockConfig+0x16c>)
 8003be8:	6852      	ldr	r2, [r2, #4]
  HAL_InitTick(uwTickPrio);
 8003bea:	491a      	ldr	r1, [pc, #104]	@ (8003c54 <HAL_RCC_ClockConfig+0x170>)
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003bec:	f3c2 1203 	ubfx	r2, r2, #4, #4
 8003bf0:	5c80      	ldrb	r0, [r0, r2]
 8003bf2:	4a19      	ldr	r2, [pc, #100]	@ (8003c58 <HAL_RCC_ClockConfig+0x174>)
 8003bf4:	40c3      	lsrs	r3, r0
  HAL_InitTick(uwTickPrio);
 8003bf6:	6808      	ldr	r0, [r1, #0]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003bf8:	6013      	str	r3, [r2, #0]
  HAL_InitTick(uwTickPrio);
 8003bfa:	f7fe f929 	bl	8001e50 <HAL_InitTick>
  return HAL_OK;
 8003bfe:	2000      	movs	r0, #0
}
 8003c00:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003c04:	4815      	ldr	r0, [pc, #84]	@ (8003c5c <HAL_RCC_ClockConfig+0x178>)
 8003c06:	f3c2 4383 	ubfx	r3, r2, #18, #4
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003c0a:	03d2      	lsls	r2, r2, #15
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003c0c:	5cc3      	ldrb	r3, [r0, r3]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003c0e:	d514      	bpl.n	8003c3a <HAL_RCC_ClockConfig+0x156>
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003c10:	480e      	ldr	r0, [pc, #56]	@ (8003c4c <HAL_RCC_ClockConfig+0x168>)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003c12:	684a      	ldr	r2, [r1, #4]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003c14:	fb00 f303 	mul.w	r3, r0, r3
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003c18:	4911      	ldr	r1, [pc, #68]	@ (8003c60 <HAL_RCC_ClockConfig+0x17c>)
 8003c1a:	f3c2 4240 	ubfx	r2, r2, #17, #1
 8003c1e:	5c8a      	ldrb	r2, [r1, r2]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003c20:	fbb3 f3f2 	udiv	r3, r3, r2
 8003c24:	e7de      	b.n	8003be4 <HAL_RCC_ClockConfig+0x100>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003c26:	019f      	lsls	r7, r3, #6
 8003c28:	d499      	bmi.n	8003b5e <HAL_RCC_ClockConfig+0x7a>
 8003c2a:	e772      	b.n	8003b12 <HAL_RCC_ClockConfig+0x2e>
    return HAL_ERROR;
 8003c2c:	2001      	movs	r0, #1
}
 8003c2e:	4770      	bx	lr
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003c30:	039b      	lsls	r3, r3, #14
 8003c32:	d494      	bmi.n	8003b5e <HAL_RCC_ClockConfig+0x7a>
 8003c34:	e76d      	b.n	8003b12 <HAL_RCC_ClockConfig+0x2e>
        return HAL_TIMEOUT;
 8003c36:	2003      	movs	r0, #3
 8003c38:	e76c      	b.n	8003b14 <HAL_RCC_ClockConfig+0x30>
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003c3a:	4a0a      	ldr	r2, [pc, #40]	@ (8003c64 <HAL_RCC_ClockConfig+0x180>)
 8003c3c:	fb02 f303 	mul.w	r3, r2, r3
 8003c40:	e7d0      	b.n	8003be4 <HAL_RCC_ClockConfig+0x100>
 8003c42:	bf00      	nop
 8003c44:	40022000 	.word	0x40022000
 8003c48:	40021000 	.word	0x40021000
 8003c4c:	007a1200 	.word	0x007a1200
 8003c50:	0800aaf8 	.word	0x0800aaf8
 8003c54:	20000008 	.word	0x20000008
 8003c58:	20000000 	.word	0x20000000
 8003c5c:	0800ab0c 	.word	0x0800ab0c
 8003c60:	0800ab08 	.word	0x0800ab08
 8003c64:	003d0900 	.word	0x003d0900

08003c68 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003c68:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8003c6c:	6803      	ldr	r3, [r0, #0]
{
 8003c6e:	4604      	mov	r4, r0
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8003c70:	07d8      	lsls	r0, r3, #31
{
 8003c72:	b082      	sub	sp, #8
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8003c74:	d52c      	bpl.n	8003cd0 <HAL_RCCEx_PeriphCLKConfig+0x68>
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003c76:	4b39      	ldr	r3, [pc, #228]	@ (8003d5c <HAL_RCCEx_PeriphCLKConfig+0xf4>)
 8003c78:	69da      	ldr	r2, [r3, #28]
 8003c7a:	00d1      	lsls	r1, r2, #3
 8003c7c:	d53f      	bpl.n	8003cfe <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
      pwrclkchanged = SET;
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c7e:	4d38      	ldr	r5, [pc, #224]	@ (8003d60 <HAL_RCCEx_PeriphCLKConfig+0xf8>)
    FlagStatus pwrclkchanged = RESET;
 8003c80:	2600      	movs	r6, #0
    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c82:	682b      	ldr	r3, [r5, #0]
 8003c84:	05da      	lsls	r2, r3, #23
 8003c86:	d548      	bpl.n	8003d1a <HAL_RCCEx_PeriphCLKConfig+0xb2>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003c88:	4d34      	ldr	r5, [pc, #208]	@ (8003d5c <HAL_RCCEx_PeriphCLKConfig+0xf4>)
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003c8a:	6861      	ldr	r1, [r4, #4]
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003c8c:	6a2b      	ldr	r3, [r5, #32]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003c8e:	f413 7340 	ands.w	r3, r3, #768	@ 0x300
 8003c92:	d011      	beq.n	8003cb8 <HAL_RCCEx_PeriphCLKConfig+0x50>
 8003c94:	f401 7240 	and.w	r2, r1, #768	@ 0x300
 8003c98:	429a      	cmp	r2, r3
 8003c9a:	d00d      	beq.n	8003cb8 <HAL_RCCEx_PeriphCLKConfig+0x50>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003c9c:	2000      	movs	r0, #0
      __HAL_RCC_BACKUPRESET_FORCE();
 8003c9e:	2701      	movs	r7, #1
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003ca0:	6a2b      	ldr	r3, [r5, #32]
      __HAL_RCC_BACKUPRESET_FORCE();
 8003ca2:	4a30      	ldr	r2, [pc, #192]	@ (8003d64 <HAL_RCCEx_PeriphCLKConfig+0xfc>)
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003ca4:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
      __HAL_RCC_BACKUPRESET_FORCE();
 8003ca8:	f8c2 7440 	str.w	r7, [r2, #1088]	@ 0x440
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003cac:	f8c2 0440 	str.w	r0, [r2, #1088]	@ 0x440
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003cb0:	07d8      	lsls	r0, r3, #31
      RCC->BDCR = temp_reg;
 8003cb2:	6229      	str	r1, [r5, #32]
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003cb4:	d444      	bmi.n	8003d40 <HAL_RCCEx_PeriphCLKConfig+0xd8>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003cb6:	6861      	ldr	r1, [r4, #4]
 8003cb8:	4a28      	ldr	r2, [pc, #160]	@ (8003d5c <HAL_RCCEx_PeriphCLKConfig+0xf4>)
 8003cba:	6a13      	ldr	r3, [r2, #32]
 8003cbc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003cc0:	430b      	orrs	r3, r1
 8003cc2:	6213      	str	r3, [r2, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003cc4:	b11e      	cbz	r6, 8003cce <HAL_RCCEx_PeriphCLKConfig+0x66>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003cc6:	69d3      	ldr	r3, [r2, #28]
 8003cc8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003ccc:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003cce:	6823      	ldr	r3, [r4, #0]
 8003cd0:	079a      	lsls	r2, r3, #30
 8003cd2:	d506      	bpl.n	8003ce2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003cd4:	4921      	ldr	r1, [pc, #132]	@ (8003d5c <HAL_RCCEx_PeriphCLKConfig+0xf4>)
 8003cd6:	68a0      	ldr	r0, [r4, #8]
 8003cd8:	684a      	ldr	r2, [r1, #4]
 8003cda:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 8003cde:	4302      	orrs	r2, r0
 8003ce0:	604a      	str	r2, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003ce2:	06db      	lsls	r3, r3, #27
 8003ce4:	d403      	bmi.n	8003cee <HAL_RCCEx_PeriphCLKConfig+0x86>
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8003ce6:	2000      	movs	r0, #0
}
 8003ce8:	b002      	add	sp, #8
 8003cea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003cee:	4a1b      	ldr	r2, [pc, #108]	@ (8003d5c <HAL_RCCEx_PeriphCLKConfig+0xf4>)
 8003cf0:	68e1      	ldr	r1, [r4, #12]
 8003cf2:	6853      	ldr	r3, [r2, #4]
 8003cf4:	f423 0380 	bic.w	r3, r3, #4194304	@ 0x400000
 8003cf8:	430b      	orrs	r3, r1
 8003cfa:	6053      	str	r3, [r2, #4]
 8003cfc:	e7f3      	b.n	8003ce6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      __HAL_RCC_PWR_CLK_ENABLE();
 8003cfe:	69da      	ldr	r2, [r3, #28]
    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003d00:	4d17      	ldr	r5, [pc, #92]	@ (8003d60 <HAL_RCCEx_PeriphCLKConfig+0xf8>)
      __HAL_RCC_PWR_CLK_ENABLE();
 8003d02:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8003d06:	61da      	str	r2, [r3, #28]
 8003d08:	69db      	ldr	r3, [r3, #28]
      pwrclkchanged = SET;
 8003d0a:	2601      	movs	r6, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 8003d0c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003d10:	9301      	str	r3, [sp, #4]
 8003d12:	9b01      	ldr	r3, [sp, #4]
    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003d14:	682b      	ldr	r3, [r5, #0]
 8003d16:	05da      	lsls	r2, r3, #23
 8003d18:	d4b6      	bmi.n	8003c88 <HAL_RCCEx_PeriphCLKConfig+0x20>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003d1a:	682b      	ldr	r3, [r5, #0]
 8003d1c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003d20:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 8003d22:	f7fe f8d7 	bl	8001ed4 <HAL_GetTick>
 8003d26:	4607      	mov	r7, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003d28:	682b      	ldr	r3, [r5, #0]
 8003d2a:	05db      	lsls	r3, r3, #23
 8003d2c:	d4ac      	bmi.n	8003c88 <HAL_RCCEx_PeriphCLKConfig+0x20>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003d2e:	f7fe f8d1 	bl	8001ed4 <HAL_GetTick>
 8003d32:	1bc3      	subs	r3, r0, r7
 8003d34:	2b64      	cmp	r3, #100	@ 0x64
 8003d36:	d9f7      	bls.n	8003d28 <HAL_RCCEx_PeriphCLKConfig+0xc0>
          return HAL_TIMEOUT;
 8003d38:	2003      	movs	r0, #3
}
 8003d3a:	b002      	add	sp, #8
 8003d3c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        tickstart = HAL_GetTick();
 8003d40:	f7fe f8c8 	bl	8001ed4 <HAL_GetTick>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003d44:	f241 3888 	movw	r8, #5000	@ 0x1388
        tickstart = HAL_GetTick();
 8003d48:	4607      	mov	r7, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003d4a:	6a2b      	ldr	r3, [r5, #32]
 8003d4c:	0799      	lsls	r1, r3, #30
 8003d4e:	d4b2      	bmi.n	8003cb6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003d50:	f7fe f8c0 	bl	8001ed4 <HAL_GetTick>
 8003d54:	1bc0      	subs	r0, r0, r7
 8003d56:	4540      	cmp	r0, r8
 8003d58:	d9f7      	bls.n	8003d4a <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8003d5a:	e7ed      	b.n	8003d38 <HAL_RCCEx_PeriphCLKConfig+0xd0>
 8003d5c:	40021000 	.word	0x40021000
 8003d60:	40007000 	.word	0x40007000
 8003d64:	42420000 	.word	0x42420000

08003d68 <HAL_TIM_Base_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003d68:	2800      	cmp	r0, #0
 8003d6a:	d068      	beq.n	8003e3e <HAL_TIM_Base_Init+0xd6>
{
 8003d6c:	b570      	push	{r4, r5, r6, lr}
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003d6e:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 8003d72:	4604      	mov	r4, r0
 8003d74:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d04a      	beq.n	8003e12 <HAL_TIM_Base_Init+0xaa>

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003d7c:	e9d4 2100 	ldrd	r2, r1, [r4]
  htim->State = HAL_TIM_STATE_BUSY;
 8003d80:	2302      	movs	r3, #2
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003d82:	4e30      	ldr	r6, [pc, #192]	@ (8003e44 <HAL_TIM_Base_Init+0xdc>)
  htim->State = HAL_TIM_STATE_BUSY;
 8003d84:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003d88:	42b2      	cmp	r2, r6
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003d8a:	68e0      	ldr	r0, [r4, #12]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003d8c:	69a5      	ldr	r5, [r4, #24]
  tmpcr1 = TIMx->CR1;
 8003d8e:	6813      	ldr	r3, [r2, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003d90:	d044      	beq.n	8003e1c <HAL_TIM_Base_Init+0xb4>
 8003d92:	f1b2 4f80 	cmp.w	r2, #1073741824	@ 0x40000000
 8003d96:	d00e      	beq.n	8003db6 <HAL_TIM_Base_Init+0x4e>
 8003d98:	f5a6 3694 	sub.w	r6, r6, #75776	@ 0x12800
 8003d9c:	42b2      	cmp	r2, r6
 8003d9e:	d00a      	beq.n	8003db6 <HAL_TIM_Base_Init+0x4e>
 8003da0:	f506 6680 	add.w	r6, r6, #1024	@ 0x400
 8003da4:	42b2      	cmp	r2, r6
 8003da6:	d006      	beq.n	8003db6 <HAL_TIM_Base_Init+0x4e>
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003da8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003dac:	432b      	orrs	r3, r5
  TIMx->CR1 = tmpcr1;
 8003dae:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003db0:	62d0      	str	r0, [r2, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 8003db2:	6291      	str	r1, [r2, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003db4:	e00d      	b.n	8003dd2 <HAL_TIM_Base_Init+0x6a>
    tmpcr1 |= Structure->CounterMode;
 8003db6:	68a6      	ldr	r6, [r4, #8]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003db8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
    tmpcr1 |= Structure->CounterMode;
 8003dbc:	4333      	orrs	r3, r6
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003dbe:	6926      	ldr	r6, [r4, #16]
    tmpcr1 &= ~TIM_CR1_CKD;
 8003dc0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003dc4:	4333      	orrs	r3, r6
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003dc6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003dca:	431d      	orrs	r5, r3
  TIMx->CR1 = tmpcr1;
 8003dcc:	6015      	str	r5, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003dce:	62d0      	str	r0, [r2, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 8003dd0:	6291      	str	r1, [r2, #40]	@ 0x28
    TIMx->RCR = Structure->RepetitionCounter;
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003dd2:	2301      	movs	r3, #1
 8003dd4:	6153      	str	r3, [r2, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003dd6:	6913      	ldr	r3, [r2, #16]
 8003dd8:	07db      	lsls	r3, r3, #31
 8003dda:	d503      	bpl.n	8003de4 <HAL_TIM_Base_Init+0x7c>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003ddc:	6913      	ldr	r3, [r2, #16]
 8003dde:	f023 0301 	bic.w	r3, r3, #1
 8003de2:	6113      	str	r3, [r2, #16]
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003de4:	2301      	movs	r3, #1
 8003de6:	f884 3046 	strb.w	r3, [r4, #70]	@ 0x46
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003dea:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
 8003dee:	f884 303f 	strb.w	r3, [r4, #63]	@ 0x3f
 8003df2:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
 8003df6:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003dfa:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8003dfe:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003e02:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
 8003e06:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
  htim->State = HAL_TIM_STATE_READY;
 8003e0a:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  return HAL_OK;
 8003e0e:	2000      	movs	r0, #0
}
 8003e10:	bd70      	pop	{r4, r5, r6, pc}
    htim->Lock = HAL_UNLOCKED;
 8003e12:	f880 203c 	strb.w	r2, [r0, #60]	@ 0x3c
    HAL_TIM_Base_MspInit(htim);
 8003e16:	f7fd fefd 	bl	8001c14 <HAL_TIM_Base_MspInit>
 8003e1a:	e7af      	b.n	8003d7c <HAL_TIM_Base_Init+0x14>
    tmpcr1 |= Structure->CounterMode;
 8003e1c:	68a6      	ldr	r6, [r4, #8]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003e1e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
    tmpcr1 |= Structure->CounterMode;
 8003e22:	4333      	orrs	r3, r6
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003e24:	6926      	ldr	r6, [r4, #16]
    tmpcr1 &= ~TIM_CR1_CKD;
 8003e26:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003e2a:	4333      	orrs	r3, r6
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003e2c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003e30:	432b      	orrs	r3, r5
  TIMx->CR1 = tmpcr1;
 8003e32:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003e34:	62d0      	str	r0, [r2, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 8003e36:	6291      	str	r1, [r2, #40]	@ 0x28
    TIMx->RCR = Structure->RepetitionCounter;
 8003e38:	6963      	ldr	r3, [r4, #20]
 8003e3a:	6313      	str	r3, [r2, #48]	@ 0x30
 8003e3c:	e7c9      	b.n	8003dd2 <HAL_TIM_Base_Init+0x6a>
    return HAL_ERROR;
 8003e3e:	2001      	movs	r0, #1
}
 8003e40:	4770      	bx	lr
 8003e42:	bf00      	nop
 8003e44:	40012c00 	.word	0x40012c00

08003e48 <HAL_TIM_Base_Start_IT>:
  if (htim->State != HAL_TIM_STATE_READY)
 8003e48:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 8003e4c:	2b01      	cmp	r3, #1
 8003e4e:	d11f      	bne.n	8003e90 <HAL_TIM_Base_Start_IT+0x48>
  htim->State = HAL_TIM_STATE_BUSY;
 8003e50:	2202      	movs	r2, #2
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003e52:	6803      	ldr	r3, [r0, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8003e54:	f880 203d 	strb.w	r2, [r0, #61]	@ 0x3d
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003e58:	68da      	ldr	r2, [r3, #12]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003e5a:	490e      	ldr	r1, [pc, #56]	@ (8003e94 <HAL_TIM_Base_Start_IT+0x4c>)
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003e5c:	f042 0201 	orr.w	r2, r2, #1
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003e60:	428b      	cmp	r3, r1
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003e62:	60da      	str	r2, [r3, #12]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003e64:	d009      	beq.n	8003e7a <HAL_TIM_Base_Start_IT+0x32>
 8003e66:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003e6a:	d006      	beq.n	8003e7a <HAL_TIM_Base_Start_IT+0x32>
 8003e6c:	4a0a      	ldr	r2, [pc, #40]	@ (8003e98 <HAL_TIM_Base_Start_IT+0x50>)
 8003e6e:	4293      	cmp	r3, r2
 8003e70:	d003      	beq.n	8003e7a <HAL_TIM_Base_Start_IT+0x32>
 8003e72:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8003e76:	4293      	cmp	r3, r2
 8003e78:	d104      	bne.n	8003e84 <HAL_TIM_Base_Start_IT+0x3c>
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003e7a:	689a      	ldr	r2, [r3, #8]
 8003e7c:	f002 0207 	and.w	r2, r2, #7
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003e80:	2a06      	cmp	r2, #6
 8003e82:	d003      	beq.n	8003e8c <HAL_TIM_Base_Start_IT+0x44>
      __HAL_TIM_ENABLE(htim);
 8003e84:	681a      	ldr	r2, [r3, #0]
 8003e86:	f042 0201 	orr.w	r2, r2, #1
 8003e8a:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8003e8c:	2000      	movs	r0, #0
 8003e8e:	4770      	bx	lr
    return HAL_ERROR;
 8003e90:	2001      	movs	r0, #1
}
 8003e92:	4770      	bx	lr
 8003e94:	40012c00 	.word	0x40012c00
 8003e98:	40000400 	.word	0x40000400

08003e9c <HAL_TIM_Base_Stop_IT>:
  __HAL_TIM_DISABLE(htim);
 8003e9c:	f241 1c11 	movw	ip, #4369	@ 0x1111
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8003ea0:	6802      	ldr	r2, [r0, #0]
{
 8003ea2:	4603      	mov	r3, r0
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8003ea4:	68d1      	ldr	r1, [r2, #12]
 8003ea6:	f021 0101 	bic.w	r1, r1, #1
 8003eaa:	60d1      	str	r1, [r2, #12]
  __HAL_TIM_DISABLE(htim);
 8003eac:	6a11      	ldr	r1, [r2, #32]
 8003eae:	ea11 0f0c 	tst.w	r1, ip
 8003eb2:	d108      	bne.n	8003ec6 <HAL_TIM_Base_Stop_IT+0x2a>
 8003eb4:	f240 4144 	movw	r1, #1092	@ 0x444
 8003eb8:	6a10      	ldr	r0, [r2, #32]
 8003eba:	4208      	tst	r0, r1
 8003ebc:	d103      	bne.n	8003ec6 <HAL_TIM_Base_Stop_IT+0x2a>
 8003ebe:	6811      	ldr	r1, [r2, #0]
 8003ec0:	f021 0101 	bic.w	r1, r1, #1
 8003ec4:	6011      	str	r1, [r2, #0]
  htim->State = HAL_TIM_STATE_READY;
 8003ec6:	2201      	movs	r2, #1
}
 8003ec8:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8003eca:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
}
 8003ece:	4770      	bx	lr

08003ed0 <HAL_TIM_PWM_Init>:
  if (htim == NULL)
 8003ed0:	2800      	cmp	r0, #0
 8003ed2:	d068      	beq.n	8003fa6 <HAL_TIM_PWM_Init+0xd6>
{
 8003ed4:	b570      	push	{r4, r5, r6, lr}
  if (htim->State == HAL_TIM_STATE_RESET)
 8003ed6:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 8003eda:	4604      	mov	r4, r0
 8003edc:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d04a      	beq.n	8003f7a <HAL_TIM_PWM_Init+0xaa>
  TIMx->PSC = Structure->Prescaler;
 8003ee4:	e9d4 2100 	ldrd	r2, r1, [r4]
  htim->State = HAL_TIM_STATE_BUSY;
 8003ee8:	2302      	movs	r3, #2
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003eea:	4e30      	ldr	r6, [pc, #192]	@ (8003fac <HAL_TIM_PWM_Init+0xdc>)
  htim->State = HAL_TIM_STATE_BUSY;
 8003eec:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003ef0:	42b2      	cmp	r2, r6
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003ef2:	68e0      	ldr	r0, [r4, #12]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003ef4:	69a5      	ldr	r5, [r4, #24]
  tmpcr1 = TIMx->CR1;
 8003ef6:	6813      	ldr	r3, [r2, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003ef8:	d044      	beq.n	8003f84 <HAL_TIM_PWM_Init+0xb4>
 8003efa:	f1b2 4f80 	cmp.w	r2, #1073741824	@ 0x40000000
 8003efe:	d00e      	beq.n	8003f1e <HAL_TIM_PWM_Init+0x4e>
 8003f00:	f5a6 3694 	sub.w	r6, r6, #75776	@ 0x12800
 8003f04:	42b2      	cmp	r2, r6
 8003f06:	d00a      	beq.n	8003f1e <HAL_TIM_PWM_Init+0x4e>
 8003f08:	f506 6680 	add.w	r6, r6, #1024	@ 0x400
 8003f0c:	42b2      	cmp	r2, r6
 8003f0e:	d006      	beq.n	8003f1e <HAL_TIM_PWM_Init+0x4e>
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003f10:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003f14:	432b      	orrs	r3, r5
  TIMx->CR1 = tmpcr1;
 8003f16:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003f18:	62d0      	str	r0, [r2, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 8003f1a:	6291      	str	r1, [r2, #40]	@ 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003f1c:	e00d      	b.n	8003f3a <HAL_TIM_PWM_Init+0x6a>
    tmpcr1 |= Structure->CounterMode;
 8003f1e:	68a6      	ldr	r6, [r4, #8]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003f20:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
    tmpcr1 |= Structure->CounterMode;
 8003f24:	4333      	orrs	r3, r6
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003f26:	6926      	ldr	r6, [r4, #16]
    tmpcr1 &= ~TIM_CR1_CKD;
 8003f28:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003f2c:	4333      	orrs	r3, r6
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003f2e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003f32:	431d      	orrs	r5, r3
  TIMx->CR1 = tmpcr1;
 8003f34:	6015      	str	r5, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003f36:	62d0      	str	r0, [r2, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 8003f38:	6291      	str	r1, [r2, #40]	@ 0x28
  TIMx->EGR = TIM_EGR_UG;
 8003f3a:	2301      	movs	r3, #1
 8003f3c:	6153      	str	r3, [r2, #20]
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003f3e:	6913      	ldr	r3, [r2, #16]
 8003f40:	07db      	lsls	r3, r3, #31
 8003f42:	d503      	bpl.n	8003f4c <HAL_TIM_PWM_Init+0x7c>
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003f44:	6913      	ldr	r3, [r2, #16]
 8003f46:	f023 0301 	bic.w	r3, r3, #1
 8003f4a:	6113      	str	r3, [r2, #16]
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003f4c:	2301      	movs	r3, #1
 8003f4e:	f884 3046 	strb.w	r3, [r4, #70]	@ 0x46
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003f52:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
 8003f56:	f884 303f 	strb.w	r3, [r4, #63]	@ 0x3f
 8003f5a:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
 8003f5e:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003f62:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8003f66:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003f6a:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
 8003f6e:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
  htim->State = HAL_TIM_STATE_READY;
 8003f72:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  return HAL_OK;
 8003f76:	2000      	movs	r0, #0
}
 8003f78:	bd70      	pop	{r4, r5, r6, pc}
    htim->Lock = HAL_UNLOCKED;
 8003f7a:	f880 203c 	strb.w	r2, [r0, #60]	@ 0x3c
    HAL_TIM_PWM_MspInit(htim);
 8003f7e:	f7fd fe21 	bl	8001bc4 <HAL_TIM_PWM_MspInit>
 8003f82:	e7af      	b.n	8003ee4 <HAL_TIM_PWM_Init+0x14>
    tmpcr1 |= Structure->CounterMode;
 8003f84:	68a6      	ldr	r6, [r4, #8]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003f86:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
    tmpcr1 |= Structure->CounterMode;
 8003f8a:	4333      	orrs	r3, r6
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003f8c:	6926      	ldr	r6, [r4, #16]
    tmpcr1 &= ~TIM_CR1_CKD;
 8003f8e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003f92:	4333      	orrs	r3, r6
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003f94:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003f98:	432b      	orrs	r3, r5
  TIMx->CR1 = tmpcr1;
 8003f9a:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003f9c:	62d0      	str	r0, [r2, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 8003f9e:	6291      	str	r1, [r2, #40]	@ 0x28
    TIMx->RCR = Structure->RepetitionCounter;
 8003fa0:	6963      	ldr	r3, [r4, #20]
 8003fa2:	6313      	str	r3, [r2, #48]	@ 0x30
 8003fa4:	e7c9      	b.n	8003f3a <HAL_TIM_PWM_Init+0x6a>
    return HAL_ERROR;
 8003fa6:	2001      	movs	r0, #1
}
 8003fa8:	4770      	bx	lr
 8003faa:	bf00      	nop
 8003fac:	40012c00 	.word	0x40012c00

08003fb0 <HAL_TIM_PWM_Start>:
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
 8003fb0:	bb39      	cbnz	r1, 8004002 <HAL_TIM_PWM_Start+0x52>
 8003fb2:	f890 303e 	ldrb.w	r3, [r0, #62]	@ 0x3e
 8003fb6:	2b01      	cmp	r3, #1
 8003fb8:	d12f      	bne.n	800401a <HAL_TIM_PWM_Start+0x6a>
 8003fba:	2302      	movs	r3, #2
 8003fbc:	f880 303e 	strb.w	r3, [r0, #62]	@ 0x3e
 8003fc0:	2201      	movs	r2, #1
 8003fc2:	6803      	ldr	r3, [r0, #0]
 8003fc4:	f001 011f 	and.w	r1, r1, #31
 8003fc8:	6a18      	ldr	r0, [r3, #32]
 8003fca:	408a      	lsls	r2, r1
 8003fcc:	ea20 0002 	bic.w	r0, r0, r2
 8003fd0:	b410      	push	{r4}
 8003fd2:	6218      	str	r0, [r3, #32]
 8003fd4:	6a19      	ldr	r1, [r3, #32]
 8003fd6:	4c20      	ldr	r4, [pc, #128]	@ (8004058 <HAL_TIM_PWM_Start+0xa8>)
 8003fd8:	430a      	orrs	r2, r1
 8003fda:	42a3      	cmp	r3, r4
 8003fdc:	621a      	str	r2, [r3, #32]
 8003fde:	d01e      	beq.n	800401e <HAL_TIM_PWM_Start+0x6e>
 8003fe0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003fe4:	d01f      	beq.n	8004026 <HAL_TIM_PWM_Start+0x76>
 8003fe6:	4a1d      	ldr	r2, [pc, #116]	@ (800405c <HAL_TIM_PWM_Start+0xac>)
 8003fe8:	4293      	cmp	r3, r2
 8003fea:	d01c      	beq.n	8004026 <HAL_TIM_PWM_Start+0x76>
 8003fec:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8003ff0:	4293      	cmp	r3, r2
 8003ff2:	d018      	beq.n	8004026 <HAL_TIM_PWM_Start+0x76>
 8003ff4:	681a      	ldr	r2, [r3, #0]
 8003ff6:	2000      	movs	r0, #0
 8003ff8:	f042 0201 	orr.w	r2, r2, #1
 8003ffc:	bc10      	pop	{r4}
 8003ffe:	601a      	str	r2, [r3, #0]
 8004000:	4770      	bx	lr
 8004002:	2904      	cmp	r1, #4
 8004004:	d017      	beq.n	8004036 <HAL_TIM_PWM_Start+0x86>
 8004006:	2908      	cmp	r1, #8
 8004008:	d01d      	beq.n	8004046 <HAL_TIM_PWM_Start+0x96>
 800400a:	f890 3041 	ldrb.w	r3, [r0, #65]	@ 0x41
 800400e:	2b01      	cmp	r3, #1
 8004010:	d103      	bne.n	800401a <HAL_TIM_PWM_Start+0x6a>
 8004012:	2302      	movs	r3, #2
 8004014:	f880 3041 	strb.w	r3, [r0, #65]	@ 0x41
 8004018:	e7d2      	b.n	8003fc0 <HAL_TIM_PWM_Start+0x10>
 800401a:	2001      	movs	r0, #1
 800401c:	4770      	bx	lr
 800401e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004020:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004024:	645a      	str	r2, [r3, #68]	@ 0x44
 8004026:	689a      	ldr	r2, [r3, #8]
 8004028:	f002 0207 	and.w	r2, r2, #7
 800402c:	2a06      	cmp	r2, #6
 800402e:	d1e1      	bne.n	8003ff4 <HAL_TIM_PWM_Start+0x44>
 8004030:	2000      	movs	r0, #0
 8004032:	bc10      	pop	{r4}
 8004034:	4770      	bx	lr
 8004036:	f890 303f 	ldrb.w	r3, [r0, #63]	@ 0x3f
 800403a:	2b01      	cmp	r3, #1
 800403c:	d1ed      	bne.n	800401a <HAL_TIM_PWM_Start+0x6a>
 800403e:	2302      	movs	r3, #2
 8004040:	f880 303f 	strb.w	r3, [r0, #63]	@ 0x3f
 8004044:	e7bc      	b.n	8003fc0 <HAL_TIM_PWM_Start+0x10>
 8004046:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 800404a:	2b01      	cmp	r3, #1
 800404c:	d1e5      	bne.n	800401a <HAL_TIM_PWM_Start+0x6a>
 800404e:	2302      	movs	r3, #2
 8004050:	f880 3040 	strb.w	r3, [r0, #64]	@ 0x40
 8004054:	e7b4      	b.n	8003fc0 <HAL_TIM_PWM_Start+0x10>
 8004056:	bf00      	nop
 8004058:	40012c00 	.word	0x40012c00
 800405c:	40000400 	.word	0x40000400

08004060 <HAL_TIM_OnePulse_MspInit>:
__weak void HAL_TIM_OnePulse_MspInit(TIM_HandleTypeDef *htim)
 8004060:	4770      	bx	lr
 8004062:	bf00      	nop

08004064 <HAL_TIM_OnePulse_Init>:
  if (htim == NULL)
 8004064:	2800      	cmp	r0, #0
 8004066:	d068      	beq.n	800413a <HAL_TIM_OnePulse_Init+0xd6>
{
 8004068:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (htim->State == HAL_TIM_STATE_RESET)
 800406a:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 800406e:	4604      	mov	r4, r0
 8004070:	460d      	mov	r5, r1
 8004072:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 8004076:	2b00      	cmp	r3, #0
 8004078:	d049      	beq.n	800410e <HAL_TIM_OnePulse_Init+0xaa>
  htim->State = HAL_TIM_STATE_BUSY;
 800407a:	2202      	movs	r2, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800407c:	6823      	ldr	r3, [r4, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800407e:	4f30      	ldr	r7, [pc, #192]	@ (8004140 <HAL_TIM_OnePulse_Init+0xdc>)
  htim->State = HAL_TIM_STATE_BUSY;
 8004080:	f884 203d 	strb.w	r2, [r4, #61]	@ 0x3d
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004084:	42bb      	cmp	r3, r7
  TIMx->PSC = Structure->Prescaler;
 8004086:	6861      	ldr	r1, [r4, #4]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004088:	68e0      	ldr	r0, [r4, #12]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800408a:	69a6      	ldr	r6, [r4, #24]
  tmpcr1 = TIMx->CR1;
 800408c:	681a      	ldr	r2, [r3, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800408e:	d043      	beq.n	8004118 <HAL_TIM_OnePulse_Init+0xb4>
 8004090:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004094:	d00e      	beq.n	80040b4 <HAL_TIM_OnePulse_Init+0x50>
 8004096:	f5a7 3794 	sub.w	r7, r7, #75776	@ 0x12800
 800409a:	42bb      	cmp	r3, r7
 800409c:	d00a      	beq.n	80040b4 <HAL_TIM_OnePulse_Init+0x50>
 800409e:	f507 6780 	add.w	r7, r7, #1024	@ 0x400
 80040a2:	42bb      	cmp	r3, r7
 80040a4:	d006      	beq.n	80040b4 <HAL_TIM_OnePulse_Init+0x50>
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80040a6:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80040aa:	4332      	orrs	r2, r6
  TIMx->CR1 = tmpcr1;
 80040ac:	601a      	str	r2, [r3, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80040ae:	62d8      	str	r0, [r3, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 80040b0:	6299      	str	r1, [r3, #40]	@ 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80040b2:	e00d      	b.n	80040d0 <HAL_TIM_OnePulse_Init+0x6c>
    tmpcr1 |= Structure->CounterMode;
 80040b4:	68a7      	ldr	r7, [r4, #8]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80040b6:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
    tmpcr1 |= Structure->CounterMode;
 80040ba:	433a      	orrs	r2, r7
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80040bc:	6927      	ldr	r7, [r4, #16]
    tmpcr1 &= ~TIM_CR1_CKD;
 80040be:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80040c2:	433a      	orrs	r2, r7
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80040c4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80040c8:	4316      	orrs	r6, r2
  TIMx->CR1 = tmpcr1;
 80040ca:	601e      	str	r6, [r3, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80040cc:	62d8      	str	r0, [r3, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 80040ce:	6299      	str	r1, [r3, #40]	@ 0x28
  TIMx->EGR = TIM_EGR_UG;
 80040d0:	2201      	movs	r2, #1
 80040d2:	615a      	str	r2, [r3, #20]
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80040d4:	691a      	ldr	r2, [r3, #16]
 80040d6:	07d2      	lsls	r2, r2, #31
 80040d8:	d503      	bpl.n	80040e2 <HAL_TIM_OnePulse_Init+0x7e>
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80040da:	691a      	ldr	r2, [r3, #16]
 80040dc:	f022 0201 	bic.w	r2, r2, #1
 80040e0:	611a      	str	r2, [r3, #16]
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80040e2:	2201      	movs	r2, #1
  htim->Instance->CR1 &= ~TIM_CR1_OPM;
 80040e4:	6819      	ldr	r1, [r3, #0]
  return HAL_OK;
 80040e6:	2000      	movs	r0, #0
  htim->Instance->CR1 &= ~TIM_CR1_OPM;
 80040e8:	f021 0108 	bic.w	r1, r1, #8
 80040ec:	6019      	str	r1, [r3, #0]
  htim->Instance->CR1 |= OnePulseMode;
 80040ee:	6819      	ldr	r1, [r3, #0]
 80040f0:	4329      	orrs	r1, r5
 80040f2:	6019      	str	r1, [r3, #0]
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80040f4:	f884 2046 	strb.w	r2, [r4, #70]	@ 0x46
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80040f8:	f884 203e 	strb.w	r2, [r4, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80040fc:	f884 203f 	strb.w	r2, [r4, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004100:	f884 2042 	strb.w	r2, [r4, #66]	@ 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004104:	f884 2043 	strb.w	r2, [r4, #67]	@ 0x43
  htim->State = HAL_TIM_STATE_READY;
 8004108:	f884 203d 	strb.w	r2, [r4, #61]	@ 0x3d
}
 800410c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    htim->Lock = HAL_UNLOCKED;
 800410e:	f880 203c 	strb.w	r2, [r0, #60]	@ 0x3c
    HAL_TIM_OnePulse_MspInit(htim);
 8004112:	f7ff ffa5 	bl	8004060 <HAL_TIM_OnePulse_MspInit>
 8004116:	e7b0      	b.n	800407a <HAL_TIM_OnePulse_Init+0x16>
    tmpcr1 |= Structure->CounterMode;
 8004118:	68a7      	ldr	r7, [r4, #8]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800411a:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
    tmpcr1 |= Structure->CounterMode;
 800411e:	433a      	orrs	r2, r7
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004120:	6927      	ldr	r7, [r4, #16]
    tmpcr1 &= ~TIM_CR1_CKD;
 8004122:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004126:	433a      	orrs	r2, r7
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004128:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800412c:	4332      	orrs	r2, r6
  TIMx->CR1 = tmpcr1;
 800412e:	601a      	str	r2, [r3, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004130:	62d8      	str	r0, [r3, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 8004132:	6299      	str	r1, [r3, #40]	@ 0x28
    TIMx->RCR = Structure->RepetitionCounter;
 8004134:	6962      	ldr	r2, [r4, #20]
 8004136:	631a      	str	r2, [r3, #48]	@ 0x30
 8004138:	e7ca      	b.n	80040d0 <HAL_TIM_OnePulse_Init+0x6c>
    return HAL_ERROR;
 800413a:	2001      	movs	r0, #1
}
 800413c:	4770      	bx	lr
 800413e:	bf00      	nop
 8004140:	40012c00 	.word	0x40012c00

08004144 <HAL_TIM_PWM_ConfigChannel>:
{
 8004144:	4603      	mov	r3, r0
  __HAL_LOCK(htim);
 8004146:	f890 003c 	ldrb.w	r0, [r0, #60]	@ 0x3c
 800414a:	2801      	cmp	r0, #1
 800414c:	f000 80b6 	beq.w	80042bc <HAL_TIM_PWM_ConfigChannel+0x178>
 8004150:	2001      	movs	r0, #1
{
 8004152:	b4f0      	push	{r4, r5, r6, r7}
  __HAL_LOCK(htim);
 8004154:	f883 003c 	strb.w	r0, [r3, #60]	@ 0x3c
  switch (Channel)
 8004158:	2a0c      	cmp	r2, #12
 800415a:	d808      	bhi.n	800416e <HAL_TIM_PWM_ConfigChannel+0x2a>
 800415c:	e8df f002 	tbb	[pc, r2]
 8004160:	0707073b 	.word	0x0707073b
 8004164:	07070760 	.word	0x07070760
 8004168:	07070788 	.word	0x07070788
 800416c:	0d          	.byte	0x0d
 800416d:	00          	.byte	0x00
  __HAL_UNLOCK(htim);
 800416e:	2200      	movs	r2, #0
 8004170:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  switch (Channel)
 8004174:	2001      	movs	r0, #1
}
 8004176:	bcf0      	pop	{r4, r5, r6, r7}
 8004178:	4770      	bx	lr
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800417a:	681a      	ldr	r2, [r3, #0]
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800417c:	680e      	ldr	r6, [r1, #0]
  tmpccer = TIMx->CCER;
 800417e:	6a10      	ldr	r0, [r2, #32]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004180:	6a14      	ldr	r4, [r2, #32]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004182:	f420 5000 	bic.w	r0, r0, #8192	@ 0x2000
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004186:	f424 5480 	bic.w	r4, r4, #4096	@ 0x1000
 800418a:	6214      	str	r4, [r2, #32]
  tmpcr2 =  TIMx->CR2;
 800418c:	6855      	ldr	r5, [r2, #4]
  tmpccmrx = TIMx->CCMR2;
 800418e:	69d4      	ldr	r4, [r2, #28]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004190:	f424 44e6 	bic.w	r4, r4, #29440	@ 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004194:	ea44 2406 	orr.w	r4, r4, r6, lsl #8
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004198:	688e      	ldr	r6, [r1, #8]
 800419a:	ea40 3006 	orr.w	r0, r0, r6, lsl #12

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800419e:	4e61      	ldr	r6, [pc, #388]	@ (8004324 <HAL_TIM_PWM_ConfigChannel+0x1e0>)
 80041a0:	42b2      	cmp	r2, r6
 80041a2:	f000 80a9 	beq.w	80042f8 <HAL_TIM_PWM_ConfigChannel+0x1b4>
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80041a6:	6055      	str	r5, [r2, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80041a8:	684d      	ldr	r5, [r1, #4]
  TIMx->CCMR2 = tmpccmrx;
 80041aa:	61d4      	str	r4, [r2, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80041ac:	690c      	ldr	r4, [r1, #16]
  TIMx->CCR4 = OC_Config->Pulse;
 80041ae:	6415      	str	r5, [r2, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80041b0:	6210      	str	r0, [r2, #32]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80041b2:	69d1      	ldr	r1, [r2, #28]
 80041b4:	f441 6100 	orr.w	r1, r1, #2048	@ 0x800
 80041b8:	61d1      	str	r1, [r2, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80041ba:	69d1      	ldr	r1, [r2, #28]
 80041bc:	f421 6180 	bic.w	r1, r1, #1024	@ 0x400
 80041c0:	61d1      	str	r1, [r2, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80041c2:	69d1      	ldr	r1, [r2, #28]
 80041c4:	ea41 2104 	orr.w	r1, r1, r4, lsl #8
 80041c8:	61d1      	str	r1, [r2, #28]
  __HAL_UNLOCK(htim);
 80041ca:	2200      	movs	r2, #0
 80041cc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  HAL_StatusTypeDef status = HAL_OK;
 80041d0:	2000      	movs	r0, #0
}
 80041d2:	bcf0      	pop	{r4, r5, r6, r7}
 80041d4:	4770      	bx	lr
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80041d6:	681a      	ldr	r2, [r3, #0]
  tmpccmrx |= OC_Config->OCMode;
 80041d8:	680e      	ldr	r6, [r1, #0]
  tmpccer = TIMx->CCER;
 80041da:	6a10      	ldr	r0, [r2, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80041dc:	6a14      	ldr	r4, [r2, #32]
  tmpccer &= ~TIM_CCER_CC1P;
 80041de:	f020 0002 	bic.w	r0, r0, #2
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80041e2:	f024 0401 	bic.w	r4, r4, #1
 80041e6:	6214      	str	r4, [r2, #32]
  tmpcr2 =  TIMx->CR2;
 80041e8:	6855      	ldr	r5, [r2, #4]
  tmpccmrx = TIMx->CCMR1;
 80041ea:	6994      	ldr	r4, [r2, #24]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80041ec:	f024 0473 	bic.w	r4, r4, #115	@ 0x73
  tmpccmrx |= OC_Config->OCMode;
 80041f0:	4334      	orrs	r4, r6
  tmpccer |= OC_Config->OCPolarity;
 80041f2:	688e      	ldr	r6, [r1, #8]
 80041f4:	4330      	orrs	r0, r6
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80041f6:	4e4b      	ldr	r6, [pc, #300]	@ (8004324 <HAL_TIM_PWM_ConfigChannel+0x1e0>)
 80041f8:	42b2      	cmp	r2, r6
 80041fa:	d061      	beq.n	80042c0 <HAL_TIM_PWM_ConfigChannel+0x17c>
  TIMx->CR2 = tmpcr2;
 80041fc:	6055      	str	r5, [r2, #4]
  TIMx->CCR1 = OC_Config->Pulse;
 80041fe:	684d      	ldr	r5, [r1, #4]
  TIMx->CCMR1 = tmpccmrx;
 8004200:	6194      	str	r4, [r2, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004202:	690c      	ldr	r4, [r1, #16]
  TIMx->CCR1 = OC_Config->Pulse;
 8004204:	6355      	str	r5, [r2, #52]	@ 0x34
  TIMx->CCER = tmpccer;
 8004206:	6210      	str	r0, [r2, #32]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004208:	6991      	ldr	r1, [r2, #24]
 800420a:	f041 0108 	orr.w	r1, r1, #8
 800420e:	6191      	str	r1, [r2, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004210:	6991      	ldr	r1, [r2, #24]
 8004212:	f021 0104 	bic.w	r1, r1, #4
 8004216:	6191      	str	r1, [r2, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004218:	6991      	ldr	r1, [r2, #24]
 800421a:	4321      	orrs	r1, r4
 800421c:	6191      	str	r1, [r2, #24]
      break;
 800421e:	e7d4      	b.n	80041ca <HAL_TIM_PWM_ConfigChannel+0x86>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004220:	681a      	ldr	r2, [r3, #0]
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004222:	680e      	ldr	r6, [r1, #0]
  tmpccer = TIMx->CCER;
 8004224:	6a10      	ldr	r0, [r2, #32]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004226:	6a14      	ldr	r4, [r2, #32]
  tmpccer &= ~TIM_CCER_CC2P;
 8004228:	f020 0020 	bic.w	r0, r0, #32
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800422c:	f024 0410 	bic.w	r4, r4, #16
 8004230:	6214      	str	r4, [r2, #32]
  tmpcr2 =  TIMx->CR2;
 8004232:	6855      	ldr	r5, [r2, #4]
  tmpccmrx = TIMx->CCMR1;
 8004234:	6994      	ldr	r4, [r2, #24]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004236:	f424 44e6 	bic.w	r4, r4, #29440	@ 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800423a:	ea44 2406 	orr.w	r4, r4, r6, lsl #8
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800423e:	688e      	ldr	r6, [r1, #8]
 8004240:	ea40 1006 	orr.w	r0, r0, r6, lsl #4
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004244:	4e37      	ldr	r6, [pc, #220]	@ (8004324 <HAL_TIM_PWM_ConfigChannel+0x1e0>)
 8004246:	42b2      	cmp	r2, r6
 8004248:	d047      	beq.n	80042da <HAL_TIM_PWM_ConfigChannel+0x196>
  TIMx->CR2 = tmpcr2;
 800424a:	6055      	str	r5, [r2, #4]
  TIMx->CCR2 = OC_Config->Pulse;
 800424c:	684d      	ldr	r5, [r1, #4]
  TIMx->CCMR1 = tmpccmrx;
 800424e:	6194      	str	r4, [r2, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004250:	690c      	ldr	r4, [r1, #16]
  TIMx->CCR2 = OC_Config->Pulse;
 8004252:	6395      	str	r5, [r2, #56]	@ 0x38
  TIMx->CCER = tmpccer;
 8004254:	6210      	str	r0, [r2, #32]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004256:	6991      	ldr	r1, [r2, #24]
 8004258:	f441 6100 	orr.w	r1, r1, #2048	@ 0x800
 800425c:	6191      	str	r1, [r2, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800425e:	6991      	ldr	r1, [r2, #24]
 8004260:	f421 6180 	bic.w	r1, r1, #1024	@ 0x400
 8004264:	6191      	str	r1, [r2, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004266:	6991      	ldr	r1, [r2, #24]
 8004268:	ea41 2104 	orr.w	r1, r1, r4, lsl #8
 800426c:	6191      	str	r1, [r2, #24]
      break;
 800426e:	e7ac      	b.n	80041ca <HAL_TIM_PWM_ConfigChannel+0x86>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004270:	681a      	ldr	r2, [r3, #0]
  tmpccmrx |= OC_Config->OCMode;
 8004272:	680e      	ldr	r6, [r1, #0]
  tmpccer = TIMx->CCER;
 8004274:	6a10      	ldr	r0, [r2, #32]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004276:	6a14      	ldr	r4, [r2, #32]
  tmpccer &= ~TIM_CCER_CC3P;
 8004278:	f420 7000 	bic.w	r0, r0, #512	@ 0x200
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800427c:	f424 7480 	bic.w	r4, r4, #256	@ 0x100
 8004280:	6214      	str	r4, [r2, #32]
  tmpcr2 =  TIMx->CR2;
 8004282:	6855      	ldr	r5, [r2, #4]
  tmpccmrx = TIMx->CCMR2;
 8004284:	69d4      	ldr	r4, [r2, #28]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004286:	f024 0473 	bic.w	r4, r4, #115	@ 0x73
  tmpccmrx |= OC_Config->OCMode;
 800428a:	4334      	orrs	r4, r6
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800428c:	688e      	ldr	r6, [r1, #8]
 800428e:	ea40 2006 	orr.w	r0, r0, r6, lsl #8
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004292:	4e24      	ldr	r6, [pc, #144]	@ (8004324 <HAL_TIM_PWM_ConfigChannel+0x1e0>)
 8004294:	42b2      	cmp	r2, r6
 8004296:	d035      	beq.n	8004304 <HAL_TIM_PWM_ConfigChannel+0x1c0>
  TIMx->CR2 = tmpcr2;
 8004298:	6055      	str	r5, [r2, #4]
  TIMx->CCR3 = OC_Config->Pulse;
 800429a:	684d      	ldr	r5, [r1, #4]
  TIMx->CCMR2 = tmpccmrx;
 800429c:	61d4      	str	r4, [r2, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800429e:	690c      	ldr	r4, [r1, #16]
  TIMx->CCR3 = OC_Config->Pulse;
 80042a0:	63d5      	str	r5, [r2, #60]	@ 0x3c
  TIMx->CCER = tmpccer;
 80042a2:	6210      	str	r0, [r2, #32]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80042a4:	69d1      	ldr	r1, [r2, #28]
 80042a6:	f041 0108 	orr.w	r1, r1, #8
 80042aa:	61d1      	str	r1, [r2, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80042ac:	69d1      	ldr	r1, [r2, #28]
 80042ae:	f021 0104 	bic.w	r1, r1, #4
 80042b2:	61d1      	str	r1, [r2, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80042b4:	69d1      	ldr	r1, [r2, #28]
 80042b6:	4321      	orrs	r1, r4
 80042b8:	61d1      	str	r1, [r2, #28]
      break;
 80042ba:	e786      	b.n	80041ca <HAL_TIM_PWM_ConfigChannel+0x86>
  __HAL_LOCK(htim);
 80042bc:	2002      	movs	r0, #2
}
 80042be:	4770      	bx	lr
    tmpccer |= OC_Config->OCNPolarity;
 80042c0:	68ce      	ldr	r6, [r1, #12]
    tmpccer &= ~TIM_CCER_CC1NP;
 80042c2:	f020 0008 	bic.w	r0, r0, #8
    tmpccer |= OC_Config->OCNPolarity;
 80042c6:	4330      	orrs	r0, r6
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80042c8:	f425 7540 	bic.w	r5, r5, #768	@ 0x300
    tmpcr2 |= OC_Config->OCNIdleState;
 80042cc:	e9d1 6705 	ldrd	r6, r7, [r1, #20]
 80042d0:	433e      	orrs	r6, r7
    tmpccer &= ~TIM_CCER_CC1NE;
 80042d2:	f020 0004 	bic.w	r0, r0, #4
    tmpcr2 |= OC_Config->OCNIdleState;
 80042d6:	4335      	orrs	r5, r6
 80042d8:	e790      	b.n	80041fc <HAL_TIM_PWM_ConfigChannel+0xb8>
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80042da:	68ce      	ldr	r6, [r1, #12]
    tmpccer &= ~TIM_CCER_CC2NP;
 80042dc:	f020 0080 	bic.w	r0, r0, #128	@ 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80042e0:	ea40 1006 	orr.w	r0, r0, r6, lsl #4
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80042e4:	f425 6540 	bic.w	r5, r5, #3072	@ 0xc00
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80042e8:	e9d1 6705 	ldrd	r6, r7, [r1, #20]
 80042ec:	433e      	orrs	r6, r7
    tmpccer &= ~TIM_CCER_CC2NE;
 80042ee:	f020 0040 	bic.w	r0, r0, #64	@ 0x40
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80042f2:	ea45 0586 	orr.w	r5, r5, r6, lsl #2
 80042f6:	e7a8      	b.n	800424a <HAL_TIM_PWM_ConfigChannel+0x106>
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80042f8:	694e      	ldr	r6, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS4;
 80042fa:	f425 4580 	bic.w	r5, r5, #16384	@ 0x4000
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80042fe:	ea45 1586 	orr.w	r5, r5, r6, lsl #6
 8004302:	e750      	b.n	80041a6 <HAL_TIM_PWM_ConfigChannel+0x62>
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004304:	68ce      	ldr	r6, [r1, #12]
    tmpccer &= ~TIM_CCER_CC3NP;
 8004306:	f420 6000 	bic.w	r0, r0, #2048	@ 0x800
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800430a:	ea40 2006 	orr.w	r0, r0, r6, lsl #8
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800430e:	f425 5540 	bic.w	r5, r5, #12288	@ 0x3000
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004312:	e9d1 6705 	ldrd	r6, r7, [r1, #20]
 8004316:	433e      	orrs	r6, r7
    tmpccer &= ~TIM_CCER_CC3NE;
 8004318:	f420 6080 	bic.w	r0, r0, #1024	@ 0x400
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800431c:	ea45 1506 	orr.w	r5, r5, r6, lsl #4
 8004320:	e7ba      	b.n	8004298 <HAL_TIM_PWM_ConfigChannel+0x154>
 8004322:	bf00      	nop
 8004324:	40012c00 	.word	0x40012c00

08004328 <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 8004328:	f890 303c 	ldrb.w	r3, [r0, #60]	@ 0x3c
 800432c:	2b01      	cmp	r3, #1
 800432e:	d071      	beq.n	8004414 <HAL_TIM_ConfigClockSource+0xec>
 8004330:	4602      	mov	r2, r0
  htim->State = HAL_TIM_STATE_BUSY;
 8004332:	2302      	movs	r3, #2
  __HAL_LOCK(htim);
 8004334:	2001      	movs	r0, #1
{
 8004336:	b430      	push	{r4, r5}
  tmpsmcr = htim->Instance->SMCR;
 8004338:	6814      	ldr	r4, [r2, #0]
  __HAL_LOCK(htim);
 800433a:	f882 003c 	strb.w	r0, [r2, #60]	@ 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 800433e:	f882 303d 	strb.w	r3, [r2, #61]	@ 0x3d
  tmpsmcr = htim->Instance->SMCR;
 8004342:	68a3      	ldr	r3, [r4, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004344:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004348:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
  htim->Instance->SMCR = tmpsmcr;
 800434c:	60a3      	str	r3, [r4, #8]
  switch (sClockSourceConfig->ClockSource)
 800434e:	680b      	ldr	r3, [r1, #0]
 8004350:	2b60      	cmp	r3, #96	@ 0x60
 8004352:	d061      	beq.n	8004418 <HAL_TIM_ConfigClockSource+0xf0>
 8004354:	d824      	bhi.n	80043a0 <HAL_TIM_ConfigClockSource+0x78>
 8004356:	2b40      	cmp	r3, #64	@ 0x40
 8004358:	d077      	beq.n	800444a <HAL_TIM_ConfigClockSource+0x122>
 800435a:	d94a      	bls.n	80043f2 <HAL_TIM_ConfigClockSource+0xca>
 800435c:	2b50      	cmp	r3, #80	@ 0x50
 800435e:	d117      	bne.n	8004390 <HAL_TIM_ConfigClockSource+0x68>
                               sClockSourceConfig->ClockPolarity,
 8004360:	684b      	ldr	r3, [r1, #4]
                               sClockSourceConfig->ClockFilter);
 8004362:	68c8      	ldr	r0, [r1, #12]
{
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004364:	6a21      	ldr	r1, [r4, #32]
  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
  tmpccmr1 |= (TIM_ICFilter << 4U);

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004366:	f021 010a 	bic.w	r1, r1, #10
  tmpccer |= TIM_ICPolarity;
 800436a:	4319      	orrs	r1, r3
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800436c:	6a23      	ldr	r3, [r4, #32]
 800436e:	f023 0301 	bic.w	r3, r3, #1
 8004372:	6223      	str	r3, [r4, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004374:	69a3      	ldr	r3, [r4, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004376:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800437a:	ea43 1300 	orr.w	r3, r3, r0, lsl #4

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800437e:	61a3      	str	r3, [r4, #24]
  TIMx->CCER = tmpccer;
 8004380:	6221      	str	r1, [r4, #32]
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004382:	68a3      	ldr	r3, [r4, #8]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004384:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004388:	f043 0357 	orr.w	r3, r3, #87	@ 0x57
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800438c:	60a3      	str	r3, [r4, #8]
  HAL_StatusTypeDef status = HAL_OK;
 800438e:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8004390:	2101      	movs	r1, #1
  __HAL_UNLOCK(htim);
 8004392:	2300      	movs	r3, #0
  htim->State = HAL_TIM_STATE_READY;
 8004394:	f882 103d 	strb.w	r1, [r2, #61]	@ 0x3d
  __HAL_UNLOCK(htim);
 8004398:	f882 303c 	strb.w	r3, [r2, #60]	@ 0x3c
}
 800439c:	bc30      	pop	{r4, r5}
 800439e:	4770      	bx	lr
  switch (sClockSourceConfig->ClockSource)
 80043a0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80043a4:	d0f3      	beq.n	800438e <HAL_TIM_ConfigClockSource+0x66>
 80043a6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80043aa:	d110      	bne.n	80043ce <HAL_TIM_ConfigClockSource+0xa6>

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80043ac:	e9d1 5301 	ldrd	r5, r3, [r1, #4]
  tmpsmcr = TIMx->SMCR;
 80043b0:	68a0      	ldr	r0, [r4, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80043b2:	432b      	orrs	r3, r5
 80043b4:	68cd      	ldr	r5, [r1, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80043b6:	f420 417f 	bic.w	r1, r0, #65280	@ 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80043ba:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
 80043be:	430b      	orrs	r3, r1

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80043c0:	60a3      	str	r3, [r4, #8]
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80043c2:	68a3      	ldr	r3, [r4, #8]
  HAL_StatusTypeDef status = HAL_OK;
 80043c4:	2000      	movs	r0, #0
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80043c6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80043ca:	60a3      	str	r3, [r4, #8]
      break;
 80043cc:	e7e0      	b.n	8004390 <HAL_TIM_ConfigClockSource+0x68>
  switch (sClockSourceConfig->ClockSource)
 80043ce:	2b70      	cmp	r3, #112	@ 0x70
 80043d0:	d1de      	bne.n	8004390 <HAL_TIM_ConfigClockSource+0x68>
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80043d2:	e9d1 5301 	ldrd	r5, r3, [r1, #4]
  tmpsmcr = TIMx->SMCR;
 80043d6:	68a0      	ldr	r0, [r4, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80043d8:	432b      	orrs	r3, r5
 80043da:	68cd      	ldr	r5, [r1, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80043dc:	f420 417f 	bic.w	r1, r0, #65280	@ 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80043e0:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
 80043e4:	430b      	orrs	r3, r1
  TIMx->SMCR = tmpsmcr;
 80043e6:	60a3      	str	r3, [r4, #8]
      tmpsmcr = htim->Instance->SMCR;
 80043e8:	68a3      	ldr	r3, [r4, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80043ea:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
      htim->Instance->SMCR = tmpsmcr;
 80043ee:	60a3      	str	r3, [r4, #8]
      break;
 80043f0:	e7cd      	b.n	800438e <HAL_TIM_ConfigClockSource+0x66>
  switch (sClockSourceConfig->ClockSource)
 80043f2:	2b20      	cmp	r3, #32
 80043f4:	d002      	beq.n	80043fc <HAL_TIM_ConfigClockSource+0xd4>
 80043f6:	d909      	bls.n	800440c <HAL_TIM_ConfigClockSource+0xe4>
 80043f8:	2b30      	cmp	r3, #48	@ 0x30
 80043fa:	d1c9      	bne.n	8004390 <HAL_TIM_ConfigClockSource+0x68>
  tmpsmcr = TIMx->SMCR;
 80043fc:	68a1      	ldr	r1, [r4, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 80043fe:	f021 0170 	bic.w	r1, r1, #112	@ 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004402:	430b      	orrs	r3, r1
 8004404:	f043 0307 	orr.w	r3, r3, #7
  TIMx->SMCR = tmpsmcr;
 8004408:	60a3      	str	r3, [r4, #8]
}
 800440a:	e7c0      	b.n	800438e <HAL_TIM_ConfigClockSource+0x66>
  switch (sClockSourceConfig->ClockSource)
 800440c:	f033 0110 	bics.w	r1, r3, #16
 8004410:	d1be      	bne.n	8004390 <HAL_TIM_ConfigClockSource+0x68>
 8004412:	e7f3      	b.n	80043fc <HAL_TIM_ConfigClockSource+0xd4>
  __HAL_LOCK(htim);
 8004414:	2002      	movs	r0, #2
}
 8004416:	4770      	bx	lr
  tmpccer = TIMx->CCER;
 8004418:	6a23      	ldr	r3, [r4, #32]
                               sClockSourceConfig->ClockPolarity,
 800441a:	684d      	ldr	r5, [r1, #4]
                               sClockSourceConfig->ClockFilter);
 800441c:	68c8      	ldr	r0, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800441e:	6a21      	ldr	r1, [r4, #32]
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004420:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004424:	f021 0110 	bic.w	r1, r1, #16
 8004428:	6221      	str	r1, [r4, #32]
  tmpccmr1 = TIMx->CCMR1;
 800442a:	69a1      	ldr	r1, [r4, #24]
  tmpccer |= (TIM_ICPolarity << 4U);
 800442c:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004430:	f421 4170 	bic.w	r1, r1, #61440	@ 0xf000
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004434:	ea41 3100 	orr.w	r1, r1, r0, lsl #12
  TIMx->CCMR1 = tmpccmr1 ;
 8004438:	61a1      	str	r1, [r4, #24]
  TIMx->CCER = tmpccer;
 800443a:	6223      	str	r3, [r4, #32]
  tmpsmcr = TIMx->SMCR;
 800443c:	68a3      	ldr	r3, [r4, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 800443e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004442:	f043 0367 	orr.w	r3, r3, #103	@ 0x67
  TIMx->SMCR = tmpsmcr;
 8004446:	60a3      	str	r3, [r4, #8]
}
 8004448:	e7a1      	b.n	800438e <HAL_TIM_ConfigClockSource+0x66>
                               sClockSourceConfig->ClockPolarity,
 800444a:	684b      	ldr	r3, [r1, #4]
                               sClockSourceConfig->ClockFilter);
 800444c:	68c8      	ldr	r0, [r1, #12]
  tmpccer = TIMx->CCER;
 800444e:	6a21      	ldr	r1, [r4, #32]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004450:	f021 010a 	bic.w	r1, r1, #10
  tmpccer |= TIM_ICPolarity;
 8004454:	4319      	orrs	r1, r3
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004456:	6a23      	ldr	r3, [r4, #32]
 8004458:	f023 0301 	bic.w	r3, r3, #1
 800445c:	6223      	str	r3, [r4, #32]
  tmpccmr1 = TIMx->CCMR1;
 800445e:	69a3      	ldr	r3, [r4, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004460:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004464:	ea43 1300 	orr.w	r3, r3, r0, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 8004468:	61a3      	str	r3, [r4, #24]
  TIMx->CCER = tmpccer;
 800446a:	6221      	str	r1, [r4, #32]
  tmpsmcr = TIMx->SMCR;
 800446c:	68a3      	ldr	r3, [r4, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 800446e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004472:	f043 0347 	orr.w	r3, r3, #71	@ 0x47
  TIMx->SMCR = tmpsmcr;
 8004476:	60a3      	str	r3, [r4, #8]
}
 8004478:	e789      	b.n	800438e <HAL_TIM_ConfigClockSource+0x66>
 800447a:	bf00      	nop

0800447c <HAL_TIM_PeriodElapsedCallback>:
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
 800447c:	4770      	bx	lr
 800447e:	bf00      	nop

08004480 <HAL_TIM_OC_DelayElapsedCallback>:
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
 8004480:	4770      	bx	lr
 8004482:	bf00      	nop

08004484 <HAL_TIM_IC_CaptureCallback>:
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
 8004484:	4770      	bx	lr
 8004486:	bf00      	nop

08004488 <HAL_TIM_PWM_PulseFinishedCallback>:
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
 8004488:	4770      	bx	lr
 800448a:	bf00      	nop

0800448c <HAL_TIM_TriggerCallback>:
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
 800448c:	4770      	bx	lr
 800448e:	bf00      	nop

08004490 <HAL_TIM_IRQHandler>:
  uint32_t itsource = htim->Instance->DIER;
 8004490:	6803      	ldr	r3, [r0, #0]
{
 8004492:	b570      	push	{r4, r5, r6, lr}
  uint32_t itsource = htim->Instance->DIER;
 8004494:	68de      	ldr	r6, [r3, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004496:	691d      	ldr	r5, [r3, #16]
{
 8004498:	4604      	mov	r4, r0
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800449a:	07a9      	lsls	r1, r5, #30
 800449c:	d501      	bpl.n	80044a2 <HAL_TIM_IRQHandler+0x12>
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800449e:	07b2      	lsls	r2, r6, #30
 80044a0:	d451      	bmi.n	8004546 <HAL_TIM_IRQHandler+0xb6>
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80044a2:	0769      	lsls	r1, r5, #29
 80044a4:	d501      	bpl.n	80044aa <HAL_TIM_IRQHandler+0x1a>
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80044a6:	0772      	lsls	r2, r6, #29
 80044a8:	d43a      	bmi.n	8004520 <HAL_TIM_IRQHandler+0x90>
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80044aa:	072b      	lsls	r3, r5, #28
 80044ac:	d501      	bpl.n	80044b2 <HAL_TIM_IRQHandler+0x22>
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80044ae:	0730      	lsls	r0, r6, #28
 80044b0:	d424      	bmi.n	80044fc <HAL_TIM_IRQHandler+0x6c>
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80044b2:	06ea      	lsls	r2, r5, #27
 80044b4:	d501      	bpl.n	80044ba <HAL_TIM_IRQHandler+0x2a>
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80044b6:	06f3      	lsls	r3, r6, #27
 80044b8:	d410      	bmi.n	80044dc <HAL_TIM_IRQHandler+0x4c>
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80044ba:	07e8      	lsls	r0, r5, #31
 80044bc:	d501      	bpl.n	80044c2 <HAL_TIM_IRQHandler+0x32>
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80044be:	07f1      	lsls	r1, r6, #31
 80044c0:	d457      	bmi.n	8004572 <HAL_TIM_IRQHandler+0xe2>
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80044c2:	062a      	lsls	r2, r5, #24
 80044c4:	d501      	bpl.n	80044ca <HAL_TIM_IRQHandler+0x3a>
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80044c6:	0633      	lsls	r3, r6, #24
 80044c8:	d45b      	bmi.n	8004582 <HAL_TIM_IRQHandler+0xf2>
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80044ca:	0668      	lsls	r0, r5, #25
 80044cc:	d501      	bpl.n	80044d2 <HAL_TIM_IRQHandler+0x42>
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80044ce:	0671      	lsls	r1, r6, #25
 80044d0:	d45f      	bmi.n	8004592 <HAL_TIM_IRQHandler+0x102>
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80044d2:	06aa      	lsls	r2, r5, #26
 80044d4:	d501      	bpl.n	80044da <HAL_TIM_IRQHandler+0x4a>
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80044d6:	06b3      	lsls	r3, r6, #26
 80044d8:	d442      	bmi.n	8004560 <HAL_TIM_IRQHandler+0xd0>
}
 80044da:	bd70      	pop	{r4, r5, r6, pc}
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80044dc:	f06f 0110 	mvn.w	r1, #16
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80044e0:	2208      	movs	r2, #8
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80044e2:	6823      	ldr	r3, [r4, #0]
        HAL_TIM_IC_CaptureCallback(htim);
 80044e4:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80044e6:	6119      	str	r1, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80044e8:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80044ea:	69db      	ldr	r3, [r3, #28]
 80044ec:	f413 7f40 	tst.w	r3, #768	@ 0x300
 80044f0:	d063      	beq.n	80045ba <HAL_TIM_IRQHandler+0x12a>
        HAL_TIM_IC_CaptureCallback(htim);
 80044f2:	f7ff ffc7 	bl	8004484 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80044f6:	2300      	movs	r3, #0
 80044f8:	7723      	strb	r3, [r4, #28]
 80044fa:	e7de      	b.n	80044ba <HAL_TIM_IRQHandler+0x2a>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80044fc:	f06f 0108 	mvn.w	r1, #8
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004500:	2204      	movs	r2, #4
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8004502:	6823      	ldr	r3, [r4, #0]
        HAL_TIM_IC_CaptureCallback(htim);
 8004504:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8004506:	6119      	str	r1, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004508:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800450a:	69db      	ldr	r3, [r3, #28]
 800450c:	0799      	lsls	r1, r3, #30
 800450e:	d151      	bne.n	80045b4 <HAL_TIM_IRQHandler+0x124>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004510:	f7ff ffb6 	bl	8004480 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004514:	4620      	mov	r0, r4
 8004516:	f7ff ffb7 	bl	8004488 <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800451a:	2300      	movs	r3, #0
 800451c:	7723      	strb	r3, [r4, #28]
 800451e:	e7c8      	b.n	80044b2 <HAL_TIM_IRQHandler+0x22>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8004520:	f06f 0104 	mvn.w	r1, #4
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004524:	2202      	movs	r2, #2
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8004526:	6823      	ldr	r3, [r4, #0]
        HAL_TIM_IC_CaptureCallback(htim);
 8004528:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800452a:	6119      	str	r1, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800452c:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800452e:	699b      	ldr	r3, [r3, #24]
 8004530:	f413 7f40 	tst.w	r3, #768	@ 0x300
 8004534:	d13b      	bne.n	80045ae <HAL_TIM_IRQHandler+0x11e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004536:	f7ff ffa3 	bl	8004480 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800453a:	4620      	mov	r0, r4
 800453c:	f7ff ffa4 	bl	8004488 <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004540:	2300      	movs	r3, #0
 8004542:	7723      	strb	r3, [r4, #28]
 8004544:	e7b1      	b.n	80044aa <HAL_TIM_IRQHandler+0x1a>
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8004546:	f06f 0202 	mvn.w	r2, #2
 800454a:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800454c:	2201      	movs	r2, #1
 800454e:	7702      	strb	r2, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004550:	699b      	ldr	r3, [r3, #24]
 8004552:	079b      	lsls	r3, r3, #30
 8004554:	d025      	beq.n	80045a2 <HAL_TIM_IRQHandler+0x112>
          HAL_TIM_IC_CaptureCallback(htim);
 8004556:	f7ff ff95 	bl	8004484 <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800455a:	2300      	movs	r3, #0
 800455c:	7723      	strb	r3, [r4, #28]
 800455e:	e7a0      	b.n	80044a2 <HAL_TIM_IRQHandler+0x12>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8004560:	f06f 0220 	mvn.w	r2, #32
 8004564:	6823      	ldr	r3, [r4, #0]
      HAL_TIMEx_CommutCallback(htim);
 8004566:	4620      	mov	r0, r4
}
 8004568:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800456c:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutCallback(htim);
 800456e:	f000 b887 	b.w	8004680 <HAL_TIMEx_CommutCallback>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004572:	f06f 0201 	mvn.w	r2, #1
 8004576:	6823      	ldr	r3, [r4, #0]
      HAL_TIM_PeriodElapsedCallback(htim);
 8004578:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800457a:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 800457c:	f7ff ff7e 	bl	800447c <HAL_TIM_PeriodElapsedCallback>
 8004580:	e79f      	b.n	80044c2 <HAL_TIM_IRQHandler+0x32>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8004582:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8004586:	6823      	ldr	r3, [r4, #0]
      HAL_TIMEx_BreakCallback(htim);
 8004588:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 800458a:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 800458c:	f000 f87a 	bl	8004684 <HAL_TIMEx_BreakCallback>
 8004590:	e79b      	b.n	80044ca <HAL_TIM_IRQHandler+0x3a>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8004592:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8004596:	6823      	ldr	r3, [r4, #0]
      HAL_TIM_TriggerCallback(htim);
 8004598:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800459a:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 800459c:	f7ff ff76 	bl	800448c <HAL_TIM_TriggerCallback>
 80045a0:	e797      	b.n	80044d2 <HAL_TIM_IRQHandler+0x42>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80045a2:	f7ff ff6d 	bl	8004480 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80045a6:	4620      	mov	r0, r4
 80045a8:	f7ff ff6e 	bl	8004488 <HAL_TIM_PWM_PulseFinishedCallback>
 80045ac:	e7d5      	b.n	800455a <HAL_TIM_IRQHandler+0xca>
        HAL_TIM_IC_CaptureCallback(htim);
 80045ae:	f7ff ff69 	bl	8004484 <HAL_TIM_IC_CaptureCallback>
 80045b2:	e7c5      	b.n	8004540 <HAL_TIM_IRQHandler+0xb0>
        HAL_TIM_IC_CaptureCallback(htim);
 80045b4:	f7ff ff66 	bl	8004484 <HAL_TIM_IC_CaptureCallback>
 80045b8:	e7af      	b.n	800451a <HAL_TIM_IRQHandler+0x8a>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80045ba:	f7ff ff61 	bl	8004480 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80045be:	4620      	mov	r0, r4
 80045c0:	f7ff ff62 	bl	8004488 <HAL_TIM_PWM_PulseFinishedCallback>
 80045c4:	e797      	b.n	80044f6 <HAL_TIM_IRQHandler+0x66>
 80045c6:	bf00      	nop

080045c8 <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80045c8:	f890 203c 	ldrb.w	r2, [r0, #60]	@ 0x3c
 80045cc:	2a01      	cmp	r2, #1
 80045ce:	d027      	beq.n	8004620 <HAL_TIMEx_MasterConfigSynchronization+0x58>
 80045d0:	4603      	mov	r3, r0

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80045d2:	2002      	movs	r0, #2

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80045d4:	681a      	ldr	r2, [r3, #0]
{
 80045d6:	b430      	push	{r4, r5}
  htim->State = HAL_TIM_STATE_BUSY;
 80045d8:	f883 003d 	strb.w	r0, [r3, #61]	@ 0x3d
  tmpcr2 = htim->Instance->CR2;
 80045dc:	6850      	ldr	r0, [r2, #4]
  tmpsmcr = htim->Instance->SMCR;

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80045de:	680c      	ldr	r4, [r1, #0]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80045e0:	4d10      	ldr	r5, [pc, #64]	@ (8004624 <HAL_TIMEx_MasterConfigSynchronization+0x5c>)
  tmpcr2 &= ~TIM_CR2_MMS;
 80045e2:	f020 0070 	bic.w	r0, r0, #112	@ 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80045e6:	4320      	orrs	r0, r4
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80045e8:	42aa      	cmp	r2, r5
  tmpsmcr = htim->Instance->SMCR;
 80045ea:	6894      	ldr	r4, [r2, #8]
  htim->Instance->CR2 = tmpcr2;
 80045ec:	6050      	str	r0, [r2, #4]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80045ee:	d009      	beq.n	8004604 <HAL_TIMEx_MasterConfigSynchronization+0x3c>
 80045f0:	f1b2 4f80 	cmp.w	r2, #1073741824	@ 0x40000000
 80045f4:	d006      	beq.n	8004604 <HAL_TIMEx_MasterConfigSynchronization+0x3c>
 80045f6:	480c      	ldr	r0, [pc, #48]	@ (8004628 <HAL_TIMEx_MasterConfigSynchronization+0x60>)
 80045f8:	4282      	cmp	r2, r0
 80045fa:	d003      	beq.n	8004604 <HAL_TIMEx_MasterConfigSynchronization+0x3c>
 80045fc:	f500 6080 	add.w	r0, r0, #1024	@ 0x400
 8004600:	4282      	cmp	r2, r0
 8004602:	d104      	bne.n	800460e <HAL_TIMEx_MasterConfigSynchronization+0x46>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004604:	6849      	ldr	r1, [r1, #4]
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004606:	f024 0480 	bic.w	r4, r4, #128	@ 0x80
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800460a:	430c      	orrs	r4, r1

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800460c:	6094      	str	r4, [r2, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;

  __HAL_UNLOCK(htim);
 800460e:	2200      	movs	r2, #0
  htim->State = HAL_TIM_STATE_READY;
 8004610:	2101      	movs	r1, #1
  __HAL_UNLOCK(htim);
 8004612:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  htim->State = HAL_TIM_STATE_READY;
 8004616:	f883 103d 	strb.w	r1, [r3, #61]	@ 0x3d

  return HAL_OK;
 800461a:	4610      	mov	r0, r2
}
 800461c:	bc30      	pop	{r4, r5}
 800461e:	4770      	bx	lr
  __HAL_LOCK(htim);
 8004620:	2002      	movs	r0, #2
}
 8004622:	4770      	bx	lr
 8004624:	40012c00 	.word	0x40012c00
 8004628:	40000400 	.word	0x40000400

0800462c <HAL_TIMEx_ConfigBreakDeadTime>:
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800462c:	f890 303c 	ldrb.w	r3, [r0, #60]	@ 0x3c
 8004630:	2b01      	cmp	r3, #1
 8004632:	d023      	beq.n	800467c <HAL_TIMEx_ConfigBreakDeadTime+0x50>
 8004634:	4602      	mov	r2, r0
  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8004636:	e9d1 0302 	ldrd	r0, r3, [r1, #8]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;

  __HAL_UNLOCK(htim);
 800463a:	f04f 0c00 	mov.w	ip, #0
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800463e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004642:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8004644:	6848      	ldr	r0, [r1, #4]
 8004646:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800464a:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800464c:	6808      	ldr	r0, [r1, #0]
 800464e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004652:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8004654:	6908      	ldr	r0, [r1, #16]
 8004656:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
{
 800465a:	b410      	push	{r4}
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800465c:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800465e:	694c      	ldr	r4, [r1, #20]
 8004660:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8004664:	69c8      	ldr	r0, [r1, #28]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8004666:	4323      	orrs	r3, r4
  htim->Instance->BDTR = tmpbdtr;
 8004668:	6811      	ldr	r1, [r2, #0]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800466a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800466e:	4303      	orrs	r3, r0
  htim->Instance->BDTR = tmpbdtr;
 8004670:	644b      	str	r3, [r1, #68]	@ 0x44
  __HAL_UNLOCK(htim);
 8004672:	f882 c03c 	strb.w	ip, [r2, #60]	@ 0x3c

  return HAL_OK;
 8004676:	4660      	mov	r0, ip
}
 8004678:	bc10      	pop	{r4}
 800467a:	4770      	bx	lr
  __HAL_LOCK(htim);
 800467c:	2002      	movs	r0, #2
}
 800467e:	4770      	bx	lr

08004680 <HAL_TIMEx_CommutCallback>:
/**
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
 8004680:	4770      	bx	lr
 8004682:	bf00      	nop

08004684 <HAL_TIMEx_BreakCallback>:
/**
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
 8004684:	4770      	bx	lr
 8004686:	bf00      	nop

08004688 <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8004688:	b084      	sub	sp, #16
 800468a:	a804      	add	r0, sp, #16
 800468c:	e900 000e 	stmdb	r0, {r1, r2, r3}
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
}
 8004690:	2000      	movs	r0, #0
 8004692:	b004      	add	sp, #16
 8004694:	4770      	bx	lr
 8004696:	bf00      	nop

08004698 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8004698:	4603      	mov	r3, r0
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800469a:	2200      	movs	r2, #0
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 800469c:	f44f 413f 	mov.w	r1, #48896	@ 0xbf00
  USBx->ISTR = 0U;
 80046a0:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  return HAL_OK;
}
 80046a4:	4610      	mov	r0, r2
  USBx->CNTR = (uint16_t)winterruptmask;
 80046a6:	f8a3 1040 	strh.w	r1, [r3, #64]	@ 0x40
}
 80046aa:	4770      	bx	lr

080046ac <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 80046ac:	4603      	mov	r3, r0
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 80046ae:	f244 02ff 	movw	r2, #16639	@ 0x40ff
 80046b2:	f8b3 1040 	ldrh.w	r1, [r3, #64]	@ 0x40

  return HAL_OK;
}
 80046b6:	2000      	movs	r0, #0
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 80046b8:	400a      	ands	r2, r1
 80046ba:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
}
 80046be:	4770      	bx	lr

080046c0 <USB_SetCurrentMode>:
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
}
 80046c0:	2000      	movs	r0, #0
 80046c2:	4770      	bx	lr

080046c4 <USB_DevInit>:
  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 80046c4:	f04f 0c00 	mov.w	ip, #0
{
 80046c8:	b510      	push	{r4, lr}
 80046ca:	b084      	sub	sp, #16
 80046cc:	ac04      	add	r4, sp, #16
 80046ce:	e904 000e 	stmdb	r4, {r1, r2, r3}
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 80046d2:	f04f 0e01 	mov.w	lr, #1
{
 80046d6:	4603      	mov	r3, r0

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;

  return HAL_OK;
}
 80046d8:	4660      	mov	r0, ip
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 80046da:	f8a3 e040 	strh.w	lr, [r3, #64]	@ 0x40
  USBx->CNTR = 0U;
 80046de:	f8a3 c040 	strh.w	ip, [r3, #64]	@ 0x40
  USBx->ISTR = 0U;
 80046e2:	f8a3 c044 	strh.w	ip, [r3, #68]	@ 0x44
  USBx->BTABLE = BTABLE_ADDRESS;
 80046e6:	f8a3 c050 	strh.w	ip, [r3, #80]	@ 0x50
}
 80046ea:	b004      	add	sp, #16
 80046ec:	bd10      	pop	{r4, pc}
 80046ee:	bf00      	nop

080046f0 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80046f0:	b570      	push	{r4, r5, r6, lr}
  HAL_StatusTypeDef ret = HAL_OK;
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 80046f2:	780a      	ldrb	r2, [r1, #0]
{
 80046f4:	4603      	mov	r3, r0
  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 80046f6:	f830 0022 	ldrh.w	r0, [r0, r2, lsl #2]

  /* initialize Endpoint */
  switch (ep->type)
 80046fa:	f891 e003 	ldrb.w	lr, [r1, #3]
  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 80046fe:	f420 40ec 	bic.w	r0, r0, #30208	@ 0x7600
 8004702:	f020 0070 	bic.w	r0, r0, #112	@ 0x70
 8004706:	0400      	lsls	r0, r0, #16
 8004708:	0c00      	lsrs	r0, r0, #16
  switch (ep->type)
 800470a:	f1be 0f03 	cmp.w	lr, #3
 800470e:	f200 819d 	bhi.w	8004a4c <USB_ActivateEndpoint+0x35c>
 8004712:	e8df f00e 	tbb	[pc, lr]
 8004716:	726f      	.short	0x726f
 8004718:	0252      	.short	0x0252
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 800471a:	f440 60c0 	orr.w	r0, r0, #1536	@ 0x600
    default:
      ret = HAL_ERROR;
      break;
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 800471e:	f248 0c80 	movw	ip, #32896	@ 0x8080
 8004722:	ea40 000c 	orr.w	r0, r0, ip
 8004726:	f823 0022 	strh.w	r0, [r3, r2, lsl #2]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 800472a:	f833 0022 	ldrh.w	r0, [r3, r2, lsl #2]
 800472e:	f420 40e0 	bic.w	r0, r0, #28672	@ 0x7000
 8004732:	f020 0070 	bic.w	r0, r0, #112	@ 0x70
 8004736:	0400      	lsls	r0, r0, #16
 8004738:	0c00      	lsrs	r0, r0, #16
 800473a:	4310      	orrs	r0, r2
 800473c:	ea4c 0c00 	orr.w	ip, ip, r0
 8004740:	f823 c022 	strh.w	ip, [r3, r2, lsl #2]

  if (ep->doublebuffer == 0U)
 8004744:	7b08      	ldrb	r0, [r1, #12]
 8004746:	2800      	cmp	r0, #0
 8004748:	d16b      	bne.n	8004822 <USB_ActivateEndpoint+0x132>
 800474a:	2000      	movs	r0, #0
  {
    if (ep->is_in != 0U)
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800474c:	88cc      	ldrh	r4, [r1, #6]
    if (ep->is_in != 0U)
 800474e:	784e      	ldrb	r6, [r1, #1]
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8004750:	0864      	lsrs	r4, r4, #1
 8004752:	0064      	lsls	r4, r4, #1
 8004754:	eb03 1502 	add.w	r5, r3, r2, lsl #4
    if (ep->is_in != 0U)
 8004758:	2e00      	cmp	r6, #0
 800475a:	f000 8115 	beq.w	8004988 <USB_ActivateEndpoint+0x298>
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800475e:	f8b3 1050 	ldrh.w	r1, [r3, #80]	@ 0x50
 8004762:	b289      	uxth	r1, r1
 8004764:	4429      	add	r1, r5
 8004766:	f8a1 4400 	strh.w	r4, [r1, #1024]	@ 0x400
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800476a:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 800476e:	0649      	lsls	r1, r1, #25
 8004770:	d50d      	bpl.n	800478e <USB_ActivateEndpoint+0x9e>
 8004772:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 8004776:	f421 41e0 	bic.w	r1, r1, #28672	@ 0x7000
 800477a:	f021 0170 	bic.w	r1, r1, #112	@ 0x70
 800477e:	0409      	lsls	r1, r1, #16
 8004780:	0c09      	lsrs	r1, r1, #16
 8004782:	f441 4100 	orr.w	r1, r1, #32768	@ 0x8000
 8004786:	f041 01c0 	orr.w	r1, r1, #192	@ 0xc0
 800478a:	f823 1022 	strh.w	r1, [r3, r2, lsl #2]

      if (ep->type != EP_TYPE_ISOC)
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800478e:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
      if (ep->type != EP_TYPE_ISOC)
 8004792:	f1be 0f01 	cmp.w	lr, #1
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8004796:	f421 41e0 	bic.w	r1, r1, #28672	@ 0x7000
 800479a:	f021 0140 	bic.w	r1, r1, #64	@ 0x40
 800479e:	ea4f 4101 	mov.w	r1, r1, lsl #16
 80047a2:	ea4f 4111 	mov.w	r1, r1, lsr #16
      if (ep->type != EP_TYPE_ISOC)
 80047a6:	d035      	beq.n	8004814 <USB_ActivateEndpoint+0x124>
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80047a8:	f081 0120 	eor.w	r1, r1, #32
 80047ac:	f441 4100 	orr.w	r1, r1, #32768	@ 0x8000
 80047b0:	f041 0180 	orr.w	r1, r1, #128	@ 0x80
 80047b4:	f823 1022 	strh.w	r1, [r3, r2, lsl #2]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
}
 80047b8:	bd70      	pop	{r4, r5, r6, pc}
  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 80047ba:	f248 0480 	movw	r4, #32896	@ 0x8080
 80047be:	4320      	orrs	r0, r4
 80047c0:	f823 0022 	strh.w	r0, [r3, r2, lsl #2]
  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 80047c4:	f833 0022 	ldrh.w	r0, [r3, r2, lsl #2]
 80047c8:	4dac      	ldr	r5, [pc, #688]	@ (8004a7c <USB_ActivateEndpoint+0x38c>)
 80047ca:	b280      	uxth	r0, r0
 80047cc:	4028      	ands	r0, r5
 80047ce:	4310      	orrs	r0, r2
 80047d0:	4304      	orrs	r4, r0
 80047d2:	f823 4022 	strh.w	r4, [r3, r2, lsl #2]
  if (ep->doublebuffer == 0U)
 80047d6:	7b08      	ldrb	r0, [r1, #12]
 80047d8:	2800      	cmp	r0, #0
 80047da:	d0b6      	beq.n	800474a <USB_ActivateEndpoint+0x5a>
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 80047dc:	f833 0022 	ldrh.w	r0, [r3, r2, lsl #2]
 80047e0:	b280      	uxth	r0, r0
 80047e2:	4028      	ands	r0, r5
 80047e4:	f440 4001 	orr.w	r0, r0, #33024	@ 0x8100
 80047e8:	f040 0080 	orr.w	r0, r0, #128	@ 0x80
 80047ec:	f823 0022 	strh.w	r0, [r3, r2, lsl #2]
 80047f0:	2000      	movs	r0, #0
 80047f2:	e027      	b.n	8004844 <USB_ActivateEndpoint+0x154>
      wEpRegVal |= USB_EP_CONTROL;
 80047f4:	f440 7000 	orr.w	r0, r0, #512	@ 0x200
      break;
 80047f8:	e791      	b.n	800471e <USB_ActivateEndpoint+0x2e>
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 80047fa:	f440 6080 	orr.w	r0, r0, #1024	@ 0x400
      break;
 80047fe:	e78e      	b.n	800471e <USB_ActivateEndpoint+0x2e>
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 8004800:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 8004804:	f421 4180 	bic.w	r1, r1, #16384	@ 0x4000
 8004808:	f021 0170 	bic.w	r1, r1, #112	@ 0x70
 800480c:	0409      	lsls	r1, r1, #16
 800480e:	0c09      	lsrs	r1, r1, #16
 8004810:	f481 5100 	eor.w	r1, r1, #8192	@ 0x2000
 8004814:	f441 4100 	orr.w	r1, r1, #32768	@ 0x8000
 8004818:	f041 0180 	orr.w	r1, r1, #128	@ 0x80
 800481c:	f823 1022 	strh.w	r1, [r3, r2, lsl #2]
}
 8004820:	bd70      	pop	{r4, r5, r6, pc}
  if (ep->doublebuffer == 0U)
 8004822:	2000      	movs	r0, #0
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 8004824:	f833 c022 	ldrh.w	ip, [r3, r2, lsl #2]
 8004828:	f42c 4ce2 	bic.w	ip, ip, #28928	@ 0x7100
 800482c:	f02c 0c70 	bic.w	ip, ip, #112	@ 0x70
 8004830:	ea4f 4c0c 	mov.w	ip, ip, lsl #16
 8004834:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8004838:	f44c 4c00 	orr.w	ip, ip, #32768	@ 0x8000
 800483c:	f04c 0c80 	orr.w	ip, ip, #128	@ 0x80
 8004840:	f823 c022 	strh.w	ip, [r3, r2, lsl #2]
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8004844:	f8b3 4050 	ldrh.w	r4, [r3, #80]	@ 0x50
 8004848:	f8b1 c008 	ldrh.w	ip, [r1, #8]
 800484c:	eb03 1502 	add.w	r5, r3, r2, lsl #4
 8004850:	b2a4      	uxth	r4, r4
 8004852:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 8004856:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
 800485a:	442c      	add	r4, r5
 800485c:	f8a4 c400 	strh.w	ip, [r4, #1024]	@ 0x400
 8004860:	894c      	ldrh	r4, [r1, #10]
 8004862:	f8b3 c050 	ldrh.w	ip, [r3, #80]	@ 0x50
 8004866:	0864      	lsrs	r4, r4, #1
 8004868:	fa1f fc8c 	uxth.w	ip, ip
 800486c:	44ac      	add	ip, r5
 800486e:	0064      	lsls	r4, r4, #1
 8004870:	f8ac 4408 	strh.w	r4, [ip, #1032]	@ 0x408
    if (ep->is_in == 0U)
 8004874:	7849      	ldrb	r1, [r1, #1]
 8004876:	2900      	cmp	r1, #0
 8004878:	d13e      	bne.n	80048f8 <USB_ActivateEndpoint+0x208>
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800487a:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 800487e:	044e      	lsls	r6, r1, #17
 8004880:	d50d      	bpl.n	800489e <USB_ActivateEndpoint+0x1ae>
 8004882:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 8004886:	f421 41e0 	bic.w	r1, r1, #28672	@ 0x7000
 800488a:	f021 0170 	bic.w	r1, r1, #112	@ 0x70
 800488e:	0409      	lsls	r1, r1, #16
 8004890:	0c09      	lsrs	r1, r1, #16
 8004892:	f441 4140 	orr.w	r1, r1, #49152	@ 0xc000
 8004896:	f041 0180 	orr.w	r1, r1, #128	@ 0x80
 800489a:	f823 1022 	strh.w	r1, [r3, r2, lsl #2]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800489e:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 80048a2:	064d      	lsls	r5, r1, #25
 80048a4:	d50d      	bpl.n	80048c2 <USB_ActivateEndpoint+0x1d2>
 80048a6:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 80048aa:	f421 41e0 	bic.w	r1, r1, #28672	@ 0x7000
 80048ae:	f021 0170 	bic.w	r1, r1, #112	@ 0x70
 80048b2:	0409      	lsls	r1, r1, #16
 80048b4:	0c09      	lsrs	r1, r1, #16
 80048b6:	f441 4100 	orr.w	r1, r1, #32768	@ 0x8000
 80048ba:	f041 01c0 	orr.w	r1, r1, #192	@ 0xc0
 80048be:	f823 1022 	strh.w	r1, [r3, r2, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80048c2:	f248 0480 	movw	r4, #32896	@ 0x8080
 80048c6:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 80048ca:	f421 4180 	bic.w	r1, r1, #16384	@ 0x4000
 80048ce:	f021 0170 	bic.w	r1, r1, #112	@ 0x70
 80048d2:	0409      	lsls	r1, r1, #16
 80048d4:	0c09      	lsrs	r1, r1, #16
 80048d6:	f481 5140 	eor.w	r1, r1, #12288	@ 0x3000
 80048da:	4321      	orrs	r1, r4
 80048dc:	f823 1022 	strh.w	r1, [r3, r2, lsl #2]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80048e0:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 80048e4:	f421 41e0 	bic.w	r1, r1, #28672	@ 0x7000
 80048e8:	f021 0140 	bic.w	r1, r1, #64	@ 0x40
 80048ec:	0409      	lsls	r1, r1, #16
 80048ee:	0c09      	lsrs	r1, r1, #16
 80048f0:	430c      	orrs	r4, r1
 80048f2:	f823 4022 	strh.w	r4, [r3, r2, lsl #2]
}
 80048f6:	bd70      	pop	{r4, r5, r6, pc}
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80048f8:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 80048fc:	044c      	lsls	r4, r1, #17
 80048fe:	d50d      	bpl.n	800491c <USB_ActivateEndpoint+0x22c>
 8004900:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 8004904:	f421 41e0 	bic.w	r1, r1, #28672	@ 0x7000
 8004908:	f021 0170 	bic.w	r1, r1, #112	@ 0x70
 800490c:	0409      	lsls	r1, r1, #16
 800490e:	0c09      	lsrs	r1, r1, #16
 8004910:	f441 4140 	orr.w	r1, r1, #49152	@ 0xc000
 8004914:	f041 0180 	orr.w	r1, r1, #128	@ 0x80
 8004918:	f823 1022 	strh.w	r1, [r3, r2, lsl #2]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800491c:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 8004920:	0649      	lsls	r1, r1, #25
 8004922:	d50d      	bpl.n	8004940 <USB_ActivateEndpoint+0x250>
 8004924:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 8004928:	f421 41e0 	bic.w	r1, r1, #28672	@ 0x7000
 800492c:	f021 0170 	bic.w	r1, r1, #112	@ 0x70
 8004930:	0409      	lsls	r1, r1, #16
 8004932:	0c09      	lsrs	r1, r1, #16
 8004934:	f441 4100 	orr.w	r1, r1, #32768	@ 0x8000
 8004938:	f041 01c0 	orr.w	r1, r1, #192	@ 0xc0
 800493c:	f823 1022 	strh.w	r1, [r3, r2, lsl #2]
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8004940:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
      if (ep->type != EP_TYPE_ISOC)
 8004944:	f1be 0f01 	cmp.w	lr, #1
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8004948:	f421 41e0 	bic.w	r1, r1, #28672	@ 0x7000
 800494c:	f021 0140 	bic.w	r1, r1, #64	@ 0x40
 8004950:	ea4f 4101 	mov.w	r1, r1, lsl #16
 8004954:	ea4f 4111 	mov.w	r1, r1, lsr #16
 8004958:	bf18      	it	ne
 800495a:	f081 0120 	eorne.w	r1, r1, #32
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800495e:	f441 4100 	orr.w	r1, r1, #32768	@ 0x8000
 8004962:	f041 0180 	orr.w	r1, r1, #128	@ 0x80
 8004966:	f823 1022 	strh.w	r1, [r3, r2, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800496a:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 800496e:	f421 4180 	bic.w	r1, r1, #16384	@ 0x4000
 8004972:	f021 0170 	bic.w	r1, r1, #112	@ 0x70
 8004976:	0409      	lsls	r1, r1, #16
 8004978:	0c09      	lsrs	r1, r1, #16
 800497a:	f441 4100 	orr.w	r1, r1, #32768	@ 0x8000
 800497e:	f041 0180 	orr.w	r1, r1, #128	@ 0x80
 8004982:	f823 1022 	strh.w	r1, [r3, r2, lsl #2]
}
 8004986:	bd70      	pop	{r4, r5, r6, pc}
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8004988:	690e      	ldr	r6, [r1, #16]
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800498a:	f8b3 1050 	ldrh.w	r1, [r3, #80]	@ 0x50
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 800498e:	2e3e      	cmp	r6, #62	@ 0x3e
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8004990:	b289      	uxth	r1, r1
 8004992:	4429      	add	r1, r5
 8004994:	f8a1 4408 	strh.w	r4, [r1, #1032]	@ 0x408
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8004998:	f8b3 1050 	ldrh.w	r1, [r3, #80]	@ 0x50
 800499c:	b289      	uxth	r1, r1
 800499e:	4429      	add	r1, r5
 80049a0:	f8b1 440c 	ldrh.w	r4, [r1, #1036]	@ 0x40c
 80049a4:	f3c4 0409 	ubfx	r4, r4, #0, #10
 80049a8:	f8a1 440c 	strh.w	r4, [r1, #1036]	@ 0x40c
 80049ac:	d82e      	bhi.n	8004a0c <USB_ActivateEndpoint+0x31c>
 80049ae:	2e00      	cmp	r6, #0
 80049b0:	d13e      	bne.n	8004a30 <USB_ActivateEndpoint+0x340>
 80049b2:	f8b1 440c 	ldrh.w	r4, [r1, #1036]	@ 0x40c
 80049b6:	ea6f 4444 	mvn.w	r4, r4, lsl #17
 80049ba:	ea6f 4454 	mvn.w	r4, r4, lsr #17
 80049be:	b2a4      	uxth	r4, r4
 80049c0:	f8a1 440c 	strh.w	r4, [r1, #1036]	@ 0x40c
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80049c4:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 80049c8:	0449      	lsls	r1, r1, #17
 80049ca:	d50d      	bpl.n	80049e8 <USB_ActivateEndpoint+0x2f8>
 80049cc:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 80049d0:	f421 41e0 	bic.w	r1, r1, #28672	@ 0x7000
 80049d4:	f021 0170 	bic.w	r1, r1, #112	@ 0x70
 80049d8:	0409      	lsls	r1, r1, #16
 80049da:	0c09      	lsrs	r1, r1, #16
 80049dc:	f441 4140 	orr.w	r1, r1, #49152	@ 0xc000
 80049e0:	f041 0180 	orr.w	r1, r1, #128	@ 0x80
 80049e4:	f823 1022 	strh.w	r1, [r3, r2, lsl #2]
      if (ep->num == 0U)
 80049e8:	2a00      	cmp	r2, #0
 80049ea:	f47f af09 	bne.w	8004800 <USB_ActivateEndpoint+0x110>
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80049ee:	881a      	ldrh	r2, [r3, #0]
 80049f0:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80049f4:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 80049f8:	0412      	lsls	r2, r2, #16
 80049fa:	0c12      	lsrs	r2, r2, #16
 80049fc:	f482 5240 	eor.w	r2, r2, #12288	@ 0x3000
 8004a00:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004a04:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8004a08:	801a      	strh	r2, [r3, #0]
}
 8004a0a:	bd70      	pop	{r4, r5, r6, pc}
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8004a0c:	f8b1 440c 	ldrh.w	r4, [r1, #1036]	@ 0x40c
 8004a10:	0975      	lsrs	r5, r6, #5
 8004a12:	06f6      	lsls	r6, r6, #27
 8004a14:	bf08      	it	eq
 8004a16:	f105 35ff 	addeq.w	r5, r5, #4294967295	@ 0xffffffff
 8004a1a:	b2a4      	uxth	r4, r4
 8004a1c:	ea44 2485 	orr.w	r4, r4, r5, lsl #10
 8004a20:	ea6f 4444 	mvn.w	r4, r4, lsl #17
 8004a24:	ea6f 4454 	mvn.w	r4, r4, lsr #17
 8004a28:	b2a4      	uxth	r4, r4
 8004a2a:	f8a1 440c 	strh.w	r4, [r1, #1036]	@ 0x40c
 8004a2e:	e7c9      	b.n	80049c4 <USB_ActivateEndpoint+0x2d4>
 8004a30:	07f4      	lsls	r4, r6, #31
 8004a32:	f8b1 440c 	ldrh.w	r4, [r1, #1036]	@ 0x40c
 8004a36:	ea4f 0556 	mov.w	r5, r6, lsr #1
 8004a3a:	bf48      	it	mi
 8004a3c:	3501      	addmi	r5, #1
 8004a3e:	b2a4      	uxth	r4, r4
 8004a40:	ea44 2485 	orr.w	r4, r4, r5, lsl #10
 8004a44:	b2a4      	uxth	r4, r4
 8004a46:	f8a1 440c 	strh.w	r4, [r1, #1036]	@ 0x40c
 8004a4a:	e7bb      	b.n	80049c4 <USB_ActivateEndpoint+0x2d4>
  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8004a4c:	f248 0480 	movw	r4, #32896	@ 0x8080
 8004a50:	4320      	orrs	r0, r4
 8004a52:	f823 0022 	strh.w	r0, [r3, r2, lsl #2]
  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8004a56:	f833 0022 	ldrh.w	r0, [r3, r2, lsl #2]
 8004a5a:	f420 40e0 	bic.w	r0, r0, #28672	@ 0x7000
 8004a5e:	f020 0070 	bic.w	r0, r0, #112	@ 0x70
 8004a62:	0400      	lsls	r0, r0, #16
 8004a64:	0c00      	lsrs	r0, r0, #16
 8004a66:	4310      	orrs	r0, r2
 8004a68:	4304      	orrs	r4, r0
 8004a6a:	f823 4022 	strh.w	r4, [r3, r2, lsl #2]
  if (ep->doublebuffer == 0U)
 8004a6e:	7b08      	ldrb	r0, [r1, #12]
 8004a70:	b908      	cbnz	r0, 8004a76 <USB_ActivateEndpoint+0x386>
 8004a72:	2001      	movs	r0, #1
 8004a74:	e66a      	b.n	800474c <USB_ActivateEndpoint+0x5c>
 8004a76:	2001      	movs	r0, #1
 8004a78:	e6d4      	b.n	8004824 <USB_ActivateEndpoint+0x134>
 8004a7a:	bf00      	nop
 8004a7c:	ffff8f8f 	.word	0xffff8f8f

08004a80 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004a80:	b410      	push	{r4}
  if (ep->doublebuffer == 0U)
 8004a82:	7b0c      	ldrb	r4, [r1, #12]
  {
    if (ep->is_in != 0U)
 8004a84:	784a      	ldrb	r2, [r1, #1]
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004a86:	780b      	ldrb	r3, [r1, #0]
  if (ep->doublebuffer == 0U)
 8004a88:	b9c4      	cbnz	r4, 8004abc <USB_DeactivateEndpoint+0x3c>
    if (ep->is_in != 0U)
 8004a8a:	2a00      	cmp	r2, #0
 8004a8c:	f000 80b2 	beq.w	8004bf4 <USB_DeactivateEndpoint+0x174>
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004a90:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8004a94:	0654      	lsls	r4, r2, #25
 8004a96:	f100 80c6 	bmi.w	8004c26 <USB_DeactivateEndpoint+0x1a6>

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004a9a:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8004a9e:	f422 42e0 	bic.w	r2, r2, #28672	@ 0x7000
 8004aa2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004aa6:	0412      	lsls	r2, r2, #16
 8004aa8:	0c12      	lsrs	r2, r2, #16
 8004aaa:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004aae:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8004ab2:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
}
 8004ab6:	bc10      	pop	{r4}
 8004ab8:	2000      	movs	r0, #0
 8004aba:	4770      	bx	lr
    if (ep->is_in == 0U)
 8004abc:	2a00      	cmp	r2, #0
 8004abe:	d14c      	bne.n	8004b5a <USB_DeactivateEndpoint+0xda>
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004ac0:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8004ac4:	0452      	lsls	r2, r2, #17
 8004ac6:	d50d      	bpl.n	8004ae4 <USB_DeactivateEndpoint+0x64>
 8004ac8:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8004acc:	f422 42e0 	bic.w	r2, r2, #28672	@ 0x7000
 8004ad0:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8004ad4:	0412      	lsls	r2, r2, #16
 8004ad6:	0c12      	lsrs	r2, r2, #16
 8004ad8:	f442 4240 	orr.w	r2, r2, #49152	@ 0xc000
 8004adc:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8004ae0:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004ae4:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8004ae8:	0654      	lsls	r4, r2, #25
 8004aea:	d50d      	bpl.n	8004b08 <USB_DeactivateEndpoint+0x88>
 8004aec:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8004af0:	f422 42e0 	bic.w	r2, r2, #28672	@ 0x7000
 8004af4:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8004af8:	0412      	lsls	r2, r2, #16
 8004afa:	0c12      	lsrs	r2, r2, #16
 8004afc:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004b00:	f042 02c0 	orr.w	r2, r2, #192	@ 0xc0
 8004b04:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004b08:	f248 0180 	movw	r1, #32896	@ 0x8080
      PCD_TX_DTOG(USBx, ep->num);
 8004b0c:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
}
 8004b10:	bc10      	pop	{r4}
      PCD_TX_DTOG(USBx, ep->num);
 8004b12:	f422 42e0 	bic.w	r2, r2, #28672	@ 0x7000
 8004b16:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8004b1a:	0412      	lsls	r2, r2, #16
 8004b1c:	0c12      	lsrs	r2, r2, #16
 8004b1e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004b22:	f042 02c0 	orr.w	r2, r2, #192	@ 0xc0
 8004b26:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004b2a:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8004b2e:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8004b32:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8004b36:	0412      	lsls	r2, r2, #16
 8004b38:	0c12      	lsrs	r2, r2, #16
 8004b3a:	430a      	orrs	r2, r1
 8004b3c:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004b40:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8004b44:	f422 42e0 	bic.w	r2, r2, #28672	@ 0x7000
 8004b48:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004b4c:	0412      	lsls	r2, r2, #16
 8004b4e:	0c12      	lsrs	r2, r2, #16
 8004b50:	4311      	orrs	r1, r2
 8004b52:	f820 1023 	strh.w	r1, [r0, r3, lsl #2]
}
 8004b56:	2000      	movs	r0, #0
 8004b58:	4770      	bx	lr
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004b5a:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8004b5e:	0451      	lsls	r1, r2, #17
 8004b60:	d50d      	bpl.n	8004b7e <USB_DeactivateEndpoint+0xfe>
 8004b62:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8004b66:	f422 42e0 	bic.w	r2, r2, #28672	@ 0x7000
 8004b6a:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8004b6e:	0412      	lsls	r2, r2, #16
 8004b70:	0c12      	lsrs	r2, r2, #16
 8004b72:	f442 4240 	orr.w	r2, r2, #49152	@ 0xc000
 8004b76:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8004b7a:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004b7e:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8004b82:	0652      	lsls	r2, r2, #25
 8004b84:	d50d      	bpl.n	8004ba2 <USB_DeactivateEndpoint+0x122>
 8004b86:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8004b8a:	f422 42e0 	bic.w	r2, r2, #28672	@ 0x7000
 8004b8e:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8004b92:	0412      	lsls	r2, r2, #16
 8004b94:	0c12      	lsrs	r2, r2, #16
 8004b96:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004b9a:	f042 02c0 	orr.w	r2, r2, #192	@ 0xc0
 8004b9e:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004ba2:	f248 0180 	movw	r1, #32896	@ 0x8080
      PCD_RX_DTOG(USBx, ep->num);
 8004ba6:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
}
 8004baa:	bc10      	pop	{r4}
      PCD_RX_DTOG(USBx, ep->num);
 8004bac:	f422 42e0 	bic.w	r2, r2, #28672	@ 0x7000
 8004bb0:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8004bb4:	0412      	lsls	r2, r2, #16
 8004bb6:	0c12      	lsrs	r2, r2, #16
 8004bb8:	f442 4240 	orr.w	r2, r2, #49152	@ 0xc000
 8004bbc:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8004bc0:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004bc4:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8004bc8:	f422 42e0 	bic.w	r2, r2, #28672	@ 0x7000
 8004bcc:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004bd0:	0412      	lsls	r2, r2, #16
 8004bd2:	0c12      	lsrs	r2, r2, #16
 8004bd4:	430a      	orrs	r2, r1
 8004bd6:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004bda:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8004bde:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8004be2:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8004be6:	0412      	lsls	r2, r2, #16
 8004be8:	0c12      	lsrs	r2, r2, #16
 8004bea:	4311      	orrs	r1, r2
 8004bec:	f820 1023 	strh.w	r1, [r0, r3, lsl #2]
}
 8004bf0:	2000      	movs	r0, #0
 8004bf2:	4770      	bx	lr
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004bf4:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8004bf8:	0451      	lsls	r1, r2, #17
 8004bfa:	d50d      	bpl.n	8004c18 <USB_DeactivateEndpoint+0x198>
 8004bfc:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8004c00:	f422 42e0 	bic.w	r2, r2, #28672	@ 0x7000
 8004c04:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8004c08:	0412      	lsls	r2, r2, #16
 8004c0a:	0c12      	lsrs	r2, r2, #16
 8004c0c:	f442 4240 	orr.w	r2, r2, #49152	@ 0xc000
 8004c10:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8004c14:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004c18:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8004c1c:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8004c20:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8004c24:	e73f      	b.n	8004aa6 <USB_DeactivateEndpoint+0x26>
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004c26:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8004c2a:	f422 42e0 	bic.w	r2, r2, #28672	@ 0x7000
 8004c2e:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8004c32:	0412      	lsls	r2, r2, #16
 8004c34:	0c12      	lsrs	r2, r2, #16
 8004c36:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004c3a:	f042 02c0 	orr.w	r2, r2, #192	@ 0xc0
 8004c3e:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
 8004c42:	e72a      	b.n	8004a9a <USB_DeactivateEndpoint+0x1a>

08004c44 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004c44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004c48:	784b      	ldrb	r3, [r1, #1]
    {
      len = ep->xfer_len;
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8004c4a:	7b0c      	ldrb	r4, [r1, #12]
  if (ep->is_in == 1U)
 8004c4c:	2b01      	cmp	r3, #1
{
 8004c4e:	b083      	sub	sp, #12
  if (ep->is_in == 1U)
 8004c50:	d072      	beq.n	8004d38 <USB_EPStartXfer+0xf4>

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8004c52:	2c00      	cmp	r4, #0
 8004c54:	d03c      	beq.n	8004cd0 <USB_EPStartXfer+0x8c>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8004c56:	78ca      	ldrb	r2, [r1, #3]
 8004c58:	2a02      	cmp	r2, #2
 8004c5a:	f000 80df 	beq.w	8004e1c <USB_EPStartXfer+0x1d8>
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8004c5e:	2a01      	cmp	r2, #1
 8004c60:	f040 80d8 	bne.w	8004e14 <USB_EPStartXfer+0x1d0>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 8004c64:	698a      	ldr	r2, [r1, #24]
 8004c66:	690c      	ldr	r4, [r1, #16]
 8004c68:	42a2      	cmp	r2, r4
          ep->xfer_len -= len;
        }
        else
        {
          len = ep->xfer_len;
          ep->xfer_len = 0U;
 8004c6a:	bf94      	ite	ls
 8004c6c:	2500      	movls	r5, #0
          ep->xfer_len -= len;
 8004c6e:	1b15      	subhi	r5, r2, r4
 8004c70:	618d      	str	r5, [r1, #24]
 8004c72:	bf88      	it	hi
 8004c74:	4622      	movhi	r2, r4
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d149      	bne.n	8004d0e <USB_EPStartXfer+0xca>
 8004c7a:	f8b0 4050 	ldrh.w	r4, [r0, #80]	@ 0x50
 8004c7e:	780b      	ldrb	r3, [r1, #0]
 8004c80:	b2a4      	uxth	r4, r4
 8004c82:	f200 4504 	addw	r5, r0, #1028	@ 0x404
 8004c86:	011b      	lsls	r3, r3, #4
 8004c88:	4425      	add	r5, r4
 8004c8a:	5aec      	ldrh	r4, [r5, r3]
 8004c8c:	2a3e      	cmp	r2, #62	@ 0x3e
 8004c8e:	f3c4 0409 	ubfx	r4, r4, #0, #10
 8004c92:	52ec      	strh	r4, [r5, r3]
 8004c94:	f200 460c 	addw	r6, r0, #1036	@ 0x40c
 8004c98:	f200 81c3 	bhi.w	8005022 <USB_EPStartXfer+0x3de>
 8004c9c:	2a00      	cmp	r2, #0
 8004c9e:	f040 8223 	bne.w	80050e8 <USB_EPStartXfer+0x4a4>
 8004ca2:	5aea      	ldrh	r2, [r5, r3]
 8004ca4:	ea6f 4242 	mvn.w	r2, r2, lsl #17
 8004ca8:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 8004cac:	b292      	uxth	r2, r2
 8004cae:	52ea      	strh	r2, [r5, r3]
 8004cb0:	f8b0 2050 	ldrh.w	r2, [r0, #80]	@ 0x50
 8004cb4:	b292      	uxth	r2, r2
 8004cb6:	4432      	add	r2, r6
 8004cb8:	5ad4      	ldrh	r4, [r2, r3]
 8004cba:	f3c4 0409 	ubfx	r4, r4, #0, #10
 8004cbe:	52d4      	strh	r4, [r2, r3]
 8004cc0:	5ad4      	ldrh	r4, [r2, r3]
 8004cc2:	ea6f 4444 	mvn.w	r4, r4, lsl #17
 8004cc6:	ea6f 4454 	mvn.w	r4, r4, lsr #17
 8004cca:	b2a4      	uxth	r4, r4
 8004ccc:	52d4      	strh	r4, [r2, r3]
 8004cce:	e01e      	b.n	8004d0e <USB_EPStartXfer+0xca>
      if (ep->xfer_len > ep->maxpacket)
 8004cd0:	698a      	ldr	r2, [r1, #24]
 8004cd2:	690b      	ldr	r3, [r1, #16]
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8004cd4:	780d      	ldrb	r5, [r1, #0]
      if (ep->xfer_len > ep->maxpacket)
 8004cd6:	429a      	cmp	r2, r3
        ep->xfer_len -= len;
 8004cd8:	bf84      	itt	hi
 8004cda:	1ad4      	subhi	r4, r2, r3
 8004cdc:	461a      	movhi	r2, r3
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8004cde:	f8b0 3050 	ldrh.w	r3, [r0, #80]	@ 0x50
 8004ce2:	618c      	str	r4, [r1, #24]
 8004ce4:	b29c      	uxth	r4, r3
 8004ce6:	f200 430c 	addw	r3, r0, #1036	@ 0x40c
 8004cea:	012d      	lsls	r5, r5, #4
 8004cec:	4423      	add	r3, r4
 8004cee:	5aec      	ldrh	r4, [r5, r3]
 8004cf0:	2a3e      	cmp	r2, #62	@ 0x3e
 8004cf2:	f3c4 0409 	ubfx	r4, r4, #0, #10
 8004cf6:	52ec      	strh	r4, [r5, r3]
 8004cf8:	d87c      	bhi.n	8004df4 <USB_EPStartXfer+0x1b0>
 8004cfa:	2a00      	cmp	r2, #0
 8004cfc:	f040 80d9 	bne.w	8004eb2 <USB_EPStartXfer+0x26e>
 8004d00:	5aea      	ldrh	r2, [r5, r3]
 8004d02:	ea6f 4242 	mvn.w	r2, r2, lsl #17
 8004d06:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 8004d0a:	b292      	uxth	r2, r2
 8004d0c:	52ea      	strh	r2, [r5, r3]
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 8004d0e:	780a      	ldrb	r2, [r1, #0]
        return HAL_ERROR;
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8004d10:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8004d14:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004d18:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004d1c:	041b      	lsls	r3, r3, #16
 8004d1e:	0c1b      	lsrs	r3, r3, #16
 8004d20:	f483 5340 	eor.w	r3, r3, #12288	@ 0x3000
 8004d24:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004d28:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004d2c:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
  }

  return HAL_OK;
 8004d30:	2000      	movs	r0, #0
}
 8004d32:	b003      	add	sp, #12
 8004d34:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (ep->xfer_len > ep->maxpacket)
 8004d38:	690d      	ldr	r5, [r1, #16]
 8004d3a:	698a      	ldr	r2, [r1, #24]
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8004d3c:	694b      	ldr	r3, [r1, #20]
 8004d3e:	42aa      	cmp	r2, r5
 8004d40:	bf28      	it	cs
 8004d42:	462a      	movcs	r2, r5
    if (ep->doublebuffer == 0U)
 8004d44:	f500 6c80 	add.w	ip, r0, #1024	@ 0x400
 8004d48:	b344      	cbz	r4, 8004d9c <USB_EPStartXfer+0x158>
      if (ep->type == EP_TYPE_BULK)
 8004d4a:	78cf      	ldrb	r7, [r1, #3]
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8004d4c:	780e      	ldrb	r6, [r1, #0]
      if (ep->type == EP_TYPE_BULK)
 8004d4e:	2f02      	cmp	r7, #2
        if (ep->xfer_len_db > ep->maxpacket)
 8004d50:	6a0c      	ldr	r4, [r1, #32]
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8004d52:	ea4f 1e06 	mov.w	lr, r6, lsl #4
      if (ep->type == EP_TYPE_BULK)
 8004d56:	f000 80b7 	beq.w	8004ec8 <USB_EPStartXfer+0x284>
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8004d5a:	f830 5026 	ldrh.w	r5, [r0, r6, lsl #2]
        ep->xfer_len_db -= len;
 8004d5e:	1aa4      	subs	r4, r4, r2
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8004d60:	f8b0 6050 	ldrh.w	r6, [r0, #80]	@ 0x50
        ep->xfer_len_db -= len;
 8004d64:	620c      	str	r4, [r1, #32]
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8004d66:	b294      	uxth	r4, r2
 8004d68:	3401      	adds	r4, #1
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8004d6a:	066f      	lsls	r7, r5, #25
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8004d6c:	b292      	uxth	r2, r2
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8004d6e:	ea4f 0454 	mov.w	r4, r4, lsr #1
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8004d72:	b2b6      	uxth	r6, r6
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8004d74:	f140 80fd 	bpl.w	8004f72 <USB_EPStartXfer+0x32e>
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8004d78:	f200 450c 	addw	r5, r0, #1036	@ 0x40c
 8004d7c:	4435      	add	r5, r6
 8004d7e:	f825 200e 	strh.w	r2, [r5, lr]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8004d82:	894a      	ldrh	r2, [r1, #10]
 8004d84:	eb0c 0242 	add.w	r2, ip, r2, lsl #1

  for (count = n; count != 0U; count--)
 8004d88:	b314      	cbz	r4, 8004dd0 <USB_EPStartXfer+0x18c>
 8004d8a:	eb03 0544 	add.w	r5, r3, r4, lsl #1
  {
    WrVal = pBuf[0];
    WrVal |= (uint16_t)pBuf[1] << 8;
 8004d8e:	f833 4b02 	ldrh.w	r4, [r3], #2
  for (count = n; count != 0U; count--)
 8004d92:	42ab      	cmp	r3, r5
    *pdwVal = (WrVal & 0xFFFFU);
 8004d94:	f822 4b04 	strh.w	r4, [r2], #4
  for (count = n; count != 0U; count--)
 8004d98:	d1f9      	bne.n	8004d8e <USB_EPStartXfer+0x14a>
 8004d9a:	e019      	b.n	8004dd0 <USB_EPStartXfer+0x18c>
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8004d9c:	b296      	uxth	r6, r2
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8004d9e:	88cc      	ldrh	r4, [r1, #6]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8004da0:	3601      	adds	r6, #1
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8004da2:	eb0c 0444 	add.w	r4, ip, r4, lsl #1
  for (count = n; count != 0U; count--)
 8004da6:	0876      	lsrs	r6, r6, #1
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8004da8:	b292      	uxth	r2, r2
  for (count = n; count != 0U; count--)
 8004daa:	bf18      	it	ne
 8004dac:	eb04 0686 	addne.w	r6, r4, r6, lsl #2
 8004db0:	d005      	beq.n	8004dbe <USB_EPStartXfer+0x17a>
    WrVal |= (uint16_t)pBuf[1] << 8;
 8004db2:	f833 5b02 	ldrh.w	r5, [r3], #2
    *pdwVal = (WrVal & 0xFFFFU);
 8004db6:	f824 5b04 	strh.w	r5, [r4], #4
  for (count = n; count != 0U; count--)
 8004dba:	42b4      	cmp	r4, r6
 8004dbc:	d1f9      	bne.n	8004db2 <USB_EPStartXfer+0x16e>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8004dbe:	f8b0 5050 	ldrh.w	r5, [r0, #80]	@ 0x50
 8004dc2:	780c      	ldrb	r4, [r1, #0]
 8004dc4:	b2ad      	uxth	r5, r5
 8004dc6:	f200 4304 	addw	r3, r0, #1028	@ 0x404
 8004dca:	0124      	lsls	r4, r4, #4
 8004dcc:	442b      	add	r3, r5
 8004dce:	52e2      	strh	r2, [r4, r3]
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8004dd0:	780a      	ldrb	r2, [r1, #0]
 8004dd2:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8004dd6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004dda:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004dde:	041b      	lsls	r3, r3, #16
 8004de0:	0c1b      	lsrs	r3, r3, #16
 8004de2:	f083 0330 	eor.w	r3, r3, #48	@ 0x30
 8004de6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004dea:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004dee:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
 8004df2:	e79d      	b.n	8004d30 <USB_EPStartXfer+0xec>
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8004df4:	0954      	lsrs	r4, r2, #5
 8004df6:	06d6      	lsls	r6, r2, #27
 8004df8:	5aea      	ldrh	r2, [r5, r3]
 8004dfa:	bf08      	it	eq
 8004dfc:	f104 34ff 	addeq.w	r4, r4, #4294967295	@ 0xffffffff
 8004e00:	b292      	uxth	r2, r2
 8004e02:	ea42 2284 	orr.w	r2, r2, r4, lsl #10
 8004e06:	ea6f 4242 	mvn.w	r2, r2, lsl #17
 8004e0a:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 8004e0e:	b292      	uxth	r2, r2
 8004e10:	52ea      	strh	r2, [r5, r3]
 8004e12:	e77c      	b.n	8004d0e <USB_EPStartXfer+0xca>
        return HAL_ERROR;
 8004e14:	2001      	movs	r0, #1
}
 8004e16:	b003      	add	sp, #12
 8004e18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8004e1c:	bb53      	cbnz	r3, 8004e74 <USB_EPStartXfer+0x230>
 8004e1e:	f8b0 4050 	ldrh.w	r4, [r0, #80]	@ 0x50
 8004e22:	780a      	ldrb	r2, [r1, #0]
 8004e24:	b2a4      	uxth	r4, r4
 8004e26:	f200 4304 	addw	r3, r0, #1028	@ 0x404
 8004e2a:	0112      	lsls	r2, r2, #4
 8004e2c:	4423      	add	r3, r4
 8004e2e:	5a9c      	ldrh	r4, [r3, r2]
 8004e30:	690d      	ldr	r5, [r1, #16]
 8004e32:	f3c4 0409 	ubfx	r4, r4, #0, #10
 8004e36:	2d3e      	cmp	r5, #62	@ 0x3e
 8004e38:	529c      	strh	r4, [r3, r2]
 8004e3a:	f200 460c 	addw	r6, r0, #1036	@ 0x40c
 8004e3e:	f200 80d2 	bhi.w	8004fe6 <USB_EPStartXfer+0x3a2>
 8004e42:	2d00      	cmp	r5, #0
 8004e44:	f040 8139 	bne.w	80050ba <USB_EPStartXfer+0x476>
 8004e48:	5a9c      	ldrh	r4, [r3, r2]
 8004e4a:	ea6f 4444 	mvn.w	r4, r4, lsl #17
 8004e4e:	ea6f 4454 	mvn.w	r4, r4, lsr #17
 8004e52:	b2a4      	uxth	r4, r4
 8004e54:	529c      	strh	r4, [r3, r2]
 8004e56:	f8b0 3050 	ldrh.w	r3, [r0, #80]	@ 0x50
 8004e5a:	b29b      	uxth	r3, r3
 8004e5c:	4433      	add	r3, r6
 8004e5e:	5a9c      	ldrh	r4, [r3, r2]
 8004e60:	f3c4 0409 	ubfx	r4, r4, #0, #10
 8004e64:	529c      	strh	r4, [r3, r2]
 8004e66:	5a9c      	ldrh	r4, [r3, r2]
 8004e68:	ea6f 4444 	mvn.w	r4, r4, lsl #17
 8004e6c:	ea6f 4454 	mvn.w	r4, r4, lsr #17
 8004e70:	b2a4      	uxth	r4, r4
 8004e72:	529c      	strh	r4, [r3, r2]
        if (ep->xfer_count != 0U)
 8004e74:	69cb      	ldr	r3, [r1, #28]
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	f43f af49 	beq.w	8004d0e <USB_EPStartXfer+0xca>
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8004e7c:	f244 0340 	movw	r3, #16448	@ 0x4040
 8004e80:	780a      	ldrb	r2, [r1, #0]
 8004e82:	f830 4022 	ldrh.w	r4, [r0, r2, lsl #2]
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8004e86:	ea03 0504 	and.w	r5, r3, r4
 8004e8a:	43a3      	bics	r3, r4
 8004e8c:	d002      	beq.n	8004e94 <USB_EPStartXfer+0x250>
 8004e8e:	2d00      	cmp	r5, #0
 8004e90:	f47f af3e 	bne.w	8004d10 <USB_EPStartXfer+0xcc>
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 8004e94:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8004e98:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004e9c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004ea0:	041b      	lsls	r3, r3, #16
 8004ea2:	0c1b      	lsrs	r3, r3, #16
 8004ea4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004ea8:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8004eac:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
 8004eb0:	e72d      	b.n	8004d0e <USB_EPStartXfer+0xca>
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8004eb2:	0854      	lsrs	r4, r2, #1
 8004eb4:	07d2      	lsls	r2, r2, #31
 8004eb6:	5aea      	ldrh	r2, [r5, r3]
 8004eb8:	bf48      	it	mi
 8004eba:	3401      	addmi	r4, #1
 8004ebc:	b292      	uxth	r2, r2
 8004ebe:	ea42 2284 	orr.w	r2, r2, r4, lsl #10
 8004ec2:	b292      	uxth	r2, r2
 8004ec4:	52ea      	strh	r2, [r5, r3]
 8004ec6:	e722      	b.n	8004d0e <USB_EPStartXfer+0xca>
        if (ep->xfer_len_db > ep->maxpacket)
 8004ec8:	42a5      	cmp	r5, r4
 8004eca:	f200 4b04 	addw	fp, r0, #1028	@ 0x404
 8004ece:	d264      	bcs.n	8004f9a <USB_EPStartXfer+0x356>
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8004ed0:	f830 7026 	ldrh.w	r7, [r0, r6, lsl #2]
          ep->xfer_len_db -= len;
 8004ed4:	1aa4      	subs	r4, r4, r2
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8004ed6:	f427 47e0 	bic.w	r7, r7, #28672	@ 0x7000
 8004eda:	f027 0770 	bic.w	r7, r7, #112	@ 0x70
 8004ede:	043f      	lsls	r7, r7, #16
 8004ee0:	0c3f      	lsrs	r7, r7, #16
 8004ee2:	f447 4701 	orr.w	r7, r7, #33024	@ 0x8100
 8004ee6:	f047 0780 	orr.w	r7, r7, #128	@ 0x80
 8004eea:	f820 7026 	strh.w	r7, [r0, r6, lsl #2]
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8004eee:	f830 7026 	ldrh.w	r7, [r0, r6, lsl #2]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8004ef2:	b296      	uxth	r6, r2
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8004ef4:	f017 0f40 	tst.w	r7, #64	@ 0x40
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8004ef8:	f8b0 7050 	ldrh.w	r7, [r0, #80]	@ 0x50
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8004efc:	f106 0601 	add.w	r6, r6, #1
          ep->xfer_len_db -= len;
 8004f00:	620c      	str	r4, [r1, #32]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8004f02:	ea4f 0656 	mov.w	r6, r6, lsr #1
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8004f06:	fa1f f982 	uxth.w	r9, r2
 8004f0a:	f200 4a0c 	addw	sl, r0, #1036	@ 0x40c
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8004f0e:	b2bf      	uxth	r7, r7
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8004f10:	f000 80a5 	beq.w	800505e <USB_EPStartXfer+0x41a>
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8004f14:	4457      	add	r7, sl
 8004f16:	f827 900e 	strh.w	r9, [r7, lr]
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8004f1a:	f8b1 800a 	ldrh.w	r8, [r1, #10]
 8004f1e:	eb0c 0848 	add.w	r8, ip, r8, lsl #1
  for (count = n; count != 0U; count--)
 8004f22:	b156      	cbz	r6, 8004f3a <USB_EPStartXfer+0x2f6>
  uint8_t *pBuf = pbUsrBuf;
 8004f24:	461f      	mov	r7, r3
 8004f26:	eb03 0a46 	add.w	sl, r3, r6, lsl #1
 8004f2a:	9501      	str	r5, [sp, #4]
    WrVal |= (uint16_t)pBuf[1] << 8;
 8004f2c:	f837 5b02 	ldrh.w	r5, [r7], #2
  for (count = n; count != 0U; count--)
 8004f30:	4557      	cmp	r7, sl
    *pdwVal = (WrVal & 0xFFFFU);
 8004f32:	f828 5b04 	strh.w	r5, [r8], #4
  for (count = n; count != 0U; count--)
 8004f36:	d1f9      	bne.n	8004f2c <USB_EPStartXfer+0x2e8>
 8004f38:	9d01      	ldr	r5, [sp, #4]
            ep->xfer_buff += len;
 8004f3a:	4413      	add	r3, r2
            if (ep->xfer_len_db > ep->maxpacket)
 8004f3c:	42a5      	cmp	r5, r4
            ep->xfer_buff += len;
 8004f3e:	614b      	str	r3, [r1, #20]
            if (ep->xfer_len_db > ep->maxpacket)
 8004f40:	f080 80e9 	bcs.w	8005116 <USB_EPStartXfer+0x4d2>
              ep->xfer_len_db -= len;
 8004f44:	1aa2      	subs	r2, r4, r2
 8004f46:	620a      	str	r2, [r1, #32]
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8004f48:	f8b0 2050 	ldrh.w	r2, [r0, #80]	@ 0x50
 8004f4c:	b292      	uxth	r2, r2
 8004f4e:	445a      	add	r2, fp
 8004f50:	f822 900e 	strh.w	r9, [r2, lr]
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8004f54:	890a      	ldrh	r2, [r1, #8]
 8004f56:	eb0c 0242 	add.w	r2, ip, r2, lsl #1
  for (count = n; count != 0U; count--)
 8004f5a:	2e00      	cmp	r6, #0
 8004f5c:	f43f af38 	beq.w	8004dd0 <USB_EPStartXfer+0x18c>
 8004f60:	eb03 0646 	add.w	r6, r3, r6, lsl #1
    WrVal |= (uint16_t)pBuf[1] << 8;
 8004f64:	f833 4b02 	ldrh.w	r4, [r3], #2
  for (count = n; count != 0U; count--)
 8004f68:	42b3      	cmp	r3, r6
    *pdwVal = (WrVal & 0xFFFFU);
 8004f6a:	f822 4b04 	strh.w	r4, [r2], #4
  for (count = n; count != 0U; count--)
 8004f6e:	d1f9      	bne.n	8004f64 <USB_EPStartXfer+0x320>
 8004f70:	e72e      	b.n	8004dd0 <USB_EPStartXfer+0x18c>
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8004f72:	f200 4504 	addw	r5, r0, #1028	@ 0x404
 8004f76:	4435      	add	r5, r6
 8004f78:	f825 200e 	strh.w	r2, [r5, lr]
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8004f7c:	890a      	ldrh	r2, [r1, #8]
 8004f7e:	eb0c 0c42 	add.w	ip, ip, r2, lsl #1
  for (count = n; count != 0U; count--)
 8004f82:	2c00      	cmp	r4, #0
 8004f84:	f43f af24 	beq.w	8004dd0 <USB_EPStartXfer+0x18c>
 8004f88:	eb03 0444 	add.w	r4, r3, r4, lsl #1
    WrVal |= (uint16_t)pBuf[1] << 8;
 8004f8c:	f833 2b02 	ldrh.w	r2, [r3], #2
  for (count = n; count != 0U; count--)
 8004f90:	42a3      	cmp	r3, r4
    *pdwVal = (WrVal & 0xFFFFU);
 8004f92:	f82c 2b04 	strh.w	r2, [ip], #4
  for (count = n; count != 0U; count--)
 8004f96:	d1f9      	bne.n	8004f8c <USB_EPStartXfer+0x348>
 8004f98:	e71a      	b.n	8004dd0 <USB_EPStartXfer+0x18c>
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8004f9a:	b2a5      	uxth	r5, r4
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8004f9c:	462c      	mov	r4, r5
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 8004f9e:	f830 2026 	ldrh.w	r2, [r0, r6, lsl #2]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8004fa2:	3401      	adds	r4, #1
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 8004fa4:	f422 42e2 	bic.w	r2, r2, #28928	@ 0x7100
 8004fa8:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8004fac:	0412      	lsls	r2, r2, #16
 8004fae:	0c12      	lsrs	r2, r2, #16
 8004fb0:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004fb4:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8004fb8:	f820 2026 	strh.w	r2, [r0, r6, lsl #2]
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8004fbc:	f8b0 2050 	ldrh.w	r2, [r0, #80]	@ 0x50
  for (count = n; count != 0U; count--)
 8004fc0:	0864      	lsrs	r4, r4, #1
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8004fc2:	b292      	uxth	r2, r2
 8004fc4:	445a      	add	r2, fp
 8004fc6:	f822 500e 	strh.w	r5, [r2, lr]
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8004fca:	890a      	ldrh	r2, [r1, #8]
 8004fcc:	eb0c 0242 	add.w	r2, ip, r2, lsl #1
  for (count = n; count != 0U; count--)
 8004fd0:	f43f aefe 	beq.w	8004dd0 <USB_EPStartXfer+0x18c>
 8004fd4:	eb02 0584 	add.w	r5, r2, r4, lsl #2
    WrVal |= (uint16_t)pBuf[1] << 8;
 8004fd8:	f833 4b02 	ldrh.w	r4, [r3], #2
    *pdwVal = (WrVal & 0xFFFFU);
 8004fdc:	f822 4b04 	strh.w	r4, [r2], #4
  for (count = n; count != 0U; count--)
 8004fe0:	42aa      	cmp	r2, r5
 8004fe2:	d1f9      	bne.n	8004fd8 <USB_EPStartXfer+0x394>
 8004fe4:	e6f4      	b.n	8004dd0 <USB_EPStartXfer+0x18c>
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8004fe6:	096c      	lsrs	r4, r5, #5
 8004fe8:	06ef      	lsls	r7, r5, #27
 8004fea:	bf08      	it	eq
 8004fec:	f104 34ff 	addeq.w	r4, r4, #4294967295	@ 0xffffffff
 8004ff0:	5a9d      	ldrh	r5, [r3, r2]
 8004ff2:	02a4      	lsls	r4, r4, #10
 8004ff4:	b2a4      	uxth	r4, r4
 8004ff6:	b2ad      	uxth	r5, r5
 8004ff8:	4325      	orrs	r5, r4
 8004ffa:	f445 4500 	orr.w	r5, r5, #32768	@ 0x8000
 8004ffe:	529d      	strh	r5, [r3, r2]
 8005000:	f8b0 5050 	ldrh.w	r5, [r0, #80]	@ 0x50
 8005004:	b2ad      	uxth	r5, r5
 8005006:	4435      	add	r5, r6
 8005008:	5aab      	ldrh	r3, [r5, r2]
 800500a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800500e:	52ab      	strh	r3, [r5, r2]
 8005010:	5aab      	ldrh	r3, [r5, r2]
 8005012:	4323      	orrs	r3, r4
 8005014:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005018:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800501c:	b29b      	uxth	r3, r3
 800501e:	52ab      	strh	r3, [r5, r2]
 8005020:	e728      	b.n	8004e74 <USB_EPStartXfer+0x230>
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8005022:	0954      	lsrs	r4, r2, #5
 8005024:	06d7      	lsls	r7, r2, #27
 8005026:	bf08      	it	eq
 8005028:	f104 34ff 	addeq.w	r4, r4, #4294967295	@ 0xffffffff
 800502c:	02a2      	lsls	r2, r4, #10
 800502e:	5aec      	ldrh	r4, [r5, r3]
 8005030:	b292      	uxth	r2, r2
 8005032:	b2a4      	uxth	r4, r4
 8005034:	4314      	orrs	r4, r2
 8005036:	f444 4400 	orr.w	r4, r4, #32768	@ 0x8000
 800503a:	52ec      	strh	r4, [r5, r3]
 800503c:	f8b0 4050 	ldrh.w	r4, [r0, #80]	@ 0x50
 8005040:	b2a4      	uxth	r4, r4
 8005042:	4434      	add	r4, r6
 8005044:	5ae5      	ldrh	r5, [r4, r3]
 8005046:	f3c5 0509 	ubfx	r5, r5, #0, #10
 800504a:	52e5      	strh	r5, [r4, r3]
 800504c:	5ae5      	ldrh	r5, [r4, r3]
 800504e:	432a      	orrs	r2, r5
 8005050:	ea6f 4242 	mvn.w	r2, r2, lsl #17
 8005054:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 8005058:	b292      	uxth	r2, r2
 800505a:	52e2      	strh	r2, [r4, r3]
 800505c:	e657      	b.n	8004d0e <USB_EPStartXfer+0xca>
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800505e:	445f      	add	r7, fp
 8005060:	f827 900e 	strh.w	r9, [r7, lr]
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8005064:	f8b1 8008 	ldrh.w	r8, [r1, #8]
 8005068:	eb0c 0848 	add.w	r8, ip, r8, lsl #1
  for (count = n; count != 0U; count--)
 800506c:	b156      	cbz	r6, 8005084 <USB_EPStartXfer+0x440>
  uint8_t *pBuf = pbUsrBuf;
 800506e:	461f      	mov	r7, r3
 8005070:	eb03 0b46 	add.w	fp, r3, r6, lsl #1
 8005074:	9501      	str	r5, [sp, #4]
    WrVal |= (uint16_t)pBuf[1] << 8;
 8005076:	f837 5b02 	ldrh.w	r5, [r7], #2
  for (count = n; count != 0U; count--)
 800507a:	455f      	cmp	r7, fp
    *pdwVal = (WrVal & 0xFFFFU);
 800507c:	f828 5b04 	strh.w	r5, [r8], #4
  for (count = n; count != 0U; count--)
 8005080:	d1f9      	bne.n	8005076 <USB_EPStartXfer+0x432>
 8005082:	9d01      	ldr	r5, [sp, #4]
            ep->xfer_buff += len;
 8005084:	4413      	add	r3, r2
            if (ep->xfer_len_db > ep->maxpacket)
 8005086:	42a5      	cmp	r5, r4
            ep->xfer_buff += len;
 8005088:	614b      	str	r3, [r1, #20]
            if (ep->xfer_len_db > ep->maxpacket)
 800508a:	d24b      	bcs.n	8005124 <USB_EPStartXfer+0x4e0>
              ep->xfer_len_db -= len;
 800508c:	1aa4      	subs	r4, r4, r2
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800508e:	f8b0 2050 	ldrh.w	r2, [r0, #80]	@ 0x50
 8005092:	620c      	str	r4, [r1, #32]
 8005094:	b292      	uxth	r2, r2
 8005096:	4452      	add	r2, sl
 8005098:	f822 900e 	strh.w	r9, [r2, lr]
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800509c:	894a      	ldrh	r2, [r1, #10]
 800509e:	eb0c 0242 	add.w	r2, ip, r2, lsl #1
  for (count = n; count != 0U; count--)
 80050a2:	2e00      	cmp	r6, #0
 80050a4:	f43f ae94 	beq.w	8004dd0 <USB_EPStartXfer+0x18c>
 80050a8:	eb03 0646 	add.w	r6, r3, r6, lsl #1
    WrVal |= (uint16_t)pBuf[1] << 8;
 80050ac:	f833 4b02 	ldrh.w	r4, [r3], #2
  for (count = n; count != 0U; count--)
 80050b0:	42b3      	cmp	r3, r6
    *pdwVal = (WrVal & 0xFFFFU);
 80050b2:	f822 4b04 	strh.w	r4, [r2], #4
  for (count = n; count != 0U; count--)
 80050b6:	d1f9      	bne.n	80050ac <USB_EPStartXfer+0x468>
 80050b8:	e68a      	b.n	8004dd0 <USB_EPStartXfer+0x18c>
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 80050ba:	086c      	lsrs	r4, r5, #1
 80050bc:	07ed      	lsls	r5, r5, #31
 80050be:	bf48      	it	mi
 80050c0:	3401      	addmi	r4, #1
 80050c2:	5a9d      	ldrh	r5, [r3, r2]
 80050c4:	02a4      	lsls	r4, r4, #10
 80050c6:	b2a4      	uxth	r4, r4
 80050c8:	b2ad      	uxth	r5, r5
 80050ca:	4325      	orrs	r5, r4
 80050cc:	529d      	strh	r5, [r3, r2]
 80050ce:	f8b0 3050 	ldrh.w	r3, [r0, #80]	@ 0x50
 80050d2:	b29b      	uxth	r3, r3
 80050d4:	4433      	add	r3, r6
 80050d6:	5a9d      	ldrh	r5, [r3, r2]
 80050d8:	f3c5 0509 	ubfx	r5, r5, #0, #10
 80050dc:	529d      	strh	r5, [r3, r2]
 80050de:	5a9d      	ldrh	r5, [r3, r2]
 80050e0:	b2ad      	uxth	r5, r5
 80050e2:	432c      	orrs	r4, r5
 80050e4:	529c      	strh	r4, [r3, r2]
 80050e6:	e6c5      	b.n	8004e74 <USB_EPStartXfer+0x230>
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 80050e8:	0854      	lsrs	r4, r2, #1
 80050ea:	07d2      	lsls	r2, r2, #31
 80050ec:	bf48      	it	mi
 80050ee:	3401      	addmi	r4, #1
 80050f0:	02a2      	lsls	r2, r4, #10
 80050f2:	5aec      	ldrh	r4, [r5, r3]
 80050f4:	b292      	uxth	r2, r2
 80050f6:	b2a4      	uxth	r4, r4
 80050f8:	4314      	orrs	r4, r2
 80050fa:	52ec      	strh	r4, [r5, r3]
 80050fc:	f8b0 4050 	ldrh.w	r4, [r0, #80]	@ 0x50
 8005100:	b2a4      	uxth	r4, r4
 8005102:	4434      	add	r4, r6
 8005104:	5ae5      	ldrh	r5, [r4, r3]
 8005106:	f3c5 0509 	ubfx	r5, r5, #0, #10
 800510a:	52e5      	strh	r5, [r4, r3]
 800510c:	5ae5      	ldrh	r5, [r4, r3]
 800510e:	b2ad      	uxth	r5, r5
 8005110:	432a      	orrs	r2, r5
 8005112:	52e2      	strh	r2, [r4, r3]
 8005114:	e5fb      	b.n	8004d0e <USB_EPStartXfer+0xca>
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8005116:	b2a6      	uxth	r6, r4
 8005118:	3601      	adds	r6, #1
              ep->xfer_len_db = 0U;
 800511a:	2200      	movs	r2, #0
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800511c:	fa1f f984 	uxth.w	r9, r4
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8005120:	0876      	lsrs	r6, r6, #1
 8005122:	e710      	b.n	8004f46 <USB_EPStartXfer+0x302>
 8005124:	b2a6      	uxth	r6, r4
 8005126:	3601      	adds	r6, #1
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8005128:	fa1f f984 	uxth.w	r9, r4
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800512c:	0876      	lsrs	r6, r6, #1
              ep->xfer_len_db = 0U;
 800512e:	2400      	movs	r4, #0
 8005130:	e7ad      	b.n	800508e <USB_EPStartXfer+0x44a>
 8005132:	bf00      	nop

08005134 <USB_EPSetStall>:
  if (ep->is_in != 0U)
 8005134:	784b      	ldrb	r3, [r1, #1]
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8005136:	780a      	ldrb	r2, [r1, #0]
  if (ep->is_in != 0U)
 8005138:	b18b      	cbz	r3, 800515e <USB_EPSetStall+0x2a>
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 800513a:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800513e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005142:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005146:	041b      	lsls	r3, r3, #16
 8005148:	0c1b      	lsrs	r3, r3, #16
 800514a:	f083 0310 	eor.w	r3, r3, #16
 800514e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005152:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005156:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
}
 800515a:	2000      	movs	r0, #0
 800515c:	4770      	bx	lr
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 800515e:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8005162:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005166:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800516a:	041b      	lsls	r3, r3, #16
 800516c:	0c1b      	lsrs	r3, r3, #16
 800516e:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8005172:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005176:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800517a:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
}
 800517e:	2000      	movs	r0, #0
 8005180:	4770      	bx	lr
 8005182:	bf00      	nop

08005184 <USB_EPClearStall>:
  if (ep->doublebuffer == 0U)
 8005184:	7b0b      	ldrb	r3, [r1, #12]
 8005186:	bb3b      	cbnz	r3, 80051d8 <USB_EPClearStall+0x54>
    if (ep->is_in != 0U)
 8005188:	784b      	ldrb	r3, [r1, #1]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800518a:	780a      	ldrb	r2, [r1, #0]
    if (ep->is_in != 0U)
 800518c:	b333      	cbz	r3, 80051dc <USB_EPClearStall+0x58>
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800518e:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8005192:	065b      	lsls	r3, r3, #25
 8005194:	d50d      	bpl.n	80051b2 <USB_EPClearStall+0x2e>
 8005196:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800519a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800519e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80051a2:	041b      	lsls	r3, r3, #16
 80051a4:	0c1b      	lsrs	r3, r3, #16
 80051a6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80051aa:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80051ae:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      if (ep->type != EP_TYPE_ISOC)
 80051b2:	78cb      	ldrb	r3, [r1, #3]
 80051b4:	2b01      	cmp	r3, #1
 80051b6:	d00f      	beq.n	80051d8 <USB_EPClearStall+0x54>
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80051b8:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80051bc:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80051c0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80051c4:	041b      	lsls	r3, r3, #16
 80051c6:	0c1b      	lsrs	r3, r3, #16
 80051c8:	f083 0320 	eor.w	r3, r3, #32
 80051cc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80051d0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80051d4:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
}
 80051d8:	2000      	movs	r0, #0
 80051da:	4770      	bx	lr
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80051dc:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80051e0:	045b      	lsls	r3, r3, #17
 80051e2:	d50d      	bpl.n	8005200 <USB_EPClearStall+0x7c>
 80051e4:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80051e8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80051ec:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80051f0:	041b      	lsls	r3, r3, #16
 80051f2:	0c1b      	lsrs	r3, r3, #16
 80051f4:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80051f8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80051fc:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8005200:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8005204:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005208:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800520c:	041b      	lsls	r3, r3, #16
 800520e:	0c1b      	lsrs	r3, r3, #16
 8005210:	f483 5340 	eor.w	r3, r3, #12288	@ 0x3000
 8005214:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005218:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800521c:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
}
 8005220:	2000      	movs	r0, #0
 8005222:	4770      	bx	lr

08005224 <USB_SetDevAddress>:
  if (address == 0U)
 8005224:	b911      	cbnz	r1, 800522c <USB_SetDevAddress+0x8>
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8005226:	2380      	movs	r3, #128	@ 0x80
 8005228:	f8a0 304c 	strh.w	r3, [r0, #76]	@ 0x4c
}
 800522c:	2000      	movs	r0, #0
 800522e:	4770      	bx	lr

08005230 <USB_DevConnect>:
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
 8005230:	2000      	movs	r0, #0
 8005232:	4770      	bx	lr

08005234 <USB_DevDisconnect>:
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
 8005234:	2000      	movs	r0, #0
 8005236:	4770      	bx	lr

08005238 <USB_ReadInterrupts>:
  tmpreg = USBx->ISTR;
 8005238:	f8b0 0044 	ldrh.w	r0, [r0, #68]	@ 0x44
}
 800523c:	b280      	uxth	r0, r0
 800523e:	4770      	bx	lr

08005240 <USB_EP0_OutStart>:
}
 8005240:	2000      	movs	r0, #0
 8005242:	4770      	bx	lr

08005244 <USB_WritePMA>:
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8005244:	3301      	adds	r3, #1
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8005246:	eb00 0042 	add.w	r0, r0, r2, lsl #1
  for (count = n; count != 0U; count--)
 800524a:	085b      	lsrs	r3, r3, #1
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800524c:	f500 6080 	add.w	r0, r0, #1024	@ 0x400
  for (count = n; count != 0U; count--)
 8005250:	d007      	beq.n	8005262 <USB_WritePMA+0x1e>
 8005252:	eb00 0283 	add.w	r2, r0, r3, lsl #2
    WrVal |= (uint16_t)pBuf[1] << 8;
 8005256:	f831 3b02 	ldrh.w	r3, [r1], #2
    *pdwVal = (WrVal & 0xFFFFU);
 800525a:	f820 3b04 	strh.w	r3, [r0], #4
  for (count = n; count != 0U; count--)
 800525e:	4282      	cmp	r2, r0
 8005260:	d1f9      	bne.n	8005256 <USB_WritePMA+0x12>
#endif /* PMA_ACCESS */

    pBuf++;
    pBuf++;
  }
}
 8005262:	4770      	bx	lr

08005264 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8005264:	b570      	push	{r4, r5, r6, lr}
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8005266:	eb00 0042 	add.w	r0, r0, r2, lsl #1

  for (count = n; count != 0U; count--)
 800526a:	085e      	lsrs	r6, r3, #1
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800526c:	f500 6580 	add.w	r5, r0, #1024	@ 0x400
  for (count = n; count != 0U; count--)
 8005270:	d014      	beq.n	800529c <USB_ReadPMA+0x38>
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8005272:	4628      	mov	r0, r5
  for (count = n; count != 0U; count--)
 8005274:	46b6      	mov	lr, r6
 8005276:	f101 0c02 	add.w	ip, r1, #2
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 800527a:	f830 2b04 	ldrh.w	r2, [r0], #4
  for (count = n; count != 0U; count--)
 800527e:	f10c 0c02 	add.w	ip, ip, #2
    RdVal = *(__IO uint16_t *)pdwVal;
 8005282:	b292      	uxth	r2, r2
    pdwVal++;
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
    pBuf++;
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 8005284:	0a14      	lsrs	r4, r2, #8
  for (count = n; count != 0U; count--)
 8005286:	f1be 0e01 	subs.w	lr, lr, #1
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 800528a:	f80c 2c04 	strb.w	r2, [ip, #-4]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 800528e:	f80c 4c03 	strb.w	r4, [ip, #-3]
  for (count = n; count != 0U; count--)
 8005292:	d1f2      	bne.n	800527a <USB_ReadPMA+0x16>
    pBuf++;
 8005294:	eb01 0146 	add.w	r1, r1, r6, lsl #1

#if PMA_ACCESS > 1U
    pdwVal++;
 8005298:	eb05 0586 	add.w	r5, r5, r6, lsl #2
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 800529c:	07db      	lsls	r3, r3, #31
  {
    RdVal = *pdwVal;
 800529e:	bf44      	itt	mi
 80052a0:	882b      	ldrhmi	r3, [r5, #0]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 80052a2:	700b      	strbmi	r3, [r1, #0]
  }
}
 80052a4:	bd70      	pop	{r4, r5, r6, pc}
 80052a6:	bf00      	nop

080052a8 <USBD_CDC_EP0_RxReady>:
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 80052a8:	f8d0 32bc 	ldr.w	r3, [r0, #700]	@ 0x2bc
 80052ac:	b183      	cbz	r3, 80052d0 <USBD_CDC_EP0_RxReady+0x28>
{
 80052ae:	b510      	push	{r4, lr}
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80052b0:	f8d0 42b8 	ldr.w	r4, [r0, #696]	@ 0x2b8
  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 80052b4:	f894 0200 	ldrb.w	r0, [r4, #512]	@ 0x200
 80052b8:	28ff      	cmp	r0, #255	@ 0xff
 80052ba:	d007      	beq.n	80052cc <USBD_CDC_EP0_RxReady+0x24>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 80052bc:	689b      	ldr	r3, [r3, #8]
 80052be:	4621      	mov	r1, r4
 80052c0:	f894 2201 	ldrb.w	r2, [r4, #513]	@ 0x201
 80052c4:	4798      	blx	r3
                                                      (uint8_t *)(void *)hcdc->data,
                                                      (uint16_t)hcdc->CmdLength);
    hcdc->CmdOpCode = 0xFFU;
 80052c6:	23ff      	movs	r3, #255	@ 0xff
 80052c8:	f884 3200 	strb.w	r3, [r4, #512]	@ 0x200

  }
  return USBD_OK;
}
 80052cc:	2000      	movs	r0, #0
 80052ce:	bd10      	pop	{r4, pc}
 80052d0:	2000      	movs	r0, #0
 80052d2:	4770      	bx	lr

080052d4 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 80052d4:	4603      	mov	r3, r0
  *length = sizeof(USBD_CDC_CfgFSDesc);
 80052d6:	2243      	movs	r2, #67	@ 0x43
  return USBD_CDC_CfgFSDesc;
}
 80052d8:	4801      	ldr	r0, [pc, #4]	@ (80052e0 <USBD_CDC_GetFSCfgDesc+0xc>)
  *length = sizeof(USBD_CDC_CfgFSDesc);
 80052da:	801a      	strh	r2, [r3, #0]
}
 80052dc:	4770      	bx	lr
 80052de:	bf00      	nop
 80052e0:	20000050 	.word	0x20000050

080052e4 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 80052e4:	4603      	mov	r3, r0
  *length = sizeof(USBD_CDC_CfgHSDesc);
 80052e6:	2243      	movs	r2, #67	@ 0x43
  return USBD_CDC_CfgHSDesc;
}
 80052e8:	4801      	ldr	r0, [pc, #4]	@ (80052f0 <USBD_CDC_GetHSCfgDesc+0xc>)
  *length = sizeof(USBD_CDC_CfgHSDesc);
 80052ea:	801a      	strh	r2, [r3, #0]
}
 80052ec:	4770      	bx	lr
 80052ee:	bf00      	nop
 80052f0:	20000094 	.word	0x20000094

080052f4 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80052f4:	4603      	mov	r3, r0
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 80052f6:	2243      	movs	r2, #67	@ 0x43
  return USBD_CDC_OtherSpeedCfgDesc;
}
 80052f8:	4801      	ldr	r0, [pc, #4]	@ (8005300 <USBD_CDC_GetOtherSpeedCfgDesc+0xc>)
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 80052fa:	801a      	strh	r2, [r3, #0]
}
 80052fc:	4770      	bx	lr
 80052fe:	bf00      	nop
 8005300:	2000000c 	.word	0x2000000c

08005304 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8005304:	4603      	mov	r3, r0
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 8005306:	220a      	movs	r2, #10
  return USBD_CDC_DeviceQualifierDesc;
}
 8005308:	4801      	ldr	r0, [pc, #4]	@ (8005310 <USBD_CDC_GetDeviceQualifierDescriptor+0xc>)
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 800530a:	801a      	strh	r2, [r3, #0]
}
 800530c:	4770      	bx	lr
 800530e:	bf00      	nop
 8005310:	20000110 	.word	0x20000110

08005314 <USBD_CDC_DataOut>:
{
 8005314:	b538      	push	{r3, r4, r5, lr}
 8005316:	4604      	mov	r4, r0
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8005318:	f8d0 52b8 	ldr.w	r5, [r0, #696]	@ 0x2b8
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800531c:	f000 fff4 	bl	8006308 <USBD_LL_GetRxDataSize>
  if (pdev->pClassData != NULL)
 8005320:	f8d4 32b8 	ldr.w	r3, [r4, #696]	@ 0x2b8
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8005324:	f8c5 020c 	str.w	r0, [r5, #524]	@ 0x20c
  if (pdev->pClassData != NULL)
 8005328:	b14b      	cbz	r3, 800533e <USBD_CDC_DataOut+0x2a>
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800532a:	f8d4 32bc 	ldr.w	r3, [r4, #700]	@ 0x2bc
 800532e:	f8d5 0204 	ldr.w	r0, [r5, #516]	@ 0x204
 8005332:	68db      	ldr	r3, [r3, #12]
 8005334:	f505 7103 	add.w	r1, r5, #524	@ 0x20c
 8005338:	4798      	blx	r3
    return USBD_OK;
 800533a:	2000      	movs	r0, #0
}
 800533c:	bd38      	pop	{r3, r4, r5, pc}
    return USBD_FAIL;
 800533e:	2002      	movs	r0, #2
}
 8005340:	bd38      	pop	{r3, r4, r5, pc}
 8005342:	bf00      	nop

08005344 <USBD_CDC_DataIn>:
{
 8005344:	b538      	push	{r3, r4, r5, lr}
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8005346:	f8d0 42b8 	ldr.w	r4, [r0, #696]	@ 0x2b8
  if (pdev->pClassData != NULL)
 800534a:	b1e4      	cbz	r4, 8005386 <USBD_CDC_DataIn+0x42>
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800534c:	eb01 0381 	add.w	r3, r1, r1, lsl #2
 8005350:	eb00 0c83 	add.w	ip, r0, r3, lsl #2
 8005354:	f8dc 201c 	ldr.w	r2, [ip, #28]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8005358:	f8d0 52c0 	ldr.w	r5, [r0, #704]	@ 0x2c0
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800535c:	b922      	cbnz	r2, 8005368 <USBD_CDC_DataIn+0x24>
      hcdc->TxState = 0U;
 800535e:	2300      	movs	r3, #0
 8005360:	f8c4 3214 	str.w	r3, [r4, #532]	@ 0x214
    return USBD_OK;
 8005364:	2000      	movs	r0, #0
}
 8005366:	bd38      	pop	{r3, r4, r5, pc}
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8005368:	eb05 05c3 	add.w	r5, r5, r3, lsl #3
 800536c:	6a2b      	ldr	r3, [r5, #32]
 800536e:	fbb2 f5f3 	udiv	r5, r2, r3
 8005372:	fb03 2315 	mls	r3, r3, r5, r2
 8005376:	2b00      	cmp	r3, #0
 8005378:	d1f1      	bne.n	800535e <USBD_CDC_DataIn+0x1a>
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800537a:	461a      	mov	r2, r3
      pdev->ep_in[epnum].total_length = 0U;
 800537c:	f8cc 301c 	str.w	r3, [ip, #28]
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8005380:	f000 ffaa 	bl	80062d8 <USBD_LL_Transmit>
 8005384:	e7ee      	b.n	8005364 <USBD_CDC_DataIn+0x20>
    return USBD_FAIL;
 8005386:	2002      	movs	r0, #2
}
 8005388:	bd38      	pop	{r3, r4, r5, pc}
 800538a:	bf00      	nop

0800538c <USBD_CDC_Setup>:
  uint8_t ifalt = 0U;
 800538c:	2300      	movs	r3, #0
{
 800538e:	b570      	push	{r4, r5, r6, lr}
 8005390:	b082      	sub	sp, #8
  uint8_t ifalt = 0U;
 8005392:	f88d 3005 	strb.w	r3, [sp, #5]
  uint16_t status_info = 0U;
 8005396:	f8ad 3006 	strh.w	r3, [sp, #6]
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800539a:	780b      	ldrb	r3, [r1, #0]
{
 800539c:	460c      	mov	r4, r1
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800539e:	f013 0260 	ands.w	r2, r3, #96	@ 0x60
{
 80053a2:	4605      	mov	r5, r0
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80053a4:	f8d0 62b8 	ldr.w	r6, [r0, #696]	@ 0x2b8
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80053a8:	d013      	beq.n	80053d2 <USBD_CDC_Setup+0x46>
 80053aa:	2a20      	cmp	r2, #32
 80053ac:	d117      	bne.n	80053de <USBD_CDC_Setup+0x52>
      if (req->wLength)
 80053ae:	88ca      	ldrh	r2, [r1, #6]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80053b0:	f891 c001 	ldrb.w	ip, [r1, #1]
      if (req->wLength)
 80053b4:	b1d2      	cbz	r2, 80053ec <USBD_CDC_Setup+0x60>
        if (req->bmRequest & 0x80U)
 80053b6:	061b      	lsls	r3, r3, #24
 80053b8:	d538      	bpl.n	800542c <USBD_CDC_Setup+0xa0>
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80053ba:	f8d5 32bc 	ldr.w	r3, [r5, #700]	@ 0x2bc
 80053be:	4631      	mov	r1, r6
 80053c0:	4660      	mov	r0, ip
 80053c2:	689b      	ldr	r3, [r3, #8]
 80053c4:	4798      	blx	r3
          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 80053c6:	4631      	mov	r1, r6
 80053c8:	4628      	mov	r0, r5
 80053ca:	88e2      	ldrh	r2, [r4, #6]
 80053cc:	f000 fcc6 	bl	8005d5c <USBD_CtlSendData>
 80053d0:	e011      	b.n	80053f6 <USBD_CDC_Setup+0x6a>
      switch (req->bRequest)
 80053d2:	784b      	ldrb	r3, [r1, #1]
 80053d4:	2b0a      	cmp	r3, #10
 80053d6:	d01a      	beq.n	800540e <USBD_CDC_Setup+0x82>
 80053d8:	2b0b      	cmp	r3, #11
 80053da:	d022      	beq.n	8005422 <USBD_CDC_Setup+0x96>
 80053dc:	b16b      	cbz	r3, 80053fa <USBD_CDC_Setup+0x6e>
          USBD_CtlError(pdev, req);
 80053de:	4628      	mov	r0, r5
 80053e0:	4621      	mov	r1, r4
 80053e2:	f000 fc87 	bl	8005cf4 <USBD_CtlError>
            ret = USBD_FAIL;
 80053e6:	2002      	movs	r0, #2
}
 80053e8:	b002      	add	sp, #8
 80053ea:	bd70      	pop	{r4, r5, r6, pc}
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80053ec:	f8d0 32bc 	ldr.w	r3, [r0, #700]	@ 0x2bc
 80053f0:	4660      	mov	r0, ip
 80053f2:	689b      	ldr	r3, [r3, #8]
 80053f4:	4798      	blx	r3
  uint8_t ret = USBD_OK;
 80053f6:	2000      	movs	r0, #0
 80053f8:	e7f6      	b.n	80053e8 <USBD_CDC_Setup+0x5c>
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80053fa:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 80053fe:	2b03      	cmp	r3, #3
 8005400:	d1ed      	bne.n	80053de <USBD_CDC_Setup+0x52>
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 8005402:	2202      	movs	r2, #2
 8005404:	f10d 0106 	add.w	r1, sp, #6
 8005408:	f000 fca8 	bl	8005d5c <USBD_CtlSendData>
 800540c:	e7f3      	b.n	80053f6 <USBD_CDC_Setup+0x6a>
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800540e:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 8005412:	2b03      	cmp	r3, #3
 8005414:	d1e3      	bne.n	80053de <USBD_CDC_Setup+0x52>
            USBD_CtlSendData(pdev, &ifalt, 1U);
 8005416:	2201      	movs	r2, #1
 8005418:	f10d 0105 	add.w	r1, sp, #5
 800541c:	f000 fc9e 	bl	8005d5c <USBD_CtlSendData>
 8005420:	e7e9      	b.n	80053f6 <USBD_CDC_Setup+0x6a>
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8005422:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 8005426:	2b03      	cmp	r3, #3
 8005428:	d0e5      	beq.n	80053f6 <USBD_CDC_Setup+0x6a>
 800542a:	e7d8      	b.n	80053de <USBD_CDC_Setup+0x52>
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 800542c:	4631      	mov	r1, r6
          hcdc->CmdOpCode = req->bRequest;
 800542e:	f886 c200 	strb.w	ip, [r6, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8005432:	f886 2201 	strb.w	r2, [r6, #513]	@ 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8005436:	f000 fca9 	bl	8005d8c <USBD_CtlPrepareRx>
 800543a:	e7dc      	b.n	80053f6 <USBD_CDC_Setup+0x6a>

0800543c <USBD_CDC_DeInit>:
{
 800543c:	b538      	push	{r3, r4, r5, lr}
 800543e:	4604      	mov	r4, r0
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8005440:	2500      	movs	r5, #0
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8005442:	2181      	movs	r1, #129	@ 0x81
 8005444:	f000 ff04 	bl	8006250 <USBD_LL_CloseEP>
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8005448:	2101      	movs	r1, #1
 800544a:	4620      	mov	r0, r4
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800544c:	62e5      	str	r5, [r4, #44]	@ 0x2c
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800544e:	f000 feff 	bl	8006250 <USBD_LL_CloseEP>
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8005452:	2182      	movs	r1, #130	@ 0x82
 8005454:	4620      	mov	r0, r4
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8005456:	f8c4 516c 	str.w	r5, [r4, #364]	@ 0x16c
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800545a:	f000 fef9 	bl	8006250 <USBD_LL_CloseEP>
  if (pdev->pClassData != NULL)
 800545e:	f8d4 32b8 	ldr.w	r3, [r4, #696]	@ 0x2b8
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8005462:	6425      	str	r5, [r4, #64]	@ 0x40
  if (pdev->pClassData != NULL)
 8005464:	b14b      	cbz	r3, 800547a <USBD_CDC_DeInit+0x3e>
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8005466:	f8d4 32bc 	ldr.w	r3, [r4, #700]	@ 0x2bc
 800546a:	685b      	ldr	r3, [r3, #4]
 800546c:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 800546e:	f8d4 02b8 	ldr.w	r0, [r4, #696]	@ 0x2b8
 8005472:	f000 ff51 	bl	8006318 <USBD_static_free>
    pdev->pClassData = NULL;
 8005476:	f8c4 52b8 	str.w	r5, [r4, #696]	@ 0x2b8
}
 800547a:	2000      	movs	r0, #0
 800547c:	bd38      	pop	{r3, r4, r5, pc}
 800547e:	bf00      	nop

08005480 <USBD_CDC_Init>:
{
 8005480:	b570      	push	{r4, r5, r6, lr}
  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005482:	7c03      	ldrb	r3, [r0, #16]
{
 8005484:	4604      	mov	r4, r0
  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005486:	bb9b      	cbnz	r3, 80054f0 <USBD_CDC_Init+0x70>
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8005488:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800548c:	2202      	movs	r2, #2
 800548e:	2181      	movs	r1, #129	@ 0x81
 8005490:	f000 fed0 	bl	8006234 <USBD_LL_OpenEP>
    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8005494:	2101      	movs	r1, #1
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8005496:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800549a:	2202      	movs	r2, #2
 800549c:	4620      	mov	r0, r4
    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800549e:	62e1      	str	r1, [r4, #44]	@ 0x2c
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80054a0:	f000 fec8 	bl	8006234 <USBD_LL_OpenEP>
    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80054a4:	2601      	movs	r6, #1
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80054a6:	2308      	movs	r3, #8
 80054a8:	2203      	movs	r2, #3
 80054aa:	2182      	movs	r1, #130	@ 0x82
 80054ac:	4620      	mov	r0, r4
    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80054ae:	f8c4 616c 	str.w	r6, [r4, #364]	@ 0x16c
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80054b2:	f000 febf 	bl	8006234 <USBD_LL_OpenEP>
  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 80054b6:	f44f 7007 	mov.w	r0, #540	@ 0x21c
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 80054ba:	6426      	str	r6, [r4, #64]	@ 0x40
  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 80054bc:	f000 ff28 	bl	8006310 <USBD_static_malloc>
 80054c0:	4605      	mov	r5, r0
 80054c2:	f8c4 02b8 	str.w	r0, [r4, #696]	@ 0x2b8
  if (pdev->pClassData == NULL)
 80054c6:	b348      	cbz	r0, 800551c <USBD_CDC_Init+0x9c>
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 80054c8:	f8d4 32bc 	ldr.w	r3, [r4, #700]	@ 0x2bc
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	4798      	blx	r3
    hcdc->TxState = 0U;
 80054d0:	2300      	movs	r3, #0
 80054d2:	f8c5 3214 	str.w	r3, [r5, #532]	@ 0x214
    hcdc->RxState = 0U;
 80054d6:	f8c5 3218 	str.w	r3, [r5, #536]	@ 0x218
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 80054da:	7c23      	ldrb	r3, [r4, #16]
 80054dc:	b1ab      	cbz	r3, 800550a <USBD_CDC_Init+0x8a>
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80054de:	2340      	movs	r3, #64	@ 0x40
 80054e0:	4631      	mov	r1, r6
 80054e2:	4620      	mov	r0, r4
 80054e4:	f8d5 2204 	ldr.w	r2, [r5, #516]	@ 0x204
 80054e8:	f000 ff02 	bl	80062f0 <USBD_LL_PrepareReceive>
  uint8_t ret = 0U;
 80054ec:	2000      	movs	r0, #0
}
 80054ee:	bd70      	pop	{r4, r5, r6, pc}
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80054f0:	2340      	movs	r3, #64	@ 0x40
 80054f2:	2202      	movs	r2, #2
 80054f4:	2181      	movs	r1, #129	@ 0x81
 80054f6:	f000 fe9d 	bl	8006234 <USBD_LL_OpenEP>
    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80054fa:	2101      	movs	r1, #1
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80054fc:	2340      	movs	r3, #64	@ 0x40
 80054fe:	2202      	movs	r2, #2
 8005500:	4620      	mov	r0, r4
    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8005502:	62e1      	str	r1, [r4, #44]	@ 0x2c
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8005504:	f000 fe96 	bl	8006234 <USBD_LL_OpenEP>
    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8005508:	e7cc      	b.n	80054a4 <USBD_CDC_Init+0x24>
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800550a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800550e:	4631      	mov	r1, r6
 8005510:	4620      	mov	r0, r4
 8005512:	f8d5 2204 	ldr.w	r2, [r5, #516]	@ 0x204
 8005516:	f000 feeb 	bl	80062f0 <USBD_LL_PrepareReceive>
 800551a:	e7e7      	b.n	80054ec <USBD_CDC_Init+0x6c>
    ret = 1U;
 800551c:	4630      	mov	r0, r6
}
 800551e:	bd70      	pop	{r4, r5, r6, pc}

08005520 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 8005520:	4603      	mov	r3, r0
  uint8_t  ret = USBD_FAIL;

  if (fops != NULL)
 8005522:	b119      	cbz	r1, 800552c <USBD_CDC_RegisterInterface+0xc>
  {
    pdev->pUserData = fops;
    ret = USBD_OK;
 8005524:	2000      	movs	r0, #0
    pdev->pUserData = fops;
 8005526:	f8c3 12bc 	str.w	r1, [r3, #700]	@ 0x2bc
    ret = USBD_OK;
 800552a:	4770      	bx	lr
  uint8_t  ret = USBD_FAIL;
 800552c:	2002      	movs	r0, #2
  }

  return ret;
}
 800552e:	4770      	bx	lr

08005530 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 8005530:	4603      	mov	r3, r0
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8005532:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8

  hcdc->TxBuffer = pbuff;
  hcdc->TxLength = length;

  return USBD_OK;
}
 8005536:	2000      	movs	r0, #0
  hcdc->TxBuffer = pbuff;
 8005538:	f8c3 1208 	str.w	r1, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 800553c:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210
}
 8005540:	4770      	bx	lr
 8005542:	bf00      	nop

08005544 <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 8005544:	4603      	mov	r3, r0
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;

  hcdc->RxBuffer = pbuff;
 8005546:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8

  return USBD_OK;
}
 800554a:	2000      	movs	r0, #0
  hcdc->RxBuffer = pbuff;
 800554c:	f8c3 1204 	str.w	r1, [r3, #516]	@ 0x204
}
 8005550:	4770      	bx	lr
 8005552:	bf00      	nop

08005554 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8005554:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8005556:	f8d0 52b8 	ldr.w	r5, [r0, #696]	@ 0x2b8

  if (pdev->pClassData != NULL)
 800555a:	b195      	cbz	r5, 8005582 <USBD_CDC_TransmitPacket+0x2e>
  {
    if (hcdc->TxState == 0U)
 800555c:	f8d5 4214 	ldr.w	r4, [r5, #532]	@ 0x214
 8005560:	b10c      	cbz	r4, 8005566 <USBD_CDC_TransmitPacket+0x12>

      return USBD_OK;
    }
    else
    {
      return USBD_BUSY;
 8005562:	2001      	movs	r0, #1
  }
  else
  {
    return USBD_FAIL;
  }
}
 8005564:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      hcdc->TxState = 1U;
 8005566:	2701      	movs	r7, #1
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8005568:	f8d5 6210 	ldr.w	r6, [r5, #528]	@ 0x210
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 800556c:	f8d5 2208 	ldr.w	r2, [r5, #520]	@ 0x208
      hcdc->TxState = 1U;
 8005570:	f8c5 7214 	str.w	r7, [r5, #532]	@ 0x214
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8005574:	2181      	movs	r1, #129	@ 0x81
 8005576:	b2b3      	uxth	r3, r6
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8005578:	6306      	str	r6, [r0, #48]	@ 0x30
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 800557a:	f000 fead 	bl	80062d8 <USBD_LL_Transmit>
      return USBD_OK;
 800557e:	4620      	mov	r0, r4
}
 8005580:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return USBD_FAIL;
 8005582:	2002      	movs	r0, #2
}
 8005584:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005586:	bf00      	nop

08005588 <USBD_CDC_ReceivePacket>:
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8005588:	f8d0 22b8 	ldr.w	r2, [r0, #696]	@ 0x2b8

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 800558c:	b18a      	cbz	r2, 80055b2 <USBD_CDC_ReceivePacket+0x2a>
{
 800558e:	b508      	push	{r3, lr}
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005590:	7c03      	ldrb	r3, [r0, #16]
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8005592:	f8d2 2204 	ldr.w	r2, [r2, #516]	@ 0x204
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005596:	b12b      	cbz	r3, 80055a4 <USBD_CDC_ReceivePacket+0x1c>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8005598:	2340      	movs	r3, #64	@ 0x40
 800559a:	2101      	movs	r1, #1
 800559c:	f000 fea8 	bl	80062f0 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 80055a0:	2000      	movs	r0, #0
  }
  else
  {
    return USBD_FAIL;
  }
}
 80055a2:	bd08      	pop	{r3, pc}
      USBD_LL_PrepareReceive(pdev,
 80055a4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80055a8:	2101      	movs	r1, #1
 80055aa:	f000 fea1 	bl	80062f0 <USBD_LL_PrepareReceive>
    return USBD_OK;
 80055ae:	2000      	movs	r0, #0
}
 80055b0:	bd08      	pop	{r3, pc}
    return USBD_FAIL;
 80055b2:	2002      	movs	r0, #2
}
 80055b4:	4770      	bx	lr
 80055b6:	bf00      	nop

080055b8 <USBD_Init>:
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80055b8:	b188      	cbz	r0, 80055de <USBD_Init+0x26>
{
 80055ba:	b508      	push	{r3, lr}
#endif
    return USBD_FAIL;
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 80055bc:	f8d0 32b4 	ldr.w	r3, [r0, #692]	@ 0x2b4
 80055c0:	b113      	cbz	r3, 80055c8 <USBD_Init+0x10>
  {
    pdev->pClass = NULL;
 80055c2:	2300      	movs	r3, #0
 80055c4:	f8c0 32b4 	str.w	r3, [r0, #692]	@ 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80055c8:	b109      	cbz	r1, 80055ce <USBD_Init+0x16>
  {
    pdev->pDesc = pdesc;
 80055ca:	f8c0 12b0 	str.w	r1, [r0, #688]	@ 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80055ce:	2301      	movs	r3, #1
  pdev->id = id;
 80055d0:	7002      	strb	r2, [r0, #0]
  pdev->dev_state = USBD_STATE_DEFAULT;
 80055d2:	f880 329c 	strb.w	r3, [r0, #668]	@ 0x29c
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 80055d6:	f000 fddf 	bl	8006198 <USBD_LL_Init>

  return USBD_OK;
 80055da:	2000      	movs	r0, #0
}
 80055dc:	bd08      	pop	{r3, pc}
    return USBD_FAIL;
 80055de:	2002      	movs	r0, #2
}
 80055e0:	4770      	bx	lr
 80055e2:	bf00      	nop

080055e4 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80055e4:	4603      	mov	r3, r0
  USBD_StatusTypeDef status = USBD_OK;
  if (pclass != NULL)
 80055e6:	b119      	cbz	r1, 80055f0 <USBD_RegisterClass+0xc>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
    status = USBD_OK;
 80055e8:	2000      	movs	r0, #0
    pdev->pClass = pclass;
 80055ea:	f8c3 12b4 	str.w	r1, [r3, #692]	@ 0x2b4
    status = USBD_OK;
 80055ee:	4770      	bx	lr
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 80055f0:	2002      	movs	r0, #2
  }

  return status;
}
 80055f2:	4770      	bx	lr

080055f4 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 80055f4:	b508      	push	{r3, lr}
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 80055f6:	f000 fe11 	bl	800621c <USBD_LL_Start>

  return USBD_OK;
}
 80055fa:	2000      	movs	r0, #0
 80055fc:	bd08      	pop	{r3, pc}
 80055fe:	bf00      	nop

08005600 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8005600:	b508      	push	{r3, lr}
  USBD_StatusTypeDef ret = USBD_FAIL;

  if (pdev->pClass != NULL)
 8005602:	f8d0 32b4 	ldr.w	r3, [r0, #692]	@ 0x2b4
 8005606:	b133      	cbz	r3, 8005616 <USBD_SetClassConfig+0x16>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	4798      	blx	r3
 800560c:	3800      	subs	r0, #0
 800560e:	bf18      	it	ne
 8005610:	2001      	movne	r0, #1
 8005612:	0040      	lsls	r0, r0, #1
      ret = USBD_OK;
    }
  }

  return ret;
}
 8005614:	bd08      	pop	{r3, pc}
  USBD_StatusTypeDef ret = USBD_FAIL;
 8005616:	2002      	movs	r0, #2
}
 8005618:	bd08      	pop	{r3, pc}
 800561a:	bf00      	nop

0800561c <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800561c:	b508      	push	{r3, lr}
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 800561e:	f8d0 32b4 	ldr.w	r3, [r0, #692]	@ 0x2b4
 8005622:	685b      	ldr	r3, [r3, #4]
 8005624:	4798      	blx	r3

  return USBD_OK;
}
 8005626:	2000      	movs	r0, #0
 8005628:	bd08      	pop	{r3, pc}
 800562a:	bf00      	nop

0800562c <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800562c:	b538      	push	{r3, r4, r5, lr}
 800562e:	4604      	mov	r4, r0
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8005630:	f500 752a 	add.w	r5, r0, #680	@ 0x2a8
 8005634:	4628      	mov	r0, r5
 8005636:	f000 fb51 	bl	8005cdc <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800563a:	2201      	movs	r2, #1

  pdev->ep0_data_len = pdev->request.wLength;
 800563c:	f8b4 32ae 	ldrh.w	r3, [r4, #686]	@ 0x2ae

  switch (pdev->request.bmRequest & 0x1FU)
 8005640:	f894 12a8 	ldrb.w	r1, [r4, #680]	@ 0x2a8
  pdev->ep0_data_len = pdev->request.wLength;
 8005644:	f8c4 3298 	str.w	r3, [r4, #664]	@ 0x298
 8005648:	f001 031f 	and.w	r3, r1, #31
  switch (pdev->request.bmRequest & 0x1FU)
 800564c:	4293      	cmp	r3, r2
  pdev->ep0_state = USBD_EP0_SETUP;
 800564e:	f8c4 2294 	str.w	r2, [r4, #660]	@ 0x294
  switch (pdev->request.bmRequest & 0x1FU)
 8005652:	d009      	beq.n	8005668 <USBD_LL_SetupStage+0x3c>
 8005654:	2b02      	cmp	r3, #2
 8005656:	d013      	beq.n	8005680 <USBD_LL_SetupStage+0x54>
 8005658:	b163      	cbz	r3, 8005674 <USBD_LL_SetupStage+0x48>
    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
      break;

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800565a:	4620      	mov	r0, r4
 800565c:	f001 0180 	and.w	r1, r1, #128	@ 0x80
 8005660:	f000 fe02 	bl	8006268 <USBD_LL_StallEP>
      break;
  }

  return USBD_OK;
}
 8005664:	2000      	movs	r0, #0
 8005666:	bd38      	pop	{r3, r4, r5, pc}
      USBD_StdItfReq(pdev, &pdev->request);
 8005668:	4629      	mov	r1, r5
 800566a:	4620      	mov	r0, r4
 800566c:	f000 fa66 	bl	8005b3c <USBD_StdItfReq>
}
 8005670:	2000      	movs	r0, #0
 8005672:	bd38      	pop	{r3, r4, r5, pc}
      USBD_StdDevReq(pdev, &pdev->request);
 8005674:	4629      	mov	r1, r5
 8005676:	4620      	mov	r0, r4
 8005678:	f000 f8f0 	bl	800585c <USBD_StdDevReq>
}
 800567c:	2000      	movs	r0, #0
 800567e:	bd38      	pop	{r3, r4, r5, pc}
      USBD_StdEPReq(pdev, &pdev->request);
 8005680:	4629      	mov	r1, r5
 8005682:	4620      	mov	r0, r4
 8005684:	f000 fa8e 	bl	8005ba4 <USBD_StdEPReq>
}
 8005688:	2000      	movs	r0, #0
 800568a:	bd38      	pop	{r3, r4, r5, pc}

0800568c <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800568c:	b510      	push	{r4, lr}
 800568e:	4604      	mov	r4, r0
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8005690:	b959      	cbnz	r1, 80056aa <USBD_LL_DataOutStage+0x1e>
 8005692:	4694      	mov	ip, r2
  {
    pep = &pdev->ep_out[0];

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8005694:	f8d0 2294 	ldr.w	r2, [r0, #660]	@ 0x294
 8005698:	2a03      	cmp	r2, #3
 800569a:	d013      	beq.n	80056c4 <USBD_LL_DataOutStage+0x38>
        USBD_CtlSendStatus(pdev);
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 800569c:	2a05      	cmp	r2, #5
 800569e:	d10d      	bne.n	80056bc <USBD_LL_DataOutStage+0x30>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 80056a0:	f8c4 1294 	str.w	r1, [r4, #660]	@ 0x294
        USBD_LL_StallEP(pdev, 0U);
 80056a4:	f000 fde0 	bl	8006268 <USBD_LL_StallEP>
 80056a8:	e008      	b.n	80056bc <USBD_LL_DataOutStage+0x30>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 80056aa:	f8d0 32b4 	ldr.w	r3, [r0, #692]	@ 0x2b4
 80056ae:	699b      	ldr	r3, [r3, #24]
 80056b0:	b133      	cbz	r3, 80056c0 <USBD_LL_DataOutStage+0x34>
 80056b2:	f890 229c 	ldrb.w	r2, [r0, #668]	@ 0x29c
 80056b6:	2a03      	cmp	r2, #3
 80056b8:	d102      	bne.n	80056c0 <USBD_LL_DataOutStage+0x34>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
  {
    pdev->pClass->DataOut(pdev, epnum);
 80056ba:	4798      	blx	r3
  {
    /* should never be in this condition */
    return USBD_FAIL;
  }

  return USBD_OK;
 80056bc:	2000      	movs	r0, #0
}
 80056be:	bd10      	pop	{r4, pc}
    return USBD_FAIL;
 80056c0:	2002      	movs	r0, #2
}
 80056c2:	bd10      	pop	{r4, pc}
      if (pep->rem_length > pep->maxpacket)
 80056c4:	e9d0 3258 	ldrd	r3, r2, [r0, #352]	@ 0x160
 80056c8:	4293      	cmp	r3, r2
 80056ca:	d90a      	bls.n	80056e2 <USBD_LL_DataOutStage+0x56>
        pep->rem_length -= pep->maxpacket;
 80056cc:	1a9b      	subs	r3, r3, r2
        USBD_CtlContinueRx(pdev, pdata,
 80056ce:	429a      	cmp	r2, r3
 80056d0:	4661      	mov	r1, ip
        pep->rem_length -= pep->maxpacket;
 80056d2:	f8c0 3160 	str.w	r3, [r0, #352]	@ 0x160
        USBD_CtlContinueRx(pdev, pdata,
 80056d6:	bf8c      	ite	hi
 80056d8:	b29a      	uxthhi	r2, r3
 80056da:	b292      	uxthls	r2, r2
 80056dc:	f000 fb64 	bl	8005da8 <USBD_CtlContinueRx>
 80056e0:	e7ec      	b.n	80056bc <USBD_LL_DataOutStage+0x30>
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 80056e2:	f8d0 32b4 	ldr.w	r3, [r0, #692]	@ 0x2b4
 80056e6:	691b      	ldr	r3, [r3, #16]
 80056e8:	b11b      	cbz	r3, 80056f2 <USBD_LL_DataOutStage+0x66>
 80056ea:	f890 229c 	ldrb.w	r2, [r0, #668]	@ 0x29c
 80056ee:	2a03      	cmp	r2, #3
 80056f0:	d003      	beq.n	80056fa <USBD_LL_DataOutStage+0x6e>
        USBD_CtlSendStatus(pdev);
 80056f2:	4620      	mov	r0, r4
 80056f4:	f000 fb62 	bl	8005dbc <USBD_CtlSendStatus>
 80056f8:	e7e0      	b.n	80056bc <USBD_LL_DataOutStage+0x30>
          pdev->pClass->EP0_RxReady(pdev);
 80056fa:	4798      	blx	r3
 80056fc:	e7f9      	b.n	80056f2 <USBD_LL_DataOutStage+0x66>
 80056fe:	bf00      	nop

08005700 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8005700:	b570      	push	{r4, r5, r6, lr}
 8005702:	4604      	mov	r4, r0
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8005704:	b991      	cbnz	r1, 800572c <USBD_LL_DataInStage+0x2c>
  {
    pep = &pdev->ep_in[0];

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8005706:	f8d0 3294 	ldr.w	r3, [r0, #660]	@ 0x294
 800570a:	2b02      	cmp	r3, #2
 800570c:	d01b      	beq.n	8005746 <USBD_LL_DataInStage+0x46>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800570e:	f033 0304 	bics.w	r3, r3, #4
 8005712:	d102      	bne.n	800571a <USBD_LL_DataInStage+0x1a>
          (pdev->ep0_state == USBD_EP0_IDLE))
      {
        USBD_LL_StallEP(pdev, 0x80U);
 8005714:	2180      	movs	r1, #128	@ 0x80
 8005716:	f000 fda7 	bl	8006268 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 800571a:	f894 32a0 	ldrb.w	r3, [r4, #672]	@ 0x2a0
 800571e:	2b01      	cmp	r3, #1
 8005720:	d102      	bne.n	8005728 <USBD_LL_DataInStage+0x28>
    {
      USBD_RunTestMode(pdev);
      pdev->dev_test_mode = 0U;
 8005722:	2300      	movs	r3, #0
 8005724:	f884 32a0 	strb.w	r3, [r4, #672]	@ 0x2a0
  {
    /* should never be in this condition */
    return USBD_FAIL;
  }

  return USBD_OK;
 8005728:	2000      	movs	r0, #0
}
 800572a:	bd70      	pop	{r4, r5, r6, pc}
  else if ((pdev->pClass->DataIn != NULL) &&
 800572c:	f8d0 32b4 	ldr.w	r3, [r0, #692]	@ 0x2b4
 8005730:	695b      	ldr	r3, [r3, #20]
 8005732:	b133      	cbz	r3, 8005742 <USBD_LL_DataInStage+0x42>
 8005734:	f890 229c 	ldrb.w	r2, [r0, #668]	@ 0x29c
 8005738:	2a03      	cmp	r2, #3
 800573a:	d102      	bne.n	8005742 <USBD_LL_DataInStage+0x42>
    pdev->pClass->DataIn(pdev, epnum);
 800573c:	4798      	blx	r3
  return USBD_OK;
 800573e:	2000      	movs	r0, #0
 8005740:	e7f3      	b.n	800572a <USBD_LL_DataInStage+0x2a>
    return USBD_FAIL;
 8005742:	2002      	movs	r0, #2
}
 8005744:	bd70      	pop	{r4, r5, r6, pc}
      if (pep->rem_length > pep->maxpacket)
 8005746:	e9d0 3608 	ldrd	r3, r6, [r0, #32]
 800574a:	42b3      	cmp	r3, r6
 800574c:	d827      	bhi.n	800579e <USBD_LL_DataInStage+0x9e>
        if ((pep->total_length % pep->maxpacket == 0U) &&
 800574e:	69c3      	ldr	r3, [r0, #28]
 8005750:	fbb3 f5f6 	udiv	r5, r3, r6
 8005754:	fb06 3515 	mls	r5, r6, r5, r3
 8005758:	b98d      	cbnz	r5, 800577e <USBD_LL_DataInStage+0x7e>
 800575a:	429e      	cmp	r6, r3
 800575c:	d80f      	bhi.n	800577e <USBD_LL_DataInStage+0x7e>
            (pep->total_length >= pep->maxpacket) &&
 800575e:	f8d0 2298 	ldr.w	r2, [r0, #664]	@ 0x298
 8005762:	4293      	cmp	r3, r2
 8005764:	d20b      	bcs.n	800577e <USBD_LL_DataInStage+0x7e>
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8005766:	462a      	mov	r2, r5
 8005768:	f000 fb06 	bl	8005d78 <USBD_CtlContinueSendData>
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800576c:	462b      	mov	r3, r5
 800576e:	462a      	mov	r2, r5
 8005770:	4629      	mov	r1, r5
 8005772:	4620      	mov	r0, r4
          pdev->ep0_data_len = 0U;
 8005774:	f8c4 5298 	str.w	r5, [r4, #664]	@ 0x298
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8005778:	f000 fdba 	bl	80062f0 <USBD_LL_PrepareReceive>
 800577c:	e7cd      	b.n	800571a <USBD_LL_DataInStage+0x1a>
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800577e:	f8d4 32b4 	ldr.w	r3, [r4, #692]	@ 0x2b4
 8005782:	68db      	ldr	r3, [r3, #12]
 8005784:	b11b      	cbz	r3, 800578e <USBD_LL_DataInStage+0x8e>
 8005786:	f894 229c 	ldrb.w	r2, [r4, #668]	@ 0x29c
 800578a:	2a03      	cmp	r2, #3
 800578c:	d015      	beq.n	80057ba <USBD_LL_DataInStage+0xba>
          USBD_LL_StallEP(pdev, 0x80U);
 800578e:	2180      	movs	r1, #128	@ 0x80
 8005790:	4620      	mov	r0, r4
 8005792:	f000 fd69 	bl	8006268 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 8005796:	4620      	mov	r0, r4
 8005798:	f000 fb1c 	bl	8005dd4 <USBD_CtlReceiveStatus>
 800579c:	e7bd      	b.n	800571a <USBD_LL_DataInStage+0x1a>
        pep->rem_length -= pep->maxpacket;
 800579e:	460d      	mov	r5, r1
 80057a0:	1b9b      	subs	r3, r3, r6
        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 80057a2:	4611      	mov	r1, r2
        pep->rem_length -= pep->maxpacket;
 80057a4:	6203      	str	r3, [r0, #32]
        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 80057a6:	b29a      	uxth	r2, r3
 80057a8:	f000 fae6 	bl	8005d78 <USBD_CtlContinueSendData>
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80057ac:	462b      	mov	r3, r5
 80057ae:	462a      	mov	r2, r5
 80057b0:	4629      	mov	r1, r5
 80057b2:	4620      	mov	r0, r4
 80057b4:	f000 fd9c 	bl	80062f0 <USBD_LL_PrepareReceive>
 80057b8:	e7af      	b.n	800571a <USBD_LL_DataInStage+0x1a>
            pdev->pClass->EP0_TxSent(pdev);
 80057ba:	4620      	mov	r0, r4
 80057bc:	4798      	blx	r3
 80057be:	e7e6      	b.n	800578e <USBD_LL_DataInStage+0x8e>

080057c0 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80057c0:	b570      	push	{r4, r5, r6, lr}
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80057c2:	2200      	movs	r2, #0
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80057c4:	2640      	movs	r6, #64	@ 0x40
{
 80057c6:	4604      	mov	r4, r0
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80057c8:	2501      	movs	r5, #1
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80057ca:	4611      	mov	r1, r2
 80057cc:	4633      	mov	r3, r6
 80057ce:	f000 fd31 	bl	8006234 <USBD_LL_OpenEP>

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80057d2:	4633      	mov	r3, r6
 80057d4:	2180      	movs	r1, #128	@ 0x80
 80057d6:	2200      	movs	r2, #0
 80057d8:	4620      	mov	r0, r4
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80057da:	f8c4 5158 	str.w	r5, [r4, #344]	@ 0x158
  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80057de:	f8c4 6164 	str.w	r6, [r4, #356]	@ 0x164
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80057e2:	f000 fd27 	bl	8006234 <USBD_LL_OpenEP>

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
  pdev->ep0_state = USBD_EP0_IDLE;
 80057e6:	2100      	movs	r1, #0
  pdev->dev_config = 0U;
  pdev->dev_remote_wakeup = 0U;

  if (pdev->pClassData)
 80057e8:	f8d4 32b8 	ldr.w	r3, [r4, #696]	@ 0x2b8
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80057ec:	61a5      	str	r5, [r4, #24]
  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80057ee:	6266      	str	r6, [r4, #36]	@ 0x24
  pdev->dev_state = USBD_STATE_DEFAULT;
 80057f0:	f884 529c 	strb.w	r5, [r4, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80057f4:	f8c4 1294 	str.w	r1, [r4, #660]	@ 0x294
  pdev->dev_config = 0U;
 80057f8:	6061      	str	r1, [r4, #4]
  pdev->dev_remote_wakeup = 0U;
 80057fa:	f8c4 12a4 	str.w	r1, [r4, #676]	@ 0x2a4
  if (pdev->pClassData)
 80057fe:	b123      	cbz	r3, 800580a <USBD_LL_Reset+0x4a>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8005800:	f8d4 32b4 	ldr.w	r3, [r4, #692]	@ 0x2b4
 8005804:	4620      	mov	r0, r4
 8005806:	685b      	ldr	r3, [r3, #4]
 8005808:	4798      	blx	r3
  }

  return USBD_OK;
}
 800580a:	2000      	movs	r0, #0
 800580c:	bd70      	pop	{r4, r5, r6, pc}
 800580e:	bf00      	nop

08005810 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8005810:	4603      	mov	r3, r0
  pdev->dev_speed = speed;

  return USBD_OK;
}
 8005812:	2000      	movs	r0, #0
  pdev->dev_speed = speed;
 8005814:	7419      	strb	r1, [r3, #16]
}
 8005816:	4770      	bx	lr

08005818 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8005818:	4603      	mov	r3, r0
  pdev->dev_old_state =  pdev->dev_state;
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 800581a:	2104      	movs	r1, #4
  pdev->dev_old_state =  pdev->dev_state;
 800581c:	f893 229c 	ldrb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
}
 8005820:	2000      	movs	r0, #0
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8005822:	f883 129c 	strb.w	r1, [r3, #668]	@ 0x29c
  pdev->dev_old_state =  pdev->dev_state;
 8005826:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
}
 800582a:	4770      	bx	lr

0800582c <USBD_LL_Resume>:
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800582c:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 8005830:	2b04      	cmp	r3, #4
  {
    pdev->dev_state = pdev->dev_old_state;
 8005832:	bf04      	itt	eq
 8005834:	f890 329d 	ldrbeq.w	r3, [r0, #669]	@ 0x29d
 8005838:	f880 329c 	strbeq.w	r3, [r0, #668]	@ 0x29c
  }

  return USBD_OK;
}
 800583c:	2000      	movs	r0, #0
 800583e:	4770      	bx	lr

08005840 <USBD_LL_SOF>:
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005840:	f890 229c 	ldrb.w	r2, [r0, #668]	@ 0x29c
 8005844:	2a03      	cmp	r2, #3
 8005846:	d001      	beq.n	800584c <USBD_LL_SOF+0xc>
      pdev->pClass->SOF(pdev);
    }
  }

  return USBD_OK;
}
 8005848:	2000      	movs	r0, #0
 800584a:	4770      	bx	lr
{
 800584c:	b508      	push	{r3, lr}
    if (pdev->pClass->SOF != NULL)
 800584e:	f8d0 32b4 	ldr.w	r3, [r0, #692]	@ 0x2b4
 8005852:	69db      	ldr	r3, [r3, #28]
 8005854:	b103      	cbz	r3, 8005858 <USBD_LL_SOF+0x18>
      pdev->pClass->SOF(pdev);
 8005856:	4798      	blx	r3
}
 8005858:	2000      	movs	r0, #0
 800585a:	bd08      	pop	{r3, pc}

0800585c <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 800585c:	b530      	push	{r4, r5, lr}
 800585e:	780b      	ldrb	r3, [r1, #0]
 8005860:	460d      	mov	r5, r1
 8005862:	f003 0360 	and.w	r3, r3, #96	@ 0x60
  USBD_StatusTypeDef ret = USBD_OK;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005866:	2b20      	cmp	r3, #32
{
 8005868:	4604      	mov	r4, r0
 800586a:	b083      	sub	sp, #12
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800586c:	d00d      	beq.n	800588a <USBD_StdDevReq+0x2e>
 800586e:	2b40      	cmp	r3, #64	@ 0x40
 8005870:	d00b      	beq.n	800588a <USBD_StdDevReq+0x2e>
 8005872:	b19b      	cbz	r3, 800589c <USBD_StdDevReq+0x40>
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
  USBD_LL_StallEP(pdev, 0x80U);
 8005874:	2180      	movs	r1, #128	@ 0x80
 8005876:	4620      	mov	r0, r4
 8005878:	f000 fcf6 	bl	8006268 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 800587c:	2100      	movs	r1, #0
 800587e:	4620      	mov	r0, r4
 8005880:	f000 fcf2 	bl	8006268 <USBD_LL_StallEP>
}
 8005884:	2000      	movs	r0, #0
 8005886:	b003      	add	sp, #12
 8005888:	bd30      	pop	{r4, r5, pc}
      pdev->pClass->Setup(pdev, req);
 800588a:	f8d4 32b4 	ldr.w	r3, [r4, #692]	@ 0x2b4
 800588e:	4629      	mov	r1, r5
 8005890:	4620      	mov	r0, r4
 8005892:	689b      	ldr	r3, [r3, #8]
 8005894:	4798      	blx	r3
}
 8005896:	2000      	movs	r0, #0
 8005898:	b003      	add	sp, #12
 800589a:	bd30      	pop	{r4, r5, pc}
      switch (req->bRequest)
 800589c:	784b      	ldrb	r3, [r1, #1]
 800589e:	2b09      	cmp	r3, #9
 80058a0:	d8e8      	bhi.n	8005874 <USBD_StdDevReq+0x18>
 80058a2:	a201      	add	r2, pc, #4	@ (adr r2, 80058a8 <USBD_StdDevReq+0x4c>)
 80058a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80058a8:	08005903 	.word	0x08005903
 80058ac:	0800592b 	.word	0x0800592b
 80058b0:	08005875 	.word	0x08005875
 80058b4:	08005949 	.word	0x08005949
 80058b8:	08005875 	.word	0x08005875
 80058bc:	08005951 	.word	0x08005951
 80058c0:	08005989 	.word	0x08005989
 80058c4:	08005875 	.word	0x08005875
 80058c8:	080059bd 	.word	0x080059bd
 80058cc:	080058d1 	.word	0x080058d1
  cfgidx = (uint8_t)(req->wValue);
 80058d0:	7889      	ldrb	r1, [r1, #2]
 80058d2:	4d99      	ldr	r5, [pc, #612]	@ (8005b38 <USBD_StdDevReq+0x2dc>)
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80058d4:	2901      	cmp	r1, #1
  cfgidx = (uint8_t)(req->wValue);
 80058d6:	7029      	strb	r1, [r5, #0]
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80058d8:	d8cc      	bhi.n	8005874 <USBD_StdDevReq+0x18>
    switch (pdev->dev_state)
 80058da:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 80058de:	2b02      	cmp	r3, #2
 80058e0:	f000 810a 	beq.w	8005af8 <USBD_StdDevReq+0x29c>
 80058e4:	2b03      	cmp	r3, #3
 80058e6:	f000 80f8 	beq.w	8005ada <USBD_StdDevReq+0x27e>
  USBD_LL_StallEP(pdev, 0x80U);
 80058ea:	2180      	movs	r1, #128	@ 0x80
 80058ec:	f000 fcbc 	bl	8006268 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 80058f0:	2100      	movs	r1, #0
 80058f2:	4620      	mov	r0, r4
 80058f4:	f000 fcb8 	bl	8006268 <USBD_LL_StallEP>
        USBD_ClrClassConfig(pdev, cfgidx);
 80058f8:	4620      	mov	r0, r4
 80058fa:	7829      	ldrb	r1, [r5, #0]
 80058fc:	f7ff fe8e 	bl	800561c <USBD_ClrClassConfig>
        break;
 8005900:	e7c0      	b.n	8005884 <USBD_StdDevReq+0x28>
  switch (pdev->dev_state)
 8005902:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 8005906:	3b01      	subs	r3, #1
 8005908:	2b02      	cmp	r3, #2
 800590a:	d8b3      	bhi.n	8005874 <USBD_StdDevReq+0x18>
      if (req->wLength != 0x2U)
 800590c:	88ca      	ldrh	r2, [r1, #6]
 800590e:	2a02      	cmp	r2, #2
 8005910:	d1b0      	bne.n	8005874 <USBD_StdDevReq+0x18>
      if (pdev->dev_remote_wakeup)
 8005912:	f8d0 32a4 	ldr.w	r3, [r0, #676]	@ 0x2a4
 8005916:	4601      	mov	r1, r0
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8005918:	2b00      	cmp	r3, #0
 800591a:	bf0c      	ite	eq
 800591c:	2301      	moveq	r3, #1
 800591e:	2303      	movne	r3, #3
 8005920:	f841 3f0c 	str.w	r3, [r1, #12]!
      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8005924:	f000 fa1a 	bl	8005d5c <USBD_CtlSendData>
      break;
 8005928:	e7ac      	b.n	8005884 <USBD_StdDevReq+0x28>
  switch (pdev->dev_state)
 800592a:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 800592e:	3b01      	subs	r3, #1
 8005930:	2b02      	cmp	r3, #2
 8005932:	d89f      	bhi.n	8005874 <USBD_StdDevReq+0x18>
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8005934:	884b      	ldrh	r3, [r1, #2]
 8005936:	2b01      	cmp	r3, #1
 8005938:	d1a4      	bne.n	8005884 <USBD_StdDevReq+0x28>
        pdev->dev_remote_wakeup = 0U;
 800593a:	2300      	movs	r3, #0
        USBD_CtlSendStatus(pdev);
 800593c:	4620      	mov	r0, r4
        pdev->dev_remote_wakeup = 0U;
 800593e:	f8c4 32a4 	str.w	r3, [r4, #676]	@ 0x2a4
        USBD_CtlSendStatus(pdev);
 8005942:	f000 fa3b 	bl	8005dbc <USBD_CtlSendStatus>
 8005946:	e79d      	b.n	8005884 <USBD_StdDevReq+0x28>
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8005948:	884b      	ldrh	r3, [r1, #2]
 800594a:	2b01      	cmp	r3, #1
 800594c:	d19a      	bne.n	8005884 <USBD_StdDevReq+0x28>
 800594e:	e7f5      	b.n	800593c <USBD_StdDevReq+0xe0>
  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8005950:	888b      	ldrh	r3, [r1, #4]
 8005952:	2b00      	cmp	r3, #0
 8005954:	d18e      	bne.n	8005874 <USBD_StdDevReq+0x18>
 8005956:	88cb      	ldrh	r3, [r1, #6]
 8005958:	2b00      	cmp	r3, #0
 800595a:	d18b      	bne.n	8005874 <USBD_StdDevReq+0x18>
 800595c:	884d      	ldrh	r5, [r1, #2]
 800595e:	2d7f      	cmp	r5, #127	@ 0x7f
 8005960:	d888      	bhi.n	8005874 <USBD_StdDevReq+0x18>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005962:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 8005966:	2b03      	cmp	r3, #3
 8005968:	d084      	beq.n	8005874 <USBD_StdDevReq+0x18>
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800596a:	b2e9      	uxtb	r1, r5
      pdev->dev_address = dev_addr;
 800596c:	f880 129e 	strb.w	r1, [r0, #670]	@ 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 8005970:	f000 fca6 	bl	80062c0 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8005974:	4620      	mov	r0, r4
 8005976:	f000 fa21 	bl	8005dbc <USBD_CtlSendStatus>
      if (dev_addr != 0U)
 800597a:	2d00      	cmp	r5, #0
 800597c:	f000 80d7 	beq.w	8005b2e <USBD_StdDevReq+0x2d2>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8005980:	2302      	movs	r3, #2
 8005982:	f884 329c 	strb.w	r3, [r4, #668]	@ 0x29c
 8005986:	e77d      	b.n	8005884 <USBD_StdDevReq+0x28>
  uint16_t len = 0U;
 8005988:	2100      	movs	r1, #0
  switch (req->wValue >> 8)
 800598a:	886a      	ldrh	r2, [r5, #2]
  uint16_t len = 0U;
 800598c:	f8ad 1006 	strh.w	r1, [sp, #6]
  switch (req->wValue >> 8)
 8005990:	0a13      	lsrs	r3, r2, #8
 8005992:	3b01      	subs	r3, #1
 8005994:	2b06      	cmp	r3, #6
 8005996:	f63f af6d 	bhi.w	8005874 <USBD_StdDevReq+0x18>
 800599a:	a101      	add	r1, pc, #4	@ (adr r1, 80059a0 <USBD_StdDevReq+0x144>)
 800599c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80059a0:	08005a4f 	.word	0x08005a4f
 80059a4:	08005a37 	.word	0x08005a37
 80059a8:	08005a25 	.word	0x08005a25
 80059ac:	08005875 	.word	0x08005875
 80059b0:	08005875 	.word	0x08005875
 80059b4:	08005a0f 	.word	0x08005a0f
 80059b8:	080059e1 	.word	0x080059e1
  if (req->wLength != 1U)
 80059bc:	88ca      	ldrh	r2, [r1, #6]
 80059be:	2a01      	cmp	r2, #1
 80059c0:	f47f af58 	bne.w	8005874 <USBD_StdDevReq+0x18>
    switch (pdev->dev_state)
 80059c4:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 80059c8:	2b02      	cmp	r3, #2
 80059ca:	d871      	bhi.n	8005ab0 <USBD_StdDevReq+0x254>
 80059cc:	2b00      	cmp	r3, #0
 80059ce:	f43f af51 	beq.w	8005874 <USBD_StdDevReq+0x18>
        pdev->dev_default_config = 0U;
 80059d2:	4601      	mov	r1, r0
 80059d4:	2300      	movs	r3, #0
 80059d6:	f841 3f08 	str.w	r3, [r1, #8]!
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 80059da:	f000 f9bf 	bl	8005d5c <USBD_CtlSendData>
        break;
 80059de:	e751      	b.n	8005884 <USBD_StdDevReq+0x28>
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80059e0:	7c03      	ldrb	r3, [r0, #16]
 80059e2:	2b00      	cmp	r3, #0
 80059e4:	f47f af46 	bne.w	8005874 <USBD_StdDevReq+0x18>
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 80059e8:	f8d0 32b4 	ldr.w	r3, [r0, #692]	@ 0x2b4
 80059ec:	f10d 0006 	add.w	r0, sp, #6
 80059f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80059f2:	4798      	blx	r3
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80059f4:	2307      	movs	r3, #7
 80059f6:	7043      	strb	r3, [r0, #1]
    if ((len != 0U) && (req->wLength != 0U))
 80059f8:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 80059fc:	88ea      	ldrh	r2, [r5, #6]
 80059fe:	2b00      	cmp	r3, #0
 8005a00:	d067      	beq.n	8005ad2 <USBD_StdDevReq+0x276>
 8005a02:	2a00      	cmp	r2, #0
 8005a04:	d15b      	bne.n	8005abe <USBD_StdDevReq+0x262>
          USBD_CtlSendStatus(pdev);
 8005a06:	4620      	mov	r0, r4
 8005a08:	f000 f9d8 	bl	8005dbc <USBD_CtlSendStatus>
 8005a0c:	e73a      	b.n	8005884 <USBD_StdDevReq+0x28>
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005a0e:	7c03      	ldrb	r3, [r0, #16]
 8005a10:	2b00      	cmp	r3, #0
 8005a12:	f47f af2f 	bne.w	8005874 <USBD_StdDevReq+0x18>
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8005a16:	f8d0 32b4 	ldr.w	r3, [r0, #692]	@ 0x2b4
 8005a1a:	f10d 0006 	add.w	r0, sp, #6
 8005a1e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005a20:	4798      	blx	r3
  if (err != 0U)
 8005a22:	e7e9      	b.n	80059f8 <USBD_StdDevReq+0x19c>
      switch ((uint8_t)(req->wValue))
 8005a24:	b2d2      	uxtb	r2, r2
 8005a26:	2a05      	cmp	r2, #5
 8005a28:	f63f af24 	bhi.w	8005874 <USBD_StdDevReq+0x18>
 8005a2c:	e8df f002 	tbb	[pc, r2]
 8005a30:	282e343a 	.word	0x282e343a
 8005a34:	1722      	.short	0x1722
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005a36:	7c02      	ldrb	r2, [r0, #16]
      pdev->pClass->Setup(pdev, req);
 8005a38:	f8d0 32b4 	ldr.w	r3, [r0, #692]	@ 0x2b4
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005a3c:	2a00      	cmp	r2, #0
 8005a3e:	d168      	bne.n	8005b12 <USBD_StdDevReq+0x2b6>
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8005a40:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005a42:	f10d 0006 	add.w	r0, sp, #6
 8005a46:	4798      	blx	r3
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8005a48:	2302      	movs	r3, #2
 8005a4a:	7043      	strb	r3, [r0, #1]
  if (err != 0U)
 8005a4c:	e7d4      	b.n	80059f8 <USBD_StdDevReq+0x19c>
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8005a4e:	f8d0 32b0 	ldr.w	r3, [r0, #688]	@ 0x2b0
 8005a52:	f10d 0106 	add.w	r1, sp, #6
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	7c00      	ldrb	r0, [r0, #16]
 8005a5a:	4798      	blx	r3
  if (err != 0U)
 8005a5c:	e7cc      	b.n	80059f8 <USBD_StdDevReq+0x19c>
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8005a5e:	f8d0 32b0 	ldr.w	r3, [r0, #688]	@ 0x2b0
 8005a62:	699b      	ldr	r3, [r3, #24]
 8005a64:	2b00      	cmp	r3, #0
 8005a66:	f43f af05 	beq.w	8005874 <USBD_StdDevReq+0x18>
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8005a6a:	7c20      	ldrb	r0, [r4, #16]
 8005a6c:	f10d 0106 	add.w	r1, sp, #6
 8005a70:	4798      	blx	r3
  if (err != 0U)
 8005a72:	e7c1      	b.n	80059f8 <USBD_StdDevReq+0x19c>
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8005a74:	f8d0 32b0 	ldr.w	r3, [r0, #688]	@ 0x2b0
 8005a78:	695b      	ldr	r3, [r3, #20]
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	d1f5      	bne.n	8005a6a <USBD_StdDevReq+0x20e>
 8005a7e:	e6f9      	b.n	8005874 <USBD_StdDevReq+0x18>
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8005a80:	f8d0 32b0 	ldr.w	r3, [r0, #688]	@ 0x2b0
 8005a84:	691b      	ldr	r3, [r3, #16]
 8005a86:	2b00      	cmp	r3, #0
 8005a88:	d1ef      	bne.n	8005a6a <USBD_StdDevReq+0x20e>
 8005a8a:	e6f3      	b.n	8005874 <USBD_StdDevReq+0x18>
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8005a8c:	f8d0 32b0 	ldr.w	r3, [r0, #688]	@ 0x2b0
 8005a90:	68db      	ldr	r3, [r3, #12]
 8005a92:	2b00      	cmp	r3, #0
 8005a94:	d1e9      	bne.n	8005a6a <USBD_StdDevReq+0x20e>
 8005a96:	e6ed      	b.n	8005874 <USBD_StdDevReq+0x18>
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8005a98:	f8d0 32b0 	ldr.w	r3, [r0, #688]	@ 0x2b0
 8005a9c:	689b      	ldr	r3, [r3, #8]
 8005a9e:	2b00      	cmp	r3, #0
 8005aa0:	d1e3      	bne.n	8005a6a <USBD_StdDevReq+0x20e>
 8005aa2:	e6e7      	b.n	8005874 <USBD_StdDevReq+0x18>
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8005aa4:	f8d0 32b0 	ldr.w	r3, [r0, #688]	@ 0x2b0
 8005aa8:	685b      	ldr	r3, [r3, #4]
 8005aaa:	2b00      	cmp	r3, #0
 8005aac:	d1dd      	bne.n	8005a6a <USBD_StdDevReq+0x20e>
 8005aae:	e6e1      	b.n	8005874 <USBD_StdDevReq+0x18>
    switch (pdev->dev_state)
 8005ab0:	2b03      	cmp	r3, #3
 8005ab2:	f47f aedf 	bne.w	8005874 <USBD_StdDevReq+0x18>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8005ab6:	1d01      	adds	r1, r0, #4
 8005ab8:	f000 f950 	bl	8005d5c <USBD_CtlSendData>
        break;
 8005abc:	e6e2      	b.n	8005884 <USBD_StdDevReq+0x28>
      len = MIN(len, req->wLength);
 8005abe:	429a      	cmp	r2, r3
 8005ac0:	bf28      	it	cs
 8005ac2:	461a      	movcs	r2, r3
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8005ac4:	4601      	mov	r1, r0
 8005ac6:	4620      	mov	r0, r4
      len = MIN(len, req->wLength);
 8005ac8:	f8ad 2006 	strh.w	r2, [sp, #6]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8005acc:	f000 f946 	bl	8005d5c <USBD_CtlSendData>
 8005ad0:	88ea      	ldrh	r2, [r5, #6]
    if (req->wLength == 0U)
 8005ad2:	2a00      	cmp	r2, #0
 8005ad4:	f47f aed6 	bne.w	8005884 <USBD_StdDevReq+0x28>
 8005ad8:	e795      	b.n	8005a06 <USBD_StdDevReq+0x1aa>
        if (cfgidx == 0U)
 8005ada:	b309      	cbz	r1, 8005b20 <USBD_StdDevReq+0x2c4>
        else if (cfgidx != pdev->dev_config)
 8005adc:	6841      	ldr	r1, [r0, #4]
 8005ade:	2901      	cmp	r1, #1
 8005ae0:	d091      	beq.n	8005a06 <USBD_StdDevReq+0x1aa>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8005ae2:	b2c9      	uxtb	r1, r1
 8005ae4:	f7ff fd9a 	bl	800561c <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 8005ae8:	7829      	ldrb	r1, [r5, #0]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8005aea:	4620      	mov	r0, r4
          pdev->dev_config = cfgidx;
 8005aec:	6061      	str	r1, [r4, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8005aee:	f7ff fd87 	bl	8005600 <USBD_SetClassConfig>
 8005af2:	2802      	cmp	r0, #2
 8005af4:	d187      	bne.n	8005a06 <USBD_StdDevReq+0x1aa>
 8005af6:	e6bd      	b.n	8005874 <USBD_StdDevReq+0x18>
        if (cfgidx)
 8005af8:	2900      	cmp	r1, #0
 8005afa:	d084      	beq.n	8005a06 <USBD_StdDevReq+0x1aa>
          pdev->dev_config = cfgidx;
 8005afc:	2101      	movs	r1, #1
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8005afe:	2303      	movs	r3, #3
          pdev->dev_config = cfgidx;
 8005b00:	6041      	str	r1, [r0, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8005b02:	f880 329c 	strb.w	r3, [r0, #668]	@ 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8005b06:	f7ff fd7b 	bl	8005600 <USBD_SetClassConfig>
 8005b0a:	2802      	cmp	r0, #2
 8005b0c:	f47f af7b 	bne.w	8005a06 <USBD_StdDevReq+0x1aa>
 8005b10:	e6b0      	b.n	8005874 <USBD_StdDevReq+0x18>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8005b12:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005b14:	f10d 0006 	add.w	r0, sp, #6
 8005b18:	4798      	blx	r3
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8005b1a:	2302      	movs	r3, #2
 8005b1c:	7043      	strb	r3, [r0, #1]
  if (err != 0U)
 8005b1e:	e76b      	b.n	80059f8 <USBD_StdDevReq+0x19c>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8005b20:	2302      	movs	r3, #2
          pdev->dev_config = cfgidx;
 8005b22:	6041      	str	r1, [r0, #4]
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8005b24:	f880 329c 	strb.w	r3, [r0, #668]	@ 0x29c
          USBD_ClrClassConfig(pdev, cfgidx);
 8005b28:	f7ff fd78 	bl	800561c <USBD_ClrClassConfig>
 8005b2c:	e76b      	b.n	8005a06 <USBD_StdDevReq+0x1aa>
        pdev->dev_state = USBD_STATE_DEFAULT;
 8005b2e:	2301      	movs	r3, #1
 8005b30:	f884 329c 	strb.w	r3, [r4, #668]	@ 0x29c
 8005b34:	e6a6      	b.n	8005884 <USBD_StdDevReq+0x28>
 8005b36:	bf00      	nop
 8005b38:	20000648 	.word	0x20000648

08005b3c <USBD_StdItfReq>:
{
 8005b3c:	b538      	push	{r3, r4, r5, lr}
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005b3e:	780b      	ldrb	r3, [r1, #0]
{
 8005b40:	460d      	mov	r5, r1
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005b42:	065a      	lsls	r2, r3, #25
{
 8005b44:	4604      	mov	r4, r0
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005b46:	d50c      	bpl.n	8005b62 <USBD_StdItfReq+0x26>
 8005b48:	f003 0260 	and.w	r2, r3, #96	@ 0x60
 8005b4c:	2a40      	cmp	r2, #64	@ 0x40
 8005b4e:	d008      	beq.n	8005b62 <USBD_StdItfReq+0x26>
  USBD_LL_StallEP(pdev, 0x80U);
 8005b50:	2180      	movs	r1, #128	@ 0x80
 8005b52:	f000 fb89 	bl	8006268 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 8005b56:	2100      	movs	r1, #0
 8005b58:	4620      	mov	r0, r4
 8005b5a:	f000 fb85 	bl	8006268 <USBD_LL_StallEP>
}
 8005b5e:	2000      	movs	r0, #0
 8005b60:	bd38      	pop	{r3, r4, r5, pc}
      switch (pdev->dev_state)
 8005b62:	f894 329c 	ldrb.w	r3, [r4, #668]	@ 0x29c
 8005b66:	3b01      	subs	r3, #1
 8005b68:	2b02      	cmp	r3, #2
 8005b6a:	d811      	bhi.n	8005b90 <USBD_StdItfReq+0x54>
          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8005b6c:	792b      	ldrb	r3, [r5, #4]
 8005b6e:	2b01      	cmp	r3, #1
 8005b70:	d80e      	bhi.n	8005b90 <USBD_StdItfReq+0x54>
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8005b72:	f8d4 32b4 	ldr.w	r3, [r4, #692]	@ 0x2b4
 8005b76:	4629      	mov	r1, r5
 8005b78:	689b      	ldr	r3, [r3, #8]
 8005b7a:	4620      	mov	r0, r4
 8005b7c:	4798      	blx	r3
            if ((req->wLength == 0U) && (ret == USBD_OK))
 8005b7e:	88eb      	ldrh	r3, [r5, #6]
 8005b80:	2b00      	cmp	r3, #0
 8005b82:	d1ec      	bne.n	8005b5e <USBD_StdItfReq+0x22>
 8005b84:	2800      	cmp	r0, #0
 8005b86:	d1ea      	bne.n	8005b5e <USBD_StdItfReq+0x22>
              USBD_CtlSendStatus(pdev);
 8005b88:	4620      	mov	r0, r4
 8005b8a:	f000 f917 	bl	8005dbc <USBD_CtlSendStatus>
 8005b8e:	e7e6      	b.n	8005b5e <USBD_StdItfReq+0x22>
  USBD_LL_StallEP(pdev, 0x80U);
 8005b90:	2180      	movs	r1, #128	@ 0x80
 8005b92:	4620      	mov	r0, r4
 8005b94:	f000 fb68 	bl	8006268 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 8005b98:	2100      	movs	r1, #0
 8005b9a:	4620      	mov	r0, r4
 8005b9c:	f000 fb64 	bl	8006268 <USBD_LL_StallEP>
}
 8005ba0:	2000      	movs	r0, #0
 8005ba2:	bd38      	pop	{r3, r4, r5, pc}

08005ba4 <USBD_StdEPReq>:
{
 8005ba4:	b538      	push	{r3, r4, r5, lr}
 8005ba6:	780b      	ldrb	r3, [r1, #0]
 8005ba8:	4604      	mov	r4, r0
  ep_addr  = LOBYTE(req->wIndex);
 8005baa:	f003 0360 	and.w	r3, r3, #96	@ 0x60
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005bae:	2b20      	cmp	r3, #32
  ep_addr  = LOBYTE(req->wIndex);
 8005bb0:	888a      	ldrh	r2, [r1, #4]
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005bb2:	d00c      	beq.n	8005bce <USBD_StdEPReq+0x2a>
 8005bb4:	2b40      	cmp	r3, #64	@ 0x40
 8005bb6:	d00a      	beq.n	8005bce <USBD_StdEPReq+0x2a>
 8005bb8:	b183      	cbz	r3, 8005bdc <USBD_StdEPReq+0x38>
  USBD_LL_StallEP(pdev, 0x80U);
 8005bba:	2180      	movs	r1, #128	@ 0x80
 8005bbc:	4620      	mov	r0, r4
 8005bbe:	f000 fb53 	bl	8006268 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 8005bc2:	2100      	movs	r1, #0
 8005bc4:	4620      	mov	r0, r4
 8005bc6:	f000 fb4f 	bl	8006268 <USBD_LL_StallEP>
}
 8005bca:	2000      	movs	r0, #0
 8005bcc:	bd38      	pop	{r3, r4, r5, pc}
      pdev->pClass->Setup(pdev, req);
 8005bce:	f8d4 32b4 	ldr.w	r3, [r4, #692]	@ 0x2b4
 8005bd2:	4620      	mov	r0, r4
 8005bd4:	689b      	ldr	r3, [r3, #8]
 8005bd6:	4798      	blx	r3
}
 8005bd8:	2000      	movs	r0, #0
 8005bda:	bd38      	pop	{r3, r4, r5, pc}
      switch (req->bRequest)
 8005bdc:	784b      	ldrb	r3, [r1, #1]
  ep_addr  = LOBYTE(req->wIndex);
 8005bde:	fa5f fc82 	uxtb.w	ip, r2
      switch (req->bRequest)
 8005be2:	2b01      	cmp	r3, #1
 8005be4:	d03e      	beq.n	8005c64 <USBD_StdEPReq+0xc0>
 8005be6:	2b03      	cmp	r3, #3
 8005be8:	d02b      	beq.n	8005c42 <USBD_StdEPReq+0x9e>
 8005bea:	2b00      	cmp	r3, #0
 8005bec:	d1e5      	bne.n	8005bba <USBD_StdEPReq+0x16>
          switch (pdev->dev_state)
 8005bee:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 8005bf2:	2b02      	cmp	r3, #2
 8005bf4:	d051      	beq.n	8005c9a <USBD_StdEPReq+0xf6>
 8005bf6:	2b03      	cmp	r3, #3
 8005bf8:	d1df      	bne.n	8005bba <USBD_StdEPReq+0x16>
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8005bfa:	f00c 030f 	and.w	r3, ip, #15
 8005bfe:	eb03 0383 	add.w	r3, r3, r3, lsl #2
              if ((ep_addr & 0x80U) == 0x80U)
 8005c02:	0612      	lsls	r2, r2, #24
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8005c04:	eb00 0383 	add.w	r3, r0, r3, lsl #2
              if ((ep_addr & 0x80U) == 0x80U)
 8005c08:	d456      	bmi.n	8005cb8 <USBD_StdEPReq+0x114>
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8005c0a:	f8d3 3158 	ldr.w	r3, [r3, #344]	@ 0x158
 8005c0e:	2b00      	cmp	r3, #0
 8005c10:	d0d3      	beq.n	8005bba <USBD_StdEPReq+0x16>
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005c12:	f00c 037f 	and.w	r3, ip, #127	@ 0x7f
 8005c16:	eb03 0583 	add.w	r5, r3, r3, lsl #2
 8005c1a:	eb00 0585 	add.w	r5, r0, r5, lsl #2
 8005c1e:	f505 75aa 	add.w	r5, r5, #340	@ 0x154
              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8005c22:	2b00      	cmp	r3, #0
 8005c24:	d054      	beq.n	8005cd0 <USBD_StdEPReq+0x12c>
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 8005c26:	4661      	mov	r1, ip
 8005c28:	4620      	mov	r0, r4
 8005c2a:	f000 fb35 	bl	8006298 <USBD_LL_IsStallEP>
 8005c2e:	2800      	cmp	r0, #0
 8005c30:	d04e      	beq.n	8005cd0 <USBD_StdEPReq+0x12c>
 8005c32:	2301      	movs	r3, #1
              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8005c34:	2202      	movs	r2, #2
 8005c36:	4629      	mov	r1, r5
 8005c38:	4620      	mov	r0, r4
                pep->status = 0x0000U;
 8005c3a:	602b      	str	r3, [r5, #0]
              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8005c3c:	f000 f88e 	bl	8005d5c <USBD_CtlSendData>
              break;
 8005c40:	e7c3      	b.n	8005bca <USBD_StdEPReq+0x26>
          switch (pdev->dev_state)
 8005c42:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 8005c46:	2b02      	cmp	r3, #2
 8005c48:	d01c      	beq.n	8005c84 <USBD_StdEPReq+0xe0>
 8005c4a:	2b03      	cmp	r3, #3
 8005c4c:	d1b5      	bne.n	8005bba <USBD_StdEPReq+0x16>
              if (req->wValue == USB_FEATURE_EP_HALT)
 8005c4e:	884b      	ldrh	r3, [r1, #2]
 8005c50:	b9a3      	cbnz	r3, 8005c7c <USBD_StdEPReq+0xd8>
                if ((ep_addr != 0x00U) &&
 8005c52:	f01c 0f7f 	tst.w	ip, #127	@ 0x7f
 8005c56:	d011      	beq.n	8005c7c <USBD_StdEPReq+0xd8>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8005c58:	88cb      	ldrh	r3, [r1, #6]
 8005c5a:	b97b      	cbnz	r3, 8005c7c <USBD_StdEPReq+0xd8>
                  USBD_LL_StallEP(pdev, ep_addr);
 8005c5c:	4661      	mov	r1, ip
 8005c5e:	f000 fb03 	bl	8006268 <USBD_LL_StallEP>
 8005c62:	e00b      	b.n	8005c7c <USBD_StdEPReq+0xd8>
          switch (pdev->dev_state)
 8005c64:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 8005c68:	2b02      	cmp	r3, #2
 8005c6a:	d00b      	beq.n	8005c84 <USBD_StdEPReq+0xe0>
 8005c6c:	2b03      	cmp	r3, #3
 8005c6e:	d1a4      	bne.n	8005bba <USBD_StdEPReq+0x16>
              if (req->wValue == USB_FEATURE_EP_HALT)
 8005c70:	884b      	ldrh	r3, [r1, #2]
 8005c72:	2b00      	cmp	r3, #0
 8005c74:	d1a9      	bne.n	8005bca <USBD_StdEPReq+0x26>
                if ((ep_addr & 0x7FU) != 0x00U)
 8005c76:	f01c 0f7f 	tst.w	ip, #127	@ 0x7f
 8005c7a:	d12b      	bne.n	8005cd4 <USBD_StdEPReq+0x130>
              USBD_CtlSendStatus(pdev);
 8005c7c:	4620      	mov	r0, r4
 8005c7e:	f000 f89d 	bl	8005dbc <USBD_CtlSendStatus>
              break;
 8005c82:	e7a2      	b.n	8005bca <USBD_StdEPReq+0x26>
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8005c84:	f01c 0f7f 	tst.w	ip, #127	@ 0x7f
 8005c88:	d097      	beq.n	8005bba <USBD_StdEPReq+0x16>
                USBD_LL_StallEP(pdev, ep_addr);
 8005c8a:	4661      	mov	r1, ip
 8005c8c:	f000 faec 	bl	8006268 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8005c90:	2180      	movs	r1, #128	@ 0x80
 8005c92:	4620      	mov	r0, r4
 8005c94:	f000 fae8 	bl	8006268 <USBD_LL_StallEP>
 8005c98:	e797      	b.n	8005bca <USBD_StdEPReq+0x26>
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8005c9a:	f01c 0f7f 	tst.w	ip, #127	@ 0x7f
 8005c9e:	d18c      	bne.n	8005bba <USBD_StdEPReq+0x16>
              pep->status = 0x0000U;
 8005ca0:	2300      	movs	r3, #0
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005ca2:	0611      	lsls	r1, r2, #24
 8005ca4:	bf4c      	ite	mi
 8005ca6:	f100 0114 	addmi.w	r1, r0, #20
 8005caa:	f500 71aa 	addpl.w	r1, r0, #340	@ 0x154
              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8005cae:	2202      	movs	r2, #2
              pep->status = 0x0000U;
 8005cb0:	600b      	str	r3, [r1, #0]
              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8005cb2:	f000 f853 	bl	8005d5c <USBD_CtlSendData>
              break;
 8005cb6:	e788      	b.n	8005bca <USBD_StdEPReq+0x26>
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8005cb8:	699b      	ldr	r3, [r3, #24]
 8005cba:	2b00      	cmp	r3, #0
 8005cbc:	f43f af7d 	beq.w	8005bba <USBD_StdEPReq+0x16>
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005cc0:	f00c 037f 	and.w	r3, ip, #127	@ 0x7f
 8005cc4:	1c5d      	adds	r5, r3, #1
 8005cc6:	eb05 0585 	add.w	r5, r5, r5, lsl #2
 8005cca:	eb00 0585 	add.w	r5, r0, r5, lsl #2
 8005cce:	e7a8      	b.n	8005c22 <USBD_StdEPReq+0x7e>
{
 8005cd0:	2300      	movs	r3, #0
 8005cd2:	e7af      	b.n	8005c34 <USBD_StdEPReq+0x90>
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 8005cd4:	4661      	mov	r1, ip
 8005cd6:	f000 fad3 	bl	8006280 <USBD_LL_ClearStallEP>
 8005cda:	e7cf      	b.n	8005c7c <USBD_StdEPReq+0xd8>

08005cdc <USBD_ParseSetupRequest>:
  req->bmRequest = *(uint8_t *)(pdata);
 8005cdc:	780b      	ldrb	r3, [r1, #0]
 8005cde:	7003      	strb	r3, [r0, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 8005ce0:	784b      	ldrb	r3, [r1, #1]
 8005ce2:	7043      	strb	r3, [r0, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 8005ce4:	884b      	ldrh	r3, [r1, #2]
 8005ce6:	8043      	strh	r3, [r0, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 8005ce8:	888b      	ldrh	r3, [r1, #4]
 8005cea:	8083      	strh	r3, [r0, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 8005cec:	88cb      	ldrh	r3, [r1, #6]
 8005cee:	80c3      	strh	r3, [r0, #6]
}
 8005cf0:	4770      	bx	lr
 8005cf2:	bf00      	nop

08005cf4 <USBD_CtlError>:
{
 8005cf4:	b510      	push	{r4, lr}
 8005cf6:	4604      	mov	r4, r0
  USBD_LL_StallEP(pdev, 0x80U);
 8005cf8:	2180      	movs	r1, #128	@ 0x80
 8005cfa:	f000 fab5 	bl	8006268 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 8005cfe:	4620      	mov	r0, r4
}
 8005d00:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBD_LL_StallEP(pdev, 0U);
 8005d04:	2100      	movs	r1, #0
 8005d06:	f000 baaf 	b.w	8006268 <USBD_LL_StallEP>
 8005d0a:	bf00      	nop

08005d0c <USBD_GetString>:
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
  uint8_t idx = 0U;

  if (desc != NULL)
 8005d0c:	b308      	cbz	r0, 8005d52 <USBD_GetString+0x46>
{
 8005d0e:	b570      	push	{r4, r5, r6, lr}
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
  uint8_t  len = 0U;

  while (*buf != '\0')
 8005d10:	7803      	ldrb	r3, [r0, #0]
 8005d12:	4605      	mov	r5, r0
 8005d14:	460e      	mov	r6, r1
 8005d16:	4614      	mov	r4, r2
 8005d18:	b1e3      	cbz	r3, 8005d54 <USBD_GetString+0x48>
 8005d1a:	3001      	adds	r0, #1
 8005d1c:	f7fa fa18 	bl	8000150 <strlen>
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 8005d20:	1c43      	adds	r3, r0, #1
 8005d22:	b2db      	uxtb	r3, r3
 8005d24:	3301      	adds	r3, #1
 8005d26:	005b      	lsls	r3, r3, #1
 8005d28:	b2da      	uxtb	r2, r3
 8005d2a:	8023      	strh	r3, [r4, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8005d2c:	2303      	movs	r3, #3
    unicode[idx++] = *(uint8_t *)(void *)len;
 8005d2e:	7032      	strb	r2, [r6, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8005d30:	7073      	strb	r3, [r6, #1]
    while (*desc != '\0')
 8005d32:	782c      	ldrb	r4, [r5, #0]
 8005d34:	b164      	cbz	r4, 8005d50 <USBD_GetString+0x44>
 8005d36:	4628      	mov	r0, r5
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8005d38:	2302      	movs	r3, #2
      unicode[idx++] =  0U;
 8005d3a:	2100      	movs	r1, #0
      unicode[idx++] = *desc++;
 8005d3c:	1c5a      	adds	r2, r3, #1
 8005d3e:	b2d2      	uxtb	r2, r2
 8005d40:	54f4      	strb	r4, [r6, r3]
      unicode[idx++] =  0U;
 8005d42:	54b1      	strb	r1, [r6, r2]
    while (*desc != '\0')
 8005d44:	f810 4f01 	ldrb.w	r4, [r0, #1]!
      unicode[idx++] =  0U;
 8005d48:	3302      	adds	r3, #2
 8005d4a:	b2db      	uxtb	r3, r3
    while (*desc != '\0')
 8005d4c:	2c00      	cmp	r4, #0
 8005d4e:	d1f5      	bne.n	8005d3c <USBD_GetString+0x30>
}
 8005d50:	bd70      	pop	{r4, r5, r6, pc}
 8005d52:	4770      	bx	lr
  while (*buf != '\0')
 8005d54:	2202      	movs	r2, #2
 8005d56:	4613      	mov	r3, r2
 8005d58:	e7e7      	b.n	8005d2a <USBD_GetString+0x1e>
 8005d5a:	bf00      	nop

08005d5c <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 8005d5c:	b510      	push	{r4, lr}
 8005d5e:	4613      	mov	r3, r2
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8005d60:	2402      	movs	r4, #2
{
 8005d62:	460a      	mov	r2, r1
  pdev->ep_in[0].total_length = len;
 8005d64:	e9c0 3307 	strd	r3, r3, [r0, #28]
  pdev->ep_in[0].rem_length   = len;

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8005d68:	2100      	movs	r1, #0
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8005d6a:	f8c0 4294 	str.w	r4, [r0, #660]	@ 0x294
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8005d6e:	f000 fab3 	bl	80062d8 <USBD_LL_Transmit>

  return USBD_OK;
}
 8005d72:	2000      	movs	r0, #0
 8005d74:	bd10      	pop	{r4, pc}
 8005d76:	bf00      	nop

08005d78 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 8005d78:	468c      	mov	ip, r1
 8005d7a:	b508      	push	{r3, lr}
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8005d7c:	2100      	movs	r1, #0
{
 8005d7e:	4613      	mov	r3, r2
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8005d80:	4662      	mov	r2, ip
 8005d82:	f000 faa9 	bl	80062d8 <USBD_LL_Transmit>

  return USBD_OK;
}
 8005d86:	2000      	movs	r0, #0
 8005d88:	bd08      	pop	{r3, pc}
 8005d8a:	bf00      	nop

08005d8c <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 8005d8c:	b510      	push	{r4, lr}
 8005d8e:	4613      	mov	r3, r2
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8005d90:	2403      	movs	r4, #3
{
 8005d92:	460a      	mov	r2, r1
  pdev->ep_out[0].total_length = len;
 8005d94:	e9c0 3357 	strd	r3, r3, [r0, #348]	@ 0x15c
  pdev->ep_out[0].rem_length   = len;

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8005d98:	2100      	movs	r1, #0
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8005d9a:	f8c0 4294 	str.w	r4, [r0, #660]	@ 0x294
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8005d9e:	f000 faa7 	bl	80062f0 <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 8005da2:	2000      	movs	r0, #0
 8005da4:	bd10      	pop	{r4, pc}
 8005da6:	bf00      	nop

08005da8 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 8005da8:	468c      	mov	ip, r1
 8005daa:	b508      	push	{r3, lr}
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8005dac:	2100      	movs	r1, #0
{
 8005dae:	4613      	mov	r3, r2
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8005db0:	4662      	mov	r2, ip
 8005db2:	f000 fa9d 	bl	80062f0 <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 8005db6:	2000      	movs	r0, #0
 8005db8:	bd08      	pop	{r3, pc}
 8005dba:	bf00      	nop

08005dbc <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8005dbc:	b508      	push	{r3, lr}
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8005dbe:	2104      	movs	r1, #4

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8005dc0:	2300      	movs	r3, #0
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8005dc2:	f8c0 1294 	str.w	r1, [r0, #660]	@ 0x294
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8005dc6:	461a      	mov	r2, r3
 8005dc8:	4619      	mov	r1, r3
 8005dca:	f000 fa85 	bl	80062d8 <USBD_LL_Transmit>

  return USBD_OK;
}
 8005dce:	2000      	movs	r0, #0
 8005dd0:	bd08      	pop	{r3, pc}
 8005dd2:	bf00      	nop

08005dd4 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8005dd4:	b508      	push	{r3, lr}
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8005dd6:	2105      	movs	r1, #5

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8005dd8:	2300      	movs	r3, #0
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8005dda:	f8c0 1294 	str.w	r1, [r0, #660]	@ 0x294
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8005dde:	461a      	mov	r2, r3
 8005de0:	4619      	mov	r1, r3
 8005de2:	f000 fa85 	bl	80062f0 <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 8005de6:	2000      	movs	r0, #0
 8005de8:	bd08      	pop	{r3, pc}
 8005dea:	bf00      	nop

08005dec <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8005dec:	b508      	push	{r3, lr}
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8005dee:	2200      	movs	r2, #0
 8005df0:	4917      	ldr	r1, [pc, #92]	@ (8005e50 <MX_USB_DEVICE_Init+0x64>)
 8005df2:	4818      	ldr	r0, [pc, #96]	@ (8005e54 <MX_USB_DEVICE_Init+0x68>)
 8005df4:	f7ff fbe0 	bl	80055b8 <USBD_Init>
 8005df8:	b970      	cbnz	r0, 8005e18 <MX_USB_DEVICE_Init+0x2c>
  {
    Error_Handler();
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8005dfa:	4917      	ldr	r1, [pc, #92]	@ (8005e58 <MX_USB_DEVICE_Init+0x6c>)
 8005dfc:	4815      	ldr	r0, [pc, #84]	@ (8005e54 <MX_USB_DEVICE_Init+0x68>)
 8005dfe:	f7ff fbf1 	bl	80055e4 <USBD_RegisterClass>
 8005e02:	b988      	cbnz	r0, 8005e28 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8005e04:	4915      	ldr	r1, [pc, #84]	@ (8005e5c <MX_USB_DEVICE_Init+0x70>)
 8005e06:	4813      	ldr	r0, [pc, #76]	@ (8005e54 <MX_USB_DEVICE_Init+0x68>)
 8005e08:	f7ff fb8a 	bl	8005520 <USBD_CDC_RegisterInterface>
 8005e0c:	b9a0      	cbnz	r0, 8005e38 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8005e0e:	4811      	ldr	r0, [pc, #68]	@ (8005e54 <MX_USB_DEVICE_Init+0x68>)
 8005e10:	f7ff fbf0 	bl	80055f4 <USBD_Start>
 8005e14:	b9b8      	cbnz	r0, 8005e46 <MX_USB_DEVICE_Init+0x5a>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8005e16:	bd08      	pop	{r3, pc}
    Error_Handler();
 8005e18:	f7fb fe5a 	bl	8001ad0 <Error_Handler>
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8005e1c:	490e      	ldr	r1, [pc, #56]	@ (8005e58 <MX_USB_DEVICE_Init+0x6c>)
 8005e1e:	480d      	ldr	r0, [pc, #52]	@ (8005e54 <MX_USB_DEVICE_Init+0x68>)
 8005e20:	f7ff fbe0 	bl	80055e4 <USBD_RegisterClass>
 8005e24:	2800      	cmp	r0, #0
 8005e26:	d0ed      	beq.n	8005e04 <MX_USB_DEVICE_Init+0x18>
    Error_Handler();
 8005e28:	f7fb fe52 	bl	8001ad0 <Error_Handler>
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8005e2c:	490b      	ldr	r1, [pc, #44]	@ (8005e5c <MX_USB_DEVICE_Init+0x70>)
 8005e2e:	4809      	ldr	r0, [pc, #36]	@ (8005e54 <MX_USB_DEVICE_Init+0x68>)
 8005e30:	f7ff fb76 	bl	8005520 <USBD_CDC_RegisterInterface>
 8005e34:	2800      	cmp	r0, #0
 8005e36:	d0ea      	beq.n	8005e0e <MX_USB_DEVICE_Init+0x22>
    Error_Handler();
 8005e38:	f7fb fe4a 	bl	8001ad0 <Error_Handler>
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8005e3c:	4805      	ldr	r0, [pc, #20]	@ (8005e54 <MX_USB_DEVICE_Init+0x68>)
 8005e3e:	f7ff fbd9 	bl	80055f4 <USBD_Start>
 8005e42:	2800      	cmp	r0, #0
 8005e44:	d0e7      	beq.n	8005e16 <MX_USB_DEVICE_Init+0x2a>
}
 8005e46:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 8005e4a:	f7fb be41 	b.w	8001ad0 <Error_Handler>
 8005e4e:	bf00      	nop
 8005e50:	20000160 	.word	0x20000160
 8005e54:	2000064c 	.word	0x2000064c
 8005e58:	200000d8 	.word	0x200000d8
 8005e5c:	2000011c 	.word	0x2000011c

08005e60 <CDC_DeInit_FS>:
static int8_t CDC_DeInit_FS(void)
{
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
  /* USER CODE END 4 */
}
 8005e60:	2000      	movs	r0, #0
 8005e62:	4770      	bx	lr

08005e64 <CDC_Control_FS>:
    break;
  }

  return (USBD_OK);
  /* USER CODE END 5 */
}
 8005e64:	2000      	movs	r0, #0
 8005e66:	4770      	bx	lr

08005e68 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8005e68:	b570      	push	{r4, r5, r6, lr}
 8005e6a:	460c      	mov	r4, r1
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8005e6c:	4e09      	ldr	r6, [pc, #36]	@ (8005e94 <CDC_Receive_FS+0x2c>)
{
 8005e6e:	4601      	mov	r1, r0
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
  USB_CDC_RxHandler(UserRxBufferFS, *Len);
 8005e70:	4d09      	ldr	r5, [pc, #36]	@ (8005e98 <CDC_Receive_FS+0x30>)
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8005e72:	4630      	mov	r0, r6
 8005e74:	f7ff fb66 	bl	8005544 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8005e78:	4630      	mov	r0, r6
 8005e7a:	f7ff fb85 	bl	8005588 <USBD_CDC_ReceivePacket>
  USB_CDC_RxHandler(UserRxBufferFS, *Len);
 8005e7e:	4628      	mov	r0, r5
 8005e80:	6821      	ldr	r1, [r4, #0]
 8005e82:	f7fb fcbb 	bl	80017fc <USB_CDC_RxHandler>
  memset(UserRxBufferFS, '\0', *Len);
 8005e86:	2100      	movs	r1, #0
 8005e88:	4628      	mov	r0, r5
 8005e8a:	6822      	ldr	r2, [r4, #0]
 8005e8c:	f001 ffb1 	bl	8007df2 <memset>
  return (USBD_OK);
  /* USER CODE END 6 */
}
 8005e90:	2000      	movs	r0, #0
 8005e92:	bd70      	pop	{r4, r5, r6, pc}
 8005e94:	2000064c 	.word	0x2000064c
 8005e98:	20000b10 	.word	0x20000b10

08005e9c <CDC_Init_FS>:
{
 8005e9c:	b510      	push	{r4, lr}
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8005e9e:	4c06      	ldr	r4, [pc, #24]	@ (8005eb8 <CDC_Init_FS+0x1c>)
 8005ea0:	2200      	movs	r2, #0
 8005ea2:	4620      	mov	r0, r4
 8005ea4:	4905      	ldr	r1, [pc, #20]	@ (8005ebc <CDC_Init_FS+0x20>)
 8005ea6:	f7ff fb43 	bl	8005530 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8005eaa:	4620      	mov	r0, r4
 8005eac:	4904      	ldr	r1, [pc, #16]	@ (8005ec0 <CDC_Init_FS+0x24>)
 8005eae:	f7ff fb49 	bl	8005544 <USBD_CDC_SetRxBuffer>
}
 8005eb2:	2000      	movs	r0, #0
 8005eb4:	bd10      	pop	{r4, pc}
 8005eb6:	bf00      	nop
 8005eb8:	2000064c 	.word	0x2000064c
 8005ebc:	20000910 	.word	0x20000910
 8005ec0:	20000b10 	.word	0x20000b10

08005ec4 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8005ec4:	b510      	push	{r4, lr}
  uint8_t result = USBD_OK;
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8005ec6:	4c09      	ldr	r4, [pc, #36]	@ (8005eec <CDC_Transmit_FS+0x28>)
 8005ec8:	f8d4 32b8 	ldr.w	r3, [r4, #696]	@ 0x2b8
  if (hcdc->TxState != 0){
 8005ecc:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8005ed0:	b10b      	cbz	r3, 8005ed6 <CDC_Transmit_FS+0x12>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
  /* USER CODE END 7 */
  return result;
}
 8005ed2:	2001      	movs	r0, #1
 8005ed4:	bd10      	pop	{r4, pc}
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8005ed6:	460a      	mov	r2, r1
 8005ed8:	4601      	mov	r1, r0
 8005eda:	4620      	mov	r0, r4
 8005edc:	f7ff fb28 	bl	8005530 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8005ee0:	4620      	mov	r0, r4
}
 8005ee2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8005ee6:	f7ff bb35 	b.w	8005554 <USBD_CDC_TransmitPacket>
 8005eea:	bf00      	nop
 8005eec:	2000064c 	.word	0x2000064c

08005ef0 <USBD_FS_DeviceDescriptor>:
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8005ef0:	2312      	movs	r3, #18
  return USBD_FS_DeviceDesc;
}
 8005ef2:	4801      	ldr	r0, [pc, #4]	@ (8005ef8 <USBD_FS_DeviceDescriptor+0x8>)
  *length = sizeof(USBD_FS_DeviceDesc);
 8005ef4:	800b      	strh	r3, [r1, #0]
}
 8005ef6:	4770      	bx	lr
 8005ef8:	2000014c 	.word	0x2000014c

08005efc <USBD_FS_LangIDStrDescriptor>:
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8005efc:	2304      	movs	r3, #4
  return USBD_LangIDDesc;
}
 8005efe:	4801      	ldr	r0, [pc, #4]	@ (8005f04 <USBD_FS_LangIDStrDescriptor+0x8>)
  *length = sizeof(USBD_LangIDDesc);
 8005f00:	800b      	strh	r3, [r1, #0]
}
 8005f02:	4770      	bx	lr
 8005f04:	20000148 	.word	0x20000148

08005f08 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8005f08:	b510      	push	{r4, lr}
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8005f0a:	4c04      	ldr	r4, [pc, #16]	@ (8005f1c <USBD_FS_ManufacturerStrDescriptor+0x14>)
{
 8005f0c:	460a      	mov	r2, r1
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8005f0e:	4804      	ldr	r0, [pc, #16]	@ (8005f20 <USBD_FS_ManufacturerStrDescriptor+0x18>)
 8005f10:	4621      	mov	r1, r4
 8005f12:	f7ff fefb 	bl	8005d0c <USBD_GetString>
  return USBD_StrDesc;
}
 8005f16:	4620      	mov	r0, r4
 8005f18:	bd10      	pop	{r4, pc}
 8005f1a:	bf00      	nop
 8005f1c:	20000d10 	.word	0x20000d10
 8005f20:	0800ab1c 	.word	0x0800ab1c

08005f24 <USBD_FS_ProductStrDescriptor>:
{
 8005f24:	b510      	push	{r4, lr}
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8005f26:	4c04      	ldr	r4, [pc, #16]	@ (8005f38 <USBD_FS_ProductStrDescriptor+0x14>)
{
 8005f28:	460a      	mov	r2, r1
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8005f2a:	4804      	ldr	r0, [pc, #16]	@ (8005f3c <USBD_FS_ProductStrDescriptor+0x18>)
 8005f2c:	4621      	mov	r1, r4
 8005f2e:	f7ff feed 	bl	8005d0c <USBD_GetString>
}
 8005f32:	4620      	mov	r0, r4
 8005f34:	bd10      	pop	{r4, pc}
 8005f36:	bf00      	nop
 8005f38:	20000d10 	.word	0x20000d10
 8005f3c:	0800ab30 	.word	0x0800ab30

08005f40 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8005f40:	b510      	push	{r4, lr}
  if(speed == USBD_SPEED_HIGH)
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8005f42:	4c04      	ldr	r4, [pc, #16]	@ (8005f54 <USBD_FS_ConfigStrDescriptor+0x14>)
{
 8005f44:	460a      	mov	r2, r1
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8005f46:	4804      	ldr	r0, [pc, #16]	@ (8005f58 <USBD_FS_ConfigStrDescriptor+0x18>)
 8005f48:	4621      	mov	r1, r4
 8005f4a:	f7ff fedf 	bl	8005d0c <USBD_GetString>
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
  }
  return USBD_StrDesc;
}
 8005f4e:	4620      	mov	r0, r4
 8005f50:	bd10      	pop	{r4, pc}
 8005f52:	bf00      	nop
 8005f54:	20000d10 	.word	0x20000d10
 8005f58:	0800ab48 	.word	0x0800ab48

08005f5c <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8005f5c:	b510      	push	{r4, lr}
  if(speed == 0)
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8005f5e:	4c04      	ldr	r4, [pc, #16]	@ (8005f70 <USBD_FS_InterfaceStrDescriptor+0x14>)
{
 8005f60:	460a      	mov	r2, r1
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8005f62:	4804      	ldr	r0, [pc, #16]	@ (8005f74 <USBD_FS_InterfaceStrDescriptor+0x18>)
 8005f64:	4621      	mov	r1, r4
 8005f66:	f7ff fed1 	bl	8005d0c <USBD_GetString>
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
  }
  return USBD_StrDesc;
}
 8005f6a:	4620      	mov	r0, r4
 8005f6c:	bd10      	pop	{r4, pc}
 8005f6e:	bf00      	nop
 8005f70:	20000d10 	.word	0x20000d10
 8005f74:	0800ab54 	.word	0x0800ab54

08005f78 <USBD_FS_SerialStrDescriptor>:
  *length = USB_SIZ_STRING_SERIAL;
 8005f78:	f04f 0c1a 	mov.w	ip, #26
{
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8005f7c:	4a51      	ldr	r2, [pc, #324]	@ (80060c4 <USBD_FS_SerialStrDescriptor+0x14c>)
 8005f7e:	f8d2 37e8 	ldr.w	r3, [r2, #2024]	@ 0x7e8
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
  deviceserial2 = *(uint32_t *) DEVICE_ID3;

  deviceserial0 += deviceserial2;
 8005f82:	f8d2 07f0 	ldr.w	r0, [r2, #2032]	@ 0x7f0
  *length = USB_SIZ_STRING_SERIAL;
 8005f86:	f8a1 c000 	strh.w	ip, [r1]

  if (deviceserial0 != 0)
 8005f8a:	181b      	adds	r3, r3, r0
 8005f8c:	d101      	bne.n	8005f92 <USBD_FS_SerialStrDescriptor+0x1a>
}
 8005f8e:	484e      	ldr	r0, [pc, #312]	@ (80060c8 <USBD_FS_SerialStrDescriptor+0x150>)
 8005f90:	4770      	bx	lr
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8005f92:	f8d2 17ec 	ldr.w	r1, [r2, #2028]	@ 0x7ec

  for (idx = 0; idx < len; idx++)
  {
    if (((value >> 28)) < 0xA)
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8005f96:	0f18      	lsrs	r0, r3, #28
 8005f98:	4a4b      	ldr	r2, [pc, #300]	@ (80060c8 <USBD_FS_SerialStrDescriptor+0x150>)
    if (((value >> 28)) < 0xA)
 8005f9a:	f1b3 4f20 	cmp.w	r3, #2684354560	@ 0xa0000000
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8005f9e:	bf2c      	ite	cs
 8005fa0:	3037      	addcs	r0, #55	@ 0x37
      pbuf[2 * idx] = (value >> 28) + '0';
 8005fa2:	3030      	addcc	r0, #48	@ 0x30
    if (((value >> 28)) < 0xA)
 8005fa4:	f3c3 6c03 	ubfx	ip, r3, #24, #4
{
 8005fa8:	b500      	push	{lr}
      pbuf[2 * idx] = (value >> 28) + '0';
 8005faa:	7090      	strb	r0, [r2, #2]
 8005fac:	4660      	mov	r0, ip
    if (((value >> 28)) < 0xA)
 8005fae:	f1bc 0f09 	cmp.w	ip, #9
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8005fb2:	bf8c      	ite	hi
 8005fb4:	3037      	addhi	r0, #55	@ 0x37
      pbuf[2 * idx] = (value >> 28) + '0';
 8005fb6:	3030      	addls	r0, #48	@ 0x30
    if (((value >> 28)) < 0xA)
 8005fb8:	f3c3 5c03 	ubfx	ip, r3, #20, #4
      pbuf[2 * idx] = (value >> 28) + '0';
 8005fbc:	7110      	strb	r0, [r2, #4]
 8005fbe:	4660      	mov	r0, ip
    if (((value >> 28)) < 0xA)
 8005fc0:	f1bc 0f09 	cmp.w	ip, #9
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8005fc4:	bf8c      	ite	hi
 8005fc6:	3037      	addhi	r0, #55	@ 0x37
      pbuf[2 * idx] = (value >> 28) + '0';
 8005fc8:	3030      	addls	r0, #48	@ 0x30
    if (((value >> 28)) < 0xA)
 8005fca:	f3c3 4c03 	ubfx	ip, r3, #16, #4
      pbuf[2 * idx] = (value >> 28) + '0';
 8005fce:	7190      	strb	r0, [r2, #6]
 8005fd0:	4660      	mov	r0, ip
    if (((value >> 28)) < 0xA)
 8005fd2:	f1bc 0f09 	cmp.w	ip, #9
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8005fd6:	bf8c      	ite	hi
 8005fd8:	3037      	addhi	r0, #55	@ 0x37
      pbuf[2 * idx] = (value >> 28) + '0';
 8005fda:	3030      	addls	r0, #48	@ 0x30
    if (((value >> 28)) < 0xA)
 8005fdc:	f3c3 3c03 	ubfx	ip, r3, #12, #4
      pbuf[2 * idx] = (value >> 28) + '0';
 8005fe0:	7210      	strb	r0, [r2, #8]
 8005fe2:	4660      	mov	r0, ip
    if (((value >> 28)) < 0xA)
 8005fe4:	f1bc 0f09 	cmp.w	ip, #9
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8005fe8:	bf8c      	ite	hi
 8005fea:	3037      	addhi	r0, #55	@ 0x37
      pbuf[2 * idx] = (value >> 28) + '0';
 8005fec:	3030      	addls	r0, #48	@ 0x30
    if (((value >> 28)) < 0xA)
 8005fee:	f3c3 2c03 	ubfx	ip, r3, #8, #4
      pbuf[2 * idx] = (value >> 28) + '0';
 8005ff2:	7290      	strb	r0, [r2, #10]
 8005ff4:	4660      	mov	r0, ip
    }

    value = value << 4;

    pbuf[2 * idx + 1] = 0;
 8005ff6:	f04f 0e00 	mov.w	lr, #0
    if (((value >> 28)) < 0xA)
 8005ffa:	f1bc 0f09 	cmp.w	ip, #9
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8005ffe:	bf8c      	ite	hi
 8006000:	3037      	addhi	r0, #55	@ 0x37
      pbuf[2 * idx] = (value >> 28) + '0';
 8006002:	3030      	addls	r0, #48	@ 0x30
    if (((value >> 28)) < 0xA)
 8006004:	f3c3 1c03 	ubfx	ip, r3, #4, #4
      pbuf[2 * idx] = (value >> 28) + '0';
 8006008:	7310      	strb	r0, [r2, #12]
 800600a:	4660      	mov	r0, ip
    pbuf[2 * idx + 1] = 0;
 800600c:	f882 e003 	strb.w	lr, [r2, #3]
 8006010:	f04f 0e00 	mov.w	lr, #0
    if (((value >> 28)) < 0xA)
 8006014:	f1bc 0f09 	cmp.w	ip, #9
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8006018:	bf8c      	ite	hi
 800601a:	3037      	addhi	r0, #55	@ 0x37
      pbuf[2 * idx] = (value >> 28) + '0';
 800601c:	3030      	addls	r0, #48	@ 0x30
 800601e:	7390      	strb	r0, [r2, #14]
    if (((value >> 28)) < 0xA)
 8006020:	f003 000f 	and.w	r0, r3, #15
      pbuf[2 * idx] = (value >> 28) + '0';
 8006024:	4603      	mov	r3, r0
    if (((value >> 28)) < 0xA)
 8006026:	2809      	cmp	r0, #9
    pbuf[2 * idx + 1] = 0;
 8006028:	f04f 0000 	mov.w	r0, #0
 800602c:	f04f 0c00 	mov.w	ip, #0
 8006030:	f882 e005 	strb.w	lr, [r2, #5]
 8006034:	f04f 0e00 	mov.w	lr, #0
      pbuf[2 * idx] = (value >> 28) + '0';
 8006038:	bf94      	ite	ls
 800603a:	3330      	addls	r3, #48	@ 0x30
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800603c:	3337      	addhi	r3, #55	@ 0x37
      pbuf[2 * idx] = (value >> 28) + '0';
 800603e:	7413      	strb	r3, [r2, #16]
    if (((value >> 28)) < 0xA)
 8006040:	f1b1 4f20 	cmp.w	r1, #2684354560	@ 0xa0000000
      pbuf[2 * idx] = (value >> 28) + '0';
 8006044:	ea4f 7311 	mov.w	r3, r1, lsr #28
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8006048:	bf2c      	ite	cs
 800604a:	3337      	addcs	r3, #55	@ 0x37
      pbuf[2 * idx] = (value >> 28) + '0';
 800604c:	3330      	addcc	r3, #48	@ 0x30
    pbuf[2 * idx + 1] = 0;
 800604e:	7450      	strb	r0, [r2, #17]
    if (((value >> 28)) < 0xA)
 8006050:	f3c1 6003 	ubfx	r0, r1, #24, #4
      pbuf[2 * idx] = (value >> 28) + '0';
 8006054:	7493      	strb	r3, [r2, #18]
 8006056:	4603      	mov	r3, r0
    pbuf[2 * idx + 1] = 0;
 8006058:	f882 e007 	strb.w	lr, [r2, #7]
 800605c:	f882 c00f 	strb.w	ip, [r2, #15]
 8006060:	f04f 0e00 	mov.w	lr, #0
 8006064:	f04f 0c00 	mov.w	ip, #0
    if (((value >> 28)) < 0xA)
 8006068:	2809      	cmp	r0, #9
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800606a:	bf8c      	ite	hi
 800606c:	3337      	addhi	r3, #55	@ 0x37
      pbuf[2 * idx] = (value >> 28) + '0';
 800606e:	3330      	addls	r3, #48	@ 0x30
    if (((value >> 28)) < 0xA)
 8006070:	f3c1 5003 	ubfx	r0, r1, #20, #4
      pbuf[2 * idx] = (value >> 28) + '0';
 8006074:	7513      	strb	r3, [r2, #20]
 8006076:	4603      	mov	r3, r0
    pbuf[2 * idx + 1] = 0;
 8006078:	f882 e009 	strb.w	lr, [r2, #9]
 800607c:	f882 c013 	strb.w	ip, [r2, #19]
 8006080:	f04f 0e00 	mov.w	lr, #0
 8006084:	f04f 0c00 	mov.w	ip, #0
    if (((value >> 28)) < 0xA)
 8006088:	2809      	cmp	r0, #9
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800608a:	bf8c      	ite	hi
 800608c:	3337      	addhi	r3, #55	@ 0x37
      pbuf[2 * idx] = (value >> 28) + '0';
 800608e:	3330      	addls	r3, #48	@ 0x30
    if (((value >> 28)) < 0xA)
 8006090:	f3c1 4003 	ubfx	r0, r1, #16, #4
      pbuf[2 * idx] = (value >> 28) + '0';
 8006094:	7593      	strb	r3, [r2, #22]
 8006096:	4603      	mov	r3, r0
    pbuf[2 * idx + 1] = 0;
 8006098:	2100      	movs	r1, #0
 800609a:	f882 e00b 	strb.w	lr, [r2, #11]
 800609e:	f882 c015 	strb.w	ip, [r2, #21]
 80060a2:	f04f 0e00 	mov.w	lr, #0
 80060a6:	f04f 0c00 	mov.w	ip, #0
    if (((value >> 28)) < 0xA)
 80060aa:	2809      	cmp	r0, #9
      pbuf[2 * idx] = (value >> 28) + '0';
 80060ac:	bf94      	ite	ls
 80060ae:	3330      	addls	r3, #48	@ 0x30
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80060b0:	3337      	addhi	r3, #55	@ 0x37
    pbuf[2 * idx + 1] = 0;
 80060b2:	f882 e00d 	strb.w	lr, [r2, #13]
 80060b6:	f882 c017 	strb.w	ip, [r2, #23]
      pbuf[2 * idx] = (value >> 28) + '0';
 80060ba:	7613      	strb	r3, [r2, #24]
    pbuf[2 * idx + 1] = 0;
 80060bc:	7651      	strb	r1, [r2, #25]
}
 80060be:	4802      	ldr	r0, [pc, #8]	@ (80060c8 <USBD_FS_SerialStrDescriptor+0x150>)
 80060c0:	f85d fb04 	ldr.w	pc, [sp], #4
 80060c4:	1ffff000 	.word	0x1ffff000
 80060c8:	2000012c 	.word	0x2000012c

080060cc <HAL_PCD_MspInit>:
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
  if(pcdHandle->Instance==USB)
 80060cc:	4b0e      	ldr	r3, [pc, #56]	@ (8006108 <HAL_PCD_MspInit+0x3c>)
 80060ce:	6802      	ldr	r2, [r0, #0]
 80060d0:	429a      	cmp	r2, r3
 80060d2:	d000      	beq.n	80060d6 <HAL_PCD_MspInit+0xa>
 80060d4:	4770      	bx	lr
  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 80060d6:	2200      	movs	r2, #0
    __HAL_RCC_USB_CLK_ENABLE();
 80060d8:	f503 33da 	add.w	r3, r3, #111616	@ 0x1b400
 80060dc:	69d9      	ldr	r1, [r3, #28]
{
 80060de:	b500      	push	{lr}
    __HAL_RCC_USB_CLK_ENABLE();
 80060e0:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 80060e4:	61d9      	str	r1, [r3, #28]
 80060e6:	69db      	ldr	r3, [r3, #28]
{
 80060e8:	b083      	sub	sp, #12
    __HAL_RCC_USB_CLK_ENABLE();
 80060ea:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80060ee:	9301      	str	r3, [sp, #4]
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 80060f0:	2014      	movs	r0, #20
 80060f2:	4611      	mov	r1, r2
    __HAL_RCC_USB_CLK_ENABLE();
 80060f4:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 80060f6:	f7fc f98b 	bl	8002410 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 80060fa:	2014      	movs	r0, #20
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 80060fc:	b003      	add	sp, #12
 80060fe:	f85d eb04 	ldr.w	lr, [sp], #4
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 8006102:	f7fc b9c1 	b.w	8002488 <HAL_NVIC_EnableIRQ>
 8006106:	bf00      	nop
 8006108:	40005c00 	.word	0x40005c00

0800610c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800610c:	4601      	mov	r1, r0
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800610e:	f8d0 02d4 	ldr.w	r0, [r0, #724]	@ 0x2d4
 8006112:	f501 7126 	add.w	r1, r1, #664	@ 0x298
 8006116:	f7ff ba89 	b.w	800562c <USBD_LL_SetupStage>
 800611a:	bf00      	nop

0800611c <HAL_PCD_DataOutStageCallback>:
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800611c:	eb01 0381 	add.w	r3, r1, r1, lsl #2
 8006120:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
 8006124:	f8d3 2164 	ldr.w	r2, [r3, #356]	@ 0x164
 8006128:	f8d0 02d4 	ldr.w	r0, [r0, #724]	@ 0x2d4
 800612c:	f7ff baae 	b.w	800568c <USBD_LL_DataOutStage>

08006130 <HAL_PCD_DataInStageCallback>:
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8006130:	eb01 0381 	add.w	r3, r1, r1, lsl #2
 8006134:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
 8006138:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800613a:	f8d0 02d4 	ldr.w	r0, [r0, #724]	@ 0x2d4
 800613e:	f7ff badf 	b.w	8005700 <USBD_LL_DataInStage>
 8006142:	bf00      	nop

08006144 <HAL_PCD_SOFCallback>:
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8006144:	f8d0 02d4 	ldr.w	r0, [r0, #724]	@ 0x2d4
 8006148:	f7ff bb7a 	b.w	8005840 <USBD_LL_SOF>

0800614c <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800614c:	b510      	push	{r4, lr}
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800614e:	7983      	ldrb	r3, [r0, #6]
{
 8006150:	4604      	mov	r4, r0
  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8006152:	2b02      	cmp	r3, #2
 8006154:	d001      	beq.n	800615a <HAL_PCD_ResetCallback+0xe>
  {
    Error_Handler();
 8006156:	f7fb fcbb 	bl	8001ad0 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800615a:	f8d4 02d4 	ldr.w	r0, [r4, #724]	@ 0x2d4
 800615e:	2101      	movs	r1, #1
 8006160:	f7ff fb56 	bl	8005810 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8006164:	f8d4 02d4 	ldr.w	r0, [r4, #724]	@ 0x2d4
}
 8006168:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800616c:	f7ff bb28 	b.w	80057c0 <USBD_LL_Reset>

08006170 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006170:	b510      	push	{r4, lr}
 8006172:	4604      	mov	r4, r0
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8006174:	f8d0 02d4 	ldr.w	r0, [r0, #724]	@ 0x2d4
 8006178:	f7ff fb4e 	bl	8005818 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800617c:	7aa3      	ldrb	r3, [r4, #10]
 800617e:	b123      	cbz	r3, 800618a <HAL_PCD_SuspendCallback+0x1a>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8006180:	4a02      	ldr	r2, [pc, #8]	@ (800618c <HAL_PCD_SuspendCallback+0x1c>)
 8006182:	6913      	ldr	r3, [r2, #16]
 8006184:	f043 0306 	orr.w	r3, r3, #6
 8006188:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800618a:	bd10      	pop	{r4, pc}
 800618c:	e000ed00 	.word	0xe000ed00

08006190 <HAL_PCD_ResumeCallback>:
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8006190:	f8d0 02d4 	ldr.w	r0, [r0, #724]	@ 0x2d4
 8006194:	f7ff bb4a 	b.w	800582c <USBD_LL_Resume>

08006198 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8006198:	b510      	push	{r4, lr}
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
  pdev->pData = &hpcd_USB_FS;

  hpcd_USB_FS.Instance = USB;
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800619a:	2408      	movs	r4, #8
  hpcd_USB_FS.pData = pdev;
 800619c:	4b1d      	ldr	r3, [pc, #116]	@ (8006214 <USBD_LL_Init+0x7c>)
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800619e:	2200      	movs	r2, #0
  hpcd_USB_FS.Init.dev_endpoints = 8;
 80061a0:	711c      	strb	r4, [r3, #4]
{
 80061a2:	4604      	mov	r4, r0
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 80061a4:	2102      	movs	r1, #2
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 80061a6:	815a      	strh	r2, [r3, #10]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 80061a8:	731a      	strb	r2, [r3, #12]
  hpcd_USB_FS.Instance = USB;
 80061aa:	4a1b      	ldr	r2, [pc, #108]	@ (8006218 <USBD_LL_Init+0x80>)
  hpcd_USB_FS.pData = pdev;
 80061ac:	f8c3 42d4 	str.w	r4, [r3, #724]	@ 0x2d4
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 80061b0:	4618      	mov	r0, r3
  pdev->pData = &hpcd_USB_FS;
 80061b2:	f8c4 32c0 	str.w	r3, [r4, #704]	@ 0x2c0
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 80061b6:	7199      	strb	r1, [r3, #6]
  hpcd_USB_FS.Instance = USB;
 80061b8:	601a      	str	r2, [r3, #0]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 80061ba:	f7fc faab 	bl	8002714 <HAL_PCD_Init>
 80061be:	bb30      	cbnz	r0, 800620e <USBD_LL_Init+0x76>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 80061c0:	2200      	movs	r2, #0
 80061c2:	2318      	movs	r3, #24
 80061c4:	4611      	mov	r1, r2
 80061c6:	f8d4 02c0 	ldr.w	r0, [r4, #704]	@ 0x2c0
 80061ca:	f7fd fa7f 	bl	80036cc <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 80061ce:	2358      	movs	r3, #88	@ 0x58
 80061d0:	2200      	movs	r2, #0
 80061d2:	2180      	movs	r1, #128	@ 0x80
 80061d4:	f8d4 02c0 	ldr.w	r0, [r4, #704]	@ 0x2c0
 80061d8:	f7fd fa78 	bl	80036cc <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 80061dc:	23c0      	movs	r3, #192	@ 0xc0
 80061de:	2200      	movs	r2, #0
 80061e0:	2181      	movs	r1, #129	@ 0x81
 80061e2:	f8d4 02c0 	ldr.w	r0, [r4, #704]	@ 0x2c0
 80061e6:	f7fd fa71 	bl	80036cc <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 80061ea:	f44f 7388 	mov.w	r3, #272	@ 0x110
 80061ee:	2200      	movs	r2, #0
 80061f0:	2101      	movs	r1, #1
 80061f2:	f8d4 02c0 	ldr.w	r0, [r4, #704]	@ 0x2c0
 80061f6:	f7fd fa69 	bl	80036cc <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 80061fa:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80061fe:	2200      	movs	r2, #0
 8006200:	2182      	movs	r1, #130	@ 0x82
 8006202:	f8d4 02c0 	ldr.w	r0, [r4, #704]	@ 0x2c0
 8006206:	f7fd fa61 	bl	80036cc <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
}
 800620a:	2000      	movs	r0, #0
 800620c:	bd10      	pop	{r4, pc}
    Error_Handler( );
 800620e:	f7fb fc5f 	bl	8001ad0 <Error_Handler>
 8006212:	e7d5      	b.n	80061c0 <USBD_LL_Init+0x28>
 8006214:	20001130 	.word	0x20001130
 8006218:	40005c00 	.word	0x40005c00

0800621c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800621c:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;

  hal_status = HAL_PCD_Start(pdev->pData);
 800621e:	f8d0 02c0 	ldr.w	r0, [r0, #704]	@ 0x2c0
 8006222:	f7fc fb6f 	bl	8002904 <HAL_PCD_Start>
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
  USBD_StatusTypeDef usb_status = USBD_OK;

  switch (hal_status)
 8006226:	b118      	cbz	r0, 8006230 <USBD_LL_Start+0x14>
 8006228:	2802      	cmp	r0, #2
 800622a:	bf0c      	ite	eq
 800622c:	2001      	moveq	r0, #1
 800622e:	2002      	movne	r0, #2
}
 8006230:	bd08      	pop	{r3, pc}
 8006232:	bf00      	nop

08006234 <USBD_LL_OpenEP>:
{
 8006234:	4694      	mov	ip, r2
 8006236:	b508      	push	{r3, lr}
 8006238:	461a      	mov	r2, r3
  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800623a:	f8d0 02c0 	ldr.w	r0, [r0, #704]	@ 0x2c0
 800623e:	4663      	mov	r3, ip
 8006240:	f7fd f928 	bl	8003494 <HAL_PCD_EP_Open>
  switch (hal_status)
 8006244:	b118      	cbz	r0, 800624e <USBD_LL_OpenEP+0x1a>
 8006246:	2802      	cmp	r0, #2
 8006248:	bf0c      	ite	eq
 800624a:	2001      	moveq	r0, #1
 800624c:	2002      	movne	r0, #2
}
 800624e:	bd08      	pop	{r3, pc}

08006250 <USBD_LL_CloseEP>:
{
 8006250:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8006252:	f8d0 02c0 	ldr.w	r0, [r0, #704]	@ 0x2c0
 8006256:	f7fd f953 	bl	8003500 <HAL_PCD_EP_Close>
  switch (hal_status)
 800625a:	b118      	cbz	r0, 8006264 <USBD_LL_CloseEP+0x14>
 800625c:	2802      	cmp	r0, #2
 800625e:	bf0c      	ite	eq
 8006260:	2001      	moveq	r0, #1
 8006262:	2002      	movne	r0, #2
}
 8006264:	bd08      	pop	{r3, pc}
 8006266:	bf00      	nop

08006268 <USBD_LL_StallEP>:
{
 8006268:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800626a:	f8d0 02c0 	ldr.w	r0, [r0, #704]	@ 0x2c0
 800626e:	f7fd f9b5 	bl	80035dc <HAL_PCD_EP_SetStall>
  switch (hal_status)
 8006272:	b118      	cbz	r0, 800627c <USBD_LL_StallEP+0x14>
 8006274:	2802      	cmp	r0, #2
 8006276:	bf0c      	ite	eq
 8006278:	2001      	moveq	r0, #1
 800627a:	2002      	movne	r0, #2
}
 800627c:	bd08      	pop	{r3, pc}
 800627e:	bf00      	nop

08006280 <USBD_LL_ClearStallEP>:
{
 8006280:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8006282:	f8d0 02c0 	ldr.w	r0, [r0, #704]	@ 0x2c0
 8006286:	f7fd f9e9 	bl	800365c <HAL_PCD_EP_ClrStall>
  switch (hal_status)
 800628a:	b118      	cbz	r0, 8006294 <USBD_LL_ClearStallEP+0x14>
 800628c:	2802      	cmp	r0, #2
 800628e:	bf0c      	ite	eq
 8006290:	2001      	moveq	r0, #1
 8006292:	2002      	movne	r0, #2
}
 8006294:	bd08      	pop	{r3, pc}
 8006296:	bf00      	nop

08006298 <USBD_LL_IsStallEP>:
  if((ep_addr & 0x80) == 0x80)
 8006298:	060a      	lsls	r2, r1, #24
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800629a:	f8d0 32c0 	ldr.w	r3, [r0, #704]	@ 0x2c0
  if((ep_addr & 0x80) == 0x80)
 800629e:	d406      	bmi.n	80062ae <USBD_LL_IsStallEP+0x16>
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 80062a0:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 80062a4:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 80062a8:	f893 0152 	ldrb.w	r0, [r3, #338]	@ 0x152
}
 80062ac:	4770      	bx	lr
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 80062ae:	f001 017f 	and.w	r1, r1, #127	@ 0x7f
 80062b2:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 80062b6:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 80062ba:	7c98      	ldrb	r0, [r3, #18]
 80062bc:	4770      	bx	lr
 80062be:	bf00      	nop

080062c0 <USBD_LL_SetUSBAddress>:
{
 80062c0:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80062c2:	f8d0 02c0 	ldr.w	r0, [r0, #704]	@ 0x2c0
 80062c6:	f7fd f8d1 	bl	800346c <HAL_PCD_SetAddress>
  switch (hal_status)
 80062ca:	b118      	cbz	r0, 80062d4 <USBD_LL_SetUSBAddress+0x14>
 80062cc:	2802      	cmp	r0, #2
 80062ce:	bf0c      	ite	eq
 80062d0:	2001      	moveq	r0, #1
 80062d2:	2002      	movne	r0, #2
}
 80062d4:	bd08      	pop	{r3, pc}
 80062d6:	bf00      	nop

080062d8 <USBD_LL_Transmit>:
{
 80062d8:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80062da:	f8d0 02c0 	ldr.w	r0, [r0, #704]	@ 0x2c0
 80062de:	f7fd f95f 	bl	80035a0 <HAL_PCD_EP_Transmit>
  switch (hal_status)
 80062e2:	b118      	cbz	r0, 80062ec <USBD_LL_Transmit+0x14>
 80062e4:	2802      	cmp	r0, #2
 80062e6:	bf0c      	ite	eq
 80062e8:	2001      	moveq	r0, #1
 80062ea:	2002      	movne	r0, #2
}
 80062ec:	bd08      	pop	{r3, pc}
 80062ee:	bf00      	nop

080062f0 <USBD_LL_PrepareReceive>:
{
 80062f0:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80062f2:	f8d0 02c0 	ldr.w	r0, [r0, #704]	@ 0x2c0
 80062f6:	f7fd f931 	bl	800355c <HAL_PCD_EP_Receive>
  switch (hal_status)
 80062fa:	b118      	cbz	r0, 8006304 <USBD_LL_PrepareReceive+0x14>
 80062fc:	2802      	cmp	r0, #2
 80062fe:	bf0c      	ite	eq
 8006300:	2001      	moveq	r0, #1
 8006302:	2002      	movne	r0, #2
}
 8006304:	bd08      	pop	{r3, pc}
 8006306:	bf00      	nop

08006308 <USBD_LL_GetRxDataSize>:
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8006308:	f8d0 02c0 	ldr.w	r0, [r0, #704]	@ 0x2c0
 800630c:	f7fd b93e 	b.w	800358c <HAL_PCD_EP_GetRxCount>

08006310 <USBD_static_malloc>:
}
 8006310:	4800      	ldr	r0, [pc, #0]	@ (8006314 <USBD_static_malloc+0x4>)
 8006312:	4770      	bx	lr
 8006314:	20000f10 	.word	0x20000f10

08006318 <USBD_static_free>:
}
 8006318:	4770      	bx	lr
 800631a:	bf00      	nop

0800631c <HAL_PCDEx_SetConnectionState>:
}
 800631c:	4770      	bx	lr
 800631e:	bf00      	nop

08006320 <exp>:
 8006320:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006322:	4606      	mov	r6, r0
 8006324:	460f      	mov	r7, r1
 8006326:	f000 f83b 	bl	80063a0 <__ieee754_exp>
 800632a:	4604      	mov	r4, r0
 800632c:	460d      	mov	r5, r1
 800632e:	4630      	mov	r0, r6
 8006330:	4639      	mov	r1, r7
 8006332:	f000 f82f 	bl	8006394 <finite>
 8006336:	b168      	cbz	r0, 8006354 <exp+0x34>
 8006338:	a311      	add	r3, pc, #68	@ (adr r3, 8006380 <exp+0x60>)
 800633a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800633e:	4630      	mov	r0, r6
 8006340:	4639      	mov	r1, r7
 8006342:	f7fa fc0d 	bl	8000b60 <__aeabi_dcmpgt>
 8006346:	b140      	cbz	r0, 800635a <exp+0x3a>
 8006348:	f001 fdb8 	bl	8007ebc <__errno>
 800634c:	2322      	movs	r3, #34	@ 0x22
 800634e:	2400      	movs	r4, #0
 8006350:	4d0f      	ldr	r5, [pc, #60]	@ (8006390 <exp+0x70>)
 8006352:	6003      	str	r3, [r0, #0]
 8006354:	4620      	mov	r0, r4
 8006356:	4629      	mov	r1, r5
 8006358:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800635a:	4630      	mov	r0, r6
 800635c:	a30a      	add	r3, pc, #40	@ (adr r3, 8006388 <exp+0x68>)
 800635e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006362:	4639      	mov	r1, r7
 8006364:	f7fa fbde 	bl	8000b24 <__aeabi_dcmplt>
 8006368:	2800      	cmp	r0, #0
 800636a:	d0f3      	beq.n	8006354 <exp+0x34>
 800636c:	f001 fda6 	bl	8007ebc <__errno>
 8006370:	2322      	movs	r3, #34	@ 0x22
 8006372:	2400      	movs	r4, #0
 8006374:	2500      	movs	r5, #0
 8006376:	6003      	str	r3, [r0, #0]
 8006378:	e7ec      	b.n	8006354 <exp+0x34>
 800637a:	bf00      	nop
 800637c:	f3af 8000 	nop.w
 8006380:	fefa39ef 	.word	0xfefa39ef
 8006384:	40862e42 	.word	0x40862e42
 8006388:	d52d3051 	.word	0xd52d3051
 800638c:	c0874910 	.word	0xc0874910
 8006390:	7ff00000 	.word	0x7ff00000

08006394 <finite>:
 8006394:	f041 4000 	orr.w	r0, r1, #2147483648	@ 0x80000000
 8006398:	f500 1080 	add.w	r0, r0, #1048576	@ 0x100000
 800639c:	0fc0      	lsrs	r0, r0, #31
 800639e:	4770      	bx	lr

080063a0 <__ieee754_exp>:
 80063a0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80063a4:	4fae      	ldr	r7, [pc, #696]	@ (8006660 <__ieee754_exp+0x2c0>)
 80063a6:	f021 4200 	bic.w	r2, r1, #2147483648	@ 0x80000000
 80063aa:	42ba      	cmp	r2, r7
 80063ac:	4604      	mov	r4, r0
 80063ae:	460d      	mov	r5, r1
 80063b0:	ea4f 76d1 	mov.w	r6, r1, lsr #31
 80063b4:	d932      	bls.n	800641c <__ieee754_exp+0x7c>
 80063b6:	4fab      	ldr	r7, [pc, #684]	@ (8006664 <__ieee754_exp+0x2c4>)
 80063b8:	42ba      	cmp	r2, r7
 80063ba:	d912      	bls.n	80063e2 <__ieee754_exp+0x42>
 80063bc:	f3c1 0313 	ubfx	r3, r1, #0, #20
 80063c0:	4303      	orrs	r3, r0
 80063c2:	4602      	mov	r2, r0
 80063c4:	d005      	beq.n	80063d2 <__ieee754_exp+0x32>
 80063c6:	460b      	mov	r3, r1
 80063c8:	f7f9 ff84 	bl	80002d4 <__adddf3>
 80063cc:	4604      	mov	r4, r0
 80063ce:	460d      	mov	r5, r1
 80063d0:	e002      	b.n	80063d8 <__ieee754_exp+0x38>
 80063d2:	2e00      	cmp	r6, #0
 80063d4:	f040 8112 	bne.w	80065fc <__ieee754_exp+0x25c>
 80063d8:	4620      	mov	r0, r4
 80063da:	4629      	mov	r1, r5
 80063dc:	b004      	add	sp, #16
 80063de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80063e2:	a389      	add	r3, pc, #548	@ (adr r3, 8006608 <__ieee754_exp+0x268>)
 80063e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063e8:	f7fa fbba 	bl	8000b60 <__aeabi_dcmpgt>
 80063ec:	4607      	mov	r7, r0
 80063ee:	b128      	cbz	r0, 80063fc <__ieee754_exp+0x5c>
 80063f0:	2000      	movs	r0, #0
 80063f2:	b004      	add	sp, #16
 80063f4:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80063f8:	f000 b966 	b.w	80066c8 <__math_oflow>
 80063fc:	4620      	mov	r0, r4
 80063fe:	a384      	add	r3, pc, #528	@ (adr r3, 8006610 <__ieee754_exp+0x270>)
 8006400:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006404:	4629      	mov	r1, r5
 8006406:	f7fa fb8d 	bl	8000b24 <__aeabi_dcmplt>
 800640a:	2800      	cmp	r0, #0
 800640c:	f000 8085 	beq.w	800651a <__ieee754_exp+0x17a>
 8006410:	4638      	mov	r0, r7
 8006412:	b004      	add	sp, #16
 8006414:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006418:	f000 b951 	b.w	80066be <__math_uflow>
 800641c:	4b92      	ldr	r3, [pc, #584]	@ (8006668 <__ieee754_exp+0x2c8>)
 800641e:	429a      	cmp	r2, r3
 8006420:	f240 80a7 	bls.w	8006572 <__ieee754_exp+0x1d2>
 8006424:	4b91      	ldr	r3, [pc, #580]	@ (800666c <__ieee754_exp+0x2cc>)
 8006426:	429a      	cmp	r2, r3
 8006428:	d877      	bhi.n	800651a <__ieee754_exp+0x17a>
 800642a:	4b91      	ldr	r3, [pc, #580]	@ (8006670 <__ieee754_exp+0x2d0>)
 800642c:	00f4      	lsls	r4, r6, #3
 800642e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8006432:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006436:	f7f9 ff4b 	bl	80002d0 <__aeabi_dsub>
 800643a:	4680      	mov	r8, r0
 800643c:	4689      	mov	r9, r1
 800643e:	4b8d      	ldr	r3, [pc, #564]	@ (8006674 <__ieee754_exp+0x2d4>)
 8006440:	f1c6 0a01 	rsb	sl, r6, #1
 8006444:	4423      	add	r3, r4
 8006446:	e9d3 3400 	ldrd	r3, r4, [r3]
 800644a:	e9cd 3400 	strd	r3, r4, [sp]
 800644e:	ebaa 0a06 	sub.w	sl, sl, r6
 8006452:	4640      	mov	r0, r8
 8006454:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006458:	4649      	mov	r1, r9
 800645a:	f7f9 ff39 	bl	80002d0 <__aeabi_dsub>
 800645e:	4604      	mov	r4, r0
 8006460:	460d      	mov	r5, r1
 8006462:	4622      	mov	r2, r4
 8006464:	462b      	mov	r3, r5
 8006466:	4620      	mov	r0, r4
 8006468:	4629      	mov	r1, r5
 800646a:	f7fa f8e9 	bl	8000640 <__aeabi_dmul>
 800646e:	a36a      	add	r3, pc, #424	@ (adr r3, 8006618 <__ieee754_exp+0x278>)
 8006470:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006474:	4606      	mov	r6, r0
 8006476:	460f      	mov	r7, r1
 8006478:	f7fa f8e2 	bl	8000640 <__aeabi_dmul>
 800647c:	a368      	add	r3, pc, #416	@ (adr r3, 8006620 <__ieee754_exp+0x280>)
 800647e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006482:	f7f9 ff25 	bl	80002d0 <__aeabi_dsub>
 8006486:	4632      	mov	r2, r6
 8006488:	463b      	mov	r3, r7
 800648a:	f7fa f8d9 	bl	8000640 <__aeabi_dmul>
 800648e:	a366      	add	r3, pc, #408	@ (adr r3, 8006628 <__ieee754_exp+0x288>)
 8006490:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006494:	f7f9 ff1e 	bl	80002d4 <__adddf3>
 8006498:	4632      	mov	r2, r6
 800649a:	463b      	mov	r3, r7
 800649c:	f7fa f8d0 	bl	8000640 <__aeabi_dmul>
 80064a0:	a363      	add	r3, pc, #396	@ (adr r3, 8006630 <__ieee754_exp+0x290>)
 80064a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064a6:	f7f9 ff13 	bl	80002d0 <__aeabi_dsub>
 80064aa:	4632      	mov	r2, r6
 80064ac:	463b      	mov	r3, r7
 80064ae:	f7fa f8c7 	bl	8000640 <__aeabi_dmul>
 80064b2:	a361      	add	r3, pc, #388	@ (adr r3, 8006638 <__ieee754_exp+0x298>)
 80064b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064b8:	f7f9 ff0c 	bl	80002d4 <__adddf3>
 80064bc:	4632      	mov	r2, r6
 80064be:	463b      	mov	r3, r7
 80064c0:	f7fa f8be 	bl	8000640 <__aeabi_dmul>
 80064c4:	4602      	mov	r2, r0
 80064c6:	460b      	mov	r3, r1
 80064c8:	4620      	mov	r0, r4
 80064ca:	4629      	mov	r1, r5
 80064cc:	f7f9 ff00 	bl	80002d0 <__aeabi_dsub>
 80064d0:	4602      	mov	r2, r0
 80064d2:	460b      	mov	r3, r1
 80064d4:	4606      	mov	r6, r0
 80064d6:	460f      	mov	r7, r1
 80064d8:	4620      	mov	r0, r4
 80064da:	4629      	mov	r1, r5
 80064dc:	f7fa f8b0 	bl	8000640 <__aeabi_dmul>
 80064e0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80064e4:	f1ba 0f00 	cmp.w	sl, #0
 80064e8:	d15a      	bne.n	80065a0 <__ieee754_exp+0x200>
 80064ea:	2200      	movs	r2, #0
 80064ec:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80064f0:	4630      	mov	r0, r6
 80064f2:	4639      	mov	r1, r7
 80064f4:	f7f9 feec 	bl	80002d0 <__aeabi_dsub>
 80064f8:	4602      	mov	r2, r0
 80064fa:	460b      	mov	r3, r1
 80064fc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006500:	f7fa f9c8 	bl	8000894 <__aeabi_ddiv>
 8006504:	4622      	mov	r2, r4
 8006506:	462b      	mov	r3, r5
 8006508:	f7f9 fee2 	bl	80002d0 <__aeabi_dsub>
 800650c:	4602      	mov	r2, r0
 800650e:	460b      	mov	r3, r1
 8006510:	2000      	movs	r0, #0
 8006512:	4959      	ldr	r1, [pc, #356]	@ (8006678 <__ieee754_exp+0x2d8>)
 8006514:	f7f9 fedc 	bl	80002d0 <__aeabi_dsub>
 8006518:	e758      	b.n	80063cc <__ieee754_exp+0x2c>
 800651a:	4b58      	ldr	r3, [pc, #352]	@ (800667c <__ieee754_exp+0x2dc>)
 800651c:	4620      	mov	r0, r4
 800651e:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 8006522:	4629      	mov	r1, r5
 8006524:	a346      	add	r3, pc, #280	@ (adr r3, 8006640 <__ieee754_exp+0x2a0>)
 8006526:	e9d3 2300 	ldrd	r2, r3, [r3]
 800652a:	f7fa f889 	bl	8000640 <__aeabi_dmul>
 800652e:	e9d6 2300 	ldrd	r2, r3, [r6]
 8006532:	f7f9 fecf 	bl	80002d4 <__adddf3>
 8006536:	f7fa fb33 	bl	8000ba0 <__aeabi_d2iz>
 800653a:	4682      	mov	sl, r0
 800653c:	f7fa f816 	bl	800056c <__aeabi_i2d>
 8006540:	a341      	add	r3, pc, #260	@ (adr r3, 8006648 <__ieee754_exp+0x2a8>)
 8006542:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006546:	4606      	mov	r6, r0
 8006548:	460f      	mov	r7, r1
 800654a:	f7fa f879 	bl	8000640 <__aeabi_dmul>
 800654e:	4602      	mov	r2, r0
 8006550:	460b      	mov	r3, r1
 8006552:	4620      	mov	r0, r4
 8006554:	4629      	mov	r1, r5
 8006556:	f7f9 febb 	bl	80002d0 <__aeabi_dsub>
 800655a:	a33d      	add	r3, pc, #244	@ (adr r3, 8006650 <__ieee754_exp+0x2b0>)
 800655c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006560:	4680      	mov	r8, r0
 8006562:	4689      	mov	r9, r1
 8006564:	4630      	mov	r0, r6
 8006566:	4639      	mov	r1, r7
 8006568:	f7fa f86a 	bl	8000640 <__aeabi_dmul>
 800656c:	e9cd 0100 	strd	r0, r1, [sp]
 8006570:	e76f      	b.n	8006452 <__ieee754_exp+0xb2>
 8006572:	4b43      	ldr	r3, [pc, #268]	@ (8006680 <__ieee754_exp+0x2e0>)
 8006574:	429a      	cmp	r2, r3
 8006576:	d80e      	bhi.n	8006596 <__ieee754_exp+0x1f6>
 8006578:	a337      	add	r3, pc, #220	@ (adr r3, 8006658 <__ieee754_exp+0x2b8>)
 800657a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800657e:	f7f9 fea9 	bl	80002d4 <__adddf3>
 8006582:	2200      	movs	r2, #0
 8006584:	4b3c      	ldr	r3, [pc, #240]	@ (8006678 <__ieee754_exp+0x2d8>)
 8006586:	f7fa faeb 	bl	8000b60 <__aeabi_dcmpgt>
 800658a:	b138      	cbz	r0, 800659c <__ieee754_exp+0x1fc>
 800658c:	2200      	movs	r2, #0
 800658e:	4620      	mov	r0, r4
 8006590:	4629      	mov	r1, r5
 8006592:	4b39      	ldr	r3, [pc, #228]	@ (8006678 <__ieee754_exp+0x2d8>)
 8006594:	e718      	b.n	80063c8 <__ieee754_exp+0x28>
 8006596:	f04f 0a00 	mov.w	sl, #0
 800659a:	e762      	b.n	8006462 <__ieee754_exp+0xc2>
 800659c:	4682      	mov	sl, r0
 800659e:	e760      	b.n	8006462 <__ieee754_exp+0xc2>
 80065a0:	4632      	mov	r2, r6
 80065a2:	463b      	mov	r3, r7
 80065a4:	2000      	movs	r0, #0
 80065a6:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 80065aa:	f7f9 fe91 	bl	80002d0 <__aeabi_dsub>
 80065ae:	4602      	mov	r2, r0
 80065b0:	460b      	mov	r3, r1
 80065b2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80065b6:	f7fa f96d 	bl	8000894 <__aeabi_ddiv>
 80065ba:	4602      	mov	r2, r0
 80065bc:	460b      	mov	r3, r1
 80065be:	e9dd 0100 	ldrd	r0, r1, [sp]
 80065c2:	f7f9 fe85 	bl	80002d0 <__aeabi_dsub>
 80065c6:	4642      	mov	r2, r8
 80065c8:	464b      	mov	r3, r9
 80065ca:	f7f9 fe81 	bl	80002d0 <__aeabi_dsub>
 80065ce:	4602      	mov	r2, r0
 80065d0:	460b      	mov	r3, r1
 80065d2:	2000      	movs	r0, #0
 80065d4:	4928      	ldr	r1, [pc, #160]	@ (8006678 <__ieee754_exp+0x2d8>)
 80065d6:	f7f9 fe7b 	bl	80002d0 <__aeabi_dsub>
 80065da:	f46f 727f 	mvn.w	r2, #1020	@ 0x3fc
 80065de:	4592      	cmp	sl, r2
 80065e0:	db02      	blt.n	80065e8 <__ieee754_exp+0x248>
 80065e2:	eb01 510a 	add.w	r1, r1, sl, lsl #20
 80065e6:	e6f1      	b.n	80063cc <__ieee754_exp+0x2c>
 80065e8:	f50a 7a7a 	add.w	sl, sl, #1000	@ 0x3e8
 80065ec:	2200      	movs	r2, #0
 80065ee:	f04f 73b8 	mov.w	r3, #24117248	@ 0x1700000
 80065f2:	eb01 510a 	add.w	r1, r1, sl, lsl #20
 80065f6:	f7fa f823 	bl	8000640 <__aeabi_dmul>
 80065fa:	e6e7      	b.n	80063cc <__ieee754_exp+0x2c>
 80065fc:	2400      	movs	r4, #0
 80065fe:	2500      	movs	r5, #0
 8006600:	e6ea      	b.n	80063d8 <__ieee754_exp+0x38>
 8006602:	bf00      	nop
 8006604:	f3af 8000 	nop.w
 8006608:	fefa39ef 	.word	0xfefa39ef
 800660c:	40862e42 	.word	0x40862e42
 8006610:	d52d3051 	.word	0xd52d3051
 8006614:	c0874910 	.word	0xc0874910
 8006618:	72bea4d0 	.word	0x72bea4d0
 800661c:	3e663769 	.word	0x3e663769
 8006620:	c5d26bf1 	.word	0xc5d26bf1
 8006624:	3ebbbd41 	.word	0x3ebbbd41
 8006628:	af25de2c 	.word	0xaf25de2c
 800662c:	3f11566a 	.word	0x3f11566a
 8006630:	16bebd93 	.word	0x16bebd93
 8006634:	3f66c16c 	.word	0x3f66c16c
 8006638:	5555553e 	.word	0x5555553e
 800663c:	3fc55555 	.word	0x3fc55555
 8006640:	652b82fe 	.word	0x652b82fe
 8006644:	3ff71547 	.word	0x3ff71547
 8006648:	fee00000 	.word	0xfee00000
 800664c:	3fe62e42 	.word	0x3fe62e42
 8006650:	35793c76 	.word	0x35793c76
 8006654:	3dea39ef 	.word	0x3dea39ef
 8006658:	8800759c 	.word	0x8800759c
 800665c:	7e37e43c 	.word	0x7e37e43c
 8006660:	40862e41 	.word	0x40862e41
 8006664:	7fefffff 	.word	0x7fefffff
 8006668:	3fd62e42 	.word	0x3fd62e42
 800666c:	3ff0a2b1 	.word	0x3ff0a2b1
 8006670:	0800ab78 	.word	0x0800ab78
 8006674:	0800ab68 	.word	0x0800ab68
 8006678:	3ff00000 	.word	0x3ff00000
 800667c:	0800ab88 	.word	0x0800ab88
 8006680:	3defffff 	.word	0x3defffff

08006684 <with_errno>:
 8006684:	b570      	push	{r4, r5, r6, lr}
 8006686:	4604      	mov	r4, r0
 8006688:	460d      	mov	r5, r1
 800668a:	4616      	mov	r6, r2
 800668c:	f001 fc16 	bl	8007ebc <__errno>
 8006690:	4629      	mov	r1, r5
 8006692:	6006      	str	r6, [r0, #0]
 8006694:	4620      	mov	r0, r4
 8006696:	bd70      	pop	{r4, r5, r6, pc}

08006698 <xflow>:
 8006698:	b513      	push	{r0, r1, r4, lr}
 800669a:	4604      	mov	r4, r0
 800669c:	4619      	mov	r1, r3
 800669e:	4610      	mov	r0, r2
 80066a0:	b10c      	cbz	r4, 80066a6 <xflow+0xe>
 80066a2:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 80066a6:	e9cd 2300 	strd	r2, r3, [sp]
 80066aa:	e9dd 2300 	ldrd	r2, r3, [sp]
 80066ae:	f7f9 ffc7 	bl	8000640 <__aeabi_dmul>
 80066b2:	2222      	movs	r2, #34	@ 0x22
 80066b4:	b002      	add	sp, #8
 80066b6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80066ba:	f7ff bfe3 	b.w	8006684 <with_errno>

080066be <__math_uflow>:
 80066be:	2200      	movs	r2, #0
 80066c0:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 80066c4:	f7ff bfe8 	b.w	8006698 <xflow>

080066c8 <__math_oflow>:
 80066c8:	2200      	movs	r2, #0
 80066ca:	f04f 43e0 	mov.w	r3, #1879048192	@ 0x70000000
 80066ce:	f7ff bfe3 	b.w	8006698 <xflow>

080066d2 <atof>:
 80066d2:	2100      	movs	r1, #0
 80066d4:	f000 bdfc 	b.w	80072d0 <strtod>

080066d8 <sulp>:
 80066d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80066dc:	460f      	mov	r7, r1
 80066de:	4690      	mov	r8, r2
 80066e0:	f003 fa4a 	bl	8009b78 <__ulp>
 80066e4:	4604      	mov	r4, r0
 80066e6:	460d      	mov	r5, r1
 80066e8:	f1b8 0f00 	cmp.w	r8, #0
 80066ec:	d011      	beq.n	8006712 <sulp+0x3a>
 80066ee:	f3c7 530a 	ubfx	r3, r7, #20, #11
 80066f2:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 80066f6:	2b00      	cmp	r3, #0
 80066f8:	dd0b      	ble.n	8006712 <sulp+0x3a>
 80066fa:	2400      	movs	r4, #0
 80066fc:	051b      	lsls	r3, r3, #20
 80066fe:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 8006702:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 8006706:	4622      	mov	r2, r4
 8006708:	462b      	mov	r3, r5
 800670a:	f7f9 ff99 	bl	8000640 <__aeabi_dmul>
 800670e:	4604      	mov	r4, r0
 8006710:	460d      	mov	r5, r1
 8006712:	4620      	mov	r0, r4
 8006714:	4629      	mov	r1, r5
 8006716:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800671a:	0000      	movs	r0, r0
 800671c:	0000      	movs	r0, r0
	...

08006720 <_strtod_l>:
 8006720:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006724:	b09f      	sub	sp, #124	@ 0x7c
 8006726:	9217      	str	r2, [sp, #92]	@ 0x5c
 8006728:	2200      	movs	r2, #0
 800672a:	460c      	mov	r4, r1
 800672c:	921a      	str	r2, [sp, #104]	@ 0x68
 800672e:	f04f 0a00 	mov.w	sl, #0
 8006732:	f04f 0b00 	mov.w	fp, #0
 8006736:	460a      	mov	r2, r1
 8006738:	9005      	str	r0, [sp, #20]
 800673a:	9219      	str	r2, [sp, #100]	@ 0x64
 800673c:	7811      	ldrb	r1, [r2, #0]
 800673e:	292b      	cmp	r1, #43	@ 0x2b
 8006740:	d048      	beq.n	80067d4 <_strtod_l+0xb4>
 8006742:	d836      	bhi.n	80067b2 <_strtod_l+0x92>
 8006744:	290d      	cmp	r1, #13
 8006746:	d830      	bhi.n	80067aa <_strtod_l+0x8a>
 8006748:	2908      	cmp	r1, #8
 800674a:	d830      	bhi.n	80067ae <_strtod_l+0x8e>
 800674c:	2900      	cmp	r1, #0
 800674e:	d039      	beq.n	80067c4 <_strtod_l+0xa4>
 8006750:	2200      	movs	r2, #0
 8006752:	920b      	str	r2, [sp, #44]	@ 0x2c
 8006754:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 8006756:	782a      	ldrb	r2, [r5, #0]
 8006758:	2a30      	cmp	r2, #48	@ 0x30
 800675a:	f040 80b1 	bne.w	80068c0 <_strtod_l+0x1a0>
 800675e:	786a      	ldrb	r2, [r5, #1]
 8006760:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8006764:	2a58      	cmp	r2, #88	@ 0x58
 8006766:	d16c      	bne.n	8006842 <_strtod_l+0x122>
 8006768:	9302      	str	r3, [sp, #8]
 800676a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800676c:	4a8e      	ldr	r2, [pc, #568]	@ (80069a8 <_strtod_l+0x288>)
 800676e:	9301      	str	r3, [sp, #4]
 8006770:	ab1a      	add	r3, sp, #104	@ 0x68
 8006772:	9300      	str	r3, [sp, #0]
 8006774:	9805      	ldr	r0, [sp, #20]
 8006776:	ab1b      	add	r3, sp, #108	@ 0x6c
 8006778:	a919      	add	r1, sp, #100	@ 0x64
 800677a:	f002 faf1 	bl	8008d60 <__gethex>
 800677e:	f010 060f 	ands.w	r6, r0, #15
 8006782:	4604      	mov	r4, r0
 8006784:	d005      	beq.n	8006792 <_strtod_l+0x72>
 8006786:	2e06      	cmp	r6, #6
 8006788:	d126      	bne.n	80067d8 <_strtod_l+0xb8>
 800678a:	2300      	movs	r3, #0
 800678c:	3501      	adds	r5, #1
 800678e:	9519      	str	r5, [sp, #100]	@ 0x64
 8006790:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006792:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8006794:	2b00      	cmp	r3, #0
 8006796:	f040 8584 	bne.w	80072a2 <_strtod_l+0xb82>
 800679a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800679c:	b1bb      	cbz	r3, 80067ce <_strtod_l+0xae>
 800679e:	4650      	mov	r0, sl
 80067a0:	f10b 4100 	add.w	r1, fp, #2147483648	@ 0x80000000
 80067a4:	b01f      	add	sp, #124	@ 0x7c
 80067a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80067aa:	2920      	cmp	r1, #32
 80067ac:	d1d0      	bne.n	8006750 <_strtod_l+0x30>
 80067ae:	3201      	adds	r2, #1
 80067b0:	e7c3      	b.n	800673a <_strtod_l+0x1a>
 80067b2:	292d      	cmp	r1, #45	@ 0x2d
 80067b4:	d1cc      	bne.n	8006750 <_strtod_l+0x30>
 80067b6:	2101      	movs	r1, #1
 80067b8:	910b      	str	r1, [sp, #44]	@ 0x2c
 80067ba:	1c51      	adds	r1, r2, #1
 80067bc:	9119      	str	r1, [sp, #100]	@ 0x64
 80067be:	7852      	ldrb	r2, [r2, #1]
 80067c0:	2a00      	cmp	r2, #0
 80067c2:	d1c7      	bne.n	8006754 <_strtod_l+0x34>
 80067c4:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80067c6:	9419      	str	r4, [sp, #100]	@ 0x64
 80067c8:	2b00      	cmp	r3, #0
 80067ca:	f040 8568 	bne.w	800729e <_strtod_l+0xb7e>
 80067ce:	4650      	mov	r0, sl
 80067d0:	4659      	mov	r1, fp
 80067d2:	e7e7      	b.n	80067a4 <_strtod_l+0x84>
 80067d4:	2100      	movs	r1, #0
 80067d6:	e7ef      	b.n	80067b8 <_strtod_l+0x98>
 80067d8:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 80067da:	b13a      	cbz	r2, 80067ec <_strtod_l+0xcc>
 80067dc:	2135      	movs	r1, #53	@ 0x35
 80067de:	a81c      	add	r0, sp, #112	@ 0x70
 80067e0:	f003 faba 	bl	8009d58 <__copybits>
 80067e4:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80067e6:	9805      	ldr	r0, [sp, #20]
 80067e8:	f002 fe94 	bl	8009514 <_Bfree>
 80067ec:	3e01      	subs	r6, #1
 80067ee:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 80067f0:	2e04      	cmp	r6, #4
 80067f2:	d806      	bhi.n	8006802 <_strtod_l+0xe2>
 80067f4:	e8df f006 	tbb	[pc, r6]
 80067f8:	201d0314 	.word	0x201d0314
 80067fc:	14          	.byte	0x14
 80067fd:	00          	.byte	0x00
 80067fe:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 8006802:	05e1      	lsls	r1, r4, #23
 8006804:	bf48      	it	mi
 8006806:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 800680a:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800680e:	0d1b      	lsrs	r3, r3, #20
 8006810:	051b      	lsls	r3, r3, #20
 8006812:	2b00      	cmp	r3, #0
 8006814:	d1bd      	bne.n	8006792 <_strtod_l+0x72>
 8006816:	f001 fb51 	bl	8007ebc <__errno>
 800681a:	2322      	movs	r3, #34	@ 0x22
 800681c:	6003      	str	r3, [r0, #0]
 800681e:	e7b8      	b.n	8006792 <_strtod_l+0x72>
 8006820:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 8006824:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 8006828:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800682c:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8006830:	e7e7      	b.n	8006802 <_strtod_l+0xe2>
 8006832:	f8df b178 	ldr.w	fp, [pc, #376]	@ 80069ac <_strtod_l+0x28c>
 8006836:	e7e4      	b.n	8006802 <_strtod_l+0xe2>
 8006838:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 800683c:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 8006840:	e7df      	b.n	8006802 <_strtod_l+0xe2>
 8006842:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8006844:	1c5a      	adds	r2, r3, #1
 8006846:	9219      	str	r2, [sp, #100]	@ 0x64
 8006848:	785b      	ldrb	r3, [r3, #1]
 800684a:	2b30      	cmp	r3, #48	@ 0x30
 800684c:	d0f9      	beq.n	8006842 <_strtod_l+0x122>
 800684e:	2b00      	cmp	r3, #0
 8006850:	d09f      	beq.n	8006792 <_strtod_l+0x72>
 8006852:	2301      	movs	r3, #1
 8006854:	9309      	str	r3, [sp, #36]	@ 0x24
 8006856:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8006858:	220a      	movs	r2, #10
 800685a:	930c      	str	r3, [sp, #48]	@ 0x30
 800685c:	2300      	movs	r3, #0
 800685e:	461f      	mov	r7, r3
 8006860:	9308      	str	r3, [sp, #32]
 8006862:	930a      	str	r3, [sp, #40]	@ 0x28
 8006864:	9819      	ldr	r0, [sp, #100]	@ 0x64
 8006866:	7805      	ldrb	r5, [r0, #0]
 8006868:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 800686c:	b2d9      	uxtb	r1, r3
 800686e:	2909      	cmp	r1, #9
 8006870:	d928      	bls.n	80068c4 <_strtod_l+0x1a4>
 8006872:	2201      	movs	r2, #1
 8006874:	494e      	ldr	r1, [pc, #312]	@ (80069b0 <_strtod_l+0x290>)
 8006876:	f001 fac4 	bl	8007e02 <strncmp>
 800687a:	2800      	cmp	r0, #0
 800687c:	d032      	beq.n	80068e4 <_strtod_l+0x1c4>
 800687e:	2000      	movs	r0, #0
 8006880:	462a      	mov	r2, r5
 8006882:	4681      	mov	r9, r0
 8006884:	463d      	mov	r5, r7
 8006886:	4603      	mov	r3, r0
 8006888:	2a65      	cmp	r2, #101	@ 0x65
 800688a:	d001      	beq.n	8006890 <_strtod_l+0x170>
 800688c:	2a45      	cmp	r2, #69	@ 0x45
 800688e:	d114      	bne.n	80068ba <_strtod_l+0x19a>
 8006890:	b91d      	cbnz	r5, 800689a <_strtod_l+0x17a>
 8006892:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006894:	4302      	orrs	r2, r0
 8006896:	d095      	beq.n	80067c4 <_strtod_l+0xa4>
 8006898:	2500      	movs	r5, #0
 800689a:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 800689c:	1c62      	adds	r2, r4, #1
 800689e:	9219      	str	r2, [sp, #100]	@ 0x64
 80068a0:	7862      	ldrb	r2, [r4, #1]
 80068a2:	2a2b      	cmp	r2, #43	@ 0x2b
 80068a4:	d077      	beq.n	8006996 <_strtod_l+0x276>
 80068a6:	2a2d      	cmp	r2, #45	@ 0x2d
 80068a8:	d07b      	beq.n	80069a2 <_strtod_l+0x282>
 80068aa:	f04f 0c00 	mov.w	ip, #0
 80068ae:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 80068b2:	2909      	cmp	r1, #9
 80068b4:	f240 8082 	bls.w	80069bc <_strtod_l+0x29c>
 80068b8:	9419      	str	r4, [sp, #100]	@ 0x64
 80068ba:	f04f 0800 	mov.w	r8, #0
 80068be:	e0a2      	b.n	8006a06 <_strtod_l+0x2e6>
 80068c0:	2300      	movs	r3, #0
 80068c2:	e7c7      	b.n	8006854 <_strtod_l+0x134>
 80068c4:	2f08      	cmp	r7, #8
 80068c6:	bfd5      	itete	le
 80068c8:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 80068ca:	9908      	ldrgt	r1, [sp, #32]
 80068cc:	fb02 3301 	mlale	r3, r2, r1, r3
 80068d0:	fb02 3301 	mlagt	r3, r2, r1, r3
 80068d4:	f100 0001 	add.w	r0, r0, #1
 80068d8:	bfd4      	ite	le
 80068da:	930a      	strle	r3, [sp, #40]	@ 0x28
 80068dc:	9308      	strgt	r3, [sp, #32]
 80068de:	3701      	adds	r7, #1
 80068e0:	9019      	str	r0, [sp, #100]	@ 0x64
 80068e2:	e7bf      	b.n	8006864 <_strtod_l+0x144>
 80068e4:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80068e6:	1c5a      	adds	r2, r3, #1
 80068e8:	9219      	str	r2, [sp, #100]	@ 0x64
 80068ea:	785a      	ldrb	r2, [r3, #1]
 80068ec:	b37f      	cbz	r7, 800694e <_strtod_l+0x22e>
 80068ee:	4681      	mov	r9, r0
 80068f0:	463d      	mov	r5, r7
 80068f2:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 80068f6:	2b09      	cmp	r3, #9
 80068f8:	d912      	bls.n	8006920 <_strtod_l+0x200>
 80068fa:	2301      	movs	r3, #1
 80068fc:	e7c4      	b.n	8006888 <_strtod_l+0x168>
 80068fe:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8006900:	3001      	adds	r0, #1
 8006902:	1c5a      	adds	r2, r3, #1
 8006904:	9219      	str	r2, [sp, #100]	@ 0x64
 8006906:	785a      	ldrb	r2, [r3, #1]
 8006908:	2a30      	cmp	r2, #48	@ 0x30
 800690a:	d0f8      	beq.n	80068fe <_strtod_l+0x1de>
 800690c:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 8006910:	2b08      	cmp	r3, #8
 8006912:	f200 84cb 	bhi.w	80072ac <_strtod_l+0xb8c>
 8006916:	4681      	mov	r9, r0
 8006918:	2000      	movs	r0, #0
 800691a:	4605      	mov	r5, r0
 800691c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800691e:	930c      	str	r3, [sp, #48]	@ 0x30
 8006920:	3a30      	subs	r2, #48	@ 0x30
 8006922:	f100 0301 	add.w	r3, r0, #1
 8006926:	d02a      	beq.n	800697e <_strtod_l+0x25e>
 8006928:	4499      	add	r9, r3
 800692a:	210a      	movs	r1, #10
 800692c:	462b      	mov	r3, r5
 800692e:	eb00 0c05 	add.w	ip, r0, r5
 8006932:	4563      	cmp	r3, ip
 8006934:	d10d      	bne.n	8006952 <_strtod_l+0x232>
 8006936:	1c69      	adds	r1, r5, #1
 8006938:	4401      	add	r1, r0
 800693a:	4428      	add	r0, r5
 800693c:	2808      	cmp	r0, #8
 800693e:	dc16      	bgt.n	800696e <_strtod_l+0x24e>
 8006940:	230a      	movs	r3, #10
 8006942:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8006944:	fb03 2300 	mla	r3, r3, r0, r2
 8006948:	930a      	str	r3, [sp, #40]	@ 0x28
 800694a:	2300      	movs	r3, #0
 800694c:	e018      	b.n	8006980 <_strtod_l+0x260>
 800694e:	4638      	mov	r0, r7
 8006950:	e7da      	b.n	8006908 <_strtod_l+0x1e8>
 8006952:	2b08      	cmp	r3, #8
 8006954:	f103 0301 	add.w	r3, r3, #1
 8006958:	dc03      	bgt.n	8006962 <_strtod_l+0x242>
 800695a:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 800695c:	434e      	muls	r6, r1
 800695e:	960a      	str	r6, [sp, #40]	@ 0x28
 8006960:	e7e7      	b.n	8006932 <_strtod_l+0x212>
 8006962:	2b10      	cmp	r3, #16
 8006964:	bfde      	ittt	le
 8006966:	9e08      	ldrle	r6, [sp, #32]
 8006968:	434e      	mulle	r6, r1
 800696a:	9608      	strle	r6, [sp, #32]
 800696c:	e7e1      	b.n	8006932 <_strtod_l+0x212>
 800696e:	280f      	cmp	r0, #15
 8006970:	dceb      	bgt.n	800694a <_strtod_l+0x22a>
 8006972:	230a      	movs	r3, #10
 8006974:	9808      	ldr	r0, [sp, #32]
 8006976:	fb03 2300 	mla	r3, r3, r0, r2
 800697a:	9308      	str	r3, [sp, #32]
 800697c:	e7e5      	b.n	800694a <_strtod_l+0x22a>
 800697e:	4629      	mov	r1, r5
 8006980:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8006982:	460d      	mov	r5, r1
 8006984:	1c50      	adds	r0, r2, #1
 8006986:	9019      	str	r0, [sp, #100]	@ 0x64
 8006988:	7852      	ldrb	r2, [r2, #1]
 800698a:	4618      	mov	r0, r3
 800698c:	e7b1      	b.n	80068f2 <_strtod_l+0x1d2>
 800698e:	f04f 0900 	mov.w	r9, #0
 8006992:	2301      	movs	r3, #1
 8006994:	e77d      	b.n	8006892 <_strtod_l+0x172>
 8006996:	f04f 0c00 	mov.w	ip, #0
 800699a:	1ca2      	adds	r2, r4, #2
 800699c:	9219      	str	r2, [sp, #100]	@ 0x64
 800699e:	78a2      	ldrb	r2, [r4, #2]
 80069a0:	e785      	b.n	80068ae <_strtod_l+0x18e>
 80069a2:	f04f 0c01 	mov.w	ip, #1
 80069a6:	e7f8      	b.n	800699a <_strtod_l+0x27a>
 80069a8:	0800abb0 	.word	0x0800abb0
 80069ac:	7ff00000 	.word	0x7ff00000
 80069b0:	0800ab98 	.word	0x0800ab98
 80069b4:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80069b6:	1c51      	adds	r1, r2, #1
 80069b8:	9119      	str	r1, [sp, #100]	@ 0x64
 80069ba:	7852      	ldrb	r2, [r2, #1]
 80069bc:	2a30      	cmp	r2, #48	@ 0x30
 80069be:	d0f9      	beq.n	80069b4 <_strtod_l+0x294>
 80069c0:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 80069c4:	2908      	cmp	r1, #8
 80069c6:	f63f af78 	bhi.w	80068ba <_strtod_l+0x19a>
 80069ca:	f04f 080a 	mov.w	r8, #10
 80069ce:	3a30      	subs	r2, #48	@ 0x30
 80069d0:	920e      	str	r2, [sp, #56]	@ 0x38
 80069d2:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80069d4:	920f      	str	r2, [sp, #60]	@ 0x3c
 80069d6:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80069d8:	1c56      	adds	r6, r2, #1
 80069da:	9619      	str	r6, [sp, #100]	@ 0x64
 80069dc:	7852      	ldrb	r2, [r2, #1]
 80069de:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 80069e2:	f1be 0f09 	cmp.w	lr, #9
 80069e6:	d939      	bls.n	8006a5c <_strtod_l+0x33c>
 80069e8:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 80069ea:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 80069ee:	1a76      	subs	r6, r6, r1
 80069f0:	2e08      	cmp	r6, #8
 80069f2:	dc03      	bgt.n	80069fc <_strtod_l+0x2dc>
 80069f4:	990e      	ldr	r1, [sp, #56]	@ 0x38
 80069f6:	4588      	cmp	r8, r1
 80069f8:	bfa8      	it	ge
 80069fa:	4688      	movge	r8, r1
 80069fc:	f1bc 0f00 	cmp.w	ip, #0
 8006a00:	d001      	beq.n	8006a06 <_strtod_l+0x2e6>
 8006a02:	f1c8 0800 	rsb	r8, r8, #0
 8006a06:	2d00      	cmp	r5, #0
 8006a08:	d14e      	bne.n	8006aa8 <_strtod_l+0x388>
 8006a0a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8006a0c:	4308      	orrs	r0, r1
 8006a0e:	f47f aec0 	bne.w	8006792 <_strtod_l+0x72>
 8006a12:	2b00      	cmp	r3, #0
 8006a14:	f47f aed6 	bne.w	80067c4 <_strtod_l+0xa4>
 8006a18:	2a69      	cmp	r2, #105	@ 0x69
 8006a1a:	d028      	beq.n	8006a6e <_strtod_l+0x34e>
 8006a1c:	dc25      	bgt.n	8006a6a <_strtod_l+0x34a>
 8006a1e:	2a49      	cmp	r2, #73	@ 0x49
 8006a20:	d025      	beq.n	8006a6e <_strtod_l+0x34e>
 8006a22:	2a4e      	cmp	r2, #78	@ 0x4e
 8006a24:	f47f aece 	bne.w	80067c4 <_strtod_l+0xa4>
 8006a28:	499a      	ldr	r1, [pc, #616]	@ (8006c94 <_strtod_l+0x574>)
 8006a2a:	a819      	add	r0, sp, #100	@ 0x64
 8006a2c:	f002 fbba 	bl	80091a4 <__match>
 8006a30:	2800      	cmp	r0, #0
 8006a32:	f43f aec7 	beq.w	80067c4 <_strtod_l+0xa4>
 8006a36:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8006a38:	781b      	ldrb	r3, [r3, #0]
 8006a3a:	2b28      	cmp	r3, #40	@ 0x28
 8006a3c:	d12e      	bne.n	8006a9c <_strtod_l+0x37c>
 8006a3e:	4996      	ldr	r1, [pc, #600]	@ (8006c98 <_strtod_l+0x578>)
 8006a40:	aa1c      	add	r2, sp, #112	@ 0x70
 8006a42:	a819      	add	r0, sp, #100	@ 0x64
 8006a44:	f002 fbc2 	bl	80091cc <__hexnan>
 8006a48:	2805      	cmp	r0, #5
 8006a4a:	d127      	bne.n	8006a9c <_strtod_l+0x37c>
 8006a4c:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8006a4e:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 8006a52:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 8006a56:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 8006a5a:	e69a      	b.n	8006792 <_strtod_l+0x72>
 8006a5c:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8006a5e:	fb08 2101 	mla	r1, r8, r1, r2
 8006a62:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 8006a66:	920e      	str	r2, [sp, #56]	@ 0x38
 8006a68:	e7b5      	b.n	80069d6 <_strtod_l+0x2b6>
 8006a6a:	2a6e      	cmp	r2, #110	@ 0x6e
 8006a6c:	e7da      	b.n	8006a24 <_strtod_l+0x304>
 8006a6e:	498b      	ldr	r1, [pc, #556]	@ (8006c9c <_strtod_l+0x57c>)
 8006a70:	a819      	add	r0, sp, #100	@ 0x64
 8006a72:	f002 fb97 	bl	80091a4 <__match>
 8006a76:	2800      	cmp	r0, #0
 8006a78:	f43f aea4 	beq.w	80067c4 <_strtod_l+0xa4>
 8006a7c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8006a7e:	4988      	ldr	r1, [pc, #544]	@ (8006ca0 <_strtod_l+0x580>)
 8006a80:	3b01      	subs	r3, #1
 8006a82:	a819      	add	r0, sp, #100	@ 0x64
 8006a84:	9319      	str	r3, [sp, #100]	@ 0x64
 8006a86:	f002 fb8d 	bl	80091a4 <__match>
 8006a8a:	b910      	cbnz	r0, 8006a92 <_strtod_l+0x372>
 8006a8c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8006a8e:	3301      	adds	r3, #1
 8006a90:	9319      	str	r3, [sp, #100]	@ 0x64
 8006a92:	f04f 0a00 	mov.w	sl, #0
 8006a96:	f8df b20c 	ldr.w	fp, [pc, #524]	@ 8006ca4 <_strtod_l+0x584>
 8006a9a:	e67a      	b.n	8006792 <_strtod_l+0x72>
 8006a9c:	4882      	ldr	r0, [pc, #520]	@ (8006ca8 <_strtod_l+0x588>)
 8006a9e:	f001 fa57 	bl	8007f50 <nan>
 8006aa2:	4682      	mov	sl, r0
 8006aa4:	468b      	mov	fp, r1
 8006aa6:	e674      	b.n	8006792 <_strtod_l+0x72>
 8006aa8:	eba8 0309 	sub.w	r3, r8, r9
 8006aac:	2f00      	cmp	r7, #0
 8006aae:	bf08      	it	eq
 8006ab0:	462f      	moveq	r7, r5
 8006ab2:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8006ab4:	2d10      	cmp	r5, #16
 8006ab6:	462c      	mov	r4, r5
 8006ab8:	9309      	str	r3, [sp, #36]	@ 0x24
 8006aba:	bfa8      	it	ge
 8006abc:	2410      	movge	r4, #16
 8006abe:	f7f9 fd45 	bl	800054c <__aeabi_ui2d>
 8006ac2:	2d09      	cmp	r5, #9
 8006ac4:	4682      	mov	sl, r0
 8006ac6:	468b      	mov	fp, r1
 8006ac8:	dc11      	bgt.n	8006aee <_strtod_l+0x3ce>
 8006aca:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006acc:	2b00      	cmp	r3, #0
 8006ace:	f43f ae60 	beq.w	8006792 <_strtod_l+0x72>
 8006ad2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006ad4:	dd76      	ble.n	8006bc4 <_strtod_l+0x4a4>
 8006ad6:	2b16      	cmp	r3, #22
 8006ad8:	dc5d      	bgt.n	8006b96 <_strtod_l+0x476>
 8006ada:	4974      	ldr	r1, [pc, #464]	@ (8006cac <_strtod_l+0x58c>)
 8006adc:	4652      	mov	r2, sl
 8006ade:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8006ae2:	465b      	mov	r3, fp
 8006ae4:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006ae8:	f7f9 fdaa 	bl	8000640 <__aeabi_dmul>
 8006aec:	e7d9      	b.n	8006aa2 <_strtod_l+0x382>
 8006aee:	4b6f      	ldr	r3, [pc, #444]	@ (8006cac <_strtod_l+0x58c>)
 8006af0:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8006af4:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 8006af8:	f7f9 fda2 	bl	8000640 <__aeabi_dmul>
 8006afc:	4682      	mov	sl, r0
 8006afe:	9808      	ldr	r0, [sp, #32]
 8006b00:	468b      	mov	fp, r1
 8006b02:	f7f9 fd23 	bl	800054c <__aeabi_ui2d>
 8006b06:	4602      	mov	r2, r0
 8006b08:	460b      	mov	r3, r1
 8006b0a:	4650      	mov	r0, sl
 8006b0c:	4659      	mov	r1, fp
 8006b0e:	f7f9 fbe1 	bl	80002d4 <__adddf3>
 8006b12:	2d0f      	cmp	r5, #15
 8006b14:	4682      	mov	sl, r0
 8006b16:	468b      	mov	fp, r1
 8006b18:	ddd7      	ble.n	8006aca <_strtod_l+0x3aa>
 8006b1a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006b1c:	1b2c      	subs	r4, r5, r4
 8006b1e:	441c      	add	r4, r3
 8006b20:	2c00      	cmp	r4, #0
 8006b22:	f340 8096 	ble.w	8006c52 <_strtod_l+0x532>
 8006b26:	f014 030f 	ands.w	r3, r4, #15
 8006b2a:	d00a      	beq.n	8006b42 <_strtod_l+0x422>
 8006b2c:	495f      	ldr	r1, [pc, #380]	@ (8006cac <_strtod_l+0x58c>)
 8006b2e:	4652      	mov	r2, sl
 8006b30:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8006b34:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006b38:	465b      	mov	r3, fp
 8006b3a:	f7f9 fd81 	bl	8000640 <__aeabi_dmul>
 8006b3e:	4682      	mov	sl, r0
 8006b40:	468b      	mov	fp, r1
 8006b42:	f034 040f 	bics.w	r4, r4, #15
 8006b46:	d073      	beq.n	8006c30 <_strtod_l+0x510>
 8006b48:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 8006b4c:	dd48      	ble.n	8006be0 <_strtod_l+0x4c0>
 8006b4e:	2400      	movs	r4, #0
 8006b50:	46a0      	mov	r8, r4
 8006b52:	46a1      	mov	r9, r4
 8006b54:	940a      	str	r4, [sp, #40]	@ 0x28
 8006b56:	2322      	movs	r3, #34	@ 0x22
 8006b58:	f04f 0a00 	mov.w	sl, #0
 8006b5c:	9a05      	ldr	r2, [sp, #20]
 8006b5e:	f8df b144 	ldr.w	fp, [pc, #324]	@ 8006ca4 <_strtod_l+0x584>
 8006b62:	6013      	str	r3, [r2, #0]
 8006b64:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006b66:	2b00      	cmp	r3, #0
 8006b68:	f43f ae13 	beq.w	8006792 <_strtod_l+0x72>
 8006b6c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8006b6e:	9805      	ldr	r0, [sp, #20]
 8006b70:	f002 fcd0 	bl	8009514 <_Bfree>
 8006b74:	4649      	mov	r1, r9
 8006b76:	9805      	ldr	r0, [sp, #20]
 8006b78:	f002 fccc 	bl	8009514 <_Bfree>
 8006b7c:	4641      	mov	r1, r8
 8006b7e:	9805      	ldr	r0, [sp, #20]
 8006b80:	f002 fcc8 	bl	8009514 <_Bfree>
 8006b84:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8006b86:	9805      	ldr	r0, [sp, #20]
 8006b88:	f002 fcc4 	bl	8009514 <_Bfree>
 8006b8c:	4621      	mov	r1, r4
 8006b8e:	9805      	ldr	r0, [sp, #20]
 8006b90:	f002 fcc0 	bl	8009514 <_Bfree>
 8006b94:	e5fd      	b.n	8006792 <_strtod_l+0x72>
 8006b96:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006b98:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 8006b9c:	4293      	cmp	r3, r2
 8006b9e:	dbbc      	blt.n	8006b1a <_strtod_l+0x3fa>
 8006ba0:	4c42      	ldr	r4, [pc, #264]	@ (8006cac <_strtod_l+0x58c>)
 8006ba2:	f1c5 050f 	rsb	r5, r5, #15
 8006ba6:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8006baa:	4652      	mov	r2, sl
 8006bac:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006bb0:	465b      	mov	r3, fp
 8006bb2:	f7f9 fd45 	bl	8000640 <__aeabi_dmul>
 8006bb6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006bb8:	1b5d      	subs	r5, r3, r5
 8006bba:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8006bbe:	e9d4 2300 	ldrd	r2, r3, [r4]
 8006bc2:	e791      	b.n	8006ae8 <_strtod_l+0x3c8>
 8006bc4:	3316      	adds	r3, #22
 8006bc6:	dba8      	blt.n	8006b1a <_strtod_l+0x3fa>
 8006bc8:	4b38      	ldr	r3, [pc, #224]	@ (8006cac <_strtod_l+0x58c>)
 8006bca:	eba9 0808 	sub.w	r8, r9, r8
 8006bce:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 8006bd2:	4650      	mov	r0, sl
 8006bd4:	e9d8 2300 	ldrd	r2, r3, [r8]
 8006bd8:	4659      	mov	r1, fp
 8006bda:	f7f9 fe5b 	bl	8000894 <__aeabi_ddiv>
 8006bde:	e760      	b.n	8006aa2 <_strtod_l+0x382>
 8006be0:	4b33      	ldr	r3, [pc, #204]	@ (8006cb0 <_strtod_l+0x590>)
 8006be2:	4650      	mov	r0, sl
 8006be4:	9308      	str	r3, [sp, #32]
 8006be6:	2300      	movs	r3, #0
 8006be8:	4659      	mov	r1, fp
 8006bea:	461e      	mov	r6, r3
 8006bec:	1124      	asrs	r4, r4, #4
 8006bee:	2c01      	cmp	r4, #1
 8006bf0:	dc21      	bgt.n	8006c36 <_strtod_l+0x516>
 8006bf2:	b10b      	cbz	r3, 8006bf8 <_strtod_l+0x4d8>
 8006bf4:	4682      	mov	sl, r0
 8006bf6:	468b      	mov	fp, r1
 8006bf8:	492d      	ldr	r1, [pc, #180]	@ (8006cb0 <_strtod_l+0x590>)
 8006bfa:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 8006bfe:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 8006c02:	4652      	mov	r2, sl
 8006c04:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006c08:	465b      	mov	r3, fp
 8006c0a:	f7f9 fd19 	bl	8000640 <__aeabi_dmul>
 8006c0e:	4b25      	ldr	r3, [pc, #148]	@ (8006ca4 <_strtod_l+0x584>)
 8006c10:	460a      	mov	r2, r1
 8006c12:	400b      	ands	r3, r1
 8006c14:	4927      	ldr	r1, [pc, #156]	@ (8006cb4 <_strtod_l+0x594>)
 8006c16:	4682      	mov	sl, r0
 8006c18:	428b      	cmp	r3, r1
 8006c1a:	d898      	bhi.n	8006b4e <_strtod_l+0x42e>
 8006c1c:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 8006c20:	428b      	cmp	r3, r1
 8006c22:	bf86      	itte	hi
 8006c24:	f04f 3aff 	movhi.w	sl, #4294967295	@ 0xffffffff
 8006c28:	f8df b08c 	ldrhi.w	fp, [pc, #140]	@ 8006cb8 <_strtod_l+0x598>
 8006c2c:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 8006c30:	2300      	movs	r3, #0
 8006c32:	9308      	str	r3, [sp, #32]
 8006c34:	e07a      	b.n	8006d2c <_strtod_l+0x60c>
 8006c36:	07e2      	lsls	r2, r4, #31
 8006c38:	d505      	bpl.n	8006c46 <_strtod_l+0x526>
 8006c3a:	9b08      	ldr	r3, [sp, #32]
 8006c3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c40:	f7f9 fcfe 	bl	8000640 <__aeabi_dmul>
 8006c44:	2301      	movs	r3, #1
 8006c46:	9a08      	ldr	r2, [sp, #32]
 8006c48:	3601      	adds	r6, #1
 8006c4a:	3208      	adds	r2, #8
 8006c4c:	1064      	asrs	r4, r4, #1
 8006c4e:	9208      	str	r2, [sp, #32]
 8006c50:	e7cd      	b.n	8006bee <_strtod_l+0x4ce>
 8006c52:	d0ed      	beq.n	8006c30 <_strtod_l+0x510>
 8006c54:	4264      	negs	r4, r4
 8006c56:	f014 020f 	ands.w	r2, r4, #15
 8006c5a:	d00a      	beq.n	8006c72 <_strtod_l+0x552>
 8006c5c:	4b13      	ldr	r3, [pc, #76]	@ (8006cac <_strtod_l+0x58c>)
 8006c5e:	4650      	mov	r0, sl
 8006c60:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006c64:	4659      	mov	r1, fp
 8006c66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c6a:	f7f9 fe13 	bl	8000894 <__aeabi_ddiv>
 8006c6e:	4682      	mov	sl, r0
 8006c70:	468b      	mov	fp, r1
 8006c72:	1124      	asrs	r4, r4, #4
 8006c74:	d0dc      	beq.n	8006c30 <_strtod_l+0x510>
 8006c76:	2c1f      	cmp	r4, #31
 8006c78:	dd20      	ble.n	8006cbc <_strtod_l+0x59c>
 8006c7a:	2400      	movs	r4, #0
 8006c7c:	46a0      	mov	r8, r4
 8006c7e:	46a1      	mov	r9, r4
 8006c80:	940a      	str	r4, [sp, #40]	@ 0x28
 8006c82:	2322      	movs	r3, #34	@ 0x22
 8006c84:	9a05      	ldr	r2, [sp, #20]
 8006c86:	f04f 0a00 	mov.w	sl, #0
 8006c8a:	f04f 0b00 	mov.w	fp, #0
 8006c8e:	6013      	str	r3, [r2, #0]
 8006c90:	e768      	b.n	8006b64 <_strtod_l+0x444>
 8006c92:	bf00      	nop
 8006c94:	0800abfd 	.word	0x0800abfd
 8006c98:	0800ab9c 	.word	0x0800ab9c
 8006c9c:	0800abf5 	.word	0x0800abf5
 8006ca0:	0800ac2f 	.word	0x0800ac2f
 8006ca4:	7ff00000 	.word	0x7ff00000
 8006ca8:	0800afbd 	.word	0x0800afbd
 8006cac:	0800ada8 	.word	0x0800ada8
 8006cb0:	0800ad80 	.word	0x0800ad80
 8006cb4:	7ca00000 	.word	0x7ca00000
 8006cb8:	7fefffff 	.word	0x7fefffff
 8006cbc:	f014 0310 	ands.w	r3, r4, #16
 8006cc0:	bf18      	it	ne
 8006cc2:	236a      	movne	r3, #106	@ 0x6a
 8006cc4:	4650      	mov	r0, sl
 8006cc6:	9308      	str	r3, [sp, #32]
 8006cc8:	4659      	mov	r1, fp
 8006cca:	2300      	movs	r3, #0
 8006ccc:	4ea9      	ldr	r6, [pc, #676]	@ (8006f74 <_strtod_l+0x854>)
 8006cce:	07e2      	lsls	r2, r4, #31
 8006cd0:	d504      	bpl.n	8006cdc <_strtod_l+0x5bc>
 8006cd2:	e9d6 2300 	ldrd	r2, r3, [r6]
 8006cd6:	f7f9 fcb3 	bl	8000640 <__aeabi_dmul>
 8006cda:	2301      	movs	r3, #1
 8006cdc:	1064      	asrs	r4, r4, #1
 8006cde:	f106 0608 	add.w	r6, r6, #8
 8006ce2:	d1f4      	bne.n	8006cce <_strtod_l+0x5ae>
 8006ce4:	b10b      	cbz	r3, 8006cea <_strtod_l+0x5ca>
 8006ce6:	4682      	mov	sl, r0
 8006ce8:	468b      	mov	fp, r1
 8006cea:	9b08      	ldr	r3, [sp, #32]
 8006cec:	b1b3      	cbz	r3, 8006d1c <_strtod_l+0x5fc>
 8006cee:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8006cf2:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 8006cf6:	2b00      	cmp	r3, #0
 8006cf8:	4659      	mov	r1, fp
 8006cfa:	dd0f      	ble.n	8006d1c <_strtod_l+0x5fc>
 8006cfc:	2b1f      	cmp	r3, #31
 8006cfe:	dd57      	ble.n	8006db0 <_strtod_l+0x690>
 8006d00:	2b34      	cmp	r3, #52	@ 0x34
 8006d02:	bfd8      	it	le
 8006d04:	f04f 33ff 	movle.w	r3, #4294967295	@ 0xffffffff
 8006d08:	f04f 0a00 	mov.w	sl, #0
 8006d0c:	bfcf      	iteee	gt
 8006d0e:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 8006d12:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 8006d16:	4093      	lslle	r3, r2
 8006d18:	ea03 0b01 	andle.w	fp, r3, r1
 8006d1c:	2200      	movs	r2, #0
 8006d1e:	2300      	movs	r3, #0
 8006d20:	4650      	mov	r0, sl
 8006d22:	4659      	mov	r1, fp
 8006d24:	f7f9 fef4 	bl	8000b10 <__aeabi_dcmpeq>
 8006d28:	2800      	cmp	r0, #0
 8006d2a:	d1a6      	bne.n	8006c7a <_strtod_l+0x55a>
 8006d2c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006d2e:	463a      	mov	r2, r7
 8006d30:	9300      	str	r3, [sp, #0]
 8006d32:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8006d34:	462b      	mov	r3, r5
 8006d36:	9805      	ldr	r0, [sp, #20]
 8006d38:	f002 fc54 	bl	80095e4 <__s2b>
 8006d3c:	900a      	str	r0, [sp, #40]	@ 0x28
 8006d3e:	2800      	cmp	r0, #0
 8006d40:	f43f af05 	beq.w	8006b4e <_strtod_l+0x42e>
 8006d44:	2400      	movs	r4, #0
 8006d46:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006d48:	eba9 0308 	sub.w	r3, r9, r8
 8006d4c:	2a00      	cmp	r2, #0
 8006d4e:	bfa8      	it	ge
 8006d50:	2300      	movge	r3, #0
 8006d52:	46a0      	mov	r8, r4
 8006d54:	9312      	str	r3, [sp, #72]	@ 0x48
 8006d56:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8006d5a:	9316      	str	r3, [sp, #88]	@ 0x58
 8006d5c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006d5e:	9805      	ldr	r0, [sp, #20]
 8006d60:	6859      	ldr	r1, [r3, #4]
 8006d62:	f002 fb97 	bl	8009494 <_Balloc>
 8006d66:	4681      	mov	r9, r0
 8006d68:	2800      	cmp	r0, #0
 8006d6a:	f43f aef4 	beq.w	8006b56 <_strtod_l+0x436>
 8006d6e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006d70:	300c      	adds	r0, #12
 8006d72:	691a      	ldr	r2, [r3, #16]
 8006d74:	f103 010c 	add.w	r1, r3, #12
 8006d78:	3202      	adds	r2, #2
 8006d7a:	0092      	lsls	r2, r2, #2
 8006d7c:	f001 f8d9 	bl	8007f32 <memcpy>
 8006d80:	ab1c      	add	r3, sp, #112	@ 0x70
 8006d82:	9301      	str	r3, [sp, #4]
 8006d84:	ab1b      	add	r3, sp, #108	@ 0x6c
 8006d86:	9300      	str	r3, [sp, #0]
 8006d88:	4652      	mov	r2, sl
 8006d8a:	465b      	mov	r3, fp
 8006d8c:	9805      	ldr	r0, [sp, #20]
 8006d8e:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 8006d92:	f002 ff59 	bl	8009c48 <__d2b>
 8006d96:	901a      	str	r0, [sp, #104]	@ 0x68
 8006d98:	2800      	cmp	r0, #0
 8006d9a:	f43f aedc 	beq.w	8006b56 <_strtod_l+0x436>
 8006d9e:	2101      	movs	r1, #1
 8006da0:	9805      	ldr	r0, [sp, #20]
 8006da2:	f002 fcb5 	bl	8009710 <__i2b>
 8006da6:	4680      	mov	r8, r0
 8006da8:	b948      	cbnz	r0, 8006dbe <_strtod_l+0x69e>
 8006daa:	f04f 0800 	mov.w	r8, #0
 8006dae:	e6d2      	b.n	8006b56 <_strtod_l+0x436>
 8006db0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8006db4:	fa02 f303 	lsl.w	r3, r2, r3
 8006db8:	ea03 0a0a 	and.w	sl, r3, sl
 8006dbc:	e7ae      	b.n	8006d1c <_strtod_l+0x5fc>
 8006dbe:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 8006dc0:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 8006dc2:	2d00      	cmp	r5, #0
 8006dc4:	bfab      	itete	ge
 8006dc6:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 8006dc8:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 8006dca:	18ef      	addge	r7, r5, r3
 8006dcc:	1b5e      	sublt	r6, r3, r5
 8006dce:	9b08      	ldr	r3, [sp, #32]
 8006dd0:	bfa8      	it	ge
 8006dd2:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 8006dd4:	eba5 0503 	sub.w	r5, r5, r3
 8006dd8:	4415      	add	r5, r2
 8006dda:	4b67      	ldr	r3, [pc, #412]	@ (8006f78 <_strtod_l+0x858>)
 8006ddc:	f105 35ff 	add.w	r5, r5, #4294967295	@ 0xffffffff
 8006de0:	bfb8      	it	lt
 8006de2:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 8006de4:	429d      	cmp	r5, r3
 8006de6:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 8006dea:	da50      	bge.n	8006e8e <_strtod_l+0x76e>
 8006dec:	1b5b      	subs	r3, r3, r5
 8006dee:	2b1f      	cmp	r3, #31
 8006df0:	f04f 0101 	mov.w	r1, #1
 8006df4:	eba2 0203 	sub.w	r2, r2, r3
 8006df8:	dc3d      	bgt.n	8006e76 <_strtod_l+0x756>
 8006dfa:	fa01 f303 	lsl.w	r3, r1, r3
 8006dfe:	9313      	str	r3, [sp, #76]	@ 0x4c
 8006e00:	2300      	movs	r3, #0
 8006e02:	9310      	str	r3, [sp, #64]	@ 0x40
 8006e04:	18bd      	adds	r5, r7, r2
 8006e06:	9b08      	ldr	r3, [sp, #32]
 8006e08:	42af      	cmp	r7, r5
 8006e0a:	4416      	add	r6, r2
 8006e0c:	441e      	add	r6, r3
 8006e0e:	463b      	mov	r3, r7
 8006e10:	bfa8      	it	ge
 8006e12:	462b      	movge	r3, r5
 8006e14:	42b3      	cmp	r3, r6
 8006e16:	bfa8      	it	ge
 8006e18:	4633      	movge	r3, r6
 8006e1a:	2b00      	cmp	r3, #0
 8006e1c:	bfc2      	ittt	gt
 8006e1e:	1aed      	subgt	r5, r5, r3
 8006e20:	1af6      	subgt	r6, r6, r3
 8006e22:	1aff      	subgt	r7, r7, r3
 8006e24:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8006e26:	2b00      	cmp	r3, #0
 8006e28:	dd16      	ble.n	8006e58 <_strtod_l+0x738>
 8006e2a:	4641      	mov	r1, r8
 8006e2c:	461a      	mov	r2, r3
 8006e2e:	9805      	ldr	r0, [sp, #20]
 8006e30:	f002 fd2c 	bl	800988c <__pow5mult>
 8006e34:	4680      	mov	r8, r0
 8006e36:	2800      	cmp	r0, #0
 8006e38:	d0b7      	beq.n	8006daa <_strtod_l+0x68a>
 8006e3a:	4601      	mov	r1, r0
 8006e3c:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8006e3e:	9805      	ldr	r0, [sp, #20]
 8006e40:	f002 fc7c 	bl	800973c <__multiply>
 8006e44:	900e      	str	r0, [sp, #56]	@ 0x38
 8006e46:	2800      	cmp	r0, #0
 8006e48:	f43f ae85 	beq.w	8006b56 <_strtod_l+0x436>
 8006e4c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8006e4e:	9805      	ldr	r0, [sp, #20]
 8006e50:	f002 fb60 	bl	8009514 <_Bfree>
 8006e54:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006e56:	931a      	str	r3, [sp, #104]	@ 0x68
 8006e58:	2d00      	cmp	r5, #0
 8006e5a:	dc1d      	bgt.n	8006e98 <_strtod_l+0x778>
 8006e5c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006e5e:	2b00      	cmp	r3, #0
 8006e60:	dd23      	ble.n	8006eaa <_strtod_l+0x78a>
 8006e62:	4649      	mov	r1, r9
 8006e64:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8006e66:	9805      	ldr	r0, [sp, #20]
 8006e68:	f002 fd10 	bl	800988c <__pow5mult>
 8006e6c:	4681      	mov	r9, r0
 8006e6e:	b9e0      	cbnz	r0, 8006eaa <_strtod_l+0x78a>
 8006e70:	f04f 0900 	mov.w	r9, #0
 8006e74:	e66f      	b.n	8006b56 <_strtod_l+0x436>
 8006e76:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 8006e7a:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 8006e7e:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 8006e82:	35e2      	adds	r5, #226	@ 0xe2
 8006e84:	fa01 f305 	lsl.w	r3, r1, r5
 8006e88:	9310      	str	r3, [sp, #64]	@ 0x40
 8006e8a:	9113      	str	r1, [sp, #76]	@ 0x4c
 8006e8c:	e7ba      	b.n	8006e04 <_strtod_l+0x6e4>
 8006e8e:	2300      	movs	r3, #0
 8006e90:	9310      	str	r3, [sp, #64]	@ 0x40
 8006e92:	2301      	movs	r3, #1
 8006e94:	9313      	str	r3, [sp, #76]	@ 0x4c
 8006e96:	e7b5      	b.n	8006e04 <_strtod_l+0x6e4>
 8006e98:	462a      	mov	r2, r5
 8006e9a:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8006e9c:	9805      	ldr	r0, [sp, #20]
 8006e9e:	f002 fd4f 	bl	8009940 <__lshift>
 8006ea2:	901a      	str	r0, [sp, #104]	@ 0x68
 8006ea4:	2800      	cmp	r0, #0
 8006ea6:	d1d9      	bne.n	8006e5c <_strtod_l+0x73c>
 8006ea8:	e655      	b.n	8006b56 <_strtod_l+0x436>
 8006eaa:	2e00      	cmp	r6, #0
 8006eac:	dd07      	ble.n	8006ebe <_strtod_l+0x79e>
 8006eae:	4649      	mov	r1, r9
 8006eb0:	4632      	mov	r2, r6
 8006eb2:	9805      	ldr	r0, [sp, #20]
 8006eb4:	f002 fd44 	bl	8009940 <__lshift>
 8006eb8:	4681      	mov	r9, r0
 8006eba:	2800      	cmp	r0, #0
 8006ebc:	d0d8      	beq.n	8006e70 <_strtod_l+0x750>
 8006ebe:	2f00      	cmp	r7, #0
 8006ec0:	dd08      	ble.n	8006ed4 <_strtod_l+0x7b4>
 8006ec2:	4641      	mov	r1, r8
 8006ec4:	463a      	mov	r2, r7
 8006ec6:	9805      	ldr	r0, [sp, #20]
 8006ec8:	f002 fd3a 	bl	8009940 <__lshift>
 8006ecc:	4680      	mov	r8, r0
 8006ece:	2800      	cmp	r0, #0
 8006ed0:	f43f ae41 	beq.w	8006b56 <_strtod_l+0x436>
 8006ed4:	464a      	mov	r2, r9
 8006ed6:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8006ed8:	9805      	ldr	r0, [sp, #20]
 8006eda:	f002 fdb9 	bl	8009a50 <__mdiff>
 8006ede:	4604      	mov	r4, r0
 8006ee0:	2800      	cmp	r0, #0
 8006ee2:	f43f ae38 	beq.w	8006b56 <_strtod_l+0x436>
 8006ee6:	68c3      	ldr	r3, [r0, #12]
 8006ee8:	4641      	mov	r1, r8
 8006eea:	930f      	str	r3, [sp, #60]	@ 0x3c
 8006eec:	2300      	movs	r3, #0
 8006eee:	60c3      	str	r3, [r0, #12]
 8006ef0:	f002 fd92 	bl	8009a18 <__mcmp>
 8006ef4:	2800      	cmp	r0, #0
 8006ef6:	da45      	bge.n	8006f84 <_strtod_l+0x864>
 8006ef8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006efa:	ea53 030a 	orrs.w	r3, r3, sl
 8006efe:	d16b      	bne.n	8006fd8 <_strtod_l+0x8b8>
 8006f00:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8006f04:	2b00      	cmp	r3, #0
 8006f06:	d167      	bne.n	8006fd8 <_strtod_l+0x8b8>
 8006f08:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8006f0c:	0d1b      	lsrs	r3, r3, #20
 8006f0e:	051b      	lsls	r3, r3, #20
 8006f10:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8006f14:	d960      	bls.n	8006fd8 <_strtod_l+0x8b8>
 8006f16:	6963      	ldr	r3, [r4, #20]
 8006f18:	b913      	cbnz	r3, 8006f20 <_strtod_l+0x800>
 8006f1a:	6923      	ldr	r3, [r4, #16]
 8006f1c:	2b01      	cmp	r3, #1
 8006f1e:	dd5b      	ble.n	8006fd8 <_strtod_l+0x8b8>
 8006f20:	4621      	mov	r1, r4
 8006f22:	2201      	movs	r2, #1
 8006f24:	9805      	ldr	r0, [sp, #20]
 8006f26:	f002 fd0b 	bl	8009940 <__lshift>
 8006f2a:	4641      	mov	r1, r8
 8006f2c:	4604      	mov	r4, r0
 8006f2e:	f002 fd73 	bl	8009a18 <__mcmp>
 8006f32:	2800      	cmp	r0, #0
 8006f34:	dd50      	ble.n	8006fd8 <_strtod_l+0x8b8>
 8006f36:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8006f3a:	9a08      	ldr	r2, [sp, #32]
 8006f3c:	0d1b      	lsrs	r3, r3, #20
 8006f3e:	051b      	lsls	r3, r3, #20
 8006f40:	2a00      	cmp	r2, #0
 8006f42:	d06a      	beq.n	800701a <_strtod_l+0x8fa>
 8006f44:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8006f48:	d867      	bhi.n	800701a <_strtod_l+0x8fa>
 8006f4a:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 8006f4e:	f67f ae98 	bls.w	8006c82 <_strtod_l+0x562>
 8006f52:	4650      	mov	r0, sl
 8006f54:	4659      	mov	r1, fp
 8006f56:	4b09      	ldr	r3, [pc, #36]	@ (8006f7c <_strtod_l+0x85c>)
 8006f58:	2200      	movs	r2, #0
 8006f5a:	f7f9 fb71 	bl	8000640 <__aeabi_dmul>
 8006f5e:	4b08      	ldr	r3, [pc, #32]	@ (8006f80 <_strtod_l+0x860>)
 8006f60:	4682      	mov	sl, r0
 8006f62:	400b      	ands	r3, r1
 8006f64:	468b      	mov	fp, r1
 8006f66:	2b00      	cmp	r3, #0
 8006f68:	f47f ae00 	bne.w	8006b6c <_strtod_l+0x44c>
 8006f6c:	2322      	movs	r3, #34	@ 0x22
 8006f6e:	9a05      	ldr	r2, [sp, #20]
 8006f70:	6013      	str	r3, [r2, #0]
 8006f72:	e5fb      	b.n	8006b6c <_strtod_l+0x44c>
 8006f74:	0800abc8 	.word	0x0800abc8
 8006f78:	fffffc02 	.word	0xfffffc02
 8006f7c:	39500000 	.word	0x39500000
 8006f80:	7ff00000 	.word	0x7ff00000
 8006f84:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8006f88:	d165      	bne.n	8007056 <_strtod_l+0x936>
 8006f8a:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8006f8c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8006f90:	b35a      	cbz	r2, 8006fea <_strtod_l+0x8ca>
 8006f92:	4a99      	ldr	r2, [pc, #612]	@ (80071f8 <_strtod_l+0xad8>)
 8006f94:	4293      	cmp	r3, r2
 8006f96:	d12b      	bne.n	8006ff0 <_strtod_l+0x8d0>
 8006f98:	9b08      	ldr	r3, [sp, #32]
 8006f9a:	4651      	mov	r1, sl
 8006f9c:	b303      	cbz	r3, 8006fe0 <_strtod_l+0x8c0>
 8006f9e:	465a      	mov	r2, fp
 8006fa0:	4b96      	ldr	r3, [pc, #600]	@ (80071fc <_strtod_l+0xadc>)
 8006fa2:	4013      	ands	r3, r2
 8006fa4:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 8006fa8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8006fac:	d81b      	bhi.n	8006fe6 <_strtod_l+0x8c6>
 8006fae:	0d1b      	lsrs	r3, r3, #20
 8006fb0:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8006fb4:	fa02 f303 	lsl.w	r3, r2, r3
 8006fb8:	4299      	cmp	r1, r3
 8006fba:	d119      	bne.n	8006ff0 <_strtod_l+0x8d0>
 8006fbc:	4b90      	ldr	r3, [pc, #576]	@ (8007200 <_strtod_l+0xae0>)
 8006fbe:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8006fc0:	429a      	cmp	r2, r3
 8006fc2:	d102      	bne.n	8006fca <_strtod_l+0x8aa>
 8006fc4:	3101      	adds	r1, #1
 8006fc6:	f43f adc6 	beq.w	8006b56 <_strtod_l+0x436>
 8006fca:	f04f 0a00 	mov.w	sl, #0
 8006fce:	4b8b      	ldr	r3, [pc, #556]	@ (80071fc <_strtod_l+0xadc>)
 8006fd0:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8006fd2:	401a      	ands	r2, r3
 8006fd4:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 8006fd8:	9b08      	ldr	r3, [sp, #32]
 8006fda:	2b00      	cmp	r3, #0
 8006fdc:	d1b9      	bne.n	8006f52 <_strtod_l+0x832>
 8006fde:	e5c5      	b.n	8006b6c <_strtod_l+0x44c>
 8006fe0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8006fe4:	e7e8      	b.n	8006fb8 <_strtod_l+0x898>
 8006fe6:	4613      	mov	r3, r2
 8006fe8:	e7e6      	b.n	8006fb8 <_strtod_l+0x898>
 8006fea:	ea53 030a 	orrs.w	r3, r3, sl
 8006fee:	d0a2      	beq.n	8006f36 <_strtod_l+0x816>
 8006ff0:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8006ff2:	b1db      	cbz	r3, 800702c <_strtod_l+0x90c>
 8006ff4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8006ff6:	4213      	tst	r3, r2
 8006ff8:	d0ee      	beq.n	8006fd8 <_strtod_l+0x8b8>
 8006ffa:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006ffc:	4650      	mov	r0, sl
 8006ffe:	4659      	mov	r1, fp
 8007000:	9a08      	ldr	r2, [sp, #32]
 8007002:	b1bb      	cbz	r3, 8007034 <_strtod_l+0x914>
 8007004:	f7ff fb68 	bl	80066d8 <sulp>
 8007008:	4602      	mov	r2, r0
 800700a:	460b      	mov	r3, r1
 800700c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007010:	f7f9 f960 	bl	80002d4 <__adddf3>
 8007014:	4682      	mov	sl, r0
 8007016:	468b      	mov	fp, r1
 8007018:	e7de      	b.n	8006fd8 <_strtod_l+0x8b8>
 800701a:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800701e:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8007022:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 8007026:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800702a:	e7d5      	b.n	8006fd8 <_strtod_l+0x8b8>
 800702c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800702e:	ea13 0f0a 	tst.w	r3, sl
 8007032:	e7e1      	b.n	8006ff8 <_strtod_l+0x8d8>
 8007034:	f7ff fb50 	bl	80066d8 <sulp>
 8007038:	4602      	mov	r2, r0
 800703a:	460b      	mov	r3, r1
 800703c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007040:	f7f9 f946 	bl	80002d0 <__aeabi_dsub>
 8007044:	2200      	movs	r2, #0
 8007046:	2300      	movs	r3, #0
 8007048:	4682      	mov	sl, r0
 800704a:	468b      	mov	fp, r1
 800704c:	f7f9 fd60 	bl	8000b10 <__aeabi_dcmpeq>
 8007050:	2800      	cmp	r0, #0
 8007052:	d0c1      	beq.n	8006fd8 <_strtod_l+0x8b8>
 8007054:	e615      	b.n	8006c82 <_strtod_l+0x562>
 8007056:	4641      	mov	r1, r8
 8007058:	4620      	mov	r0, r4
 800705a:	f002 fe4d 	bl	8009cf8 <__ratio>
 800705e:	2200      	movs	r2, #0
 8007060:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8007064:	4606      	mov	r6, r0
 8007066:	460f      	mov	r7, r1
 8007068:	f7f9 fd66 	bl	8000b38 <__aeabi_dcmple>
 800706c:	2800      	cmp	r0, #0
 800706e:	d06d      	beq.n	800714c <_strtod_l+0xa2c>
 8007070:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007072:	2b00      	cmp	r3, #0
 8007074:	d178      	bne.n	8007168 <_strtod_l+0xa48>
 8007076:	f1ba 0f00 	cmp.w	sl, #0
 800707a:	d156      	bne.n	800712a <_strtod_l+0xa0a>
 800707c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800707e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007082:	2b00      	cmp	r3, #0
 8007084:	d158      	bne.n	8007138 <_strtod_l+0xa18>
 8007086:	2200      	movs	r2, #0
 8007088:	4630      	mov	r0, r6
 800708a:	4639      	mov	r1, r7
 800708c:	4b5d      	ldr	r3, [pc, #372]	@ (8007204 <_strtod_l+0xae4>)
 800708e:	f7f9 fd49 	bl	8000b24 <__aeabi_dcmplt>
 8007092:	2800      	cmp	r0, #0
 8007094:	d157      	bne.n	8007146 <_strtod_l+0xa26>
 8007096:	4630      	mov	r0, r6
 8007098:	4639      	mov	r1, r7
 800709a:	2200      	movs	r2, #0
 800709c:	4b5a      	ldr	r3, [pc, #360]	@ (8007208 <_strtod_l+0xae8>)
 800709e:	f7f9 facf 	bl	8000640 <__aeabi_dmul>
 80070a2:	4606      	mov	r6, r0
 80070a4:	460f      	mov	r7, r1
 80070a6:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 80070aa:	9606      	str	r6, [sp, #24]
 80070ac:	9307      	str	r3, [sp, #28]
 80070ae:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80070b2:	4d52      	ldr	r5, [pc, #328]	@ (80071fc <_strtod_l+0xadc>)
 80070b4:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 80070b8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80070ba:	401d      	ands	r5, r3
 80070bc:	4b53      	ldr	r3, [pc, #332]	@ (800720c <_strtod_l+0xaec>)
 80070be:	429d      	cmp	r5, r3
 80070c0:	f040 80aa 	bne.w	8007218 <_strtod_l+0xaf8>
 80070c4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80070c6:	4650      	mov	r0, sl
 80070c8:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 80070cc:	4659      	mov	r1, fp
 80070ce:	f002 fd53 	bl	8009b78 <__ulp>
 80070d2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80070d6:	f7f9 fab3 	bl	8000640 <__aeabi_dmul>
 80070da:	4652      	mov	r2, sl
 80070dc:	465b      	mov	r3, fp
 80070de:	f7f9 f8f9 	bl	80002d4 <__adddf3>
 80070e2:	460b      	mov	r3, r1
 80070e4:	4945      	ldr	r1, [pc, #276]	@ (80071fc <_strtod_l+0xadc>)
 80070e6:	4a4a      	ldr	r2, [pc, #296]	@ (8007210 <_strtod_l+0xaf0>)
 80070e8:	4019      	ands	r1, r3
 80070ea:	4291      	cmp	r1, r2
 80070ec:	4682      	mov	sl, r0
 80070ee:	d942      	bls.n	8007176 <_strtod_l+0xa56>
 80070f0:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80070f2:	4b43      	ldr	r3, [pc, #268]	@ (8007200 <_strtod_l+0xae0>)
 80070f4:	429a      	cmp	r2, r3
 80070f6:	d103      	bne.n	8007100 <_strtod_l+0x9e0>
 80070f8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80070fa:	3301      	adds	r3, #1
 80070fc:	f43f ad2b 	beq.w	8006b56 <_strtod_l+0x436>
 8007100:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 8007104:	f8df b0f8 	ldr.w	fp, [pc, #248]	@ 8007200 <_strtod_l+0xae0>
 8007108:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800710a:	9805      	ldr	r0, [sp, #20]
 800710c:	f002 fa02 	bl	8009514 <_Bfree>
 8007110:	4649      	mov	r1, r9
 8007112:	9805      	ldr	r0, [sp, #20]
 8007114:	f002 f9fe 	bl	8009514 <_Bfree>
 8007118:	4641      	mov	r1, r8
 800711a:	9805      	ldr	r0, [sp, #20]
 800711c:	f002 f9fa 	bl	8009514 <_Bfree>
 8007120:	4621      	mov	r1, r4
 8007122:	9805      	ldr	r0, [sp, #20]
 8007124:	f002 f9f6 	bl	8009514 <_Bfree>
 8007128:	e618      	b.n	8006d5c <_strtod_l+0x63c>
 800712a:	f1ba 0f01 	cmp.w	sl, #1
 800712e:	d103      	bne.n	8007138 <_strtod_l+0xa18>
 8007130:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007132:	2b00      	cmp	r3, #0
 8007134:	f43f ada5 	beq.w	8006c82 <_strtod_l+0x562>
 8007138:	2200      	movs	r2, #0
 800713a:	4b36      	ldr	r3, [pc, #216]	@ (8007214 <_strtod_l+0xaf4>)
 800713c:	2600      	movs	r6, #0
 800713e:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8007142:	4f30      	ldr	r7, [pc, #192]	@ (8007204 <_strtod_l+0xae4>)
 8007144:	e7b3      	b.n	80070ae <_strtod_l+0x98e>
 8007146:	2600      	movs	r6, #0
 8007148:	4f2f      	ldr	r7, [pc, #188]	@ (8007208 <_strtod_l+0xae8>)
 800714a:	e7ac      	b.n	80070a6 <_strtod_l+0x986>
 800714c:	4630      	mov	r0, r6
 800714e:	4639      	mov	r1, r7
 8007150:	4b2d      	ldr	r3, [pc, #180]	@ (8007208 <_strtod_l+0xae8>)
 8007152:	2200      	movs	r2, #0
 8007154:	f7f9 fa74 	bl	8000640 <__aeabi_dmul>
 8007158:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800715a:	4606      	mov	r6, r0
 800715c:	460f      	mov	r7, r1
 800715e:	2b00      	cmp	r3, #0
 8007160:	d0a1      	beq.n	80070a6 <_strtod_l+0x986>
 8007162:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8007166:	e7a2      	b.n	80070ae <_strtod_l+0x98e>
 8007168:	2200      	movs	r2, #0
 800716a:	4b26      	ldr	r3, [pc, #152]	@ (8007204 <_strtod_l+0xae4>)
 800716c:	4616      	mov	r6, r2
 800716e:	461f      	mov	r7, r3
 8007170:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8007174:	e79b      	b.n	80070ae <_strtod_l+0x98e>
 8007176:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 800717a:	9b08      	ldr	r3, [sp, #32]
 800717c:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8007180:	2b00      	cmp	r3, #0
 8007182:	d1c1      	bne.n	8007108 <_strtod_l+0x9e8>
 8007184:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8007188:	0d1b      	lsrs	r3, r3, #20
 800718a:	051b      	lsls	r3, r3, #20
 800718c:	429d      	cmp	r5, r3
 800718e:	d1bb      	bne.n	8007108 <_strtod_l+0x9e8>
 8007190:	4630      	mov	r0, r6
 8007192:	4639      	mov	r1, r7
 8007194:	f7f9 ff08 	bl	8000fa8 <__aeabi_d2lz>
 8007198:	f7f9 fa24 	bl	80005e4 <__aeabi_l2d>
 800719c:	4602      	mov	r2, r0
 800719e:	460b      	mov	r3, r1
 80071a0:	4630      	mov	r0, r6
 80071a2:	4639      	mov	r1, r7
 80071a4:	f7f9 f894 	bl	80002d0 <__aeabi_dsub>
 80071a8:	460b      	mov	r3, r1
 80071aa:	4602      	mov	r2, r0
 80071ac:	f3cb 0613 	ubfx	r6, fp, #0, #20
 80071b0:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 80071b4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80071b6:	ea46 060a 	orr.w	r6, r6, sl
 80071ba:	431e      	orrs	r6, r3
 80071bc:	d069      	beq.n	8007292 <_strtod_l+0xb72>
 80071be:	a30a      	add	r3, pc, #40	@ (adr r3, 80071e8 <_strtod_l+0xac8>)
 80071c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071c4:	f7f9 fcae 	bl	8000b24 <__aeabi_dcmplt>
 80071c8:	2800      	cmp	r0, #0
 80071ca:	f47f accf 	bne.w	8006b6c <_strtod_l+0x44c>
 80071ce:	a308      	add	r3, pc, #32	@ (adr r3, 80071f0 <_strtod_l+0xad0>)
 80071d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071d4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80071d8:	f7f9 fcc2 	bl	8000b60 <__aeabi_dcmpgt>
 80071dc:	2800      	cmp	r0, #0
 80071de:	d093      	beq.n	8007108 <_strtod_l+0x9e8>
 80071e0:	e4c4      	b.n	8006b6c <_strtod_l+0x44c>
 80071e2:	bf00      	nop
 80071e4:	f3af 8000 	nop.w
 80071e8:	94a03595 	.word	0x94a03595
 80071ec:	3fdfffff 	.word	0x3fdfffff
 80071f0:	35afe535 	.word	0x35afe535
 80071f4:	3fe00000 	.word	0x3fe00000
 80071f8:	000fffff 	.word	0x000fffff
 80071fc:	7ff00000 	.word	0x7ff00000
 8007200:	7fefffff 	.word	0x7fefffff
 8007204:	3ff00000 	.word	0x3ff00000
 8007208:	3fe00000 	.word	0x3fe00000
 800720c:	7fe00000 	.word	0x7fe00000
 8007210:	7c9fffff 	.word	0x7c9fffff
 8007214:	bff00000 	.word	0xbff00000
 8007218:	9b08      	ldr	r3, [sp, #32]
 800721a:	b323      	cbz	r3, 8007266 <_strtod_l+0xb46>
 800721c:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 8007220:	d821      	bhi.n	8007266 <_strtod_l+0xb46>
 8007222:	a327      	add	r3, pc, #156	@ (adr r3, 80072c0 <_strtod_l+0xba0>)
 8007224:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007228:	4630      	mov	r0, r6
 800722a:	4639      	mov	r1, r7
 800722c:	f7f9 fc84 	bl	8000b38 <__aeabi_dcmple>
 8007230:	b1a0      	cbz	r0, 800725c <_strtod_l+0xb3c>
 8007232:	4639      	mov	r1, r7
 8007234:	4630      	mov	r0, r6
 8007236:	f7f9 fcdb 	bl	8000bf0 <__aeabi_d2uiz>
 800723a:	2801      	cmp	r0, #1
 800723c:	bf38      	it	cc
 800723e:	2001      	movcc	r0, #1
 8007240:	f7f9 f984 	bl	800054c <__aeabi_ui2d>
 8007244:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007246:	4606      	mov	r6, r0
 8007248:	460f      	mov	r7, r1
 800724a:	b9fb      	cbnz	r3, 800728c <_strtod_l+0xb6c>
 800724c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8007250:	9014      	str	r0, [sp, #80]	@ 0x50
 8007252:	9315      	str	r3, [sp, #84]	@ 0x54
 8007254:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 8007258:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800725c:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800725e:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 8007262:	1b5b      	subs	r3, r3, r5
 8007264:	9311      	str	r3, [sp, #68]	@ 0x44
 8007266:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800726a:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 800726e:	f002 fc83 	bl	8009b78 <__ulp>
 8007272:	4602      	mov	r2, r0
 8007274:	460b      	mov	r3, r1
 8007276:	4650      	mov	r0, sl
 8007278:	4659      	mov	r1, fp
 800727a:	f7f9 f9e1 	bl	8000640 <__aeabi_dmul>
 800727e:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8007282:	f7f9 f827 	bl	80002d4 <__adddf3>
 8007286:	4682      	mov	sl, r0
 8007288:	468b      	mov	fp, r1
 800728a:	e776      	b.n	800717a <_strtod_l+0xa5a>
 800728c:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 8007290:	e7e0      	b.n	8007254 <_strtod_l+0xb34>
 8007292:	a30d      	add	r3, pc, #52	@ (adr r3, 80072c8 <_strtod_l+0xba8>)
 8007294:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007298:	f7f9 fc44 	bl	8000b24 <__aeabi_dcmplt>
 800729c:	e79e      	b.n	80071dc <_strtod_l+0xabc>
 800729e:	2300      	movs	r3, #0
 80072a0:	930b      	str	r3, [sp, #44]	@ 0x2c
 80072a2:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80072a4:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 80072a6:	6013      	str	r3, [r2, #0]
 80072a8:	f7ff ba77 	b.w	800679a <_strtod_l+0x7a>
 80072ac:	2a65      	cmp	r2, #101	@ 0x65
 80072ae:	f43f ab6e 	beq.w	800698e <_strtod_l+0x26e>
 80072b2:	2a45      	cmp	r2, #69	@ 0x45
 80072b4:	f43f ab6b 	beq.w	800698e <_strtod_l+0x26e>
 80072b8:	2301      	movs	r3, #1
 80072ba:	f7ff bba6 	b.w	8006a0a <_strtod_l+0x2ea>
 80072be:	bf00      	nop
 80072c0:	ffc00000 	.word	0xffc00000
 80072c4:	41dfffff 	.word	0x41dfffff
 80072c8:	94a03595 	.word	0x94a03595
 80072cc:	3fcfffff 	.word	0x3fcfffff

080072d0 <strtod>:
 80072d0:	460a      	mov	r2, r1
 80072d2:	4601      	mov	r1, r0
 80072d4:	4802      	ldr	r0, [pc, #8]	@ (80072e0 <strtod+0x10>)
 80072d6:	4b03      	ldr	r3, [pc, #12]	@ (80072e4 <strtod+0x14>)
 80072d8:	6800      	ldr	r0, [r0, #0]
 80072da:	f7ff ba21 	b.w	8006720 <_strtod_l>
 80072de:	bf00      	nop
 80072e0:	200002f4 	.word	0x200002f4
 80072e4:	20000188 	.word	0x20000188

080072e8 <atoll>:
 80072e8:	220a      	movs	r2, #10
 80072ea:	2100      	movs	r1, #0
 80072ec:	f002 be14 	b.w	8009f18 <strtoll>

080072f0 <__cvt>:
 80072f0:	2b00      	cmp	r3, #0
 80072f2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80072f6:	461d      	mov	r5, r3
 80072f8:	bfbb      	ittet	lt
 80072fa:	f103 4300 	addlt.w	r3, r3, #2147483648	@ 0x80000000
 80072fe:	461d      	movlt	r5, r3
 8007300:	2300      	movge	r3, #0
 8007302:	232d      	movlt	r3, #45	@ 0x2d
 8007304:	b088      	sub	sp, #32
 8007306:	4614      	mov	r4, r2
 8007308:	bfb8      	it	lt
 800730a:	4614      	movlt	r4, r2
 800730c:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800730e:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 8007310:	7013      	strb	r3, [r2, #0]
 8007312:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8007314:	f8dd a04c 	ldr.w	sl, [sp, #76]	@ 0x4c
 8007318:	f023 0820 	bic.w	r8, r3, #32
 800731c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8007320:	d005      	beq.n	800732e <__cvt+0x3e>
 8007322:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8007326:	d100      	bne.n	800732a <__cvt+0x3a>
 8007328:	3601      	adds	r6, #1
 800732a:	2302      	movs	r3, #2
 800732c:	e000      	b.n	8007330 <__cvt+0x40>
 800732e:	2303      	movs	r3, #3
 8007330:	aa07      	add	r2, sp, #28
 8007332:	9204      	str	r2, [sp, #16]
 8007334:	aa06      	add	r2, sp, #24
 8007336:	e9cd a202 	strd	sl, r2, [sp, #8]
 800733a:	e9cd 3600 	strd	r3, r6, [sp]
 800733e:	4622      	mov	r2, r4
 8007340:	462b      	mov	r3, r5
 8007342:	f000 fe95 	bl	8008070 <_dtoa_r>
 8007346:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800734a:	4607      	mov	r7, r0
 800734c:	d119      	bne.n	8007382 <__cvt+0x92>
 800734e:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8007350:	07db      	lsls	r3, r3, #31
 8007352:	d50e      	bpl.n	8007372 <__cvt+0x82>
 8007354:	eb00 0906 	add.w	r9, r0, r6
 8007358:	2200      	movs	r2, #0
 800735a:	2300      	movs	r3, #0
 800735c:	4620      	mov	r0, r4
 800735e:	4629      	mov	r1, r5
 8007360:	f7f9 fbd6 	bl	8000b10 <__aeabi_dcmpeq>
 8007364:	b108      	cbz	r0, 800736a <__cvt+0x7a>
 8007366:	f8cd 901c 	str.w	r9, [sp, #28]
 800736a:	2230      	movs	r2, #48	@ 0x30
 800736c:	9b07      	ldr	r3, [sp, #28]
 800736e:	454b      	cmp	r3, r9
 8007370:	d31e      	bcc.n	80073b0 <__cvt+0xc0>
 8007372:	4638      	mov	r0, r7
 8007374:	9b07      	ldr	r3, [sp, #28]
 8007376:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 8007378:	1bdb      	subs	r3, r3, r7
 800737a:	6013      	str	r3, [r2, #0]
 800737c:	b008      	add	sp, #32
 800737e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007382:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8007386:	eb00 0906 	add.w	r9, r0, r6
 800738a:	d1e5      	bne.n	8007358 <__cvt+0x68>
 800738c:	7803      	ldrb	r3, [r0, #0]
 800738e:	2b30      	cmp	r3, #48	@ 0x30
 8007390:	d10a      	bne.n	80073a8 <__cvt+0xb8>
 8007392:	2200      	movs	r2, #0
 8007394:	2300      	movs	r3, #0
 8007396:	4620      	mov	r0, r4
 8007398:	4629      	mov	r1, r5
 800739a:	f7f9 fbb9 	bl	8000b10 <__aeabi_dcmpeq>
 800739e:	b918      	cbnz	r0, 80073a8 <__cvt+0xb8>
 80073a0:	f1c6 0601 	rsb	r6, r6, #1
 80073a4:	f8ca 6000 	str.w	r6, [sl]
 80073a8:	f8da 3000 	ldr.w	r3, [sl]
 80073ac:	4499      	add	r9, r3
 80073ae:	e7d3      	b.n	8007358 <__cvt+0x68>
 80073b0:	1c59      	adds	r1, r3, #1
 80073b2:	9107      	str	r1, [sp, #28]
 80073b4:	701a      	strb	r2, [r3, #0]
 80073b6:	e7d9      	b.n	800736c <__cvt+0x7c>

080073b8 <__exponent>:
 80073b8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80073ba:	2900      	cmp	r1, #0
 80073bc:	bfb6      	itet	lt
 80073be:	232d      	movlt	r3, #45	@ 0x2d
 80073c0:	232b      	movge	r3, #43	@ 0x2b
 80073c2:	4249      	neglt	r1, r1
 80073c4:	2909      	cmp	r1, #9
 80073c6:	7002      	strb	r2, [r0, #0]
 80073c8:	7043      	strb	r3, [r0, #1]
 80073ca:	dd29      	ble.n	8007420 <__exponent+0x68>
 80073cc:	f10d 0307 	add.w	r3, sp, #7
 80073d0:	461d      	mov	r5, r3
 80073d2:	270a      	movs	r7, #10
 80073d4:	fbb1 f6f7 	udiv	r6, r1, r7
 80073d8:	461a      	mov	r2, r3
 80073da:	fb07 1416 	mls	r4, r7, r6, r1
 80073de:	3430      	adds	r4, #48	@ 0x30
 80073e0:	f802 4c01 	strb.w	r4, [r2, #-1]
 80073e4:	460c      	mov	r4, r1
 80073e6:	2c63      	cmp	r4, #99	@ 0x63
 80073e8:	4631      	mov	r1, r6
 80073ea:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 80073ee:	dcf1      	bgt.n	80073d4 <__exponent+0x1c>
 80073f0:	3130      	adds	r1, #48	@ 0x30
 80073f2:	1e94      	subs	r4, r2, #2
 80073f4:	f803 1c01 	strb.w	r1, [r3, #-1]
 80073f8:	4623      	mov	r3, r4
 80073fa:	1c41      	adds	r1, r0, #1
 80073fc:	42ab      	cmp	r3, r5
 80073fe:	d30a      	bcc.n	8007416 <__exponent+0x5e>
 8007400:	f10d 0309 	add.w	r3, sp, #9
 8007404:	1a9b      	subs	r3, r3, r2
 8007406:	42ac      	cmp	r4, r5
 8007408:	bf88      	it	hi
 800740a:	2300      	movhi	r3, #0
 800740c:	3302      	adds	r3, #2
 800740e:	4403      	add	r3, r0
 8007410:	1a18      	subs	r0, r3, r0
 8007412:	b003      	add	sp, #12
 8007414:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007416:	f813 6b01 	ldrb.w	r6, [r3], #1
 800741a:	f801 6f01 	strb.w	r6, [r1, #1]!
 800741e:	e7ed      	b.n	80073fc <__exponent+0x44>
 8007420:	2330      	movs	r3, #48	@ 0x30
 8007422:	3130      	adds	r1, #48	@ 0x30
 8007424:	7083      	strb	r3, [r0, #2]
 8007426:	70c1      	strb	r1, [r0, #3]
 8007428:	1d03      	adds	r3, r0, #4
 800742a:	e7f1      	b.n	8007410 <__exponent+0x58>

0800742c <_printf_float>:
 800742c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007430:	b091      	sub	sp, #68	@ 0x44
 8007432:	460c      	mov	r4, r1
 8007434:	f8dd 8068 	ldr.w	r8, [sp, #104]	@ 0x68
 8007438:	4616      	mov	r6, r2
 800743a:	461f      	mov	r7, r3
 800743c:	4605      	mov	r5, r0
 800743e:	f000 fcf3 	bl	8007e28 <_localeconv_r>
 8007442:	6803      	ldr	r3, [r0, #0]
 8007444:	4618      	mov	r0, r3
 8007446:	9308      	str	r3, [sp, #32]
 8007448:	f7f8 fe82 	bl	8000150 <strlen>
 800744c:	2300      	movs	r3, #0
 800744e:	930e      	str	r3, [sp, #56]	@ 0x38
 8007450:	f8d8 3000 	ldr.w	r3, [r8]
 8007454:	9009      	str	r0, [sp, #36]	@ 0x24
 8007456:	3307      	adds	r3, #7
 8007458:	f023 0307 	bic.w	r3, r3, #7
 800745c:	f103 0208 	add.w	r2, r3, #8
 8007460:	f894 a018 	ldrb.w	sl, [r4, #24]
 8007464:	f8d4 b000 	ldr.w	fp, [r4]
 8007468:	f8c8 2000 	str.w	r2, [r8]
 800746c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007470:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8007474:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007476:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 800747a:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800747e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8007482:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8007486:	4b9c      	ldr	r3, [pc, #624]	@ (80076f8 <_printf_float+0x2cc>)
 8007488:	f7f9 fb74 	bl	8000b74 <__aeabi_dcmpun>
 800748c:	bb70      	cbnz	r0, 80074ec <_printf_float+0xc0>
 800748e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8007492:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8007496:	4b98      	ldr	r3, [pc, #608]	@ (80076f8 <_printf_float+0x2cc>)
 8007498:	f7f9 fb4e 	bl	8000b38 <__aeabi_dcmple>
 800749c:	bb30      	cbnz	r0, 80074ec <_printf_float+0xc0>
 800749e:	2200      	movs	r2, #0
 80074a0:	2300      	movs	r3, #0
 80074a2:	4640      	mov	r0, r8
 80074a4:	4649      	mov	r1, r9
 80074a6:	f7f9 fb3d 	bl	8000b24 <__aeabi_dcmplt>
 80074aa:	b110      	cbz	r0, 80074b2 <_printf_float+0x86>
 80074ac:	232d      	movs	r3, #45	@ 0x2d
 80074ae:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80074b2:	4a92      	ldr	r2, [pc, #584]	@ (80076fc <_printf_float+0x2d0>)
 80074b4:	4b92      	ldr	r3, [pc, #584]	@ (8007700 <_printf_float+0x2d4>)
 80074b6:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 80074ba:	bf94      	ite	ls
 80074bc:	4690      	movls	r8, r2
 80074be:	4698      	movhi	r8, r3
 80074c0:	2303      	movs	r3, #3
 80074c2:	f04f 0900 	mov.w	r9, #0
 80074c6:	6123      	str	r3, [r4, #16]
 80074c8:	f02b 0304 	bic.w	r3, fp, #4
 80074cc:	6023      	str	r3, [r4, #0]
 80074ce:	4633      	mov	r3, r6
 80074d0:	4621      	mov	r1, r4
 80074d2:	4628      	mov	r0, r5
 80074d4:	9700      	str	r7, [sp, #0]
 80074d6:	aa0f      	add	r2, sp, #60	@ 0x3c
 80074d8:	f000 f9d4 	bl	8007884 <_printf_common>
 80074dc:	3001      	adds	r0, #1
 80074de:	f040 8090 	bne.w	8007602 <_printf_float+0x1d6>
 80074e2:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80074e6:	b011      	add	sp, #68	@ 0x44
 80074e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80074ec:	4642      	mov	r2, r8
 80074ee:	464b      	mov	r3, r9
 80074f0:	4640      	mov	r0, r8
 80074f2:	4649      	mov	r1, r9
 80074f4:	f7f9 fb3e 	bl	8000b74 <__aeabi_dcmpun>
 80074f8:	b148      	cbz	r0, 800750e <_printf_float+0xe2>
 80074fa:	464b      	mov	r3, r9
 80074fc:	2b00      	cmp	r3, #0
 80074fe:	bfb8      	it	lt
 8007500:	232d      	movlt	r3, #45	@ 0x2d
 8007502:	4a80      	ldr	r2, [pc, #512]	@ (8007704 <_printf_float+0x2d8>)
 8007504:	bfb8      	it	lt
 8007506:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800750a:	4b7f      	ldr	r3, [pc, #508]	@ (8007708 <_printf_float+0x2dc>)
 800750c:	e7d3      	b.n	80074b6 <_printf_float+0x8a>
 800750e:	6863      	ldr	r3, [r4, #4]
 8007510:	f00a 01df 	and.w	r1, sl, #223	@ 0xdf
 8007514:	1c5a      	adds	r2, r3, #1
 8007516:	d13f      	bne.n	8007598 <_printf_float+0x16c>
 8007518:	2306      	movs	r3, #6
 800751a:	6063      	str	r3, [r4, #4]
 800751c:	2200      	movs	r2, #0
 800751e:	f44b 6380 	orr.w	r3, fp, #1024	@ 0x400
 8007522:	6023      	str	r3, [r4, #0]
 8007524:	9206      	str	r2, [sp, #24]
 8007526:	aa0e      	add	r2, sp, #56	@ 0x38
 8007528:	e9cd a204 	strd	sl, r2, [sp, #16]
 800752c:	aa0d      	add	r2, sp, #52	@ 0x34
 800752e:	9203      	str	r2, [sp, #12]
 8007530:	f10d 0233 	add.w	r2, sp, #51	@ 0x33
 8007534:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8007538:	6863      	ldr	r3, [r4, #4]
 800753a:	4642      	mov	r2, r8
 800753c:	9300      	str	r3, [sp, #0]
 800753e:	4628      	mov	r0, r5
 8007540:	464b      	mov	r3, r9
 8007542:	910a      	str	r1, [sp, #40]	@ 0x28
 8007544:	f7ff fed4 	bl	80072f0 <__cvt>
 8007548:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800754a:	4680      	mov	r8, r0
 800754c:	2947      	cmp	r1, #71	@ 0x47
 800754e:	990d      	ldr	r1, [sp, #52]	@ 0x34
 8007550:	d128      	bne.n	80075a4 <_printf_float+0x178>
 8007552:	1cc8      	adds	r0, r1, #3
 8007554:	db02      	blt.n	800755c <_printf_float+0x130>
 8007556:	6863      	ldr	r3, [r4, #4]
 8007558:	4299      	cmp	r1, r3
 800755a:	dd40      	ble.n	80075de <_printf_float+0x1b2>
 800755c:	f1aa 0a02 	sub.w	sl, sl, #2
 8007560:	fa5f fa8a 	uxtb.w	sl, sl
 8007564:	4652      	mov	r2, sl
 8007566:	3901      	subs	r1, #1
 8007568:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800756c:	910d      	str	r1, [sp, #52]	@ 0x34
 800756e:	f7ff ff23 	bl	80073b8 <__exponent>
 8007572:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8007574:	4681      	mov	r9, r0
 8007576:	1813      	adds	r3, r2, r0
 8007578:	2a01      	cmp	r2, #1
 800757a:	6123      	str	r3, [r4, #16]
 800757c:	dc02      	bgt.n	8007584 <_printf_float+0x158>
 800757e:	6822      	ldr	r2, [r4, #0]
 8007580:	07d2      	lsls	r2, r2, #31
 8007582:	d501      	bpl.n	8007588 <_printf_float+0x15c>
 8007584:	3301      	adds	r3, #1
 8007586:	6123      	str	r3, [r4, #16]
 8007588:	f89d 3033 	ldrb.w	r3, [sp, #51]	@ 0x33
 800758c:	2b00      	cmp	r3, #0
 800758e:	d09e      	beq.n	80074ce <_printf_float+0xa2>
 8007590:	232d      	movs	r3, #45	@ 0x2d
 8007592:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007596:	e79a      	b.n	80074ce <_printf_float+0xa2>
 8007598:	2947      	cmp	r1, #71	@ 0x47
 800759a:	d1bf      	bne.n	800751c <_printf_float+0xf0>
 800759c:	2b00      	cmp	r3, #0
 800759e:	d1bd      	bne.n	800751c <_printf_float+0xf0>
 80075a0:	2301      	movs	r3, #1
 80075a2:	e7ba      	b.n	800751a <_printf_float+0xee>
 80075a4:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80075a8:	d9dc      	bls.n	8007564 <_printf_float+0x138>
 80075aa:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 80075ae:	d118      	bne.n	80075e2 <_printf_float+0x1b6>
 80075b0:	2900      	cmp	r1, #0
 80075b2:	6863      	ldr	r3, [r4, #4]
 80075b4:	dd0b      	ble.n	80075ce <_printf_float+0x1a2>
 80075b6:	6121      	str	r1, [r4, #16]
 80075b8:	b913      	cbnz	r3, 80075c0 <_printf_float+0x194>
 80075ba:	6822      	ldr	r2, [r4, #0]
 80075bc:	07d0      	lsls	r0, r2, #31
 80075be:	d502      	bpl.n	80075c6 <_printf_float+0x19a>
 80075c0:	3301      	adds	r3, #1
 80075c2:	440b      	add	r3, r1
 80075c4:	6123      	str	r3, [r4, #16]
 80075c6:	f04f 0900 	mov.w	r9, #0
 80075ca:	65a1      	str	r1, [r4, #88]	@ 0x58
 80075cc:	e7dc      	b.n	8007588 <_printf_float+0x15c>
 80075ce:	b913      	cbnz	r3, 80075d6 <_printf_float+0x1aa>
 80075d0:	6822      	ldr	r2, [r4, #0]
 80075d2:	07d2      	lsls	r2, r2, #31
 80075d4:	d501      	bpl.n	80075da <_printf_float+0x1ae>
 80075d6:	3302      	adds	r3, #2
 80075d8:	e7f4      	b.n	80075c4 <_printf_float+0x198>
 80075da:	2301      	movs	r3, #1
 80075dc:	e7f2      	b.n	80075c4 <_printf_float+0x198>
 80075de:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 80075e2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80075e4:	4299      	cmp	r1, r3
 80075e6:	db05      	blt.n	80075f4 <_printf_float+0x1c8>
 80075e8:	6823      	ldr	r3, [r4, #0]
 80075ea:	6121      	str	r1, [r4, #16]
 80075ec:	07d8      	lsls	r0, r3, #31
 80075ee:	d5ea      	bpl.n	80075c6 <_printf_float+0x19a>
 80075f0:	1c4b      	adds	r3, r1, #1
 80075f2:	e7e7      	b.n	80075c4 <_printf_float+0x198>
 80075f4:	2900      	cmp	r1, #0
 80075f6:	bfcc      	ite	gt
 80075f8:	2201      	movgt	r2, #1
 80075fa:	f1c1 0202 	rsble	r2, r1, #2
 80075fe:	4413      	add	r3, r2
 8007600:	e7e0      	b.n	80075c4 <_printf_float+0x198>
 8007602:	6823      	ldr	r3, [r4, #0]
 8007604:	055a      	lsls	r2, r3, #21
 8007606:	d407      	bmi.n	8007618 <_printf_float+0x1ec>
 8007608:	6923      	ldr	r3, [r4, #16]
 800760a:	4642      	mov	r2, r8
 800760c:	4631      	mov	r1, r6
 800760e:	4628      	mov	r0, r5
 8007610:	47b8      	blx	r7
 8007612:	3001      	adds	r0, #1
 8007614:	d12b      	bne.n	800766e <_printf_float+0x242>
 8007616:	e764      	b.n	80074e2 <_printf_float+0xb6>
 8007618:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800761c:	f240 80dc 	bls.w	80077d8 <_printf_float+0x3ac>
 8007620:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8007624:	2200      	movs	r2, #0
 8007626:	2300      	movs	r3, #0
 8007628:	f7f9 fa72 	bl	8000b10 <__aeabi_dcmpeq>
 800762c:	2800      	cmp	r0, #0
 800762e:	d033      	beq.n	8007698 <_printf_float+0x26c>
 8007630:	2301      	movs	r3, #1
 8007632:	4631      	mov	r1, r6
 8007634:	4628      	mov	r0, r5
 8007636:	4a35      	ldr	r2, [pc, #212]	@ (800770c <_printf_float+0x2e0>)
 8007638:	47b8      	blx	r7
 800763a:	3001      	adds	r0, #1
 800763c:	f43f af51 	beq.w	80074e2 <_printf_float+0xb6>
 8007640:	e9dd 380d 	ldrd	r3, r8, [sp, #52]	@ 0x34
 8007644:	4543      	cmp	r3, r8
 8007646:	db02      	blt.n	800764e <_printf_float+0x222>
 8007648:	6823      	ldr	r3, [r4, #0]
 800764a:	07d8      	lsls	r0, r3, #31
 800764c:	d50f      	bpl.n	800766e <_printf_float+0x242>
 800764e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8007652:	4631      	mov	r1, r6
 8007654:	4628      	mov	r0, r5
 8007656:	47b8      	blx	r7
 8007658:	3001      	adds	r0, #1
 800765a:	f43f af42 	beq.w	80074e2 <_printf_float+0xb6>
 800765e:	f04f 0900 	mov.w	r9, #0
 8007662:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 8007666:	f104 0a1a 	add.w	sl, r4, #26
 800766a:	45c8      	cmp	r8, r9
 800766c:	dc09      	bgt.n	8007682 <_printf_float+0x256>
 800766e:	6823      	ldr	r3, [r4, #0]
 8007670:	079b      	lsls	r3, r3, #30
 8007672:	f100 8102 	bmi.w	800787a <_printf_float+0x44e>
 8007676:	68e0      	ldr	r0, [r4, #12]
 8007678:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800767a:	4298      	cmp	r0, r3
 800767c:	bfb8      	it	lt
 800767e:	4618      	movlt	r0, r3
 8007680:	e731      	b.n	80074e6 <_printf_float+0xba>
 8007682:	2301      	movs	r3, #1
 8007684:	4652      	mov	r2, sl
 8007686:	4631      	mov	r1, r6
 8007688:	4628      	mov	r0, r5
 800768a:	47b8      	blx	r7
 800768c:	3001      	adds	r0, #1
 800768e:	f43f af28 	beq.w	80074e2 <_printf_float+0xb6>
 8007692:	f109 0901 	add.w	r9, r9, #1
 8007696:	e7e8      	b.n	800766a <_printf_float+0x23e>
 8007698:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800769a:	2b00      	cmp	r3, #0
 800769c:	dc38      	bgt.n	8007710 <_printf_float+0x2e4>
 800769e:	2301      	movs	r3, #1
 80076a0:	4631      	mov	r1, r6
 80076a2:	4628      	mov	r0, r5
 80076a4:	4a19      	ldr	r2, [pc, #100]	@ (800770c <_printf_float+0x2e0>)
 80076a6:	47b8      	blx	r7
 80076a8:	3001      	adds	r0, #1
 80076aa:	f43f af1a 	beq.w	80074e2 <_printf_float+0xb6>
 80076ae:	e9dd 390d 	ldrd	r3, r9, [sp, #52]	@ 0x34
 80076b2:	ea59 0303 	orrs.w	r3, r9, r3
 80076b6:	d102      	bne.n	80076be <_printf_float+0x292>
 80076b8:	6823      	ldr	r3, [r4, #0]
 80076ba:	07d9      	lsls	r1, r3, #31
 80076bc:	d5d7      	bpl.n	800766e <_printf_float+0x242>
 80076be:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80076c2:	4631      	mov	r1, r6
 80076c4:	4628      	mov	r0, r5
 80076c6:	47b8      	blx	r7
 80076c8:	3001      	adds	r0, #1
 80076ca:	f43f af0a 	beq.w	80074e2 <_printf_float+0xb6>
 80076ce:	f04f 0a00 	mov.w	sl, #0
 80076d2:	f104 0b1a 	add.w	fp, r4, #26
 80076d6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80076d8:	425b      	negs	r3, r3
 80076da:	4553      	cmp	r3, sl
 80076dc:	dc01      	bgt.n	80076e2 <_printf_float+0x2b6>
 80076de:	464b      	mov	r3, r9
 80076e0:	e793      	b.n	800760a <_printf_float+0x1de>
 80076e2:	2301      	movs	r3, #1
 80076e4:	465a      	mov	r2, fp
 80076e6:	4631      	mov	r1, r6
 80076e8:	4628      	mov	r0, r5
 80076ea:	47b8      	blx	r7
 80076ec:	3001      	adds	r0, #1
 80076ee:	f43f aef8 	beq.w	80074e2 <_printf_float+0xb6>
 80076f2:	f10a 0a01 	add.w	sl, sl, #1
 80076f6:	e7ee      	b.n	80076d6 <_printf_float+0x2aa>
 80076f8:	7fefffff 	.word	0x7fefffff
 80076fc:	0800abf0 	.word	0x0800abf0
 8007700:	0800abf4 	.word	0x0800abf4
 8007704:	0800abf8 	.word	0x0800abf8
 8007708:	0800abfc 	.word	0x0800abfc
 800770c:	0800ac00 	.word	0x0800ac00
 8007710:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8007712:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 8007716:	4553      	cmp	r3, sl
 8007718:	bfa8      	it	ge
 800771a:	4653      	movge	r3, sl
 800771c:	2b00      	cmp	r3, #0
 800771e:	4699      	mov	r9, r3
 8007720:	dc36      	bgt.n	8007790 <_printf_float+0x364>
 8007722:	f04f 0b00 	mov.w	fp, #0
 8007726:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800772a:	f104 021a 	add.w	r2, r4, #26
 800772e:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8007730:	930a      	str	r3, [sp, #40]	@ 0x28
 8007732:	eba3 0309 	sub.w	r3, r3, r9
 8007736:	455b      	cmp	r3, fp
 8007738:	dc31      	bgt.n	800779e <_printf_float+0x372>
 800773a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800773c:	459a      	cmp	sl, r3
 800773e:	dc3a      	bgt.n	80077b6 <_printf_float+0x38a>
 8007740:	6823      	ldr	r3, [r4, #0]
 8007742:	07da      	lsls	r2, r3, #31
 8007744:	d437      	bmi.n	80077b6 <_printf_float+0x38a>
 8007746:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007748:	ebaa 0903 	sub.w	r9, sl, r3
 800774c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800774e:	ebaa 0303 	sub.w	r3, sl, r3
 8007752:	4599      	cmp	r9, r3
 8007754:	bfa8      	it	ge
 8007756:	4699      	movge	r9, r3
 8007758:	f1b9 0f00 	cmp.w	r9, #0
 800775c:	dc33      	bgt.n	80077c6 <_printf_float+0x39a>
 800775e:	f04f 0800 	mov.w	r8, #0
 8007762:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007766:	f104 0b1a 	add.w	fp, r4, #26
 800776a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800776c:	ebaa 0303 	sub.w	r3, sl, r3
 8007770:	eba3 0309 	sub.w	r3, r3, r9
 8007774:	4543      	cmp	r3, r8
 8007776:	f77f af7a 	ble.w	800766e <_printf_float+0x242>
 800777a:	2301      	movs	r3, #1
 800777c:	465a      	mov	r2, fp
 800777e:	4631      	mov	r1, r6
 8007780:	4628      	mov	r0, r5
 8007782:	47b8      	blx	r7
 8007784:	3001      	adds	r0, #1
 8007786:	f43f aeac 	beq.w	80074e2 <_printf_float+0xb6>
 800778a:	f108 0801 	add.w	r8, r8, #1
 800778e:	e7ec      	b.n	800776a <_printf_float+0x33e>
 8007790:	4642      	mov	r2, r8
 8007792:	4631      	mov	r1, r6
 8007794:	4628      	mov	r0, r5
 8007796:	47b8      	blx	r7
 8007798:	3001      	adds	r0, #1
 800779a:	d1c2      	bne.n	8007722 <_printf_float+0x2f6>
 800779c:	e6a1      	b.n	80074e2 <_printf_float+0xb6>
 800779e:	2301      	movs	r3, #1
 80077a0:	4631      	mov	r1, r6
 80077a2:	4628      	mov	r0, r5
 80077a4:	920a      	str	r2, [sp, #40]	@ 0x28
 80077a6:	47b8      	blx	r7
 80077a8:	3001      	adds	r0, #1
 80077aa:	f43f ae9a 	beq.w	80074e2 <_printf_float+0xb6>
 80077ae:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80077b0:	f10b 0b01 	add.w	fp, fp, #1
 80077b4:	e7bb      	b.n	800772e <_printf_float+0x302>
 80077b6:	4631      	mov	r1, r6
 80077b8:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80077bc:	4628      	mov	r0, r5
 80077be:	47b8      	blx	r7
 80077c0:	3001      	adds	r0, #1
 80077c2:	d1c0      	bne.n	8007746 <_printf_float+0x31a>
 80077c4:	e68d      	b.n	80074e2 <_printf_float+0xb6>
 80077c6:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80077c8:	464b      	mov	r3, r9
 80077ca:	4631      	mov	r1, r6
 80077cc:	4628      	mov	r0, r5
 80077ce:	4442      	add	r2, r8
 80077d0:	47b8      	blx	r7
 80077d2:	3001      	adds	r0, #1
 80077d4:	d1c3      	bne.n	800775e <_printf_float+0x332>
 80077d6:	e684      	b.n	80074e2 <_printf_float+0xb6>
 80077d8:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 80077dc:	f1ba 0f01 	cmp.w	sl, #1
 80077e0:	dc01      	bgt.n	80077e6 <_printf_float+0x3ba>
 80077e2:	07db      	lsls	r3, r3, #31
 80077e4:	d536      	bpl.n	8007854 <_printf_float+0x428>
 80077e6:	2301      	movs	r3, #1
 80077e8:	4642      	mov	r2, r8
 80077ea:	4631      	mov	r1, r6
 80077ec:	4628      	mov	r0, r5
 80077ee:	47b8      	blx	r7
 80077f0:	3001      	adds	r0, #1
 80077f2:	f43f ae76 	beq.w	80074e2 <_printf_float+0xb6>
 80077f6:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80077fa:	4631      	mov	r1, r6
 80077fc:	4628      	mov	r0, r5
 80077fe:	47b8      	blx	r7
 8007800:	3001      	adds	r0, #1
 8007802:	f43f ae6e 	beq.w	80074e2 <_printf_float+0xb6>
 8007806:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800780a:	2200      	movs	r2, #0
 800780c:	2300      	movs	r3, #0
 800780e:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 8007812:	f7f9 f97d 	bl	8000b10 <__aeabi_dcmpeq>
 8007816:	b9c0      	cbnz	r0, 800784a <_printf_float+0x41e>
 8007818:	4653      	mov	r3, sl
 800781a:	f108 0201 	add.w	r2, r8, #1
 800781e:	4631      	mov	r1, r6
 8007820:	4628      	mov	r0, r5
 8007822:	47b8      	blx	r7
 8007824:	3001      	adds	r0, #1
 8007826:	d10c      	bne.n	8007842 <_printf_float+0x416>
 8007828:	e65b      	b.n	80074e2 <_printf_float+0xb6>
 800782a:	2301      	movs	r3, #1
 800782c:	465a      	mov	r2, fp
 800782e:	4631      	mov	r1, r6
 8007830:	4628      	mov	r0, r5
 8007832:	47b8      	blx	r7
 8007834:	3001      	adds	r0, #1
 8007836:	f43f ae54 	beq.w	80074e2 <_printf_float+0xb6>
 800783a:	f108 0801 	add.w	r8, r8, #1
 800783e:	45d0      	cmp	r8, sl
 8007840:	dbf3      	blt.n	800782a <_printf_float+0x3fe>
 8007842:	464b      	mov	r3, r9
 8007844:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8007848:	e6e0      	b.n	800760c <_printf_float+0x1e0>
 800784a:	f04f 0800 	mov.w	r8, #0
 800784e:	f104 0b1a 	add.w	fp, r4, #26
 8007852:	e7f4      	b.n	800783e <_printf_float+0x412>
 8007854:	2301      	movs	r3, #1
 8007856:	4642      	mov	r2, r8
 8007858:	e7e1      	b.n	800781e <_printf_float+0x3f2>
 800785a:	2301      	movs	r3, #1
 800785c:	464a      	mov	r2, r9
 800785e:	4631      	mov	r1, r6
 8007860:	4628      	mov	r0, r5
 8007862:	47b8      	blx	r7
 8007864:	3001      	adds	r0, #1
 8007866:	f43f ae3c 	beq.w	80074e2 <_printf_float+0xb6>
 800786a:	f108 0801 	add.w	r8, r8, #1
 800786e:	68e3      	ldr	r3, [r4, #12]
 8007870:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8007872:	1a5b      	subs	r3, r3, r1
 8007874:	4543      	cmp	r3, r8
 8007876:	dcf0      	bgt.n	800785a <_printf_float+0x42e>
 8007878:	e6fd      	b.n	8007676 <_printf_float+0x24a>
 800787a:	f04f 0800 	mov.w	r8, #0
 800787e:	f104 0919 	add.w	r9, r4, #25
 8007882:	e7f4      	b.n	800786e <_printf_float+0x442>

08007884 <_printf_common>:
 8007884:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007888:	4616      	mov	r6, r2
 800788a:	4698      	mov	r8, r3
 800788c:	688a      	ldr	r2, [r1, #8]
 800788e:	690b      	ldr	r3, [r1, #16]
 8007890:	4607      	mov	r7, r0
 8007892:	4293      	cmp	r3, r2
 8007894:	bfb8      	it	lt
 8007896:	4613      	movlt	r3, r2
 8007898:	6033      	str	r3, [r6, #0]
 800789a:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800789e:	460c      	mov	r4, r1
 80078a0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80078a4:	b10a      	cbz	r2, 80078aa <_printf_common+0x26>
 80078a6:	3301      	adds	r3, #1
 80078a8:	6033      	str	r3, [r6, #0]
 80078aa:	6823      	ldr	r3, [r4, #0]
 80078ac:	0699      	lsls	r1, r3, #26
 80078ae:	bf42      	ittt	mi
 80078b0:	6833      	ldrmi	r3, [r6, #0]
 80078b2:	3302      	addmi	r3, #2
 80078b4:	6033      	strmi	r3, [r6, #0]
 80078b6:	6825      	ldr	r5, [r4, #0]
 80078b8:	f015 0506 	ands.w	r5, r5, #6
 80078bc:	d106      	bne.n	80078cc <_printf_common+0x48>
 80078be:	f104 0a19 	add.w	sl, r4, #25
 80078c2:	68e3      	ldr	r3, [r4, #12]
 80078c4:	6832      	ldr	r2, [r6, #0]
 80078c6:	1a9b      	subs	r3, r3, r2
 80078c8:	42ab      	cmp	r3, r5
 80078ca:	dc2b      	bgt.n	8007924 <_printf_common+0xa0>
 80078cc:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80078d0:	6822      	ldr	r2, [r4, #0]
 80078d2:	3b00      	subs	r3, #0
 80078d4:	bf18      	it	ne
 80078d6:	2301      	movne	r3, #1
 80078d8:	0692      	lsls	r2, r2, #26
 80078da:	d430      	bmi.n	800793e <_printf_common+0xba>
 80078dc:	4641      	mov	r1, r8
 80078de:	4638      	mov	r0, r7
 80078e0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80078e4:	47c8      	blx	r9
 80078e6:	3001      	adds	r0, #1
 80078e8:	d023      	beq.n	8007932 <_printf_common+0xae>
 80078ea:	6823      	ldr	r3, [r4, #0]
 80078ec:	6922      	ldr	r2, [r4, #16]
 80078ee:	f003 0306 	and.w	r3, r3, #6
 80078f2:	2b04      	cmp	r3, #4
 80078f4:	bf14      	ite	ne
 80078f6:	2500      	movne	r5, #0
 80078f8:	6833      	ldreq	r3, [r6, #0]
 80078fa:	f04f 0600 	mov.w	r6, #0
 80078fe:	bf08      	it	eq
 8007900:	68e5      	ldreq	r5, [r4, #12]
 8007902:	f104 041a 	add.w	r4, r4, #26
 8007906:	bf08      	it	eq
 8007908:	1aed      	subeq	r5, r5, r3
 800790a:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800790e:	bf08      	it	eq
 8007910:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007914:	4293      	cmp	r3, r2
 8007916:	bfc4      	itt	gt
 8007918:	1a9b      	subgt	r3, r3, r2
 800791a:	18ed      	addgt	r5, r5, r3
 800791c:	42b5      	cmp	r5, r6
 800791e:	d11a      	bne.n	8007956 <_printf_common+0xd2>
 8007920:	2000      	movs	r0, #0
 8007922:	e008      	b.n	8007936 <_printf_common+0xb2>
 8007924:	2301      	movs	r3, #1
 8007926:	4652      	mov	r2, sl
 8007928:	4641      	mov	r1, r8
 800792a:	4638      	mov	r0, r7
 800792c:	47c8      	blx	r9
 800792e:	3001      	adds	r0, #1
 8007930:	d103      	bne.n	800793a <_printf_common+0xb6>
 8007932:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8007936:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800793a:	3501      	adds	r5, #1
 800793c:	e7c1      	b.n	80078c2 <_printf_common+0x3e>
 800793e:	2030      	movs	r0, #48	@ 0x30
 8007940:	18e1      	adds	r1, r4, r3
 8007942:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8007946:	1c5a      	adds	r2, r3, #1
 8007948:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800794c:	4422      	add	r2, r4
 800794e:	3302      	adds	r3, #2
 8007950:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8007954:	e7c2      	b.n	80078dc <_printf_common+0x58>
 8007956:	2301      	movs	r3, #1
 8007958:	4622      	mov	r2, r4
 800795a:	4641      	mov	r1, r8
 800795c:	4638      	mov	r0, r7
 800795e:	47c8      	blx	r9
 8007960:	3001      	adds	r0, #1
 8007962:	d0e6      	beq.n	8007932 <_printf_common+0xae>
 8007964:	3601      	adds	r6, #1
 8007966:	e7d9      	b.n	800791c <_printf_common+0x98>

08007968 <_printf_i>:
 8007968:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800796c:	7e0f      	ldrb	r7, [r1, #24]
 800796e:	4691      	mov	r9, r2
 8007970:	2f78      	cmp	r7, #120	@ 0x78
 8007972:	4680      	mov	r8, r0
 8007974:	460c      	mov	r4, r1
 8007976:	469a      	mov	sl, r3
 8007978:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800797a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800797e:	d807      	bhi.n	8007990 <_printf_i+0x28>
 8007980:	2f62      	cmp	r7, #98	@ 0x62
 8007982:	d80a      	bhi.n	800799a <_printf_i+0x32>
 8007984:	2f00      	cmp	r7, #0
 8007986:	f000 80d3 	beq.w	8007b30 <_printf_i+0x1c8>
 800798a:	2f58      	cmp	r7, #88	@ 0x58
 800798c:	f000 80ba 	beq.w	8007b04 <_printf_i+0x19c>
 8007990:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007994:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8007998:	e03a      	b.n	8007a10 <_printf_i+0xa8>
 800799a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800799e:	2b15      	cmp	r3, #21
 80079a0:	d8f6      	bhi.n	8007990 <_printf_i+0x28>
 80079a2:	a101      	add	r1, pc, #4	@ (adr r1, 80079a8 <_printf_i+0x40>)
 80079a4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80079a8:	08007a01 	.word	0x08007a01
 80079ac:	08007a15 	.word	0x08007a15
 80079b0:	08007991 	.word	0x08007991
 80079b4:	08007991 	.word	0x08007991
 80079b8:	08007991 	.word	0x08007991
 80079bc:	08007991 	.word	0x08007991
 80079c0:	08007a15 	.word	0x08007a15
 80079c4:	08007991 	.word	0x08007991
 80079c8:	08007991 	.word	0x08007991
 80079cc:	08007991 	.word	0x08007991
 80079d0:	08007991 	.word	0x08007991
 80079d4:	08007b17 	.word	0x08007b17
 80079d8:	08007a3f 	.word	0x08007a3f
 80079dc:	08007ad1 	.word	0x08007ad1
 80079e0:	08007991 	.word	0x08007991
 80079e4:	08007991 	.word	0x08007991
 80079e8:	08007b39 	.word	0x08007b39
 80079ec:	08007991 	.word	0x08007991
 80079f0:	08007a3f 	.word	0x08007a3f
 80079f4:	08007991 	.word	0x08007991
 80079f8:	08007991 	.word	0x08007991
 80079fc:	08007ad9 	.word	0x08007ad9
 8007a00:	6833      	ldr	r3, [r6, #0]
 8007a02:	1d1a      	adds	r2, r3, #4
 8007a04:	681b      	ldr	r3, [r3, #0]
 8007a06:	6032      	str	r2, [r6, #0]
 8007a08:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007a0c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8007a10:	2301      	movs	r3, #1
 8007a12:	e09e      	b.n	8007b52 <_printf_i+0x1ea>
 8007a14:	6833      	ldr	r3, [r6, #0]
 8007a16:	6820      	ldr	r0, [r4, #0]
 8007a18:	1d19      	adds	r1, r3, #4
 8007a1a:	6031      	str	r1, [r6, #0]
 8007a1c:	0606      	lsls	r6, r0, #24
 8007a1e:	d501      	bpl.n	8007a24 <_printf_i+0xbc>
 8007a20:	681d      	ldr	r5, [r3, #0]
 8007a22:	e003      	b.n	8007a2c <_printf_i+0xc4>
 8007a24:	0645      	lsls	r5, r0, #25
 8007a26:	d5fb      	bpl.n	8007a20 <_printf_i+0xb8>
 8007a28:	f9b3 5000 	ldrsh.w	r5, [r3]
 8007a2c:	2d00      	cmp	r5, #0
 8007a2e:	da03      	bge.n	8007a38 <_printf_i+0xd0>
 8007a30:	232d      	movs	r3, #45	@ 0x2d
 8007a32:	426d      	negs	r5, r5
 8007a34:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007a38:	230a      	movs	r3, #10
 8007a3a:	4859      	ldr	r0, [pc, #356]	@ (8007ba0 <_printf_i+0x238>)
 8007a3c:	e011      	b.n	8007a62 <_printf_i+0xfa>
 8007a3e:	6821      	ldr	r1, [r4, #0]
 8007a40:	6833      	ldr	r3, [r6, #0]
 8007a42:	0608      	lsls	r0, r1, #24
 8007a44:	f853 5b04 	ldr.w	r5, [r3], #4
 8007a48:	d402      	bmi.n	8007a50 <_printf_i+0xe8>
 8007a4a:	0649      	lsls	r1, r1, #25
 8007a4c:	bf48      	it	mi
 8007a4e:	b2ad      	uxthmi	r5, r5
 8007a50:	2f6f      	cmp	r7, #111	@ 0x6f
 8007a52:	6033      	str	r3, [r6, #0]
 8007a54:	bf14      	ite	ne
 8007a56:	230a      	movne	r3, #10
 8007a58:	2308      	moveq	r3, #8
 8007a5a:	4851      	ldr	r0, [pc, #324]	@ (8007ba0 <_printf_i+0x238>)
 8007a5c:	2100      	movs	r1, #0
 8007a5e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8007a62:	6866      	ldr	r6, [r4, #4]
 8007a64:	2e00      	cmp	r6, #0
 8007a66:	bfa8      	it	ge
 8007a68:	6821      	ldrge	r1, [r4, #0]
 8007a6a:	60a6      	str	r6, [r4, #8]
 8007a6c:	bfa4      	itt	ge
 8007a6e:	f021 0104 	bicge.w	r1, r1, #4
 8007a72:	6021      	strge	r1, [r4, #0]
 8007a74:	b90d      	cbnz	r5, 8007a7a <_printf_i+0x112>
 8007a76:	2e00      	cmp	r6, #0
 8007a78:	d04b      	beq.n	8007b12 <_printf_i+0x1aa>
 8007a7a:	4616      	mov	r6, r2
 8007a7c:	fbb5 f1f3 	udiv	r1, r5, r3
 8007a80:	fb03 5711 	mls	r7, r3, r1, r5
 8007a84:	5dc7      	ldrb	r7, [r0, r7]
 8007a86:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8007a8a:	462f      	mov	r7, r5
 8007a8c:	42bb      	cmp	r3, r7
 8007a8e:	460d      	mov	r5, r1
 8007a90:	d9f4      	bls.n	8007a7c <_printf_i+0x114>
 8007a92:	2b08      	cmp	r3, #8
 8007a94:	d10b      	bne.n	8007aae <_printf_i+0x146>
 8007a96:	6823      	ldr	r3, [r4, #0]
 8007a98:	07df      	lsls	r7, r3, #31
 8007a9a:	d508      	bpl.n	8007aae <_printf_i+0x146>
 8007a9c:	6923      	ldr	r3, [r4, #16]
 8007a9e:	6861      	ldr	r1, [r4, #4]
 8007aa0:	4299      	cmp	r1, r3
 8007aa2:	bfde      	ittt	le
 8007aa4:	2330      	movle	r3, #48	@ 0x30
 8007aa6:	f806 3c01 	strble.w	r3, [r6, #-1]
 8007aaa:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8007aae:	1b92      	subs	r2, r2, r6
 8007ab0:	6122      	str	r2, [r4, #16]
 8007ab2:	464b      	mov	r3, r9
 8007ab4:	4621      	mov	r1, r4
 8007ab6:	4640      	mov	r0, r8
 8007ab8:	f8cd a000 	str.w	sl, [sp]
 8007abc:	aa03      	add	r2, sp, #12
 8007abe:	f7ff fee1 	bl	8007884 <_printf_common>
 8007ac2:	3001      	adds	r0, #1
 8007ac4:	d14a      	bne.n	8007b5c <_printf_i+0x1f4>
 8007ac6:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8007aca:	b004      	add	sp, #16
 8007acc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007ad0:	6823      	ldr	r3, [r4, #0]
 8007ad2:	f043 0320 	orr.w	r3, r3, #32
 8007ad6:	6023      	str	r3, [r4, #0]
 8007ad8:	2778      	movs	r7, #120	@ 0x78
 8007ada:	4832      	ldr	r0, [pc, #200]	@ (8007ba4 <_printf_i+0x23c>)
 8007adc:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8007ae0:	6823      	ldr	r3, [r4, #0]
 8007ae2:	6831      	ldr	r1, [r6, #0]
 8007ae4:	061f      	lsls	r7, r3, #24
 8007ae6:	f851 5b04 	ldr.w	r5, [r1], #4
 8007aea:	d402      	bmi.n	8007af2 <_printf_i+0x18a>
 8007aec:	065f      	lsls	r7, r3, #25
 8007aee:	bf48      	it	mi
 8007af0:	b2ad      	uxthmi	r5, r5
 8007af2:	6031      	str	r1, [r6, #0]
 8007af4:	07d9      	lsls	r1, r3, #31
 8007af6:	bf44      	itt	mi
 8007af8:	f043 0320 	orrmi.w	r3, r3, #32
 8007afc:	6023      	strmi	r3, [r4, #0]
 8007afe:	b11d      	cbz	r5, 8007b08 <_printf_i+0x1a0>
 8007b00:	2310      	movs	r3, #16
 8007b02:	e7ab      	b.n	8007a5c <_printf_i+0xf4>
 8007b04:	4826      	ldr	r0, [pc, #152]	@ (8007ba0 <_printf_i+0x238>)
 8007b06:	e7e9      	b.n	8007adc <_printf_i+0x174>
 8007b08:	6823      	ldr	r3, [r4, #0]
 8007b0a:	f023 0320 	bic.w	r3, r3, #32
 8007b0e:	6023      	str	r3, [r4, #0]
 8007b10:	e7f6      	b.n	8007b00 <_printf_i+0x198>
 8007b12:	4616      	mov	r6, r2
 8007b14:	e7bd      	b.n	8007a92 <_printf_i+0x12a>
 8007b16:	6833      	ldr	r3, [r6, #0]
 8007b18:	6825      	ldr	r5, [r4, #0]
 8007b1a:	1d18      	adds	r0, r3, #4
 8007b1c:	6961      	ldr	r1, [r4, #20]
 8007b1e:	6030      	str	r0, [r6, #0]
 8007b20:	062e      	lsls	r6, r5, #24
 8007b22:	681b      	ldr	r3, [r3, #0]
 8007b24:	d501      	bpl.n	8007b2a <_printf_i+0x1c2>
 8007b26:	6019      	str	r1, [r3, #0]
 8007b28:	e002      	b.n	8007b30 <_printf_i+0x1c8>
 8007b2a:	0668      	lsls	r0, r5, #25
 8007b2c:	d5fb      	bpl.n	8007b26 <_printf_i+0x1be>
 8007b2e:	8019      	strh	r1, [r3, #0]
 8007b30:	2300      	movs	r3, #0
 8007b32:	4616      	mov	r6, r2
 8007b34:	6123      	str	r3, [r4, #16]
 8007b36:	e7bc      	b.n	8007ab2 <_printf_i+0x14a>
 8007b38:	6833      	ldr	r3, [r6, #0]
 8007b3a:	2100      	movs	r1, #0
 8007b3c:	1d1a      	adds	r2, r3, #4
 8007b3e:	6032      	str	r2, [r6, #0]
 8007b40:	681e      	ldr	r6, [r3, #0]
 8007b42:	6862      	ldr	r2, [r4, #4]
 8007b44:	4630      	mov	r0, r6
 8007b46:	f000 f9e6 	bl	8007f16 <memchr>
 8007b4a:	b108      	cbz	r0, 8007b50 <_printf_i+0x1e8>
 8007b4c:	1b80      	subs	r0, r0, r6
 8007b4e:	6060      	str	r0, [r4, #4]
 8007b50:	6863      	ldr	r3, [r4, #4]
 8007b52:	6123      	str	r3, [r4, #16]
 8007b54:	2300      	movs	r3, #0
 8007b56:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007b5a:	e7aa      	b.n	8007ab2 <_printf_i+0x14a>
 8007b5c:	4632      	mov	r2, r6
 8007b5e:	4649      	mov	r1, r9
 8007b60:	4640      	mov	r0, r8
 8007b62:	6923      	ldr	r3, [r4, #16]
 8007b64:	47d0      	blx	sl
 8007b66:	3001      	adds	r0, #1
 8007b68:	d0ad      	beq.n	8007ac6 <_printf_i+0x15e>
 8007b6a:	6823      	ldr	r3, [r4, #0]
 8007b6c:	079b      	lsls	r3, r3, #30
 8007b6e:	d413      	bmi.n	8007b98 <_printf_i+0x230>
 8007b70:	68e0      	ldr	r0, [r4, #12]
 8007b72:	9b03      	ldr	r3, [sp, #12]
 8007b74:	4298      	cmp	r0, r3
 8007b76:	bfb8      	it	lt
 8007b78:	4618      	movlt	r0, r3
 8007b7a:	e7a6      	b.n	8007aca <_printf_i+0x162>
 8007b7c:	2301      	movs	r3, #1
 8007b7e:	4632      	mov	r2, r6
 8007b80:	4649      	mov	r1, r9
 8007b82:	4640      	mov	r0, r8
 8007b84:	47d0      	blx	sl
 8007b86:	3001      	adds	r0, #1
 8007b88:	d09d      	beq.n	8007ac6 <_printf_i+0x15e>
 8007b8a:	3501      	adds	r5, #1
 8007b8c:	68e3      	ldr	r3, [r4, #12]
 8007b8e:	9903      	ldr	r1, [sp, #12]
 8007b90:	1a5b      	subs	r3, r3, r1
 8007b92:	42ab      	cmp	r3, r5
 8007b94:	dcf2      	bgt.n	8007b7c <_printf_i+0x214>
 8007b96:	e7eb      	b.n	8007b70 <_printf_i+0x208>
 8007b98:	2500      	movs	r5, #0
 8007b9a:	f104 0619 	add.w	r6, r4, #25
 8007b9e:	e7f5      	b.n	8007b8c <_printf_i+0x224>
 8007ba0:	0800ac02 	.word	0x0800ac02
 8007ba4:	0800ac13 	.word	0x0800ac13

08007ba8 <std>:
 8007ba8:	2300      	movs	r3, #0
 8007baa:	b510      	push	{r4, lr}
 8007bac:	4604      	mov	r4, r0
 8007bae:	e9c0 3300 	strd	r3, r3, [r0]
 8007bb2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007bb6:	6083      	str	r3, [r0, #8]
 8007bb8:	8181      	strh	r1, [r0, #12]
 8007bba:	6643      	str	r3, [r0, #100]	@ 0x64
 8007bbc:	81c2      	strh	r2, [r0, #14]
 8007bbe:	6183      	str	r3, [r0, #24]
 8007bc0:	4619      	mov	r1, r3
 8007bc2:	2208      	movs	r2, #8
 8007bc4:	305c      	adds	r0, #92	@ 0x5c
 8007bc6:	f000 f914 	bl	8007df2 <memset>
 8007bca:	4b0d      	ldr	r3, [pc, #52]	@ (8007c00 <std+0x58>)
 8007bcc:	6224      	str	r4, [r4, #32]
 8007bce:	6263      	str	r3, [r4, #36]	@ 0x24
 8007bd0:	4b0c      	ldr	r3, [pc, #48]	@ (8007c04 <std+0x5c>)
 8007bd2:	62a3      	str	r3, [r4, #40]	@ 0x28
 8007bd4:	4b0c      	ldr	r3, [pc, #48]	@ (8007c08 <std+0x60>)
 8007bd6:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8007bd8:	4b0c      	ldr	r3, [pc, #48]	@ (8007c0c <std+0x64>)
 8007bda:	6323      	str	r3, [r4, #48]	@ 0x30
 8007bdc:	4b0c      	ldr	r3, [pc, #48]	@ (8007c10 <std+0x68>)
 8007bde:	429c      	cmp	r4, r3
 8007be0:	d006      	beq.n	8007bf0 <std+0x48>
 8007be2:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8007be6:	4294      	cmp	r4, r2
 8007be8:	d002      	beq.n	8007bf0 <std+0x48>
 8007bea:	33d0      	adds	r3, #208	@ 0xd0
 8007bec:	429c      	cmp	r4, r3
 8007bee:	d105      	bne.n	8007bfc <std+0x54>
 8007bf0:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8007bf4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007bf8:	f000 b98a 	b.w	8007f10 <__retarget_lock_init_recursive>
 8007bfc:	bd10      	pop	{r4, pc}
 8007bfe:	bf00      	nop
 8007c00:	08007d6d 	.word	0x08007d6d
 8007c04:	08007d8f 	.word	0x08007d8f
 8007c08:	08007dc7 	.word	0x08007dc7
 8007c0c:	08007deb 	.word	0x08007deb
 8007c10:	20001408 	.word	0x20001408

08007c14 <stdio_exit_handler>:
 8007c14:	4a02      	ldr	r2, [pc, #8]	@ (8007c20 <stdio_exit_handler+0xc>)
 8007c16:	4903      	ldr	r1, [pc, #12]	@ (8007c24 <stdio_exit_handler+0x10>)
 8007c18:	4803      	ldr	r0, [pc, #12]	@ (8007c28 <stdio_exit_handler+0x14>)
 8007c1a:	f000 b869 	b.w	8007cf0 <_fwalk_sglue>
 8007c1e:	bf00      	nop
 8007c20:	2000017c 	.word	0x2000017c
 8007c24:	0800a2dd 	.word	0x0800a2dd
 8007c28:	200002f8 	.word	0x200002f8

08007c2c <cleanup_stdio>:
 8007c2c:	6841      	ldr	r1, [r0, #4]
 8007c2e:	4b0c      	ldr	r3, [pc, #48]	@ (8007c60 <cleanup_stdio+0x34>)
 8007c30:	b510      	push	{r4, lr}
 8007c32:	4299      	cmp	r1, r3
 8007c34:	4604      	mov	r4, r0
 8007c36:	d001      	beq.n	8007c3c <cleanup_stdio+0x10>
 8007c38:	f002 fb50 	bl	800a2dc <_fflush_r>
 8007c3c:	68a1      	ldr	r1, [r4, #8]
 8007c3e:	4b09      	ldr	r3, [pc, #36]	@ (8007c64 <cleanup_stdio+0x38>)
 8007c40:	4299      	cmp	r1, r3
 8007c42:	d002      	beq.n	8007c4a <cleanup_stdio+0x1e>
 8007c44:	4620      	mov	r0, r4
 8007c46:	f002 fb49 	bl	800a2dc <_fflush_r>
 8007c4a:	68e1      	ldr	r1, [r4, #12]
 8007c4c:	4b06      	ldr	r3, [pc, #24]	@ (8007c68 <cleanup_stdio+0x3c>)
 8007c4e:	4299      	cmp	r1, r3
 8007c50:	d004      	beq.n	8007c5c <cleanup_stdio+0x30>
 8007c52:	4620      	mov	r0, r4
 8007c54:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007c58:	f002 bb40 	b.w	800a2dc <_fflush_r>
 8007c5c:	bd10      	pop	{r4, pc}
 8007c5e:	bf00      	nop
 8007c60:	20001408 	.word	0x20001408
 8007c64:	20001470 	.word	0x20001470
 8007c68:	200014d8 	.word	0x200014d8

08007c6c <global_stdio_init.part.0>:
 8007c6c:	b510      	push	{r4, lr}
 8007c6e:	4b0b      	ldr	r3, [pc, #44]	@ (8007c9c <global_stdio_init.part.0+0x30>)
 8007c70:	4c0b      	ldr	r4, [pc, #44]	@ (8007ca0 <global_stdio_init.part.0+0x34>)
 8007c72:	4a0c      	ldr	r2, [pc, #48]	@ (8007ca4 <global_stdio_init.part.0+0x38>)
 8007c74:	4620      	mov	r0, r4
 8007c76:	601a      	str	r2, [r3, #0]
 8007c78:	2104      	movs	r1, #4
 8007c7a:	2200      	movs	r2, #0
 8007c7c:	f7ff ff94 	bl	8007ba8 <std>
 8007c80:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8007c84:	2201      	movs	r2, #1
 8007c86:	2109      	movs	r1, #9
 8007c88:	f7ff ff8e 	bl	8007ba8 <std>
 8007c8c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8007c90:	2202      	movs	r2, #2
 8007c92:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007c96:	2112      	movs	r1, #18
 8007c98:	f7ff bf86 	b.w	8007ba8 <std>
 8007c9c:	20001540 	.word	0x20001540
 8007ca0:	20001408 	.word	0x20001408
 8007ca4:	08007c15 	.word	0x08007c15

08007ca8 <__sfp_lock_acquire>:
 8007ca8:	4801      	ldr	r0, [pc, #4]	@ (8007cb0 <__sfp_lock_acquire+0x8>)
 8007caa:	f000 b932 	b.w	8007f12 <__retarget_lock_acquire_recursive>
 8007cae:	bf00      	nop
 8007cb0:	20001549 	.word	0x20001549

08007cb4 <__sfp_lock_release>:
 8007cb4:	4801      	ldr	r0, [pc, #4]	@ (8007cbc <__sfp_lock_release+0x8>)
 8007cb6:	f000 b92d 	b.w	8007f14 <__retarget_lock_release_recursive>
 8007cba:	bf00      	nop
 8007cbc:	20001549 	.word	0x20001549

08007cc0 <__sinit>:
 8007cc0:	b510      	push	{r4, lr}
 8007cc2:	4604      	mov	r4, r0
 8007cc4:	f7ff fff0 	bl	8007ca8 <__sfp_lock_acquire>
 8007cc8:	6a23      	ldr	r3, [r4, #32]
 8007cca:	b11b      	cbz	r3, 8007cd4 <__sinit+0x14>
 8007ccc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007cd0:	f7ff bff0 	b.w	8007cb4 <__sfp_lock_release>
 8007cd4:	4b04      	ldr	r3, [pc, #16]	@ (8007ce8 <__sinit+0x28>)
 8007cd6:	6223      	str	r3, [r4, #32]
 8007cd8:	4b04      	ldr	r3, [pc, #16]	@ (8007cec <__sinit+0x2c>)
 8007cda:	681b      	ldr	r3, [r3, #0]
 8007cdc:	2b00      	cmp	r3, #0
 8007cde:	d1f5      	bne.n	8007ccc <__sinit+0xc>
 8007ce0:	f7ff ffc4 	bl	8007c6c <global_stdio_init.part.0>
 8007ce4:	e7f2      	b.n	8007ccc <__sinit+0xc>
 8007ce6:	bf00      	nop
 8007ce8:	08007c2d 	.word	0x08007c2d
 8007cec:	20001540 	.word	0x20001540

08007cf0 <_fwalk_sglue>:
 8007cf0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007cf4:	4607      	mov	r7, r0
 8007cf6:	4688      	mov	r8, r1
 8007cf8:	4614      	mov	r4, r2
 8007cfa:	2600      	movs	r6, #0
 8007cfc:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007d00:	f1b9 0901 	subs.w	r9, r9, #1
 8007d04:	d505      	bpl.n	8007d12 <_fwalk_sglue+0x22>
 8007d06:	6824      	ldr	r4, [r4, #0]
 8007d08:	2c00      	cmp	r4, #0
 8007d0a:	d1f7      	bne.n	8007cfc <_fwalk_sglue+0xc>
 8007d0c:	4630      	mov	r0, r6
 8007d0e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007d12:	89ab      	ldrh	r3, [r5, #12]
 8007d14:	2b01      	cmp	r3, #1
 8007d16:	d907      	bls.n	8007d28 <_fwalk_sglue+0x38>
 8007d18:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007d1c:	3301      	adds	r3, #1
 8007d1e:	d003      	beq.n	8007d28 <_fwalk_sglue+0x38>
 8007d20:	4629      	mov	r1, r5
 8007d22:	4638      	mov	r0, r7
 8007d24:	47c0      	blx	r8
 8007d26:	4306      	orrs	r6, r0
 8007d28:	3568      	adds	r5, #104	@ 0x68
 8007d2a:	e7e9      	b.n	8007d00 <_fwalk_sglue+0x10>

08007d2c <siprintf>:
 8007d2c:	b40e      	push	{r1, r2, r3}
 8007d2e:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8007d32:	b500      	push	{lr}
 8007d34:	b09c      	sub	sp, #112	@ 0x70
 8007d36:	ab1d      	add	r3, sp, #116	@ 0x74
 8007d38:	9002      	str	r0, [sp, #8]
 8007d3a:	9006      	str	r0, [sp, #24]
 8007d3c:	9107      	str	r1, [sp, #28]
 8007d3e:	9104      	str	r1, [sp, #16]
 8007d40:	4808      	ldr	r0, [pc, #32]	@ (8007d64 <siprintf+0x38>)
 8007d42:	4909      	ldr	r1, [pc, #36]	@ (8007d68 <siprintf+0x3c>)
 8007d44:	f853 2b04 	ldr.w	r2, [r3], #4
 8007d48:	9105      	str	r1, [sp, #20]
 8007d4a:	6800      	ldr	r0, [r0, #0]
 8007d4c:	a902      	add	r1, sp, #8
 8007d4e:	9301      	str	r3, [sp, #4]
 8007d50:	f002 f948 	bl	8009fe4 <_svfiprintf_r>
 8007d54:	2200      	movs	r2, #0
 8007d56:	9b02      	ldr	r3, [sp, #8]
 8007d58:	701a      	strb	r2, [r3, #0]
 8007d5a:	b01c      	add	sp, #112	@ 0x70
 8007d5c:	f85d eb04 	ldr.w	lr, [sp], #4
 8007d60:	b003      	add	sp, #12
 8007d62:	4770      	bx	lr
 8007d64:	200002f4 	.word	0x200002f4
 8007d68:	ffff0208 	.word	0xffff0208

08007d6c <__sread>:
 8007d6c:	b510      	push	{r4, lr}
 8007d6e:	460c      	mov	r4, r1
 8007d70:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007d74:	f000 f87e 	bl	8007e74 <_read_r>
 8007d78:	2800      	cmp	r0, #0
 8007d7a:	bfab      	itete	ge
 8007d7c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8007d7e:	89a3      	ldrhlt	r3, [r4, #12]
 8007d80:	181b      	addge	r3, r3, r0
 8007d82:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8007d86:	bfac      	ite	ge
 8007d88:	6563      	strge	r3, [r4, #84]	@ 0x54
 8007d8a:	81a3      	strhlt	r3, [r4, #12]
 8007d8c:	bd10      	pop	{r4, pc}

08007d8e <__swrite>:
 8007d8e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007d92:	461f      	mov	r7, r3
 8007d94:	898b      	ldrh	r3, [r1, #12]
 8007d96:	4605      	mov	r5, r0
 8007d98:	05db      	lsls	r3, r3, #23
 8007d9a:	460c      	mov	r4, r1
 8007d9c:	4616      	mov	r6, r2
 8007d9e:	d505      	bpl.n	8007dac <__swrite+0x1e>
 8007da0:	2302      	movs	r3, #2
 8007da2:	2200      	movs	r2, #0
 8007da4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007da8:	f000 f852 	bl	8007e50 <_lseek_r>
 8007dac:	89a3      	ldrh	r3, [r4, #12]
 8007dae:	4632      	mov	r2, r6
 8007db0:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8007db4:	81a3      	strh	r3, [r4, #12]
 8007db6:	4628      	mov	r0, r5
 8007db8:	463b      	mov	r3, r7
 8007dba:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007dbe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007dc2:	f000 b869 	b.w	8007e98 <_write_r>

08007dc6 <__sseek>:
 8007dc6:	b510      	push	{r4, lr}
 8007dc8:	460c      	mov	r4, r1
 8007dca:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007dce:	f000 f83f 	bl	8007e50 <_lseek_r>
 8007dd2:	1c43      	adds	r3, r0, #1
 8007dd4:	89a3      	ldrh	r3, [r4, #12]
 8007dd6:	bf15      	itete	ne
 8007dd8:	6560      	strne	r0, [r4, #84]	@ 0x54
 8007dda:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8007dde:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8007de2:	81a3      	strheq	r3, [r4, #12]
 8007de4:	bf18      	it	ne
 8007de6:	81a3      	strhne	r3, [r4, #12]
 8007de8:	bd10      	pop	{r4, pc}

08007dea <__sclose>:
 8007dea:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007dee:	f000 b81f 	b.w	8007e30 <_close_r>

08007df2 <memset>:
 8007df2:	4603      	mov	r3, r0
 8007df4:	4402      	add	r2, r0
 8007df6:	4293      	cmp	r3, r2
 8007df8:	d100      	bne.n	8007dfc <memset+0xa>
 8007dfa:	4770      	bx	lr
 8007dfc:	f803 1b01 	strb.w	r1, [r3], #1
 8007e00:	e7f9      	b.n	8007df6 <memset+0x4>

08007e02 <strncmp>:
 8007e02:	b510      	push	{r4, lr}
 8007e04:	b16a      	cbz	r2, 8007e22 <strncmp+0x20>
 8007e06:	3901      	subs	r1, #1
 8007e08:	1884      	adds	r4, r0, r2
 8007e0a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007e0e:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8007e12:	429a      	cmp	r2, r3
 8007e14:	d103      	bne.n	8007e1e <strncmp+0x1c>
 8007e16:	42a0      	cmp	r0, r4
 8007e18:	d001      	beq.n	8007e1e <strncmp+0x1c>
 8007e1a:	2a00      	cmp	r2, #0
 8007e1c:	d1f5      	bne.n	8007e0a <strncmp+0x8>
 8007e1e:	1ad0      	subs	r0, r2, r3
 8007e20:	bd10      	pop	{r4, pc}
 8007e22:	4610      	mov	r0, r2
 8007e24:	e7fc      	b.n	8007e20 <strncmp+0x1e>
	...

08007e28 <_localeconv_r>:
 8007e28:	4800      	ldr	r0, [pc, #0]	@ (8007e2c <_localeconv_r+0x4>)
 8007e2a:	4770      	bx	lr
 8007e2c:	20000278 	.word	0x20000278

08007e30 <_close_r>:
 8007e30:	b538      	push	{r3, r4, r5, lr}
 8007e32:	2300      	movs	r3, #0
 8007e34:	4d05      	ldr	r5, [pc, #20]	@ (8007e4c <_close_r+0x1c>)
 8007e36:	4604      	mov	r4, r0
 8007e38:	4608      	mov	r0, r1
 8007e3a:	602b      	str	r3, [r5, #0]
 8007e3c:	f7f9 ffae 	bl	8001d9c <_close>
 8007e40:	1c43      	adds	r3, r0, #1
 8007e42:	d102      	bne.n	8007e4a <_close_r+0x1a>
 8007e44:	682b      	ldr	r3, [r5, #0]
 8007e46:	b103      	cbz	r3, 8007e4a <_close_r+0x1a>
 8007e48:	6023      	str	r3, [r4, #0]
 8007e4a:	bd38      	pop	{r3, r4, r5, pc}
 8007e4c:	20001544 	.word	0x20001544

08007e50 <_lseek_r>:
 8007e50:	b538      	push	{r3, r4, r5, lr}
 8007e52:	4604      	mov	r4, r0
 8007e54:	4608      	mov	r0, r1
 8007e56:	4611      	mov	r1, r2
 8007e58:	2200      	movs	r2, #0
 8007e5a:	4d05      	ldr	r5, [pc, #20]	@ (8007e70 <_lseek_r+0x20>)
 8007e5c:	602a      	str	r2, [r5, #0]
 8007e5e:	461a      	mov	r2, r3
 8007e60:	f7f9 ffa8 	bl	8001db4 <_lseek>
 8007e64:	1c43      	adds	r3, r0, #1
 8007e66:	d102      	bne.n	8007e6e <_lseek_r+0x1e>
 8007e68:	682b      	ldr	r3, [r5, #0]
 8007e6a:	b103      	cbz	r3, 8007e6e <_lseek_r+0x1e>
 8007e6c:	6023      	str	r3, [r4, #0]
 8007e6e:	bd38      	pop	{r3, r4, r5, pc}
 8007e70:	20001544 	.word	0x20001544

08007e74 <_read_r>:
 8007e74:	b538      	push	{r3, r4, r5, lr}
 8007e76:	4604      	mov	r4, r0
 8007e78:	4608      	mov	r0, r1
 8007e7a:	4611      	mov	r1, r2
 8007e7c:	2200      	movs	r2, #0
 8007e7e:	4d05      	ldr	r5, [pc, #20]	@ (8007e94 <_read_r+0x20>)
 8007e80:	602a      	str	r2, [r5, #0]
 8007e82:	461a      	mov	r2, r3
 8007e84:	f7f9 ff6e 	bl	8001d64 <_read>
 8007e88:	1c43      	adds	r3, r0, #1
 8007e8a:	d102      	bne.n	8007e92 <_read_r+0x1e>
 8007e8c:	682b      	ldr	r3, [r5, #0]
 8007e8e:	b103      	cbz	r3, 8007e92 <_read_r+0x1e>
 8007e90:	6023      	str	r3, [r4, #0]
 8007e92:	bd38      	pop	{r3, r4, r5, pc}
 8007e94:	20001544 	.word	0x20001544

08007e98 <_write_r>:
 8007e98:	b538      	push	{r3, r4, r5, lr}
 8007e9a:	4604      	mov	r4, r0
 8007e9c:	4608      	mov	r0, r1
 8007e9e:	4611      	mov	r1, r2
 8007ea0:	2200      	movs	r2, #0
 8007ea2:	4d05      	ldr	r5, [pc, #20]	@ (8007eb8 <_write_r+0x20>)
 8007ea4:	602a      	str	r2, [r5, #0]
 8007ea6:	461a      	mov	r2, r3
 8007ea8:	f7f9 ff6a 	bl	8001d80 <_write>
 8007eac:	1c43      	adds	r3, r0, #1
 8007eae:	d102      	bne.n	8007eb6 <_write_r+0x1e>
 8007eb0:	682b      	ldr	r3, [r5, #0]
 8007eb2:	b103      	cbz	r3, 8007eb6 <_write_r+0x1e>
 8007eb4:	6023      	str	r3, [r4, #0]
 8007eb6:	bd38      	pop	{r3, r4, r5, pc}
 8007eb8:	20001544 	.word	0x20001544

08007ebc <__errno>:
 8007ebc:	4b01      	ldr	r3, [pc, #4]	@ (8007ec4 <__errno+0x8>)
 8007ebe:	6818      	ldr	r0, [r3, #0]
 8007ec0:	4770      	bx	lr
 8007ec2:	bf00      	nop
 8007ec4:	200002f4 	.word	0x200002f4

08007ec8 <__libc_init_array>:
 8007ec8:	b570      	push	{r4, r5, r6, lr}
 8007eca:	2600      	movs	r6, #0
 8007ecc:	4d0c      	ldr	r5, [pc, #48]	@ (8007f00 <__libc_init_array+0x38>)
 8007ece:	4c0d      	ldr	r4, [pc, #52]	@ (8007f04 <__libc_init_array+0x3c>)
 8007ed0:	1b64      	subs	r4, r4, r5
 8007ed2:	10a4      	asrs	r4, r4, #2
 8007ed4:	42a6      	cmp	r6, r4
 8007ed6:	d109      	bne.n	8007eec <__libc_init_array+0x24>
 8007ed8:	f002 fd6e 	bl	800a9b8 <_init>
 8007edc:	2600      	movs	r6, #0
 8007ede:	4d0a      	ldr	r5, [pc, #40]	@ (8007f08 <__libc_init_array+0x40>)
 8007ee0:	4c0a      	ldr	r4, [pc, #40]	@ (8007f0c <__libc_init_array+0x44>)
 8007ee2:	1b64      	subs	r4, r4, r5
 8007ee4:	10a4      	asrs	r4, r4, #2
 8007ee6:	42a6      	cmp	r6, r4
 8007ee8:	d105      	bne.n	8007ef6 <__libc_init_array+0x2e>
 8007eea:	bd70      	pop	{r4, r5, r6, pc}
 8007eec:	f855 3b04 	ldr.w	r3, [r5], #4
 8007ef0:	4798      	blx	r3
 8007ef2:	3601      	adds	r6, #1
 8007ef4:	e7ee      	b.n	8007ed4 <__libc_init_array+0xc>
 8007ef6:	f855 3b04 	ldr.w	r3, [r5], #4
 8007efa:	4798      	blx	r3
 8007efc:	3601      	adds	r6, #1
 8007efe:	e7f2      	b.n	8007ee6 <__libc_init_array+0x1e>
 8007f00:	0800afc8 	.word	0x0800afc8
 8007f04:	0800afc8 	.word	0x0800afc8
 8007f08:	0800afc8 	.word	0x0800afc8
 8007f0c:	0800afcc 	.word	0x0800afcc

08007f10 <__retarget_lock_init_recursive>:
 8007f10:	4770      	bx	lr

08007f12 <__retarget_lock_acquire_recursive>:
 8007f12:	4770      	bx	lr

08007f14 <__retarget_lock_release_recursive>:
 8007f14:	4770      	bx	lr

08007f16 <memchr>:
 8007f16:	4603      	mov	r3, r0
 8007f18:	b510      	push	{r4, lr}
 8007f1a:	b2c9      	uxtb	r1, r1
 8007f1c:	4402      	add	r2, r0
 8007f1e:	4293      	cmp	r3, r2
 8007f20:	4618      	mov	r0, r3
 8007f22:	d101      	bne.n	8007f28 <memchr+0x12>
 8007f24:	2000      	movs	r0, #0
 8007f26:	e003      	b.n	8007f30 <memchr+0x1a>
 8007f28:	7804      	ldrb	r4, [r0, #0]
 8007f2a:	3301      	adds	r3, #1
 8007f2c:	428c      	cmp	r4, r1
 8007f2e:	d1f6      	bne.n	8007f1e <memchr+0x8>
 8007f30:	bd10      	pop	{r4, pc}

08007f32 <memcpy>:
 8007f32:	440a      	add	r2, r1
 8007f34:	4291      	cmp	r1, r2
 8007f36:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8007f3a:	d100      	bne.n	8007f3e <memcpy+0xc>
 8007f3c:	4770      	bx	lr
 8007f3e:	b510      	push	{r4, lr}
 8007f40:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007f44:	4291      	cmp	r1, r2
 8007f46:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007f4a:	d1f9      	bne.n	8007f40 <memcpy+0xe>
 8007f4c:	bd10      	pop	{r4, pc}
	...

08007f50 <nan>:
 8007f50:	2000      	movs	r0, #0
 8007f52:	4901      	ldr	r1, [pc, #4]	@ (8007f58 <nan+0x8>)
 8007f54:	4770      	bx	lr
 8007f56:	bf00      	nop
 8007f58:	7ff80000 	.word	0x7ff80000

08007f5c <quorem>:
 8007f5c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007f60:	6903      	ldr	r3, [r0, #16]
 8007f62:	690c      	ldr	r4, [r1, #16]
 8007f64:	4607      	mov	r7, r0
 8007f66:	42a3      	cmp	r3, r4
 8007f68:	db7e      	blt.n	8008068 <quorem+0x10c>
 8007f6a:	3c01      	subs	r4, #1
 8007f6c:	00a3      	lsls	r3, r4, #2
 8007f6e:	f100 0514 	add.w	r5, r0, #20
 8007f72:	f101 0814 	add.w	r8, r1, #20
 8007f76:	9300      	str	r3, [sp, #0]
 8007f78:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007f7c:	9301      	str	r3, [sp, #4]
 8007f7e:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8007f82:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007f86:	3301      	adds	r3, #1
 8007f88:	429a      	cmp	r2, r3
 8007f8a:	fbb2 f6f3 	udiv	r6, r2, r3
 8007f8e:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8007f92:	d32e      	bcc.n	8007ff2 <quorem+0x96>
 8007f94:	f04f 0a00 	mov.w	sl, #0
 8007f98:	46c4      	mov	ip, r8
 8007f9a:	46ae      	mov	lr, r5
 8007f9c:	46d3      	mov	fp, sl
 8007f9e:	f85c 3b04 	ldr.w	r3, [ip], #4
 8007fa2:	b298      	uxth	r0, r3
 8007fa4:	fb06 a000 	mla	r0, r6, r0, sl
 8007fa8:	0c1b      	lsrs	r3, r3, #16
 8007faa:	0c02      	lsrs	r2, r0, #16
 8007fac:	fb06 2303 	mla	r3, r6, r3, r2
 8007fb0:	f8de 2000 	ldr.w	r2, [lr]
 8007fb4:	b280      	uxth	r0, r0
 8007fb6:	b292      	uxth	r2, r2
 8007fb8:	1a12      	subs	r2, r2, r0
 8007fba:	445a      	add	r2, fp
 8007fbc:	f8de 0000 	ldr.w	r0, [lr]
 8007fc0:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8007fc4:	b29b      	uxth	r3, r3
 8007fc6:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8007fca:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8007fce:	b292      	uxth	r2, r2
 8007fd0:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8007fd4:	45e1      	cmp	r9, ip
 8007fd6:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8007fda:	f84e 2b04 	str.w	r2, [lr], #4
 8007fde:	d2de      	bcs.n	8007f9e <quorem+0x42>
 8007fe0:	9b00      	ldr	r3, [sp, #0]
 8007fe2:	58eb      	ldr	r3, [r5, r3]
 8007fe4:	b92b      	cbnz	r3, 8007ff2 <quorem+0x96>
 8007fe6:	9b01      	ldr	r3, [sp, #4]
 8007fe8:	3b04      	subs	r3, #4
 8007fea:	429d      	cmp	r5, r3
 8007fec:	461a      	mov	r2, r3
 8007fee:	d32f      	bcc.n	8008050 <quorem+0xf4>
 8007ff0:	613c      	str	r4, [r7, #16]
 8007ff2:	4638      	mov	r0, r7
 8007ff4:	f001 fd10 	bl	8009a18 <__mcmp>
 8007ff8:	2800      	cmp	r0, #0
 8007ffa:	db25      	blt.n	8008048 <quorem+0xec>
 8007ffc:	4629      	mov	r1, r5
 8007ffe:	2000      	movs	r0, #0
 8008000:	f858 2b04 	ldr.w	r2, [r8], #4
 8008004:	f8d1 c000 	ldr.w	ip, [r1]
 8008008:	fa1f fe82 	uxth.w	lr, r2
 800800c:	fa1f f38c 	uxth.w	r3, ip
 8008010:	eba3 030e 	sub.w	r3, r3, lr
 8008014:	4403      	add	r3, r0
 8008016:	0c12      	lsrs	r2, r2, #16
 8008018:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800801c:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8008020:	b29b      	uxth	r3, r3
 8008022:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008026:	45c1      	cmp	r9, r8
 8008028:	ea4f 4022 	mov.w	r0, r2, asr #16
 800802c:	f841 3b04 	str.w	r3, [r1], #4
 8008030:	d2e6      	bcs.n	8008000 <quorem+0xa4>
 8008032:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008036:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800803a:	b922      	cbnz	r2, 8008046 <quorem+0xea>
 800803c:	3b04      	subs	r3, #4
 800803e:	429d      	cmp	r5, r3
 8008040:	461a      	mov	r2, r3
 8008042:	d30b      	bcc.n	800805c <quorem+0x100>
 8008044:	613c      	str	r4, [r7, #16]
 8008046:	3601      	adds	r6, #1
 8008048:	4630      	mov	r0, r6
 800804a:	b003      	add	sp, #12
 800804c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008050:	6812      	ldr	r2, [r2, #0]
 8008052:	3b04      	subs	r3, #4
 8008054:	2a00      	cmp	r2, #0
 8008056:	d1cb      	bne.n	8007ff0 <quorem+0x94>
 8008058:	3c01      	subs	r4, #1
 800805a:	e7c6      	b.n	8007fea <quorem+0x8e>
 800805c:	6812      	ldr	r2, [r2, #0]
 800805e:	3b04      	subs	r3, #4
 8008060:	2a00      	cmp	r2, #0
 8008062:	d1ef      	bne.n	8008044 <quorem+0xe8>
 8008064:	3c01      	subs	r4, #1
 8008066:	e7ea      	b.n	800803e <quorem+0xe2>
 8008068:	2000      	movs	r0, #0
 800806a:	e7ee      	b.n	800804a <quorem+0xee>
 800806c:	0000      	movs	r0, r0
	...

08008070 <_dtoa_r>:
 8008070:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008074:	4614      	mov	r4, r2
 8008076:	461d      	mov	r5, r3
 8008078:	69c7      	ldr	r7, [r0, #28]
 800807a:	b097      	sub	sp, #92	@ 0x5c
 800807c:	4683      	mov	fp, r0
 800807e:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8008082:	9e23      	ldr	r6, [sp, #140]	@ 0x8c
 8008084:	b97f      	cbnz	r7, 80080a6 <_dtoa_r+0x36>
 8008086:	2010      	movs	r0, #16
 8008088:	f001 f93c 	bl	8009304 <malloc>
 800808c:	4602      	mov	r2, r0
 800808e:	f8cb 001c 	str.w	r0, [fp, #28]
 8008092:	b920      	cbnz	r0, 800809e <_dtoa_r+0x2e>
 8008094:	21ef      	movs	r1, #239	@ 0xef
 8008096:	4ba8      	ldr	r3, [pc, #672]	@ (8008338 <_dtoa_r+0x2c8>)
 8008098:	48a8      	ldr	r0, [pc, #672]	@ (800833c <_dtoa_r+0x2cc>)
 800809a:	f002 f971 	bl	800a380 <__assert_func>
 800809e:	e9c0 7701 	strd	r7, r7, [r0, #4]
 80080a2:	6007      	str	r7, [r0, #0]
 80080a4:	60c7      	str	r7, [r0, #12]
 80080a6:	f8db 301c 	ldr.w	r3, [fp, #28]
 80080aa:	6819      	ldr	r1, [r3, #0]
 80080ac:	b159      	cbz	r1, 80080c6 <_dtoa_r+0x56>
 80080ae:	685a      	ldr	r2, [r3, #4]
 80080b0:	2301      	movs	r3, #1
 80080b2:	4093      	lsls	r3, r2
 80080b4:	604a      	str	r2, [r1, #4]
 80080b6:	608b      	str	r3, [r1, #8]
 80080b8:	4658      	mov	r0, fp
 80080ba:	f001 fa2b 	bl	8009514 <_Bfree>
 80080be:	2200      	movs	r2, #0
 80080c0:	f8db 301c 	ldr.w	r3, [fp, #28]
 80080c4:	601a      	str	r2, [r3, #0]
 80080c6:	1e2b      	subs	r3, r5, #0
 80080c8:	bfaf      	iteee	ge
 80080ca:	2300      	movge	r3, #0
 80080cc:	2201      	movlt	r2, #1
 80080ce:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 80080d2:	9303      	strlt	r3, [sp, #12]
 80080d4:	bfa8      	it	ge
 80080d6:	6033      	strge	r3, [r6, #0]
 80080d8:	f8dd 800c 	ldr.w	r8, [sp, #12]
 80080dc:	4b98      	ldr	r3, [pc, #608]	@ (8008340 <_dtoa_r+0x2d0>)
 80080de:	bfb8      	it	lt
 80080e0:	6032      	strlt	r2, [r6, #0]
 80080e2:	ea33 0308 	bics.w	r3, r3, r8
 80080e6:	d112      	bne.n	800810e <_dtoa_r+0x9e>
 80080e8:	f242 730f 	movw	r3, #9999	@ 0x270f
 80080ec:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 80080ee:	6013      	str	r3, [r2, #0]
 80080f0:	f3c8 0313 	ubfx	r3, r8, #0, #20
 80080f4:	4323      	orrs	r3, r4
 80080f6:	f000 8550 	beq.w	8008b9a <_dtoa_r+0xb2a>
 80080fa:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 80080fc:	f8df a244 	ldr.w	sl, [pc, #580]	@ 8008344 <_dtoa_r+0x2d4>
 8008100:	2b00      	cmp	r3, #0
 8008102:	f000 8552 	beq.w	8008baa <_dtoa_r+0xb3a>
 8008106:	f10a 0303 	add.w	r3, sl, #3
 800810a:	f000 bd4c 	b.w	8008ba6 <_dtoa_r+0xb36>
 800810e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008112:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8008116:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800811a:	2200      	movs	r2, #0
 800811c:	2300      	movs	r3, #0
 800811e:	f7f8 fcf7 	bl	8000b10 <__aeabi_dcmpeq>
 8008122:	4607      	mov	r7, r0
 8008124:	b158      	cbz	r0, 800813e <_dtoa_r+0xce>
 8008126:	2301      	movs	r3, #1
 8008128:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 800812a:	6013      	str	r3, [r2, #0]
 800812c:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800812e:	b113      	cbz	r3, 8008136 <_dtoa_r+0xc6>
 8008130:	4b85      	ldr	r3, [pc, #532]	@ (8008348 <_dtoa_r+0x2d8>)
 8008132:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8008134:	6013      	str	r3, [r2, #0]
 8008136:	f8df a214 	ldr.w	sl, [pc, #532]	@ 800834c <_dtoa_r+0x2dc>
 800813a:	f000 bd36 	b.w	8008baa <_dtoa_r+0xb3a>
 800813e:	ab14      	add	r3, sp, #80	@ 0x50
 8008140:	9301      	str	r3, [sp, #4]
 8008142:	ab15      	add	r3, sp, #84	@ 0x54
 8008144:	9300      	str	r3, [sp, #0]
 8008146:	4658      	mov	r0, fp
 8008148:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800814c:	f001 fd7c 	bl	8009c48 <__d2b>
 8008150:	f3c8 560a 	ubfx	r6, r8, #20, #11
 8008154:	4681      	mov	r9, r0
 8008156:	2e00      	cmp	r6, #0
 8008158:	d077      	beq.n	800824a <_dtoa_r+0x1da>
 800815a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800815e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8008160:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8008164:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008168:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800816c:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8008170:	9712      	str	r7, [sp, #72]	@ 0x48
 8008172:	4619      	mov	r1, r3
 8008174:	2200      	movs	r2, #0
 8008176:	4b76      	ldr	r3, [pc, #472]	@ (8008350 <_dtoa_r+0x2e0>)
 8008178:	f7f8 f8aa 	bl	80002d0 <__aeabi_dsub>
 800817c:	a368      	add	r3, pc, #416	@ (adr r3, 8008320 <_dtoa_r+0x2b0>)
 800817e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008182:	f7f8 fa5d 	bl	8000640 <__aeabi_dmul>
 8008186:	a368      	add	r3, pc, #416	@ (adr r3, 8008328 <_dtoa_r+0x2b8>)
 8008188:	e9d3 2300 	ldrd	r2, r3, [r3]
 800818c:	f7f8 f8a2 	bl	80002d4 <__adddf3>
 8008190:	4604      	mov	r4, r0
 8008192:	4630      	mov	r0, r6
 8008194:	460d      	mov	r5, r1
 8008196:	f7f8 f9e9 	bl	800056c <__aeabi_i2d>
 800819a:	a365      	add	r3, pc, #404	@ (adr r3, 8008330 <_dtoa_r+0x2c0>)
 800819c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80081a0:	f7f8 fa4e 	bl	8000640 <__aeabi_dmul>
 80081a4:	4602      	mov	r2, r0
 80081a6:	460b      	mov	r3, r1
 80081a8:	4620      	mov	r0, r4
 80081aa:	4629      	mov	r1, r5
 80081ac:	f7f8 f892 	bl	80002d4 <__adddf3>
 80081b0:	4604      	mov	r4, r0
 80081b2:	460d      	mov	r5, r1
 80081b4:	f7f8 fcf4 	bl	8000ba0 <__aeabi_d2iz>
 80081b8:	2200      	movs	r2, #0
 80081ba:	4607      	mov	r7, r0
 80081bc:	2300      	movs	r3, #0
 80081be:	4620      	mov	r0, r4
 80081c0:	4629      	mov	r1, r5
 80081c2:	f7f8 fcaf 	bl	8000b24 <__aeabi_dcmplt>
 80081c6:	b140      	cbz	r0, 80081da <_dtoa_r+0x16a>
 80081c8:	4638      	mov	r0, r7
 80081ca:	f7f8 f9cf 	bl	800056c <__aeabi_i2d>
 80081ce:	4622      	mov	r2, r4
 80081d0:	462b      	mov	r3, r5
 80081d2:	f7f8 fc9d 	bl	8000b10 <__aeabi_dcmpeq>
 80081d6:	b900      	cbnz	r0, 80081da <_dtoa_r+0x16a>
 80081d8:	3f01      	subs	r7, #1
 80081da:	2f16      	cmp	r7, #22
 80081dc:	d853      	bhi.n	8008286 <_dtoa_r+0x216>
 80081de:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80081e2:	4b5c      	ldr	r3, [pc, #368]	@ (8008354 <_dtoa_r+0x2e4>)
 80081e4:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80081e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80081ec:	f7f8 fc9a 	bl	8000b24 <__aeabi_dcmplt>
 80081f0:	2800      	cmp	r0, #0
 80081f2:	d04a      	beq.n	800828a <_dtoa_r+0x21a>
 80081f4:	2300      	movs	r3, #0
 80081f6:	3f01      	subs	r7, #1
 80081f8:	930f      	str	r3, [sp, #60]	@ 0x3c
 80081fa:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80081fc:	1b9b      	subs	r3, r3, r6
 80081fe:	1e5a      	subs	r2, r3, #1
 8008200:	bf46      	itte	mi
 8008202:	f1c3 0801 	rsbmi	r8, r3, #1
 8008206:	2300      	movmi	r3, #0
 8008208:	f04f 0800 	movpl.w	r8, #0
 800820c:	9209      	str	r2, [sp, #36]	@ 0x24
 800820e:	bf48      	it	mi
 8008210:	9309      	strmi	r3, [sp, #36]	@ 0x24
 8008212:	2f00      	cmp	r7, #0
 8008214:	db3b      	blt.n	800828e <_dtoa_r+0x21e>
 8008216:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008218:	970e      	str	r7, [sp, #56]	@ 0x38
 800821a:	443b      	add	r3, r7
 800821c:	9309      	str	r3, [sp, #36]	@ 0x24
 800821e:	2300      	movs	r3, #0
 8008220:	930a      	str	r3, [sp, #40]	@ 0x28
 8008222:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8008224:	2b09      	cmp	r3, #9
 8008226:	d866      	bhi.n	80082f6 <_dtoa_r+0x286>
 8008228:	2b05      	cmp	r3, #5
 800822a:	bfc4      	itt	gt
 800822c:	3b04      	subgt	r3, #4
 800822e:	9320      	strgt	r3, [sp, #128]	@ 0x80
 8008230:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8008232:	bfc8      	it	gt
 8008234:	2400      	movgt	r4, #0
 8008236:	f1a3 0302 	sub.w	r3, r3, #2
 800823a:	bfd8      	it	le
 800823c:	2401      	movle	r4, #1
 800823e:	2b03      	cmp	r3, #3
 8008240:	d864      	bhi.n	800830c <_dtoa_r+0x29c>
 8008242:	e8df f003 	tbb	[pc, r3]
 8008246:	382b      	.short	0x382b
 8008248:	5636      	.short	0x5636
 800824a:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 800824e:	441e      	add	r6, r3
 8008250:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8008254:	2b20      	cmp	r3, #32
 8008256:	bfc1      	itttt	gt
 8008258:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800825c:	fa08 f803 	lslgt.w	r8, r8, r3
 8008260:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8008264:	fa24 f303 	lsrgt.w	r3, r4, r3
 8008268:	bfd6      	itet	le
 800826a:	f1c3 0320 	rsble	r3, r3, #32
 800826e:	ea48 0003 	orrgt.w	r0, r8, r3
 8008272:	fa04 f003 	lslle.w	r0, r4, r3
 8008276:	f7f8 f969 	bl	800054c <__aeabi_ui2d>
 800827a:	2201      	movs	r2, #1
 800827c:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8008280:	3e01      	subs	r6, #1
 8008282:	9212      	str	r2, [sp, #72]	@ 0x48
 8008284:	e775      	b.n	8008172 <_dtoa_r+0x102>
 8008286:	2301      	movs	r3, #1
 8008288:	e7b6      	b.n	80081f8 <_dtoa_r+0x188>
 800828a:	900f      	str	r0, [sp, #60]	@ 0x3c
 800828c:	e7b5      	b.n	80081fa <_dtoa_r+0x18a>
 800828e:	427b      	negs	r3, r7
 8008290:	930a      	str	r3, [sp, #40]	@ 0x28
 8008292:	2300      	movs	r3, #0
 8008294:	eba8 0807 	sub.w	r8, r8, r7
 8008298:	930e      	str	r3, [sp, #56]	@ 0x38
 800829a:	e7c2      	b.n	8008222 <_dtoa_r+0x1b2>
 800829c:	2300      	movs	r3, #0
 800829e:	930b      	str	r3, [sp, #44]	@ 0x2c
 80082a0:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80082a2:	2b00      	cmp	r3, #0
 80082a4:	dc35      	bgt.n	8008312 <_dtoa_r+0x2a2>
 80082a6:	2301      	movs	r3, #1
 80082a8:	461a      	mov	r2, r3
 80082aa:	e9cd 3307 	strd	r3, r3, [sp, #28]
 80082ae:	9221      	str	r2, [sp, #132]	@ 0x84
 80082b0:	e00b      	b.n	80082ca <_dtoa_r+0x25a>
 80082b2:	2301      	movs	r3, #1
 80082b4:	e7f3      	b.n	800829e <_dtoa_r+0x22e>
 80082b6:	2300      	movs	r3, #0
 80082b8:	930b      	str	r3, [sp, #44]	@ 0x2c
 80082ba:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80082bc:	18fb      	adds	r3, r7, r3
 80082be:	9308      	str	r3, [sp, #32]
 80082c0:	3301      	adds	r3, #1
 80082c2:	2b01      	cmp	r3, #1
 80082c4:	9307      	str	r3, [sp, #28]
 80082c6:	bfb8      	it	lt
 80082c8:	2301      	movlt	r3, #1
 80082ca:	2100      	movs	r1, #0
 80082cc:	2204      	movs	r2, #4
 80082ce:	f8db 001c 	ldr.w	r0, [fp, #28]
 80082d2:	f102 0514 	add.w	r5, r2, #20
 80082d6:	429d      	cmp	r5, r3
 80082d8:	d91f      	bls.n	800831a <_dtoa_r+0x2aa>
 80082da:	6041      	str	r1, [r0, #4]
 80082dc:	4658      	mov	r0, fp
 80082de:	f001 f8d9 	bl	8009494 <_Balloc>
 80082e2:	4682      	mov	sl, r0
 80082e4:	2800      	cmp	r0, #0
 80082e6:	d139      	bne.n	800835c <_dtoa_r+0x2ec>
 80082e8:	4602      	mov	r2, r0
 80082ea:	f240 11af 	movw	r1, #431	@ 0x1af
 80082ee:	4b1a      	ldr	r3, [pc, #104]	@ (8008358 <_dtoa_r+0x2e8>)
 80082f0:	e6d2      	b.n	8008098 <_dtoa_r+0x28>
 80082f2:	2301      	movs	r3, #1
 80082f4:	e7e0      	b.n	80082b8 <_dtoa_r+0x248>
 80082f6:	2401      	movs	r4, #1
 80082f8:	2300      	movs	r3, #0
 80082fa:	940b      	str	r4, [sp, #44]	@ 0x2c
 80082fc:	9320      	str	r3, [sp, #128]	@ 0x80
 80082fe:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8008302:	2200      	movs	r2, #0
 8008304:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8008308:	2312      	movs	r3, #18
 800830a:	e7d0      	b.n	80082ae <_dtoa_r+0x23e>
 800830c:	2301      	movs	r3, #1
 800830e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008310:	e7f5      	b.n	80082fe <_dtoa_r+0x28e>
 8008312:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8008314:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8008318:	e7d7      	b.n	80082ca <_dtoa_r+0x25a>
 800831a:	3101      	adds	r1, #1
 800831c:	0052      	lsls	r2, r2, #1
 800831e:	e7d8      	b.n	80082d2 <_dtoa_r+0x262>
 8008320:	636f4361 	.word	0x636f4361
 8008324:	3fd287a7 	.word	0x3fd287a7
 8008328:	8b60c8b3 	.word	0x8b60c8b3
 800832c:	3fc68a28 	.word	0x3fc68a28
 8008330:	509f79fb 	.word	0x509f79fb
 8008334:	3fd34413 	.word	0x3fd34413
 8008338:	0800ac39 	.word	0x0800ac39
 800833c:	0800ac50 	.word	0x0800ac50
 8008340:	7ff00000 	.word	0x7ff00000
 8008344:	0800ac35 	.word	0x0800ac35
 8008348:	0800ac01 	.word	0x0800ac01
 800834c:	0800ac00 	.word	0x0800ac00
 8008350:	3ff80000 	.word	0x3ff80000
 8008354:	0800ada8 	.word	0x0800ada8
 8008358:	0800aca8 	.word	0x0800aca8
 800835c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8008360:	6018      	str	r0, [r3, #0]
 8008362:	9b07      	ldr	r3, [sp, #28]
 8008364:	2b0e      	cmp	r3, #14
 8008366:	f200 80a4 	bhi.w	80084b2 <_dtoa_r+0x442>
 800836a:	2c00      	cmp	r4, #0
 800836c:	f000 80a1 	beq.w	80084b2 <_dtoa_r+0x442>
 8008370:	2f00      	cmp	r7, #0
 8008372:	dd33      	ble.n	80083dc <_dtoa_r+0x36c>
 8008374:	4b86      	ldr	r3, [pc, #536]	@ (8008590 <_dtoa_r+0x520>)
 8008376:	f007 020f 	and.w	r2, r7, #15
 800837a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800837e:	05f8      	lsls	r0, r7, #23
 8008380:	e9d3 3400 	ldrd	r3, r4, [r3]
 8008384:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8008388:	ea4f 1427 	mov.w	r4, r7, asr #4
 800838c:	d516      	bpl.n	80083bc <_dtoa_r+0x34c>
 800838e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8008392:	4b80      	ldr	r3, [pc, #512]	@ (8008594 <_dtoa_r+0x524>)
 8008394:	2603      	movs	r6, #3
 8008396:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800839a:	f7f8 fa7b 	bl	8000894 <__aeabi_ddiv>
 800839e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80083a2:	f004 040f 	and.w	r4, r4, #15
 80083a6:	4d7b      	ldr	r5, [pc, #492]	@ (8008594 <_dtoa_r+0x524>)
 80083a8:	b954      	cbnz	r4, 80083c0 <_dtoa_r+0x350>
 80083aa:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80083ae:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80083b2:	f7f8 fa6f 	bl	8000894 <__aeabi_ddiv>
 80083b6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80083ba:	e028      	b.n	800840e <_dtoa_r+0x39e>
 80083bc:	2602      	movs	r6, #2
 80083be:	e7f2      	b.n	80083a6 <_dtoa_r+0x336>
 80083c0:	07e1      	lsls	r1, r4, #31
 80083c2:	d508      	bpl.n	80083d6 <_dtoa_r+0x366>
 80083c4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80083c8:	e9d5 2300 	ldrd	r2, r3, [r5]
 80083cc:	f7f8 f938 	bl	8000640 <__aeabi_dmul>
 80083d0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80083d4:	3601      	adds	r6, #1
 80083d6:	1064      	asrs	r4, r4, #1
 80083d8:	3508      	adds	r5, #8
 80083da:	e7e5      	b.n	80083a8 <_dtoa_r+0x338>
 80083dc:	f000 80d2 	beq.w	8008584 <_dtoa_r+0x514>
 80083e0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80083e4:	427c      	negs	r4, r7
 80083e6:	4b6a      	ldr	r3, [pc, #424]	@ (8008590 <_dtoa_r+0x520>)
 80083e8:	f004 020f 	and.w	r2, r4, #15
 80083ec:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80083f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80083f4:	f7f8 f924 	bl	8000640 <__aeabi_dmul>
 80083f8:	2602      	movs	r6, #2
 80083fa:	2300      	movs	r3, #0
 80083fc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008400:	4d64      	ldr	r5, [pc, #400]	@ (8008594 <_dtoa_r+0x524>)
 8008402:	1124      	asrs	r4, r4, #4
 8008404:	2c00      	cmp	r4, #0
 8008406:	f040 80b2 	bne.w	800856e <_dtoa_r+0x4fe>
 800840a:	2b00      	cmp	r3, #0
 800840c:	d1d3      	bne.n	80083b6 <_dtoa_r+0x346>
 800840e:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8008412:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008414:	2b00      	cmp	r3, #0
 8008416:	f000 80b7 	beq.w	8008588 <_dtoa_r+0x518>
 800841a:	2200      	movs	r2, #0
 800841c:	4620      	mov	r0, r4
 800841e:	4629      	mov	r1, r5
 8008420:	4b5d      	ldr	r3, [pc, #372]	@ (8008598 <_dtoa_r+0x528>)
 8008422:	f7f8 fb7f 	bl	8000b24 <__aeabi_dcmplt>
 8008426:	2800      	cmp	r0, #0
 8008428:	f000 80ae 	beq.w	8008588 <_dtoa_r+0x518>
 800842c:	9b07      	ldr	r3, [sp, #28]
 800842e:	2b00      	cmp	r3, #0
 8008430:	f000 80aa 	beq.w	8008588 <_dtoa_r+0x518>
 8008434:	9b08      	ldr	r3, [sp, #32]
 8008436:	2b00      	cmp	r3, #0
 8008438:	dd37      	ble.n	80084aa <_dtoa_r+0x43a>
 800843a:	1e7b      	subs	r3, r7, #1
 800843c:	4620      	mov	r0, r4
 800843e:	9304      	str	r3, [sp, #16]
 8008440:	2200      	movs	r2, #0
 8008442:	4629      	mov	r1, r5
 8008444:	4b55      	ldr	r3, [pc, #340]	@ (800859c <_dtoa_r+0x52c>)
 8008446:	f7f8 f8fb 	bl	8000640 <__aeabi_dmul>
 800844a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800844e:	9c08      	ldr	r4, [sp, #32]
 8008450:	3601      	adds	r6, #1
 8008452:	4630      	mov	r0, r6
 8008454:	f7f8 f88a 	bl	800056c <__aeabi_i2d>
 8008458:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800845c:	f7f8 f8f0 	bl	8000640 <__aeabi_dmul>
 8008460:	2200      	movs	r2, #0
 8008462:	4b4f      	ldr	r3, [pc, #316]	@ (80085a0 <_dtoa_r+0x530>)
 8008464:	f7f7 ff36 	bl	80002d4 <__adddf3>
 8008468:	4605      	mov	r5, r0
 800846a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800846e:	2c00      	cmp	r4, #0
 8008470:	f040 809a 	bne.w	80085a8 <_dtoa_r+0x538>
 8008474:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008478:	2200      	movs	r2, #0
 800847a:	4b4a      	ldr	r3, [pc, #296]	@ (80085a4 <_dtoa_r+0x534>)
 800847c:	f7f7 ff28 	bl	80002d0 <__aeabi_dsub>
 8008480:	4602      	mov	r2, r0
 8008482:	460b      	mov	r3, r1
 8008484:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8008488:	462a      	mov	r2, r5
 800848a:	4633      	mov	r3, r6
 800848c:	f7f8 fb68 	bl	8000b60 <__aeabi_dcmpgt>
 8008490:	2800      	cmp	r0, #0
 8008492:	f040 828e 	bne.w	80089b2 <_dtoa_r+0x942>
 8008496:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800849a:	462a      	mov	r2, r5
 800849c:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 80084a0:	f7f8 fb40 	bl	8000b24 <__aeabi_dcmplt>
 80084a4:	2800      	cmp	r0, #0
 80084a6:	f040 8127 	bne.w	80086f8 <_dtoa_r+0x688>
 80084aa:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 80084ae:	e9cd 3402 	strd	r3, r4, [sp, #8]
 80084b2:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 80084b4:	2b00      	cmp	r3, #0
 80084b6:	f2c0 8163 	blt.w	8008780 <_dtoa_r+0x710>
 80084ba:	2f0e      	cmp	r7, #14
 80084bc:	f300 8160 	bgt.w	8008780 <_dtoa_r+0x710>
 80084c0:	4b33      	ldr	r3, [pc, #204]	@ (8008590 <_dtoa_r+0x520>)
 80084c2:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80084c6:	e9d3 3400 	ldrd	r3, r4, [r3]
 80084ca:	e9cd 3404 	strd	r3, r4, [sp, #16]
 80084ce:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80084d0:	2b00      	cmp	r3, #0
 80084d2:	da03      	bge.n	80084dc <_dtoa_r+0x46c>
 80084d4:	9b07      	ldr	r3, [sp, #28]
 80084d6:	2b00      	cmp	r3, #0
 80084d8:	f340 8100 	ble.w	80086dc <_dtoa_r+0x66c>
 80084dc:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 80084e0:	4656      	mov	r6, sl
 80084e2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80084e6:	4620      	mov	r0, r4
 80084e8:	4629      	mov	r1, r5
 80084ea:	f7f8 f9d3 	bl	8000894 <__aeabi_ddiv>
 80084ee:	f7f8 fb57 	bl	8000ba0 <__aeabi_d2iz>
 80084f2:	4680      	mov	r8, r0
 80084f4:	f7f8 f83a 	bl	800056c <__aeabi_i2d>
 80084f8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80084fc:	f7f8 f8a0 	bl	8000640 <__aeabi_dmul>
 8008500:	4602      	mov	r2, r0
 8008502:	460b      	mov	r3, r1
 8008504:	4620      	mov	r0, r4
 8008506:	4629      	mov	r1, r5
 8008508:	f7f7 fee2 	bl	80002d0 <__aeabi_dsub>
 800850c:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8008510:	9d07      	ldr	r5, [sp, #28]
 8008512:	f806 4b01 	strb.w	r4, [r6], #1
 8008516:	eba6 040a 	sub.w	r4, r6, sl
 800851a:	42a5      	cmp	r5, r4
 800851c:	4602      	mov	r2, r0
 800851e:	460b      	mov	r3, r1
 8008520:	f040 8116 	bne.w	8008750 <_dtoa_r+0x6e0>
 8008524:	f7f7 fed6 	bl	80002d4 <__adddf3>
 8008528:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800852c:	4604      	mov	r4, r0
 800852e:	460d      	mov	r5, r1
 8008530:	f7f8 fb16 	bl	8000b60 <__aeabi_dcmpgt>
 8008534:	2800      	cmp	r0, #0
 8008536:	f040 80f8 	bne.w	800872a <_dtoa_r+0x6ba>
 800853a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800853e:	4620      	mov	r0, r4
 8008540:	4629      	mov	r1, r5
 8008542:	f7f8 fae5 	bl	8000b10 <__aeabi_dcmpeq>
 8008546:	b118      	cbz	r0, 8008550 <_dtoa_r+0x4e0>
 8008548:	f018 0f01 	tst.w	r8, #1
 800854c:	f040 80ed 	bne.w	800872a <_dtoa_r+0x6ba>
 8008550:	4649      	mov	r1, r9
 8008552:	4658      	mov	r0, fp
 8008554:	f000 ffde 	bl	8009514 <_Bfree>
 8008558:	2300      	movs	r3, #0
 800855a:	7033      	strb	r3, [r6, #0]
 800855c:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 800855e:	3701      	adds	r7, #1
 8008560:	601f      	str	r7, [r3, #0]
 8008562:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8008564:	2b00      	cmp	r3, #0
 8008566:	f000 8320 	beq.w	8008baa <_dtoa_r+0xb3a>
 800856a:	601e      	str	r6, [r3, #0]
 800856c:	e31d      	b.n	8008baa <_dtoa_r+0xb3a>
 800856e:	07e2      	lsls	r2, r4, #31
 8008570:	d505      	bpl.n	800857e <_dtoa_r+0x50e>
 8008572:	e9d5 2300 	ldrd	r2, r3, [r5]
 8008576:	f7f8 f863 	bl	8000640 <__aeabi_dmul>
 800857a:	2301      	movs	r3, #1
 800857c:	3601      	adds	r6, #1
 800857e:	1064      	asrs	r4, r4, #1
 8008580:	3508      	adds	r5, #8
 8008582:	e73f      	b.n	8008404 <_dtoa_r+0x394>
 8008584:	2602      	movs	r6, #2
 8008586:	e742      	b.n	800840e <_dtoa_r+0x39e>
 8008588:	9c07      	ldr	r4, [sp, #28]
 800858a:	9704      	str	r7, [sp, #16]
 800858c:	e761      	b.n	8008452 <_dtoa_r+0x3e2>
 800858e:	bf00      	nop
 8008590:	0800ada8 	.word	0x0800ada8
 8008594:	0800ad80 	.word	0x0800ad80
 8008598:	3ff00000 	.word	0x3ff00000
 800859c:	40240000 	.word	0x40240000
 80085a0:	401c0000 	.word	0x401c0000
 80085a4:	40140000 	.word	0x40140000
 80085a8:	4b70      	ldr	r3, [pc, #448]	@ (800876c <_dtoa_r+0x6fc>)
 80085aa:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80085ac:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80085b0:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80085b4:	4454      	add	r4, sl
 80085b6:	2900      	cmp	r1, #0
 80085b8:	d045      	beq.n	8008646 <_dtoa_r+0x5d6>
 80085ba:	2000      	movs	r0, #0
 80085bc:	496c      	ldr	r1, [pc, #432]	@ (8008770 <_dtoa_r+0x700>)
 80085be:	f7f8 f969 	bl	8000894 <__aeabi_ddiv>
 80085c2:	4633      	mov	r3, r6
 80085c4:	462a      	mov	r2, r5
 80085c6:	f7f7 fe83 	bl	80002d0 <__aeabi_dsub>
 80085ca:	4656      	mov	r6, sl
 80085cc:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80085d0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80085d4:	f7f8 fae4 	bl	8000ba0 <__aeabi_d2iz>
 80085d8:	4605      	mov	r5, r0
 80085da:	f7f7 ffc7 	bl	800056c <__aeabi_i2d>
 80085de:	4602      	mov	r2, r0
 80085e0:	460b      	mov	r3, r1
 80085e2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80085e6:	f7f7 fe73 	bl	80002d0 <__aeabi_dsub>
 80085ea:	4602      	mov	r2, r0
 80085ec:	460b      	mov	r3, r1
 80085ee:	3530      	adds	r5, #48	@ 0x30
 80085f0:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80085f4:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80085f8:	f806 5b01 	strb.w	r5, [r6], #1
 80085fc:	f7f8 fa92 	bl	8000b24 <__aeabi_dcmplt>
 8008600:	2800      	cmp	r0, #0
 8008602:	d163      	bne.n	80086cc <_dtoa_r+0x65c>
 8008604:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008608:	2000      	movs	r0, #0
 800860a:	495a      	ldr	r1, [pc, #360]	@ (8008774 <_dtoa_r+0x704>)
 800860c:	f7f7 fe60 	bl	80002d0 <__aeabi_dsub>
 8008610:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8008614:	f7f8 fa86 	bl	8000b24 <__aeabi_dcmplt>
 8008618:	2800      	cmp	r0, #0
 800861a:	f040 8087 	bne.w	800872c <_dtoa_r+0x6bc>
 800861e:	42a6      	cmp	r6, r4
 8008620:	f43f af43 	beq.w	80084aa <_dtoa_r+0x43a>
 8008624:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8008628:	2200      	movs	r2, #0
 800862a:	4b53      	ldr	r3, [pc, #332]	@ (8008778 <_dtoa_r+0x708>)
 800862c:	f7f8 f808 	bl	8000640 <__aeabi_dmul>
 8008630:	2200      	movs	r2, #0
 8008632:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8008636:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800863a:	4b4f      	ldr	r3, [pc, #316]	@ (8008778 <_dtoa_r+0x708>)
 800863c:	f7f8 f800 	bl	8000640 <__aeabi_dmul>
 8008640:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008644:	e7c4      	b.n	80085d0 <_dtoa_r+0x560>
 8008646:	4631      	mov	r1, r6
 8008648:	4628      	mov	r0, r5
 800864a:	f7f7 fff9 	bl	8000640 <__aeabi_dmul>
 800864e:	4656      	mov	r6, sl
 8008650:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8008654:	9413      	str	r4, [sp, #76]	@ 0x4c
 8008656:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800865a:	f7f8 faa1 	bl	8000ba0 <__aeabi_d2iz>
 800865e:	4605      	mov	r5, r0
 8008660:	f7f7 ff84 	bl	800056c <__aeabi_i2d>
 8008664:	4602      	mov	r2, r0
 8008666:	460b      	mov	r3, r1
 8008668:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800866c:	f7f7 fe30 	bl	80002d0 <__aeabi_dsub>
 8008670:	4602      	mov	r2, r0
 8008672:	460b      	mov	r3, r1
 8008674:	3530      	adds	r5, #48	@ 0x30
 8008676:	f806 5b01 	strb.w	r5, [r6], #1
 800867a:	42a6      	cmp	r6, r4
 800867c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8008680:	f04f 0200 	mov.w	r2, #0
 8008684:	d124      	bne.n	80086d0 <_dtoa_r+0x660>
 8008686:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800868a:	4b39      	ldr	r3, [pc, #228]	@ (8008770 <_dtoa_r+0x700>)
 800868c:	f7f7 fe22 	bl	80002d4 <__adddf3>
 8008690:	4602      	mov	r2, r0
 8008692:	460b      	mov	r3, r1
 8008694:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008698:	f7f8 fa62 	bl	8000b60 <__aeabi_dcmpgt>
 800869c:	2800      	cmp	r0, #0
 800869e:	d145      	bne.n	800872c <_dtoa_r+0x6bc>
 80086a0:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80086a4:	2000      	movs	r0, #0
 80086a6:	4932      	ldr	r1, [pc, #200]	@ (8008770 <_dtoa_r+0x700>)
 80086a8:	f7f7 fe12 	bl	80002d0 <__aeabi_dsub>
 80086ac:	4602      	mov	r2, r0
 80086ae:	460b      	mov	r3, r1
 80086b0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80086b4:	f7f8 fa36 	bl	8000b24 <__aeabi_dcmplt>
 80086b8:	2800      	cmp	r0, #0
 80086ba:	f43f aef6 	beq.w	80084aa <_dtoa_r+0x43a>
 80086be:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 80086c0:	1e73      	subs	r3, r6, #1
 80086c2:	9313      	str	r3, [sp, #76]	@ 0x4c
 80086c4:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80086c8:	2b30      	cmp	r3, #48	@ 0x30
 80086ca:	d0f8      	beq.n	80086be <_dtoa_r+0x64e>
 80086cc:	9f04      	ldr	r7, [sp, #16]
 80086ce:	e73f      	b.n	8008550 <_dtoa_r+0x4e0>
 80086d0:	4b29      	ldr	r3, [pc, #164]	@ (8008778 <_dtoa_r+0x708>)
 80086d2:	f7f7 ffb5 	bl	8000640 <__aeabi_dmul>
 80086d6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80086da:	e7bc      	b.n	8008656 <_dtoa_r+0x5e6>
 80086dc:	d10c      	bne.n	80086f8 <_dtoa_r+0x688>
 80086de:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80086e2:	2200      	movs	r2, #0
 80086e4:	4b25      	ldr	r3, [pc, #148]	@ (800877c <_dtoa_r+0x70c>)
 80086e6:	f7f7 ffab 	bl	8000640 <__aeabi_dmul>
 80086ea:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80086ee:	f7f8 fa2d 	bl	8000b4c <__aeabi_dcmpge>
 80086f2:	2800      	cmp	r0, #0
 80086f4:	f000 815b 	beq.w	80089ae <_dtoa_r+0x93e>
 80086f8:	2400      	movs	r4, #0
 80086fa:	4625      	mov	r5, r4
 80086fc:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80086fe:	4656      	mov	r6, sl
 8008700:	43db      	mvns	r3, r3
 8008702:	9304      	str	r3, [sp, #16]
 8008704:	2700      	movs	r7, #0
 8008706:	4621      	mov	r1, r4
 8008708:	4658      	mov	r0, fp
 800870a:	f000 ff03 	bl	8009514 <_Bfree>
 800870e:	2d00      	cmp	r5, #0
 8008710:	d0dc      	beq.n	80086cc <_dtoa_r+0x65c>
 8008712:	b12f      	cbz	r7, 8008720 <_dtoa_r+0x6b0>
 8008714:	42af      	cmp	r7, r5
 8008716:	d003      	beq.n	8008720 <_dtoa_r+0x6b0>
 8008718:	4639      	mov	r1, r7
 800871a:	4658      	mov	r0, fp
 800871c:	f000 fefa 	bl	8009514 <_Bfree>
 8008720:	4629      	mov	r1, r5
 8008722:	4658      	mov	r0, fp
 8008724:	f000 fef6 	bl	8009514 <_Bfree>
 8008728:	e7d0      	b.n	80086cc <_dtoa_r+0x65c>
 800872a:	9704      	str	r7, [sp, #16]
 800872c:	4633      	mov	r3, r6
 800872e:	461e      	mov	r6, r3
 8008730:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008734:	2a39      	cmp	r2, #57	@ 0x39
 8008736:	d107      	bne.n	8008748 <_dtoa_r+0x6d8>
 8008738:	459a      	cmp	sl, r3
 800873a:	d1f8      	bne.n	800872e <_dtoa_r+0x6be>
 800873c:	9a04      	ldr	r2, [sp, #16]
 800873e:	3201      	adds	r2, #1
 8008740:	9204      	str	r2, [sp, #16]
 8008742:	2230      	movs	r2, #48	@ 0x30
 8008744:	f88a 2000 	strb.w	r2, [sl]
 8008748:	781a      	ldrb	r2, [r3, #0]
 800874a:	3201      	adds	r2, #1
 800874c:	701a      	strb	r2, [r3, #0]
 800874e:	e7bd      	b.n	80086cc <_dtoa_r+0x65c>
 8008750:	2200      	movs	r2, #0
 8008752:	4b09      	ldr	r3, [pc, #36]	@ (8008778 <_dtoa_r+0x708>)
 8008754:	f7f7 ff74 	bl	8000640 <__aeabi_dmul>
 8008758:	2200      	movs	r2, #0
 800875a:	2300      	movs	r3, #0
 800875c:	4604      	mov	r4, r0
 800875e:	460d      	mov	r5, r1
 8008760:	f7f8 f9d6 	bl	8000b10 <__aeabi_dcmpeq>
 8008764:	2800      	cmp	r0, #0
 8008766:	f43f aebc 	beq.w	80084e2 <_dtoa_r+0x472>
 800876a:	e6f1      	b.n	8008550 <_dtoa_r+0x4e0>
 800876c:	0800ada8 	.word	0x0800ada8
 8008770:	3fe00000 	.word	0x3fe00000
 8008774:	3ff00000 	.word	0x3ff00000
 8008778:	40240000 	.word	0x40240000
 800877c:	40140000 	.word	0x40140000
 8008780:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8008782:	2a00      	cmp	r2, #0
 8008784:	f000 80db 	beq.w	800893e <_dtoa_r+0x8ce>
 8008788:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800878a:	2a01      	cmp	r2, #1
 800878c:	f300 80bf 	bgt.w	800890e <_dtoa_r+0x89e>
 8008790:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8008792:	2a00      	cmp	r2, #0
 8008794:	f000 80b7 	beq.w	8008906 <_dtoa_r+0x896>
 8008798:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800879c:	4646      	mov	r6, r8
 800879e:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80087a0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80087a2:	2101      	movs	r1, #1
 80087a4:	441a      	add	r2, r3
 80087a6:	4658      	mov	r0, fp
 80087a8:	4498      	add	r8, r3
 80087aa:	9209      	str	r2, [sp, #36]	@ 0x24
 80087ac:	f000 ffb0 	bl	8009710 <__i2b>
 80087b0:	4605      	mov	r5, r0
 80087b2:	b15e      	cbz	r6, 80087cc <_dtoa_r+0x75c>
 80087b4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80087b6:	2b00      	cmp	r3, #0
 80087b8:	dd08      	ble.n	80087cc <_dtoa_r+0x75c>
 80087ba:	42b3      	cmp	r3, r6
 80087bc:	bfa8      	it	ge
 80087be:	4633      	movge	r3, r6
 80087c0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80087c2:	eba8 0803 	sub.w	r8, r8, r3
 80087c6:	1af6      	subs	r6, r6, r3
 80087c8:	1ad3      	subs	r3, r2, r3
 80087ca:	9309      	str	r3, [sp, #36]	@ 0x24
 80087cc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80087ce:	b1f3      	cbz	r3, 800880e <_dtoa_r+0x79e>
 80087d0:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80087d2:	2b00      	cmp	r3, #0
 80087d4:	f000 80b7 	beq.w	8008946 <_dtoa_r+0x8d6>
 80087d8:	b18c      	cbz	r4, 80087fe <_dtoa_r+0x78e>
 80087da:	4629      	mov	r1, r5
 80087dc:	4622      	mov	r2, r4
 80087de:	4658      	mov	r0, fp
 80087e0:	f001 f854 	bl	800988c <__pow5mult>
 80087e4:	464a      	mov	r2, r9
 80087e6:	4601      	mov	r1, r0
 80087e8:	4605      	mov	r5, r0
 80087ea:	4658      	mov	r0, fp
 80087ec:	f000 ffa6 	bl	800973c <__multiply>
 80087f0:	4649      	mov	r1, r9
 80087f2:	9004      	str	r0, [sp, #16]
 80087f4:	4658      	mov	r0, fp
 80087f6:	f000 fe8d 	bl	8009514 <_Bfree>
 80087fa:	9b04      	ldr	r3, [sp, #16]
 80087fc:	4699      	mov	r9, r3
 80087fe:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008800:	1b1a      	subs	r2, r3, r4
 8008802:	d004      	beq.n	800880e <_dtoa_r+0x79e>
 8008804:	4649      	mov	r1, r9
 8008806:	4658      	mov	r0, fp
 8008808:	f001 f840 	bl	800988c <__pow5mult>
 800880c:	4681      	mov	r9, r0
 800880e:	2101      	movs	r1, #1
 8008810:	4658      	mov	r0, fp
 8008812:	f000 ff7d 	bl	8009710 <__i2b>
 8008816:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008818:	4604      	mov	r4, r0
 800881a:	2b00      	cmp	r3, #0
 800881c:	f000 81c9 	beq.w	8008bb2 <_dtoa_r+0xb42>
 8008820:	461a      	mov	r2, r3
 8008822:	4601      	mov	r1, r0
 8008824:	4658      	mov	r0, fp
 8008826:	f001 f831 	bl	800988c <__pow5mult>
 800882a:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800882c:	4604      	mov	r4, r0
 800882e:	2b01      	cmp	r3, #1
 8008830:	f300 808f 	bgt.w	8008952 <_dtoa_r+0x8e2>
 8008834:	9b02      	ldr	r3, [sp, #8]
 8008836:	2b00      	cmp	r3, #0
 8008838:	f040 8087 	bne.w	800894a <_dtoa_r+0x8da>
 800883c:	9b03      	ldr	r3, [sp, #12]
 800883e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008842:	2b00      	cmp	r3, #0
 8008844:	f040 8083 	bne.w	800894e <_dtoa_r+0x8de>
 8008848:	9b03      	ldr	r3, [sp, #12]
 800884a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800884e:	0d1b      	lsrs	r3, r3, #20
 8008850:	051b      	lsls	r3, r3, #20
 8008852:	b12b      	cbz	r3, 8008860 <_dtoa_r+0x7f0>
 8008854:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008856:	f108 0801 	add.w	r8, r8, #1
 800885a:	3301      	adds	r3, #1
 800885c:	9309      	str	r3, [sp, #36]	@ 0x24
 800885e:	2301      	movs	r3, #1
 8008860:	930a      	str	r3, [sp, #40]	@ 0x28
 8008862:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008864:	2b00      	cmp	r3, #0
 8008866:	f000 81aa 	beq.w	8008bbe <_dtoa_r+0xb4e>
 800886a:	6923      	ldr	r3, [r4, #16]
 800886c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8008870:	6918      	ldr	r0, [r3, #16]
 8008872:	f000 ff01 	bl	8009678 <__hi0bits>
 8008876:	f1c0 0020 	rsb	r0, r0, #32
 800887a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800887c:	4418      	add	r0, r3
 800887e:	f010 001f 	ands.w	r0, r0, #31
 8008882:	d071      	beq.n	8008968 <_dtoa_r+0x8f8>
 8008884:	f1c0 0320 	rsb	r3, r0, #32
 8008888:	2b04      	cmp	r3, #4
 800888a:	dd65      	ble.n	8008958 <_dtoa_r+0x8e8>
 800888c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800888e:	f1c0 001c 	rsb	r0, r0, #28
 8008892:	4403      	add	r3, r0
 8008894:	4480      	add	r8, r0
 8008896:	4406      	add	r6, r0
 8008898:	9309      	str	r3, [sp, #36]	@ 0x24
 800889a:	f1b8 0f00 	cmp.w	r8, #0
 800889e:	dd05      	ble.n	80088ac <_dtoa_r+0x83c>
 80088a0:	4649      	mov	r1, r9
 80088a2:	4642      	mov	r2, r8
 80088a4:	4658      	mov	r0, fp
 80088a6:	f001 f84b 	bl	8009940 <__lshift>
 80088aa:	4681      	mov	r9, r0
 80088ac:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80088ae:	2b00      	cmp	r3, #0
 80088b0:	dd05      	ble.n	80088be <_dtoa_r+0x84e>
 80088b2:	4621      	mov	r1, r4
 80088b4:	461a      	mov	r2, r3
 80088b6:	4658      	mov	r0, fp
 80088b8:	f001 f842 	bl	8009940 <__lshift>
 80088bc:	4604      	mov	r4, r0
 80088be:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80088c0:	2b00      	cmp	r3, #0
 80088c2:	d053      	beq.n	800896c <_dtoa_r+0x8fc>
 80088c4:	4621      	mov	r1, r4
 80088c6:	4648      	mov	r0, r9
 80088c8:	f001 f8a6 	bl	8009a18 <__mcmp>
 80088cc:	2800      	cmp	r0, #0
 80088ce:	da4d      	bge.n	800896c <_dtoa_r+0x8fc>
 80088d0:	1e7b      	subs	r3, r7, #1
 80088d2:	4649      	mov	r1, r9
 80088d4:	9304      	str	r3, [sp, #16]
 80088d6:	220a      	movs	r2, #10
 80088d8:	2300      	movs	r3, #0
 80088da:	4658      	mov	r0, fp
 80088dc:	f000 fe3c 	bl	8009558 <__multadd>
 80088e0:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80088e2:	4681      	mov	r9, r0
 80088e4:	2b00      	cmp	r3, #0
 80088e6:	f000 816c 	beq.w	8008bc2 <_dtoa_r+0xb52>
 80088ea:	2300      	movs	r3, #0
 80088ec:	4629      	mov	r1, r5
 80088ee:	220a      	movs	r2, #10
 80088f0:	4658      	mov	r0, fp
 80088f2:	f000 fe31 	bl	8009558 <__multadd>
 80088f6:	9b08      	ldr	r3, [sp, #32]
 80088f8:	4605      	mov	r5, r0
 80088fa:	2b00      	cmp	r3, #0
 80088fc:	dc61      	bgt.n	80089c2 <_dtoa_r+0x952>
 80088fe:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8008900:	2b02      	cmp	r3, #2
 8008902:	dc3b      	bgt.n	800897c <_dtoa_r+0x90c>
 8008904:	e05d      	b.n	80089c2 <_dtoa_r+0x952>
 8008906:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8008908:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800890c:	e746      	b.n	800879c <_dtoa_r+0x72c>
 800890e:	9b07      	ldr	r3, [sp, #28]
 8008910:	1e5c      	subs	r4, r3, #1
 8008912:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008914:	42a3      	cmp	r3, r4
 8008916:	bfbf      	itttt	lt
 8008918:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800891a:	9a0e      	ldrlt	r2, [sp, #56]	@ 0x38
 800891c:	1ae3      	sublt	r3, r4, r3
 800891e:	18d2      	addlt	r2, r2, r3
 8008920:	bfa8      	it	ge
 8008922:	1b1c      	subge	r4, r3, r4
 8008924:	9b07      	ldr	r3, [sp, #28]
 8008926:	bfbe      	ittt	lt
 8008928:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800892a:	920e      	strlt	r2, [sp, #56]	@ 0x38
 800892c:	2400      	movlt	r4, #0
 800892e:	2b00      	cmp	r3, #0
 8008930:	bfb5      	itete	lt
 8008932:	eba8 0603 	sublt.w	r6, r8, r3
 8008936:	4646      	movge	r6, r8
 8008938:	2300      	movlt	r3, #0
 800893a:	9b07      	ldrge	r3, [sp, #28]
 800893c:	e730      	b.n	80087a0 <_dtoa_r+0x730>
 800893e:	4646      	mov	r6, r8
 8008940:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8008942:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8008944:	e735      	b.n	80087b2 <_dtoa_r+0x742>
 8008946:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8008948:	e75c      	b.n	8008804 <_dtoa_r+0x794>
 800894a:	2300      	movs	r3, #0
 800894c:	e788      	b.n	8008860 <_dtoa_r+0x7f0>
 800894e:	9b02      	ldr	r3, [sp, #8]
 8008950:	e786      	b.n	8008860 <_dtoa_r+0x7f0>
 8008952:	2300      	movs	r3, #0
 8008954:	930a      	str	r3, [sp, #40]	@ 0x28
 8008956:	e788      	b.n	800886a <_dtoa_r+0x7fa>
 8008958:	d09f      	beq.n	800889a <_dtoa_r+0x82a>
 800895a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800895c:	331c      	adds	r3, #28
 800895e:	441a      	add	r2, r3
 8008960:	4498      	add	r8, r3
 8008962:	441e      	add	r6, r3
 8008964:	9209      	str	r2, [sp, #36]	@ 0x24
 8008966:	e798      	b.n	800889a <_dtoa_r+0x82a>
 8008968:	4603      	mov	r3, r0
 800896a:	e7f6      	b.n	800895a <_dtoa_r+0x8ea>
 800896c:	9b07      	ldr	r3, [sp, #28]
 800896e:	9704      	str	r7, [sp, #16]
 8008970:	2b00      	cmp	r3, #0
 8008972:	dc20      	bgt.n	80089b6 <_dtoa_r+0x946>
 8008974:	9308      	str	r3, [sp, #32]
 8008976:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8008978:	2b02      	cmp	r3, #2
 800897a:	dd1e      	ble.n	80089ba <_dtoa_r+0x94a>
 800897c:	9b08      	ldr	r3, [sp, #32]
 800897e:	2b00      	cmp	r3, #0
 8008980:	f47f aebc 	bne.w	80086fc <_dtoa_r+0x68c>
 8008984:	4621      	mov	r1, r4
 8008986:	2205      	movs	r2, #5
 8008988:	4658      	mov	r0, fp
 800898a:	f000 fde5 	bl	8009558 <__multadd>
 800898e:	4601      	mov	r1, r0
 8008990:	4604      	mov	r4, r0
 8008992:	4648      	mov	r0, r9
 8008994:	f001 f840 	bl	8009a18 <__mcmp>
 8008998:	2800      	cmp	r0, #0
 800899a:	f77f aeaf 	ble.w	80086fc <_dtoa_r+0x68c>
 800899e:	2331      	movs	r3, #49	@ 0x31
 80089a0:	4656      	mov	r6, sl
 80089a2:	f806 3b01 	strb.w	r3, [r6], #1
 80089a6:	9b04      	ldr	r3, [sp, #16]
 80089a8:	3301      	adds	r3, #1
 80089aa:	9304      	str	r3, [sp, #16]
 80089ac:	e6aa      	b.n	8008704 <_dtoa_r+0x694>
 80089ae:	9c07      	ldr	r4, [sp, #28]
 80089b0:	9704      	str	r7, [sp, #16]
 80089b2:	4625      	mov	r5, r4
 80089b4:	e7f3      	b.n	800899e <_dtoa_r+0x92e>
 80089b6:	9b07      	ldr	r3, [sp, #28]
 80089b8:	9308      	str	r3, [sp, #32]
 80089ba:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80089bc:	2b00      	cmp	r3, #0
 80089be:	f000 8104 	beq.w	8008bca <_dtoa_r+0xb5a>
 80089c2:	2e00      	cmp	r6, #0
 80089c4:	dd05      	ble.n	80089d2 <_dtoa_r+0x962>
 80089c6:	4629      	mov	r1, r5
 80089c8:	4632      	mov	r2, r6
 80089ca:	4658      	mov	r0, fp
 80089cc:	f000 ffb8 	bl	8009940 <__lshift>
 80089d0:	4605      	mov	r5, r0
 80089d2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80089d4:	2b00      	cmp	r3, #0
 80089d6:	d05a      	beq.n	8008a8e <_dtoa_r+0xa1e>
 80089d8:	4658      	mov	r0, fp
 80089da:	6869      	ldr	r1, [r5, #4]
 80089dc:	f000 fd5a 	bl	8009494 <_Balloc>
 80089e0:	4606      	mov	r6, r0
 80089e2:	b928      	cbnz	r0, 80089f0 <_dtoa_r+0x980>
 80089e4:	4602      	mov	r2, r0
 80089e6:	f240 21ef 	movw	r1, #751	@ 0x2ef
 80089ea:	4b83      	ldr	r3, [pc, #524]	@ (8008bf8 <_dtoa_r+0xb88>)
 80089ec:	f7ff bb54 	b.w	8008098 <_dtoa_r+0x28>
 80089f0:	692a      	ldr	r2, [r5, #16]
 80089f2:	f105 010c 	add.w	r1, r5, #12
 80089f6:	3202      	adds	r2, #2
 80089f8:	0092      	lsls	r2, r2, #2
 80089fa:	300c      	adds	r0, #12
 80089fc:	f7ff fa99 	bl	8007f32 <memcpy>
 8008a00:	2201      	movs	r2, #1
 8008a02:	4631      	mov	r1, r6
 8008a04:	4658      	mov	r0, fp
 8008a06:	f000 ff9b 	bl	8009940 <__lshift>
 8008a0a:	462f      	mov	r7, r5
 8008a0c:	4605      	mov	r5, r0
 8008a0e:	f10a 0301 	add.w	r3, sl, #1
 8008a12:	9307      	str	r3, [sp, #28]
 8008a14:	9b08      	ldr	r3, [sp, #32]
 8008a16:	4453      	add	r3, sl
 8008a18:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008a1a:	9b02      	ldr	r3, [sp, #8]
 8008a1c:	f003 0301 	and.w	r3, r3, #1
 8008a20:	930a      	str	r3, [sp, #40]	@ 0x28
 8008a22:	9b07      	ldr	r3, [sp, #28]
 8008a24:	4621      	mov	r1, r4
 8008a26:	3b01      	subs	r3, #1
 8008a28:	4648      	mov	r0, r9
 8008a2a:	9302      	str	r3, [sp, #8]
 8008a2c:	f7ff fa96 	bl	8007f5c <quorem>
 8008a30:	4639      	mov	r1, r7
 8008a32:	9008      	str	r0, [sp, #32]
 8008a34:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8008a38:	4648      	mov	r0, r9
 8008a3a:	f000 ffed 	bl	8009a18 <__mcmp>
 8008a3e:	462a      	mov	r2, r5
 8008a40:	9009      	str	r0, [sp, #36]	@ 0x24
 8008a42:	4621      	mov	r1, r4
 8008a44:	4658      	mov	r0, fp
 8008a46:	f001 f803 	bl	8009a50 <__mdiff>
 8008a4a:	68c2      	ldr	r2, [r0, #12]
 8008a4c:	4606      	mov	r6, r0
 8008a4e:	bb02      	cbnz	r2, 8008a92 <_dtoa_r+0xa22>
 8008a50:	4601      	mov	r1, r0
 8008a52:	4648      	mov	r0, r9
 8008a54:	f000 ffe0 	bl	8009a18 <__mcmp>
 8008a58:	4602      	mov	r2, r0
 8008a5a:	4631      	mov	r1, r6
 8008a5c:	4658      	mov	r0, fp
 8008a5e:	920c      	str	r2, [sp, #48]	@ 0x30
 8008a60:	f000 fd58 	bl	8009514 <_Bfree>
 8008a64:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8008a66:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8008a68:	9e07      	ldr	r6, [sp, #28]
 8008a6a:	ea43 0102 	orr.w	r1, r3, r2
 8008a6e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008a70:	4319      	orrs	r1, r3
 8008a72:	d110      	bne.n	8008a96 <_dtoa_r+0xa26>
 8008a74:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8008a78:	d029      	beq.n	8008ace <_dtoa_r+0xa5e>
 8008a7a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008a7c:	2b00      	cmp	r3, #0
 8008a7e:	dd02      	ble.n	8008a86 <_dtoa_r+0xa16>
 8008a80:	9b08      	ldr	r3, [sp, #32]
 8008a82:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8008a86:	9b02      	ldr	r3, [sp, #8]
 8008a88:	f883 8000 	strb.w	r8, [r3]
 8008a8c:	e63b      	b.n	8008706 <_dtoa_r+0x696>
 8008a8e:	4628      	mov	r0, r5
 8008a90:	e7bb      	b.n	8008a0a <_dtoa_r+0x99a>
 8008a92:	2201      	movs	r2, #1
 8008a94:	e7e1      	b.n	8008a5a <_dtoa_r+0x9ea>
 8008a96:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008a98:	2b00      	cmp	r3, #0
 8008a9a:	db04      	blt.n	8008aa6 <_dtoa_r+0xa36>
 8008a9c:	9920      	ldr	r1, [sp, #128]	@ 0x80
 8008a9e:	430b      	orrs	r3, r1
 8008aa0:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8008aa2:	430b      	orrs	r3, r1
 8008aa4:	d120      	bne.n	8008ae8 <_dtoa_r+0xa78>
 8008aa6:	2a00      	cmp	r2, #0
 8008aa8:	dded      	ble.n	8008a86 <_dtoa_r+0xa16>
 8008aaa:	4649      	mov	r1, r9
 8008aac:	2201      	movs	r2, #1
 8008aae:	4658      	mov	r0, fp
 8008ab0:	f000 ff46 	bl	8009940 <__lshift>
 8008ab4:	4621      	mov	r1, r4
 8008ab6:	4681      	mov	r9, r0
 8008ab8:	f000 ffae 	bl	8009a18 <__mcmp>
 8008abc:	2800      	cmp	r0, #0
 8008abe:	dc03      	bgt.n	8008ac8 <_dtoa_r+0xa58>
 8008ac0:	d1e1      	bne.n	8008a86 <_dtoa_r+0xa16>
 8008ac2:	f018 0f01 	tst.w	r8, #1
 8008ac6:	d0de      	beq.n	8008a86 <_dtoa_r+0xa16>
 8008ac8:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8008acc:	d1d8      	bne.n	8008a80 <_dtoa_r+0xa10>
 8008ace:	2339      	movs	r3, #57	@ 0x39
 8008ad0:	9a02      	ldr	r2, [sp, #8]
 8008ad2:	7013      	strb	r3, [r2, #0]
 8008ad4:	4633      	mov	r3, r6
 8008ad6:	461e      	mov	r6, r3
 8008ad8:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8008adc:	3b01      	subs	r3, #1
 8008ade:	2a39      	cmp	r2, #57	@ 0x39
 8008ae0:	d052      	beq.n	8008b88 <_dtoa_r+0xb18>
 8008ae2:	3201      	adds	r2, #1
 8008ae4:	701a      	strb	r2, [r3, #0]
 8008ae6:	e60e      	b.n	8008706 <_dtoa_r+0x696>
 8008ae8:	2a00      	cmp	r2, #0
 8008aea:	dd07      	ble.n	8008afc <_dtoa_r+0xa8c>
 8008aec:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8008af0:	d0ed      	beq.n	8008ace <_dtoa_r+0xa5e>
 8008af2:	9a02      	ldr	r2, [sp, #8]
 8008af4:	f108 0301 	add.w	r3, r8, #1
 8008af8:	7013      	strb	r3, [r2, #0]
 8008afa:	e604      	b.n	8008706 <_dtoa_r+0x696>
 8008afc:	9b07      	ldr	r3, [sp, #28]
 8008afe:	9a07      	ldr	r2, [sp, #28]
 8008b00:	f803 8c01 	strb.w	r8, [r3, #-1]
 8008b04:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008b06:	4293      	cmp	r3, r2
 8008b08:	d028      	beq.n	8008b5c <_dtoa_r+0xaec>
 8008b0a:	4649      	mov	r1, r9
 8008b0c:	2300      	movs	r3, #0
 8008b0e:	220a      	movs	r2, #10
 8008b10:	4658      	mov	r0, fp
 8008b12:	f000 fd21 	bl	8009558 <__multadd>
 8008b16:	42af      	cmp	r7, r5
 8008b18:	4681      	mov	r9, r0
 8008b1a:	f04f 0300 	mov.w	r3, #0
 8008b1e:	f04f 020a 	mov.w	r2, #10
 8008b22:	4639      	mov	r1, r7
 8008b24:	4658      	mov	r0, fp
 8008b26:	d107      	bne.n	8008b38 <_dtoa_r+0xac8>
 8008b28:	f000 fd16 	bl	8009558 <__multadd>
 8008b2c:	4607      	mov	r7, r0
 8008b2e:	4605      	mov	r5, r0
 8008b30:	9b07      	ldr	r3, [sp, #28]
 8008b32:	3301      	adds	r3, #1
 8008b34:	9307      	str	r3, [sp, #28]
 8008b36:	e774      	b.n	8008a22 <_dtoa_r+0x9b2>
 8008b38:	f000 fd0e 	bl	8009558 <__multadd>
 8008b3c:	4629      	mov	r1, r5
 8008b3e:	4607      	mov	r7, r0
 8008b40:	2300      	movs	r3, #0
 8008b42:	220a      	movs	r2, #10
 8008b44:	4658      	mov	r0, fp
 8008b46:	f000 fd07 	bl	8009558 <__multadd>
 8008b4a:	4605      	mov	r5, r0
 8008b4c:	e7f0      	b.n	8008b30 <_dtoa_r+0xac0>
 8008b4e:	9b08      	ldr	r3, [sp, #32]
 8008b50:	2700      	movs	r7, #0
 8008b52:	2b00      	cmp	r3, #0
 8008b54:	bfcc      	ite	gt
 8008b56:	461e      	movgt	r6, r3
 8008b58:	2601      	movle	r6, #1
 8008b5a:	4456      	add	r6, sl
 8008b5c:	4649      	mov	r1, r9
 8008b5e:	2201      	movs	r2, #1
 8008b60:	4658      	mov	r0, fp
 8008b62:	f000 feed 	bl	8009940 <__lshift>
 8008b66:	4621      	mov	r1, r4
 8008b68:	4681      	mov	r9, r0
 8008b6a:	f000 ff55 	bl	8009a18 <__mcmp>
 8008b6e:	2800      	cmp	r0, #0
 8008b70:	dcb0      	bgt.n	8008ad4 <_dtoa_r+0xa64>
 8008b72:	d102      	bne.n	8008b7a <_dtoa_r+0xb0a>
 8008b74:	f018 0f01 	tst.w	r8, #1
 8008b78:	d1ac      	bne.n	8008ad4 <_dtoa_r+0xa64>
 8008b7a:	4633      	mov	r3, r6
 8008b7c:	461e      	mov	r6, r3
 8008b7e:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008b82:	2a30      	cmp	r2, #48	@ 0x30
 8008b84:	d0fa      	beq.n	8008b7c <_dtoa_r+0xb0c>
 8008b86:	e5be      	b.n	8008706 <_dtoa_r+0x696>
 8008b88:	459a      	cmp	sl, r3
 8008b8a:	d1a4      	bne.n	8008ad6 <_dtoa_r+0xa66>
 8008b8c:	9b04      	ldr	r3, [sp, #16]
 8008b8e:	3301      	adds	r3, #1
 8008b90:	9304      	str	r3, [sp, #16]
 8008b92:	2331      	movs	r3, #49	@ 0x31
 8008b94:	f88a 3000 	strb.w	r3, [sl]
 8008b98:	e5b5      	b.n	8008706 <_dtoa_r+0x696>
 8008b9a:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8008b9c:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 8008bfc <_dtoa_r+0xb8c>
 8008ba0:	b11b      	cbz	r3, 8008baa <_dtoa_r+0xb3a>
 8008ba2:	f10a 0308 	add.w	r3, sl, #8
 8008ba6:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8008ba8:	6013      	str	r3, [r2, #0]
 8008baa:	4650      	mov	r0, sl
 8008bac:	b017      	add	sp, #92	@ 0x5c
 8008bae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008bb2:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8008bb4:	2b01      	cmp	r3, #1
 8008bb6:	f77f ae3d 	ble.w	8008834 <_dtoa_r+0x7c4>
 8008bba:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008bbc:	930a      	str	r3, [sp, #40]	@ 0x28
 8008bbe:	2001      	movs	r0, #1
 8008bc0:	e65b      	b.n	800887a <_dtoa_r+0x80a>
 8008bc2:	9b08      	ldr	r3, [sp, #32]
 8008bc4:	2b00      	cmp	r3, #0
 8008bc6:	f77f aed6 	ble.w	8008976 <_dtoa_r+0x906>
 8008bca:	4656      	mov	r6, sl
 8008bcc:	4621      	mov	r1, r4
 8008bce:	4648      	mov	r0, r9
 8008bd0:	f7ff f9c4 	bl	8007f5c <quorem>
 8008bd4:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8008bd8:	9b08      	ldr	r3, [sp, #32]
 8008bda:	f806 8b01 	strb.w	r8, [r6], #1
 8008bde:	eba6 020a 	sub.w	r2, r6, sl
 8008be2:	4293      	cmp	r3, r2
 8008be4:	ddb3      	ble.n	8008b4e <_dtoa_r+0xade>
 8008be6:	4649      	mov	r1, r9
 8008be8:	2300      	movs	r3, #0
 8008bea:	220a      	movs	r2, #10
 8008bec:	4658      	mov	r0, fp
 8008bee:	f000 fcb3 	bl	8009558 <__multadd>
 8008bf2:	4681      	mov	r9, r0
 8008bf4:	e7ea      	b.n	8008bcc <_dtoa_r+0xb5c>
 8008bf6:	bf00      	nop
 8008bf8:	0800aca8 	.word	0x0800aca8
 8008bfc:	0800ac2c 	.word	0x0800ac2c

08008c00 <_free_r>:
 8008c00:	b538      	push	{r3, r4, r5, lr}
 8008c02:	4605      	mov	r5, r0
 8008c04:	2900      	cmp	r1, #0
 8008c06:	d040      	beq.n	8008c8a <_free_r+0x8a>
 8008c08:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008c0c:	1f0c      	subs	r4, r1, #4
 8008c0e:	2b00      	cmp	r3, #0
 8008c10:	bfb8      	it	lt
 8008c12:	18e4      	addlt	r4, r4, r3
 8008c14:	f000 fc32 	bl	800947c <__malloc_lock>
 8008c18:	4a1c      	ldr	r2, [pc, #112]	@ (8008c8c <_free_r+0x8c>)
 8008c1a:	6813      	ldr	r3, [r2, #0]
 8008c1c:	b933      	cbnz	r3, 8008c2c <_free_r+0x2c>
 8008c1e:	6063      	str	r3, [r4, #4]
 8008c20:	6014      	str	r4, [r2, #0]
 8008c22:	4628      	mov	r0, r5
 8008c24:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008c28:	f000 bc2e 	b.w	8009488 <__malloc_unlock>
 8008c2c:	42a3      	cmp	r3, r4
 8008c2e:	d908      	bls.n	8008c42 <_free_r+0x42>
 8008c30:	6820      	ldr	r0, [r4, #0]
 8008c32:	1821      	adds	r1, r4, r0
 8008c34:	428b      	cmp	r3, r1
 8008c36:	bf01      	itttt	eq
 8008c38:	6819      	ldreq	r1, [r3, #0]
 8008c3a:	685b      	ldreq	r3, [r3, #4]
 8008c3c:	1809      	addeq	r1, r1, r0
 8008c3e:	6021      	streq	r1, [r4, #0]
 8008c40:	e7ed      	b.n	8008c1e <_free_r+0x1e>
 8008c42:	461a      	mov	r2, r3
 8008c44:	685b      	ldr	r3, [r3, #4]
 8008c46:	b10b      	cbz	r3, 8008c4c <_free_r+0x4c>
 8008c48:	42a3      	cmp	r3, r4
 8008c4a:	d9fa      	bls.n	8008c42 <_free_r+0x42>
 8008c4c:	6811      	ldr	r1, [r2, #0]
 8008c4e:	1850      	adds	r0, r2, r1
 8008c50:	42a0      	cmp	r0, r4
 8008c52:	d10b      	bne.n	8008c6c <_free_r+0x6c>
 8008c54:	6820      	ldr	r0, [r4, #0]
 8008c56:	4401      	add	r1, r0
 8008c58:	1850      	adds	r0, r2, r1
 8008c5a:	4283      	cmp	r3, r0
 8008c5c:	6011      	str	r1, [r2, #0]
 8008c5e:	d1e0      	bne.n	8008c22 <_free_r+0x22>
 8008c60:	6818      	ldr	r0, [r3, #0]
 8008c62:	685b      	ldr	r3, [r3, #4]
 8008c64:	4408      	add	r0, r1
 8008c66:	6010      	str	r0, [r2, #0]
 8008c68:	6053      	str	r3, [r2, #4]
 8008c6a:	e7da      	b.n	8008c22 <_free_r+0x22>
 8008c6c:	d902      	bls.n	8008c74 <_free_r+0x74>
 8008c6e:	230c      	movs	r3, #12
 8008c70:	602b      	str	r3, [r5, #0]
 8008c72:	e7d6      	b.n	8008c22 <_free_r+0x22>
 8008c74:	6820      	ldr	r0, [r4, #0]
 8008c76:	1821      	adds	r1, r4, r0
 8008c78:	428b      	cmp	r3, r1
 8008c7a:	bf01      	itttt	eq
 8008c7c:	6819      	ldreq	r1, [r3, #0]
 8008c7e:	685b      	ldreq	r3, [r3, #4]
 8008c80:	1809      	addeq	r1, r1, r0
 8008c82:	6021      	streq	r1, [r4, #0]
 8008c84:	6063      	str	r3, [r4, #4]
 8008c86:	6054      	str	r4, [r2, #4]
 8008c88:	e7cb      	b.n	8008c22 <_free_r+0x22>
 8008c8a:	bd38      	pop	{r3, r4, r5, pc}
 8008c8c:	20001550 	.word	0x20001550

08008c90 <rshift>:
 8008c90:	6903      	ldr	r3, [r0, #16]
 8008c92:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008c96:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8008c9a:	f100 0414 	add.w	r4, r0, #20
 8008c9e:	ea4f 1261 	mov.w	r2, r1, asr #5
 8008ca2:	dd46      	ble.n	8008d32 <rshift+0xa2>
 8008ca4:	f011 011f 	ands.w	r1, r1, #31
 8008ca8:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8008cac:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8008cb0:	d10c      	bne.n	8008ccc <rshift+0x3c>
 8008cb2:	4629      	mov	r1, r5
 8008cb4:	f100 0710 	add.w	r7, r0, #16
 8008cb8:	42b1      	cmp	r1, r6
 8008cba:	d335      	bcc.n	8008d28 <rshift+0x98>
 8008cbc:	1a9b      	subs	r3, r3, r2
 8008cbe:	009b      	lsls	r3, r3, #2
 8008cc0:	1eea      	subs	r2, r5, #3
 8008cc2:	4296      	cmp	r6, r2
 8008cc4:	bf38      	it	cc
 8008cc6:	2300      	movcc	r3, #0
 8008cc8:	4423      	add	r3, r4
 8008cca:	e015      	b.n	8008cf8 <rshift+0x68>
 8008ccc:	46a1      	mov	r9, r4
 8008cce:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8008cd2:	f1c1 0820 	rsb	r8, r1, #32
 8008cd6:	40cf      	lsrs	r7, r1
 8008cd8:	f105 0e04 	add.w	lr, r5, #4
 8008cdc:	4576      	cmp	r6, lr
 8008cde:	46f4      	mov	ip, lr
 8008ce0:	d816      	bhi.n	8008d10 <rshift+0x80>
 8008ce2:	1a9a      	subs	r2, r3, r2
 8008ce4:	0092      	lsls	r2, r2, #2
 8008ce6:	3a04      	subs	r2, #4
 8008ce8:	3501      	adds	r5, #1
 8008cea:	42ae      	cmp	r6, r5
 8008cec:	bf38      	it	cc
 8008cee:	2200      	movcc	r2, #0
 8008cf0:	18a3      	adds	r3, r4, r2
 8008cf2:	50a7      	str	r7, [r4, r2]
 8008cf4:	b107      	cbz	r7, 8008cf8 <rshift+0x68>
 8008cf6:	3304      	adds	r3, #4
 8008cf8:	42a3      	cmp	r3, r4
 8008cfa:	eba3 0204 	sub.w	r2, r3, r4
 8008cfe:	bf08      	it	eq
 8008d00:	2300      	moveq	r3, #0
 8008d02:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8008d06:	6102      	str	r2, [r0, #16]
 8008d08:	bf08      	it	eq
 8008d0a:	6143      	streq	r3, [r0, #20]
 8008d0c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008d10:	f8dc c000 	ldr.w	ip, [ip]
 8008d14:	fa0c fc08 	lsl.w	ip, ip, r8
 8008d18:	ea4c 0707 	orr.w	r7, ip, r7
 8008d1c:	f849 7b04 	str.w	r7, [r9], #4
 8008d20:	f85e 7b04 	ldr.w	r7, [lr], #4
 8008d24:	40cf      	lsrs	r7, r1
 8008d26:	e7d9      	b.n	8008cdc <rshift+0x4c>
 8008d28:	f851 cb04 	ldr.w	ip, [r1], #4
 8008d2c:	f847 cf04 	str.w	ip, [r7, #4]!
 8008d30:	e7c2      	b.n	8008cb8 <rshift+0x28>
 8008d32:	4623      	mov	r3, r4
 8008d34:	e7e0      	b.n	8008cf8 <rshift+0x68>

08008d36 <__hexdig_fun>:
 8008d36:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 8008d3a:	2b09      	cmp	r3, #9
 8008d3c:	d802      	bhi.n	8008d44 <__hexdig_fun+0xe>
 8008d3e:	3820      	subs	r0, #32
 8008d40:	b2c0      	uxtb	r0, r0
 8008d42:	4770      	bx	lr
 8008d44:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 8008d48:	2b05      	cmp	r3, #5
 8008d4a:	d801      	bhi.n	8008d50 <__hexdig_fun+0x1a>
 8008d4c:	3847      	subs	r0, #71	@ 0x47
 8008d4e:	e7f7      	b.n	8008d40 <__hexdig_fun+0xa>
 8008d50:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 8008d54:	2b05      	cmp	r3, #5
 8008d56:	d801      	bhi.n	8008d5c <__hexdig_fun+0x26>
 8008d58:	3827      	subs	r0, #39	@ 0x27
 8008d5a:	e7f1      	b.n	8008d40 <__hexdig_fun+0xa>
 8008d5c:	2000      	movs	r0, #0
 8008d5e:	4770      	bx	lr

08008d60 <__gethex>:
 8008d60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008d64:	468a      	mov	sl, r1
 8008d66:	4690      	mov	r8, r2
 8008d68:	b085      	sub	sp, #20
 8008d6a:	9302      	str	r3, [sp, #8]
 8008d6c:	680b      	ldr	r3, [r1, #0]
 8008d6e:	9001      	str	r0, [sp, #4]
 8008d70:	1c9c      	adds	r4, r3, #2
 8008d72:	46a1      	mov	r9, r4
 8008d74:	f814 0b01 	ldrb.w	r0, [r4], #1
 8008d78:	2830      	cmp	r0, #48	@ 0x30
 8008d7a:	d0fa      	beq.n	8008d72 <__gethex+0x12>
 8008d7c:	eba9 0303 	sub.w	r3, r9, r3
 8008d80:	f1a3 0b02 	sub.w	fp, r3, #2
 8008d84:	f7ff ffd7 	bl	8008d36 <__hexdig_fun>
 8008d88:	4605      	mov	r5, r0
 8008d8a:	2800      	cmp	r0, #0
 8008d8c:	d168      	bne.n	8008e60 <__gethex+0x100>
 8008d8e:	2201      	movs	r2, #1
 8008d90:	4648      	mov	r0, r9
 8008d92:	499f      	ldr	r1, [pc, #636]	@ (8009010 <__gethex+0x2b0>)
 8008d94:	f7ff f835 	bl	8007e02 <strncmp>
 8008d98:	4607      	mov	r7, r0
 8008d9a:	2800      	cmp	r0, #0
 8008d9c:	d167      	bne.n	8008e6e <__gethex+0x10e>
 8008d9e:	f899 0001 	ldrb.w	r0, [r9, #1]
 8008da2:	4626      	mov	r6, r4
 8008da4:	f7ff ffc7 	bl	8008d36 <__hexdig_fun>
 8008da8:	2800      	cmp	r0, #0
 8008daa:	d062      	beq.n	8008e72 <__gethex+0x112>
 8008dac:	4623      	mov	r3, r4
 8008dae:	7818      	ldrb	r0, [r3, #0]
 8008db0:	4699      	mov	r9, r3
 8008db2:	2830      	cmp	r0, #48	@ 0x30
 8008db4:	f103 0301 	add.w	r3, r3, #1
 8008db8:	d0f9      	beq.n	8008dae <__gethex+0x4e>
 8008dba:	f7ff ffbc 	bl	8008d36 <__hexdig_fun>
 8008dbe:	fab0 f580 	clz	r5, r0
 8008dc2:	f04f 0b01 	mov.w	fp, #1
 8008dc6:	096d      	lsrs	r5, r5, #5
 8008dc8:	464a      	mov	r2, r9
 8008dca:	4616      	mov	r6, r2
 8008dcc:	7830      	ldrb	r0, [r6, #0]
 8008dce:	3201      	adds	r2, #1
 8008dd0:	f7ff ffb1 	bl	8008d36 <__hexdig_fun>
 8008dd4:	2800      	cmp	r0, #0
 8008dd6:	d1f8      	bne.n	8008dca <__gethex+0x6a>
 8008dd8:	2201      	movs	r2, #1
 8008dda:	4630      	mov	r0, r6
 8008ddc:	498c      	ldr	r1, [pc, #560]	@ (8009010 <__gethex+0x2b0>)
 8008dde:	f7ff f810 	bl	8007e02 <strncmp>
 8008de2:	2800      	cmp	r0, #0
 8008de4:	d13f      	bne.n	8008e66 <__gethex+0x106>
 8008de6:	b944      	cbnz	r4, 8008dfa <__gethex+0x9a>
 8008de8:	1c74      	adds	r4, r6, #1
 8008dea:	4622      	mov	r2, r4
 8008dec:	4616      	mov	r6, r2
 8008dee:	7830      	ldrb	r0, [r6, #0]
 8008df0:	3201      	adds	r2, #1
 8008df2:	f7ff ffa0 	bl	8008d36 <__hexdig_fun>
 8008df6:	2800      	cmp	r0, #0
 8008df8:	d1f8      	bne.n	8008dec <__gethex+0x8c>
 8008dfa:	1ba4      	subs	r4, r4, r6
 8008dfc:	00a7      	lsls	r7, r4, #2
 8008dfe:	7833      	ldrb	r3, [r6, #0]
 8008e00:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 8008e04:	2b50      	cmp	r3, #80	@ 0x50
 8008e06:	d13e      	bne.n	8008e86 <__gethex+0x126>
 8008e08:	7873      	ldrb	r3, [r6, #1]
 8008e0a:	2b2b      	cmp	r3, #43	@ 0x2b
 8008e0c:	d033      	beq.n	8008e76 <__gethex+0x116>
 8008e0e:	2b2d      	cmp	r3, #45	@ 0x2d
 8008e10:	d034      	beq.n	8008e7c <__gethex+0x11c>
 8008e12:	2400      	movs	r4, #0
 8008e14:	1c71      	adds	r1, r6, #1
 8008e16:	7808      	ldrb	r0, [r1, #0]
 8008e18:	f7ff ff8d 	bl	8008d36 <__hexdig_fun>
 8008e1c:	1e43      	subs	r3, r0, #1
 8008e1e:	b2db      	uxtb	r3, r3
 8008e20:	2b18      	cmp	r3, #24
 8008e22:	d830      	bhi.n	8008e86 <__gethex+0x126>
 8008e24:	f1a0 0210 	sub.w	r2, r0, #16
 8008e28:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8008e2c:	f7ff ff83 	bl	8008d36 <__hexdig_fun>
 8008e30:	f100 3cff 	add.w	ip, r0, #4294967295	@ 0xffffffff
 8008e34:	fa5f fc8c 	uxtb.w	ip, ip
 8008e38:	f1bc 0f18 	cmp.w	ip, #24
 8008e3c:	f04f 030a 	mov.w	r3, #10
 8008e40:	d91e      	bls.n	8008e80 <__gethex+0x120>
 8008e42:	b104      	cbz	r4, 8008e46 <__gethex+0xe6>
 8008e44:	4252      	negs	r2, r2
 8008e46:	4417      	add	r7, r2
 8008e48:	f8ca 1000 	str.w	r1, [sl]
 8008e4c:	b1ed      	cbz	r5, 8008e8a <__gethex+0x12a>
 8008e4e:	f1bb 0f00 	cmp.w	fp, #0
 8008e52:	bf0c      	ite	eq
 8008e54:	2506      	moveq	r5, #6
 8008e56:	2500      	movne	r5, #0
 8008e58:	4628      	mov	r0, r5
 8008e5a:	b005      	add	sp, #20
 8008e5c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008e60:	2500      	movs	r5, #0
 8008e62:	462c      	mov	r4, r5
 8008e64:	e7b0      	b.n	8008dc8 <__gethex+0x68>
 8008e66:	2c00      	cmp	r4, #0
 8008e68:	d1c7      	bne.n	8008dfa <__gethex+0x9a>
 8008e6a:	4627      	mov	r7, r4
 8008e6c:	e7c7      	b.n	8008dfe <__gethex+0x9e>
 8008e6e:	464e      	mov	r6, r9
 8008e70:	462f      	mov	r7, r5
 8008e72:	2501      	movs	r5, #1
 8008e74:	e7c3      	b.n	8008dfe <__gethex+0x9e>
 8008e76:	2400      	movs	r4, #0
 8008e78:	1cb1      	adds	r1, r6, #2
 8008e7a:	e7cc      	b.n	8008e16 <__gethex+0xb6>
 8008e7c:	2401      	movs	r4, #1
 8008e7e:	e7fb      	b.n	8008e78 <__gethex+0x118>
 8008e80:	fb03 0002 	mla	r0, r3, r2, r0
 8008e84:	e7ce      	b.n	8008e24 <__gethex+0xc4>
 8008e86:	4631      	mov	r1, r6
 8008e88:	e7de      	b.n	8008e48 <__gethex+0xe8>
 8008e8a:	4629      	mov	r1, r5
 8008e8c:	eba6 0309 	sub.w	r3, r6, r9
 8008e90:	3b01      	subs	r3, #1
 8008e92:	2b07      	cmp	r3, #7
 8008e94:	dc0a      	bgt.n	8008eac <__gethex+0x14c>
 8008e96:	9801      	ldr	r0, [sp, #4]
 8008e98:	f000 fafc 	bl	8009494 <_Balloc>
 8008e9c:	4604      	mov	r4, r0
 8008e9e:	b940      	cbnz	r0, 8008eb2 <__gethex+0x152>
 8008ea0:	4602      	mov	r2, r0
 8008ea2:	21e4      	movs	r1, #228	@ 0xe4
 8008ea4:	4b5b      	ldr	r3, [pc, #364]	@ (8009014 <__gethex+0x2b4>)
 8008ea6:	485c      	ldr	r0, [pc, #368]	@ (8009018 <__gethex+0x2b8>)
 8008ea8:	f001 fa6a 	bl	800a380 <__assert_func>
 8008eac:	3101      	adds	r1, #1
 8008eae:	105b      	asrs	r3, r3, #1
 8008eb0:	e7ef      	b.n	8008e92 <__gethex+0x132>
 8008eb2:	2300      	movs	r3, #0
 8008eb4:	f100 0a14 	add.w	sl, r0, #20
 8008eb8:	4655      	mov	r5, sl
 8008eba:	469b      	mov	fp, r3
 8008ebc:	45b1      	cmp	r9, r6
 8008ebe:	d337      	bcc.n	8008f30 <__gethex+0x1d0>
 8008ec0:	f845 bb04 	str.w	fp, [r5], #4
 8008ec4:	eba5 050a 	sub.w	r5, r5, sl
 8008ec8:	10ad      	asrs	r5, r5, #2
 8008eca:	6125      	str	r5, [r4, #16]
 8008ecc:	4658      	mov	r0, fp
 8008ece:	f000 fbd3 	bl	8009678 <__hi0bits>
 8008ed2:	016d      	lsls	r5, r5, #5
 8008ed4:	f8d8 6000 	ldr.w	r6, [r8]
 8008ed8:	1a2d      	subs	r5, r5, r0
 8008eda:	42b5      	cmp	r5, r6
 8008edc:	dd54      	ble.n	8008f88 <__gethex+0x228>
 8008ede:	1bad      	subs	r5, r5, r6
 8008ee0:	4629      	mov	r1, r5
 8008ee2:	4620      	mov	r0, r4
 8008ee4:	f000 ff5b 	bl	8009d9e <__any_on>
 8008ee8:	4681      	mov	r9, r0
 8008eea:	b178      	cbz	r0, 8008f0c <__gethex+0x1ac>
 8008eec:	f04f 0901 	mov.w	r9, #1
 8008ef0:	1e6b      	subs	r3, r5, #1
 8008ef2:	1159      	asrs	r1, r3, #5
 8008ef4:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8008ef8:	f003 021f 	and.w	r2, r3, #31
 8008efc:	fa09 f202 	lsl.w	r2, r9, r2
 8008f00:	420a      	tst	r2, r1
 8008f02:	d003      	beq.n	8008f0c <__gethex+0x1ac>
 8008f04:	454b      	cmp	r3, r9
 8008f06:	dc36      	bgt.n	8008f76 <__gethex+0x216>
 8008f08:	f04f 0902 	mov.w	r9, #2
 8008f0c:	4629      	mov	r1, r5
 8008f0e:	4620      	mov	r0, r4
 8008f10:	f7ff febe 	bl	8008c90 <rshift>
 8008f14:	442f      	add	r7, r5
 8008f16:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8008f1a:	42bb      	cmp	r3, r7
 8008f1c:	da42      	bge.n	8008fa4 <__gethex+0x244>
 8008f1e:	4621      	mov	r1, r4
 8008f20:	9801      	ldr	r0, [sp, #4]
 8008f22:	f000 faf7 	bl	8009514 <_Bfree>
 8008f26:	2300      	movs	r3, #0
 8008f28:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8008f2a:	25a3      	movs	r5, #163	@ 0xa3
 8008f2c:	6013      	str	r3, [r2, #0]
 8008f2e:	e793      	b.n	8008e58 <__gethex+0xf8>
 8008f30:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 8008f34:	2a2e      	cmp	r2, #46	@ 0x2e
 8008f36:	d012      	beq.n	8008f5e <__gethex+0x1fe>
 8008f38:	2b20      	cmp	r3, #32
 8008f3a:	d104      	bne.n	8008f46 <__gethex+0x1e6>
 8008f3c:	f845 bb04 	str.w	fp, [r5], #4
 8008f40:	f04f 0b00 	mov.w	fp, #0
 8008f44:	465b      	mov	r3, fp
 8008f46:	7830      	ldrb	r0, [r6, #0]
 8008f48:	9303      	str	r3, [sp, #12]
 8008f4a:	f7ff fef4 	bl	8008d36 <__hexdig_fun>
 8008f4e:	9b03      	ldr	r3, [sp, #12]
 8008f50:	f000 000f 	and.w	r0, r0, #15
 8008f54:	4098      	lsls	r0, r3
 8008f56:	ea4b 0b00 	orr.w	fp, fp, r0
 8008f5a:	3304      	adds	r3, #4
 8008f5c:	e7ae      	b.n	8008ebc <__gethex+0x15c>
 8008f5e:	45b1      	cmp	r9, r6
 8008f60:	d8ea      	bhi.n	8008f38 <__gethex+0x1d8>
 8008f62:	2201      	movs	r2, #1
 8008f64:	4630      	mov	r0, r6
 8008f66:	492a      	ldr	r1, [pc, #168]	@ (8009010 <__gethex+0x2b0>)
 8008f68:	9303      	str	r3, [sp, #12]
 8008f6a:	f7fe ff4a 	bl	8007e02 <strncmp>
 8008f6e:	9b03      	ldr	r3, [sp, #12]
 8008f70:	2800      	cmp	r0, #0
 8008f72:	d1e1      	bne.n	8008f38 <__gethex+0x1d8>
 8008f74:	e7a2      	b.n	8008ebc <__gethex+0x15c>
 8008f76:	4620      	mov	r0, r4
 8008f78:	1ea9      	subs	r1, r5, #2
 8008f7a:	f000 ff10 	bl	8009d9e <__any_on>
 8008f7e:	2800      	cmp	r0, #0
 8008f80:	d0c2      	beq.n	8008f08 <__gethex+0x1a8>
 8008f82:	f04f 0903 	mov.w	r9, #3
 8008f86:	e7c1      	b.n	8008f0c <__gethex+0x1ac>
 8008f88:	da09      	bge.n	8008f9e <__gethex+0x23e>
 8008f8a:	1b75      	subs	r5, r6, r5
 8008f8c:	4621      	mov	r1, r4
 8008f8e:	462a      	mov	r2, r5
 8008f90:	9801      	ldr	r0, [sp, #4]
 8008f92:	f000 fcd5 	bl	8009940 <__lshift>
 8008f96:	4604      	mov	r4, r0
 8008f98:	1b7f      	subs	r7, r7, r5
 8008f9a:	f100 0a14 	add.w	sl, r0, #20
 8008f9e:	f04f 0900 	mov.w	r9, #0
 8008fa2:	e7b8      	b.n	8008f16 <__gethex+0x1b6>
 8008fa4:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8008fa8:	42bd      	cmp	r5, r7
 8008faa:	dd6f      	ble.n	800908c <__gethex+0x32c>
 8008fac:	1bed      	subs	r5, r5, r7
 8008fae:	42ae      	cmp	r6, r5
 8008fb0:	dc34      	bgt.n	800901c <__gethex+0x2bc>
 8008fb2:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8008fb6:	2b02      	cmp	r3, #2
 8008fb8:	d022      	beq.n	8009000 <__gethex+0x2a0>
 8008fba:	2b03      	cmp	r3, #3
 8008fbc:	d024      	beq.n	8009008 <__gethex+0x2a8>
 8008fbe:	2b01      	cmp	r3, #1
 8008fc0:	d115      	bne.n	8008fee <__gethex+0x28e>
 8008fc2:	42ae      	cmp	r6, r5
 8008fc4:	d113      	bne.n	8008fee <__gethex+0x28e>
 8008fc6:	2e01      	cmp	r6, #1
 8008fc8:	d10b      	bne.n	8008fe2 <__gethex+0x282>
 8008fca:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8008fce:	9a02      	ldr	r2, [sp, #8]
 8008fd0:	2562      	movs	r5, #98	@ 0x62
 8008fd2:	6013      	str	r3, [r2, #0]
 8008fd4:	2301      	movs	r3, #1
 8008fd6:	6123      	str	r3, [r4, #16]
 8008fd8:	f8ca 3000 	str.w	r3, [sl]
 8008fdc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008fde:	601c      	str	r4, [r3, #0]
 8008fe0:	e73a      	b.n	8008e58 <__gethex+0xf8>
 8008fe2:	4620      	mov	r0, r4
 8008fe4:	1e71      	subs	r1, r6, #1
 8008fe6:	f000 feda 	bl	8009d9e <__any_on>
 8008fea:	2800      	cmp	r0, #0
 8008fec:	d1ed      	bne.n	8008fca <__gethex+0x26a>
 8008fee:	4621      	mov	r1, r4
 8008ff0:	9801      	ldr	r0, [sp, #4]
 8008ff2:	f000 fa8f 	bl	8009514 <_Bfree>
 8008ff6:	2300      	movs	r3, #0
 8008ff8:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8008ffa:	2550      	movs	r5, #80	@ 0x50
 8008ffc:	6013      	str	r3, [r2, #0]
 8008ffe:	e72b      	b.n	8008e58 <__gethex+0xf8>
 8009000:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009002:	2b00      	cmp	r3, #0
 8009004:	d1f3      	bne.n	8008fee <__gethex+0x28e>
 8009006:	e7e0      	b.n	8008fca <__gethex+0x26a>
 8009008:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800900a:	2b00      	cmp	r3, #0
 800900c:	d1dd      	bne.n	8008fca <__gethex+0x26a>
 800900e:	e7ee      	b.n	8008fee <__gethex+0x28e>
 8009010:	0800ab98 	.word	0x0800ab98
 8009014:	0800aca8 	.word	0x0800aca8
 8009018:	0800acb9 	.word	0x0800acb9
 800901c:	1e6f      	subs	r7, r5, #1
 800901e:	f1b9 0f00 	cmp.w	r9, #0
 8009022:	d130      	bne.n	8009086 <__gethex+0x326>
 8009024:	b127      	cbz	r7, 8009030 <__gethex+0x2d0>
 8009026:	4639      	mov	r1, r7
 8009028:	4620      	mov	r0, r4
 800902a:	f000 feb8 	bl	8009d9e <__any_on>
 800902e:	4681      	mov	r9, r0
 8009030:	2301      	movs	r3, #1
 8009032:	4629      	mov	r1, r5
 8009034:	1b76      	subs	r6, r6, r5
 8009036:	2502      	movs	r5, #2
 8009038:	117a      	asrs	r2, r7, #5
 800903a:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800903e:	f007 071f 	and.w	r7, r7, #31
 8009042:	40bb      	lsls	r3, r7
 8009044:	4213      	tst	r3, r2
 8009046:	4620      	mov	r0, r4
 8009048:	bf18      	it	ne
 800904a:	f049 0902 	orrne.w	r9, r9, #2
 800904e:	f7ff fe1f 	bl	8008c90 <rshift>
 8009052:	f8d8 7004 	ldr.w	r7, [r8, #4]
 8009056:	f1b9 0f00 	cmp.w	r9, #0
 800905a:	d047      	beq.n	80090ec <__gethex+0x38c>
 800905c:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8009060:	2b02      	cmp	r3, #2
 8009062:	d015      	beq.n	8009090 <__gethex+0x330>
 8009064:	2b03      	cmp	r3, #3
 8009066:	d017      	beq.n	8009098 <__gethex+0x338>
 8009068:	2b01      	cmp	r3, #1
 800906a:	d109      	bne.n	8009080 <__gethex+0x320>
 800906c:	f019 0f02 	tst.w	r9, #2
 8009070:	d006      	beq.n	8009080 <__gethex+0x320>
 8009072:	f8da 3000 	ldr.w	r3, [sl]
 8009076:	ea49 0903 	orr.w	r9, r9, r3
 800907a:	f019 0f01 	tst.w	r9, #1
 800907e:	d10e      	bne.n	800909e <__gethex+0x33e>
 8009080:	f045 0510 	orr.w	r5, r5, #16
 8009084:	e032      	b.n	80090ec <__gethex+0x38c>
 8009086:	f04f 0901 	mov.w	r9, #1
 800908a:	e7d1      	b.n	8009030 <__gethex+0x2d0>
 800908c:	2501      	movs	r5, #1
 800908e:	e7e2      	b.n	8009056 <__gethex+0x2f6>
 8009090:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009092:	f1c3 0301 	rsb	r3, r3, #1
 8009096:	930f      	str	r3, [sp, #60]	@ 0x3c
 8009098:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800909a:	2b00      	cmp	r3, #0
 800909c:	d0f0      	beq.n	8009080 <__gethex+0x320>
 800909e:	f04f 0c00 	mov.w	ip, #0
 80090a2:	f8d4 b010 	ldr.w	fp, [r4, #16]
 80090a6:	f104 0314 	add.w	r3, r4, #20
 80090aa:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 80090ae:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 80090b2:	4618      	mov	r0, r3
 80090b4:	f853 2b04 	ldr.w	r2, [r3], #4
 80090b8:	f1b2 3fff 	cmp.w	r2, #4294967295	@ 0xffffffff
 80090bc:	d01b      	beq.n	80090f6 <__gethex+0x396>
 80090be:	3201      	adds	r2, #1
 80090c0:	6002      	str	r2, [r0, #0]
 80090c2:	2d02      	cmp	r5, #2
 80090c4:	f104 0314 	add.w	r3, r4, #20
 80090c8:	d13c      	bne.n	8009144 <__gethex+0x3e4>
 80090ca:	f8d8 2000 	ldr.w	r2, [r8]
 80090ce:	3a01      	subs	r2, #1
 80090d0:	42b2      	cmp	r2, r6
 80090d2:	d109      	bne.n	80090e8 <__gethex+0x388>
 80090d4:	2201      	movs	r2, #1
 80090d6:	1171      	asrs	r1, r6, #5
 80090d8:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80090dc:	f006 061f 	and.w	r6, r6, #31
 80090e0:	fa02 f606 	lsl.w	r6, r2, r6
 80090e4:	421e      	tst	r6, r3
 80090e6:	d13a      	bne.n	800915e <__gethex+0x3fe>
 80090e8:	f045 0520 	orr.w	r5, r5, #32
 80090ec:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80090ee:	601c      	str	r4, [r3, #0]
 80090f0:	9b02      	ldr	r3, [sp, #8]
 80090f2:	601f      	str	r7, [r3, #0]
 80090f4:	e6b0      	b.n	8008e58 <__gethex+0xf8>
 80090f6:	4299      	cmp	r1, r3
 80090f8:	f843 cc04 	str.w	ip, [r3, #-4]
 80090fc:	d8d9      	bhi.n	80090b2 <__gethex+0x352>
 80090fe:	68a3      	ldr	r3, [r4, #8]
 8009100:	459b      	cmp	fp, r3
 8009102:	db17      	blt.n	8009134 <__gethex+0x3d4>
 8009104:	6861      	ldr	r1, [r4, #4]
 8009106:	9801      	ldr	r0, [sp, #4]
 8009108:	3101      	adds	r1, #1
 800910a:	f000 f9c3 	bl	8009494 <_Balloc>
 800910e:	4681      	mov	r9, r0
 8009110:	b918      	cbnz	r0, 800911a <__gethex+0x3ba>
 8009112:	4602      	mov	r2, r0
 8009114:	2184      	movs	r1, #132	@ 0x84
 8009116:	4b19      	ldr	r3, [pc, #100]	@ (800917c <__gethex+0x41c>)
 8009118:	e6c5      	b.n	8008ea6 <__gethex+0x146>
 800911a:	6922      	ldr	r2, [r4, #16]
 800911c:	f104 010c 	add.w	r1, r4, #12
 8009120:	3202      	adds	r2, #2
 8009122:	0092      	lsls	r2, r2, #2
 8009124:	300c      	adds	r0, #12
 8009126:	f7fe ff04 	bl	8007f32 <memcpy>
 800912a:	4621      	mov	r1, r4
 800912c:	9801      	ldr	r0, [sp, #4]
 800912e:	f000 f9f1 	bl	8009514 <_Bfree>
 8009132:	464c      	mov	r4, r9
 8009134:	6923      	ldr	r3, [r4, #16]
 8009136:	1c5a      	adds	r2, r3, #1
 8009138:	6122      	str	r2, [r4, #16]
 800913a:	2201      	movs	r2, #1
 800913c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8009140:	615a      	str	r2, [r3, #20]
 8009142:	e7be      	b.n	80090c2 <__gethex+0x362>
 8009144:	6922      	ldr	r2, [r4, #16]
 8009146:	455a      	cmp	r2, fp
 8009148:	dd0b      	ble.n	8009162 <__gethex+0x402>
 800914a:	2101      	movs	r1, #1
 800914c:	4620      	mov	r0, r4
 800914e:	f7ff fd9f 	bl	8008c90 <rshift>
 8009152:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8009156:	3701      	adds	r7, #1
 8009158:	42bb      	cmp	r3, r7
 800915a:	f6ff aee0 	blt.w	8008f1e <__gethex+0x1be>
 800915e:	2501      	movs	r5, #1
 8009160:	e7c2      	b.n	80090e8 <__gethex+0x388>
 8009162:	f016 061f 	ands.w	r6, r6, #31
 8009166:	d0fa      	beq.n	800915e <__gethex+0x3fe>
 8009168:	4453      	add	r3, sl
 800916a:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800916e:	f000 fa83 	bl	8009678 <__hi0bits>
 8009172:	f1c6 0620 	rsb	r6, r6, #32
 8009176:	42b0      	cmp	r0, r6
 8009178:	dbe7      	blt.n	800914a <__gethex+0x3ea>
 800917a:	e7f0      	b.n	800915e <__gethex+0x3fe>
 800917c:	0800aca8 	.word	0x0800aca8

08009180 <L_shift>:
 8009180:	f1c2 0208 	rsb	r2, r2, #8
 8009184:	0092      	lsls	r2, r2, #2
 8009186:	b570      	push	{r4, r5, r6, lr}
 8009188:	f1c2 0620 	rsb	r6, r2, #32
 800918c:	6843      	ldr	r3, [r0, #4]
 800918e:	6804      	ldr	r4, [r0, #0]
 8009190:	fa03 f506 	lsl.w	r5, r3, r6
 8009194:	432c      	orrs	r4, r5
 8009196:	40d3      	lsrs	r3, r2
 8009198:	6004      	str	r4, [r0, #0]
 800919a:	f840 3f04 	str.w	r3, [r0, #4]!
 800919e:	4288      	cmp	r0, r1
 80091a0:	d3f4      	bcc.n	800918c <L_shift+0xc>
 80091a2:	bd70      	pop	{r4, r5, r6, pc}

080091a4 <__match>:
 80091a4:	b530      	push	{r4, r5, lr}
 80091a6:	6803      	ldr	r3, [r0, #0]
 80091a8:	3301      	adds	r3, #1
 80091aa:	f811 4b01 	ldrb.w	r4, [r1], #1
 80091ae:	b914      	cbnz	r4, 80091b6 <__match+0x12>
 80091b0:	6003      	str	r3, [r0, #0]
 80091b2:	2001      	movs	r0, #1
 80091b4:	bd30      	pop	{r4, r5, pc}
 80091b6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80091ba:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 80091be:	2d19      	cmp	r5, #25
 80091c0:	bf98      	it	ls
 80091c2:	3220      	addls	r2, #32
 80091c4:	42a2      	cmp	r2, r4
 80091c6:	d0f0      	beq.n	80091aa <__match+0x6>
 80091c8:	2000      	movs	r0, #0
 80091ca:	e7f3      	b.n	80091b4 <__match+0x10>

080091cc <__hexnan>:
 80091cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80091d0:	2500      	movs	r5, #0
 80091d2:	680b      	ldr	r3, [r1, #0]
 80091d4:	4682      	mov	sl, r0
 80091d6:	115e      	asrs	r6, r3, #5
 80091d8:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 80091dc:	f013 031f 	ands.w	r3, r3, #31
 80091e0:	bf18      	it	ne
 80091e2:	3604      	addne	r6, #4
 80091e4:	1f37      	subs	r7, r6, #4
 80091e6:	4690      	mov	r8, r2
 80091e8:	46b9      	mov	r9, r7
 80091ea:	463c      	mov	r4, r7
 80091ec:	46ab      	mov	fp, r5
 80091ee:	b087      	sub	sp, #28
 80091f0:	6801      	ldr	r1, [r0, #0]
 80091f2:	9301      	str	r3, [sp, #4]
 80091f4:	f846 5c04 	str.w	r5, [r6, #-4]
 80091f8:	9502      	str	r5, [sp, #8]
 80091fa:	784a      	ldrb	r2, [r1, #1]
 80091fc:	1c4b      	adds	r3, r1, #1
 80091fe:	9303      	str	r3, [sp, #12]
 8009200:	b342      	cbz	r2, 8009254 <__hexnan+0x88>
 8009202:	4610      	mov	r0, r2
 8009204:	9105      	str	r1, [sp, #20]
 8009206:	9204      	str	r2, [sp, #16]
 8009208:	f7ff fd95 	bl	8008d36 <__hexdig_fun>
 800920c:	2800      	cmp	r0, #0
 800920e:	d151      	bne.n	80092b4 <__hexnan+0xe8>
 8009210:	9a04      	ldr	r2, [sp, #16]
 8009212:	9905      	ldr	r1, [sp, #20]
 8009214:	2a20      	cmp	r2, #32
 8009216:	d818      	bhi.n	800924a <__hexnan+0x7e>
 8009218:	9b02      	ldr	r3, [sp, #8]
 800921a:	459b      	cmp	fp, r3
 800921c:	dd13      	ble.n	8009246 <__hexnan+0x7a>
 800921e:	454c      	cmp	r4, r9
 8009220:	d206      	bcs.n	8009230 <__hexnan+0x64>
 8009222:	2d07      	cmp	r5, #7
 8009224:	dc04      	bgt.n	8009230 <__hexnan+0x64>
 8009226:	462a      	mov	r2, r5
 8009228:	4649      	mov	r1, r9
 800922a:	4620      	mov	r0, r4
 800922c:	f7ff ffa8 	bl	8009180 <L_shift>
 8009230:	4544      	cmp	r4, r8
 8009232:	d952      	bls.n	80092da <__hexnan+0x10e>
 8009234:	2300      	movs	r3, #0
 8009236:	f1a4 0904 	sub.w	r9, r4, #4
 800923a:	f844 3c04 	str.w	r3, [r4, #-4]
 800923e:	461d      	mov	r5, r3
 8009240:	464c      	mov	r4, r9
 8009242:	f8cd b008 	str.w	fp, [sp, #8]
 8009246:	9903      	ldr	r1, [sp, #12]
 8009248:	e7d7      	b.n	80091fa <__hexnan+0x2e>
 800924a:	2a29      	cmp	r2, #41	@ 0x29
 800924c:	d157      	bne.n	80092fe <__hexnan+0x132>
 800924e:	3102      	adds	r1, #2
 8009250:	f8ca 1000 	str.w	r1, [sl]
 8009254:	f1bb 0f00 	cmp.w	fp, #0
 8009258:	d051      	beq.n	80092fe <__hexnan+0x132>
 800925a:	454c      	cmp	r4, r9
 800925c:	d206      	bcs.n	800926c <__hexnan+0xa0>
 800925e:	2d07      	cmp	r5, #7
 8009260:	dc04      	bgt.n	800926c <__hexnan+0xa0>
 8009262:	462a      	mov	r2, r5
 8009264:	4649      	mov	r1, r9
 8009266:	4620      	mov	r0, r4
 8009268:	f7ff ff8a 	bl	8009180 <L_shift>
 800926c:	4544      	cmp	r4, r8
 800926e:	d936      	bls.n	80092de <__hexnan+0x112>
 8009270:	4623      	mov	r3, r4
 8009272:	f1a8 0204 	sub.w	r2, r8, #4
 8009276:	f853 1b04 	ldr.w	r1, [r3], #4
 800927a:	429f      	cmp	r7, r3
 800927c:	f842 1f04 	str.w	r1, [r2, #4]!
 8009280:	d2f9      	bcs.n	8009276 <__hexnan+0xaa>
 8009282:	1b3b      	subs	r3, r7, r4
 8009284:	f023 0303 	bic.w	r3, r3, #3
 8009288:	3304      	adds	r3, #4
 800928a:	3401      	adds	r4, #1
 800928c:	3e03      	subs	r6, #3
 800928e:	42b4      	cmp	r4, r6
 8009290:	bf88      	it	hi
 8009292:	2304      	movhi	r3, #4
 8009294:	2200      	movs	r2, #0
 8009296:	4443      	add	r3, r8
 8009298:	f843 2b04 	str.w	r2, [r3], #4
 800929c:	429f      	cmp	r7, r3
 800929e:	d2fb      	bcs.n	8009298 <__hexnan+0xcc>
 80092a0:	683b      	ldr	r3, [r7, #0]
 80092a2:	b91b      	cbnz	r3, 80092ac <__hexnan+0xe0>
 80092a4:	4547      	cmp	r7, r8
 80092a6:	d128      	bne.n	80092fa <__hexnan+0x12e>
 80092a8:	2301      	movs	r3, #1
 80092aa:	603b      	str	r3, [r7, #0]
 80092ac:	2005      	movs	r0, #5
 80092ae:	b007      	add	sp, #28
 80092b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80092b4:	3501      	adds	r5, #1
 80092b6:	2d08      	cmp	r5, #8
 80092b8:	f10b 0b01 	add.w	fp, fp, #1
 80092bc:	dd06      	ble.n	80092cc <__hexnan+0x100>
 80092be:	4544      	cmp	r4, r8
 80092c0:	d9c1      	bls.n	8009246 <__hexnan+0x7a>
 80092c2:	2300      	movs	r3, #0
 80092c4:	2501      	movs	r5, #1
 80092c6:	f844 3c04 	str.w	r3, [r4, #-4]
 80092ca:	3c04      	subs	r4, #4
 80092cc:	6822      	ldr	r2, [r4, #0]
 80092ce:	f000 000f 	and.w	r0, r0, #15
 80092d2:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 80092d6:	6020      	str	r0, [r4, #0]
 80092d8:	e7b5      	b.n	8009246 <__hexnan+0x7a>
 80092da:	2508      	movs	r5, #8
 80092dc:	e7b3      	b.n	8009246 <__hexnan+0x7a>
 80092de:	9b01      	ldr	r3, [sp, #4]
 80092e0:	2b00      	cmp	r3, #0
 80092e2:	d0dd      	beq.n	80092a0 <__hexnan+0xd4>
 80092e4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80092e8:	f1c3 0320 	rsb	r3, r3, #32
 80092ec:	40da      	lsrs	r2, r3
 80092ee:	f856 3c04 	ldr.w	r3, [r6, #-4]
 80092f2:	4013      	ands	r3, r2
 80092f4:	f846 3c04 	str.w	r3, [r6, #-4]
 80092f8:	e7d2      	b.n	80092a0 <__hexnan+0xd4>
 80092fa:	3f04      	subs	r7, #4
 80092fc:	e7d0      	b.n	80092a0 <__hexnan+0xd4>
 80092fe:	2004      	movs	r0, #4
 8009300:	e7d5      	b.n	80092ae <__hexnan+0xe2>
	...

08009304 <malloc>:
 8009304:	4b02      	ldr	r3, [pc, #8]	@ (8009310 <malloc+0xc>)
 8009306:	4601      	mov	r1, r0
 8009308:	6818      	ldr	r0, [r3, #0]
 800930a:	f000 b825 	b.w	8009358 <_malloc_r>
 800930e:	bf00      	nop
 8009310:	200002f4 	.word	0x200002f4

08009314 <sbrk_aligned>:
 8009314:	b570      	push	{r4, r5, r6, lr}
 8009316:	4e0f      	ldr	r6, [pc, #60]	@ (8009354 <sbrk_aligned+0x40>)
 8009318:	460c      	mov	r4, r1
 800931a:	6831      	ldr	r1, [r6, #0]
 800931c:	4605      	mov	r5, r0
 800931e:	b911      	cbnz	r1, 8009326 <sbrk_aligned+0x12>
 8009320:	f001 f81e 	bl	800a360 <_sbrk_r>
 8009324:	6030      	str	r0, [r6, #0]
 8009326:	4621      	mov	r1, r4
 8009328:	4628      	mov	r0, r5
 800932a:	f001 f819 	bl	800a360 <_sbrk_r>
 800932e:	1c43      	adds	r3, r0, #1
 8009330:	d103      	bne.n	800933a <sbrk_aligned+0x26>
 8009332:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8009336:	4620      	mov	r0, r4
 8009338:	bd70      	pop	{r4, r5, r6, pc}
 800933a:	1cc4      	adds	r4, r0, #3
 800933c:	f024 0403 	bic.w	r4, r4, #3
 8009340:	42a0      	cmp	r0, r4
 8009342:	d0f8      	beq.n	8009336 <sbrk_aligned+0x22>
 8009344:	1a21      	subs	r1, r4, r0
 8009346:	4628      	mov	r0, r5
 8009348:	f001 f80a 	bl	800a360 <_sbrk_r>
 800934c:	3001      	adds	r0, #1
 800934e:	d1f2      	bne.n	8009336 <sbrk_aligned+0x22>
 8009350:	e7ef      	b.n	8009332 <sbrk_aligned+0x1e>
 8009352:	bf00      	nop
 8009354:	2000154c 	.word	0x2000154c

08009358 <_malloc_r>:
 8009358:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800935c:	1ccd      	adds	r5, r1, #3
 800935e:	f025 0503 	bic.w	r5, r5, #3
 8009362:	3508      	adds	r5, #8
 8009364:	2d0c      	cmp	r5, #12
 8009366:	bf38      	it	cc
 8009368:	250c      	movcc	r5, #12
 800936a:	2d00      	cmp	r5, #0
 800936c:	4606      	mov	r6, r0
 800936e:	db01      	blt.n	8009374 <_malloc_r+0x1c>
 8009370:	42a9      	cmp	r1, r5
 8009372:	d904      	bls.n	800937e <_malloc_r+0x26>
 8009374:	230c      	movs	r3, #12
 8009376:	6033      	str	r3, [r6, #0]
 8009378:	2000      	movs	r0, #0
 800937a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800937e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8009454 <_malloc_r+0xfc>
 8009382:	f000 f87b 	bl	800947c <__malloc_lock>
 8009386:	f8d8 3000 	ldr.w	r3, [r8]
 800938a:	461c      	mov	r4, r3
 800938c:	bb44      	cbnz	r4, 80093e0 <_malloc_r+0x88>
 800938e:	4629      	mov	r1, r5
 8009390:	4630      	mov	r0, r6
 8009392:	f7ff ffbf 	bl	8009314 <sbrk_aligned>
 8009396:	1c43      	adds	r3, r0, #1
 8009398:	4604      	mov	r4, r0
 800939a:	d158      	bne.n	800944e <_malloc_r+0xf6>
 800939c:	f8d8 4000 	ldr.w	r4, [r8]
 80093a0:	4627      	mov	r7, r4
 80093a2:	2f00      	cmp	r7, #0
 80093a4:	d143      	bne.n	800942e <_malloc_r+0xd6>
 80093a6:	2c00      	cmp	r4, #0
 80093a8:	d04b      	beq.n	8009442 <_malloc_r+0xea>
 80093aa:	6823      	ldr	r3, [r4, #0]
 80093ac:	4639      	mov	r1, r7
 80093ae:	4630      	mov	r0, r6
 80093b0:	eb04 0903 	add.w	r9, r4, r3
 80093b4:	f000 ffd4 	bl	800a360 <_sbrk_r>
 80093b8:	4581      	cmp	r9, r0
 80093ba:	d142      	bne.n	8009442 <_malloc_r+0xea>
 80093bc:	6821      	ldr	r1, [r4, #0]
 80093be:	4630      	mov	r0, r6
 80093c0:	1a6d      	subs	r5, r5, r1
 80093c2:	4629      	mov	r1, r5
 80093c4:	f7ff ffa6 	bl	8009314 <sbrk_aligned>
 80093c8:	3001      	adds	r0, #1
 80093ca:	d03a      	beq.n	8009442 <_malloc_r+0xea>
 80093cc:	6823      	ldr	r3, [r4, #0]
 80093ce:	442b      	add	r3, r5
 80093d0:	6023      	str	r3, [r4, #0]
 80093d2:	f8d8 3000 	ldr.w	r3, [r8]
 80093d6:	685a      	ldr	r2, [r3, #4]
 80093d8:	bb62      	cbnz	r2, 8009434 <_malloc_r+0xdc>
 80093da:	f8c8 7000 	str.w	r7, [r8]
 80093de:	e00f      	b.n	8009400 <_malloc_r+0xa8>
 80093e0:	6822      	ldr	r2, [r4, #0]
 80093e2:	1b52      	subs	r2, r2, r5
 80093e4:	d420      	bmi.n	8009428 <_malloc_r+0xd0>
 80093e6:	2a0b      	cmp	r2, #11
 80093e8:	d917      	bls.n	800941a <_malloc_r+0xc2>
 80093ea:	1961      	adds	r1, r4, r5
 80093ec:	42a3      	cmp	r3, r4
 80093ee:	6025      	str	r5, [r4, #0]
 80093f0:	bf18      	it	ne
 80093f2:	6059      	strne	r1, [r3, #4]
 80093f4:	6863      	ldr	r3, [r4, #4]
 80093f6:	bf08      	it	eq
 80093f8:	f8c8 1000 	streq.w	r1, [r8]
 80093fc:	5162      	str	r2, [r4, r5]
 80093fe:	604b      	str	r3, [r1, #4]
 8009400:	4630      	mov	r0, r6
 8009402:	f000 f841 	bl	8009488 <__malloc_unlock>
 8009406:	f104 000b 	add.w	r0, r4, #11
 800940a:	1d23      	adds	r3, r4, #4
 800940c:	f020 0007 	bic.w	r0, r0, #7
 8009410:	1ac2      	subs	r2, r0, r3
 8009412:	bf1c      	itt	ne
 8009414:	1a1b      	subne	r3, r3, r0
 8009416:	50a3      	strne	r3, [r4, r2]
 8009418:	e7af      	b.n	800937a <_malloc_r+0x22>
 800941a:	6862      	ldr	r2, [r4, #4]
 800941c:	42a3      	cmp	r3, r4
 800941e:	bf0c      	ite	eq
 8009420:	f8c8 2000 	streq.w	r2, [r8]
 8009424:	605a      	strne	r2, [r3, #4]
 8009426:	e7eb      	b.n	8009400 <_malloc_r+0xa8>
 8009428:	4623      	mov	r3, r4
 800942a:	6864      	ldr	r4, [r4, #4]
 800942c:	e7ae      	b.n	800938c <_malloc_r+0x34>
 800942e:	463c      	mov	r4, r7
 8009430:	687f      	ldr	r7, [r7, #4]
 8009432:	e7b6      	b.n	80093a2 <_malloc_r+0x4a>
 8009434:	461a      	mov	r2, r3
 8009436:	685b      	ldr	r3, [r3, #4]
 8009438:	42a3      	cmp	r3, r4
 800943a:	d1fb      	bne.n	8009434 <_malloc_r+0xdc>
 800943c:	2300      	movs	r3, #0
 800943e:	6053      	str	r3, [r2, #4]
 8009440:	e7de      	b.n	8009400 <_malloc_r+0xa8>
 8009442:	230c      	movs	r3, #12
 8009444:	4630      	mov	r0, r6
 8009446:	6033      	str	r3, [r6, #0]
 8009448:	f000 f81e 	bl	8009488 <__malloc_unlock>
 800944c:	e794      	b.n	8009378 <_malloc_r+0x20>
 800944e:	6005      	str	r5, [r0, #0]
 8009450:	e7d6      	b.n	8009400 <_malloc_r+0xa8>
 8009452:	bf00      	nop
 8009454:	20001550 	.word	0x20001550

08009458 <__ascii_mbtowc>:
 8009458:	b082      	sub	sp, #8
 800945a:	b901      	cbnz	r1, 800945e <__ascii_mbtowc+0x6>
 800945c:	a901      	add	r1, sp, #4
 800945e:	b142      	cbz	r2, 8009472 <__ascii_mbtowc+0x1a>
 8009460:	b14b      	cbz	r3, 8009476 <__ascii_mbtowc+0x1e>
 8009462:	7813      	ldrb	r3, [r2, #0]
 8009464:	600b      	str	r3, [r1, #0]
 8009466:	7812      	ldrb	r2, [r2, #0]
 8009468:	1e10      	subs	r0, r2, #0
 800946a:	bf18      	it	ne
 800946c:	2001      	movne	r0, #1
 800946e:	b002      	add	sp, #8
 8009470:	4770      	bx	lr
 8009472:	4610      	mov	r0, r2
 8009474:	e7fb      	b.n	800946e <__ascii_mbtowc+0x16>
 8009476:	f06f 0001 	mvn.w	r0, #1
 800947a:	e7f8      	b.n	800946e <__ascii_mbtowc+0x16>

0800947c <__malloc_lock>:
 800947c:	4801      	ldr	r0, [pc, #4]	@ (8009484 <__malloc_lock+0x8>)
 800947e:	f7fe bd48 	b.w	8007f12 <__retarget_lock_acquire_recursive>
 8009482:	bf00      	nop
 8009484:	20001548 	.word	0x20001548

08009488 <__malloc_unlock>:
 8009488:	4801      	ldr	r0, [pc, #4]	@ (8009490 <__malloc_unlock+0x8>)
 800948a:	f7fe bd43 	b.w	8007f14 <__retarget_lock_release_recursive>
 800948e:	bf00      	nop
 8009490:	20001548 	.word	0x20001548

08009494 <_Balloc>:
 8009494:	b570      	push	{r4, r5, r6, lr}
 8009496:	69c6      	ldr	r6, [r0, #28]
 8009498:	4604      	mov	r4, r0
 800949a:	460d      	mov	r5, r1
 800949c:	b976      	cbnz	r6, 80094bc <_Balloc+0x28>
 800949e:	2010      	movs	r0, #16
 80094a0:	f7ff ff30 	bl	8009304 <malloc>
 80094a4:	4602      	mov	r2, r0
 80094a6:	61e0      	str	r0, [r4, #28]
 80094a8:	b920      	cbnz	r0, 80094b4 <_Balloc+0x20>
 80094aa:	216b      	movs	r1, #107	@ 0x6b
 80094ac:	4b17      	ldr	r3, [pc, #92]	@ (800950c <_Balloc+0x78>)
 80094ae:	4818      	ldr	r0, [pc, #96]	@ (8009510 <_Balloc+0x7c>)
 80094b0:	f000 ff66 	bl	800a380 <__assert_func>
 80094b4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80094b8:	6006      	str	r6, [r0, #0]
 80094ba:	60c6      	str	r6, [r0, #12]
 80094bc:	69e6      	ldr	r6, [r4, #28]
 80094be:	68f3      	ldr	r3, [r6, #12]
 80094c0:	b183      	cbz	r3, 80094e4 <_Balloc+0x50>
 80094c2:	69e3      	ldr	r3, [r4, #28]
 80094c4:	68db      	ldr	r3, [r3, #12]
 80094c6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80094ca:	b9b8      	cbnz	r0, 80094fc <_Balloc+0x68>
 80094cc:	2101      	movs	r1, #1
 80094ce:	fa01 f605 	lsl.w	r6, r1, r5
 80094d2:	1d72      	adds	r2, r6, #5
 80094d4:	4620      	mov	r0, r4
 80094d6:	0092      	lsls	r2, r2, #2
 80094d8:	f000 ff70 	bl	800a3bc <_calloc_r>
 80094dc:	b160      	cbz	r0, 80094f8 <_Balloc+0x64>
 80094de:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80094e2:	e00e      	b.n	8009502 <_Balloc+0x6e>
 80094e4:	2221      	movs	r2, #33	@ 0x21
 80094e6:	2104      	movs	r1, #4
 80094e8:	4620      	mov	r0, r4
 80094ea:	f000 ff67 	bl	800a3bc <_calloc_r>
 80094ee:	69e3      	ldr	r3, [r4, #28]
 80094f0:	60f0      	str	r0, [r6, #12]
 80094f2:	68db      	ldr	r3, [r3, #12]
 80094f4:	2b00      	cmp	r3, #0
 80094f6:	d1e4      	bne.n	80094c2 <_Balloc+0x2e>
 80094f8:	2000      	movs	r0, #0
 80094fa:	bd70      	pop	{r4, r5, r6, pc}
 80094fc:	6802      	ldr	r2, [r0, #0]
 80094fe:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8009502:	2300      	movs	r3, #0
 8009504:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8009508:	e7f7      	b.n	80094fa <_Balloc+0x66>
 800950a:	bf00      	nop
 800950c:	0800ac39 	.word	0x0800ac39
 8009510:	0800ad19 	.word	0x0800ad19

08009514 <_Bfree>:
 8009514:	b570      	push	{r4, r5, r6, lr}
 8009516:	69c6      	ldr	r6, [r0, #28]
 8009518:	4605      	mov	r5, r0
 800951a:	460c      	mov	r4, r1
 800951c:	b976      	cbnz	r6, 800953c <_Bfree+0x28>
 800951e:	2010      	movs	r0, #16
 8009520:	f7ff fef0 	bl	8009304 <malloc>
 8009524:	4602      	mov	r2, r0
 8009526:	61e8      	str	r0, [r5, #28]
 8009528:	b920      	cbnz	r0, 8009534 <_Bfree+0x20>
 800952a:	218f      	movs	r1, #143	@ 0x8f
 800952c:	4b08      	ldr	r3, [pc, #32]	@ (8009550 <_Bfree+0x3c>)
 800952e:	4809      	ldr	r0, [pc, #36]	@ (8009554 <_Bfree+0x40>)
 8009530:	f000 ff26 	bl	800a380 <__assert_func>
 8009534:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009538:	6006      	str	r6, [r0, #0]
 800953a:	60c6      	str	r6, [r0, #12]
 800953c:	b13c      	cbz	r4, 800954e <_Bfree+0x3a>
 800953e:	69eb      	ldr	r3, [r5, #28]
 8009540:	6862      	ldr	r2, [r4, #4]
 8009542:	68db      	ldr	r3, [r3, #12]
 8009544:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8009548:	6021      	str	r1, [r4, #0]
 800954a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800954e:	bd70      	pop	{r4, r5, r6, pc}
 8009550:	0800ac39 	.word	0x0800ac39
 8009554:	0800ad19 	.word	0x0800ad19

08009558 <__multadd>:
 8009558:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800955c:	4607      	mov	r7, r0
 800955e:	460c      	mov	r4, r1
 8009560:	461e      	mov	r6, r3
 8009562:	2000      	movs	r0, #0
 8009564:	690d      	ldr	r5, [r1, #16]
 8009566:	f101 0c14 	add.w	ip, r1, #20
 800956a:	f8dc 3000 	ldr.w	r3, [ip]
 800956e:	3001      	adds	r0, #1
 8009570:	b299      	uxth	r1, r3
 8009572:	fb02 6101 	mla	r1, r2, r1, r6
 8009576:	0c1e      	lsrs	r6, r3, #16
 8009578:	0c0b      	lsrs	r3, r1, #16
 800957a:	fb02 3306 	mla	r3, r2, r6, r3
 800957e:	b289      	uxth	r1, r1
 8009580:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8009584:	4285      	cmp	r5, r0
 8009586:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800958a:	f84c 1b04 	str.w	r1, [ip], #4
 800958e:	dcec      	bgt.n	800956a <__multadd+0x12>
 8009590:	b30e      	cbz	r6, 80095d6 <__multadd+0x7e>
 8009592:	68a3      	ldr	r3, [r4, #8]
 8009594:	42ab      	cmp	r3, r5
 8009596:	dc19      	bgt.n	80095cc <__multadd+0x74>
 8009598:	6861      	ldr	r1, [r4, #4]
 800959a:	4638      	mov	r0, r7
 800959c:	3101      	adds	r1, #1
 800959e:	f7ff ff79 	bl	8009494 <_Balloc>
 80095a2:	4680      	mov	r8, r0
 80095a4:	b928      	cbnz	r0, 80095b2 <__multadd+0x5a>
 80095a6:	4602      	mov	r2, r0
 80095a8:	21ba      	movs	r1, #186	@ 0xba
 80095aa:	4b0c      	ldr	r3, [pc, #48]	@ (80095dc <__multadd+0x84>)
 80095ac:	480c      	ldr	r0, [pc, #48]	@ (80095e0 <__multadd+0x88>)
 80095ae:	f000 fee7 	bl	800a380 <__assert_func>
 80095b2:	6922      	ldr	r2, [r4, #16]
 80095b4:	f104 010c 	add.w	r1, r4, #12
 80095b8:	3202      	adds	r2, #2
 80095ba:	0092      	lsls	r2, r2, #2
 80095bc:	300c      	adds	r0, #12
 80095be:	f7fe fcb8 	bl	8007f32 <memcpy>
 80095c2:	4621      	mov	r1, r4
 80095c4:	4638      	mov	r0, r7
 80095c6:	f7ff ffa5 	bl	8009514 <_Bfree>
 80095ca:	4644      	mov	r4, r8
 80095cc:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80095d0:	3501      	adds	r5, #1
 80095d2:	615e      	str	r6, [r3, #20]
 80095d4:	6125      	str	r5, [r4, #16]
 80095d6:	4620      	mov	r0, r4
 80095d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80095dc:	0800aca8 	.word	0x0800aca8
 80095e0:	0800ad19 	.word	0x0800ad19

080095e4 <__s2b>:
 80095e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80095e8:	4615      	mov	r5, r2
 80095ea:	2209      	movs	r2, #9
 80095ec:	461f      	mov	r7, r3
 80095ee:	3308      	adds	r3, #8
 80095f0:	460c      	mov	r4, r1
 80095f2:	fb93 f3f2 	sdiv	r3, r3, r2
 80095f6:	4606      	mov	r6, r0
 80095f8:	2201      	movs	r2, #1
 80095fa:	2100      	movs	r1, #0
 80095fc:	429a      	cmp	r2, r3
 80095fe:	db09      	blt.n	8009614 <__s2b+0x30>
 8009600:	4630      	mov	r0, r6
 8009602:	f7ff ff47 	bl	8009494 <_Balloc>
 8009606:	b940      	cbnz	r0, 800961a <__s2b+0x36>
 8009608:	4602      	mov	r2, r0
 800960a:	21d3      	movs	r1, #211	@ 0xd3
 800960c:	4b18      	ldr	r3, [pc, #96]	@ (8009670 <__s2b+0x8c>)
 800960e:	4819      	ldr	r0, [pc, #100]	@ (8009674 <__s2b+0x90>)
 8009610:	f000 feb6 	bl	800a380 <__assert_func>
 8009614:	0052      	lsls	r2, r2, #1
 8009616:	3101      	adds	r1, #1
 8009618:	e7f0      	b.n	80095fc <__s2b+0x18>
 800961a:	9b08      	ldr	r3, [sp, #32]
 800961c:	2d09      	cmp	r5, #9
 800961e:	6143      	str	r3, [r0, #20]
 8009620:	f04f 0301 	mov.w	r3, #1
 8009624:	6103      	str	r3, [r0, #16]
 8009626:	dd16      	ble.n	8009656 <__s2b+0x72>
 8009628:	f104 0909 	add.w	r9, r4, #9
 800962c:	46c8      	mov	r8, r9
 800962e:	442c      	add	r4, r5
 8009630:	f818 3b01 	ldrb.w	r3, [r8], #1
 8009634:	4601      	mov	r1, r0
 8009636:	220a      	movs	r2, #10
 8009638:	4630      	mov	r0, r6
 800963a:	3b30      	subs	r3, #48	@ 0x30
 800963c:	f7ff ff8c 	bl	8009558 <__multadd>
 8009640:	45a0      	cmp	r8, r4
 8009642:	d1f5      	bne.n	8009630 <__s2b+0x4c>
 8009644:	f1a5 0408 	sub.w	r4, r5, #8
 8009648:	444c      	add	r4, r9
 800964a:	1b2d      	subs	r5, r5, r4
 800964c:	1963      	adds	r3, r4, r5
 800964e:	42bb      	cmp	r3, r7
 8009650:	db04      	blt.n	800965c <__s2b+0x78>
 8009652:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009656:	2509      	movs	r5, #9
 8009658:	340a      	adds	r4, #10
 800965a:	e7f6      	b.n	800964a <__s2b+0x66>
 800965c:	f814 3b01 	ldrb.w	r3, [r4], #1
 8009660:	4601      	mov	r1, r0
 8009662:	220a      	movs	r2, #10
 8009664:	4630      	mov	r0, r6
 8009666:	3b30      	subs	r3, #48	@ 0x30
 8009668:	f7ff ff76 	bl	8009558 <__multadd>
 800966c:	e7ee      	b.n	800964c <__s2b+0x68>
 800966e:	bf00      	nop
 8009670:	0800aca8 	.word	0x0800aca8
 8009674:	0800ad19 	.word	0x0800ad19

08009678 <__hi0bits>:
 8009678:	4603      	mov	r3, r0
 800967a:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800967e:	bf3a      	itte	cc
 8009680:	0403      	lslcc	r3, r0, #16
 8009682:	2010      	movcc	r0, #16
 8009684:	2000      	movcs	r0, #0
 8009686:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800968a:	bf3c      	itt	cc
 800968c:	021b      	lslcc	r3, r3, #8
 800968e:	3008      	addcc	r0, #8
 8009690:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009694:	bf3c      	itt	cc
 8009696:	011b      	lslcc	r3, r3, #4
 8009698:	3004      	addcc	r0, #4
 800969a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800969e:	bf3c      	itt	cc
 80096a0:	009b      	lslcc	r3, r3, #2
 80096a2:	3002      	addcc	r0, #2
 80096a4:	2b00      	cmp	r3, #0
 80096a6:	db05      	blt.n	80096b4 <__hi0bits+0x3c>
 80096a8:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 80096ac:	f100 0001 	add.w	r0, r0, #1
 80096b0:	bf08      	it	eq
 80096b2:	2020      	moveq	r0, #32
 80096b4:	4770      	bx	lr

080096b6 <__lo0bits>:
 80096b6:	6803      	ldr	r3, [r0, #0]
 80096b8:	4602      	mov	r2, r0
 80096ba:	f013 0007 	ands.w	r0, r3, #7
 80096be:	d00b      	beq.n	80096d8 <__lo0bits+0x22>
 80096c0:	07d9      	lsls	r1, r3, #31
 80096c2:	d421      	bmi.n	8009708 <__lo0bits+0x52>
 80096c4:	0798      	lsls	r0, r3, #30
 80096c6:	bf49      	itett	mi
 80096c8:	085b      	lsrmi	r3, r3, #1
 80096ca:	089b      	lsrpl	r3, r3, #2
 80096cc:	2001      	movmi	r0, #1
 80096ce:	6013      	strmi	r3, [r2, #0]
 80096d0:	bf5c      	itt	pl
 80096d2:	2002      	movpl	r0, #2
 80096d4:	6013      	strpl	r3, [r2, #0]
 80096d6:	4770      	bx	lr
 80096d8:	b299      	uxth	r1, r3
 80096da:	b909      	cbnz	r1, 80096e0 <__lo0bits+0x2a>
 80096dc:	2010      	movs	r0, #16
 80096de:	0c1b      	lsrs	r3, r3, #16
 80096e0:	b2d9      	uxtb	r1, r3
 80096e2:	b909      	cbnz	r1, 80096e8 <__lo0bits+0x32>
 80096e4:	3008      	adds	r0, #8
 80096e6:	0a1b      	lsrs	r3, r3, #8
 80096e8:	0719      	lsls	r1, r3, #28
 80096ea:	bf04      	itt	eq
 80096ec:	091b      	lsreq	r3, r3, #4
 80096ee:	3004      	addeq	r0, #4
 80096f0:	0799      	lsls	r1, r3, #30
 80096f2:	bf04      	itt	eq
 80096f4:	089b      	lsreq	r3, r3, #2
 80096f6:	3002      	addeq	r0, #2
 80096f8:	07d9      	lsls	r1, r3, #31
 80096fa:	d403      	bmi.n	8009704 <__lo0bits+0x4e>
 80096fc:	085b      	lsrs	r3, r3, #1
 80096fe:	f100 0001 	add.w	r0, r0, #1
 8009702:	d003      	beq.n	800970c <__lo0bits+0x56>
 8009704:	6013      	str	r3, [r2, #0]
 8009706:	4770      	bx	lr
 8009708:	2000      	movs	r0, #0
 800970a:	4770      	bx	lr
 800970c:	2020      	movs	r0, #32
 800970e:	4770      	bx	lr

08009710 <__i2b>:
 8009710:	b510      	push	{r4, lr}
 8009712:	460c      	mov	r4, r1
 8009714:	2101      	movs	r1, #1
 8009716:	f7ff febd 	bl	8009494 <_Balloc>
 800971a:	4602      	mov	r2, r0
 800971c:	b928      	cbnz	r0, 800972a <__i2b+0x1a>
 800971e:	f240 1145 	movw	r1, #325	@ 0x145
 8009722:	4b04      	ldr	r3, [pc, #16]	@ (8009734 <__i2b+0x24>)
 8009724:	4804      	ldr	r0, [pc, #16]	@ (8009738 <__i2b+0x28>)
 8009726:	f000 fe2b 	bl	800a380 <__assert_func>
 800972a:	2301      	movs	r3, #1
 800972c:	6144      	str	r4, [r0, #20]
 800972e:	6103      	str	r3, [r0, #16]
 8009730:	bd10      	pop	{r4, pc}
 8009732:	bf00      	nop
 8009734:	0800aca8 	.word	0x0800aca8
 8009738:	0800ad19 	.word	0x0800ad19

0800973c <__multiply>:
 800973c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009740:	4614      	mov	r4, r2
 8009742:	690a      	ldr	r2, [r1, #16]
 8009744:	6923      	ldr	r3, [r4, #16]
 8009746:	460f      	mov	r7, r1
 8009748:	429a      	cmp	r2, r3
 800974a:	bfa2      	ittt	ge
 800974c:	4623      	movge	r3, r4
 800974e:	460c      	movge	r4, r1
 8009750:	461f      	movge	r7, r3
 8009752:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8009756:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800975a:	68a3      	ldr	r3, [r4, #8]
 800975c:	6861      	ldr	r1, [r4, #4]
 800975e:	eb0a 0609 	add.w	r6, sl, r9
 8009762:	42b3      	cmp	r3, r6
 8009764:	b085      	sub	sp, #20
 8009766:	bfb8      	it	lt
 8009768:	3101      	addlt	r1, #1
 800976a:	f7ff fe93 	bl	8009494 <_Balloc>
 800976e:	b930      	cbnz	r0, 800977e <__multiply+0x42>
 8009770:	4602      	mov	r2, r0
 8009772:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8009776:	4b43      	ldr	r3, [pc, #268]	@ (8009884 <__multiply+0x148>)
 8009778:	4843      	ldr	r0, [pc, #268]	@ (8009888 <__multiply+0x14c>)
 800977a:	f000 fe01 	bl	800a380 <__assert_func>
 800977e:	f100 0514 	add.w	r5, r0, #20
 8009782:	462b      	mov	r3, r5
 8009784:	2200      	movs	r2, #0
 8009786:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800978a:	4543      	cmp	r3, r8
 800978c:	d321      	bcc.n	80097d2 <__multiply+0x96>
 800978e:	f107 0114 	add.w	r1, r7, #20
 8009792:	f104 0214 	add.w	r2, r4, #20
 8009796:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800979a:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800979e:	9302      	str	r3, [sp, #8]
 80097a0:	1b13      	subs	r3, r2, r4
 80097a2:	3b15      	subs	r3, #21
 80097a4:	f023 0303 	bic.w	r3, r3, #3
 80097a8:	3304      	adds	r3, #4
 80097aa:	f104 0715 	add.w	r7, r4, #21
 80097ae:	42ba      	cmp	r2, r7
 80097b0:	bf38      	it	cc
 80097b2:	2304      	movcc	r3, #4
 80097b4:	9301      	str	r3, [sp, #4]
 80097b6:	9b02      	ldr	r3, [sp, #8]
 80097b8:	9103      	str	r1, [sp, #12]
 80097ba:	428b      	cmp	r3, r1
 80097bc:	d80c      	bhi.n	80097d8 <__multiply+0x9c>
 80097be:	2e00      	cmp	r6, #0
 80097c0:	dd03      	ble.n	80097ca <__multiply+0x8e>
 80097c2:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80097c6:	2b00      	cmp	r3, #0
 80097c8:	d05a      	beq.n	8009880 <__multiply+0x144>
 80097ca:	6106      	str	r6, [r0, #16]
 80097cc:	b005      	add	sp, #20
 80097ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80097d2:	f843 2b04 	str.w	r2, [r3], #4
 80097d6:	e7d8      	b.n	800978a <__multiply+0x4e>
 80097d8:	f8b1 a000 	ldrh.w	sl, [r1]
 80097dc:	f1ba 0f00 	cmp.w	sl, #0
 80097e0:	d023      	beq.n	800982a <__multiply+0xee>
 80097e2:	46a9      	mov	r9, r5
 80097e4:	f04f 0c00 	mov.w	ip, #0
 80097e8:	f104 0e14 	add.w	lr, r4, #20
 80097ec:	f85e 7b04 	ldr.w	r7, [lr], #4
 80097f0:	f8d9 3000 	ldr.w	r3, [r9]
 80097f4:	fa1f fb87 	uxth.w	fp, r7
 80097f8:	b29b      	uxth	r3, r3
 80097fa:	fb0a 330b 	mla	r3, sl, fp, r3
 80097fe:	4463      	add	r3, ip
 8009800:	f8d9 c000 	ldr.w	ip, [r9]
 8009804:	0c3f      	lsrs	r7, r7, #16
 8009806:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 800980a:	fb0a c707 	mla	r7, sl, r7, ip
 800980e:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8009812:	b29b      	uxth	r3, r3
 8009814:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8009818:	4572      	cmp	r2, lr
 800981a:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800981e:	f849 3b04 	str.w	r3, [r9], #4
 8009822:	d8e3      	bhi.n	80097ec <__multiply+0xb0>
 8009824:	9b01      	ldr	r3, [sp, #4]
 8009826:	f845 c003 	str.w	ip, [r5, r3]
 800982a:	9b03      	ldr	r3, [sp, #12]
 800982c:	3104      	adds	r1, #4
 800982e:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8009832:	f1b9 0f00 	cmp.w	r9, #0
 8009836:	d021      	beq.n	800987c <__multiply+0x140>
 8009838:	46ae      	mov	lr, r5
 800983a:	f04f 0a00 	mov.w	sl, #0
 800983e:	682b      	ldr	r3, [r5, #0]
 8009840:	f104 0c14 	add.w	ip, r4, #20
 8009844:	f8bc b000 	ldrh.w	fp, [ip]
 8009848:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800984c:	b29b      	uxth	r3, r3
 800984e:	fb09 770b 	mla	r7, r9, fp, r7
 8009852:	4457      	add	r7, sl
 8009854:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8009858:	f84e 3b04 	str.w	r3, [lr], #4
 800985c:	f85c 3b04 	ldr.w	r3, [ip], #4
 8009860:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8009864:	f8be 3000 	ldrh.w	r3, [lr]
 8009868:	4562      	cmp	r2, ip
 800986a:	fb09 330a 	mla	r3, r9, sl, r3
 800986e:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8009872:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8009876:	d8e5      	bhi.n	8009844 <__multiply+0x108>
 8009878:	9f01      	ldr	r7, [sp, #4]
 800987a:	51eb      	str	r3, [r5, r7]
 800987c:	3504      	adds	r5, #4
 800987e:	e79a      	b.n	80097b6 <__multiply+0x7a>
 8009880:	3e01      	subs	r6, #1
 8009882:	e79c      	b.n	80097be <__multiply+0x82>
 8009884:	0800aca8 	.word	0x0800aca8
 8009888:	0800ad19 	.word	0x0800ad19

0800988c <__pow5mult>:
 800988c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009890:	4615      	mov	r5, r2
 8009892:	f012 0203 	ands.w	r2, r2, #3
 8009896:	4607      	mov	r7, r0
 8009898:	460e      	mov	r6, r1
 800989a:	d007      	beq.n	80098ac <__pow5mult+0x20>
 800989c:	4c25      	ldr	r4, [pc, #148]	@ (8009934 <__pow5mult+0xa8>)
 800989e:	3a01      	subs	r2, #1
 80098a0:	2300      	movs	r3, #0
 80098a2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80098a6:	f7ff fe57 	bl	8009558 <__multadd>
 80098aa:	4606      	mov	r6, r0
 80098ac:	10ad      	asrs	r5, r5, #2
 80098ae:	d03d      	beq.n	800992c <__pow5mult+0xa0>
 80098b0:	69fc      	ldr	r4, [r7, #28]
 80098b2:	b97c      	cbnz	r4, 80098d4 <__pow5mult+0x48>
 80098b4:	2010      	movs	r0, #16
 80098b6:	f7ff fd25 	bl	8009304 <malloc>
 80098ba:	4602      	mov	r2, r0
 80098bc:	61f8      	str	r0, [r7, #28]
 80098be:	b928      	cbnz	r0, 80098cc <__pow5mult+0x40>
 80098c0:	f240 11b3 	movw	r1, #435	@ 0x1b3
 80098c4:	4b1c      	ldr	r3, [pc, #112]	@ (8009938 <__pow5mult+0xac>)
 80098c6:	481d      	ldr	r0, [pc, #116]	@ (800993c <__pow5mult+0xb0>)
 80098c8:	f000 fd5a 	bl	800a380 <__assert_func>
 80098cc:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80098d0:	6004      	str	r4, [r0, #0]
 80098d2:	60c4      	str	r4, [r0, #12]
 80098d4:	f8d7 801c 	ldr.w	r8, [r7, #28]
 80098d8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80098dc:	b94c      	cbnz	r4, 80098f2 <__pow5mult+0x66>
 80098de:	f240 2171 	movw	r1, #625	@ 0x271
 80098e2:	4638      	mov	r0, r7
 80098e4:	f7ff ff14 	bl	8009710 <__i2b>
 80098e8:	2300      	movs	r3, #0
 80098ea:	4604      	mov	r4, r0
 80098ec:	f8c8 0008 	str.w	r0, [r8, #8]
 80098f0:	6003      	str	r3, [r0, #0]
 80098f2:	f04f 0900 	mov.w	r9, #0
 80098f6:	07eb      	lsls	r3, r5, #31
 80098f8:	d50a      	bpl.n	8009910 <__pow5mult+0x84>
 80098fa:	4631      	mov	r1, r6
 80098fc:	4622      	mov	r2, r4
 80098fe:	4638      	mov	r0, r7
 8009900:	f7ff ff1c 	bl	800973c <__multiply>
 8009904:	4680      	mov	r8, r0
 8009906:	4631      	mov	r1, r6
 8009908:	4638      	mov	r0, r7
 800990a:	f7ff fe03 	bl	8009514 <_Bfree>
 800990e:	4646      	mov	r6, r8
 8009910:	106d      	asrs	r5, r5, #1
 8009912:	d00b      	beq.n	800992c <__pow5mult+0xa0>
 8009914:	6820      	ldr	r0, [r4, #0]
 8009916:	b938      	cbnz	r0, 8009928 <__pow5mult+0x9c>
 8009918:	4622      	mov	r2, r4
 800991a:	4621      	mov	r1, r4
 800991c:	4638      	mov	r0, r7
 800991e:	f7ff ff0d 	bl	800973c <__multiply>
 8009922:	6020      	str	r0, [r4, #0]
 8009924:	f8c0 9000 	str.w	r9, [r0]
 8009928:	4604      	mov	r4, r0
 800992a:	e7e4      	b.n	80098f6 <__pow5mult+0x6a>
 800992c:	4630      	mov	r0, r6
 800992e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009932:	bf00      	nop
 8009934:	0800ad74 	.word	0x0800ad74
 8009938:	0800ac39 	.word	0x0800ac39
 800993c:	0800ad19 	.word	0x0800ad19

08009940 <__lshift>:
 8009940:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009944:	460c      	mov	r4, r1
 8009946:	4607      	mov	r7, r0
 8009948:	4691      	mov	r9, r2
 800994a:	6923      	ldr	r3, [r4, #16]
 800994c:	6849      	ldr	r1, [r1, #4]
 800994e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8009952:	68a3      	ldr	r3, [r4, #8]
 8009954:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8009958:	f108 0601 	add.w	r6, r8, #1
 800995c:	42b3      	cmp	r3, r6
 800995e:	db0b      	blt.n	8009978 <__lshift+0x38>
 8009960:	4638      	mov	r0, r7
 8009962:	f7ff fd97 	bl	8009494 <_Balloc>
 8009966:	4605      	mov	r5, r0
 8009968:	b948      	cbnz	r0, 800997e <__lshift+0x3e>
 800996a:	4602      	mov	r2, r0
 800996c:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8009970:	4b27      	ldr	r3, [pc, #156]	@ (8009a10 <__lshift+0xd0>)
 8009972:	4828      	ldr	r0, [pc, #160]	@ (8009a14 <__lshift+0xd4>)
 8009974:	f000 fd04 	bl	800a380 <__assert_func>
 8009978:	3101      	adds	r1, #1
 800997a:	005b      	lsls	r3, r3, #1
 800997c:	e7ee      	b.n	800995c <__lshift+0x1c>
 800997e:	2300      	movs	r3, #0
 8009980:	f100 0114 	add.w	r1, r0, #20
 8009984:	f100 0210 	add.w	r2, r0, #16
 8009988:	4618      	mov	r0, r3
 800998a:	4553      	cmp	r3, sl
 800998c:	db33      	blt.n	80099f6 <__lshift+0xb6>
 800998e:	6920      	ldr	r0, [r4, #16]
 8009990:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8009994:	f104 0314 	add.w	r3, r4, #20
 8009998:	f019 091f 	ands.w	r9, r9, #31
 800999c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80099a0:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80099a4:	d02b      	beq.n	80099fe <__lshift+0xbe>
 80099a6:	468a      	mov	sl, r1
 80099a8:	2200      	movs	r2, #0
 80099aa:	f1c9 0e20 	rsb	lr, r9, #32
 80099ae:	6818      	ldr	r0, [r3, #0]
 80099b0:	fa00 f009 	lsl.w	r0, r0, r9
 80099b4:	4310      	orrs	r0, r2
 80099b6:	f84a 0b04 	str.w	r0, [sl], #4
 80099ba:	f853 2b04 	ldr.w	r2, [r3], #4
 80099be:	459c      	cmp	ip, r3
 80099c0:	fa22 f20e 	lsr.w	r2, r2, lr
 80099c4:	d8f3      	bhi.n	80099ae <__lshift+0x6e>
 80099c6:	ebac 0304 	sub.w	r3, ip, r4
 80099ca:	3b15      	subs	r3, #21
 80099cc:	f023 0303 	bic.w	r3, r3, #3
 80099d0:	3304      	adds	r3, #4
 80099d2:	f104 0015 	add.w	r0, r4, #21
 80099d6:	4584      	cmp	ip, r0
 80099d8:	bf38      	it	cc
 80099da:	2304      	movcc	r3, #4
 80099dc:	50ca      	str	r2, [r1, r3]
 80099de:	b10a      	cbz	r2, 80099e4 <__lshift+0xa4>
 80099e0:	f108 0602 	add.w	r6, r8, #2
 80099e4:	3e01      	subs	r6, #1
 80099e6:	4638      	mov	r0, r7
 80099e8:	4621      	mov	r1, r4
 80099ea:	612e      	str	r6, [r5, #16]
 80099ec:	f7ff fd92 	bl	8009514 <_Bfree>
 80099f0:	4628      	mov	r0, r5
 80099f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80099f6:	f842 0f04 	str.w	r0, [r2, #4]!
 80099fa:	3301      	adds	r3, #1
 80099fc:	e7c5      	b.n	800998a <__lshift+0x4a>
 80099fe:	3904      	subs	r1, #4
 8009a00:	f853 2b04 	ldr.w	r2, [r3], #4
 8009a04:	459c      	cmp	ip, r3
 8009a06:	f841 2f04 	str.w	r2, [r1, #4]!
 8009a0a:	d8f9      	bhi.n	8009a00 <__lshift+0xc0>
 8009a0c:	e7ea      	b.n	80099e4 <__lshift+0xa4>
 8009a0e:	bf00      	nop
 8009a10:	0800aca8 	.word	0x0800aca8
 8009a14:	0800ad19 	.word	0x0800ad19

08009a18 <__mcmp>:
 8009a18:	4603      	mov	r3, r0
 8009a1a:	690a      	ldr	r2, [r1, #16]
 8009a1c:	6900      	ldr	r0, [r0, #16]
 8009a1e:	b530      	push	{r4, r5, lr}
 8009a20:	1a80      	subs	r0, r0, r2
 8009a22:	d10e      	bne.n	8009a42 <__mcmp+0x2a>
 8009a24:	3314      	adds	r3, #20
 8009a26:	3114      	adds	r1, #20
 8009a28:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8009a2c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8009a30:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8009a34:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8009a38:	4295      	cmp	r5, r2
 8009a3a:	d003      	beq.n	8009a44 <__mcmp+0x2c>
 8009a3c:	d205      	bcs.n	8009a4a <__mcmp+0x32>
 8009a3e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8009a42:	bd30      	pop	{r4, r5, pc}
 8009a44:	42a3      	cmp	r3, r4
 8009a46:	d3f3      	bcc.n	8009a30 <__mcmp+0x18>
 8009a48:	e7fb      	b.n	8009a42 <__mcmp+0x2a>
 8009a4a:	2001      	movs	r0, #1
 8009a4c:	e7f9      	b.n	8009a42 <__mcmp+0x2a>
	...

08009a50 <__mdiff>:
 8009a50:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009a54:	4689      	mov	r9, r1
 8009a56:	4606      	mov	r6, r0
 8009a58:	4611      	mov	r1, r2
 8009a5a:	4648      	mov	r0, r9
 8009a5c:	4614      	mov	r4, r2
 8009a5e:	f7ff ffdb 	bl	8009a18 <__mcmp>
 8009a62:	1e05      	subs	r5, r0, #0
 8009a64:	d112      	bne.n	8009a8c <__mdiff+0x3c>
 8009a66:	4629      	mov	r1, r5
 8009a68:	4630      	mov	r0, r6
 8009a6a:	f7ff fd13 	bl	8009494 <_Balloc>
 8009a6e:	4602      	mov	r2, r0
 8009a70:	b928      	cbnz	r0, 8009a7e <__mdiff+0x2e>
 8009a72:	f240 2137 	movw	r1, #567	@ 0x237
 8009a76:	4b3e      	ldr	r3, [pc, #248]	@ (8009b70 <__mdiff+0x120>)
 8009a78:	483e      	ldr	r0, [pc, #248]	@ (8009b74 <__mdiff+0x124>)
 8009a7a:	f000 fc81 	bl	800a380 <__assert_func>
 8009a7e:	2301      	movs	r3, #1
 8009a80:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8009a84:	4610      	mov	r0, r2
 8009a86:	b003      	add	sp, #12
 8009a88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009a8c:	bfbc      	itt	lt
 8009a8e:	464b      	movlt	r3, r9
 8009a90:	46a1      	movlt	r9, r4
 8009a92:	4630      	mov	r0, r6
 8009a94:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8009a98:	bfba      	itte	lt
 8009a9a:	461c      	movlt	r4, r3
 8009a9c:	2501      	movlt	r5, #1
 8009a9e:	2500      	movge	r5, #0
 8009aa0:	f7ff fcf8 	bl	8009494 <_Balloc>
 8009aa4:	4602      	mov	r2, r0
 8009aa6:	b918      	cbnz	r0, 8009ab0 <__mdiff+0x60>
 8009aa8:	f240 2145 	movw	r1, #581	@ 0x245
 8009aac:	4b30      	ldr	r3, [pc, #192]	@ (8009b70 <__mdiff+0x120>)
 8009aae:	e7e3      	b.n	8009a78 <__mdiff+0x28>
 8009ab0:	f100 0b14 	add.w	fp, r0, #20
 8009ab4:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8009ab8:	f109 0310 	add.w	r3, r9, #16
 8009abc:	60c5      	str	r5, [r0, #12]
 8009abe:	f04f 0c00 	mov.w	ip, #0
 8009ac2:	f109 0514 	add.w	r5, r9, #20
 8009ac6:	46d9      	mov	r9, fp
 8009ac8:	6926      	ldr	r6, [r4, #16]
 8009aca:	f104 0e14 	add.w	lr, r4, #20
 8009ace:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8009ad2:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8009ad6:	9301      	str	r3, [sp, #4]
 8009ad8:	9b01      	ldr	r3, [sp, #4]
 8009ada:	f85e 0b04 	ldr.w	r0, [lr], #4
 8009ade:	f853 af04 	ldr.w	sl, [r3, #4]!
 8009ae2:	b281      	uxth	r1, r0
 8009ae4:	9301      	str	r3, [sp, #4]
 8009ae6:	fa1f f38a 	uxth.w	r3, sl
 8009aea:	1a5b      	subs	r3, r3, r1
 8009aec:	0c00      	lsrs	r0, r0, #16
 8009aee:	4463      	add	r3, ip
 8009af0:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8009af4:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8009af8:	b29b      	uxth	r3, r3
 8009afa:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8009afe:	4576      	cmp	r6, lr
 8009b00:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8009b04:	f849 3b04 	str.w	r3, [r9], #4
 8009b08:	d8e6      	bhi.n	8009ad8 <__mdiff+0x88>
 8009b0a:	1b33      	subs	r3, r6, r4
 8009b0c:	3b15      	subs	r3, #21
 8009b0e:	f023 0303 	bic.w	r3, r3, #3
 8009b12:	3415      	adds	r4, #21
 8009b14:	3304      	adds	r3, #4
 8009b16:	42a6      	cmp	r6, r4
 8009b18:	bf38      	it	cc
 8009b1a:	2304      	movcc	r3, #4
 8009b1c:	441d      	add	r5, r3
 8009b1e:	445b      	add	r3, fp
 8009b20:	461e      	mov	r6, r3
 8009b22:	462c      	mov	r4, r5
 8009b24:	4544      	cmp	r4, r8
 8009b26:	d30e      	bcc.n	8009b46 <__mdiff+0xf6>
 8009b28:	f108 0103 	add.w	r1, r8, #3
 8009b2c:	1b49      	subs	r1, r1, r5
 8009b2e:	f021 0103 	bic.w	r1, r1, #3
 8009b32:	3d03      	subs	r5, #3
 8009b34:	45a8      	cmp	r8, r5
 8009b36:	bf38      	it	cc
 8009b38:	2100      	movcc	r1, #0
 8009b3a:	440b      	add	r3, r1
 8009b3c:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8009b40:	b199      	cbz	r1, 8009b6a <__mdiff+0x11a>
 8009b42:	6117      	str	r7, [r2, #16]
 8009b44:	e79e      	b.n	8009a84 <__mdiff+0x34>
 8009b46:	46e6      	mov	lr, ip
 8009b48:	f854 1b04 	ldr.w	r1, [r4], #4
 8009b4c:	fa1f fc81 	uxth.w	ip, r1
 8009b50:	44f4      	add	ip, lr
 8009b52:	0c08      	lsrs	r0, r1, #16
 8009b54:	4471      	add	r1, lr
 8009b56:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8009b5a:	b289      	uxth	r1, r1
 8009b5c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8009b60:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8009b64:	f846 1b04 	str.w	r1, [r6], #4
 8009b68:	e7dc      	b.n	8009b24 <__mdiff+0xd4>
 8009b6a:	3f01      	subs	r7, #1
 8009b6c:	e7e6      	b.n	8009b3c <__mdiff+0xec>
 8009b6e:	bf00      	nop
 8009b70:	0800aca8 	.word	0x0800aca8
 8009b74:	0800ad19 	.word	0x0800ad19

08009b78 <__ulp>:
 8009b78:	4b0e      	ldr	r3, [pc, #56]	@ (8009bb4 <__ulp+0x3c>)
 8009b7a:	400b      	ands	r3, r1
 8009b7c:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 8009b80:	2b00      	cmp	r3, #0
 8009b82:	dc08      	bgt.n	8009b96 <__ulp+0x1e>
 8009b84:	425b      	negs	r3, r3
 8009b86:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 8009b8a:	ea4f 5223 	mov.w	r2, r3, asr #20
 8009b8e:	da04      	bge.n	8009b9a <__ulp+0x22>
 8009b90:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8009b94:	4113      	asrs	r3, r2
 8009b96:	2200      	movs	r2, #0
 8009b98:	e008      	b.n	8009bac <__ulp+0x34>
 8009b9a:	f1a2 0314 	sub.w	r3, r2, #20
 8009b9e:	2b1e      	cmp	r3, #30
 8009ba0:	bfd6      	itet	le
 8009ba2:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 8009ba6:	2201      	movgt	r2, #1
 8009ba8:	40da      	lsrle	r2, r3
 8009baa:	2300      	movs	r3, #0
 8009bac:	4619      	mov	r1, r3
 8009bae:	4610      	mov	r0, r2
 8009bb0:	4770      	bx	lr
 8009bb2:	bf00      	nop
 8009bb4:	7ff00000 	.word	0x7ff00000

08009bb8 <__b2d>:
 8009bb8:	6902      	ldr	r2, [r0, #16]
 8009bba:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009bbc:	f100 0614 	add.w	r6, r0, #20
 8009bc0:	eb06 0282 	add.w	r2, r6, r2, lsl #2
 8009bc4:	f852 4c04 	ldr.w	r4, [r2, #-4]
 8009bc8:	4f1e      	ldr	r7, [pc, #120]	@ (8009c44 <__b2d+0x8c>)
 8009bca:	4620      	mov	r0, r4
 8009bcc:	f7ff fd54 	bl	8009678 <__hi0bits>
 8009bd0:	4603      	mov	r3, r0
 8009bd2:	f1c0 0020 	rsb	r0, r0, #32
 8009bd6:	2b0a      	cmp	r3, #10
 8009bd8:	f1a2 0504 	sub.w	r5, r2, #4
 8009bdc:	6008      	str	r0, [r1, #0]
 8009bde:	dc12      	bgt.n	8009c06 <__b2d+0x4e>
 8009be0:	42ae      	cmp	r6, r5
 8009be2:	bf2c      	ite	cs
 8009be4:	2200      	movcs	r2, #0
 8009be6:	f852 2c08 	ldrcc.w	r2, [r2, #-8]
 8009bea:	f1c3 0c0b 	rsb	ip, r3, #11
 8009bee:	3315      	adds	r3, #21
 8009bf0:	fa24 fe0c 	lsr.w	lr, r4, ip
 8009bf4:	fa04 f303 	lsl.w	r3, r4, r3
 8009bf8:	fa22 f20c 	lsr.w	r2, r2, ip
 8009bfc:	ea4e 0107 	orr.w	r1, lr, r7
 8009c00:	431a      	orrs	r2, r3
 8009c02:	4610      	mov	r0, r2
 8009c04:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009c06:	42ae      	cmp	r6, r5
 8009c08:	bf36      	itet	cc
 8009c0a:	f1a2 0508 	subcc.w	r5, r2, #8
 8009c0e:	2200      	movcs	r2, #0
 8009c10:	f852 2c08 	ldrcc.w	r2, [r2, #-8]
 8009c14:	3b0b      	subs	r3, #11
 8009c16:	d012      	beq.n	8009c3e <__b2d+0x86>
 8009c18:	f1c3 0720 	rsb	r7, r3, #32
 8009c1c:	fa22 f107 	lsr.w	r1, r2, r7
 8009c20:	409c      	lsls	r4, r3
 8009c22:	430c      	orrs	r4, r1
 8009c24:	42b5      	cmp	r5, r6
 8009c26:	f044 517f 	orr.w	r1, r4, #1069547520	@ 0x3fc00000
 8009c2a:	bf94      	ite	ls
 8009c2c:	2400      	movls	r4, #0
 8009c2e:	f855 4c04 	ldrhi.w	r4, [r5, #-4]
 8009c32:	409a      	lsls	r2, r3
 8009c34:	40fc      	lsrs	r4, r7
 8009c36:	f441 1140 	orr.w	r1, r1, #3145728	@ 0x300000
 8009c3a:	4322      	orrs	r2, r4
 8009c3c:	e7e1      	b.n	8009c02 <__b2d+0x4a>
 8009c3e:	ea44 0107 	orr.w	r1, r4, r7
 8009c42:	e7de      	b.n	8009c02 <__b2d+0x4a>
 8009c44:	3ff00000 	.word	0x3ff00000

08009c48 <__d2b>:
 8009c48:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
 8009c4c:	2101      	movs	r1, #1
 8009c4e:	4690      	mov	r8, r2
 8009c50:	4699      	mov	r9, r3
 8009c52:	9e08      	ldr	r6, [sp, #32]
 8009c54:	f7ff fc1e 	bl	8009494 <_Balloc>
 8009c58:	4604      	mov	r4, r0
 8009c5a:	b930      	cbnz	r0, 8009c6a <__d2b+0x22>
 8009c5c:	4602      	mov	r2, r0
 8009c5e:	f240 310f 	movw	r1, #783	@ 0x30f
 8009c62:	4b23      	ldr	r3, [pc, #140]	@ (8009cf0 <__d2b+0xa8>)
 8009c64:	4823      	ldr	r0, [pc, #140]	@ (8009cf4 <__d2b+0xac>)
 8009c66:	f000 fb8b 	bl	800a380 <__assert_func>
 8009c6a:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8009c6e:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8009c72:	b10d      	cbz	r5, 8009c78 <__d2b+0x30>
 8009c74:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8009c78:	9301      	str	r3, [sp, #4]
 8009c7a:	f1b8 0300 	subs.w	r3, r8, #0
 8009c7e:	d024      	beq.n	8009cca <__d2b+0x82>
 8009c80:	4668      	mov	r0, sp
 8009c82:	9300      	str	r3, [sp, #0]
 8009c84:	f7ff fd17 	bl	80096b6 <__lo0bits>
 8009c88:	e9dd 1200 	ldrd	r1, r2, [sp]
 8009c8c:	b1d8      	cbz	r0, 8009cc6 <__d2b+0x7e>
 8009c8e:	f1c0 0320 	rsb	r3, r0, #32
 8009c92:	fa02 f303 	lsl.w	r3, r2, r3
 8009c96:	430b      	orrs	r3, r1
 8009c98:	40c2      	lsrs	r2, r0
 8009c9a:	6163      	str	r3, [r4, #20]
 8009c9c:	9201      	str	r2, [sp, #4]
 8009c9e:	9b01      	ldr	r3, [sp, #4]
 8009ca0:	2b00      	cmp	r3, #0
 8009ca2:	bf0c      	ite	eq
 8009ca4:	2201      	moveq	r2, #1
 8009ca6:	2202      	movne	r2, #2
 8009ca8:	61a3      	str	r3, [r4, #24]
 8009caa:	6122      	str	r2, [r4, #16]
 8009cac:	b1ad      	cbz	r5, 8009cda <__d2b+0x92>
 8009cae:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8009cb2:	4405      	add	r5, r0
 8009cb4:	6035      	str	r5, [r6, #0]
 8009cb6:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8009cba:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009cbc:	6018      	str	r0, [r3, #0]
 8009cbe:	4620      	mov	r0, r4
 8009cc0:	b002      	add	sp, #8
 8009cc2:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 8009cc6:	6161      	str	r1, [r4, #20]
 8009cc8:	e7e9      	b.n	8009c9e <__d2b+0x56>
 8009cca:	a801      	add	r0, sp, #4
 8009ccc:	f7ff fcf3 	bl	80096b6 <__lo0bits>
 8009cd0:	9b01      	ldr	r3, [sp, #4]
 8009cd2:	2201      	movs	r2, #1
 8009cd4:	6163      	str	r3, [r4, #20]
 8009cd6:	3020      	adds	r0, #32
 8009cd8:	e7e7      	b.n	8009caa <__d2b+0x62>
 8009cda:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8009cde:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8009ce2:	6030      	str	r0, [r6, #0]
 8009ce4:	6918      	ldr	r0, [r3, #16]
 8009ce6:	f7ff fcc7 	bl	8009678 <__hi0bits>
 8009cea:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8009cee:	e7e4      	b.n	8009cba <__d2b+0x72>
 8009cf0:	0800aca8 	.word	0x0800aca8
 8009cf4:	0800ad19 	.word	0x0800ad19

08009cf8 <__ratio>:
 8009cf8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009cfc:	b085      	sub	sp, #20
 8009cfe:	e9cd 1000 	strd	r1, r0, [sp]
 8009d02:	a902      	add	r1, sp, #8
 8009d04:	f7ff ff58 	bl	8009bb8 <__b2d>
 8009d08:	468b      	mov	fp, r1
 8009d0a:	4606      	mov	r6, r0
 8009d0c:	460f      	mov	r7, r1
 8009d0e:	9800      	ldr	r0, [sp, #0]
 8009d10:	a903      	add	r1, sp, #12
 8009d12:	f7ff ff51 	bl	8009bb8 <__b2d>
 8009d16:	460d      	mov	r5, r1
 8009d18:	9b01      	ldr	r3, [sp, #4]
 8009d1a:	4689      	mov	r9, r1
 8009d1c:	6919      	ldr	r1, [r3, #16]
 8009d1e:	9b00      	ldr	r3, [sp, #0]
 8009d20:	4604      	mov	r4, r0
 8009d22:	691b      	ldr	r3, [r3, #16]
 8009d24:	4630      	mov	r0, r6
 8009d26:	1ac9      	subs	r1, r1, r3
 8009d28:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 8009d2c:	1a9b      	subs	r3, r3, r2
 8009d2e:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 8009d32:	2b00      	cmp	r3, #0
 8009d34:	bfcd      	iteet	gt
 8009d36:	463a      	movgt	r2, r7
 8009d38:	462a      	movle	r2, r5
 8009d3a:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8009d3e:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
 8009d42:	bfd8      	it	le
 8009d44:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 8009d48:	464b      	mov	r3, r9
 8009d4a:	4622      	mov	r2, r4
 8009d4c:	4659      	mov	r1, fp
 8009d4e:	f7f6 fda1 	bl	8000894 <__aeabi_ddiv>
 8009d52:	b005      	add	sp, #20
 8009d54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08009d58 <__copybits>:
 8009d58:	3901      	subs	r1, #1
 8009d5a:	b570      	push	{r4, r5, r6, lr}
 8009d5c:	1149      	asrs	r1, r1, #5
 8009d5e:	6914      	ldr	r4, [r2, #16]
 8009d60:	3101      	adds	r1, #1
 8009d62:	f102 0314 	add.w	r3, r2, #20
 8009d66:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8009d6a:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8009d6e:	1f05      	subs	r5, r0, #4
 8009d70:	42a3      	cmp	r3, r4
 8009d72:	d30c      	bcc.n	8009d8e <__copybits+0x36>
 8009d74:	1aa3      	subs	r3, r4, r2
 8009d76:	3b11      	subs	r3, #17
 8009d78:	f023 0303 	bic.w	r3, r3, #3
 8009d7c:	3211      	adds	r2, #17
 8009d7e:	42a2      	cmp	r2, r4
 8009d80:	bf88      	it	hi
 8009d82:	2300      	movhi	r3, #0
 8009d84:	4418      	add	r0, r3
 8009d86:	2300      	movs	r3, #0
 8009d88:	4288      	cmp	r0, r1
 8009d8a:	d305      	bcc.n	8009d98 <__copybits+0x40>
 8009d8c:	bd70      	pop	{r4, r5, r6, pc}
 8009d8e:	f853 6b04 	ldr.w	r6, [r3], #4
 8009d92:	f845 6f04 	str.w	r6, [r5, #4]!
 8009d96:	e7eb      	b.n	8009d70 <__copybits+0x18>
 8009d98:	f840 3b04 	str.w	r3, [r0], #4
 8009d9c:	e7f4      	b.n	8009d88 <__copybits+0x30>

08009d9e <__any_on>:
 8009d9e:	f100 0214 	add.w	r2, r0, #20
 8009da2:	6900      	ldr	r0, [r0, #16]
 8009da4:	114b      	asrs	r3, r1, #5
 8009da6:	4298      	cmp	r0, r3
 8009da8:	b510      	push	{r4, lr}
 8009daa:	db11      	blt.n	8009dd0 <__any_on+0x32>
 8009dac:	dd0a      	ble.n	8009dc4 <__any_on+0x26>
 8009dae:	f011 011f 	ands.w	r1, r1, #31
 8009db2:	d007      	beq.n	8009dc4 <__any_on+0x26>
 8009db4:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8009db8:	fa24 f001 	lsr.w	r0, r4, r1
 8009dbc:	fa00 f101 	lsl.w	r1, r0, r1
 8009dc0:	428c      	cmp	r4, r1
 8009dc2:	d10b      	bne.n	8009ddc <__any_on+0x3e>
 8009dc4:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8009dc8:	4293      	cmp	r3, r2
 8009dca:	d803      	bhi.n	8009dd4 <__any_on+0x36>
 8009dcc:	2000      	movs	r0, #0
 8009dce:	bd10      	pop	{r4, pc}
 8009dd0:	4603      	mov	r3, r0
 8009dd2:	e7f7      	b.n	8009dc4 <__any_on+0x26>
 8009dd4:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8009dd8:	2900      	cmp	r1, #0
 8009dda:	d0f5      	beq.n	8009dc8 <__any_on+0x2a>
 8009ddc:	2001      	movs	r0, #1
 8009dde:	e7f6      	b.n	8009dce <__any_on+0x30>

08009de0 <__ascii_wctomb>:
 8009de0:	4603      	mov	r3, r0
 8009de2:	4608      	mov	r0, r1
 8009de4:	b141      	cbz	r1, 8009df8 <__ascii_wctomb+0x18>
 8009de6:	2aff      	cmp	r2, #255	@ 0xff
 8009de8:	d904      	bls.n	8009df4 <__ascii_wctomb+0x14>
 8009dea:	228a      	movs	r2, #138	@ 0x8a
 8009dec:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8009df0:	601a      	str	r2, [r3, #0]
 8009df2:	4770      	bx	lr
 8009df4:	2001      	movs	r0, #1
 8009df6:	700a      	strb	r2, [r1, #0]
 8009df8:	4770      	bx	lr
	...

08009dfc <_strtoll_l.constprop.0>:
 8009dfc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009e00:	4689      	mov	r9, r1
 8009e02:	461e      	mov	r6, r3
 8009e04:	460d      	mov	r5, r1
 8009e06:	4690      	mov	r8, r2
 8009e08:	b085      	sub	sp, #20
 8009e0a:	4a42      	ldr	r2, [pc, #264]	@ (8009f14 <_strtoll_l.constprop.0+0x118>)
 8009e0c:	9002      	str	r0, [sp, #8]
 8009e0e:	462b      	mov	r3, r5
 8009e10:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009e14:	5d17      	ldrb	r7, [r2, r4]
 8009e16:	f017 0708 	ands.w	r7, r7, #8
 8009e1a:	d1f8      	bne.n	8009e0e <_strtoll_l.constprop.0+0x12>
 8009e1c:	2c2d      	cmp	r4, #45	@ 0x2d
 8009e1e:	d149      	bne.n	8009eb4 <_strtoll_l.constprop.0+0xb8>
 8009e20:	2701      	movs	r7, #1
 8009e22:	782c      	ldrb	r4, [r5, #0]
 8009e24:	1c9d      	adds	r5, r3, #2
 8009e26:	f036 0310 	bics.w	r3, r6, #16
 8009e2a:	d109      	bne.n	8009e40 <_strtoll_l.constprop.0+0x44>
 8009e2c:	2c30      	cmp	r4, #48	@ 0x30
 8009e2e:	d146      	bne.n	8009ebe <_strtoll_l.constprop.0+0xc2>
 8009e30:	782b      	ldrb	r3, [r5, #0]
 8009e32:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 8009e36:	2b58      	cmp	r3, #88	@ 0x58
 8009e38:	d141      	bne.n	8009ebe <_strtoll_l.constprop.0+0xc2>
 8009e3a:	2610      	movs	r6, #16
 8009e3c:	786c      	ldrb	r4, [r5, #1]
 8009e3e:	3502      	adds	r5, #2
 8009e40:	f107 4a00 	add.w	sl, r7, #2147483648	@ 0x80000000
 8009e44:	f107 3bff 	add.w	fp, r7, #4294967295	@ 0xffffffff
 8009e48:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 8009e4c:	17f3      	asrs	r3, r6, #31
 8009e4e:	4632      	mov	r2, r6
 8009e50:	4658      	mov	r0, fp
 8009e52:	4651      	mov	r1, sl
 8009e54:	9303      	str	r3, [sp, #12]
 8009e56:	f7f7 f88f 	bl	8000f78 <__aeabi_uldivmod>
 8009e5a:	9201      	str	r2, [sp, #4]
 8009e5c:	2200      	movs	r2, #0
 8009e5e:	468e      	mov	lr, r1
 8009e60:	4684      	mov	ip, r0
 8009e62:	4611      	mov	r1, r2
 8009e64:	4610      	mov	r0, r2
 8009e66:	f1a4 0330 	sub.w	r3, r4, #48	@ 0x30
 8009e6a:	2b09      	cmp	r3, #9
 8009e6c:	d905      	bls.n	8009e7a <_strtoll_l.constprop.0+0x7e>
 8009e6e:	f1a4 0341 	sub.w	r3, r4, #65	@ 0x41
 8009e72:	2b19      	cmp	r3, #25
 8009e74:	d82a      	bhi.n	8009ecc <_strtoll_l.constprop.0+0xd0>
 8009e76:	f1a4 0337 	sub.w	r3, r4, #55	@ 0x37
 8009e7a:	429e      	cmp	r6, r3
 8009e7c:	dd30      	ble.n	8009ee0 <_strtoll_l.constprop.0+0xe4>
 8009e7e:	1c54      	adds	r4, r2, #1
 8009e80:	d015      	beq.n	8009eae <_strtoll_l.constprop.0+0xb2>
 8009e82:	4584      	cmp	ip, r0
 8009e84:	eb7e 0201 	sbcs.w	r2, lr, r1
 8009e88:	d327      	bcc.n	8009eda <_strtoll_l.constprop.0+0xde>
 8009e8a:	458e      	cmp	lr, r1
 8009e8c:	bf08      	it	eq
 8009e8e:	4584      	cmpeq	ip, r0
 8009e90:	d102      	bne.n	8009e98 <_strtoll_l.constprop.0+0x9c>
 8009e92:	9a01      	ldr	r2, [sp, #4]
 8009e94:	429a      	cmp	r2, r3
 8009e96:	db20      	blt.n	8009eda <_strtoll_l.constprop.0+0xde>
 8009e98:	4371      	muls	r1, r6
 8009e9a:	9a03      	ldr	r2, [sp, #12]
 8009e9c:	fb00 1102 	mla	r1, r0, r2, r1
 8009ea0:	fba6 0200 	umull	r0, r2, r6, r0
 8009ea4:	440a      	add	r2, r1
 8009ea6:	1818      	adds	r0, r3, r0
 8009ea8:	eb42 71e3 	adc.w	r1, r2, r3, asr #31
 8009eac:	2201      	movs	r2, #1
 8009eae:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009eb2:	e7d8      	b.n	8009e66 <_strtoll_l.constprop.0+0x6a>
 8009eb4:	2c2b      	cmp	r4, #43	@ 0x2b
 8009eb6:	bf04      	itt	eq
 8009eb8:	782c      	ldrbeq	r4, [r5, #0]
 8009eba:	1c9d      	addeq	r5, r3, #2
 8009ebc:	e7b3      	b.n	8009e26 <_strtoll_l.constprop.0+0x2a>
 8009ebe:	2e00      	cmp	r6, #0
 8009ec0:	d1be      	bne.n	8009e40 <_strtoll_l.constprop.0+0x44>
 8009ec2:	2c30      	cmp	r4, #48	@ 0x30
 8009ec4:	bf0c      	ite	eq
 8009ec6:	2608      	moveq	r6, #8
 8009ec8:	260a      	movne	r6, #10
 8009eca:	e7b9      	b.n	8009e40 <_strtoll_l.constprop.0+0x44>
 8009ecc:	f1a4 0361 	sub.w	r3, r4, #97	@ 0x61
 8009ed0:	2b19      	cmp	r3, #25
 8009ed2:	d805      	bhi.n	8009ee0 <_strtoll_l.constprop.0+0xe4>
 8009ed4:	f1a4 0357 	sub.w	r3, r4, #87	@ 0x57
 8009ed8:	e7cf      	b.n	8009e7a <_strtoll_l.constprop.0+0x7e>
 8009eda:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8009ede:	e7e6      	b.n	8009eae <_strtoll_l.constprop.0+0xb2>
 8009ee0:	1c53      	adds	r3, r2, #1
 8009ee2:	d10a      	bne.n	8009efa <_strtoll_l.constprop.0+0xfe>
 8009ee4:	2322      	movs	r3, #34	@ 0x22
 8009ee6:	9a02      	ldr	r2, [sp, #8]
 8009ee8:	4658      	mov	r0, fp
 8009eea:	4651      	mov	r1, sl
 8009eec:	6013      	str	r3, [r2, #0]
 8009eee:	f1b8 0f00 	cmp.w	r8, #0
 8009ef2:	d10a      	bne.n	8009f0a <_strtoll_l.constprop.0+0x10e>
 8009ef4:	b005      	add	sp, #20
 8009ef6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009efa:	b117      	cbz	r7, 8009f02 <_strtoll_l.constprop.0+0x106>
 8009efc:	4240      	negs	r0, r0
 8009efe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8009f02:	f1b8 0f00 	cmp.w	r8, #0
 8009f06:	d0f5      	beq.n	8009ef4 <_strtoll_l.constprop.0+0xf8>
 8009f08:	b10a      	cbz	r2, 8009f0e <_strtoll_l.constprop.0+0x112>
 8009f0a:	f105 39ff 	add.w	r9, r5, #4294967295	@ 0xffffffff
 8009f0e:	f8c8 9000 	str.w	r9, [r8]
 8009f12:	e7ef      	b.n	8009ef4 <_strtoll_l.constprop.0+0xf8>
 8009f14:	0800ae71 	.word	0x0800ae71

08009f18 <strtoll>:
 8009f18:	4613      	mov	r3, r2
 8009f1a:	460a      	mov	r2, r1
 8009f1c:	4601      	mov	r1, r0
 8009f1e:	4802      	ldr	r0, [pc, #8]	@ (8009f28 <strtoll+0x10>)
 8009f20:	6800      	ldr	r0, [r0, #0]
 8009f22:	f7ff bf6b 	b.w	8009dfc <_strtoll_l.constprop.0>
 8009f26:	bf00      	nop
 8009f28:	200002f4 	.word	0x200002f4

08009f2c <__ssputs_r>:
 8009f2c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009f30:	461f      	mov	r7, r3
 8009f32:	688e      	ldr	r6, [r1, #8]
 8009f34:	4682      	mov	sl, r0
 8009f36:	42be      	cmp	r6, r7
 8009f38:	460c      	mov	r4, r1
 8009f3a:	4690      	mov	r8, r2
 8009f3c:	680b      	ldr	r3, [r1, #0]
 8009f3e:	d82d      	bhi.n	8009f9c <__ssputs_r+0x70>
 8009f40:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8009f44:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8009f48:	d026      	beq.n	8009f98 <__ssputs_r+0x6c>
 8009f4a:	6965      	ldr	r5, [r4, #20]
 8009f4c:	6909      	ldr	r1, [r1, #16]
 8009f4e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009f52:	eba3 0901 	sub.w	r9, r3, r1
 8009f56:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009f5a:	1c7b      	adds	r3, r7, #1
 8009f5c:	444b      	add	r3, r9
 8009f5e:	106d      	asrs	r5, r5, #1
 8009f60:	429d      	cmp	r5, r3
 8009f62:	bf38      	it	cc
 8009f64:	461d      	movcc	r5, r3
 8009f66:	0553      	lsls	r3, r2, #21
 8009f68:	d527      	bpl.n	8009fba <__ssputs_r+0x8e>
 8009f6a:	4629      	mov	r1, r5
 8009f6c:	f7ff f9f4 	bl	8009358 <_malloc_r>
 8009f70:	4606      	mov	r6, r0
 8009f72:	b360      	cbz	r0, 8009fce <__ssputs_r+0xa2>
 8009f74:	464a      	mov	r2, r9
 8009f76:	6921      	ldr	r1, [r4, #16]
 8009f78:	f7fd ffdb 	bl	8007f32 <memcpy>
 8009f7c:	89a3      	ldrh	r3, [r4, #12]
 8009f7e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8009f82:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009f86:	81a3      	strh	r3, [r4, #12]
 8009f88:	6126      	str	r6, [r4, #16]
 8009f8a:	444e      	add	r6, r9
 8009f8c:	6026      	str	r6, [r4, #0]
 8009f8e:	463e      	mov	r6, r7
 8009f90:	6165      	str	r5, [r4, #20]
 8009f92:	eba5 0509 	sub.w	r5, r5, r9
 8009f96:	60a5      	str	r5, [r4, #8]
 8009f98:	42be      	cmp	r6, r7
 8009f9a:	d900      	bls.n	8009f9e <__ssputs_r+0x72>
 8009f9c:	463e      	mov	r6, r7
 8009f9e:	4632      	mov	r2, r6
 8009fa0:	4641      	mov	r1, r8
 8009fa2:	6820      	ldr	r0, [r4, #0]
 8009fa4:	f000 f9c2 	bl	800a32c <memmove>
 8009fa8:	2000      	movs	r0, #0
 8009faa:	68a3      	ldr	r3, [r4, #8]
 8009fac:	1b9b      	subs	r3, r3, r6
 8009fae:	60a3      	str	r3, [r4, #8]
 8009fb0:	6823      	ldr	r3, [r4, #0]
 8009fb2:	4433      	add	r3, r6
 8009fb4:	6023      	str	r3, [r4, #0]
 8009fb6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009fba:	462a      	mov	r2, r5
 8009fbc:	f000 fa12 	bl	800a3e4 <_realloc_r>
 8009fc0:	4606      	mov	r6, r0
 8009fc2:	2800      	cmp	r0, #0
 8009fc4:	d1e0      	bne.n	8009f88 <__ssputs_r+0x5c>
 8009fc6:	4650      	mov	r0, sl
 8009fc8:	6921      	ldr	r1, [r4, #16]
 8009fca:	f7fe fe19 	bl	8008c00 <_free_r>
 8009fce:	230c      	movs	r3, #12
 8009fd0:	f8ca 3000 	str.w	r3, [sl]
 8009fd4:	89a3      	ldrh	r3, [r4, #12]
 8009fd6:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8009fda:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009fde:	81a3      	strh	r3, [r4, #12]
 8009fe0:	e7e9      	b.n	8009fb6 <__ssputs_r+0x8a>
	...

08009fe4 <_svfiprintf_r>:
 8009fe4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009fe8:	4698      	mov	r8, r3
 8009fea:	898b      	ldrh	r3, [r1, #12]
 8009fec:	4607      	mov	r7, r0
 8009fee:	061b      	lsls	r3, r3, #24
 8009ff0:	460d      	mov	r5, r1
 8009ff2:	4614      	mov	r4, r2
 8009ff4:	b09d      	sub	sp, #116	@ 0x74
 8009ff6:	d510      	bpl.n	800a01a <_svfiprintf_r+0x36>
 8009ff8:	690b      	ldr	r3, [r1, #16]
 8009ffa:	b973      	cbnz	r3, 800a01a <_svfiprintf_r+0x36>
 8009ffc:	2140      	movs	r1, #64	@ 0x40
 8009ffe:	f7ff f9ab 	bl	8009358 <_malloc_r>
 800a002:	6028      	str	r0, [r5, #0]
 800a004:	6128      	str	r0, [r5, #16]
 800a006:	b930      	cbnz	r0, 800a016 <_svfiprintf_r+0x32>
 800a008:	230c      	movs	r3, #12
 800a00a:	603b      	str	r3, [r7, #0]
 800a00c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800a010:	b01d      	add	sp, #116	@ 0x74
 800a012:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a016:	2340      	movs	r3, #64	@ 0x40
 800a018:	616b      	str	r3, [r5, #20]
 800a01a:	2300      	movs	r3, #0
 800a01c:	9309      	str	r3, [sp, #36]	@ 0x24
 800a01e:	2320      	movs	r3, #32
 800a020:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800a024:	2330      	movs	r3, #48	@ 0x30
 800a026:	f04f 0901 	mov.w	r9, #1
 800a02a:	f8cd 800c 	str.w	r8, [sp, #12]
 800a02e:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 800a1c8 <_svfiprintf_r+0x1e4>
 800a032:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800a036:	4623      	mov	r3, r4
 800a038:	469a      	mov	sl, r3
 800a03a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a03e:	b10a      	cbz	r2, 800a044 <_svfiprintf_r+0x60>
 800a040:	2a25      	cmp	r2, #37	@ 0x25
 800a042:	d1f9      	bne.n	800a038 <_svfiprintf_r+0x54>
 800a044:	ebba 0b04 	subs.w	fp, sl, r4
 800a048:	d00b      	beq.n	800a062 <_svfiprintf_r+0x7e>
 800a04a:	465b      	mov	r3, fp
 800a04c:	4622      	mov	r2, r4
 800a04e:	4629      	mov	r1, r5
 800a050:	4638      	mov	r0, r7
 800a052:	f7ff ff6b 	bl	8009f2c <__ssputs_r>
 800a056:	3001      	adds	r0, #1
 800a058:	f000 80a7 	beq.w	800a1aa <_svfiprintf_r+0x1c6>
 800a05c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a05e:	445a      	add	r2, fp
 800a060:	9209      	str	r2, [sp, #36]	@ 0x24
 800a062:	f89a 3000 	ldrb.w	r3, [sl]
 800a066:	2b00      	cmp	r3, #0
 800a068:	f000 809f 	beq.w	800a1aa <_svfiprintf_r+0x1c6>
 800a06c:	2300      	movs	r3, #0
 800a06e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800a072:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a076:	f10a 0a01 	add.w	sl, sl, #1
 800a07a:	9304      	str	r3, [sp, #16]
 800a07c:	9307      	str	r3, [sp, #28]
 800a07e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800a082:	931a      	str	r3, [sp, #104]	@ 0x68
 800a084:	4654      	mov	r4, sl
 800a086:	2205      	movs	r2, #5
 800a088:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a08c:	484e      	ldr	r0, [pc, #312]	@ (800a1c8 <_svfiprintf_r+0x1e4>)
 800a08e:	f7fd ff42 	bl	8007f16 <memchr>
 800a092:	9a04      	ldr	r2, [sp, #16]
 800a094:	b9d8      	cbnz	r0, 800a0ce <_svfiprintf_r+0xea>
 800a096:	06d0      	lsls	r0, r2, #27
 800a098:	bf44      	itt	mi
 800a09a:	2320      	movmi	r3, #32
 800a09c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a0a0:	0711      	lsls	r1, r2, #28
 800a0a2:	bf44      	itt	mi
 800a0a4:	232b      	movmi	r3, #43	@ 0x2b
 800a0a6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a0aa:	f89a 3000 	ldrb.w	r3, [sl]
 800a0ae:	2b2a      	cmp	r3, #42	@ 0x2a
 800a0b0:	d015      	beq.n	800a0de <_svfiprintf_r+0xfa>
 800a0b2:	4654      	mov	r4, sl
 800a0b4:	2000      	movs	r0, #0
 800a0b6:	f04f 0c0a 	mov.w	ip, #10
 800a0ba:	9a07      	ldr	r2, [sp, #28]
 800a0bc:	4621      	mov	r1, r4
 800a0be:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a0c2:	3b30      	subs	r3, #48	@ 0x30
 800a0c4:	2b09      	cmp	r3, #9
 800a0c6:	d94b      	bls.n	800a160 <_svfiprintf_r+0x17c>
 800a0c8:	b1b0      	cbz	r0, 800a0f8 <_svfiprintf_r+0x114>
 800a0ca:	9207      	str	r2, [sp, #28]
 800a0cc:	e014      	b.n	800a0f8 <_svfiprintf_r+0x114>
 800a0ce:	eba0 0308 	sub.w	r3, r0, r8
 800a0d2:	fa09 f303 	lsl.w	r3, r9, r3
 800a0d6:	4313      	orrs	r3, r2
 800a0d8:	46a2      	mov	sl, r4
 800a0da:	9304      	str	r3, [sp, #16]
 800a0dc:	e7d2      	b.n	800a084 <_svfiprintf_r+0xa0>
 800a0de:	9b03      	ldr	r3, [sp, #12]
 800a0e0:	1d19      	adds	r1, r3, #4
 800a0e2:	681b      	ldr	r3, [r3, #0]
 800a0e4:	9103      	str	r1, [sp, #12]
 800a0e6:	2b00      	cmp	r3, #0
 800a0e8:	bfbb      	ittet	lt
 800a0ea:	425b      	neglt	r3, r3
 800a0ec:	f042 0202 	orrlt.w	r2, r2, #2
 800a0f0:	9307      	strge	r3, [sp, #28]
 800a0f2:	9307      	strlt	r3, [sp, #28]
 800a0f4:	bfb8      	it	lt
 800a0f6:	9204      	strlt	r2, [sp, #16]
 800a0f8:	7823      	ldrb	r3, [r4, #0]
 800a0fa:	2b2e      	cmp	r3, #46	@ 0x2e
 800a0fc:	d10a      	bne.n	800a114 <_svfiprintf_r+0x130>
 800a0fe:	7863      	ldrb	r3, [r4, #1]
 800a100:	2b2a      	cmp	r3, #42	@ 0x2a
 800a102:	d132      	bne.n	800a16a <_svfiprintf_r+0x186>
 800a104:	9b03      	ldr	r3, [sp, #12]
 800a106:	3402      	adds	r4, #2
 800a108:	1d1a      	adds	r2, r3, #4
 800a10a:	681b      	ldr	r3, [r3, #0]
 800a10c:	9203      	str	r2, [sp, #12]
 800a10e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800a112:	9305      	str	r3, [sp, #20]
 800a114:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 800a1cc <_svfiprintf_r+0x1e8>
 800a118:	2203      	movs	r2, #3
 800a11a:	4650      	mov	r0, sl
 800a11c:	7821      	ldrb	r1, [r4, #0]
 800a11e:	f7fd fefa 	bl	8007f16 <memchr>
 800a122:	b138      	cbz	r0, 800a134 <_svfiprintf_r+0x150>
 800a124:	2240      	movs	r2, #64	@ 0x40
 800a126:	9b04      	ldr	r3, [sp, #16]
 800a128:	eba0 000a 	sub.w	r0, r0, sl
 800a12c:	4082      	lsls	r2, r0
 800a12e:	4313      	orrs	r3, r2
 800a130:	3401      	adds	r4, #1
 800a132:	9304      	str	r3, [sp, #16]
 800a134:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a138:	2206      	movs	r2, #6
 800a13a:	4825      	ldr	r0, [pc, #148]	@ (800a1d0 <_svfiprintf_r+0x1ec>)
 800a13c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800a140:	f7fd fee9 	bl	8007f16 <memchr>
 800a144:	2800      	cmp	r0, #0
 800a146:	d036      	beq.n	800a1b6 <_svfiprintf_r+0x1d2>
 800a148:	4b22      	ldr	r3, [pc, #136]	@ (800a1d4 <_svfiprintf_r+0x1f0>)
 800a14a:	bb1b      	cbnz	r3, 800a194 <_svfiprintf_r+0x1b0>
 800a14c:	9b03      	ldr	r3, [sp, #12]
 800a14e:	3307      	adds	r3, #7
 800a150:	f023 0307 	bic.w	r3, r3, #7
 800a154:	3308      	adds	r3, #8
 800a156:	9303      	str	r3, [sp, #12]
 800a158:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a15a:	4433      	add	r3, r6
 800a15c:	9309      	str	r3, [sp, #36]	@ 0x24
 800a15e:	e76a      	b.n	800a036 <_svfiprintf_r+0x52>
 800a160:	460c      	mov	r4, r1
 800a162:	2001      	movs	r0, #1
 800a164:	fb0c 3202 	mla	r2, ip, r2, r3
 800a168:	e7a8      	b.n	800a0bc <_svfiprintf_r+0xd8>
 800a16a:	2300      	movs	r3, #0
 800a16c:	f04f 0c0a 	mov.w	ip, #10
 800a170:	4619      	mov	r1, r3
 800a172:	3401      	adds	r4, #1
 800a174:	9305      	str	r3, [sp, #20]
 800a176:	4620      	mov	r0, r4
 800a178:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a17c:	3a30      	subs	r2, #48	@ 0x30
 800a17e:	2a09      	cmp	r2, #9
 800a180:	d903      	bls.n	800a18a <_svfiprintf_r+0x1a6>
 800a182:	2b00      	cmp	r3, #0
 800a184:	d0c6      	beq.n	800a114 <_svfiprintf_r+0x130>
 800a186:	9105      	str	r1, [sp, #20]
 800a188:	e7c4      	b.n	800a114 <_svfiprintf_r+0x130>
 800a18a:	4604      	mov	r4, r0
 800a18c:	2301      	movs	r3, #1
 800a18e:	fb0c 2101 	mla	r1, ip, r1, r2
 800a192:	e7f0      	b.n	800a176 <_svfiprintf_r+0x192>
 800a194:	ab03      	add	r3, sp, #12
 800a196:	9300      	str	r3, [sp, #0]
 800a198:	462a      	mov	r2, r5
 800a19a:	4638      	mov	r0, r7
 800a19c:	4b0e      	ldr	r3, [pc, #56]	@ (800a1d8 <_svfiprintf_r+0x1f4>)
 800a19e:	a904      	add	r1, sp, #16
 800a1a0:	f7fd f944 	bl	800742c <_printf_float>
 800a1a4:	1c42      	adds	r2, r0, #1
 800a1a6:	4606      	mov	r6, r0
 800a1a8:	d1d6      	bne.n	800a158 <_svfiprintf_r+0x174>
 800a1aa:	89ab      	ldrh	r3, [r5, #12]
 800a1ac:	065b      	lsls	r3, r3, #25
 800a1ae:	f53f af2d 	bmi.w	800a00c <_svfiprintf_r+0x28>
 800a1b2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800a1b4:	e72c      	b.n	800a010 <_svfiprintf_r+0x2c>
 800a1b6:	ab03      	add	r3, sp, #12
 800a1b8:	9300      	str	r3, [sp, #0]
 800a1ba:	462a      	mov	r2, r5
 800a1bc:	4638      	mov	r0, r7
 800a1be:	4b06      	ldr	r3, [pc, #24]	@ (800a1d8 <_svfiprintf_r+0x1f4>)
 800a1c0:	a904      	add	r1, sp, #16
 800a1c2:	f7fd fbd1 	bl	8007968 <_printf_i>
 800a1c6:	e7ed      	b.n	800a1a4 <_svfiprintf_r+0x1c0>
 800a1c8:	0800af71 	.word	0x0800af71
 800a1cc:	0800af77 	.word	0x0800af77
 800a1d0:	0800af7b 	.word	0x0800af7b
 800a1d4:	0800742d 	.word	0x0800742d
 800a1d8:	08009f2d 	.word	0x08009f2d

0800a1dc <__sflush_r>:
 800a1dc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800a1e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a1e2:	0716      	lsls	r6, r2, #28
 800a1e4:	4605      	mov	r5, r0
 800a1e6:	460c      	mov	r4, r1
 800a1e8:	d454      	bmi.n	800a294 <__sflush_r+0xb8>
 800a1ea:	684b      	ldr	r3, [r1, #4]
 800a1ec:	2b00      	cmp	r3, #0
 800a1ee:	dc02      	bgt.n	800a1f6 <__sflush_r+0x1a>
 800a1f0:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800a1f2:	2b00      	cmp	r3, #0
 800a1f4:	dd48      	ble.n	800a288 <__sflush_r+0xac>
 800a1f6:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800a1f8:	2e00      	cmp	r6, #0
 800a1fa:	d045      	beq.n	800a288 <__sflush_r+0xac>
 800a1fc:	2300      	movs	r3, #0
 800a1fe:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800a202:	682f      	ldr	r7, [r5, #0]
 800a204:	6a21      	ldr	r1, [r4, #32]
 800a206:	602b      	str	r3, [r5, #0]
 800a208:	d030      	beq.n	800a26c <__sflush_r+0x90>
 800a20a:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800a20c:	89a3      	ldrh	r3, [r4, #12]
 800a20e:	0759      	lsls	r1, r3, #29
 800a210:	d505      	bpl.n	800a21e <__sflush_r+0x42>
 800a212:	6863      	ldr	r3, [r4, #4]
 800a214:	1ad2      	subs	r2, r2, r3
 800a216:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800a218:	b10b      	cbz	r3, 800a21e <__sflush_r+0x42>
 800a21a:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800a21c:	1ad2      	subs	r2, r2, r3
 800a21e:	2300      	movs	r3, #0
 800a220:	4628      	mov	r0, r5
 800a222:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800a224:	6a21      	ldr	r1, [r4, #32]
 800a226:	47b0      	blx	r6
 800a228:	1c43      	adds	r3, r0, #1
 800a22a:	89a3      	ldrh	r3, [r4, #12]
 800a22c:	d106      	bne.n	800a23c <__sflush_r+0x60>
 800a22e:	6829      	ldr	r1, [r5, #0]
 800a230:	291d      	cmp	r1, #29
 800a232:	d82b      	bhi.n	800a28c <__sflush_r+0xb0>
 800a234:	4a28      	ldr	r2, [pc, #160]	@ (800a2d8 <__sflush_r+0xfc>)
 800a236:	410a      	asrs	r2, r1
 800a238:	07d6      	lsls	r6, r2, #31
 800a23a:	d427      	bmi.n	800a28c <__sflush_r+0xb0>
 800a23c:	2200      	movs	r2, #0
 800a23e:	6062      	str	r2, [r4, #4]
 800a240:	6922      	ldr	r2, [r4, #16]
 800a242:	04d9      	lsls	r1, r3, #19
 800a244:	6022      	str	r2, [r4, #0]
 800a246:	d504      	bpl.n	800a252 <__sflush_r+0x76>
 800a248:	1c42      	adds	r2, r0, #1
 800a24a:	d101      	bne.n	800a250 <__sflush_r+0x74>
 800a24c:	682b      	ldr	r3, [r5, #0]
 800a24e:	b903      	cbnz	r3, 800a252 <__sflush_r+0x76>
 800a250:	6560      	str	r0, [r4, #84]	@ 0x54
 800a252:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800a254:	602f      	str	r7, [r5, #0]
 800a256:	b1b9      	cbz	r1, 800a288 <__sflush_r+0xac>
 800a258:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800a25c:	4299      	cmp	r1, r3
 800a25e:	d002      	beq.n	800a266 <__sflush_r+0x8a>
 800a260:	4628      	mov	r0, r5
 800a262:	f7fe fccd 	bl	8008c00 <_free_r>
 800a266:	2300      	movs	r3, #0
 800a268:	6363      	str	r3, [r4, #52]	@ 0x34
 800a26a:	e00d      	b.n	800a288 <__sflush_r+0xac>
 800a26c:	2301      	movs	r3, #1
 800a26e:	4628      	mov	r0, r5
 800a270:	47b0      	blx	r6
 800a272:	4602      	mov	r2, r0
 800a274:	1c50      	adds	r0, r2, #1
 800a276:	d1c9      	bne.n	800a20c <__sflush_r+0x30>
 800a278:	682b      	ldr	r3, [r5, #0]
 800a27a:	2b00      	cmp	r3, #0
 800a27c:	d0c6      	beq.n	800a20c <__sflush_r+0x30>
 800a27e:	2b1d      	cmp	r3, #29
 800a280:	d001      	beq.n	800a286 <__sflush_r+0xaa>
 800a282:	2b16      	cmp	r3, #22
 800a284:	d11d      	bne.n	800a2c2 <__sflush_r+0xe6>
 800a286:	602f      	str	r7, [r5, #0]
 800a288:	2000      	movs	r0, #0
 800a28a:	e021      	b.n	800a2d0 <__sflush_r+0xf4>
 800a28c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a290:	b21b      	sxth	r3, r3
 800a292:	e01a      	b.n	800a2ca <__sflush_r+0xee>
 800a294:	690f      	ldr	r7, [r1, #16]
 800a296:	2f00      	cmp	r7, #0
 800a298:	d0f6      	beq.n	800a288 <__sflush_r+0xac>
 800a29a:	0793      	lsls	r3, r2, #30
 800a29c:	bf18      	it	ne
 800a29e:	2300      	movne	r3, #0
 800a2a0:	680e      	ldr	r6, [r1, #0]
 800a2a2:	bf08      	it	eq
 800a2a4:	694b      	ldreq	r3, [r1, #20]
 800a2a6:	1bf6      	subs	r6, r6, r7
 800a2a8:	600f      	str	r7, [r1, #0]
 800a2aa:	608b      	str	r3, [r1, #8]
 800a2ac:	2e00      	cmp	r6, #0
 800a2ae:	ddeb      	ble.n	800a288 <__sflush_r+0xac>
 800a2b0:	4633      	mov	r3, r6
 800a2b2:	463a      	mov	r2, r7
 800a2b4:	4628      	mov	r0, r5
 800a2b6:	6a21      	ldr	r1, [r4, #32]
 800a2b8:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 800a2bc:	47e0      	blx	ip
 800a2be:	2800      	cmp	r0, #0
 800a2c0:	dc07      	bgt.n	800a2d2 <__sflush_r+0xf6>
 800a2c2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a2c6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a2ca:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800a2ce:	81a3      	strh	r3, [r4, #12]
 800a2d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a2d2:	4407      	add	r7, r0
 800a2d4:	1a36      	subs	r6, r6, r0
 800a2d6:	e7e9      	b.n	800a2ac <__sflush_r+0xd0>
 800a2d8:	dfbffffe 	.word	0xdfbffffe

0800a2dc <_fflush_r>:
 800a2dc:	b538      	push	{r3, r4, r5, lr}
 800a2de:	690b      	ldr	r3, [r1, #16]
 800a2e0:	4605      	mov	r5, r0
 800a2e2:	460c      	mov	r4, r1
 800a2e4:	b913      	cbnz	r3, 800a2ec <_fflush_r+0x10>
 800a2e6:	2500      	movs	r5, #0
 800a2e8:	4628      	mov	r0, r5
 800a2ea:	bd38      	pop	{r3, r4, r5, pc}
 800a2ec:	b118      	cbz	r0, 800a2f6 <_fflush_r+0x1a>
 800a2ee:	6a03      	ldr	r3, [r0, #32]
 800a2f0:	b90b      	cbnz	r3, 800a2f6 <_fflush_r+0x1a>
 800a2f2:	f7fd fce5 	bl	8007cc0 <__sinit>
 800a2f6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a2fa:	2b00      	cmp	r3, #0
 800a2fc:	d0f3      	beq.n	800a2e6 <_fflush_r+0xa>
 800a2fe:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800a300:	07d0      	lsls	r0, r2, #31
 800a302:	d404      	bmi.n	800a30e <_fflush_r+0x32>
 800a304:	0599      	lsls	r1, r3, #22
 800a306:	d402      	bmi.n	800a30e <_fflush_r+0x32>
 800a308:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a30a:	f7fd fe02 	bl	8007f12 <__retarget_lock_acquire_recursive>
 800a30e:	4628      	mov	r0, r5
 800a310:	4621      	mov	r1, r4
 800a312:	f7ff ff63 	bl	800a1dc <__sflush_r>
 800a316:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800a318:	4605      	mov	r5, r0
 800a31a:	07da      	lsls	r2, r3, #31
 800a31c:	d4e4      	bmi.n	800a2e8 <_fflush_r+0xc>
 800a31e:	89a3      	ldrh	r3, [r4, #12]
 800a320:	059b      	lsls	r3, r3, #22
 800a322:	d4e1      	bmi.n	800a2e8 <_fflush_r+0xc>
 800a324:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a326:	f7fd fdf5 	bl	8007f14 <__retarget_lock_release_recursive>
 800a32a:	e7dd      	b.n	800a2e8 <_fflush_r+0xc>

0800a32c <memmove>:
 800a32c:	4288      	cmp	r0, r1
 800a32e:	b510      	push	{r4, lr}
 800a330:	eb01 0402 	add.w	r4, r1, r2
 800a334:	d902      	bls.n	800a33c <memmove+0x10>
 800a336:	4284      	cmp	r4, r0
 800a338:	4623      	mov	r3, r4
 800a33a:	d807      	bhi.n	800a34c <memmove+0x20>
 800a33c:	1e43      	subs	r3, r0, #1
 800a33e:	42a1      	cmp	r1, r4
 800a340:	d008      	beq.n	800a354 <memmove+0x28>
 800a342:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a346:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a34a:	e7f8      	b.n	800a33e <memmove+0x12>
 800a34c:	4601      	mov	r1, r0
 800a34e:	4402      	add	r2, r0
 800a350:	428a      	cmp	r2, r1
 800a352:	d100      	bne.n	800a356 <memmove+0x2a>
 800a354:	bd10      	pop	{r4, pc}
 800a356:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a35a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800a35e:	e7f7      	b.n	800a350 <memmove+0x24>

0800a360 <_sbrk_r>:
 800a360:	b538      	push	{r3, r4, r5, lr}
 800a362:	2300      	movs	r3, #0
 800a364:	4d05      	ldr	r5, [pc, #20]	@ (800a37c <_sbrk_r+0x1c>)
 800a366:	4604      	mov	r4, r0
 800a368:	4608      	mov	r0, r1
 800a36a:	602b      	str	r3, [r5, #0]
 800a36c:	f7f7 fd24 	bl	8001db8 <_sbrk>
 800a370:	1c43      	adds	r3, r0, #1
 800a372:	d102      	bne.n	800a37a <_sbrk_r+0x1a>
 800a374:	682b      	ldr	r3, [r5, #0]
 800a376:	b103      	cbz	r3, 800a37a <_sbrk_r+0x1a>
 800a378:	6023      	str	r3, [r4, #0]
 800a37a:	bd38      	pop	{r3, r4, r5, pc}
 800a37c:	20001544 	.word	0x20001544

0800a380 <__assert_func>:
 800a380:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a382:	4614      	mov	r4, r2
 800a384:	461a      	mov	r2, r3
 800a386:	4b09      	ldr	r3, [pc, #36]	@ (800a3ac <__assert_func+0x2c>)
 800a388:	4605      	mov	r5, r0
 800a38a:	681b      	ldr	r3, [r3, #0]
 800a38c:	68d8      	ldr	r0, [r3, #12]
 800a38e:	b954      	cbnz	r4, 800a3a6 <__assert_func+0x26>
 800a390:	4b07      	ldr	r3, [pc, #28]	@ (800a3b0 <__assert_func+0x30>)
 800a392:	461c      	mov	r4, r3
 800a394:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800a398:	9100      	str	r1, [sp, #0]
 800a39a:	462b      	mov	r3, r5
 800a39c:	4905      	ldr	r1, [pc, #20]	@ (800a3b4 <__assert_func+0x34>)
 800a39e:	f000 f84f 	bl	800a440 <fiprintf>
 800a3a2:	f000 f85f 	bl	800a464 <abort>
 800a3a6:	4b04      	ldr	r3, [pc, #16]	@ (800a3b8 <__assert_func+0x38>)
 800a3a8:	e7f4      	b.n	800a394 <__assert_func+0x14>
 800a3aa:	bf00      	nop
 800a3ac:	200002f4 	.word	0x200002f4
 800a3b0:	0800afbd 	.word	0x0800afbd
 800a3b4:	0800af8f 	.word	0x0800af8f
 800a3b8:	0800af82 	.word	0x0800af82

0800a3bc <_calloc_r>:
 800a3bc:	b570      	push	{r4, r5, r6, lr}
 800a3be:	fba1 5402 	umull	r5, r4, r1, r2
 800a3c2:	b93c      	cbnz	r4, 800a3d4 <_calloc_r+0x18>
 800a3c4:	4629      	mov	r1, r5
 800a3c6:	f7fe ffc7 	bl	8009358 <_malloc_r>
 800a3ca:	4606      	mov	r6, r0
 800a3cc:	b928      	cbnz	r0, 800a3da <_calloc_r+0x1e>
 800a3ce:	2600      	movs	r6, #0
 800a3d0:	4630      	mov	r0, r6
 800a3d2:	bd70      	pop	{r4, r5, r6, pc}
 800a3d4:	220c      	movs	r2, #12
 800a3d6:	6002      	str	r2, [r0, #0]
 800a3d8:	e7f9      	b.n	800a3ce <_calloc_r+0x12>
 800a3da:	462a      	mov	r2, r5
 800a3dc:	4621      	mov	r1, r4
 800a3de:	f7fd fd08 	bl	8007df2 <memset>
 800a3e2:	e7f5      	b.n	800a3d0 <_calloc_r+0x14>

0800a3e4 <_realloc_r>:
 800a3e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a3e8:	4680      	mov	r8, r0
 800a3ea:	4615      	mov	r5, r2
 800a3ec:	460c      	mov	r4, r1
 800a3ee:	b921      	cbnz	r1, 800a3fa <_realloc_r+0x16>
 800a3f0:	4611      	mov	r1, r2
 800a3f2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a3f6:	f7fe bfaf 	b.w	8009358 <_malloc_r>
 800a3fa:	b92a      	cbnz	r2, 800a408 <_realloc_r+0x24>
 800a3fc:	f7fe fc00 	bl	8008c00 <_free_r>
 800a400:	2400      	movs	r4, #0
 800a402:	4620      	mov	r0, r4
 800a404:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a408:	f000 f833 	bl	800a472 <_malloc_usable_size_r>
 800a40c:	4285      	cmp	r5, r0
 800a40e:	4606      	mov	r6, r0
 800a410:	d802      	bhi.n	800a418 <_realloc_r+0x34>
 800a412:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800a416:	d8f4      	bhi.n	800a402 <_realloc_r+0x1e>
 800a418:	4629      	mov	r1, r5
 800a41a:	4640      	mov	r0, r8
 800a41c:	f7fe ff9c 	bl	8009358 <_malloc_r>
 800a420:	4607      	mov	r7, r0
 800a422:	2800      	cmp	r0, #0
 800a424:	d0ec      	beq.n	800a400 <_realloc_r+0x1c>
 800a426:	42b5      	cmp	r5, r6
 800a428:	462a      	mov	r2, r5
 800a42a:	4621      	mov	r1, r4
 800a42c:	bf28      	it	cs
 800a42e:	4632      	movcs	r2, r6
 800a430:	f7fd fd7f 	bl	8007f32 <memcpy>
 800a434:	4621      	mov	r1, r4
 800a436:	4640      	mov	r0, r8
 800a438:	f7fe fbe2 	bl	8008c00 <_free_r>
 800a43c:	463c      	mov	r4, r7
 800a43e:	e7e0      	b.n	800a402 <_realloc_r+0x1e>

0800a440 <fiprintf>:
 800a440:	b40e      	push	{r1, r2, r3}
 800a442:	b503      	push	{r0, r1, lr}
 800a444:	4601      	mov	r1, r0
 800a446:	ab03      	add	r3, sp, #12
 800a448:	4805      	ldr	r0, [pc, #20]	@ (800a460 <fiprintf+0x20>)
 800a44a:	f853 2b04 	ldr.w	r2, [r3], #4
 800a44e:	6800      	ldr	r0, [r0, #0]
 800a450:	9301      	str	r3, [sp, #4]
 800a452:	f000 f83d 	bl	800a4d0 <_vfiprintf_r>
 800a456:	b002      	add	sp, #8
 800a458:	f85d eb04 	ldr.w	lr, [sp], #4
 800a45c:	b003      	add	sp, #12
 800a45e:	4770      	bx	lr
 800a460:	200002f4 	.word	0x200002f4

0800a464 <abort>:
 800a464:	2006      	movs	r0, #6
 800a466:	b508      	push	{r3, lr}
 800a468:	f000 fa06 	bl	800a878 <raise>
 800a46c:	2001      	movs	r0, #1
 800a46e:	f7f7 fc73 	bl	8001d58 <_exit>

0800a472 <_malloc_usable_size_r>:
 800a472:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a476:	1f18      	subs	r0, r3, #4
 800a478:	2b00      	cmp	r3, #0
 800a47a:	bfbc      	itt	lt
 800a47c:	580b      	ldrlt	r3, [r1, r0]
 800a47e:	18c0      	addlt	r0, r0, r3
 800a480:	4770      	bx	lr

0800a482 <__sfputc_r>:
 800a482:	6893      	ldr	r3, [r2, #8]
 800a484:	b410      	push	{r4}
 800a486:	3b01      	subs	r3, #1
 800a488:	2b00      	cmp	r3, #0
 800a48a:	6093      	str	r3, [r2, #8]
 800a48c:	da07      	bge.n	800a49e <__sfputc_r+0x1c>
 800a48e:	6994      	ldr	r4, [r2, #24]
 800a490:	42a3      	cmp	r3, r4
 800a492:	db01      	blt.n	800a498 <__sfputc_r+0x16>
 800a494:	290a      	cmp	r1, #10
 800a496:	d102      	bne.n	800a49e <__sfputc_r+0x1c>
 800a498:	bc10      	pop	{r4}
 800a49a:	f000 b931 	b.w	800a700 <__swbuf_r>
 800a49e:	6813      	ldr	r3, [r2, #0]
 800a4a0:	1c58      	adds	r0, r3, #1
 800a4a2:	6010      	str	r0, [r2, #0]
 800a4a4:	7019      	strb	r1, [r3, #0]
 800a4a6:	4608      	mov	r0, r1
 800a4a8:	bc10      	pop	{r4}
 800a4aa:	4770      	bx	lr

0800a4ac <__sfputs_r>:
 800a4ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a4ae:	4606      	mov	r6, r0
 800a4b0:	460f      	mov	r7, r1
 800a4b2:	4614      	mov	r4, r2
 800a4b4:	18d5      	adds	r5, r2, r3
 800a4b6:	42ac      	cmp	r4, r5
 800a4b8:	d101      	bne.n	800a4be <__sfputs_r+0x12>
 800a4ba:	2000      	movs	r0, #0
 800a4bc:	e007      	b.n	800a4ce <__sfputs_r+0x22>
 800a4be:	463a      	mov	r2, r7
 800a4c0:	4630      	mov	r0, r6
 800a4c2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a4c6:	f7ff ffdc 	bl	800a482 <__sfputc_r>
 800a4ca:	1c43      	adds	r3, r0, #1
 800a4cc:	d1f3      	bne.n	800a4b6 <__sfputs_r+0xa>
 800a4ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800a4d0 <_vfiprintf_r>:
 800a4d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a4d4:	460d      	mov	r5, r1
 800a4d6:	4614      	mov	r4, r2
 800a4d8:	4698      	mov	r8, r3
 800a4da:	4606      	mov	r6, r0
 800a4dc:	b09d      	sub	sp, #116	@ 0x74
 800a4de:	b118      	cbz	r0, 800a4e8 <_vfiprintf_r+0x18>
 800a4e0:	6a03      	ldr	r3, [r0, #32]
 800a4e2:	b90b      	cbnz	r3, 800a4e8 <_vfiprintf_r+0x18>
 800a4e4:	f7fd fbec 	bl	8007cc0 <__sinit>
 800a4e8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a4ea:	07d9      	lsls	r1, r3, #31
 800a4ec:	d405      	bmi.n	800a4fa <_vfiprintf_r+0x2a>
 800a4ee:	89ab      	ldrh	r3, [r5, #12]
 800a4f0:	059a      	lsls	r2, r3, #22
 800a4f2:	d402      	bmi.n	800a4fa <_vfiprintf_r+0x2a>
 800a4f4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a4f6:	f7fd fd0c 	bl	8007f12 <__retarget_lock_acquire_recursive>
 800a4fa:	89ab      	ldrh	r3, [r5, #12]
 800a4fc:	071b      	lsls	r3, r3, #28
 800a4fe:	d501      	bpl.n	800a504 <_vfiprintf_r+0x34>
 800a500:	692b      	ldr	r3, [r5, #16]
 800a502:	b99b      	cbnz	r3, 800a52c <_vfiprintf_r+0x5c>
 800a504:	4629      	mov	r1, r5
 800a506:	4630      	mov	r0, r6
 800a508:	f000 f938 	bl	800a77c <__swsetup_r>
 800a50c:	b170      	cbz	r0, 800a52c <_vfiprintf_r+0x5c>
 800a50e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a510:	07dc      	lsls	r4, r3, #31
 800a512:	d504      	bpl.n	800a51e <_vfiprintf_r+0x4e>
 800a514:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800a518:	b01d      	add	sp, #116	@ 0x74
 800a51a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a51e:	89ab      	ldrh	r3, [r5, #12]
 800a520:	0598      	lsls	r0, r3, #22
 800a522:	d4f7      	bmi.n	800a514 <_vfiprintf_r+0x44>
 800a524:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a526:	f7fd fcf5 	bl	8007f14 <__retarget_lock_release_recursive>
 800a52a:	e7f3      	b.n	800a514 <_vfiprintf_r+0x44>
 800a52c:	2300      	movs	r3, #0
 800a52e:	9309      	str	r3, [sp, #36]	@ 0x24
 800a530:	2320      	movs	r3, #32
 800a532:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800a536:	2330      	movs	r3, #48	@ 0x30
 800a538:	f04f 0901 	mov.w	r9, #1
 800a53c:	f8cd 800c 	str.w	r8, [sp, #12]
 800a540:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 800a6ec <_vfiprintf_r+0x21c>
 800a544:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800a548:	4623      	mov	r3, r4
 800a54a:	469a      	mov	sl, r3
 800a54c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a550:	b10a      	cbz	r2, 800a556 <_vfiprintf_r+0x86>
 800a552:	2a25      	cmp	r2, #37	@ 0x25
 800a554:	d1f9      	bne.n	800a54a <_vfiprintf_r+0x7a>
 800a556:	ebba 0b04 	subs.w	fp, sl, r4
 800a55a:	d00b      	beq.n	800a574 <_vfiprintf_r+0xa4>
 800a55c:	465b      	mov	r3, fp
 800a55e:	4622      	mov	r2, r4
 800a560:	4629      	mov	r1, r5
 800a562:	4630      	mov	r0, r6
 800a564:	f7ff ffa2 	bl	800a4ac <__sfputs_r>
 800a568:	3001      	adds	r0, #1
 800a56a:	f000 80a7 	beq.w	800a6bc <_vfiprintf_r+0x1ec>
 800a56e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a570:	445a      	add	r2, fp
 800a572:	9209      	str	r2, [sp, #36]	@ 0x24
 800a574:	f89a 3000 	ldrb.w	r3, [sl]
 800a578:	2b00      	cmp	r3, #0
 800a57a:	f000 809f 	beq.w	800a6bc <_vfiprintf_r+0x1ec>
 800a57e:	2300      	movs	r3, #0
 800a580:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800a584:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a588:	f10a 0a01 	add.w	sl, sl, #1
 800a58c:	9304      	str	r3, [sp, #16]
 800a58e:	9307      	str	r3, [sp, #28]
 800a590:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800a594:	931a      	str	r3, [sp, #104]	@ 0x68
 800a596:	4654      	mov	r4, sl
 800a598:	2205      	movs	r2, #5
 800a59a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a59e:	4853      	ldr	r0, [pc, #332]	@ (800a6ec <_vfiprintf_r+0x21c>)
 800a5a0:	f7fd fcb9 	bl	8007f16 <memchr>
 800a5a4:	9a04      	ldr	r2, [sp, #16]
 800a5a6:	b9d8      	cbnz	r0, 800a5e0 <_vfiprintf_r+0x110>
 800a5a8:	06d1      	lsls	r1, r2, #27
 800a5aa:	bf44      	itt	mi
 800a5ac:	2320      	movmi	r3, #32
 800a5ae:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a5b2:	0713      	lsls	r3, r2, #28
 800a5b4:	bf44      	itt	mi
 800a5b6:	232b      	movmi	r3, #43	@ 0x2b
 800a5b8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a5bc:	f89a 3000 	ldrb.w	r3, [sl]
 800a5c0:	2b2a      	cmp	r3, #42	@ 0x2a
 800a5c2:	d015      	beq.n	800a5f0 <_vfiprintf_r+0x120>
 800a5c4:	4654      	mov	r4, sl
 800a5c6:	2000      	movs	r0, #0
 800a5c8:	f04f 0c0a 	mov.w	ip, #10
 800a5cc:	9a07      	ldr	r2, [sp, #28]
 800a5ce:	4621      	mov	r1, r4
 800a5d0:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a5d4:	3b30      	subs	r3, #48	@ 0x30
 800a5d6:	2b09      	cmp	r3, #9
 800a5d8:	d94b      	bls.n	800a672 <_vfiprintf_r+0x1a2>
 800a5da:	b1b0      	cbz	r0, 800a60a <_vfiprintf_r+0x13a>
 800a5dc:	9207      	str	r2, [sp, #28]
 800a5de:	e014      	b.n	800a60a <_vfiprintf_r+0x13a>
 800a5e0:	eba0 0308 	sub.w	r3, r0, r8
 800a5e4:	fa09 f303 	lsl.w	r3, r9, r3
 800a5e8:	4313      	orrs	r3, r2
 800a5ea:	46a2      	mov	sl, r4
 800a5ec:	9304      	str	r3, [sp, #16]
 800a5ee:	e7d2      	b.n	800a596 <_vfiprintf_r+0xc6>
 800a5f0:	9b03      	ldr	r3, [sp, #12]
 800a5f2:	1d19      	adds	r1, r3, #4
 800a5f4:	681b      	ldr	r3, [r3, #0]
 800a5f6:	9103      	str	r1, [sp, #12]
 800a5f8:	2b00      	cmp	r3, #0
 800a5fa:	bfbb      	ittet	lt
 800a5fc:	425b      	neglt	r3, r3
 800a5fe:	f042 0202 	orrlt.w	r2, r2, #2
 800a602:	9307      	strge	r3, [sp, #28]
 800a604:	9307      	strlt	r3, [sp, #28]
 800a606:	bfb8      	it	lt
 800a608:	9204      	strlt	r2, [sp, #16]
 800a60a:	7823      	ldrb	r3, [r4, #0]
 800a60c:	2b2e      	cmp	r3, #46	@ 0x2e
 800a60e:	d10a      	bne.n	800a626 <_vfiprintf_r+0x156>
 800a610:	7863      	ldrb	r3, [r4, #1]
 800a612:	2b2a      	cmp	r3, #42	@ 0x2a
 800a614:	d132      	bne.n	800a67c <_vfiprintf_r+0x1ac>
 800a616:	9b03      	ldr	r3, [sp, #12]
 800a618:	3402      	adds	r4, #2
 800a61a:	1d1a      	adds	r2, r3, #4
 800a61c:	681b      	ldr	r3, [r3, #0]
 800a61e:	9203      	str	r2, [sp, #12]
 800a620:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800a624:	9305      	str	r3, [sp, #20]
 800a626:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 800a6f0 <_vfiprintf_r+0x220>
 800a62a:	2203      	movs	r2, #3
 800a62c:	4650      	mov	r0, sl
 800a62e:	7821      	ldrb	r1, [r4, #0]
 800a630:	f7fd fc71 	bl	8007f16 <memchr>
 800a634:	b138      	cbz	r0, 800a646 <_vfiprintf_r+0x176>
 800a636:	2240      	movs	r2, #64	@ 0x40
 800a638:	9b04      	ldr	r3, [sp, #16]
 800a63a:	eba0 000a 	sub.w	r0, r0, sl
 800a63e:	4082      	lsls	r2, r0
 800a640:	4313      	orrs	r3, r2
 800a642:	3401      	adds	r4, #1
 800a644:	9304      	str	r3, [sp, #16]
 800a646:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a64a:	2206      	movs	r2, #6
 800a64c:	4829      	ldr	r0, [pc, #164]	@ (800a6f4 <_vfiprintf_r+0x224>)
 800a64e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800a652:	f7fd fc60 	bl	8007f16 <memchr>
 800a656:	2800      	cmp	r0, #0
 800a658:	d03f      	beq.n	800a6da <_vfiprintf_r+0x20a>
 800a65a:	4b27      	ldr	r3, [pc, #156]	@ (800a6f8 <_vfiprintf_r+0x228>)
 800a65c:	bb1b      	cbnz	r3, 800a6a6 <_vfiprintf_r+0x1d6>
 800a65e:	9b03      	ldr	r3, [sp, #12]
 800a660:	3307      	adds	r3, #7
 800a662:	f023 0307 	bic.w	r3, r3, #7
 800a666:	3308      	adds	r3, #8
 800a668:	9303      	str	r3, [sp, #12]
 800a66a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a66c:	443b      	add	r3, r7
 800a66e:	9309      	str	r3, [sp, #36]	@ 0x24
 800a670:	e76a      	b.n	800a548 <_vfiprintf_r+0x78>
 800a672:	460c      	mov	r4, r1
 800a674:	2001      	movs	r0, #1
 800a676:	fb0c 3202 	mla	r2, ip, r2, r3
 800a67a:	e7a8      	b.n	800a5ce <_vfiprintf_r+0xfe>
 800a67c:	2300      	movs	r3, #0
 800a67e:	f04f 0c0a 	mov.w	ip, #10
 800a682:	4619      	mov	r1, r3
 800a684:	3401      	adds	r4, #1
 800a686:	9305      	str	r3, [sp, #20]
 800a688:	4620      	mov	r0, r4
 800a68a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a68e:	3a30      	subs	r2, #48	@ 0x30
 800a690:	2a09      	cmp	r2, #9
 800a692:	d903      	bls.n	800a69c <_vfiprintf_r+0x1cc>
 800a694:	2b00      	cmp	r3, #0
 800a696:	d0c6      	beq.n	800a626 <_vfiprintf_r+0x156>
 800a698:	9105      	str	r1, [sp, #20]
 800a69a:	e7c4      	b.n	800a626 <_vfiprintf_r+0x156>
 800a69c:	4604      	mov	r4, r0
 800a69e:	2301      	movs	r3, #1
 800a6a0:	fb0c 2101 	mla	r1, ip, r1, r2
 800a6a4:	e7f0      	b.n	800a688 <_vfiprintf_r+0x1b8>
 800a6a6:	ab03      	add	r3, sp, #12
 800a6a8:	9300      	str	r3, [sp, #0]
 800a6aa:	462a      	mov	r2, r5
 800a6ac:	4630      	mov	r0, r6
 800a6ae:	4b13      	ldr	r3, [pc, #76]	@ (800a6fc <_vfiprintf_r+0x22c>)
 800a6b0:	a904      	add	r1, sp, #16
 800a6b2:	f7fc febb 	bl	800742c <_printf_float>
 800a6b6:	4607      	mov	r7, r0
 800a6b8:	1c78      	adds	r0, r7, #1
 800a6ba:	d1d6      	bne.n	800a66a <_vfiprintf_r+0x19a>
 800a6bc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a6be:	07d9      	lsls	r1, r3, #31
 800a6c0:	d405      	bmi.n	800a6ce <_vfiprintf_r+0x1fe>
 800a6c2:	89ab      	ldrh	r3, [r5, #12]
 800a6c4:	059a      	lsls	r2, r3, #22
 800a6c6:	d402      	bmi.n	800a6ce <_vfiprintf_r+0x1fe>
 800a6c8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a6ca:	f7fd fc23 	bl	8007f14 <__retarget_lock_release_recursive>
 800a6ce:	89ab      	ldrh	r3, [r5, #12]
 800a6d0:	065b      	lsls	r3, r3, #25
 800a6d2:	f53f af1f 	bmi.w	800a514 <_vfiprintf_r+0x44>
 800a6d6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800a6d8:	e71e      	b.n	800a518 <_vfiprintf_r+0x48>
 800a6da:	ab03      	add	r3, sp, #12
 800a6dc:	9300      	str	r3, [sp, #0]
 800a6de:	462a      	mov	r2, r5
 800a6e0:	4630      	mov	r0, r6
 800a6e2:	4b06      	ldr	r3, [pc, #24]	@ (800a6fc <_vfiprintf_r+0x22c>)
 800a6e4:	a904      	add	r1, sp, #16
 800a6e6:	f7fd f93f 	bl	8007968 <_printf_i>
 800a6ea:	e7e4      	b.n	800a6b6 <_vfiprintf_r+0x1e6>
 800a6ec:	0800af71 	.word	0x0800af71
 800a6f0:	0800af77 	.word	0x0800af77
 800a6f4:	0800af7b 	.word	0x0800af7b
 800a6f8:	0800742d 	.word	0x0800742d
 800a6fc:	0800a4ad 	.word	0x0800a4ad

0800a700 <__swbuf_r>:
 800a700:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a702:	460e      	mov	r6, r1
 800a704:	4614      	mov	r4, r2
 800a706:	4605      	mov	r5, r0
 800a708:	b118      	cbz	r0, 800a712 <__swbuf_r+0x12>
 800a70a:	6a03      	ldr	r3, [r0, #32]
 800a70c:	b90b      	cbnz	r3, 800a712 <__swbuf_r+0x12>
 800a70e:	f7fd fad7 	bl	8007cc0 <__sinit>
 800a712:	69a3      	ldr	r3, [r4, #24]
 800a714:	60a3      	str	r3, [r4, #8]
 800a716:	89a3      	ldrh	r3, [r4, #12]
 800a718:	071a      	lsls	r2, r3, #28
 800a71a:	d501      	bpl.n	800a720 <__swbuf_r+0x20>
 800a71c:	6923      	ldr	r3, [r4, #16]
 800a71e:	b943      	cbnz	r3, 800a732 <__swbuf_r+0x32>
 800a720:	4621      	mov	r1, r4
 800a722:	4628      	mov	r0, r5
 800a724:	f000 f82a 	bl	800a77c <__swsetup_r>
 800a728:	b118      	cbz	r0, 800a732 <__swbuf_r+0x32>
 800a72a:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 800a72e:	4638      	mov	r0, r7
 800a730:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a732:	6823      	ldr	r3, [r4, #0]
 800a734:	6922      	ldr	r2, [r4, #16]
 800a736:	b2f6      	uxtb	r6, r6
 800a738:	1a98      	subs	r0, r3, r2
 800a73a:	6963      	ldr	r3, [r4, #20]
 800a73c:	4637      	mov	r7, r6
 800a73e:	4283      	cmp	r3, r0
 800a740:	dc05      	bgt.n	800a74e <__swbuf_r+0x4e>
 800a742:	4621      	mov	r1, r4
 800a744:	4628      	mov	r0, r5
 800a746:	f7ff fdc9 	bl	800a2dc <_fflush_r>
 800a74a:	2800      	cmp	r0, #0
 800a74c:	d1ed      	bne.n	800a72a <__swbuf_r+0x2a>
 800a74e:	68a3      	ldr	r3, [r4, #8]
 800a750:	3b01      	subs	r3, #1
 800a752:	60a3      	str	r3, [r4, #8]
 800a754:	6823      	ldr	r3, [r4, #0]
 800a756:	1c5a      	adds	r2, r3, #1
 800a758:	6022      	str	r2, [r4, #0]
 800a75a:	701e      	strb	r6, [r3, #0]
 800a75c:	6962      	ldr	r2, [r4, #20]
 800a75e:	1c43      	adds	r3, r0, #1
 800a760:	429a      	cmp	r2, r3
 800a762:	d004      	beq.n	800a76e <__swbuf_r+0x6e>
 800a764:	89a3      	ldrh	r3, [r4, #12]
 800a766:	07db      	lsls	r3, r3, #31
 800a768:	d5e1      	bpl.n	800a72e <__swbuf_r+0x2e>
 800a76a:	2e0a      	cmp	r6, #10
 800a76c:	d1df      	bne.n	800a72e <__swbuf_r+0x2e>
 800a76e:	4621      	mov	r1, r4
 800a770:	4628      	mov	r0, r5
 800a772:	f7ff fdb3 	bl	800a2dc <_fflush_r>
 800a776:	2800      	cmp	r0, #0
 800a778:	d0d9      	beq.n	800a72e <__swbuf_r+0x2e>
 800a77a:	e7d6      	b.n	800a72a <__swbuf_r+0x2a>

0800a77c <__swsetup_r>:
 800a77c:	b538      	push	{r3, r4, r5, lr}
 800a77e:	4b29      	ldr	r3, [pc, #164]	@ (800a824 <__swsetup_r+0xa8>)
 800a780:	4605      	mov	r5, r0
 800a782:	6818      	ldr	r0, [r3, #0]
 800a784:	460c      	mov	r4, r1
 800a786:	b118      	cbz	r0, 800a790 <__swsetup_r+0x14>
 800a788:	6a03      	ldr	r3, [r0, #32]
 800a78a:	b90b      	cbnz	r3, 800a790 <__swsetup_r+0x14>
 800a78c:	f7fd fa98 	bl	8007cc0 <__sinit>
 800a790:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a794:	0719      	lsls	r1, r3, #28
 800a796:	d422      	bmi.n	800a7de <__swsetup_r+0x62>
 800a798:	06da      	lsls	r2, r3, #27
 800a79a:	d407      	bmi.n	800a7ac <__swsetup_r+0x30>
 800a79c:	2209      	movs	r2, #9
 800a79e:	602a      	str	r2, [r5, #0]
 800a7a0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a7a4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800a7a8:	81a3      	strh	r3, [r4, #12]
 800a7aa:	e033      	b.n	800a814 <__swsetup_r+0x98>
 800a7ac:	0758      	lsls	r0, r3, #29
 800a7ae:	d512      	bpl.n	800a7d6 <__swsetup_r+0x5a>
 800a7b0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800a7b2:	b141      	cbz	r1, 800a7c6 <__swsetup_r+0x4a>
 800a7b4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800a7b8:	4299      	cmp	r1, r3
 800a7ba:	d002      	beq.n	800a7c2 <__swsetup_r+0x46>
 800a7bc:	4628      	mov	r0, r5
 800a7be:	f7fe fa1f 	bl	8008c00 <_free_r>
 800a7c2:	2300      	movs	r3, #0
 800a7c4:	6363      	str	r3, [r4, #52]	@ 0x34
 800a7c6:	89a3      	ldrh	r3, [r4, #12]
 800a7c8:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800a7cc:	81a3      	strh	r3, [r4, #12]
 800a7ce:	2300      	movs	r3, #0
 800a7d0:	6063      	str	r3, [r4, #4]
 800a7d2:	6923      	ldr	r3, [r4, #16]
 800a7d4:	6023      	str	r3, [r4, #0]
 800a7d6:	89a3      	ldrh	r3, [r4, #12]
 800a7d8:	f043 0308 	orr.w	r3, r3, #8
 800a7dc:	81a3      	strh	r3, [r4, #12]
 800a7de:	6923      	ldr	r3, [r4, #16]
 800a7e0:	b94b      	cbnz	r3, 800a7f6 <__swsetup_r+0x7a>
 800a7e2:	89a3      	ldrh	r3, [r4, #12]
 800a7e4:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800a7e8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a7ec:	d003      	beq.n	800a7f6 <__swsetup_r+0x7a>
 800a7ee:	4621      	mov	r1, r4
 800a7f0:	4628      	mov	r0, r5
 800a7f2:	f000 f882 	bl	800a8fa <__smakebuf_r>
 800a7f6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a7fa:	f013 0201 	ands.w	r2, r3, #1
 800a7fe:	d00a      	beq.n	800a816 <__swsetup_r+0x9a>
 800a800:	2200      	movs	r2, #0
 800a802:	60a2      	str	r2, [r4, #8]
 800a804:	6962      	ldr	r2, [r4, #20]
 800a806:	4252      	negs	r2, r2
 800a808:	61a2      	str	r2, [r4, #24]
 800a80a:	6922      	ldr	r2, [r4, #16]
 800a80c:	b942      	cbnz	r2, 800a820 <__swsetup_r+0xa4>
 800a80e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800a812:	d1c5      	bne.n	800a7a0 <__swsetup_r+0x24>
 800a814:	bd38      	pop	{r3, r4, r5, pc}
 800a816:	0799      	lsls	r1, r3, #30
 800a818:	bf58      	it	pl
 800a81a:	6962      	ldrpl	r2, [r4, #20]
 800a81c:	60a2      	str	r2, [r4, #8]
 800a81e:	e7f4      	b.n	800a80a <__swsetup_r+0x8e>
 800a820:	2000      	movs	r0, #0
 800a822:	e7f7      	b.n	800a814 <__swsetup_r+0x98>
 800a824:	200002f4 	.word	0x200002f4

0800a828 <_raise_r>:
 800a828:	291f      	cmp	r1, #31
 800a82a:	b538      	push	{r3, r4, r5, lr}
 800a82c:	4605      	mov	r5, r0
 800a82e:	460c      	mov	r4, r1
 800a830:	d904      	bls.n	800a83c <_raise_r+0x14>
 800a832:	2316      	movs	r3, #22
 800a834:	6003      	str	r3, [r0, #0]
 800a836:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800a83a:	bd38      	pop	{r3, r4, r5, pc}
 800a83c:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800a83e:	b112      	cbz	r2, 800a846 <_raise_r+0x1e>
 800a840:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800a844:	b94b      	cbnz	r3, 800a85a <_raise_r+0x32>
 800a846:	4628      	mov	r0, r5
 800a848:	f000 f830 	bl	800a8ac <_getpid_r>
 800a84c:	4622      	mov	r2, r4
 800a84e:	4601      	mov	r1, r0
 800a850:	4628      	mov	r0, r5
 800a852:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a856:	f000 b817 	b.w	800a888 <_kill_r>
 800a85a:	2b01      	cmp	r3, #1
 800a85c:	d00a      	beq.n	800a874 <_raise_r+0x4c>
 800a85e:	1c59      	adds	r1, r3, #1
 800a860:	d103      	bne.n	800a86a <_raise_r+0x42>
 800a862:	2316      	movs	r3, #22
 800a864:	6003      	str	r3, [r0, #0]
 800a866:	2001      	movs	r0, #1
 800a868:	e7e7      	b.n	800a83a <_raise_r+0x12>
 800a86a:	2100      	movs	r1, #0
 800a86c:	4620      	mov	r0, r4
 800a86e:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800a872:	4798      	blx	r3
 800a874:	2000      	movs	r0, #0
 800a876:	e7e0      	b.n	800a83a <_raise_r+0x12>

0800a878 <raise>:
 800a878:	4b02      	ldr	r3, [pc, #8]	@ (800a884 <raise+0xc>)
 800a87a:	4601      	mov	r1, r0
 800a87c:	6818      	ldr	r0, [r3, #0]
 800a87e:	f7ff bfd3 	b.w	800a828 <_raise_r>
 800a882:	bf00      	nop
 800a884:	200002f4 	.word	0x200002f4

0800a888 <_kill_r>:
 800a888:	b538      	push	{r3, r4, r5, lr}
 800a88a:	2300      	movs	r3, #0
 800a88c:	4d06      	ldr	r5, [pc, #24]	@ (800a8a8 <_kill_r+0x20>)
 800a88e:	4604      	mov	r4, r0
 800a890:	4608      	mov	r0, r1
 800a892:	4611      	mov	r1, r2
 800a894:	602b      	str	r3, [r5, #0]
 800a896:	f7f7 fa55 	bl	8001d44 <_kill>
 800a89a:	1c43      	adds	r3, r0, #1
 800a89c:	d102      	bne.n	800a8a4 <_kill_r+0x1c>
 800a89e:	682b      	ldr	r3, [r5, #0]
 800a8a0:	b103      	cbz	r3, 800a8a4 <_kill_r+0x1c>
 800a8a2:	6023      	str	r3, [r4, #0]
 800a8a4:	bd38      	pop	{r3, r4, r5, pc}
 800a8a6:	bf00      	nop
 800a8a8:	20001544 	.word	0x20001544

0800a8ac <_getpid_r>:
 800a8ac:	f7f7 ba48 	b.w	8001d40 <_getpid>

0800a8b0 <__swhatbuf_r>:
 800a8b0:	b570      	push	{r4, r5, r6, lr}
 800a8b2:	460c      	mov	r4, r1
 800a8b4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a8b8:	4615      	mov	r5, r2
 800a8ba:	2900      	cmp	r1, #0
 800a8bc:	461e      	mov	r6, r3
 800a8be:	b096      	sub	sp, #88	@ 0x58
 800a8c0:	da0c      	bge.n	800a8dc <__swhatbuf_r+0x2c>
 800a8c2:	89a3      	ldrh	r3, [r4, #12]
 800a8c4:	2100      	movs	r1, #0
 800a8c6:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800a8ca:	bf14      	ite	ne
 800a8cc:	2340      	movne	r3, #64	@ 0x40
 800a8ce:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800a8d2:	2000      	movs	r0, #0
 800a8d4:	6031      	str	r1, [r6, #0]
 800a8d6:	602b      	str	r3, [r5, #0]
 800a8d8:	b016      	add	sp, #88	@ 0x58
 800a8da:	bd70      	pop	{r4, r5, r6, pc}
 800a8dc:	466a      	mov	r2, sp
 800a8de:	f000 f849 	bl	800a974 <_fstat_r>
 800a8e2:	2800      	cmp	r0, #0
 800a8e4:	dbed      	blt.n	800a8c2 <__swhatbuf_r+0x12>
 800a8e6:	9901      	ldr	r1, [sp, #4]
 800a8e8:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800a8ec:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800a8f0:	4259      	negs	r1, r3
 800a8f2:	4159      	adcs	r1, r3
 800a8f4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a8f8:	e7eb      	b.n	800a8d2 <__swhatbuf_r+0x22>

0800a8fa <__smakebuf_r>:
 800a8fa:	898b      	ldrh	r3, [r1, #12]
 800a8fc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a8fe:	079d      	lsls	r5, r3, #30
 800a900:	4606      	mov	r6, r0
 800a902:	460c      	mov	r4, r1
 800a904:	d507      	bpl.n	800a916 <__smakebuf_r+0x1c>
 800a906:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800a90a:	6023      	str	r3, [r4, #0]
 800a90c:	6123      	str	r3, [r4, #16]
 800a90e:	2301      	movs	r3, #1
 800a910:	6163      	str	r3, [r4, #20]
 800a912:	b003      	add	sp, #12
 800a914:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a916:	466a      	mov	r2, sp
 800a918:	ab01      	add	r3, sp, #4
 800a91a:	f7ff ffc9 	bl	800a8b0 <__swhatbuf_r>
 800a91e:	9f00      	ldr	r7, [sp, #0]
 800a920:	4605      	mov	r5, r0
 800a922:	4639      	mov	r1, r7
 800a924:	4630      	mov	r0, r6
 800a926:	f7fe fd17 	bl	8009358 <_malloc_r>
 800a92a:	b948      	cbnz	r0, 800a940 <__smakebuf_r+0x46>
 800a92c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a930:	059a      	lsls	r2, r3, #22
 800a932:	d4ee      	bmi.n	800a912 <__smakebuf_r+0x18>
 800a934:	f023 0303 	bic.w	r3, r3, #3
 800a938:	f043 0302 	orr.w	r3, r3, #2
 800a93c:	81a3      	strh	r3, [r4, #12]
 800a93e:	e7e2      	b.n	800a906 <__smakebuf_r+0xc>
 800a940:	89a3      	ldrh	r3, [r4, #12]
 800a942:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800a946:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a94a:	81a3      	strh	r3, [r4, #12]
 800a94c:	9b01      	ldr	r3, [sp, #4]
 800a94e:	6020      	str	r0, [r4, #0]
 800a950:	b15b      	cbz	r3, 800a96a <__smakebuf_r+0x70>
 800a952:	4630      	mov	r0, r6
 800a954:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a958:	f000 f81e 	bl	800a998 <_isatty_r>
 800a95c:	b128      	cbz	r0, 800a96a <__smakebuf_r+0x70>
 800a95e:	89a3      	ldrh	r3, [r4, #12]
 800a960:	f023 0303 	bic.w	r3, r3, #3
 800a964:	f043 0301 	orr.w	r3, r3, #1
 800a968:	81a3      	strh	r3, [r4, #12]
 800a96a:	89a3      	ldrh	r3, [r4, #12]
 800a96c:	431d      	orrs	r5, r3
 800a96e:	81a5      	strh	r5, [r4, #12]
 800a970:	e7cf      	b.n	800a912 <__smakebuf_r+0x18>
	...

0800a974 <_fstat_r>:
 800a974:	b538      	push	{r3, r4, r5, lr}
 800a976:	2300      	movs	r3, #0
 800a978:	4d06      	ldr	r5, [pc, #24]	@ (800a994 <_fstat_r+0x20>)
 800a97a:	4604      	mov	r4, r0
 800a97c:	4608      	mov	r0, r1
 800a97e:	4611      	mov	r1, r2
 800a980:	602b      	str	r3, [r5, #0]
 800a982:	f7f7 fa0f 	bl	8001da4 <_fstat>
 800a986:	1c43      	adds	r3, r0, #1
 800a988:	d102      	bne.n	800a990 <_fstat_r+0x1c>
 800a98a:	682b      	ldr	r3, [r5, #0]
 800a98c:	b103      	cbz	r3, 800a990 <_fstat_r+0x1c>
 800a98e:	6023      	str	r3, [r4, #0]
 800a990:	bd38      	pop	{r3, r4, r5, pc}
 800a992:	bf00      	nop
 800a994:	20001544 	.word	0x20001544

0800a998 <_isatty_r>:
 800a998:	b538      	push	{r3, r4, r5, lr}
 800a99a:	2300      	movs	r3, #0
 800a99c:	4d05      	ldr	r5, [pc, #20]	@ (800a9b4 <_isatty_r+0x1c>)
 800a99e:	4604      	mov	r4, r0
 800a9a0:	4608      	mov	r0, r1
 800a9a2:	602b      	str	r3, [r5, #0]
 800a9a4:	f7f7 fa04 	bl	8001db0 <_isatty>
 800a9a8:	1c43      	adds	r3, r0, #1
 800a9aa:	d102      	bne.n	800a9b2 <_isatty_r+0x1a>
 800a9ac:	682b      	ldr	r3, [r5, #0]
 800a9ae:	b103      	cbz	r3, 800a9b2 <_isatty_r+0x1a>
 800a9b0:	6023      	str	r3, [r4, #0]
 800a9b2:	bd38      	pop	{r3, r4, r5, pc}
 800a9b4:	20001544 	.word	0x20001544

0800a9b8 <_init>:
 800a9b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a9ba:	bf00      	nop
 800a9bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a9be:	bc08      	pop	{r3}
 800a9c0:	469e      	mov	lr, r3
 800a9c2:	4770      	bx	lr

0800a9c4 <_fini>:
 800a9c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a9c6:	bf00      	nop
 800a9c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a9ca:	bc08      	pop	{r3}
 800a9cc:	469e      	mov	lr, r3
 800a9ce:	4770      	bx	lr
